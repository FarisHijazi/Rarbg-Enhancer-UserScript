var OCRAD = (function(){
	function createOcradInstance(){


		// The Module object: Our interface to the outside world. We import
		// and export values on it, and do the work to get that through
		// closure compiler if necessary. There are various ways Module can be used:
		// 1. Not defined. We create it here
		// 2. A function parameter, function(Module) { ..generated code.. }
		// 3. pre-run appended it, var Module = {}; ..generated code..
		// 4. External script tag defines var Module.
		// We need to do an eval in order to handle the closure compiler
		// case, where this code here is minified but Module was defined
		// elsewhere (e.g. case 4 above). We also need to check if Module
		// already exists (e.g. case 3 above).
		// Note that if you want to run closure, and also to use Module
		// after the generated code, you will need to define   var Module = {};
		// before the code. Then that object will be used in the code, and you
		// can continue to use Module afterwards as well.
		var Module;
		if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

		// Sometimes an existing Module object exists with properties
		// meant to overwrite the default module functionality. Here
		// we collect those properties and reapply _after_ we configure
		// the current environment's defaults to avoid having to be so
		// defensive during initialization.
		var moduleOverrides = {};
		for (var key in Module) {
			if (Module.hasOwnProperty(key)) {
				moduleOverrides[key] = Module[key];
			}
		}

		// The environment setup code below is customized to use Module.
		// *** Environment setup code ***
		var ENVIRONMENT_IS_WEB = false;
		var ENVIRONMENT_IS_WORKER = false;
		var ENVIRONMENT_IS_NODE = false;
		var ENVIRONMENT_IS_SHELL = false;

		// Three configurations we can be running in:
		// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
		// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
		// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

		if (Module['ENVIRONMENT']) {
			if (Module['ENVIRONMENT'] === 'WEB') {
				ENVIRONMENT_IS_WEB = true;
			} else if (Module['ENVIRONMENT'] === 'WORKER') {
				ENVIRONMENT_IS_WORKER = true;
			} else if (Module['ENVIRONMENT'] === 'NODE') {
				ENVIRONMENT_IS_NODE = true;
			} else if (Module['ENVIRONMENT'] === 'SHELL') {
				ENVIRONMENT_IS_SHELL = true;
			} else {
				throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
			}
		} else {
			ENVIRONMENT_IS_WEB = typeof window === 'object';
			ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
			ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
			ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
		}


		if (ENVIRONMENT_IS_NODE) {
			// Expose functionality in the same simple way that the shells work
			// Note that we pollute the global namespace here, otherwise we break in node
			if (!Module['print']) Module['print'] = console.log;
			if (!Module['printErr']) Module['printErr'] = console.warn;

			var nodeFS;
			var nodePath;

			Module['read'] = function read(filename, binary) {
				if (!nodeFS) nodeFS = require('fs');
				if (!nodePath) nodePath = require('path');

				filename = nodePath['normalize'](filename);
				var ret = nodeFS['readFileSync'](filename);
				// The path is absolute if the normalized version is the same as the resolved.
				if (!ret && filename != nodePath['resolve'](filename)) {
					filename = path.join(__dirname, '..', 'src', filename);
					ret = nodeFS['readFileSync'](filename);
				}
				if (ret && !binary) ret = ret.toString();
				return ret;
			};

			Module['readBinary'] = function readBinary(filename) {
				var ret = Module['read'](filename, true);
				if (!ret.buffer) {
					ret = new Uint8Array(ret);
				}
				assert(ret.buffer);
				return ret;
			};

			Module['load'] = function load(f) {
				globalEval(read(f));
			};

			if (!Module['thisProgram']) {
				if (process['argv'].length > 1) {
					Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
				} else {
					Module['thisProgram'] = 'unknown-program';
				}
			}

			Module['arguments'] = process['argv'].slice(2);

			if (typeof module !== 'undefined') {
				module['exports'] = Module;
			}

			process['on']('uncaughtException', function(ex) {
				// suppress ExitStatus exceptions from showing an error
				if (!(ex instanceof ExitStatus)) {
					throw ex;
				}
			});

			Module['inspect'] = function () { return '[Emscripten Module object]'; };
		}
		else if (ENVIRONMENT_IS_SHELL) {
			if (!Module['print']) Module['print'] = print;
			if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

			if (typeof read != 'undefined') {
				Module['read'] = read;
			} else {
				Module['read'] = function read() { throw 'no read() available (jsc?)' };
			}

			Module['readBinary'] = function readBinary(f) {
				if (typeof readbuffer === 'function') {
					return new Uint8Array(readbuffer(f));
				}
				var data = read(f, 'binary');
				assert(typeof data === 'object');
				return data;
			};

			if (typeof scriptArgs != 'undefined') {
				Module['arguments'] = scriptArgs;
			} else if (typeof arguments != 'undefined') {
				Module['arguments'] = arguments;
			}

		}
		else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
			Module['read'] = function read(url) {
				var xhr = new XMLHttpRequest();
				xhr.open('GET', url, false);
				xhr.send(null);
				return xhr.responseText;
			};

			Module['readAsync'] = function readAsync(url, onload, onerror) {
				var xhr = new XMLHttpRequest();
				xhr.open('GET', url, true);
				xhr.responseType = 'arraybuffer';
				xhr.onload = function xhr_onload() {
					if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
						onload(xhr.response);
					} else {
						onerror();
					}
				};
				xhr.onerror = onerror;
				xhr.send(null);
			};

			if (typeof arguments != 'undefined') {
				Module['arguments'] = arguments;
			}

			if (typeof console !== 'undefined') {
				if (!Module['print']) Module['print'] = function print(x) {
					console.log(x);
				};
				if (!Module['printErr']) Module['printErr'] = function printErr(x) {
					console.warn(x);
				};
			} else {
				// Probably a worker, and without console.log. We can do very little here...
				var TRY_USE_DUMP = false;
				if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
					dump(x);
				}) : (function(x) {
					// self.postMessage(x); // enable this if you want stdout to be sent as messages
				}));
			}

			if (ENVIRONMENT_IS_WORKER) {
				Module['load'] = importScripts;
			}

			if (typeof Module['setWindowTitle'] === 'undefined') {
				Module['setWindowTitle'] = function(title) { document.title = title };
			}
		}
		else {
			// Unreachable because SHELL is dependant on the others
			throw 'Unknown runtime environment. Where are we?';
		}

		function globalEval(x) {
			eval.call(null, x);
		}
		if (!Module['load'] && Module['read']) {
			Module['load'] = function load(f) {
				globalEval(Module['read'](f));
			};
		}
		if (!Module['print']) {
			Module['print'] = function(){};
		}
		if (!Module['printErr']) {
			Module['printErr'] = Module['print'];
		}
		if (!Module['arguments']) {
			Module['arguments'] = [];
		}
		if (!Module['thisProgram']) {
			Module['thisProgram'] = './this.program';
		}

		// *** Environment setup code ***

		// Closure helpers
		Module.print = Module['print'];
		Module.printErr = Module['printErr'];

		// Callbacks
		Module['preRun'] = [];
		Module['postRun'] = [];

		// Merge back in the overrides
		for (var key in moduleOverrides) {
			if (moduleOverrides.hasOwnProperty(key)) {
				Module[key] = moduleOverrides[key];
			}
		}
		// Free the object hierarchy contained in the overrides, this lets the GC
		// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
		moduleOverrides = undefined;



		// {{PREAMBLE_ADDITIONS}}

		// === Preamble library stuff ===

		// Documentation for the public APIs defined in this file must be updated in: 
		//    site/source/docs/api_reference/preamble.js.rst
		// A prebuilt local version of the documentation is available at: 
		//    site/build/text/docs/api_reference/preamble.js.txt
		// You can also build docs locally as HTML or other formats in site/
		// An online HTML version (which may be of a different version of Emscripten)
		//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

		//========================================
		// Runtime code shared with compiler
		//========================================

		var Runtime = {
			setTempRet0: function (value) {
				tempRet0 = value;
			},
			getTempRet0: function () {
				return tempRet0;
			},
			stackSave: function () {
				return STACKTOP;
			},
			stackRestore: function (stackTop) {
				STACKTOP = stackTop;
			},
			getNativeTypeSize: function (type) {
				switch (type) {
					case 'i1': case 'i8': return 1;
					case 'i16': return 2;
					case 'i32': return 4;
					case 'i64': return 8;
					case 'float': return 4;
					case 'double': return 8;
					default: {
						if (type[type.length-1] === '*') {
							return Runtime.QUANTUM_SIZE; // A pointer
						} else if (type[0] === 'i') {
							var bits = parseInt(type.substr(1));
							assert(bits % 8 === 0);
							return bits/8;
						} else {
							return 0;
						}
					}
				}
			},
			getNativeFieldSize: function (type) {
				return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
			},
			STACK_ALIGN: 16,
			prepVararg: function (ptr, type) {
				if (type === 'double' || type === 'i64') {
					// move so the load is aligned
					if (ptr & 7) {
						assert((ptr & 7) === 4);
						ptr += 4;
					}
				} else {
					assert((ptr & 3) === 0);
				}
				return ptr;
			},
			getAlignSize: function (type, size, vararg) {
				// we align i64s and doubles on 64-bit boundaries, unlike x86
				if (!vararg && (type == 'i64' || type == 'double')) return 8;
				if (!type) return Math.min(size, 8); // align structures internally to 64 bits
				return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
			},
			dynCall: function (sig, ptr, args) {
				if (args && args.length) {
					assert(args.length == sig.length-1);
					if (!args.splice) args = Array.prototype.slice.call(args);
					args.splice(0, 0, ptr);
					assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
					return Module['dynCall_' + sig].apply(null, args);
				} else {
					assert(sig.length == 1);
					assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
					return Module['dynCall_' + sig].call(null, ptr);
				}
			},
			functionPointers: [],
			addFunction: function (func) {
				for (var i = 0; i < Runtime.functionPointers.length; i++) {
					if (!Runtime.functionPointers[i]) {
						Runtime.functionPointers[i] = func;
						return 2*(1 + i);
					}
				}
				throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
			},
			removeFunction: function (index) {
				Runtime.functionPointers[(index-2)/2] = null;
			},
			warnOnce: function (text) {
				if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
				if (!Runtime.warnOnce.shown[text]) {
					Runtime.warnOnce.shown[text] = 1;
					Module.printErr(text);
				}
			},
			funcWrappers: {},
			getFuncWrapper: function (func, sig) {
				assert(sig);
				if (!Runtime.funcWrappers[sig]) {
					Runtime.funcWrappers[sig] = {};
				}
				var sigCache = Runtime.funcWrappers[sig];
				if (!sigCache[func]) {
					sigCache[func] = function dynCall_wrapper() {
						return Runtime.dynCall(sig, func, arguments);
					};
				}
				return sigCache[func];
			},
			getCompilerSetting: function (name) {
				throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
			},
			stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
			staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
			dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
			alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
			makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
			GLOBAL_BASE: 8,
			QUANTUM_SIZE: 4,
			__dummy__: 0
		}



		Module["Runtime"] = Runtime;



		//========================================
		// Runtime essentials
		//========================================

		var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
		var EXITSTATUS = 0;

		function assert(condition, text) {
			if (!condition) {
				abort('Assertion failed: ' + text);
			}
		}

		var globalScope = this;

		// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
		function getCFunc(ident) {
			var func = Module['_' + ident]; // closure exported function
			if (!func) {
				try { func = eval('_' + ident); } catch(e) {}
			}
			assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
			return func;
		}

		var cwrap, ccall;
		(function(){
			var JSfuncs = {
				// Helpers for cwrap -- it can't refer to Runtime directly because it might
				// be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
				// out what the minified function name is.
				'stackSave': function() {
					Runtime.stackSave()
				},
				'stackRestore': function() {
					Runtime.stackRestore()
				},
				// type conversion from js to c
				'arrayToC' : function(arr) {
					var ret = Runtime.stackAlloc(arr.length);
					writeArrayToMemory(arr, ret);
					return ret;
				},
				'stringToC' : function(str) {
					var ret = 0;
					if (str !== null && str !== undefined && str !== 0) { // null string
						// at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
						ret = Runtime.stackAlloc((str.length << 2) + 1);
						writeStringToMemory(str, ret);
					}
					return ret;
				}
			};
			// For fast lookup of conversion functions
			var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

			// C calling interface. 
			ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
				var func = getCFunc(ident);
				var cArgs = [];
				var stack = 0;
				assert(returnType !== 'array', 'Return type should not be "array".');
				if (args) {
					for (var i = 0; i < args.length; i++) {
						var converter = toC[argTypes[i]];
						if (converter) {
							if (stack === 0) stack = Runtime.stackSave();
							cArgs[i] = converter(args[i]);
						} else {
							cArgs[i] = args[i];
						}
					}
				}
				var ret = func.apply(null, cArgs);
				if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
					assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
				}
				if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
				if (returnType === 'string') ret = Pointer_stringify(ret);
				if (stack !== 0) {
					if (opts && opts.async) {
						EmterpreterAsync.asyncFinalizers.push(function() {
							Runtime.stackRestore(stack);
						});
						return;
					}
					Runtime.stackRestore(stack);
				}
				return ret;
			}

			var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
			function parseJSFunc(jsfunc) {
				// Match the body and the return value of a javascript function source
				var parsed = jsfunc.toString().match(sourceRegex).slice(1);
				return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
			}

			// sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
			var JSsource = null;
			function ensureJSsource() {
				if (!JSsource) {
					JSsource = {};
					for (var fun in JSfuncs) {
						if (JSfuncs.hasOwnProperty(fun)) {
							// Elements of toCsource are arrays of three items:
							// the code, and the return value
							JSsource[fun] = parseJSFunc(JSfuncs[fun]);
						}
					}
				}
			}

			cwrap = function cwrap(ident, returnType, argTypes) {
				argTypes = argTypes || [];
				var cfunc = getCFunc(ident);
				// When the function takes numbers and returns a number, we can just return
				// the original function
				var numericArgs = argTypes.every(function(type){ return type === 'number'});
				var numericRet = (returnType !== 'string');
				if ( numericRet && numericArgs) {
					return cfunc;
				}
				// Creation of the arguments list (["$1","$2",...,"$nargs"])
				var argNames = argTypes.map(function(x,i){return '$'+i});
				var funcstr = "(function(" + argNames.join(',') + ") {";
				var nargs = argTypes.length;
				if (!numericArgs) {
					// Generate the code needed to convert the arguments from javascript
					// values to pointers
					ensureJSsource();
					funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
					for (var i = 0; i < nargs; i++) {
						var arg = argNames[i], type = argTypes[i];
						if (type === 'number') continue;
						var convertCode = JSsource[type + 'ToC']; // [code, return]
						funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
						funcstr += convertCode.body + ';';
						funcstr += arg + '=(' + convertCode.returnValue + ');';
					}
				}

				// When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
				var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
				// Call the function
				funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
				if (!numericRet) { // Return type can only by 'string' or 'number'
					// Convert the result to a string
					var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
					funcstr += 'ret = ' + strgfy + '(ret);';
				}
				funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
				if (!numericArgs) {
					// If we had a stack, restore it
					ensureJSsource();
					funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
				}
				funcstr += 'return ret})';
				return eval(funcstr);
			};
		})();
		Module["ccall"] = ccall;
		Module["cwrap"] = cwrap;

		function setValue(ptr, value, type, noSafe) {
			type = type || 'i8';
			if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
			switch(type) {
				case 'i1': HEAP8[((ptr)>>0)]=value; break;
				case 'i8': HEAP8[((ptr)>>0)]=value; break;
				case 'i16': HEAP16[((ptr)>>1)]=value; break;
				case 'i32': HEAP32[((ptr)>>2)]=value; break;
				case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
				case 'float': HEAPF32[((ptr)>>2)]=value; break;
				case 'double': HEAPF64[((ptr)>>3)]=value; break;
				default: abort('invalid type for setValue: ' + type);
			}
		}
		Module["setValue"] = setValue;


		function getValue(ptr, type, noSafe) {
			type = type || 'i8';
			if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
			switch(type) {
				case 'i1': return HEAP8[((ptr)>>0)];
				case 'i8': return HEAP8[((ptr)>>0)];
				case 'i16': return HEAP16[((ptr)>>1)];
				case 'i32': return HEAP32[((ptr)>>2)];
				case 'i64': return HEAP32[((ptr)>>2)];
				case 'float': return HEAPF32[((ptr)>>2)];
				case 'double': return HEAPF64[((ptr)>>3)];
				default: abort('invalid type for setValue: ' + type);
			}
			return null;
		}
		Module["getValue"] = getValue;

		var ALLOC_NORMAL = 0; // Tries to use _malloc()
		var ALLOC_STACK = 1; // Lives for the duration of the current function call
		var ALLOC_STATIC = 2; // Cannot be freed
		var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
		var ALLOC_NONE = 4; // Do not allocate
		Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
		Module["ALLOC_STACK"] = ALLOC_STACK;
		Module["ALLOC_STATIC"] = ALLOC_STATIC;
		Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
		Module["ALLOC_NONE"] = ALLOC_NONE;

		// allocate(): This is for internal use. You can use it yourself as well, but the interface
		//             is a little tricky (see docs right below). The reason is that it is optimized
		//             for multiple syntaxes to save space in generated code. So you should
		//             normally not use allocate(), and instead allocate memory using _malloc(),
		//             initialize it with setValue(), and so forth.
		// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
		//        in *bytes* (note that this is sometimes confusing: the next parameter does not
		//        affect this!)
		// @types: Either an array of types, one for each byte (or 0 if no type at that position),
		//         or a single type which is used for the entire block. This only matters if there
		//         is initial data - if @slab is a number, then this does not matter at all and is
		//         ignored.
		// @allocator: How to allocate memory, see ALLOC_*
		function allocate(slab, types, allocator, ptr) {
			var zeroinit, size;
			if (typeof slab === 'number') {
				zeroinit = true;
				size = slab;
			} else {
				zeroinit = false;
				size = slab.length;
			}

			var singleType = typeof types === 'string' ? types : null;

			var ret;
			if (allocator == ALLOC_NONE) {
				ret = ptr;
			} else {
				ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
			}

			if (zeroinit) {
				var ptr = ret, stop;
				assert((ret & 3) == 0);
				stop = ret + (size & ~3);
				for (; ptr < stop; ptr += 4) {
					HEAP32[((ptr)>>2)]=0;
				}
				stop = ret + size;
				while (ptr < stop) {
					HEAP8[((ptr++)>>0)]=0;
				}
				return ret;
			}

			if (singleType === 'i8') {
				if (slab.subarray || slab.slice) {
					HEAPU8.set(slab, ret);
				} else {
					HEAPU8.set(new Uint8Array(slab), ret);
				}
				return ret;
			}

			var i = 0, type, typeSize, previousType;
			while (i < size) {
				var curr = slab[i];

				if (typeof curr === 'function') {
					curr = Runtime.getFunctionIndex(curr);
				}

				type = singleType || types[i];
				if (type === 0) {
					i++;
					continue;
				}
				assert(type, 'Must know what type to store in allocate!');

				if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

				setValue(ret+i, curr, type);

				// no need to look up size unless type changes, so cache it
				if (previousType !== type) {
					typeSize = Runtime.getNativeTypeSize(type);
					previousType = type;
				}
				i += typeSize;
			}

			return ret;
		}
		Module["allocate"] = allocate;

		// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
		function getMemory(size) {
			if (!staticSealed) return Runtime.staticAlloc(size);
			if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
			return _malloc(size);
		}
		Module["getMemory"] = getMemory;

		function Pointer_stringify(ptr, /* optional */ length) {
			if (length === 0 || !ptr) return '';
			// TODO: use TextDecoder
			// Find the length, and check for UTF while doing so
			var hasUtf = 0;
			var t;
			var i = 0;
			while (1) {
				assert(ptr + i < TOTAL_MEMORY);
				t = HEAPU8[(((ptr)+(i))>>0)];
				hasUtf |= t;
				if (t == 0 && !length) break;
				i++;
				if (length && i == length) break;
			}
			if (!length) length = i;

			var ret = '';

			if (hasUtf < 128) {
				var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
				var curr;
				while (length > 0) {
					curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
					ret = ret ? ret + curr : curr;
					ptr += MAX_CHUNK;
					length -= MAX_CHUNK;
				}
				return ret;
			}
			return Module['UTF8ToString'](ptr);
		}
		Module["Pointer_stringify"] = Pointer_stringify;

		// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
		// a copy of that string as a Javascript String object.

		function AsciiToString(ptr) {
			var str = '';
			while (1) {
				var ch = HEAP8[((ptr++)>>0)];
				if (!ch) return str;
				str += String.fromCharCode(ch);
			}
		}
		Module["AsciiToString"] = AsciiToString;

		// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
		// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

		function stringToAscii(str, outPtr) {
			return writeAsciiToMemory(str, outPtr, false);
		}
		Module["stringToAscii"] = stringToAscii;

		// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
		// a copy of that string as a Javascript String object.

		function UTF8ArrayToString(u8Array, idx) {
			var u0, u1, u2, u3, u4, u5;

			var str = '';
			while (1) {
				// For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
				u0 = u8Array[idx++];
				if (!u0) return str;
				if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
				u1 = u8Array[idx++] & 63;
				if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
				u2 = u8Array[idx++] & 63;
				if ((u0 & 0xF0) == 0xE0) {
					u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
				} else {
					u3 = u8Array[idx++] & 63;
					if ((u0 & 0xF8) == 0xF0) {
						u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
					} else {
						u4 = u8Array[idx++] & 63;
						if ((u0 & 0xFC) == 0xF8) {
							u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
						} else {
							u5 = u8Array[idx++] & 63;
							u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
						}
					}
				}
				if (u0 < 0x10000) {
					str += String.fromCharCode(u0);
				} else {
					var ch = u0 - 0x10000;
					str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
				}
			}
		}
		Module["UTF8ArrayToString"] = UTF8ArrayToString;

		// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
		// a copy of that string as a Javascript String object.

		function UTF8ToString(ptr) {
			return UTF8ArrayToString(HEAPU8,ptr);
		}
		Module["UTF8ToString"] = UTF8ToString;

		// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
		// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
		// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
		// Parameters:
		//   str: the Javascript string to copy.
		//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
		//   outIdx: The starting offset in the array to begin the copying.
		//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
		//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
		//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
		// Returns the number of bytes written, EXCLUDING the null terminator.

		function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
			if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
				return 0;

			var startIdx = outIdx;
			var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
			for (var i = 0; i < str.length; ++i) {
				// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
				// See http://unicode.org/faq/utf_bom.html#utf16-3
				// For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
				var u = str.charCodeAt(i); // possibly a lead surrogate
				if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
				if (u <= 0x7F) {
					if (outIdx >= endIdx) break;
					outU8Array[outIdx++] = u;
				} else if (u <= 0x7FF) {
					if (outIdx + 1 >= endIdx) break;
					outU8Array[outIdx++] = 0xC0 | (u >> 6);
					outU8Array[outIdx++] = 0x80 | (u & 63);
				} else if (u <= 0xFFFF) {
					if (outIdx + 2 >= endIdx) break;
					outU8Array[outIdx++] = 0xE0 | (u >> 12);
					outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
					outU8Array[outIdx++] = 0x80 | (u & 63);
				} else if (u <= 0x1FFFFF) {
					if (outIdx + 3 >= endIdx) break;
					outU8Array[outIdx++] = 0xF0 | (u >> 18);
					outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
					outU8Array[outIdx++] = 0x80 | (u & 63);
				} else if (u <= 0x3FFFFFF) {
					if (outIdx + 4 >= endIdx) break;
					outU8Array[outIdx++] = 0xF8 | (u >> 24);
					outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
					outU8Array[outIdx++] = 0x80 | (u & 63);
				} else {
					if (outIdx + 5 >= endIdx) break;
					outU8Array[outIdx++] = 0xFC | (u >> 30);
					outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
					outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
					outU8Array[outIdx++] = 0x80 | (u & 63);
				}
			}
			// Null-terminate the pointer to the buffer.
			outU8Array[outIdx] = 0;
			return outIdx - startIdx;
		}
		Module["stringToUTF8Array"] = stringToUTF8Array;

		// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
		// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
		// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
		// Returns the number of bytes written, EXCLUDING the null terminator.

		function stringToUTF8(str, outPtr, maxBytesToWrite) {
			assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
			return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
		}
		Module["stringToUTF8"] = stringToUTF8;

		// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

		function lengthBytesUTF8(str) {
			var len = 0;
			for (var i = 0; i < str.length; ++i) {
				// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
				// See http://unicode.org/faq/utf_bom.html#utf16-3
				var u = str.charCodeAt(i); // possibly a lead surrogate
				if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
				if (u <= 0x7F) {
					++len;
				} else if (u <= 0x7FF) {
					len += 2;
				} else if (u <= 0xFFFF) {
					len += 3;
				} else if (u <= 0x1FFFFF) {
					len += 4;
				} else if (u <= 0x3FFFFFF) {
					len += 5;
				} else {
					len += 6;
				}
			}
			return len;
		}
		Module["lengthBytesUTF8"] = lengthBytesUTF8;

		// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
		// a copy of that string as a Javascript String object.

		function UTF16ToString(ptr) {
			var i = 0;

			var str = '';
			while (1) {
				var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
				if (codeUnit == 0)
					return str;
				++i;
				// fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
				str += String.fromCharCode(codeUnit);
			}
		}


		// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
		// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
		// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
		// Parameters:
		//   str: the Javascript string to copy.
		//   outPtr: Byte address in Emscripten HEAP where to write the string to.
		//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
		//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
		//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
		// Returns the number of bytes written, EXCLUDING the null terminator.

		function stringToUTF16(str, outPtr, maxBytesToWrite) {
			assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
			// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
			if (maxBytesToWrite === undefined) {
				maxBytesToWrite = 0x7FFFFFFF;
			}
			if (maxBytesToWrite < 2) return 0;
			maxBytesToWrite -= 2; // Null terminator.
			var startPtr = outPtr;
			var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
			for (var i = 0; i < numCharsToWrite; ++i) {
				// charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
				var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
				HEAP16[((outPtr)>>1)]=codeUnit;
				outPtr += 2;
			}
			// Null-terminate the pointer to the HEAP.
			HEAP16[((outPtr)>>1)]=0;
			return outPtr - startPtr;
		}


		// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

		function lengthBytesUTF16(str) {
			return str.length*2;
		}


		function UTF32ToString(ptr) {
			var i = 0;

			var str = '';
			while (1) {
				var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
				if (utf32 == 0)
					return str;
				++i;
				// Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
				// See http://unicode.org/faq/utf_bom.html#utf16-3
				if (utf32 >= 0x10000) {
					var ch = utf32 - 0x10000;
					str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
				} else {
					str += String.fromCharCode(utf32);
				}
			}
		}


		// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
		// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
		// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
		// Parameters:
		//   str: the Javascript string to copy.
		//   outPtr: Byte address in Emscripten HEAP where to write the string to.
		//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
		//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
		//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
		// Returns the number of bytes written, EXCLUDING the null terminator.

		function stringToUTF32(str, outPtr, maxBytesToWrite) {
			assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
			// Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
			if (maxBytesToWrite === undefined) {
				maxBytesToWrite = 0x7FFFFFFF;
			}
			if (maxBytesToWrite < 4) return 0;
			var startPtr = outPtr;
			var endPtr = startPtr + maxBytesToWrite - 4;
			for (var i = 0; i < str.length; ++i) {
				// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
				// See http://unicode.org/faq/utf_bom.html#utf16-3
				var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
				if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
					var trailSurrogate = str.charCodeAt(++i);
					codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
				}
				HEAP32[((outPtr)>>2)]=codeUnit;
				outPtr += 4;
				if (outPtr + 4 > endPtr) break;
			}
			// Null-terminate the pointer to the HEAP.
			HEAP32[((outPtr)>>2)]=0;
			return outPtr - startPtr;
		}


		// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

		function lengthBytesUTF32(str) {
			var len = 0;
			for (var i = 0; i < str.length; ++i) {
				// Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
				// See http://unicode.org/faq/utf_bom.html#utf16-3
				var codeUnit = str.charCodeAt(i);
				if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
				len += 4;
			}

			return len;
		}


		function demangle(func) {
			var hasLibcxxabi = !!Module['___cxa_demangle'];
			if (hasLibcxxabi) {
				try {
					var buf = _malloc(func.length);
					writeStringToMemory(func.substr(1), buf);
					var status = _malloc(4);
					var ret = Module['___cxa_demangle'](buf, 0, 0, status);
					if (getValue(status, 'i32') === 0 && ret) {
						return Pointer_stringify(ret);
					}
					// otherwise, libcxxabi failed, we can try ours which may return a partial result
				} catch(e) {
					// failure when using libcxxabi, we can try ours which may return a partial result
					return func;
				} finally {
					if (buf) _free(buf);
					if (status) _free(status);
					if (ret) _free(ret);
				}
			}
			Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
			return func;
		}

		function demangleAll(text) {
			return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
		}

		function jsStackTrace() {
			var err = new Error();
			if (!err.stack) {
				// IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
				// so try that as a special-case.
				try {
					throw new Error(0);
				} catch(e) {
					err = e;
				}
				if (!err.stack) {
					return '(no stack trace available)';
				}
			}
			return err.stack.toString();
		}

		function stackTrace() {
			return demangleAll(jsStackTrace());
		}
		Module["stackTrace"] = stackTrace;

		// Memory management

		var PAGE_SIZE = 4096;

		function alignMemoryPage(x) {
			if (x % 4096 > 0) {
				x += (4096 - (x % 4096));
			}
			return x;
		}

		var HEAP;
		var buffer;
		var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

		function updateGlobalBuffer(buf) {
			Module['buffer'] = buffer = buf;
		}

		function updateGlobalBufferViews() {
			Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
			Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
			Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
			Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
			Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
			Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
			Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
			Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
		}

		var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
		var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
		var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


		function abortOnCannotGrowMemory() {
			abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
		}

		function enlargeMemory() {
			abortOnCannotGrowMemory();
		}


		var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
		var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;

		var totalMemory = 64*1024;
		while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
			if (totalMemory < 16*1024*1024) {
				totalMemory *= 2;
			} else {
				totalMemory += 16*1024*1024
			}
		}
		if (totalMemory !== TOTAL_MEMORY) {
			Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
			TOTAL_MEMORY = totalMemory;
		}

		// Initialize the runtime's memory
		// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
		assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
			   'JS engine does not provide full typed array support');



		// Use a provided buffer, if there is one, or else allocate a new one
		if (Module['buffer']) {
			buffer = Module['buffer'];
			assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
		} else {
			buffer = new ArrayBuffer(TOTAL_MEMORY);
		}
		updateGlobalBufferViews();


		// Endianness check (note: assumes compiler arch was little-endian)
		HEAP32[0] = 255;
		if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

		Module['HEAP'] = HEAP;
		Module['buffer'] = buffer;
		Module['HEAP8'] = HEAP8;
		Module['HEAP16'] = HEAP16;
		Module['HEAP32'] = HEAP32;
		Module['HEAPU8'] = HEAPU8;
		Module['HEAPU16'] = HEAPU16;
		Module['HEAPU32'] = HEAPU32;
		Module['HEAPF32'] = HEAPF32;
		Module['HEAPF64'] = HEAPF64;

		function callRuntimeCallbacks(callbacks) {
			while(callbacks.length > 0) {
				var callback = callbacks.shift();
				if (typeof callback == 'function') {
					callback();
					continue;
				}
				var func = callback.func;
				if (typeof func === 'number') {
					if (callback.arg === undefined) {
						Runtime.dynCall('v', func);
					} else {
						Runtime.dynCall('vi', func, [callback.arg]);
					}
				} else {
					func(callback.arg === undefined ? null : callback.arg);
				}
			}
		}

		var __ATPRERUN__  = []; // functions called before the runtime is initialized
		var __ATINIT__    = []; // functions called during startup
		var __ATMAIN__    = []; // functions called when main() is to be run
		var __ATEXIT__    = []; // functions called during shutdown
		var __ATPOSTRUN__ = []; // functions called after the runtime has exited

		var runtimeInitialized = false;
		var runtimeExited = false;


		function preRun() {
			// compatibility - merge in anything from Module['preRun'] at this time
			if (Module['preRun']) {
				if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
				while (Module['preRun'].length) {
					addOnPreRun(Module['preRun'].shift());
				}
			}
			callRuntimeCallbacks(__ATPRERUN__);
		}

		function ensureInitRuntime() {
			if (runtimeInitialized) return;
			runtimeInitialized = true;
			callRuntimeCallbacks(__ATINIT__);
		}

		function preMain() {
			callRuntimeCallbacks(__ATMAIN__);
		}

		function exitRuntime() {
			callRuntimeCallbacks(__ATEXIT__);
			runtimeExited = true;
		}

		function postRun() {
			// compatibility - merge in anything from Module['postRun'] at this time
			if (Module['postRun']) {
				if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
				while (Module['postRun'].length) {
					addOnPostRun(Module['postRun'].shift());
				}
			}
			callRuntimeCallbacks(__ATPOSTRUN__);
		}

		function addOnPreRun(cb) {
			__ATPRERUN__.unshift(cb);
		}
		Module["addOnPreRun"] = addOnPreRun;

		function addOnInit(cb) {
			__ATINIT__.unshift(cb);
		}
		Module["addOnInit"] = addOnInit;

		function addOnPreMain(cb) {
			__ATMAIN__.unshift(cb);
		}
		Module["addOnPreMain"] = addOnPreMain;

		function addOnExit(cb) {
			__ATEXIT__.unshift(cb);
		}
		Module["addOnExit"] = addOnExit;

		function addOnPostRun(cb) {
			__ATPOSTRUN__.unshift(cb);
		}
		Module["addOnPostRun"] = addOnPostRun;

		// Tools


		function intArrayFromString(stringy, dontAddNull, length /* optional */) {
			var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
			var u8array = new Array(len);
			var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
			if (dontAddNull) u8array.length = numBytesWritten;
			return u8array;
		}
		Module["intArrayFromString"] = intArrayFromString;

		function intArrayToString(array) {
			var ret = [];
			for (var i = 0; i < array.length; i++) {
				var chr = array[i];
				if (chr > 0xFF) {
					assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
					chr &= 0xFF;
				}
				ret.push(String.fromCharCode(chr));
			}
			return ret.join('');
		}
		Module["intArrayToString"] = intArrayToString;

		function writeStringToMemory(string, buffer, dontAddNull) {
			var array = intArrayFromString(string, dontAddNull);
			var i = 0;
			while (i < array.length) {
				var chr = array[i];
				HEAP8[(((buffer)+(i))>>0)]=chr;
				i = i + 1;
			}
		}
		Module["writeStringToMemory"] = writeStringToMemory;

		function writeArrayToMemory(array, buffer) {
			for (var i = 0; i < array.length; i++) {
				HEAP8[((buffer++)>>0)]=array[i];
			}
		}
		Module["writeArrayToMemory"] = writeArrayToMemory;

		function writeAsciiToMemory(str, buffer, dontAddNull) {
			for (var i = 0; i < str.length; ++i) {
				assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
				HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
			}
			// Null-terminate the pointer to the HEAP.
			if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
		}
		Module["writeAsciiToMemory"] = writeAsciiToMemory;

		function unSign(value, bits, ignore) {
			if (value >= 0) {
				return value;
			}
			return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
			: Math.pow(2, bits)         + value;
		}
		function reSign(value, bits, ignore) {
			if (value <= 0) {
				return value;
			}
			var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
			: Math.pow(2, bits-1);
			if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
				// but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
				// TODO: In i64 mode 1, resign the two parts separately and safely
				value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
			}
			return value;
		}


		// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
		if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
			var ah  = a >>> 16;
			var al = a & 0xffff;
			var bh  = b >>> 16;
			var bl = b & 0xffff;
			return (al*bl + ((ah*bl + al*bh) << 16))|0;
		};
		Math.imul = Math['imul'];


		if (!Math['clz32']) Math['clz32'] = function(x) {
			x = x >>> 0;
			for (var i = 0; i < 32; i++) {
				if (x & (1 << (31 - i))) return i;
			}
			return 32;
		};
		Math.clz32 = Math['clz32']

		var Math_abs = Math.abs;
		var Math_cos = Math.cos;
		var Math_sin = Math.sin;
		var Math_tan = Math.tan;
		var Math_acos = Math.acos;
		var Math_asin = Math.asin;
		var Math_atan = Math.atan;
		var Math_atan2 = Math.atan2;
		var Math_exp = Math.exp;
		var Math_log = Math.log;
		var Math_sqrt = Math.sqrt;
		var Math_ceil = Math.ceil;
		var Math_floor = Math.floor;
		var Math_pow = Math.pow;
		var Math_imul = Math.imul;
		var Math_fround = Math.fround;
		var Math_min = Math.min;
		var Math_clz32 = Math.clz32;

		// A counter of dependencies for calling run(). If we need to
		// do asynchronous work before running, increment this and
		// decrement it. Incrementing must happen in a place like
		// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
		// Note that you can add dependencies in preRun, even though
		// it happens right before run - run will be postponed until
		// the dependencies are met.
		var runDependencies = 0;
		var runDependencyWatcher = null;
		var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
		var runDependencyTracking = {};

		function getUniqueRunDependency(id) {
			var orig = id;
			while (1) {
				if (!runDependencyTracking[id]) return id;
				id = orig + Math.random();
			}
			return id;
		}

		function addRunDependency(id) {
			runDependencies++;
			if (Module['monitorRunDependencies']) {
				Module['monitorRunDependencies'](runDependencies);
			}
			if (id) {
				assert(!runDependencyTracking[id]);
				runDependencyTracking[id] = 1;
				if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
					// Check for missing dependencies every few seconds
					runDependencyWatcher = setInterval(function() {
						if (ABORT) {
							clearInterval(runDependencyWatcher);
							runDependencyWatcher = null;
							return;
						}
						var shown = false;
						for (var dep in runDependencyTracking) {
							if (!shown) {
								shown = true;
								Module.printErr('still waiting on run dependencies:');
							}
							Module.printErr('dependency: ' + dep);
						}
						if (shown) {
							Module.printErr('(end of list)');
						}
					}, 10000);
				}
			} else {
				Module.printErr('warning: run dependency added without ID');
			}
		}
		Module["addRunDependency"] = addRunDependency;

		function removeRunDependency(id) {
			runDependencies--;
			if (Module['monitorRunDependencies']) {
				Module['monitorRunDependencies'](runDependencies);
			}
			if (id) {
				assert(runDependencyTracking[id]);
				delete runDependencyTracking[id];
			} else {
				Module.printErr('warning: run dependency removed without ID');
			}
			if (runDependencies == 0) {
				if (runDependencyWatcher !== null) {
					clearInterval(runDependencyWatcher);
					runDependencyWatcher = null;
				}
				if (dependenciesFulfilled) {
					var callback = dependenciesFulfilled;
					dependenciesFulfilled = null;
					callback(); // can add another dependenciesFulfilled
				}
			}
		}
		Module["removeRunDependency"] = removeRunDependency;

		Module["preloadedImages"] = {}; // maps url to mainImage data
		Module["preloadedAudios"] = {}; // maps url to audio data



		var memoryInitializer = null;




		// === Body ===

		var ASM_CONSTS = [];




		STATIC_BASE = 8;

		STATICTOP = STATIC_BASE + 9456;
		/* global initializers */  __ATINIT__.push();


		/* memory initializer */ allocate([212,2,0,0,134,3,0,0,212,2,0,0,17,25,0,0,252,2,0,0,239,24,0,0,56,0,0,0,0,0,0,0,252,2,0,0,156,24,0,0,24,0,0,0,0,0,0,0,252,2,0,0,193,24,0,0,72,0,0,0,0,0,0,0,212,2,0,0,226,24,0,0,252,2,0,0,9,26,0,0,16,0,0,0,0,0,0,0,252,2,0,0,37,26,0,0,16,0,0,0,0,0,0,0,252,2,0,0,53,26,0,0,96,0,0,0,0,0,0,0,252,2,0,0,106,26,0,0,56,0,0,0,0,0,0,0,252,2,0,0,70,26,0,0,128,0,0,0,0,0,0,0,150,13,0,0,0,0,0,0,155,13,0,0,1,0,0,0,164,13,0,0,2,0,0,0,174,13,0,0,3,0,0,0,184,13,0,0,4,0,0,0,194,13,0,0,5,0,0,0,204,13,0,0,6,0,0,0,214,13,0,0,7,0,0,0,0,0,0,0,0,0,0,0,224,13,0,0,0,0,0,0,232,13,0,0,1,0,0,0,245,13,0,0,2,0,0,0,253,13,0,0,3,0,0,0,10,14,0,0,4,0,0,0,22,14,0,0,5,0,0,0,33,14,0,0,6,0,0,0,43,14,0,0,7,0,0,0,58,14,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,255,255,255,255,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,255,255,255,255,108,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,208,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,216,28,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,88,2,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,224,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,24,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,40,0,0,0,7,0,0,0,15,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,30,25,0,0,0,0,0,0,80,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,96,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,112,0,0,0,22,0,0,0,25,0,0,0,24,0,0,0,45,0,114,98,0,119,0,48,46,50,53,0,101,110,100,45,111,102,45,102,105,108,101,32,114,101,97,100,105,110,103,32,112,110,109,32,102,105,108,101,46,0,78,49,48,80,97,103,101,95,105,109,97,103,101,53,69,114,114,111,114,69,0,106,117,110,107,32,105,110,32,112,98,109,32,102,105,108,101,32,119,104,101,114,101,32,98,105,116,115,32,115,104,111,117,108,100,32,98,101,46,0,106,117,110,107,32,105,110,32,112,110,109,32,102,105,108,101,32,119,104,101,114,101,32,97,110,32,105,110,116,101,103,101,114,32,115,104,111,117,108,100,32,98,101,46,0,110,117,109,98,101,114,32,116,111,111,32,98,105,103,32,105,110,32,112,110,109,32,102,105,108,101,46,0,122,101,114,111,32,109,97,120,118,97,108,32,105,110,32,112,103,109,32,102,105,108,101,46,0,118,97,108,117,101,32,62,32,109,97,120,118,97,108,32,105,110,32,112,103,109,32,102,105,108,101,46,0,109,97,120,118,97,108,32,62,32,50,53,53,32,105,110,32,112,103,109,32,34,80,53,34,32,102,105,108,101,46,0,122,101,114,111,32,109,97,120,118,97,108,32,105,110,32,112,112,109,32,102,105,108,101,46,0,118,97,108,117,101,32,62,32,109,97,120,118,97,108,32,105,110,32,112,112,109,32,102,105,108,101,46,0,109,97,120,118,97,108,32,62,32,50,53,53,32,105,110,32,112,112,109,32,34,80,54,34,32,102,105,108,101,46,0,98,97,100,32,109,97,103,105,99,32,110,117,109,98,101,114,32,45,32,110,111,116,32,97,32,112,98,109,44,32,112,103,109,32,111,114,32,112,112,109,32,102,105,108,101,46,0,122,101,114,111,32,119,105,100,116,104,32,105,110,32,112,110,109,32,102,105,108,101,46,0,122,101,114,111,32,104,101,105,103,104,116,32,105,110,32,112,110,109,32,102,105,108,101,46,0,105,109,97,103,101,32,116,111,111,32,115,109,97,108,108,46,32,77,105,110,105,109,117,109,32,115,105,122,101,32,105,115,32,51,120,51,46,0,105,109,97,103,101,32,116,111,111,32,98,105,103,46,32,39,105,110,116,39,32,119,105,108,108,32,111,118,101,114,102,108,111,119,46,0,102,105,108,101,32,116,121,112,101,32,105,115,32,80,37,99,10,0,102,105,108,101,32,115,105,122,101,32,105,115,32,37,100,119,32,120,32,37,100,104,10,0,80,37,99,10,37,100,32,37,100,10,0,37,100,10,0,37,100,32,0,37,100,32,37,100,32,37,100,10,0,37,100,32,37,100,32,37,100,32,0,37,99,32,37,99,32,37,99,32,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,114,101,100,117,99,101,100,32,80,97,103,101,95,105,109,97,103,101,46,0,115,99,97,108,101,32,102,97,99,116,111,114,32,116,111,111,32,98,105,103,46,32,39,105,110,116,39,32,119,105,108,108,32,111,118,101,114,102,108,111,119,46,0,108,32,61,32,37,100,44,32,116,32,61,32,37,100,44,32,114,32,61,32,37,100,44,32,98,32,61,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,108,101,102,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,116,111,112,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,114,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,98,111,116,116,111,109,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,104,101,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,119,105,100,116,104,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,82,101,99,116,97,110,103,108,101,46,0,106,111,105,110,95,98,108,111,98,115,44,32,108,111,115,116,32,98,108,111,98,46,0,110,117,109,98,101,114,32,111,102,32,116,101,120,116,32,98,108,111,99,107,115,32,61,32,37,100,10,0,116,111,116,97,108,32,122,111,110,101,115,32,105,110,32,112,97,103,101,32,37,100,10,0,116,111,116,97,108,32,98,108,111,98,115,32,105,110,32,112,97,103,101,32,37,100,10,10,0,122,111,110,101,32,37,100,32,111,102,32,37,100,10,0,122,111,110,101,32,115,105,122,101,32,37,100,119,32,120,32,37,100,104,10,0,116,111,116,97,108,32,98,108,111,98,115,32,105,110,32,122,111,110,101,32,37,117,10,10,0,84,101,120,116,112,97,103,101,58,58,116,101,120,116,98,108,111,99,107,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,115,111,117,114,99,101,32,102,105,108,101,32,37,115,10,0,116,111,116,97,108,32,116,101,120,116,32,98,108,111,99,107,115,32,37,100,10,0,116,101,120,116,32,98,108,111,99,107,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,66,105,116,109,97,112,32,102,114,111,109,32,112,97,114,116,32,111,102,32,97,110,111,116,104,101,114,32,111,110,101,46,0,104,111,108,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,32,79,0,32,46,0,102,105,108,108,95,104,111,108,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,100,101,108,101,116,101,95,104,111,108,101,44,32,108,111,115,116,32,104,111,108,101,46,0,106,111,105,110,95,104,111,108,101,115,44,32,108,111,115,116,32,104,111,108,101,46,0,108,105,110,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,37,100,32,108,105,110,101,115,10,10,0,37,100,32,99,104,97,114,97,99,116,101,114,115,32,105,110,32,108,105,110,101,32,37,100,10,0,108,105,110,101,115,32,37,100,10,0,108,105,110,101,32,37,100,32,99,104,97,114,115,32,37,100,32,104,101,105,103,104,116,32,37,100,10,0,99,111,110,115,116,32,98,108,111,98,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,98,108,111,98,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,105,110,115,101,114,116,95,103,117,101,115,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,115,119,97,112,95,103,117,101,115,115,101,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,103,117,101,115,115,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,95,0,37,100,32,103,117,101,115,115,101,115,32,32,32,32,0,103,117,101,115,115,32,39,37,115,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,103,117,101,115,115,32,39,37,99,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,103,117,101,115,115,32,39,92,116,39,44,32,99,111,110,102,105,100,101,110,99,101,32,37,100,32,32,32,32,0,108,101,102,116,32,61,32,37,100,44,32,116,111,112,32,61,32,37,100,44,32,114,105,103,104,116,32,61,32,37,100,44,32,98,111,116,116,111,109,32,61,32,37,100,10,0,119,105,100,116,104,32,61,32,37,100,44,32,104,101,105,103,104,116,32,61,32,37,100,44,32,104,99,101,110,116,101,114,32,61,32,37,100,44,32,118,99,101,110,116,101,114,32,61,32,37,100,44,32,98,108,97,99,107,32,97,114,101,97,32,61,32,37,100,37,37,10,0,104,98,97,114,115,32,61,32,37,100,44,32,118,98,97,114,115,32,61,32,37,100,10,0,10,10,0,32,37,99,0,32,32,116,111,112,40,37,100,41,0,32,32,118,99,101,110,116,101,114,40,37,100,41,0,32,32,98,111,116,116,111,109,40,37,100,41,0,32,32,98,111,120,46,116,111,112,40,37,100,41,0,32,32,98,111,120,46,118,99,101,110,116,101,114,40,37,100,41,0,32,32,98,111,120,46,98,111,116,116,111,109,40,37,100,41,0,32,32,104,49,46,116,111,112,40,37,100,41,0,32,32,104,49,46,98,111,116,116,111,109,40,37,100,41,0,32,32,104,50,46,116,111,112,40,37,100,41,0,32,32,104,50,46,98,111,116,116,111,109,40,37,100,41,0,37,51,100,32,37,51,100,32,37,50,100,32,37,50,100,59,32,37,100,0,44,32,39,37,99,39,37,100,0,44,32,39,37,115,39,37,100,0,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,115,95,107,101,121,95,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,100,101,108,101,116,101,95,99,104,97,114,97,99,116,101,114,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,110,115,101,114,116,95,115,112,97,99,101,44,32,105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,46,0,105,110,115,101,114,116,95,115,112,97,99,101,44,32,116,114,97,99,107,32,110,111,116,32,115,101,116,32,121,101,116,46,0,109,101,97,110,32,104,101,105,103,104,116,32,61,32,37,100,44,32,109,101,100,105,97,110,32,104,101,105,103,104,116,32,61,32,37,100,44,32,116,114,97,99,107,32,115,101,103,109,101,110,116,115,32,61,32,37,100,44,32,98,105,103,32,105,110,105,116,105,97,108,115,32,61,32,37,100,10,0,108,32,61,32,37,100,44,32,108,99,32,61,32,37,100,44,32,114,32,61,32,37,100,44,32,114,99,32,61,32,37,100,44,32,104,32,61,32,37,100,10,0,98,97,100,32,112,97,114,97,109,101,116,101,114,32,98,117,105,108,100,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,101,120,116,101,110,100,95,108,101,102,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,101,120,116,101,110,100,95,114,105,103,104,116,44,32,98,97,100,32,112,97,114,97,109,101,116,101,114,32,114,101,115,105,122,105,110,103,32,97,32,86,114,104,111,109,98,111,105,100,46,0,111,99,114,97,100,58,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,37,115,10,0,104,101,108,112,0,32,32,37,115,0,110,111,110,101,0,114,111,116,97,116,101,57,48,0,114,111,116,97,116,101,49,56,48,0,114,111,116,97,116,101,50,55,48,0,109,105,114,114,111,114,95,108,114,0,109,105,114,114,111,114,95,116,98,0,109,105,114,114,111,114,95,100,49,0,109,105,114,114,111,114,95,100,50,0,108,101,116,116,101,114,115,0,108,101,116,116,101,114,115,95,111,110,108,121,0,110,117,109,98,101,114,115,0,110,117,109,98,101,114,115,95,111,110,108,121,0,115,97,109,101,95,104,101,105,103,104,116,0,116,101,120,116,95,98,108,111,99,107,0,117,112,112,101,114,95,110,117,109,0,117,112,112,101,114,95,110,117,109,95,109,97,114,107,0,117,112,112,101,114,95,110,117,109,95,111,110,108,121,0,37,115,58,32,98,97,100,32,102,105,108,116,101,114,32,39,37,115,39,10,0,86,97,108,105,100,32,102,105,108,116,101,114,32,110,97,109,101,115,58,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,98,97,115,105,99,95,115,116,114,105,110,103,0,118,101,99,116,111,114,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





		/* no memory initializer */
		var tempDoublePtr = STATICTOP; STATICTOP += 16;

		assert(tempDoublePtr % 8 == 0);

		function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

			HEAP8[tempDoublePtr] = HEAP8[ptr];

			HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

			HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

			HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

		}

		function copyTempDouble(ptr) {

			HEAP8[tempDoublePtr] = HEAP8[ptr];

			HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

			HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

			HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

			HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

			HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

			HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

			HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

		}

		// {{PRE_LIBRARY}}



		Module["_i64Subtract"] = _i64Subtract;


		function ___setErrNo(value) {
			if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
			else Module.printErr('failed to set errno from JS');
			return value;
		}

		var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
			// long sysconf(int name);
			// http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
			switch(name) {
				case 30: return PAGE_SIZE;
				case 85: return totalMemory / PAGE_SIZE;
				case 132:
				case 133:
				case 12:
				case 137:
				case 138:
				case 15:
				case 235:
				case 16:
				case 17:
				case 18:
				case 19:
				case 20:
				case 149:
				case 13:
				case 10:
				case 236:
				case 153:
				case 9:
				case 21:
				case 22:
				case 159:
				case 154:
				case 14:
				case 77:
				case 78:
				case 139:
				case 80:
				case 81:
				case 82:
				case 68:
				case 67:
				case 164:
				case 11:
				case 29:
				case 47:
				case 48:
				case 95:
				case 52:
				case 51:
				case 46:
					return 200809;
				case 79:
					return 0;
				case 27:
				case 246:
				case 127:
				case 128:
				case 23:
				case 24:
				case 160:
				case 161:
				case 181:
				case 182:
				case 242:
				case 183:
				case 184:
				case 243:
				case 244:
				case 245:
				case 165:
				case 178:
				case 179:
				case 49:
				case 50:
				case 168:
				case 169:
				case 175:
				case 170:
				case 171:
				case 172:
				case 97:
				case 76:
				case 32:
				case 173:
				case 35:
					return -1;
				case 176:
				case 177:
				case 7:
				case 155:
				case 8:
				case 157:
				case 125:
				case 126:
				case 92:
				case 93:
				case 129:
				case 130:
				case 131:
				case 94:
				case 91:
					return 1;
				case 74:
				case 60:
				case 69:
				case 70:
				case 4:
					return 1024;
				case 31:
				case 42:
				case 72:
					return 32;
				case 87:
				case 26:
				case 33:
					return 2147483647;
				case 34:
				case 1:
					return 47839;
				case 38:
				case 36:
					return 99;
				case 43:
				case 37:
					return 2048;
				case 0: return 2097152;
				case 3: return 65536;
				case 28: return 32768;
				case 44: return 32767;
				case 75: return 16384;
				case 39: return 1000;
				case 89: return 700;
				case 71: return 256;
				case 40: return 255;
				case 2: return 100;
				case 180: return 64;
				case 25: return 20;
				case 5: return 16;
				case 6: return 6;
				case 73: return 4;
				case 84: {
					if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
					return 1;
				}
			}
			___setErrNo(ERRNO_CODES.EINVAL);
			return -1;
		}


		function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
			return !!__ZSt18uncaught_exceptionv.uncaught_exception;
		}



		var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
			if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
			for (var ptr in EXCEPTIONS.infos) {
				var info = EXCEPTIONS.infos[ptr];
				if (info.adjusted === adjusted) {
					return ptr;
				}
			}
			return adjusted;
		},addRef:function (ptr) {
			if (!ptr) return;
			var info = EXCEPTIONS.infos[ptr];
			info.refcount++;
		},decRef:function (ptr) {
			if (!ptr) return;
			var info = EXCEPTIONS.infos[ptr];
			assert(info.refcount > 0);
			info.refcount--;
			if (info.refcount === 0) {
				if (info.destructor) {
					Runtime.dynCall('vi', info.destructor, [ptr]);
				}
				delete EXCEPTIONS.infos[ptr];
				___cxa_free_exception(ptr);
			}
		},clearRef:function (ptr) {
			if (!ptr) return;
			var info = EXCEPTIONS.infos[ptr];
			info.refcount = 0;
		}};
		function ___resumeException(ptr) {
			if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
			EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
			throw ptr;
		}function ___cxa_find_matching_catch() {
			var thrown = EXCEPTIONS.last;
			if (!thrown) {
				// just pass through the null ptr
				return ((asm["setTempRet0"](0),0)|0);
			}
			var info = EXCEPTIONS.infos[thrown];
			var throwntype = info.type;
			if (!throwntype) {
				// just pass through the thrown ptr
				return ((asm["setTempRet0"](0),thrown)|0);
			}
			var typeArray = Array.prototype.slice.call(arguments);

			var pointer = Module['___cxa_is_pointer_type'](throwntype);
			// can_catch receives a **, add indirection
			if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
			HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
			thrown = ___cxa_find_matching_catch.buffer;
			// The different catch blocks are denoted by different types.
			// Due to inheritance, those types may not precisely match the
			// type of the thrown object. Find one which matches, and
			// return the type of the catch block which should be called.
			for (var i = 0; i < typeArray.length; i++) {
				if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
					thrown = HEAP32[((thrown)>>2)]; // undo indirection
					info.adjusted = thrown;
					return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
				}
			}
			// Shouldn't happen unless we have bogus data in typeArray
			// or encounter a type for which emscripten doesn't have suitable
			// typeinfo defined. Best-efforts match just in case.
			thrown = HEAP32[((thrown)>>2)]; // undo indirection
			return ((asm["setTempRet0"](throwntype),thrown)|0);
		}function ___cxa_throw(ptr, type, destructor) {
			EXCEPTIONS.infos[ptr] = {
				ptr: ptr,
				adjusted: ptr,
				type: type,
				destructor: destructor,
				refcount: 0
			};
			EXCEPTIONS.last = ptr;
			if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
				__ZSt18uncaught_exceptionv.uncaught_exception = 1;
			} else {
				__ZSt18uncaught_exceptionv.uncaught_exception++;
			}
			throw ptr;
		}


		Module["_memset"] = _memset;

		function ___gxx_personality_v0() {
		}


		Module["_bitshift64Shl"] = _bitshift64Shl;

		function _abort() {
			Module['abort']();
		}



		function _free() {
		}
		Module["_free"] = _free;function ___cxa_free_exception(ptr) {
			try {
				return _free(ptr);
			} catch(e) { // XXX FIXME
				Module.printErr('exception during cxa_free_exception: ' + e);
			}
		}function ___cxa_end_catch() {
			if (___cxa_end_catch.rethrown) {
				___cxa_end_catch.rethrown = false;
				return;
			}
			// Clear state flag.
			asm['setThrew'](0);
			// Call destructor if one is registered then clear it.
			var ptr = EXCEPTIONS.caught.pop();
			if (ptr) {
				EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
				EXCEPTIONS.last = 0; // XXX in decRef?
			}
		}


		function _pthread_once(ptr, func) {
			if (!_pthread_once.seen) _pthread_once.seen = {};
			if (ptr in _pthread_once.seen) return;
			Runtime.dynCall('v', func);
			_pthread_once.seen[ptr] = 1;
		}

		function ___lock() {}

		function ___unlock() {}


		var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
			return PTHREAD_SPECIFIC[key] || 0;
		}


		Module["_i64Add"] = _i64Add;


		var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
			if (key == 0) {
				return ERRNO_CODES.EINVAL;
			}
			HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
			// values start at 0
			PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
			PTHREAD_SPECIFIC_NEXT_KEY++;
			return 0;
		}


		function __exit(status) {
			// void _exit(int status);
			// http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
			Module['exit'](status);
		}function _exit(status) {
			__exit(status);
		}

		function _pthread_setspecific(key, value) {
			if (!(key in PTHREAD_SPECIFIC)) {
				return ERRNO_CODES.EINVAL;
			}
			PTHREAD_SPECIFIC[key] = value;
			return 0;
		}


		function _malloc(bytes) {
			/* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
			var ptr = Runtime.dynamicAlloc(bytes + 8);
			return (ptr+8) & 0xFFFFFFF8;
		}
		Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
			return _malloc(size);
		}




		var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or tempDirectory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a tempDirectory",21:"Is a tempDirectory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

		var PATH={splitPath:function (filename) {
			var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
			return splitPathRe.exec(filename).slice(1);
		},normalizeArray:function (parts, allowAboveRoot) {
			// if the path tries to go above the root, `up` ends up > 0
			var up = 0;
			for (var i = parts.length - 1; i >= 0; i--) {
				var last = parts[i];
				if (last === '.') {
					parts.splice(i, 1);
				} else if (last === '..') {
					parts.splice(i, 1);
					up++;
				} else if (up) {
					parts.splice(i, 1);
					up--;
				}
			}
			// if the path is allowed to go above the root, restore leading ..s
			if (allowAboveRoot) {
				for (; up--; up) {
					parts.unshift('..');
				}
			}
			return parts;
		},normalize:function (path) {
			var isAbsolute = path.charAt(0) === '/',
				trailingSlash = path.substr(-1) === '/';
			// Normalize the path
			path = PATH.normalizeArray(path.split('/').filter(function(p) {
				return !!p;
			}), !isAbsolute).join('/');
			if (!path && !isAbsolute) {
				path = '.';
			}
			if (path && trailingSlash) {
				path += '/';
			}
			return (isAbsolute ? '/' : '') + path;
		},dirname:function (path) {
			var result = PATH.splitPath(path),
				root = result[0],
				dir = result[1];
			if (!root && !dir) {
				// No dirname whatsoever
				return '.';
			}
			if (dir) {
				// It has a dirname, strip trailing slash
				dir = dir.substr(0, dir.length - 1);
			}
			return root + dir;
		},basename:function (path) {
			// EMSCRIPTEN return '/'' for '/', not an empty string
			if (path === '/') return '/';
			var lastSlash = path.lastIndexOf('/');
			if (lastSlash === -1) return path;
			return path.substr(lastSlash+1);
		},extname:function (path) {
			return PATH.splitPath(path)[3];
		},join:function () {
			var paths = Array.prototype.slice.call(arguments, 0);
			return PATH.normalize(paths.join('/'));
		},join2:function (l, r) {
			return PATH.normalize(l + '/' + r);
		},resolve:function () {
			var resolvedPath = '',
				resolvedAbsolute = false;
			for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
				var path = (i >= 0) ? arguments[i] : FS.cwd();
				// Skip empty and invalid entries
				if (typeof path !== 'string') {
					throw new TypeError('Arguments to path.resolve must be strings');
				} else if (!path) {
					return ''; // an invalid portion invalidates the whole thing
				}
				resolvedPath = path + '/' + resolvedPath;
				resolvedAbsolute = path.charAt(0) === '/';
			}
			// At this point the path should be resolved to a full absolute path, but
			// handle relative paths to be safe (might happen when process.cwd() fails)
			resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
				return !!p;
			}), !resolvedAbsolute).join('/');
			return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
		},relative:function (from, to) {
			from = PATH.resolve(from).substr(1);
			to = PATH.resolve(to).substr(1);
			function trim(arr) {
				var start = 0;
				for (; start < arr.length; start++) {
					if (arr[start] !== '') break;
				}
				var end = arr.length - 1;
				for (; end >= 0; end--) {
					if (arr[end] !== '') break;
				}
				if (start > end) return [];
				return arr.slice(start, end - start + 1);
			}
			var fromParts = trim(from.split('/'));
			var toParts = trim(to.split('/'));
			var length = Math.min(fromParts.length, toParts.length);
			var samePartsLength = length;
			for (var i = 0; i < length; i++) {
				if (fromParts[i] !== toParts[i]) {
					samePartsLength = i;
					break;
				}
			}
			var outputParts = [];
			for (var i = samePartsLength; i < fromParts.length; i++) {
				outputParts.push('..');
			}
			outputParts = outputParts.concat(toParts.slice(samePartsLength));
			return outputParts.join('/');
		}};

		var TTY={ttys:[],init:function () {
			// https://github.com/kripken/emscripten/pull/1555
			// if (ENVIRONMENT_IS_NODE) {
			//   // currently, FS.init does not distinguish if process.stdin is a file or TTY
			//   // device, it always assumes it's a TTY device. because of this, we're forcing
			//   // process.stdin to UTF8 encoding to at least make stdin reading compatible
			//   // with text files until FS.init can be refactored.
			//   process['stdin']['setEncoding']('utf8');
			// }
		},shutdown:function () {
			// https://github.com/kripken/emscripten/pull/1555
			// if (ENVIRONMENT_IS_NODE) {
			//   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
			//   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
			//   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
			//   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
			//   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
			//   process['stdin']['pause']();
			// }
		},register:function (dev, ops) {
			TTY.ttys[dev] = { input: [], output: [], ops: ops };
			FS.registerDevice(dev, TTY.stream_ops);
		},stream_ops:{open:function (stream) {
			var tty = TTY.ttys[stream.node.rdev];
			if (!tty) {
				throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
			}
			stream.tty = tty;
			stream.seekable = false;
		},close:function (stream) {
			// flush any pending line data
			stream.tty.ops.flush(stream.tty);
		},flush:function (stream) {
			stream.tty.ops.flush(stream.tty);
		},read:function (stream, buffer, offset, length, pos /* ignored */) {
			if (!stream.tty || !stream.tty.ops.get_char) {
				throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
			}
			var bytesRead = 0;
			for (var i = 0; i < length; i++) {
				var result;
				try {
					result = stream.tty.ops.get_char(stream.tty);
				} catch (e) {
					throw new FS.ErrnoError(ERRNO_CODES.EIO);
				}
				if (result === undefined && bytesRead === 0) {
					throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
				}
				if (result === null || result === undefined) break;
				bytesRead++;
				buffer[offset+i] = result;
			}
			if (bytesRead) {
				stream.node.timestamp = Date.now();
			}
			return bytesRead;
		},write:function (stream, buffer, offset, length, pos) {
			if (!stream.tty || !stream.tty.ops.put_char) {
				throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
			}
			for (var i = 0; i < length; i++) {
				try {
					stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
				} catch (e) {
					throw new FS.ErrnoError(ERRNO_CODES.EIO);
				}
			}
			if (length) {
				stream.node.timestamp = Date.now();
			}
			return i;
		}},default_tty_ops:{get_char:function (tty) {
			if (!tty.input.length) {
				var result = null;
				if (ENVIRONMENT_IS_NODE) {
					// we will read data by chunks of BUFSIZE
					var BUFSIZE = 256;
					var buf = new Buffer(BUFSIZE);
					var bytesRead = 0;

					var fd = process.stdin.fd;
					// Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
					var usingDevice = false;
					try {
						fd = fs.openSync('/dev/stdin', 'r');
						usingDevice = true;
					} catch (e) {}

					bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);

					if (usingDevice) { fs.closeSync(fd); }
					if (bytesRead > 0) {
						result = buf.slice(0, bytesRead).toString('utf-8');
					} else {
						result = null;
					}

				} else if (typeof window != 'undefined' &&
						   typeof window.prompt == 'function') {
					// Browser.
					result = window.prompt('Input: ');  // returns null on cancel
					if (result !== null) {
						result += '\n';
					}
				} else if (typeof readline == 'function') {
					// Command line.
					result = readline();
					if (result !== null) {
						result += '\n';
					}
				}
				if (!result) {
					return null;
				}
				tty.input = intArrayFromString(result, true);
			}
			return tty.input.shift();
		},put_char:function (tty, val) {
			if (val === null || val === 10) {
				Module['print'](UTF8ArrayToString(tty.output, 0));
				tty.output = [];
			} else {
				if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
			}
		},flush:function (tty) {
			if (tty.output && tty.output.length > 0) {
				Module['print'](UTF8ArrayToString(tty.output, 0));
				tty.output = [];
			}
		}},default_tty1_ops:{put_char:function (tty, val) {
			if (val === null || val === 10) {
				Module['printErr'](UTF8ArrayToString(tty.output, 0));
				tty.output = [];
			} else {
				if (val != 0) tty.output.push(val);
			}
		},flush:function (tty) {
			if (tty.output && tty.output.length > 0) {
				Module['printErr'](UTF8ArrayToString(tty.output, 0));
				tty.output = [];
			}
		}}};

		var MEMFS={ops_table:null,mount:function (mount) {
			return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
		},createNode:function (parent, name, mode, dev) {
			if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
				// no supported
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			if (!MEMFS.ops_table) {
				MEMFS.ops_table = {
					dir: {
						node: {
							getattr: MEMFS.node_ops.getattr,
							setattr: MEMFS.node_ops.setattr,
							lookup: MEMFS.node_ops.lookup,
							mknod: MEMFS.node_ops.mknod,
							rename: MEMFS.node_ops.rename,
							unlink: MEMFS.node_ops.unlink,
							rmdir: MEMFS.node_ops.rmdir,
							readdir: MEMFS.node_ops.readdir,
							symlink: MEMFS.node_ops.symlink
						},
						stream: {
							llseek: MEMFS.stream_ops.llseek
						}
					},
					file: {
						node: {
							getattr: MEMFS.node_ops.getattr,
							setattr: MEMFS.node_ops.setattr
						},
						stream: {
							llseek: MEMFS.stream_ops.llseek,
							read: MEMFS.stream_ops.read,
							write: MEMFS.stream_ops.write,
							allocate: MEMFS.stream_ops.allocate,
							mmap: MEMFS.stream_ops.mmap,
							msync: MEMFS.stream_ops.msync
						}
					},
					link: {
						node: {
							getattr: MEMFS.node_ops.getattr,
							setattr: MEMFS.node_ops.setattr,
							readlink: MEMFS.node_ops.readlink
						},
						stream: {}
					},
					chrdev: {
						node: {
							getattr: MEMFS.node_ops.getattr,
							setattr: MEMFS.node_ops.setattr
						},
						stream: FS.chrdev_stream_ops
					}
				};
			}
			var node = FS.createNode(parent, name, mode, dev);
			if (FS.isDir(node.mode)) {
				node.node_ops = MEMFS.ops_table.dir.node;
				node.stream_ops = MEMFS.ops_table.dir.stream;
				node.contents = {};
			} else if (FS.isFile(node.mode)) {
				node.node_ops = MEMFS.ops_table.file.node;
				node.stream_ops = MEMFS.ops_table.file.stream;
				node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
				// When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
				// for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
				// penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
				node.contents = null; 
			} else if (FS.isLink(node.mode)) {
				node.node_ops = MEMFS.ops_table.link.node;
				node.stream_ops = MEMFS.ops_table.link.stream;
			} else if (FS.isChrdev(node.mode)) {
				node.node_ops = MEMFS.ops_table.chrdev.node;
				node.stream_ops = MEMFS.ops_table.chrdev.stream;
			}
			node.timestamp = Date.now();
			// add the new node to the parent
			if (parent) {
				parent.contents[name] = node;
			}
			return node;
		},getFileDataAsRegularArray:function (node) {
			if (node.contents && node.contents.subarray) {
				var arr = [];
				for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
				return arr; // Returns a copy of the original data.
			}
			return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
		},getFileDataAsTypedArray:function (node) {
			if (!node.contents) return new Uint8Array;
			if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
			return new Uint8Array(node.contents);
		},expandFileStorage:function (node, newCapacity) {
			// If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
			// instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
			// increase the size.
			if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
				node.contents = MEMFS.getFileDataAsRegularArray(node);
				node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
			}

			if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
				var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
				if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
				// Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
				// For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
				// avoid overshooting the allocation cap by a very large margin.
				var CAPACITY_DOUBLING_MAX = 1024 * 1024;
				newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
				if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
				var oldContents = node.contents;
				node.contents = new Uint8Array(newCapacity); // Allocate new storage.
				if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
				return;
			}
			// Not using a typed array to back the file storage. Use a standard JS array instead.
			if (!node.contents && newCapacity > 0) node.contents = [];
			while (node.contents.length < newCapacity) node.contents.push(0);
		},resizeFileStorage:function (node, newSize) {
			if (node.usedBytes == newSize) return;
			if (newSize == 0) {
				node.contents = null; // Fully decommit when requesting a resize to zero.
				node.usedBytes = 0;
				return;
			}
			if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
				var oldContents = node.contents;
				node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
				if (oldContents) {
					node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
				}
				node.usedBytes = newSize;
				return;
			}
			// Backing with a JS array.
			if (!node.contents) node.contents = [];
			if (node.contents.length > newSize) node.contents.length = newSize;
			else while (node.contents.length < newSize) node.contents.push(0);
			node.usedBytes = newSize;
		},node_ops:{getattr:function (node) {
			var attr = {};
			// device numbers reuse inode numbers.
			attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
			attr.ino = node.id;
			attr.mode = node.mode;
			attr.nlink = 1;
			attr.uid = 0;
			attr.gid = 0;
			attr.rdev = node.rdev;
			if (FS.isDir(node.mode)) {
				attr.size = 4096;
			} else if (FS.isFile(node.mode)) {
				attr.size = node.usedBytes;
			} else if (FS.isLink(node.mode)) {
				attr.size = node.link.length;
			} else {
				attr.size = 0;
			}
			attr.atime = new Date(node.timestamp);
			attr.mtime = new Date(node.timestamp);
			attr.ctime = new Date(node.timestamp);
			// NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
			//       but this is not required by the standard.
			attr.blksize = 4096;
			attr.blocks = Math.ceil(attr.size / attr.blksize);
			return attr;
		},setattr:function (node, attr) {
			if (attr.mode !== undefined) {
				node.mode = attr.mode;
			}
			if (attr.timestamp !== undefined) {
				node.timestamp = attr.timestamp;
			}
			if (attr.size !== undefined) {
				MEMFS.resizeFileStorage(node, attr.size);
			}
		},lookup:function (parent, name) {
			throw FS.genericErrors[ERRNO_CODES.ENOENT];
		},mknod:function (parent, name, mode, dev) {
			return MEMFS.createNode(parent, name, mode, dev);
		},rename:function (old_node, new_dir, new_name) {
			// if we're overwriting a tempDirectory at new_name, make sure it's empty.
			if (FS.isDir(old_node.mode)) {
				var new_node;
				try {
					new_node = FS.lookupNode(new_dir, new_name);
				} catch (e) {
				}
				if (new_node) {
					for (var i in new_node.contents) {
						throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
					}
				}
			}
			// do the internal rewiring
			delete old_node.parent.contents[old_node.name];
			old_node.name = new_name;
			new_dir.contents[new_name] = old_node;
			old_node.parent = new_dir;
		},unlink:function (parent, name) {
			delete parent.contents[name];
		},rmdir:function (parent, name) {
			var node = FS.lookupNode(parent, name);
			for (var i in node.contents) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
			}
			delete parent.contents[name];
		},readdir:function (node) {
			var entries = ['.', '..']
			for (var key in node.contents) {
				if (!node.contents.hasOwnProperty(key)) {
					continue;
				}
				entries.push(key);
			}
			return entries;
		},symlink:function (parent, newname, oldpath) {
			var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
			node.link = oldpath;
			return node;
		},readlink:function (node) {
			if (!FS.isLink(node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			return node.link;
		}},stream_ops:{read:function (stream, buffer, offset, length, position) {
			var contents = stream.node.contents;
			if (position >= stream.node.usedBytes) return 0;
			var size = Math.min(stream.node.usedBytes - position, length);
			assert(size >= 0);
			if (size > 8 && contents.subarray) { // non-trivial, and typed array
				buffer.set(contents.subarray(position, position + size), offset);
			} else {
				for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
			}
			return size;
		},write:function (stream, buffer, offset, length, position, canOwn) {
			if (!length) return 0;
			var node = stream.node;
			node.timestamp = Date.now();

			if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
				if (canOwn) { // Can we just reuse the buffer we are given?
					assert(position === 0, 'canOwn must imply no weird position inside the file');
					node.contents = buffer.subarray(offset, offset + length);
					node.usedBytes = length;
					return length;
				} else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
					node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
					node.usedBytes = length;
					return length;
				} else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
					node.contents.set(buffer.subarray(offset, offset + length), position);
					return length;
				}
			}

			// Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
			MEMFS.expandFileStorage(node, position+length);
			if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
			else {
				for (var i = 0; i < length; i++) {
					node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
				}
			}
			node.usedBytes = Math.max(node.usedBytes, position+length);
			return length;
		},llseek:function (stream, offset, whence) {
			var position = offset;
			if (whence === 1) {  // SEEK_CUR.
				position += stream.position;
			} else if (whence === 2) {  // SEEK_END.
				if (FS.isFile(stream.node.mode)) {
					position += stream.node.usedBytes;
				}
			}
			if (position < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			return position;
		},allocate:function (stream, offset, length) {
			MEMFS.expandFileStorage(stream.node, offset + length);
			stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
		},mmap:function (stream, buffer, offset, length, position, prot, flags) {
			if (!FS.isFile(stream.node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
			}
			var ptr;
			var allocated;
			var contents = stream.node.contents;
			// Only make a new copy when MAP_PRIVATE is specified.
			if ( !(flags & 2) &&
				(contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
				// We can't emulate MAP_SHARED when the file is not backed by the buffer
				// we're mapping to (e.g. the HEAP buffer).
				allocated = false;
				ptr = contents.byteOffset;
			} else {
				// Try to avoid unnecessary slices.
				if (position > 0 || position + length < stream.node.usedBytes) {
					if (contents.subarray) {
						contents = contents.subarray(position, position + length);
					} else {
						contents = Array.prototype.slice.call(contents, position, position + length);
					}
				}
				allocated = true;
				ptr = _malloc(length);
				if (!ptr) {
					throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
				}
				buffer.set(contents, ptr);
			}
			return { ptr: ptr, allocated: allocated };
		},msync:function (stream, buffer, offset, length, mmapFlags) {
			if (!FS.isFile(stream.node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
			}
			if (mmapFlags & 2) {
				// MAP_PRIVATE calls need not to be synced back to underlying fs
				return 0;
			}

			var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
			// should we check if bytesWritten and length are the same?
			return 0;
		}}};

		var IDBFS={dbs:{},indexedDB:function () {
			if (typeof indexedDB !== 'undefined') return indexedDB;
			var ret = null;
			if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
			assert(ret, 'IDBFS used, but indexedDB not supported');
			return ret;
		},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
			// reuse all of the core MEMFS functionality
			return MEMFS.mount.apply(null, arguments);
		},syncfs:function (mount, populate, callback) {
			IDBFS.getLocalSet(mount, function(err, local) {
				if (err) return callback(err);

				IDBFS.getRemoteSet(mount, function(err, remote) {
					if (err) return callback(err);

					var src = populate ? remote : local;
					var dst = populate ? local : remote;

					IDBFS.reconcile(src, dst, callback);
				});
			});
		},getDB:function (name, callback) {
			// check the cache first
			var db = IDBFS.dbs[name];
			if (db) {
				return callback(null, db);
			}

			var req;
			try {
				req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
			} catch (e) {
				return callback(e);
			}
			req.onupgradeneeded = function(e) {
				var db = e.target.result;
				var transaction = e.target.transaction;

				var fileStore;

				if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
					fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
				} else {
					fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
				}

				if (!fileStore.indexNames.contains('timestamp')) {
					fileStore.createIndex('timestamp', 'timestamp', { unique: false });
				}
			};
			req.onsuccess = function() {
				db = req.result;

				// add to the cache
				IDBFS.dbs[name] = db;
				callback(null, db);
			};
			req.onerror = function(e) {
				callback(this.error);
				e.preventDefault();
			};
		},getLocalSet:function (mount, callback) {
			var entries = {};

			function isRealDir(p) {
				return p !== '.' && p !== '..';
			};
			function toAbsolute(root) {
				return function(p) {
					return PATH.join2(root, p);
				}
			};

			var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

			while (check.length) {
				var path = check.pop();
				var stat;

				try {
					stat = FS.stat(path);
				} catch (e) {
					return callback(e);
				}

				if (FS.isDir(stat.mode)) {
					check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
				}

				entries[path] = { timestamp: stat.mtime };
			}

			return callback(null, { type: 'local', entries: entries });
		},getRemoteSet:function (mount, callback) {
			var entries = {};

			IDBFS.getDB(mount.mountpoint, function(err, db) {
				if (err) return callback(err);

				var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
				transaction.onerror = function(e) {
					callback(this.error);
					e.preventDefault();
				};

				var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
				var index = store.index('timestamp');

				index.openKeyCursor().onsuccess = function(event) {
					var cursor = event.target.result;

					if (!cursor) {
						return callback(null, { type: 'remote', db: db, entries: entries });
					}

					entries[cursor.primaryKey] = { timestamp: cursor.key };

					cursor.continue();
				};
			});
		},loadLocalEntry:function (path, callback) {
			var stat, node;

			try {
				var lookup = FS.lookupPath(path);
				node = lookup.node;
				stat = FS.stat(path);
			} catch (e) {
				return callback(e);
			}

			if (FS.isDir(stat.mode)) {
				return callback(null, { timestamp: stat.mtime, mode: stat.mode });
			} else if (FS.isFile(stat.mode)) {
				// Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
				// Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
				node.contents = MEMFS.getFileDataAsTypedArray(node);
				return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
			} else {
				return callback(new Error('node type not supported'));
			}
		},storeLocalEntry:function (path, entry, callback) {
			try {
				if (FS.isDir(entry.mode)) {
					FS.mkdir(path, entry.mode);
				} else if (FS.isFile(entry.mode)) {
					FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
				} else {
					return callback(new Error('node type not supported'));
				}

				FS.chmod(path, entry.mode);
				FS.utime(path, entry.timestamp, entry.timestamp);
			} catch (e) {
				return callback(e);
			}

			callback(null);
		},removeLocalEntry:function (path, callback) {
			try {
				var lookup = FS.lookupPath(path);
				var stat = FS.stat(path);

				if (FS.isDir(stat.mode)) {
					FS.rmdir(path);
				} else if (FS.isFile(stat.mode)) {
					FS.unlink(path);
				}
			} catch (e) {
				return callback(e);
			}

			callback(null);
		},loadRemoteEntry:function (store, path, callback) {
			var req = store.get(path);
			req.onsuccess = function(event) { callback(null, event.target.result); };
			req.onerror = function(e) {
				callback(this.error);
				e.preventDefault();
			};
		},storeRemoteEntry:function (store, path, entry, callback) {
			var req = store.put(entry, path);
			req.onsuccess = function() { callback(null); };
			req.onerror = function(e) {
				callback(this.error);
				e.preventDefault();
			};
		},removeRemoteEntry:function (store, path, callback) {
			var req = store.delete(path);
			req.onsuccess = function() { callback(null); };
			req.onerror = function(e) {
				callback(this.error);
				e.preventDefault();
			};
		},reconcile:function (src, dst, callback) {
			var total = 0;

			var create = [];
			Object.keys(src.entries).forEach(function (key) {
				var e = src.entries[key];
				var e2 = dst.entries[key];
				if (!e2 || e.timestamp > e2.timestamp) {
					create.push(key);
					total++;
				}
			});

			var remove = [];
			Object.keys(dst.entries).forEach(function (key) {
				var e = dst.entries[key];
				var e2 = src.entries[key];
				if (!e2) {
					remove.push(key);
					total++;
				}
			});

			if (!total) {
				return callback(null);
			}

			var errored = false;
			var completed = 0;
			var db = src.type === 'remote' ? src.db : dst.db;
			var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
			var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

			function done(err) {
				if (err) {
					if (!done.errored) {
						done.errored = true;
						return callback(err);
					}
					return;
				}
				if (++completed >= total) {
					return callback(null);
				}
			};

			transaction.onerror = function(e) {
				done(this.error);
				e.preventDefault();
			};

			// sort paths in ascending order so tempDirectory entries are created
			// before the files inside them
			create.sort().forEach(function (path) {
				if (dst.type === 'local') {
					IDBFS.loadRemoteEntry(store, path, function (err, entry) {
						if (err) return done(err);
						IDBFS.storeLocalEntry(path, entry, done);
					});
				} else {
					IDBFS.loadLocalEntry(path, function (err, entry) {
						if (err) return done(err);
						IDBFS.storeRemoteEntry(store, path, entry, done);
					});
				}
			});

			// sort paths in descending order so files are deleted before their
			// parent directories
			remove.sort().reverse().forEach(function(path) {
				if (dst.type === 'local') {
					IDBFS.removeLocalEntry(path, done);
				} else {
					IDBFS.removeRemoteEntry(store, path, done);
				}
			});
		}};

		var NODEFS={isWindows:false,staticInit:function () {
			NODEFS.isWindows = !!process.platform.match(/^win/);
		},mount:function (mount) {
			assert(ENVIRONMENT_IS_NODE);
			return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
		},createNode:function (parent, name, mode, dev) {
			if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			var node = FS.createNode(parent, name, mode);
			node.node_ops = NODEFS.node_ops;
			node.stream_ops = NODEFS.stream_ops;
			return node;
		},getMode:function (path) {
			var stat;
			try {
				stat = fs.lstatSync(path);
				if (NODEFS.isWindows) {
					// On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
					// propagate write bits to execute bits.
					stat.mode = stat.mode | ((stat.mode & 146) >> 1);
				}
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
			return stat.mode;
		},realPath:function (node) {
			var parts = [];
			while (node.parent !== node) {
				parts.push(node.name);
				node = node.parent;
			}
			parts.push(node.mount.opts.root);
			parts.reverse();
			return PATH.join.apply(null, parts);
		},flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
			flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
			flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
			if (flags in NODEFS.flagsToPermissionStringMap) {
				return NODEFS.flagsToPermissionStringMap[flags];
			} else {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
		},node_ops:{getattr:function (node) {
			var path = NODEFS.realPath(node);
			var stat;
			try {
				stat = fs.lstatSync(path);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
			// node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
			// See http://support.microsoft.com/kb/140365
			if (NODEFS.isWindows && !stat.blksize) {
				stat.blksize = 4096;
			}
			if (NODEFS.isWindows && !stat.blocks) {
				stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
			}
			return {
				dev: stat.dev,
				ino: stat.ino,
				mode: stat.mode,
				nlink: stat.nlink,
				uid: stat.uid,
				gid: stat.gid,
				rdev: stat.rdev,
				size: stat.size,
				atime: stat.atime,
				mtime: stat.mtime,
				ctime: stat.ctime,
				blksize: stat.blksize,
				blocks: stat.blocks
			};
		},setattr:function (node, attr) {
			var path = NODEFS.realPath(node);
			try {
				if (attr.mode !== undefined) {
					fs.chmodSync(path, attr.mode);
					// update the common node structure mode as well
					node.mode = attr.mode;
				}
				if (attr.timestamp !== undefined) {
					var date = new Date(attr.timestamp);
					fs.utimesSync(path, date, date);
				}
				if (attr.size !== undefined) {
					fs.truncateSync(path, attr.size);
				}
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},lookup:function (parent, name) {
			var path = PATH.join2(NODEFS.realPath(parent), name);
			var mode = NODEFS.getMode(path);
			return NODEFS.createNode(parent, name, mode);
		},mknod:function (parent, name, mode, dev) {
			var node = NODEFS.createNode(parent, name, mode, dev);
			// create the backing node for this in the fs root as well
			var path = NODEFS.realPath(node);
			try {
				if (FS.isDir(node.mode)) {
					fs.mkdirSync(path, node.mode);
				} else {
					fs.writeFileSync(path, '', { mode: node.mode });
				}
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
			return node;
		},rename:function (oldNode, newDir, newName) {
			var oldPath = NODEFS.realPath(oldNode);
			var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
			try {
				fs.renameSync(oldPath, newPath);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},unlink:function (parent, name) {
			var path = PATH.join2(NODEFS.realPath(parent), name);
			try {
				fs.unlinkSync(path);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},rmdir:function (parent, name) {
			var path = PATH.join2(NODEFS.realPath(parent), name);
			try {
				fs.rmdirSync(path);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},readdir:function (node) {
			var path = NODEFS.realPath(node);
			try {
				return fs.readdirSync(path);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},symlink:function (parent, newName, oldPath) {
			var newPath = PATH.join2(NODEFS.realPath(parent), newName);
			try {
				fs.symlinkSync(oldPath, newPath);
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},readlink:function (node) {
			var path = NODEFS.realPath(node);
			try {
				path = fs.readlinkSync(path);
				path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
				return path;
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		}},stream_ops:{open:function (stream) {
			var path = NODEFS.realPath(stream.node);
			try {
				if (FS.isFile(stream.node.mode)) {
					stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
				}
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},close:function (stream) {
			try {
				if (FS.isFile(stream.node.mode) && stream.nfd) {
					fs.closeSync(stream.nfd);
				}
			} catch (e) {
				if (!e.code) throw e;
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
		},read:function (stream, buffer, offset, length, position) {
			if (length === 0) return 0; // node errors on 0 length reads
			// FIXME this is terrible.
			var nbuffer = new Buffer(length);
			var res;
			try {
				res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
			} catch (e) {
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
			if (res > 0) {
				for (var i = 0; i < res; i++) {
					buffer[offset + i] = nbuffer[i];
				}
			}
			return res;
		},write:function (stream, buffer, offset, length, position) {
			// FIXME this is terrible.
			var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
			var res;
			try {
				res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
			} catch (e) {
				throw new FS.ErrnoError(ERRNO_CODES[e.code]);
			}
			return res;
		},llseek:function (stream, offset, whence) {
			var position = offset;
			if (whence === 1) {  // SEEK_CUR.
				position += stream.position;
			} else if (whence === 2) {  // SEEK_END.
				if (FS.isFile(stream.node.mode)) {
					try {
						var stat = fs.fstatSync(stream.nfd);
						position += stat.size;
					} catch (e) {
						throw new FS.ErrnoError(ERRNO_CODES[e.code]);
					}
				}
			}

			if (position < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}

			return position;
		}}};

		var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
			assert(ENVIRONMENT_IS_WORKER);
			if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
			var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
			var createdParents = {};
			function ensureParent(path) {
				// return the parent node, creating subdirs as necessary
				var parts = path.split('/');
				var parent = root;
				for (var i = 0; i < parts.length-1; i++) {
					var curr = parts.slice(0, i+1).join('/');
					if (!createdParents[curr]) {
						createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
					}
					parent = createdParents[curr];
				}
				return parent;
			}
			function base(path) {
				var parts = path.split('/');
				return parts[parts.length-1];
			}
			// We also accept FileList here, by using Array.prototype
			Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
				WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
			});
			(mount.opts["blobs"] || []).forEach(function(obj) {
				WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
			});
			(mount.opts["packages"] || []).forEach(function(pack) {
				pack['metadata'].files.forEach(function(file) {
					var name = file.filename.substr(1); // remove initial slash
					WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
				});
			});
			return root;
		},createNode:function (parent, name, mode, dev, contents, mtime) {
			var node = FS.createNode(parent, name, mode);
			node.mode = mode;
			node.node_ops = WORKERFS.node_ops;
			node.stream_ops = WORKERFS.stream_ops;
			node.timestamp = (mtime || new Date).getTime();
			assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
			if (mode === WORKERFS.FILE_MODE) {
				node.size = contents.size;
				node.contents = contents;
			} else {
				node.size = 4096;
				node.contents = {};
			}
			if (parent) {
				parent.contents[name] = node;
			}
			return node;
		},node_ops:{getattr:function (node) {
			return {
				dev: 1,
				ino: undefined,
				mode: node.mode,
				nlink: 1,
				uid: 0,
				gid: 0,
				rdev: undefined,
				size: node.size,
				atime: new Date(node.timestamp),
				mtime: new Date(node.timestamp),
				ctime: new Date(node.timestamp),
				blksize: 4096,
				blocks: Math.ceil(node.size / 4096),
			};
		},setattr:function (node, attr) {
			if (attr.mode !== undefined) {
				node.mode = attr.mode;
			}
			if (attr.timestamp !== undefined) {
				node.timestamp = attr.timestamp;
			}
		},lookup:function (parent, name) {
			throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
		},mknod:function (parent, name, mode, dev) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},rename:function (oldNode, newDir, newName) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},unlink:function (parent, name) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},rmdir:function (parent, name) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},readdir:function (node) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},symlink:function (parent, newName, oldPath) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		},readlink:function (node) {
			throw new FS.ErrnoError(ERRNO_CODES.EPERM);
		}},stream_ops:{read:function (stream, buffer, offset, length, position) {
			if (position >= stream.node.size) return 0;
			var chunk = stream.node.contents.slice(position, position + length);
			var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
			buffer.set(new Uint8Array(ab), offset);
			return chunk.size;
		},write:function (stream, buffer, offset, length, position) {
			throw new FS.ErrnoError(ERRNO_CODES.EIO);
		},llseek:function (stream, offset, whence) {
			var position = offset;
			if (whence === 1) {  // SEEK_CUR.
				position += stream.position;
			} else if (whence === 2) {  // SEEK_END.
				if (FS.isFile(stream.node.mode)) {
					position += stream.node.size;
				}
			}
			if (position < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			return position;
		}}};

		var _stdin=STATICTOP; STATICTOP += 16;;

		var _stdout=STATICTOP; STATICTOP += 16;;

		var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
			if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
			return ___setErrNo(e.errno);
		},lookupPath:function (path, opts) {
			path = PATH.resolve(FS.cwd(), path);
			opts = opts || {};

			if (!path) return { path: '', node: null };

			var defaults = {
				follow_mount: true,
				recurse_count: 0
			};
			for (var key in defaults) {
				if (opts[key] === undefined) {
					opts[key] = defaults[key];
				}
			}

			if (opts.recurse_count > 8) {  // max recursive lookup of 8
				throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
			}

			// split the path
			var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
				return !!p;
			}), false);

			// start at the root
			var current = FS.root;
			var current_path = '/';

			for (var i = 0; i < parts.length; i++) {
				var islast = (i === parts.length-1);
				if (islast && opts.parent) {
					// stop resolving
					break;
				}

				current = FS.lookupNode(current, parts[i]);
				current_path = PATH.join2(current_path, parts[i]);

				// jump to the mount's root node if this is a mountpoint
				if (FS.isMountpoint(current)) {
					if (!islast || (islast && opts.follow_mount)) {
						current = current.mounted.root;
					}
				}

				// by default, lookupPath will not follow a symlink if it is the final path component.
				// setting opts.follow = true will override this behavior.
				if (!islast || opts.follow) {
					var count = 0;
					while (FS.isLink(current.mode)) {
						var link = FS.readlink(current_path);
						current_path = PATH.resolve(PATH.dirname(current_path), link);

						var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
						current = lookup.node;

						if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
							throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
						}
					}
				}
			}

			return { path: current_path, node: current };
		},getPath:function (node) {
			var path;
			while (true) {
				if (FS.isRoot(node)) {
					var mount = node.mount.mountpoint;
					if (!path) return mount;
					return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
				}
				path = path ? node.name + '/' + path : node.name;
				node = node.parent;
			}
		},hashName:function (parentid, name) {
			var hash = 0;


			for (var i = 0; i < name.length; i++) {
				hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
			}
			return ((parentid + hash) >>> 0) % FS.nameTable.length;
		},hashAddNode:function (node) {
			var hash = FS.hashName(node.parent.id, node.name);
			node.name_next = FS.nameTable[hash];
			FS.nameTable[hash] = node;
		},hashRemoveNode:function (node) {
			var hash = FS.hashName(node.parent.id, node.name);
			if (FS.nameTable[hash] === node) {
				FS.nameTable[hash] = node.name_next;
			} else {
				var current = FS.nameTable[hash];
				while (current) {
					if (current.name_next === node) {
						current.name_next = node.name_next;
						break;
					}
					current = current.name_next;
				}
			}
		},lookupNode:function (parent, name) {
			var err = FS.mayLookup(parent);
			if (err) {
				throw new FS.ErrnoError(err, parent);
			}
			var hash = FS.hashName(parent.id, name);
			for (var node = FS.nameTable[hash]; node; node = node.name_next) {
				var nodeName = node.name;
				if (node.parent.id === parent.id && nodeName === name) {
					return node;
				}
			}
			// if we failed to find it in the cache, call into the VFS
			return FS.lookup(parent, name);
		},createNode:function (parent, name, mode, rdev) {
			if (!FS.FSNode) {
				FS.FSNode = function(parent, name, mode, rdev) {
					if (!parent) {
						parent = this;  // root node sets parent to itself
					}
					this.parent = parent;
					this.mount = parent.mount;
					this.mounted = null;
					this.id = FS.nextInode++;
					this.name = name;
					this.mode = mode;
					this.node_ops = {};
					this.stream_ops = {};
					this.rdev = rdev;
				};

				FS.FSNode.prototype = {};

				// compatibility
				var readMode = 292 | 73;
				var writeMode = 146;

				// NOTE we must use Object.defineProperties instead of individual calls to
				// Object.defineProperty in order to make closure compiler happy
				Object.defineProperties(FS.FSNode.prototype, {
					read: {
						get: function() { return (this.mode & readMode) === readMode; },
						set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
					},
					write: {
						get: function() { return (this.mode & writeMode) === writeMode; },
						set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
					},
					isFolder: {
						get: function() { return FS.isDir(this.mode); }
					},
					isDevice: {
						get: function() { return FS.isChrdev(this.mode); }
					}
				});
			}

			var node = new FS.FSNode(parent, name, mode, rdev);

			FS.hashAddNode(node);

			return node;
		},destroyNode:function (node) {
			FS.hashRemoveNode(node);
		},isRoot:function (node) {
			return node === node.parent;
		},isMountpoint:function (node) {
			return !!node.mounted;
		},isFile:function (mode) {
			return (mode & 61440) === 32768;
		},isDir:function (mode) {
			return (mode & 61440) === 16384;
		},isLink:function (mode) {
			return (mode & 61440) === 40960;
		},isChrdev:function (mode) {
			return (mode & 61440) === 8192;
		},isBlkdev:function (mode) {
			return (mode & 61440) === 24576;
		},isFIFO:function (mode) {
			return (mode & 61440) === 4096;
		},isSocket:function (mode) {
			return (mode & 49152) === 49152;
		},flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
			var flags = FS.flagModes[str];
			if (typeof flags === 'undefined') {
				throw new Error('Unknown file open mode: ' + str);
			}
			return flags;
		},flagsToPermissionString:function (flag) {
			var perms = ['r', 'w', 'rw'][flag & 3];
			if ((flag & 512)) {
				perms += 'w';
			}
			return perms;
		},nodePermissions:function (node, perms) {
			if (FS.ignorePermissions) {
				return 0;
			}
			// return 0 if any user, group or owner bits are set.
			if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
				return ERRNO_CODES.EACCES;
			} else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
				return ERRNO_CODES.EACCES;
			} else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
				return ERRNO_CODES.EACCES;
			}
			return 0;
		},mayLookup:function (dir) {
			var err = FS.nodePermissions(dir, 'x');
			if (err) return err;
			if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
			return 0;
		},mayCreate:function (dir, name) {
			try {
				var node = FS.lookupNode(dir, name);
				return ERRNO_CODES.EEXIST;
			} catch (e) {
			}
			return FS.nodePermissions(dir, 'wx');
		},mayDelete:function (dir, name, isdir) {
			var node;
			try {
				node = FS.lookupNode(dir, name);
			} catch (e) {
				return e.errno;
			}
			var err = FS.nodePermissions(dir, 'wx');
			if (err) {
				return err;
			}
			if (isdir) {
				if (!FS.isDir(node.mode)) {
					return ERRNO_CODES.ENOTDIR;
				}
				if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
					return ERRNO_CODES.EBUSY;
				}
			} else {
				if (FS.isDir(node.mode)) {
					return ERRNO_CODES.EISDIR;
				}
			}
			return 0;
		},mayOpen:function (node, flags) {
			if (!node) {
				return ERRNO_CODES.ENOENT;
			}
			if (FS.isLink(node.mode)) {
				return ERRNO_CODES.ELOOP;
			} else if (FS.isDir(node.mode)) {
				if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
					(flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
					return ERRNO_CODES.EISDIR;
				}
			}
			return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
		},MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
			fd_start = fd_start || 0;
			fd_end = fd_end || FS.MAX_OPEN_FDS;
			for (var fd = fd_start; fd <= fd_end; fd++) {
				if (!FS.streams[fd]) {
					return fd;
				}
			}
			throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
		},getStream:function (fd) {
			return FS.streams[fd];
		},createStream:function (stream, fd_start, fd_end) {
			if (!FS.FSStream) {
				FS.FSStream = function(){};
				FS.FSStream.prototype = {};
				// compatibility
				Object.defineProperties(FS.FSStream.prototype, {
					object: {
						get: function() { return this.node; },
						set: function(val) { this.node = val; }
					},
					isRead: {
						get: function() { return (this.flags & 2097155) !== 1; }
					},
					isWrite: {
						get: function() { return (this.flags & 2097155) !== 0; }
					},
					isAppend: {
						get: function() { return (this.flags & 1024); }
					}
				});
			}
			// clone it, so we can return an instance of FSStream
			var newStream = new FS.FSStream();
			for (var p in stream) {
				newStream[p] = stream[p];
			}
			stream = newStream;
			var fd = FS.nextfd(fd_start, fd_end);
			stream.fd = fd;
			FS.streams[fd] = stream;
			return stream;
		},closeStream:function (fd) {
			FS.streams[fd] = null;
		},chrdev_stream_ops:{open:function (stream) {
			var device = FS.getDevice(stream.node.rdev);
			// override node's stream ops with the device's
			stream.stream_ops = device.stream_ops;
			// forward the open call
			if (stream.stream_ops.open) {
				stream.stream_ops.open(stream);
			}
		},llseek:function () {
			throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
		}},major:function (dev) {
			return ((dev) >> 8);
		},minor:function (dev) {
			return ((dev) & 0xff);
		},makedev:function (ma, mi) {
			return ((ma) << 8 | (mi));
		},registerDevice:function (dev, ops) {
			FS.devices[dev] = { stream_ops: ops };
		},getDevice:function (dev) {
			return FS.devices[dev];
		},getMounts:function (mount) {
			var mounts = [];
			var check = [mount];

			while (check.length) {
				var m = check.pop();

				mounts.push(m);

				check.push.apply(check, m.mounts);
			}

			return mounts;
		},syncfs:function (populate, callback) {
			if (typeof(populate) === 'function') {
				callback = populate;
				populate = false;
			}

			FS.syncFSRequests++;

			if (FS.syncFSRequests > 1) {
				console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
			}

			var mounts = FS.getMounts(FS.root.mount);
			var completed = 0;

			function doCallback(err) {
				assert(FS.syncFSRequests > 0);
				FS.syncFSRequests--;
				return callback(err);
			}

			function done(err) {
				if (err) {
					if (!done.errored) {
						done.errored = true;
						return doCallback(err);
					}
					return;
				}
				if (++completed >= mounts.length) {
					doCallback(null);
				}
			};

			// sync all mounts
			mounts.forEach(function (mount) {
				if (!mount.type.syncfs) {
					return done(null);
				}
				mount.type.syncfs(mount, populate, done);
			});
		},mount:function (type, opts, mountpoint) {
			var root = mountpoint === '/';
			var pseudo = !mountpoint;
			var node;

			if (root && FS.root) {
				throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
			} else if (!root && !pseudo) {
				var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

				mountpoint = lookup.path;  // use the absolute path
				node = lookup.node;

				if (FS.isMountpoint(node)) {
					throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
				}

				if (!FS.isDir(node.mode)) {
					throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
				}
			}

			var mount = {
				type: type,
				opts: opts,
				mountpoint: mountpoint,
				mounts: []
			};

			// create a root node for the fs
			var mountRoot = type.mount(mount);
			mountRoot.mount = mount;
			mount.root = mountRoot;

			if (root) {
				FS.root = mountRoot;
			} else if (node) {
				// set as a mountpoint
				node.mounted = mount;

				// add the new mount to the current mount's children
				if (node.mount) {
					node.mount.mounts.push(mount);
				}
			}

			return mountRoot;
		},unmount:function (mountpoint) {
			var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

			if (!FS.isMountpoint(lookup.node)) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}

			// destroy the nodes for this mount, and all its child mounts
			var node = lookup.node;
			var mount = node.mounted;
			var mounts = FS.getMounts(mount);

			Object.keys(FS.nameTable).forEach(function (hash) {
				var current = FS.nameTable[hash];

				while (current) {
					var next = current.name_next;

					if (mounts.indexOf(current.mount) !== -1) {
						FS.destroyNode(current);
					}

					current = next;
				}
			});

			// no longer a mountpoint
			node.mounted = null;

			// remove this mount from the child mounts
			var idx = node.mount.mounts.indexOf(mount);
			assert(idx !== -1);
			node.mount.mounts.splice(idx, 1);
		},lookup:function (parent, name) {
			return parent.node_ops.lookup(parent, name);
		},mknod:function (path, mode, dev) {
			var lookup = FS.lookupPath(path, { parent: true });
			var parent = lookup.node;
			var name = PATH.basename(path);
			if (!name || name === '.' || name === '..') {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			var err = FS.mayCreate(parent, name);
			if (err) {
				throw new FS.ErrnoError(err);
			}
			if (!parent.node_ops.mknod) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			return parent.node_ops.mknod(parent, name, mode, dev);
		},create:function (path, mode) {
			mode = mode !== undefined ? mode : 438 /* 0666 */;
			mode &= 4095;
			mode |= 32768;
			return FS.mknod(path, mode, 0);
		},mkdir:function (path, mode) {
			mode = mode !== undefined ? mode : 511 /* 0777 */;
			mode &= 511 | 512;
			mode |= 16384;
			return FS.mknod(path, mode, 0);
		},mkdev:function (path, mode, dev) {
			if (typeof(dev) === 'undefined') {
				dev = mode;
				mode = 438 /* 0666 */;
			}
			mode |= 8192;
			return FS.mknod(path, mode, dev);
		},symlink:function (oldpath, newpath) {
			if (!PATH.resolve(oldpath)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			var lookup = FS.lookupPath(newpath, { parent: true });
			var parent = lookup.node;
			if (!parent) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			var newname = PATH.basename(newpath);
			var err = FS.mayCreate(parent, newname);
			if (err) {
				throw new FS.ErrnoError(err);
			}
			if (!parent.node_ops.symlink) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			return parent.node_ops.symlink(parent, newname, oldpath);
		},rename:function (old_path, new_path) {
			var old_dirname = PATH.dirname(old_path);
			var new_dirname = PATH.dirname(new_path);
			var old_name = PATH.basename(old_path);
			var new_name = PATH.basename(new_path);
			// parents must exist
			var lookup, old_dir, new_dir;
			try {
				lookup = FS.lookupPath(old_path, { parent: true });
				old_dir = lookup.node;
				lookup = FS.lookupPath(new_path, { parent: true });
				new_dir = lookup.node;
			} catch (e) {
				throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
			}
			if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			// need to be part of the same mount
			if (old_dir.mount !== new_dir.mount) {
				throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
			}
			// source must exist
			var old_node = FS.lookupNode(old_dir, old_name);
			// old path should not be an ancestor of the new path
			var relative = PATH.relative(old_path, new_dirname);
			if (relative.charAt(0) !== '.') {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			// new path should not be an ancestor of the old path
			relative = PATH.relative(new_path, old_dirname);
			if (relative.charAt(0) !== '.') {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
			}
			// see if the new path already exists
			var new_node;
			try {
				new_node = FS.lookupNode(new_dir, new_name);
			} catch (e) {
				// not fatal
			}
			// early out if nothing needs to change
			if (old_node === new_node) {
				return;
			}
			// we'll need to delete the old entry
			var isdir = FS.isDir(old_node.mode);
			var err = FS.mayDelete(old_dir, old_name, isdir);
			if (err) {
				throw new FS.ErrnoError(err);
			}
			// need delete permissions if we'll be overwriting.
			// need create permissions if new doesn't already exist.
			err = new_node ?
				FS.mayDelete(new_dir, new_name, isdir) :
			FS.mayCreate(new_dir, new_name);
			if (err) {
				throw new FS.ErrnoError(err);
			}
			if (!old_dir.node_ops.rename) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
				throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
			}
			// if we are going to change the parent, check write permissions
			if (new_dir !== old_dir) {
				err = FS.nodePermissions(old_dir, 'w');
				if (err) {
					throw new FS.ErrnoError(err);
				}
			}
			try {
				if (FS.trackingDelegate['willMovePath']) {
					FS.trackingDelegate['willMovePath'](old_path, new_path);
				}
			} catch(e) {
				console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
			}
			// remove the node from the lookup hash
			FS.hashRemoveNode(old_node);
			// do the underlying fs rename
			try {
				old_dir.node_ops.rename(old_node, new_dir, new_name);
			} catch (e) {
				throw e;
			} finally {
				// add the node back to the hash (in case node_ops.rename
				// changed its name)
				FS.hashAddNode(old_node);
			}
			try {
				if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
			} catch(e) {
				console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
			}
		},rmdir:function (path) {
			var lookup = FS.lookupPath(path, { parent: true });
			var parent = lookup.node;
			var name = PATH.basename(path);
			var node = FS.lookupNode(parent, name);
			var err = FS.mayDelete(parent, name, true);
			if (err) {
				throw new FS.ErrnoError(err);
			}
			if (!parent.node_ops.rmdir) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			if (FS.isMountpoint(node)) {
				throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
			}
			try {
				if (FS.trackingDelegate['willDeletePath']) {
					FS.trackingDelegate['willDeletePath'](path);
				}
			} catch(e) {
				console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
			}
			parent.node_ops.rmdir(parent, name);
			FS.destroyNode(node);
			try {
				if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
			} catch(e) {
				console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
			}
		},readdir:function (path) {
			var lookup = FS.lookupPath(path, { follow: true });
			var node = lookup.node;
			if (!node.node_ops.readdir) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
			}
			return node.node_ops.readdir(node);
		},unlink:function (path) {
			var lookup = FS.lookupPath(path, { parent: true });
			var parent = lookup.node;
			var name = PATH.basename(path);
			var node = FS.lookupNode(parent, name);
			var err = FS.mayDelete(parent, name, false);
			if (err) {
				// POSIX says unlink should set EPERM, not EISDIR
				if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
				throw new FS.ErrnoError(err);
			}
			if (!parent.node_ops.unlink) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			if (FS.isMountpoint(node)) {
				throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
			}
			try {
				if (FS.trackingDelegate['willDeletePath']) {
					FS.trackingDelegate['willDeletePath'](path);
				}
			} catch(e) {
				console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
			}
			parent.node_ops.unlink(parent, name);
			FS.destroyNode(node);
			try {
				if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
			} catch(e) {
				console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
			}
		},readlink:function (path) {
			var lookup = FS.lookupPath(path);
			var link = lookup.node;
			if (!link) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			if (!link.node_ops.readlink) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
		},stat:function (path, dontFollow) {
			var lookup = FS.lookupPath(path, { follow: !dontFollow });
			var node = lookup.node;
			if (!node) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			if (!node.node_ops.getattr) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			return node.node_ops.getattr(node);
		},lstat:function (path) {
			return FS.stat(path, true);
		},chmod:function (path, mode, dontFollow) {
			var node;
			if (typeof path === 'string') {
				var lookup = FS.lookupPath(path, { follow: !dontFollow });
				node = lookup.node;
			} else {
				node = path;
			}
			if (!node.node_ops.setattr) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			node.node_ops.setattr(node, {
				mode: (mode & 4095) | (node.mode & ~4095),
				timestamp: Date.now()
			});
		},lchmod:function (path, mode) {
			FS.chmod(path, mode, true);
		},fchmod:function (fd, mode) {
			var stream = FS.getStream(fd);
			if (!stream) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			FS.chmod(stream.node, mode);
		},chown:function (path, uid, gid, dontFollow) {
			var node;
			if (typeof path === 'string') {
				var lookup = FS.lookupPath(path, { follow: !dontFollow });
				node = lookup.node;
			} else {
				node = path;
			}
			if (!node.node_ops.setattr) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			node.node_ops.setattr(node, {
				timestamp: Date.now()
				// we ignore the uid / gid for now
			});
		},lchown:function (path, uid, gid) {
			FS.chown(path, uid, gid, true);
		},fchown:function (fd, uid, gid) {
			var stream = FS.getStream(fd);
			if (!stream) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			FS.chown(stream.node, uid, gid);
		},truncate:function (path, len) {
			if (len < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			var node;
			if (typeof path === 'string') {
				var lookup = FS.lookupPath(path, { follow: true });
				node = lookup.node;
			} else {
				node = path;
			}
			if (!node.node_ops.setattr) {
				throw new FS.ErrnoError(ERRNO_CODES.EPERM);
			}
			if (FS.isDir(node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
			}
			if (!FS.isFile(node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			var err = FS.nodePermissions(node, 'w');
			if (err) {
				throw new FS.ErrnoError(err);
			}
			node.node_ops.setattr(node, {
				size: len,
				timestamp: Date.now()
			});
		},ftruncate:function (fd, len) {
			var stream = FS.getStream(fd);
			if (!stream) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			if ((stream.flags & 2097155) === 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			FS.truncate(stream.node, len);
		},utime:function (path, atime, mtime) {
			var lookup = FS.lookupPath(path, { follow: true });
			var node = lookup.node;
			node.node_ops.setattr(node, {
				timestamp: Math.max(atime, mtime)
			});
		},open:function (path, flags, mode, fd_start, fd_end) {
			if (path === "") {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
			mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
			if ((flags & 64)) {
				mode = (mode & 4095) | 32768;
			} else {
				mode = 0;
			}
			var node;
			if (typeof path === 'object') {
				node = path;
			} else {
				path = PATH.normalize(path);
				try {
					var lookup = FS.lookupPath(path, {
						follow: !(flags & 131072)
					});
					node = lookup.node;
				} catch (e) {
					// ignore
				}
			}
			// perhaps we need to create the node
			var created = false;
			if ((flags & 64)) {
				if (node) {
					// if O_CREAT and O_EXCL are set, error out if the node already exists
					if ((flags & 128)) {
						throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
					}
				} else {
					// node doesn't exist, try to create it
					node = FS.mknod(path, mode, 0);
					created = true;
				}
			}
			if (!node) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
			}
			// can't truncate a device
			if (FS.isChrdev(node.mode)) {
				flags &= ~512;
			}
			// if asked only for a tempDirectory, then this must be one
			if ((flags & 65536) && !FS.isDir(node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
			}
			// check permissions, if this is not a file we just created now (it is ok to
			// create and write to a file with read-only permissions; it is read-only
			// for later use)
			if (!created) {
				var err = FS.mayOpen(node, flags);
				if (err) {
					throw new FS.ErrnoError(err);
				}
			}
			// do truncation if necessary
			if ((flags & 512)) {
				FS.truncate(node, 0);
			}
			// we've already handled these, don't pass down to the underlying vfs
			flags &= ~(128 | 512);

			// register the stream with the filesystem
			var stream = FS.createStream({
				node: node,
				path: FS.getPath(node),  // we want the absolute path to the node
				flags: flags,
				seekable: true,
				position: 0,
				stream_ops: node.stream_ops,
				// used by the file family libc calls (fopen, fwrite, ferror, etc.)
				ungotten: [],
				error: false
			}, fd_start, fd_end);
			// call the new stream's open function
			if (stream.stream_ops.open) {
				stream.stream_ops.open(stream);
			}
			if (Module['logReadFiles'] && !(flags & 1)) {
				if (!FS.readFiles) FS.readFiles = {};
				if (!(path in FS.readFiles)) {
					FS.readFiles[path] = 1;
					Module['printErr']('read file: ' + path);
				}
			}
			try {
				if (FS.trackingDelegate['onOpenFile']) {
					var trackingFlags = 0;
					if ((flags & 2097155) !== 1) {
						trackingFlags |= FS.tracking.openFlags.READ;
					}
					if ((flags & 2097155) !== 0) {
						trackingFlags |= FS.tracking.openFlags.WRITE;
					}
					FS.trackingDelegate['onOpenFile'](path, trackingFlags);
				}
			} catch(e) {
				console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
			}
			return stream;
		},close:function (stream) {
			if (stream.getdents) stream.getdents = null; // free readdir state
			try {
				if (stream.stream_ops.close) {
					stream.stream_ops.close(stream);
				}
			} catch (e) {
				throw e;
			} finally {
				FS.closeStream(stream.fd);
			}
		},llseek:function (stream, offset, whence) {
			if (!stream.seekable || !stream.stream_ops.llseek) {
				throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
			}
			stream.position = stream.stream_ops.llseek(stream, offset, whence);
			stream.ungotten = [];
			return stream.position;
		},read:function (stream, buffer, offset, length, position) {
			if (length < 0 || position < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			if ((stream.flags & 2097155) === 1) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			if (FS.isDir(stream.node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
			}
			if (!stream.stream_ops.read) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			var seeking = true;
			if (typeof position === 'undefined') {
				position = stream.position;
				seeking = false;
			} else if (!stream.seekable) {
				throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
			}
			var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
			if (!seeking) stream.position += bytesRead;
			return bytesRead;
		},write:function (stream, buffer, offset, length, position, canOwn) {
			if (length < 0 || position < 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			if ((stream.flags & 2097155) === 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			if (FS.isDir(stream.node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
			}
			if (!stream.stream_ops.write) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			if (stream.flags & 1024) {
				// seek to the end before writing in append mode
				FS.llseek(stream, 0, 2);
			}
			var seeking = true;
			if (typeof position === 'undefined') {
				position = stream.position;
				seeking = false;
			} else if (!stream.seekable) {
				throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
			}
			var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
			if (!seeking) stream.position += bytesWritten;
			try {
				if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
			} catch(e) {
				console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
			}
			return bytesWritten;
		},allocate:function (stream, offset, length) {
			if (offset < 0 || length <= 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
			}
			if ((stream.flags & 2097155) === 0) {
				throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			}
			if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
			}
			if (!stream.stream_ops.allocate) {
				throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
			}
			stream.stream_ops.allocate(stream, offset, length);
		},mmap:function (stream, buffer, offset, length, position, prot, flags) {
			// TODO if PROT is PROT_WRITE, make sure we have write access
			if ((stream.flags & 2097155) === 1) {
				throw new FS.ErrnoError(ERRNO_CODES.EACCES);
			}
			if (!stream.stream_ops.mmap) {
				throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
			}
			return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
		},msync:function (stream, buffer, offset, length, mmapFlags) {
			if (!stream || !stream.stream_ops.msync) {
				return 0;
			}
			return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
		},munmap:function (stream) {
			return 0;
		},ioctl:function (stream, cmd, arg) {
			if (!stream.stream_ops.ioctl) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
			}
			return stream.stream_ops.ioctl(stream, cmd, arg);
		},readFile:function (path, opts) {
			opts = opts || {};
			opts.flags = opts.flags || 'r';
			opts.encoding = opts.encoding || 'binary';
			if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
				throw new Error('Invalid encoding type "' + opts.encoding + '"');
			}
			var ret;
			var stream = FS.open(path, opts.flags);
			var stat = FS.stat(path);
			var length = stat.size;
			var buf = new Uint8Array(length);
			FS.read(stream, buf, 0, length, 0);
			if (opts.encoding === 'utf8') {
				ret = UTF8ArrayToString(buf, 0);
			} else if (opts.encoding === 'binary') {
				ret = buf;
			}
			FS.close(stream);
			return ret;
		},writeFile:function (path, data, opts) {
			opts = opts || {};
			opts.flags = opts.flags || 'w';
			opts.encoding = opts.encoding || 'utf8';
			if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
				throw new Error('Invalid encoding type "' + opts.encoding + '"');
			}
			var stream = FS.open(path, opts.flags, opts.mode);
			if (opts.encoding === 'utf8') {
				var buf = new Uint8Array(lengthBytesUTF8(data)+1);
				var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
				FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
			} else if (opts.encoding === 'binary') {
				FS.write(stream, data, 0, data.length, 0, opts.canOwn);
			}
			FS.close(stream);
		},cwd:function () {
			return FS.currentPath;
		},chdir:function (path) {
			var lookup = FS.lookupPath(path, { follow: true });
			if (!FS.isDir(lookup.node.mode)) {
				throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
			}
			var err = FS.nodePermissions(lookup.node, 'x');
			if (err) {
				throw new FS.ErrnoError(err);
			}
			FS.currentPath = lookup.path;
		},createDefaultDirectories:function () {
			FS.mkdir('/tmp');
			FS.mkdir('/home');
			FS.mkdir('/home/web_user');
		},createDefaultDevices:function () {
			// create /dev
			FS.mkdir('/dev');
			// setup /dev/null
			FS.registerDevice(FS.makedev(1, 3), {
				read: function() { return 0; },
				write: function(stream, buffer, offset, length, pos) { return length; }
			});
			FS.mkdev('/dev/null', FS.makedev(1, 3));
			// setup /dev/tty and /dev/tty1
			// stderr needs to print output using Module['printErr']
			// so we register a second tty just for it.
			TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
			TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
			FS.mkdev('/dev/tty', FS.makedev(5, 0));
			FS.mkdev('/dev/tty1', FS.makedev(6, 0));
			// setup /dev/[u]random
			var random_device;
			if (typeof crypto !== 'undefined') {
				// for modern web browsers
				var randomBuffer = new Uint8Array(1);
				random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
			} else if (ENVIRONMENT_IS_NODE) {
				// for nodejs
				random_device = function() { return require('crypto').randomBytes(1)[0]; };
			} else {
				// default for ES5 platforms
				random_device = function() { return (Math.random()*256)|0; };
			}
			FS.createDevice('/dev', 'random', random_device);
			FS.createDevice('/dev', 'urandom', random_device);
			// we're not going to emulate the actual shm device,
			// just create the tmp dirs that reside in it commonly
			FS.mkdir('/dev/shm');
			FS.mkdir('/dev/shm/tmp');
		},createSpecialDirectories:function () {
			// create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
			FS.mkdir('/proc');
			FS.mkdir('/proc/self');
			FS.mkdir('/proc/self/fd');
			FS.mount({
				mount: function() {
					var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
					node.node_ops = {
						lookup: function(parent, name) {
							var fd = +name;
							var stream = FS.getStream(fd);
							if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
							var ret = {
								parent: null,
								mount: { mountpoint: 'fake' },
								node_ops: { readlink: function() { return stream.path } }
							};
							ret.parent = ret; // make it look like a simple root node
							return ret;
						}
					};
					return node;
				}
			}, {}, '/proc/self/fd');
		},createStandardStreams:function () {
			// TODO deprecate the old functionality of a single
			// input / output callback and that utilizes FS.createDevice
			// and instead require a unique set of stream ops

			// by default, we symlink the standard streams to the
			// default tty devices. however, if the standard streams
			// have been overwritten we create a unique device for
			// them instead.
			if (Module['stdin']) {
				FS.createDevice('/dev', 'stdin', Module['stdin']);
			} else {
				FS.symlink('/dev/tty', '/dev/stdin');
			}
			if (Module['stdout']) {
				FS.createDevice('/dev', 'stdout', null, Module['stdout']);
			} else {
				FS.symlink('/dev/tty', '/dev/stdout');
			}
			if (Module['stderr']) {
				FS.createDevice('/dev', 'stderr', null, Module['stderr']);
			} else {
				FS.symlink('/dev/tty1', '/dev/stderr');
			}

			// open default streams for the stdin, stdout and stderr devices
			var stdin = FS.open('/dev/stdin', 'r');
			assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

			var stdout = FS.open('/dev/stdout', 'w');
			assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

			var stderr = FS.open('/dev/stderr', 'w');
			assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
		},ensureErrnoError:function () {
			if (FS.ErrnoError) return;
			FS.ErrnoError = function ErrnoError(errno, node) {
				//Module.printErr(stackTrace()); // useful for debugging
				this.node = node;
				this.setErrno = function(errno) {
					this.errno = errno;
					for (var key in ERRNO_CODES) {
						if (ERRNO_CODES[key] === errno) {
							this.code = key;
							break;
						}
					}
				};
				this.setErrno(errno);
				this.message = ERRNO_MESSAGES[errno];
				if (this.stack) this.stack = demangleAll(this.stack);
			};
			FS.ErrnoError.prototype = new Error();
			FS.ErrnoError.prototype.constructor = FS.ErrnoError;
			// Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
			[ERRNO_CODES.ENOENT].forEach(function(code) {
				FS.genericErrors[code] = new FS.ErrnoError(code);
				FS.genericErrors[code].stack = '<generic error, no stack>';
			});
		},staticInit:function () {
			FS.ensureErrnoError();

			FS.nameTable = new Array(4096);

			FS.mount(MEMFS, {}, '/');

			FS.createDefaultDirectories();
			FS.createDefaultDevices();
			FS.createSpecialDirectories();

			FS.filesystems = {
				'MEMFS': MEMFS,
				'IDBFS': IDBFS,
				'NODEFS': NODEFS,
				'WORKERFS': WORKERFS,
			};
		},init:function (input, output, error) {
			assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
			FS.init.initialized = true;

			FS.ensureErrnoError();

			// Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
			Module['stdin'] = input || Module['stdin'];
			Module['stdout'] = output || Module['stdout'];
			Module['stderr'] = error || Module['stderr'];

			FS.createStandardStreams();
		},quit:function () {
			FS.init.initialized = false;
			// force-flush all streams, so we get musl std streams printed out
			var fflush = Module['_fflush'];
			if (fflush) fflush(0);
			// close all of our streams
			for (var i = 0; i < FS.streams.length; i++) {
				var stream = FS.streams[i];
				if (!stream) {
					continue;
				}
				FS.close(stream);
			}
		},getMode:function (canRead, canWrite) {
			var mode = 0;
			if (canRead) mode |= 292 | 73;
			if (canWrite) mode |= 146;
			return mode;
		},joinPath:function (parts, forceRelative) {
			var path = PATH.join.apply(null, parts);
			if (forceRelative && path[0] == '/') path = path.substr(1);
			return path;
		},absolutePath:function (relative, base) {
			return PATH.resolve(base, relative);
		},standardizePath:function (path) {
			return PATH.normalize(path);
		},findObject:function (path, dontResolveLastLink) {
			var ret = FS.analyzePath(path, dontResolveLastLink);
			if (ret.exists) {
				return ret.object;
			} else {
				___setErrNo(ret.error);
				return null;
			}
		},analyzePath:function (path, dontResolveLastLink) {
			// operate from within the context of the symlink's target
			try {
				var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
				path = lookup.path;
			} catch (e) {
			}
			var ret = {
				isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
				parentExists: false, parentPath: null, parentObject: null
			};
			try {
				var lookup = FS.lookupPath(path, { parent: true });
				ret.parentExists = true;
				ret.parentPath = lookup.path;
				ret.parentObject = lookup.node;
				ret.name = PATH.basename(path);
				lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
				ret.exists = true;
				ret.path = lookup.path;
				ret.object = lookup.node;
				ret.name = lookup.node.name;
				ret.isRoot = lookup.path === '/';
			} catch (e) {
				ret.error = e.errno;
			};
			return ret;
		},createFolder:function (parent, name, canRead, canWrite) {
			var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
			var mode = FS.getMode(canRead, canWrite);
			return FS.mkdir(path, mode);
		},createPath:function (parent, path, canRead, canWrite) {
			parent = typeof parent === 'string' ? parent : FS.getPath(parent);
			var parts = path.split('/').reverse();
			while (parts.length) {
				var part = parts.pop();
				if (!part) continue;
				var current = PATH.join2(parent, part);
				try {
					FS.mkdir(current);
				} catch (e) {
					// ignore EEXIST
				}
				parent = current;
			}
			return current;
		},createFile:function (parent, name, properties, canRead, canWrite) {
			var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
			var mode = FS.getMode(canRead, canWrite);
			return FS.create(path, mode);
		},createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
			var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
			var mode = FS.getMode(canRead, canWrite);
			var node = FS.create(path, mode);
			if (data) {
				if (typeof data === 'string') {
					var arr = new Array(data.length);
					for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
					data = arr;
				}
				// make sure we can write to the file
				FS.chmod(node, mode | 146);
				var stream = FS.open(node, 'w');
				FS.write(stream, data, 0, data.length, 0, canOwn);
				FS.close(stream);
				FS.chmod(node, mode);
			}
			return node;
		},createDevice:function (parent, name, input, output) {
			var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
			var mode = FS.getMode(!!input, !!output);
			if (!FS.createDevice.major) FS.createDevice.major = 64;
			var dev = FS.makedev(FS.createDevice.major++, 0);
			// Create a fake device that a set of stream ops to emulate
			// the old behavior.
			FS.registerDevice(dev, {
				open: function(stream) {
					stream.seekable = false;
				},
				close: function(stream) {
					// flush any pending line data
					if (output && output.buffer && output.buffer.length) {
						output(10);
					}
				},
				read: function(stream, buffer, offset, length, pos /* ignored */) {
					var bytesRead = 0;
					for (var i = 0; i < length; i++) {
						var result;
						try {
							result = input();
						} catch (e) {
							throw new FS.ErrnoError(ERRNO_CODES.EIO);
						}
						if (result === undefined && bytesRead === 0) {
							throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
						}
						if (result === null || result === undefined) break;
						bytesRead++;
						buffer[offset+i] = result;
					}
					if (bytesRead) {
						stream.node.timestamp = Date.now();
					}
					return bytesRead;
				},
				write: function(stream, buffer, offset, length, pos) {
					for (var i = 0; i < length; i++) {
						try {
							output(buffer[offset+i]);
						} catch (e) {
							throw new FS.ErrnoError(ERRNO_CODES.EIO);
						}
					}
					if (length) {
						stream.node.timestamp = Date.now();
					}
					return i;
				}
			});
			return FS.mkdev(path, mode, dev);
		},createLink:function (parent, name, target, canRead, canWrite) {
			var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
			return FS.symlink(target, path);
		},forceLoadFile:function (obj) {
			if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
			var success = true;
			if (typeof XMLHttpRequest !== 'undefined') {
				throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
			} else if (Module['read']) {
				// Command-line.
				try {
					// WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
					//          read() will try to parse UTF8.
					obj.contents = intArrayFromString(Module['read'](obj.url), true);
					obj.usedBytes = obj.contents.length;
				} catch (e) {
					success = false;
				}
			} else {
				throw new Error('Cannot load without read() or XMLHttpRequest.');
			}
			if (!success) ___setErrNo(ERRNO_CODES.EIO);
			return success;
		},createLazyFile:function (parent, name, url, canRead, canWrite) {
			// Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
			function LazyUint8Array() {
				this.lengthKnown = false;
				this.chunks = []; // Loaded chunks. Index is the chunk number
			}
			LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
				if (idx > this.length-1 || idx < 0) {
					return undefined;
				}
				var chunkOffset = idx % this.chunkSize;
				var chunkNum = (idx / this.chunkSize)|0;
				return this.getter(chunkNum)[chunkOffset];
			}
			LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
				this.getter = getter;
			}
			LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
				// Find length
				var xhr = new XMLHttpRequest();
				xhr.open('HEAD', url, false);
				xhr.send(null);
				if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
				var datalength = Number(xhr.getResponseHeader("Content-length"));
				var header;
				var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
				var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";

				var chunkSize = 1024*1024; // Chunk size in bytes

				if (!hasByteServing) chunkSize = datalength;

				// Function to get a range from the remote URL.
				var doXHR = (function(from, to) {
					if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
					if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

					// TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
					var xhr = new XMLHttpRequest();
					xhr.open('GET', url, false);
					if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

					// Some hints to the browser that we want binary data.
					if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
					if (xhr.overrideMimeType) {
						xhr.overrideMimeType('text/plain; charset=x-user-defined');
					}

					xhr.send(null);
					if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
					if (xhr.response !== undefined) {
						return new Uint8Array(xhr.response || []);
					} else {
						return intArrayFromString(xhr.responseText || '', true);
					}
				});
				var lazyArray = this;
				lazyArray.setDataGetter(function(chunkNum) {
					var start = chunkNum * chunkSize;
					var end = (chunkNum+1) * chunkSize - 1; // including this byte
					end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
					if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
						lazyArray.chunks[chunkNum] = doXHR(start, end);
					}
					if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
					return lazyArray.chunks[chunkNum];
				});

				if (usesGzip || !datalength) {
					// if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
					chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
					datalength = this.getter(0).length;
					chunkSize = datalength;
					console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
				}

				this._length = datalength;
				this._chunkSize = chunkSize;
				this.lengthKnown = true;
			}
			if (typeof XMLHttpRequest !== 'undefined') {
				if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
				var lazyArray = new LazyUint8Array();
				Object.defineProperties(lazyArray, {
					length: {
						get: function() {
							if(!this.lengthKnown) {
								this.cacheLength();
							}
							return this._length;
						}
					},
					chunkSize: {
						get: function() {
							if(!this.lengthKnown) {
								this.cacheLength();
							}
							return this._chunkSize;
						}
					}
				});

				var properties = { isDevice: false, contents: lazyArray };
			} else {
				var properties = { isDevice: false, url: url };
			}

			var node = FS.createFile(parent, name, properties, canRead, canWrite);
			// This is a total hack, but I want to get this lazy file code out of the
			// core of MEMFS. If we want to keep this lazy file concept I feel it should
			// be its own thin LAZYFS proxying calls to MEMFS.
			if (properties.contents) {
				node.contents = properties.contents;
			} else if (properties.url) {
				node.contents = null;
				node.url = properties.url;
			}
			// Add a function that defers querying the file size until it is asked the first time.
			Object.defineProperties(node, {
				usedBytes: {
					get: function() { return this.contents.length; }
				}
			});
			// override each stream op with one that tries to force load the lazy file first
			var stream_ops = {};
			var keys = Object.keys(node.stream_ops);
			keys.forEach(function(key) {
				var fn = node.stream_ops[key];
				stream_ops[key] = function forceLoadLazyFile() {
					if (!FS.forceLoadFile(node)) {
						throw new FS.ErrnoError(ERRNO_CODES.EIO);
					}
					return fn.apply(null, arguments);
				};
			});
			// use a custom read function
			stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
				if (!FS.forceLoadFile(node)) {
					throw new FS.ErrnoError(ERRNO_CODES.EIO);
				}
				var contents = stream.node.contents;
				if (position >= contents.length)
					return 0;
				var size = Math.min(contents.length - position, length);
				assert(size >= 0);
				if (contents.slice) { // normal array
					for (var i = 0; i < size; i++) {
						buffer[offset + i] = contents[position + i];
					}
				} else {
					for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
						buffer[offset + i] = contents.get(position + i);
					}
				}
				return size;
			};
			node.stream_ops = stream_ops;
			return node;
		},createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
			Browser.init(); // XXX perhaps this method should move onto Browser?
			// TODO we should allow people to just pass in a complete filename instead
			// of parent and name being that we just join them anyways
			var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
			var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
			function processData(byteArray) {
				function finish(byteArray) {
					if (preFinish) preFinish();
					if (!dontCreateFile) {
						FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
					}
					if (onload) onload();
					removeRunDependency(dep);
				}
				var handled = false;
				Module['preloadPlugins'].forEach(function(plugin) {
					if (handled) return;
					if (plugin['canHandle'](fullname)) {
						plugin['handle'](byteArray, fullname, finish, function() {
							if (onerror) onerror();
							removeRunDependency(dep);
						});
						handled = true;
					}
				});
				if (!handled) finish(byteArray);
			}
			addRunDependency(dep);
			if (typeof url == 'string') {
				Browser.asyncLoad(url, function(byteArray) {
					processData(byteArray);
				}, onerror);
			} else {
				processData(url);
			}
		},indexedDB:function () {
			return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
		},DB_NAME:function () {
			return 'EM_FS_' + window.location.pathname;
		},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
			onload = onload || function(){};
			onerror = onerror || function(){};
			var indexedDB = FS.indexedDB();
			try {
				var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
			} catch (e) {
				return onerror(e);
			}
			openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
				console.log('creating db');
				var db = openRequest.result;
				db.createObjectStore(FS.DB_STORE_NAME);
			};
			openRequest.onsuccess = function openRequest_onsuccess() {
				var db = openRequest.result;
				var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
				var files = transaction.objectStore(FS.DB_STORE_NAME);
				var ok = 0, fail = 0, total = paths.length;
				function finish() {
					if (fail == 0) onload(); else onerror();
				}
				paths.forEach(function(path) {
					var putRequest = files.put(FS.analyzePath(path).object.contents, path);
					putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
					putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
				});
				transaction.onerror = onerror;
			};
			openRequest.onerror = onerror;
		},loadFilesFromDB:function (paths, onload, onerror) {
			onload = onload || function(){};
			onerror = onerror || function(){};
			var indexedDB = FS.indexedDB();
			try {
				var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
			} catch (e) {
				return onerror(e);
			}
			openRequest.onupgradeneeded = onerror; // no database to load from
			openRequest.onsuccess = function openRequest_onsuccess() {
				var db = openRequest.result;
				try {
					var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
				} catch(e) {
					onerror(e);
					return;
				}
				var files = transaction.objectStore(FS.DB_STORE_NAME);
				var ok = 0, fail = 0, total = paths.length;
				function finish() {
					if (fail == 0) onload(); else onerror();
				}
				paths.forEach(function(path) {
					var getRequest = files.get(path);
					getRequest.onsuccess = function getRequest_onsuccess() {
						if (FS.analyzePath(path).exists) {
							FS.unlink(path);
						}
						FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
						ok++;
						if (ok + fail == total) finish();
					};
					getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
				});
				transaction.onerror = onerror;
			};
			openRequest.onerror = onerror;
		}};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
			if (path[0] !== '/') {
				// relative path
				var dir;
				if (dirfd === -100) {
					dir = FS.cwd();
				} else {
					var dirstream = FS.getStream(dirfd);
					if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
					dir = dirstream.path;
				}
				path = PATH.join2(dir, path);
			}
			return path;
		},doStat:function (func, path, buf) {
			try {
				var stat = func(path);
			} catch (e) {
				if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
					// an error occurred while trying to look up the path; we should just report ENOTDIR
					return -ERRNO_CODES.ENOTDIR;
				}
				throw e;
			}
			HEAP32[((buf)>>2)]=stat.dev;
			HEAP32[(((buf)+(4))>>2)]=0;
			HEAP32[(((buf)+(8))>>2)]=stat.ino;
			HEAP32[(((buf)+(12))>>2)]=stat.mode;
			HEAP32[(((buf)+(16))>>2)]=stat.nlink;
			HEAP32[(((buf)+(20))>>2)]=stat.uid;
			HEAP32[(((buf)+(24))>>2)]=stat.gid;
			HEAP32[(((buf)+(28))>>2)]=stat.rdev;
			HEAP32[(((buf)+(32))>>2)]=0;
			HEAP32[(((buf)+(36))>>2)]=stat.size;
			HEAP32[(((buf)+(40))>>2)]=4096;
			HEAP32[(((buf)+(44))>>2)]=stat.blocks;
			HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
			HEAP32[(((buf)+(52))>>2)]=0;
			HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
			HEAP32[(((buf)+(60))>>2)]=0;
			HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
			HEAP32[(((buf)+(68))>>2)]=0;
			HEAP32[(((buf)+(72))>>2)]=stat.ino;
			return 0;
		},doMsync:function (addr, stream, len, flags) {
			var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
			FS.msync(stream, buffer, 0, len, flags);
		},doMkdir:function (path, mode) {
			// remove a trailing slash, if one - /a/b/ has basename of '', but
			// we want to create b in the context of this function
			path = PATH.normalize(path);
			if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
			FS.mkdir(path, mode, 0);
			return 0;
		},doMknod:function (path, mode, dev) {
			// we don't want this in the JS API as it uses mknod to create all nodes.
			switch (mode & 61440) {
				case 32768:
				case 8192:
				case 24576:
				case 4096:
				case 49152:
					break;
				default: return -ERRNO_CODES.EINVAL;
			}
			FS.mknod(path, mode, dev);
			return 0;
		},doReadlink:function (path, buf, bufsize) {
			if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
			var ret = FS.readlink(path);
			ret = ret.slice(0, Math.max(0, bufsize));
			writeStringToMemory(ret, buf, true);
			return ret.length;
		},doAccess:function (path, amode) {
			if (amode & ~7) {
				// need a valid mode
				return -ERRNO_CODES.EINVAL;
			}
			var node;
			var lookup = FS.lookupPath(path, { follow: true });
			node = lookup.node;
			var perms = '';
			if (amode & 4) perms += 'r';
			if (amode & 2) perms += 'w';
			if (amode & 1) perms += 'x';
			if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
				return -ERRNO_CODES.EACCES;
			}
			return 0;
		},doDup:function (path, flags, suggestFD) {
			var suggest = FS.getStream(suggestFD);
			if (suggest) FS.close(suggest);
			return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
		},doReadv:function (stream, iov, iovcnt, offset) {
			var ret = 0;
			for (var i = 0; i < iovcnt; i++) {
				var ptr = HEAP32[(((iov)+(i*8))>>2)];
				var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
				var curr = FS.read(stream, HEAP8,ptr, len, offset);
				if (curr < 0) return -1;
				ret += curr;
				if (curr < len) break; // nothing more to read
			}
			return ret;
		},doWritev:function (stream, iov, iovcnt, offset) {
			var ret = 0;
			for (var i = 0; i < iovcnt; i++) {
				var ptr = HEAP32[(((iov)+(i*8))>>2)];
				var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
				var curr = FS.write(stream, HEAP8,ptr, len, offset);
				if (curr < 0) return -1;
				ret += curr;
			}
			return ret;
		},varargs:0,get:function (varargs) {
			SYSCALLS.varargs += 4;
			var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
			return ret;
		},getStr:function () {
			var ret = Pointer_stringify(SYSCALLS.get());
			return ret;
		},getStreamFromFD:function () {
			var stream = FS.getStream(SYSCALLS.get());
			if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			return stream;
		},getSocketFromFD:function () {
			var socket = SOCKFS.getSocket(SYSCALLS.get());
			if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
			return socket;
		},getSocketAddress:function (allowNull) {
			var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
			if (allowNull && addrp === 0) return null;
			var info = __read_sockaddr(addrp, addrlen);
			if (info.errno) throw new FS.ErrnoError(info.errno);
			info.addr = DNS.lookup_addr(info.addr) || info.addr;
			return info;
		},get64:function () {
			var low = SYSCALLS.get(), high = SYSCALLS.get();
			if (low >= 0) assert(high === 0);
			else assert(high === -1);
			return low;
		},getZero:function () {
			assert(SYSCALLS.get() === 0);
		}};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
												  try {
													  // ioctl
													  var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
													  switch (op) {
														  case 21505: {
															  if (!stream.tty) return -ERRNO_CODES.ENOTTY;
															  return 0;
														  }
														  case 21506: {
															  if (!stream.tty) return -ERRNO_CODES.ENOTTY;
															  return 0; // no-op, not actually adjusting terminal settings
														  }
														  case 21519: {
															  if (!stream.tty) return -ERRNO_CODES.ENOTTY;
															  var argp = SYSCALLS.get();
															  HEAP32[((argp)>>2)]=0;
															  return 0;
														  }
														  case 21520: {
															  if (!stream.tty) return -ERRNO_CODES.ENOTTY;
															  return -ERRNO_CODES.EINVAL; // not supported
														  }
														  case 21531: {
															  var argp = SYSCALLS.get();
															  return FS.ioctl(stream, op, argp);
														  }
														  default: abort('bad ioctl syscall ' + op);
													  }
												  } catch (e) {
													  if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
													  return -e.errno;
												  }
												 }


		Module["_bitshift64Ashr"] = _bitshift64Ashr;


		Module["_bitshift64Lshr"] = _bitshift64Lshr;

		function ___cxa_get_exception_ptr(ptr) {
			// TODO: use info.adjusted?
			return ptr;
		}

		function _pthread_cleanup_push(routine, arg) {
			__ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
			_pthread_cleanup_push.level = __ATEXIT__.length;
		}

		function ___cxa_find_matching_catch_4() {
			return ___cxa_find_matching_catch.apply(null, arguments);
		}

		function ___cxa_find_matching_catch_2() {
			return ___cxa_find_matching_catch.apply(null, arguments);
		}

		function ___cxa_find_matching_catch_3() {
			return ___cxa_find_matching_catch.apply(null, arguments);
		}

		function ___cxa_begin_catch(ptr) {
			__ZSt18uncaught_exceptionv.uncaught_exception--;
			EXCEPTIONS.caught.push(ptr);
			EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
			return ptr;
		}

		function _llvm_eh_typeid_for(type) {
			return type;
		}

		function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
											  try {
												  // open
												  var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
												  var stream = FS.open(pathname, flags, mode);
												  return stream.fd;
											  } catch (e) {
												  if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
												  return -e.errno;
											  }
											 }


		function _emscripten_memcpy_big(dest, src, num) {
			HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
			return dest;
		} 
		Module["_memcpy"] = _memcpy;

		function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
											  try {
												  // close
												  var stream = SYSCALLS.getStreamFromFD();
												  FS.close(stream);
												  return 0;
											  } catch (e) {
												  if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
												  return -e.errno;
											  }
											 }

		function _sbrk(bytes) {
			// Implement a Linux-like 'memory area' for our 'process'.
			// Changes the size of the memory area by |bytes|; returns the
			// address of the previous top ('break') of the memory area
			// We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
			var self = _sbrk;
			if (!self.called) {
				DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
				self.called = true;
				assert(Runtime.dynamicAlloc);
				self.alloc = Runtime.dynamicAlloc;
				Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
			}
			var ret = DYNAMICTOP;
			if (bytes != 0) {
				var success = self.alloc(bytes);
				if (!success) return -1 >>> 0; // sbrk failure code
			}
			return ret;  // Previous break location.
		}


		Module["_memmove"] = _memmove;

		function _pthread_cleanup_pop() {
			assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
			__ATEXIT__.pop();
			_pthread_cleanup_push.level = __ATEXIT__.length;
		}

		function _time(ptr) {
			var ret = (Date.now()/1000)|0;
			if (ptr) {
				HEAP32[((ptr)>>2)]=ret;
			}
			return ret;
		}

		function _pthread_self() {
			//FIXME: assumes only a single thread
			return 0;
		}

		function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
												try {
													// llseek
													var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
													var offset = offset_low;
													assert(offset_high === 0);
													FS.llseek(stream, offset, whence);
													HEAP32[((result)>>2)]=stream.position;
													if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
													return 0;
												} catch (e) {
													if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
													return -e.errno;
												}
											   }


		function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
												try {
													// writev
													var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
													return SYSCALLS.doWritev(stream, iov, iovcnt);
												} catch (e) {
													if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
													return -e.errno;
												}
											   }

		function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
												try {
													// fcntl64
													var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
													switch (cmd) {
														case 0: {
															var arg = SYSCALLS.get();
															if (arg < 0) {
																return -ERRNO_CODES.EINVAL;
															}
															var newStream;
															newStream = FS.open(stream.path, stream.flags, 0, arg);
															return newStream.fd;
														}
														case 1:
														case 2:
															return 0;  // FD_CLOEXEC makes no sense for a single process.
														case 3:
															return stream.flags;
														case 4: {
															var arg = SYSCALLS.get();
															stream.flags |= arg;
															return 0;
														}
														case 12:
														case 12: {
															var arg = SYSCALLS.get();
															var offset = 0;
															// We're always unlocked.
															HEAP16[(((arg)+(offset))>>1)]=2;
															return 0;
														}
														case 13:
														case 14:
														case 13:
														case 14:
															return 0; // Pretend that the locking is successful.
														case 16:
														case 8:
															return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
														case 9:
															// musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
															___setErrNo(ERRNO_CODES.EINVAL);
															return -1;
														default: {
															return -ERRNO_CODES.EINVAL;
														}
													}
												} catch (e) {
													if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
													return -e.errno;
												}
											   }

		function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
												try {
													// readv
													var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
													return SYSCALLS.doReadv(stream, iov, iovcnt);
												} catch (e) {
													if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
													return -e.errno;
												}
											   }
		FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
		__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
		if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
		STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

		staticSealed = true; // seal the static portion of memory

		STACK_MAX = STACK_BASE + TOTAL_STACK;

		DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

		assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

		var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


		function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

		function invoke_iiii(index,a1,a2,a3) {
			try {
				return Module["dynCall_iiii"](index,a1,a2,a3);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_viiiii(index,a1,a2,a3,a4,a5) {
			try {
				Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_i(index) {
			try {
				return Module["dynCall_i"](index);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_vi(index,a1) {
			try {
				Module["dynCall_vi"](index,a1);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_vii(index,a1,a2) {
			try {
				Module["dynCall_vii"](index,a1,a2);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_ii(index,a1) {
			try {
				return Module["dynCall_ii"](index,a1);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_viii(index,a1,a2,a3) {
			try {
				Module["dynCall_viii"](index,a1,a2,a3);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_v(index) {
			try {
				Module["dynCall_v"](index);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_iiiii(index,a1,a2,a3,a4) {
			try {
				return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
			try {
				Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_iii(index,a1,a2) {
			try {
				return Module["dynCall_iii"](index,a1,a2);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
			try {
				return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		function invoke_viiii(index,a1,a2,a3,a4) {
			try {
				Module["dynCall_viiii"](index,a1,a2,a3,a4);
			} catch(e) {
				if (typeof e !== 'number' && e !== 'longjmp') throw e;
				asm["setThrew"](1, 0);
			}
		}

		Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

		Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_pthread_key_create": _pthread_key_create, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_find_matching_catch_4": ___cxa_find_matching_catch_4, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___setErrNo": ___setErrNo, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "__exit": __exit, "_pthread_getspecific": _pthread_getspecific, "_pthread_self": _pthread_self, "___cxa_get_exception_ptr": ___cxa_get_exception_ptr, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_pthread_setspecific": _pthread_setspecific, "___cxa_throw": ___cxa_throw, "_sysconf": _sysconf, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___cxa_allocate_exception": ___cxa_allocate_exception, "___syscall140": ___syscall140, "_exit": _exit, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
		// EMSCRIPTEN_START_ASM
		var asm = (function(global, env, buffer) {
			'almost asm';


			var HEAP8 = new global.Int8Array(buffer);
			var HEAP16 = new global.Int16Array(buffer);
			var HEAP32 = new global.Int32Array(buffer);
			var HEAPU8 = new global.Uint8Array(buffer);
			var HEAPU16 = new global.Uint16Array(buffer);
			var HEAPU32 = new global.Uint32Array(buffer);
			var HEAPF32 = new global.Float32Array(buffer);
			var HEAPF64 = new global.Float64Array(buffer);


			var STACKTOP=env.STACKTOP|0;
			var STACK_MAX=env.STACK_MAX|0;
			var tempDoublePtr=env.tempDoublePtr|0;
			var ABORT=env.ABORT|0;
			var cttz_i8=env.cttz_i8|0;

			var __THREW__ = 0;
			var threwValue = 0;
			var setjmpId = 0;
			var undef = 0;
			var nan = global.NaN, inf = global.Infinity;
			var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

			var tempRet0 = 0;
			var tempRet1 = 0;
			var tempRet2 = 0;
			var tempRet3 = 0;
			var tempRet4 = 0;
			var tempRet5 = 0;
			var tempRet6 = 0;
			var tempRet7 = 0;
			var tempRet8 = 0;
			var tempRet9 = 0;
			var Math_floor=global.Math.floor;
			var Math_abs=global.Math.abs;
			var Math_sqrt=global.Math.sqrt;
			var Math_pow=global.Math.pow;
			var Math_cos=global.Math.cos;
			var Math_sin=global.Math.sin;
			var Math_tan=global.Math.tan;
			var Math_acos=global.Math.acos;
			var Math_asin=global.Math.asin;
			var Math_atan=global.Math.atan;
			var Math_atan2=global.Math.atan2;
			var Math_exp=global.Math.exp;
			var Math_log=global.Math.log;
			var Math_ceil=global.Math.ceil;
			var Math_imul=global.Math.imul;
			var Math_min=global.Math.min;
			var Math_clz32=global.Math.clz32;
			var abort=env.abort;
			var assert=env.assert;
			var nullFunc_iiii=env.nullFunc_iiii;
			var nullFunc_viiiii=env.nullFunc_viiiii;
			var nullFunc_i=env.nullFunc_i;
			var nullFunc_vi=env.nullFunc_vi;
			var nullFunc_vii=env.nullFunc_vii;
			var nullFunc_ii=env.nullFunc_ii;
			var nullFunc_viii=env.nullFunc_viii;
			var nullFunc_v=env.nullFunc_v;
			var nullFunc_iiiii=env.nullFunc_iiiii;
			var nullFunc_viiiiii=env.nullFunc_viiiiii;
			var nullFunc_iii=env.nullFunc_iii;
			var nullFunc_iiiiii=env.nullFunc_iiiiii;
			var nullFunc_viiii=env.nullFunc_viiii;
			var invoke_iiii=env.invoke_iiii;
			var invoke_viiiii=env.invoke_viiiii;
			var invoke_i=env.invoke_i;
			var invoke_vi=env.invoke_vi;
			var invoke_vii=env.invoke_vii;
			var invoke_ii=env.invoke_ii;
			var invoke_viii=env.invoke_viii;
			var invoke_v=env.invoke_v;
			var invoke_iiiii=env.invoke_iiiii;
			var invoke_viiiiii=env.invoke_viiiiii;
			var invoke_iii=env.invoke_iii;
			var invoke_iiiiii=env.invoke_iiiiii;
			var invoke_viiii=env.invoke_viiii;
			var _pthread_cleanup_pop=env._pthread_cleanup_pop;
			var ___syscall221=env.___syscall221;
			var _pthread_key_create=env._pthread_key_create;
			var _abort=env._abort;
			var _pthread_cleanup_push=env._pthread_cleanup_push;
			var ___gxx_personality_v0=env.___gxx_personality_v0;
			var ___cxa_find_matching_catch_4=env.___cxa_find_matching_catch_4;
			var ___cxa_free_exception=env.___cxa_free_exception;
			var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
			var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
			var ___setErrNo=env.___setErrNo;
			var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
			var _sbrk=env._sbrk;
			var ___cxa_begin_catch=env.___cxa_begin_catch;
			var _emscripten_memcpy_big=env._emscripten_memcpy_big;
			var ___cxa_end_catch=env.___cxa_end_catch;
			var ___resumeException=env.___resumeException;
			var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
			var __exit=env.__exit;
			var _pthread_getspecific=env._pthread_getspecific;
			var _pthread_self=env._pthread_self;
			var ___cxa_get_exception_ptr=env.___cxa_get_exception_ptr;
			var _pthread_once=env._pthread_once;
			var ___syscall54=env.___syscall54;
			var ___unlock=env.___unlock;
			var _pthread_setspecific=env._pthread_setspecific;
			var ___cxa_throw=env.___cxa_throw;
			var _sysconf=env._sysconf;
			var ___lock=env.___lock;
			var ___syscall6=env.___syscall6;
			var ___syscall5=env.___syscall5;
			var _time=env._time;
			var ___cxa_allocate_exception=env.___cxa_allocate_exception;
			var ___syscall140=env.___syscall140;
			var _exit=env._exit;
			var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
			var ___syscall145=env.___syscall145;
			var ___syscall146=env.___syscall146;
			var tempFloat = 0.0;

			// EMSCRIPTEN_START_FUNCS

			function stackAlloc(size) {
				size = size|0;
				var ret = 0;
				ret = STACKTOP;
				STACKTOP = (STACKTOP + size)|0;
				STACKTOP = (STACKTOP + 15)&-16;
				if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

				return ret|0;
			}
			function stackSave() {
				return STACKTOP|0;
			}
			function stackRestore(top) {
				top = top|0;
				STACKTOP = top;
			}
			function establishStackSpace(stackBase, stackMax) {
				stackBase = stackBase|0;
				stackMax = stackMax|0;
				STACKTOP = stackBase;
				STACK_MAX = stackMax;
			}

			function setThrew(threw, value) {
				threw = threw|0;
				value = value|0;
				if ((__THREW__|0) == 0) {
					__THREW__ = threw;
					threwValue = value;
				}
			}
			function copyTempFloat(ptr) {
				ptr = ptr|0;
				HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
				HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
				HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
				HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
			}
			function copyTempDouble(ptr) {
				ptr = ptr|0;
				HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
				HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
				HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
				HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
				HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
				HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
				HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
				HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
			}

			function setTempRet0(value) {
				value = value|0;
				tempRet0 = value;
			}
			function getTempRet0() {
				return tempRet0|0;
			}

			function _OCRAD_version() {
				var label = 0, sp = 0;
				sp = STACKTOP;
				return (867|0);
			}
			function _OCRAD_open() {
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[1700] = -1;
				$0 = (__ZnwjRKSt9nothrow_t(56,9440)|0);
				$1 = ($0|0)==(0|0);
				if ($1) {
					$8 = 0;
					return ($8|0);
				}
				$2 = ((($0)) + 28|0);
				;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;HEAP32[$0+24>>2]=0|0;
				$3 = ((($0)) + 32|0);
				HEAP32[$3>>2] = 0;
				$4 = ((($0)) + 36|0);
				HEAP32[$4>>2] = 0;
				$5 = ((($0)) + 40|0);
				HEAP8[$5>>0] = 52;
				$6 = ((($0)) + 41|0);
				HEAP8[$6>>0] = 0;
				$7 = ((($0)) + 44|0);
				;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
				HEAP32[$2>>2] = 0;
				$8 = $0;
				return ($8|0);
			}
			function _OCRAD_close($ocrdes) {
				$ocrdes = $ocrdes|0;
				var $$0 = 0, $$01 = 0, $$02 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$02 = -1;
					return ($$02|0);
				}
				$1 = ((($ocrdes)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)==(0|0);
				do {
					if (!($3)) {
						__THREW__ = 0;
						invoke_vi(26,($2|0));
						$4 = __THREW__; __THREW__ = 0;
						$5 = $4&1;
						if (!($5)) {
							__ZdlPv($2);
							break;
						}
						$6 = ___cxa_find_matching_catch_2()|0;
						$7 = tempRet0;
						__ZdlPv($2);
						$$0 = $7;$$01 = $6;
						___resumeException($$01|0);
						// unreachable;
					}
				} while(0);
				$8 = HEAP32[$ocrdes>>2]|0;
				$9 = ($8|0)==(0|0);
				if (!($9)) {
					$10 = ((($8)) + 16|0);
					$11 = HEAP32[$10>>2]|0;
					$12 = ($11|0)==(0|0);
					if (!($12)) {
						$13 = ((($8)) + 20|0);
						$14 = HEAP32[$13>>2]|0;
						$15 = ($14|0)==($11|0);
						if ($15) {
							$25 = $11;
						} else {
							$17 = $14;
							while(1) {
								$16 = ((($17)) + -12|0);
								HEAP32[$13>>2] = $16;
								$18 = HEAP32[$16>>2]|0;
								$19 = ($18|0)==(0|0);
								if ($19) {
									$20 = $16;
								} else {
									$22 = ((($17)) + -8|0);
									$23 = HEAP32[$22>>2]|0;
									$24 = ($23|0)==($18|0);
									if (!($24)) {
										HEAP32[$22>>2] = $18;
									}
									__ZdlPv($18);
									$$pre$i$i$i$i = HEAP32[$13>>2]|0;
									$20 = $$pre$i$i$i$i;
								}
								$21 = ($20|0)==($11|0);
								if ($21) {
									break;
								} else {
									$17 = $20;
								}
							}
							$$pre$i$i = HEAP32[$10>>2]|0;
							$25 = $$pre$i$i;
						}
						__ZdlPv($25);
					}
					__ZdlPv($8);
				}
				$26 = ((($ocrdes)) + 44|0);
				__THREW__ = 0;
				invoke_vi(27,($26|0));
				$27 = __THREW__; __THREW__ = 0;
				$28 = $27&1;
				do {
					if ($28) {
						$32 = ___cxa_find_matching_catch_2()|0;
						$33 = tempRet0;
						$34 = ((($ocrdes)) + 12|0);
						__THREW__ = 0;
						invoke_vi(28,($34|0));
						$35 = __THREW__; __THREW__ = 0;
						$36 = $35&1;
						if ($36) {
							$37 = ___cxa_find_matching_catch_3(0|0)|0;
							$38 = tempRet0;
							___clang_call_terminate($37);
							// unreachable;
						} else {
							$eh$lpad$body$index2Z2D = $33;$eh$lpad$body$indexZ2D = $32;
						}
					} else {
						$29 = ((($ocrdes)) + 12|0);
						__THREW__ = 0;
						invoke_vi(28,($29|0));
						$30 = __THREW__; __THREW__ = 0;
						$31 = $30&1;
						if ($31) {
							$39 = ___cxa_find_matching_catch_2()|0;
							$40 = tempRet0;
							$eh$lpad$body$index2Z2D = $40;$eh$lpad$body$indexZ2D = $39;
							break;
						}
						__ZdlPv($ocrdes);
						$$02 = 0;
						return ($$02|0);
					}
				} while(0);
				__ZdlPv($ocrdes);
				$$0 = $eh$lpad$body$index2Z2D;$$01 = $eh$lpad$body$indexZ2D;
				___resumeException($$01|0);
				// unreachable;
				return (0)|0;
			}
			function _OCRAD_get_errno($ocrdes) {
				$ocrdes = $ocrdes|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = 1;
					return ($$0|0);
				}
				$1 = ((($ocrdes)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$$0 = $2;
				return ($$0|0);
			}
			function _OCRAD_set_image($ocrdes,$image,$invert) {
				$ocrdes = $ocrdes|0;
				$image = $image|0;
				$invert = $invert|0;
				var $$0 = 0, $$01 = 0, $$02 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ($ocrdes|0)==(0|0);
				if ($1) {
					$$02 = -1;
					STACKTOP = sp;return ($$02|0);
				}
				$2 = ($image|0)==(0|0);
				if (!($2)) {
					$3 = ((($image)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)<(3);
					if (!($5)) {
						$6 = ((($image)) + 8|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = ($7|0)<(3);
						if (!($8)) {
							$9 = (2147483647 / ($7|0))&-1;
							$10 = ($9|0)<($4|0);
							if (!($10)) {
								$11 = ((($image)) + 12|0);
								$12 = HEAP32[$11>>2]|0;
								$switch = ($12>>>0)<(3);
								if ($switch) {
									__THREW__ = 0;
									$14 = (invoke_ii(29,32)|0);
									$15 = __THREW__; __THREW__ = 0;
									$16 = $15&1;
									L10: do {
										if ($16) {
											$24 = ___cxa_find_matching_catch_3(80|0)|0;
											$25 = tempRet0;
											$$0 = $25;$$01 = $24;
										} else {
											__THREW__ = 0;
											invoke_viii(30,($14|0),($image|0),($invert|0));
											$17 = __THREW__; __THREW__ = 0;
											$18 = $17&1;
											if ($18) {
												$26 = ___cxa_find_matching_catch_3(80|0)|0;
												$27 = tempRet0;
												__ZdlPv($14);
												$$0 = $27;$$01 = $26;
												break;
											}
											$19 = ((($ocrdes)) + 4|0);
											$20 = HEAP32[$19>>2]|0;
											$21 = ($20|0)==(0|0);
											do {
												if (!($21)) {
													__THREW__ = 0;
													invoke_vi(26,($20|0));
													$22 = __THREW__; __THREW__ = 0;
													$23 = $22&1;
													if ($23) {
														$28 = ___cxa_find_matching_catch_3(80|0)|0;
														$29 = tempRet0;
														__ZdlPv($20);
														$$0 = $29;$$01 = $28;
														break L10;
													} else {
														__ZdlPv($20);
														HEAP32[$19>>2] = 0;
														break;
													}
												}
											} while(0);
											$30 = HEAP32[$ocrdes>>2]|0;
											$31 = ($30|0)==(0|0);
											if (!($31)) {
												$32 = ((($30)) + 16|0);
												$33 = HEAP32[$32>>2]|0;
												$34 = ($33|0)==(0|0);
												if (!($34)) {
													$35 = ((($30)) + 20|0);
													$36 = HEAP32[$35>>2]|0;
													$37 = ($36|0)==($33|0);
													if ($37) {
														$47 = $33;
													} else {
														$39 = $36;
														while(1) {
															$38 = ((($39)) + -12|0);
															HEAP32[$35>>2] = $38;
															$40 = HEAP32[$38>>2]|0;
															$41 = ($40|0)==(0|0);
															if ($41) {
																$42 = $38;
															} else {
																$44 = ((($39)) + -8|0);
																$45 = HEAP32[$44>>2]|0;
																$46 = ($45|0)==($40|0);
																if (!($46)) {
																	HEAP32[$44>>2] = $40;
																}
																__ZdlPv($40);
																$$pre$i$i$i$i = HEAP32[$35>>2]|0;
																$42 = $$pre$i$i$i$i;
															}
															$43 = ($42|0)==($33|0);
															if ($43) {
																break;
															} else {
																$39 = $42;
															}
														}
														$$pre$i$i = HEAP32[$32>>2]|0;
														$47 = $$pre$i$i;
													}
													__ZdlPv($47);
												}
												__ZdlPv($30);
											}
											HEAP32[$ocrdes>>2] = $14;
											$$02 = 0;
											STACKTOP = sp;return ($$02|0);
										}
									} while(0);
									$48 = (_llvm_eh_typeid_for((80|0))|0);
									$49 = ($$0|0)==($48|0);
									if (!($49)) {
										___resumeException($$01|0);
										// unreachable;
									}
									(___cxa_get_exception_ptr(($$01|0))|0);
									HEAP32[$0>>2] = (808);
									(___cxa_begin_catch(($$01|0))|0);
									$50 = ((($ocrdes)) + 8|0);
									HEAP32[$50>>2] = 2;
									__ZNSt9bad_allocD2Ev($0);
									___cxa_end_catch();
									$$02 = -1;
									STACKTOP = sp;return ($$02|0);
								}
							}
						}
					}
				}
				$13 = ((($ocrdes)) + 8|0);
				HEAP32[$13>>2] = 1;
				$$02 = -1;
				STACKTOP = sp;return ($$02|0);
			}
			function _OCRAD_set_image_from_file($ocrdes,$filename,$invert) {
				$ocrdes = $ocrdes|0;
				$filename = $filename|0;
				$invert = $invert|0;
				var $$0 = 0, $$01 = 0, $$1 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $infile$0 = 0, $retval$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ($ocrdes|0)==(0|0);
				if ($1) {
					$$1 = -1;
					STACKTOP = sp;return ($$1|0);
				}
				$2 = ($filename|0)==(0|0);
				if (!($2)) {
					$3 = HEAP8[$filename>>0]|0;
					$4 = ($3<<24>>24)==(0);
					if (!($4)) {
						$5 = (_strcmp($filename,860)|0);
						$6 = ($5|0)==(0);
						if ($6) {
							$7 = HEAP32[149]|0;
							$infile$0 = $7;
						} else {
							$8 = (_fopen($filename,862)|0);
							$infile$0 = $8;
						}
						$9 = ($infile$0|0)==(0|0);
						if (!($9)) {
							__THREW__ = 0;
							$11 = (invoke_ii(29,32)|0);
							$12 = __THREW__; __THREW__ = 0;
							$13 = $12&1;
							L12: do {
								if ($13) {
									$21 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
									$22 = tempRet0;
									$$0 = $22;$$01 = $21;
									label = 28;
								} else {
									__THREW__ = 0;
									invoke_viii(31,($11|0),($infile$0|0),($invert|0));
									$14 = __THREW__; __THREW__ = 0;
									$15 = $14&1;
									if ($15) {
										$23 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
										$24 = tempRet0;
										__ZdlPv($11);
										$$0 = $24;$$01 = $23;
										label = 28;
										break;
									}
									$16 = ((($ocrdes)) + 4|0);
									$17 = HEAP32[$16>>2]|0;
									$18 = ($17|0)==(0|0);
									do {
										if (!($18)) {
											__THREW__ = 0;
											invoke_vi(26,($17|0));
											$19 = __THREW__; __THREW__ = 0;
											$20 = $19&1;
											if ($20) {
												$25 = ___cxa_find_matching_catch_4(80|0,0|0)|0;
												$26 = tempRet0;
												__ZdlPv($17);
												$$0 = $26;$$01 = $25;
												label = 28;
												break L12;
											} else {
												__ZdlPv($17);
												HEAP32[$16>>2] = 0;
												break;
											}
										}
									} while(0);
									$27 = HEAP32[$ocrdes>>2]|0;
									$28 = ($27|0)==(0|0);
									if (!($28)) {
										$29 = ((($27)) + 16|0);
										$30 = HEAP32[$29>>2]|0;
										$31 = ($30|0)==(0|0);
										if (!($31)) {
											$32 = ((($27)) + 20|0);
											$33 = HEAP32[$32>>2]|0;
											$34 = ($33|0)==($30|0);
											if ($34) {
												$44 = $30;
											} else {
												$36 = $33;
												while(1) {
													$35 = ((($36)) + -12|0);
													HEAP32[$32>>2] = $35;
													$37 = HEAP32[$35>>2]|0;
													$38 = ($37|0)==(0|0);
													if ($38) {
														$39 = $35;
													} else {
														$41 = ((($36)) + -8|0);
														$42 = HEAP32[$41>>2]|0;
														$43 = ($42|0)==($37|0);
														if (!($43)) {
															HEAP32[$41>>2] = $37;
														}
														__ZdlPv($37);
														$$pre$i$i$i$i = HEAP32[$32>>2]|0;
														$39 = $$pre$i$i$i$i;
													}
													$40 = ($39|0)==($30|0);
													if ($40) {
														break;
													} else {
														$36 = $39;
													}
												}
												$$pre$i$i = HEAP32[$29>>2]|0;
												$44 = $$pre$i$i;
											}
											__ZdlPv($44);
										}
										__ZdlPv($27);
									}
									HEAP32[$ocrdes>>2] = $11;
									$retval$0 = 0;
								}
							} while(0);
							do {
								if ((label|0) == 28) {
									$45 = (_llvm_eh_typeid_for((80|0))|0);
									$46 = ($$0|0)==($45|0);
									if ($46) {
										(___cxa_get_exception_ptr(($$01|0))|0);
										HEAP32[$0>>2] = (808);
										(___cxa_begin_catch(($$01|0))|0);
										$47 = ((($ocrdes)) + 8|0);
										HEAP32[$47>>2] = 2;
										__ZNSt9bad_allocD2Ev($0);
										___cxa_end_catch();
										$retval$0 = -1;
										break;
									} else {
										(___cxa_begin_catch(($$01|0))|0);
										$48 = ((($ocrdes)) + 8|0);
										HEAP32[$48>>2] = 1;
										___cxa_end_catch();
										$retval$0 = -1;
										break;
									}
								}
							} while(0);
							(_fclose($infile$0)|0);
							$$1 = $retval$0;
							STACKTOP = sp;return ($$1|0);
						}
					}
				}
				$10 = ((($ocrdes)) + 8|0);
				HEAP32[$10>>2] = 1;
				$$1 = -1;
				STACKTOP = sp;return ($$1|0);
			}
			function _OCRAD_set_utf8_format($ocrdes,$utf8) {
				$ocrdes = $ocrdes|0;
				$utf8 = $utf8|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$0 = -1;
					return ($$0|0);
				} else {
					$4 = ((($ocrdes)) + 41|0);
					$5 = $utf8&1;
					HEAP8[$4>>0] = $5;
					$$0 = 0;
					return ($$0|0);
				}
				return (0)|0;
			}
			function _OCRAD_set_threshold($ocrdes,$threshold) {
				$ocrdes = $ocrdes|0;
				$threshold = $threshold|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $threshold$off = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$0 = -1;
					return ($$0|0);
				}
				$threshold$off = (($threshold) + 1)|0;
				$4 = ($threshold$off>>>0)>(256);
				if ($4) {
					$5 = ((($ocrdes)) + 8|0);
					HEAP32[$5>>2] = 1;
					$$0 = -1;
					return ($$0|0);
				} else {
					__ZN10Page_image9thresholdEi($1,$threshold);
					$$0 = 0;
					return ($$0|0);
				}
				return (0)|0;
			}
			function _OCRAD_scale($ocrdes,$value) {
				$ocrdes = $ocrdes|0;
				$value = $value|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$0 = -1;
					return ($$0|0);
				}
				__THREW__ = 0;
				$4 = (invoke_iii(32,($1|0),($value|0))|0);
				$5 = __THREW__; __THREW__ = 0;
				$6 = $5&1;
				if ($6) {
					$7 = ___cxa_find_matching_catch_3(0|0)|0;
					$8 = tempRet0;
					(___cxa_begin_catch(($7|0))|0);
					___cxa_end_catch();
				} else {
					if ($4) {
						$$0 = 0;
						return ($$0|0);
					}
				}
				$9 = ((($ocrdes)) + 8|0);
				HEAP32[$9>>2] = 1;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_transform($ocrdes,$transformation) {
				$ocrdes = $ocrdes|0;
				$transformation = $transformation|0;
				var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $trans = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$trans = sp;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$1 = -1;
					STACKTOP = sp;return ($$1|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$1 = -1;
					STACKTOP = sp;return ($$1|0);
				}
				HEAP32[$trans>>2] = 0;
				$4 = (__ZN14Transformation3setEPKc($trans,$transformation)|0);
				if ($4) {
					$5 = HEAP32[$ocrdes>>2]|0;
					__ZN10Page_image9transformERK14Transformation($5,$trans);
					$$0 = 0;
				} else {
					$$0 = -1;
				}
				$$1 = $$0;
				STACKTOP = sp;return ($$1|0);
			}
			function _OCRAD_set_exportfile($ocrdes,$filename) {
				$ocrdes = $ocrdes|0;
				$filename = $filename|0;
				var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exportfile$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$1 = -1;
					return ($$1|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$1 = -1;
					return ($$1|0);
				}
				$4 = ($filename|0)==(0|0);
				if (!($4)) {
					$5 = HEAP8[$filename>>0]|0;
					$6 = ($5<<24>>24)==(0);
					if (!($6)) {
						$7 = (_strcmp($filename,860)|0);
						$8 = ($7|0)==(0);
						if ($8) {
							$9 = HEAP32[119]|0;
							$exportfile$0 = $9;
						} else {
							$10 = (_fopen($filename,865)|0);
							$exportfile$0 = $10;
						}
						$11 = ($exportfile$0|0)==(0|0);
						if (!($11)) {
							$13 = ((($ocrdes)) + 32|0);
							HEAP32[$13>>2] = $exportfile$0;
							$$1 = 0;
							return ($$1|0);
						}
					}
				}
				$12 = ((($ocrdes)) + 8|0);
				HEAP32[$12>>2] = 1;
				$$1 = -1;
				return ($$1|0);
			}
			function _OCRAD_add_filter($ocrdes,$name) {
				$ocrdes = $ocrdes|0;
				$name = $name|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$0 = -1;
					return ($$0|0);
				} else {
					$4 = ((($ocrdes)) + 12|0);
					(__ZN7Control10add_filterEPKcS1_($4,7360,$name)|0);
					$$0 = 0;
					return ($$0|0);
				}
				return (0)|0;
			}
			function _OCRAD_recognize($ocrdes,$layout) {
				$ocrdes = $ocrdes|0;
				$layout = $layout|0;
				var $$0 = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$1 = -1;
					return ($$1|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = ((($ocrdes)) + 8|0);
					HEAP32[$3>>2] = 3;
					$$1 = -1;
					return ($$1|0);
				}
				$4 = (__ZnwjRKSt9nothrow_t(40,9440)|0);
				$5 = ($4|0)==(0|0);
				if ($5) {
					$9 = ((($ocrdes)) + 8|0);
					HEAP32[$9>>2] = 2;
					$$1 = -1;
					return ($$1|0);
				}
				$6 = ((($ocrdes)) + 12|0);
				__THREW__ = 0;
				invoke_viiiii(33,($4|0),($1|0),(7360|0),($6|0),($layout|0));
				$7 = __THREW__; __THREW__ = 0;
				$8 = $7&1;
				if ($8) {
					$10 = ___cxa_find_matching_catch_2()|0;
					$11 = tempRet0;
					__ZdlPvRKSt9nothrow_t($4,9440);
					$$0 = $11;$$01 = $10;
					___resumeException($$01|0);
					// unreachable;
				}
				$12 = ((($ocrdes)) + 4|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = ($13|0)==(0|0);
				do {
					if (!($14)) {
						__THREW__ = 0;
						invoke_vi(26,($13|0));
						$15 = __THREW__; __THREW__ = 0;
						$16 = $15&1;
						if (!($16)) {
							__ZdlPv($13);
							break;
						}
						$17 = ___cxa_find_matching_catch_2()|0;
						$18 = tempRet0;
						__ZdlPv($13);
						$$0 = $18;$$01 = $17;
						___resumeException($$01|0);
						// unreachable;
					}
				} while(0);
				HEAP32[$12>>2] = $4;
				$19 = ((($ocrdes)) + 32|0);
				$20 = HEAP32[$19>>2]|0;
				$21 = ($20|0)==(0|0);
				if ($21) {
					$$1 = 0;
					return ($$1|0);
				}
				__ZNK8Textpage6xprintERK7Control($4,$6);
				$$1 = 0;
				return ($$1|0);
			}
			function _OCRAD_result_blocks($ocrdes) {
				$ocrdes = $ocrdes|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ((($4)) + 28|0);
						$8 = ((($4)) + 32|0);
						$9 = HEAP32[$8>>2]|0;
						$10 = HEAP32[$7>>2]|0;
						$11 = (($9) - ($10))|0;
						$12 = $11 >> 2;
						$$0 = $12;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_result_lines($ocrdes,$blocknum) {
				$ocrdes = $ocrdes|0;
				$blocknum = $blocknum|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ($blocknum|0)<(0);
						if (!($7)) {
							$8 = ((($4)) + 28|0);
							$9 = ((($4)) + 32|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = $12 >> 2;
							$14 = ($13|0)>($blocknum|0);
							if ($14) {
								$16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
								$17 = ((($16)) + 16|0);
								$18 = ((($16)) + 20|0);
								$19 = HEAP32[$18>>2]|0;
								$20 = HEAP32[$17>>2]|0;
								$21 = (($19) - ($20))|0;
								$22 = $21 >> 2;
								$$0 = $22;
								return ($$0|0);
							}
						}
						$15 = ((($ocrdes)) + 8|0);
						HEAP32[$15>>2] = 1;
						$$0 = -1;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_result_chars_total($ocrdes) {
				$ocrdes = $ocrdes|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$04 = 0, $c$03 = 0, $c$1$lcssa = 0, $c$11 = 0, $i$02 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$6 = ((($4)) + 28|0);
						$7 = ((($4)) + 32|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = HEAP32[$6>>2]|0;
						$10 = (($8) - ($9))|0;
						$11 = ($10|0)>(0);
						if ($11) {
							$13 = $4;$b$04 = 0;$c$03 = 0;
						} else {
							$$0 = 0;
							return ($$0|0);
						}
						while(1) {
							$14 = (__ZNK8Textpage9textblockEi($13,$b$04)|0);
							$15 = ((($14)) + 16|0);
							$16 = ((($14)) + 20|0);
							$17 = HEAP32[$16>>2]|0;
							$18 = HEAP32[$15>>2]|0;
							$19 = (($17) - ($18))|0;
							$20 = ($19|0)>(0);
							if ($20) {
								$c$11 = $c$03;$i$02 = 0;
								while(1) {
									$30 = HEAP32[$3>>2]|0;
									$31 = (__ZNK8Textpage9textblockEi($30,$b$04)|0);
									$32 = (__ZNK9Textblock8textlineEi($31,$i$02)|0);
									$33 = ((($32)) + 16|0);
									$34 = ((($32)) + 20|0);
									$35 = HEAP32[$34>>2]|0;
									$36 = HEAP32[$33>>2]|0;
									$37 = (($35) - ($36))|0;
									$38 = $37 >> 2;
									$39 = (($38) + ($c$11))|0;
									$40 = (($i$02) + 1)|0;
									$41 = HEAP32[$3>>2]|0;
									$42 = (__ZNK8Textpage9textblockEi($41,$b$04)|0);
									$43 = ((($42)) + 16|0);
									$44 = ((($42)) + 20|0);
									$45 = HEAP32[$44>>2]|0;
									$46 = HEAP32[$43>>2]|0;
									$47 = (($45) - ($46))|0;
									$48 = $47 >> 2;
									$49 = ($40|0)<($48|0);
									if ($49) {
										$c$11 = $39;$i$02 = $40;
									} else {
										$c$1$lcssa = $39;
										break;
									}
								}
							} else {
								$c$1$lcssa = $c$03;
							}
							$21 = (($b$04) + 1)|0;
							$22 = HEAP32[$3>>2]|0;
							$23 = ((($22)) + 28|0);
							$24 = ((($22)) + 32|0);
							$25 = HEAP32[$24>>2]|0;
							$26 = HEAP32[$23>>2]|0;
							$27 = (($25) - ($26))|0;
							$28 = $27 >> 2;
							$29 = ($21|0)<($28|0);
							if ($29) {
								$13 = $22;$b$04 = $21;$c$03 = $c$1$lcssa;
							} else {
								$$0 = $c$1$lcssa;
								break;
							}
						}
						return ($$0|0);
					}
				}
				$12 = ((($ocrdes)) + 8|0);
				HEAP32[$12>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_result_chars_block($ocrdes,$blocknum) {
				$ocrdes = $ocrdes|0;
				$blocknum = $blocknum|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $i$02 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ($blocknum|0)<(0);
						if (!($7)) {
							$8 = ((($4)) + 28|0);
							$9 = ((($4)) + 32|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = $12 >> 2;
							$14 = ($13|0)>($blocknum|0);
							if ($14) {
								$15 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
								$16 = ((($15)) + 16|0);
								$17 = ((($15)) + 20|0);
								$18 = HEAP32[$17>>2]|0;
								$19 = HEAP32[$16>>2]|0;
								$20 = (($18) - ($19))|0;
								$21 = ($20|0)>(0);
								if ($21) {
									$c$01 = 0;$i$02 = 0;
								} else {
									$$0 = 0;
									return ($$0|0);
								}
								while(1) {
									$23 = HEAP32[$3>>2]|0;
									$24 = (__ZNK8Textpage9textblockEi($23,$blocknum)|0);
									$25 = (__ZNK9Textblock8textlineEi($24,$i$02)|0);
									$26 = ((($25)) + 16|0);
									$27 = ((($25)) + 20|0);
									$28 = HEAP32[$27>>2]|0;
									$29 = HEAP32[$26>>2]|0;
									$30 = (($28) - ($29))|0;
									$31 = $30 >> 2;
									$32 = (($31) + ($c$01))|0;
									$33 = (($i$02) + 1)|0;
									$34 = HEAP32[$3>>2]|0;
									$35 = (__ZNK8Textpage9textblockEi($34,$blocknum)|0);
									$36 = ((($35)) + 16|0);
									$37 = ((($35)) + 20|0);
									$38 = HEAP32[$37>>2]|0;
									$39 = HEAP32[$36>>2]|0;
									$40 = (($38) - ($39))|0;
									$41 = $40 >> 2;
									$42 = ($33|0)<($41|0);
									if ($42) {
										$c$01 = $32;$i$02 = $33;
									} else {
										$$0 = $32;
										break;
									}
								}
								return ($$0|0);
							}
						}
						$22 = ((($ocrdes)) + 8|0);
						HEAP32[$22>>2] = 1;
						$$0 = -1;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_result_chars_line($ocrdes,$blocknum,$linenum) {
				$ocrdes = $ocrdes|0;
				$blocknum = $blocknum|0;
				$linenum = $linenum|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ($blocknum|0)<(0);
						if (!($7)) {
							$8 = ((($4)) + 28|0);
							$9 = ((($4)) + 32|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = $12 >> 2;
							$14 = ($13|0)<=($blocknum|0);
							$15 = ($linenum|0)<(0);
							$or$cond = $15 | $14;
							if (!($or$cond)) {
								$16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
								$17 = ((($16)) + 16|0);
								$18 = ((($16)) + 20|0);
								$19 = HEAP32[$18>>2]|0;
								$20 = HEAP32[$17>>2]|0;
								$21 = (($19) - ($20))|0;
								$22 = $21 >> 2;
								$23 = ($22|0)>($linenum|0);
								if ($23) {
									$25 = HEAP32[$3>>2]|0;
									$26 = (__ZNK8Textpage9textblockEi($25,$blocknum)|0);
									$27 = (__ZNK9Textblock8textlineEi($26,$linenum)|0);
									$28 = ((($27)) + 16|0);
									$29 = ((($27)) + 20|0);
									$30 = HEAP32[$29>>2]|0;
									$31 = HEAP32[$28>>2]|0;
									$32 = (($30) - ($31))|0;
									$33 = $32 >> 2;
									$$0 = $33;
									return ($$0|0);
								}
							}
						}
						$24 = ((($ocrdes)) + 8|0);
						HEAP32[$24>>2] = 1;
						$$0 = -1;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function _OCRAD_result_line($ocrdes,$blocknum,$linenum) {
				$ocrdes = $ocrdes|0;
				$blocknum = $blocknum|0;
				$linenum = $linenum|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
				var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $i1$05 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = 0;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ($blocknum|0)<(0);
						if (!($7)) {
							$8 = ((($4)) + 28|0);
							$9 = ((($4)) + 32|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = $12 >> 2;
							$14 = ($13|0)<=($blocknum|0);
							$15 = ($linenum|0)<(0);
							$or$cond = $15 | $14;
							if (!($or$cond)) {
								$16 = (__ZNK8Textpage9textblockEi($4,$blocknum)|0);
								$17 = ((($16)) + 16|0);
								$18 = ((($16)) + 20|0);
								$19 = HEAP32[$18>>2]|0;
								$20 = HEAP32[$17>>2]|0;
								$21 = (($19) - ($20))|0;
								$22 = $21 >> 2;
								$23 = ($22|0)>($linenum|0);
								if ($23) {
									$25 = HEAP32[$3>>2]|0;
									$26 = (__ZNK8Textpage9textblockEi($25,$blocknum)|0);
									$27 = (__ZNK9Textblock8textlineEi($26,$linenum)|0);
									$28 = ((($ocrdes)) + 44|0);
									$29 = HEAP8[$28>>0]|0;
									$30 = $29 & 1;
									$31 = ($30<<24>>24)==(0);
									if ($31) {
										$35 = ((($28)) + 1|0);
										HEAP8[$35>>0] = 0;
										HEAP8[$28>>0] = 0;
									} else {
										$32 = ((($ocrdes)) + 52|0);
										$33 = HEAP32[$32>>2]|0;
										HEAP8[$33>>0] = 0;
										$34 = ((($ocrdes)) + 48|0);
										HEAP32[$34>>2] = 0;
									}
									$36 = ((($ocrdes)) + 41|0);
									$37 = HEAP8[$36>>0]|0;
									$38 = ($37<<24>>24)==(0);
									$39 = ((($27)) + 16|0);
									$40 = ((($27)) + 20|0);
									$41 = HEAP32[$40>>2]|0;
									$42 = HEAP32[$39>>2]|0;
									$43 = (($41) - ($42))|0;
									$44 = ($43|0)>(0);
									if ($38) {
										if ($44) {
											$i$04 = 0;
											while(1) {
												$45 = (__ZNK8Textline9characterEi($27,$i$04)|0);
												$46 = (__ZNK9Character11byte_resultEv($45)|0);
												__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($28,$46);
												$47 = (($i$04) + 1)|0;
												$48 = HEAP32[$40>>2]|0;
												$49 = HEAP32[$39>>2]|0;
												$50 = (($48) - ($49))|0;
												$51 = $50 >> 2;
												$52 = ($47|0)<($51|0);
												if ($52) {
													$i$04 = $47;
												} else {
													break;
												}
											}
										}
									} else {
										if ($44) {
											$i1$05 = 0;
											while(1) {
												$53 = (__ZNK8Textline9characterEi($27,$i1$05)|0);
												$54 = (__ZNK9Character11utf8_resultEv($53)|0);
												(__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($28,$54)|0);
												$55 = (($i1$05) + 1)|0;
												$56 = HEAP32[$40>>2]|0;
												$57 = HEAP32[$39>>2]|0;
												$58 = (($56) - ($57))|0;
												$59 = $58 >> 2;
												$60 = ($55|0)<($59|0);
												if ($60) {
													$i1$05 = $55;
												} else {
													break;
												}
											}
										}
									}
									__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($28,10);
									$61 = HEAP8[$28>>0]|0;
									$62 = $61 & 1;
									$63 = ($62<<24>>24)==(0);
									if ($63) {
										$66 = ((($28)) + 1|0);
										$$0 = $66;
										return ($$0|0);
									} else {
										$64 = ((($ocrdes)) + 52|0);
										$65 = HEAP32[$64>>2]|0;
										$$0 = $65;
										return ($$0|0);
									}
								}
							}
						}
						$24 = ((($ocrdes)) + 8|0);
						HEAP32[$24>>2] = 1;
						$$0 = 0;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = 0;
				return ($$0|0);
			}
			function _OCRAD_result_first_character($ocrdes) {
				$ocrdes = $ocrdes|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($ocrdes|0)==(0|0);
				if ($0) {
					$$0 = -1;
					return ($$0|0);
				}
				$1 = HEAP32[$ocrdes>>2]|0;
				$2 = ($1|0)==(0|0);
				if (!($2)) {
					$3 = ((($ocrdes)) + 4|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$7 = ((($4)) + 28|0);
						$8 = ((($4)) + 32|0);
						$9 = HEAP32[$8>>2]|0;
						$10 = HEAP32[$7>>2]|0;
						$11 = (($9) - ($10))|0;
						$12 = ($11|0)>(0);
						if (!($12)) {
							$$0 = 0;
							return ($$0|0);
						}
						$13 = (__ZNK8Textpage9textblockEi($4,0)|0);
						$14 = ((($13)) + 16|0);
						$15 = ((($13)) + 20|0);
						$16 = HEAP32[$15>>2]|0;
						$17 = HEAP32[$14>>2]|0;
						$18 = (($16) - ($17))|0;
						$19 = ($18|0)>(0);
						if (!($19)) {
							$$0 = 0;
							return ($$0|0);
						}
						$20 = HEAP32[$3>>2]|0;
						$21 = (__ZNK8Textpage9textblockEi($20,0)|0);
						$22 = (__ZNK9Textblock8textlineEi($21,0)|0);
						$23 = (__ZNK8Textline9characterEi($22,0)|0);
						$24 = ((($23)) + 28|0);
						$25 = ((($23)) + 32|0);
						$26 = HEAP32[$25>>2]|0;
						$27 = HEAP32[$24>>2]|0;
						$28 = ($26|0)==($27|0);
						if ($28) {
							$$0 = 0;
							return ($$0|0);
						}
						$29 = ((($ocrdes)) + 41|0);
						$30 = HEAP8[$29>>0]|0;
						$31 = ($30<<24>>24)==(0);
						$32 = (__ZNK9Character5guessEi($23,0)|0);
						$33 = HEAP32[$32>>2]|0;
						if (!($31)) {
							$$0 = $33;
							return ($$0|0);
						}
						$34 = (__ZN3UCS11map_to_byteEi($33)|0);
						$35 = $34&255;
						$$0 = $35;
						return ($$0|0);
					}
				}
				$6 = ((($ocrdes)) + 8|0);
				HEAP32[$6>>2] = 3;
				$$0 = -1;
				return ($$0|0);
			}
			function ___clang_call_terminate($0) {
				$0 = $0|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				(___cxa_begin_catch(($0|0))|0);
				__ZSt9terminatev();
				// unreachable;
			}
			function __ZN10Page_image7read_p1EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$0$i$us = 0, $$0$i1$i$i$us = 0, $$0$i1$i$i10$us = 0, $$0$i14$us = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i11$us = 0, $$in$i$i$us = 0, $$in$i$i7$us = 0, $$pre$i$i$us = 0, $$pre$i$i3$us = 0, $$pre$i$us = 0, $$pre$i5$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i6$usZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
				var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
				var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
				var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
				var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
				var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
				var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
				var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch$0$i$us = 0, $ch$0$i$us$lcssa = 0, $ch$0$i18$us = 0, $ch$0$i18$us$lcssa = 0, $col$029$us = 0, $col2$026$us = 0;
				var $row$032$us = 0, $row1$027$us = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				HEAP8[$0>>0] = 1;
				$1 = ((($this)) + 29|0);
				HEAP8[$1>>0] = 0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$this>>2]|0;
				$11 = (($9) + 1)|0;
				$12 = (($11) - ($10))|0;
				$13 = ($7|0)>(0);
				if ($invert) {
					if (!($13)) {
						return;
					}
					$72 = ($12|0)>(0);
					$73 = ((($this)) + 16|0);
					if ($72) {
						$row1$027$us = 0;
					} else {
						return;
					}
					L8: while(1) {
						$col2$026$us = 0;
						while(1) {
							$74 = HEAP32[$73>>2]|0;
							$75 = (($74) + (($row1$027$us*12)|0)|0);
							while(1) {
								$76 = (_fgetc($f)|0);
								$77 = ($76|0)==(-1);
								if ($77) {
									label = 53;
									break L8;
								}
								$78 = $76&255;
								$79 = ($78<<24>>24)==(35);
								if ($79) {
									while(1) {
										$80 = (_fgetc($f)|0);
										$81 = ($80|0)==(-1);
										if ($81) {
											label = 54;
											break L8;
										}
										$82 = $80&255;
										$83 = ($82<<24>>24)==(10);
										if ($83) {
											$ch$0$i18$us = 10;
											break;
										}
									}
								} else {
									$ch$0$i18$us = $78;
								}
								$84 = $ch$0$i18$us&255;
								$85 = (_isspace($84)|0);
								$86 = ($85|0)==(0);
								if ($86) {
									$ch$0$i18$us$lcssa = $ch$0$i18$us;
									break;
								}
							}
							switch ($ch$0$i18$us$lcssa<<24>>24) {
								case 48:  {
									$$0$i14$us = 0;
									break;
								}
								case 49:  {
									$$0$i14$us = 1;
									break;
								}
								default: {
									label = 55;
									break L8;
								}
							}
							$87 = (((($74) + (($row1$027$us*12)|0)|0)) + 4|0);
							$88 = HEAP32[$87>>2]|0;
							$89 = (((($74) + (($row1$027$us*12)|0)|0)) + 8|0);
							$90 = HEAP32[$89>>2]|0;
							$91 = ($88|0)==($90|0);
							$92 = $90;
							if ($91) {
								$95 = $88;
								$96 = HEAP32[$75>>2]|0;
								$97 = (($95) - ($96))|0;
								$98 = (($97) + 1)|0;
								$99 = ($98|0)<(0);
								if ($99) {
									__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($75);
									$$pre$i$i$us = HEAP32[$75>>2]|0;
									$$pre$i$us = HEAP32[$89>>2]|0;
									$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $89;$102 = $$pre$i$us;
								} else {
									$$in$i$i$us = $96;$$pre$phi$i$usZ2D = $89;$102 = $92;
								}
								$100 = $$in$i$i$us;
								$101 = (($102) - ($$in$i$i$us))|0;
								$103 = ($101>>>0)<(1073741823);
								if ($103) {
									$106 = $101 << 1;
									$107 = ($106>>>0)<($98>>>0);
									$108 = $107 ? $98 : $106;
									$109 = HEAP32[$87>>2]|0;
									$110 = (($109) - ($$in$i$i$us))|0;
									$111 = ($108|0)==(0);
									if ($111) {
										$$0$i2$i$i$us = 0;$114 = 0;$115 = $110;$121 = $109;
									} else {
										$$0$i1$i$i$us = $108;$138 = $109;$139 = $110;
										label = 44;
									}
								} else {
									$104 = HEAP32[$87>>2]|0;
									$105 = (($104) - ($$in$i$i$us))|0;
									$$0$i1$i$i$us = 2147483647;$138 = $104;$139 = $105;
									label = 44;
								}
								if ((label|0) == 44) {
									label = 0;
									$112 = (__Znwj($$0$i1$i$i$us)|0);
									$$0$i2$i$i$us = $$0$i1$i$i$us;$114 = $112;$115 = $139;$121 = $138;
								}
								$113 = (($114) + ($115)|0);
								$116 = (($114) + ($$0$i2$i$i$us)|0);
								$117 = $116;
								HEAP8[$113>>0] = $$0$i14$us;
								$118 = ((($113)) + 1|0);
								$119 = $118;
								$120 = (($121) - ($$in$i$i$us))|0;
								$122 = (0 - ($120))|0;
								$123 = (($113) + ($122)|0);
								$124 = $123;
								_memcpy(($123|0),($100|0),($120|0))|0;
								HEAP32[$75>>2] = $124;
								HEAP32[$87>>2] = $119;
								HEAP32[$$pre$phi$i$usZ2D>>2] = $117;
								$125 = ($$in$i$i$us|0)==(0);
								if (!($125)) {
									__ZdlPv($100);
								}
							} else {
								HEAP8[$88>>0] = $$0$i14$us;
								$93 = HEAP32[$87>>2]|0;
								$94 = ((($93)) + 1|0);
								HEAP32[$87>>2] = $94;
							}
							$126 = (($col2$026$us) + 1)|0;
							$127 = ($126|0)<($12|0);
							if ($127) {
								$col2$026$us = $126;
							} else {
								break;
							}
						}
						$128 = (($row1$027$us) + 1)|0;
						$129 = ($128|0)<($7|0);
						if ($129) {
							$row1$027$us = $128;
						} else {
							label = 56;
							break;
						}
					}
					if ((label|0) == 53) {
						$133 = (___cxa_allocate_exception(4)|0);
						HEAP32[$133>>2] = 872;
						___cxa_throw(($133|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 54) {
						$134 = (___cxa_allocate_exception(4)|0);
						HEAP32[$134>>2] = 872;
						___cxa_throw(($134|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 55) {
						$135 = (___cxa_allocate_exception(4)|0);
						HEAP32[$135>>2] = 923;
						___cxa_throw(($135|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 56) {
						return;
					}
				} else {
					if (!($13)) {
						return;
					}
					$14 = ($12|0)>(0);
					$15 = ((($this)) + 16|0);
					if ($14) {
						$row$032$us = 0;
					} else {
						return;
					}
					L51: while(1) {
						$col$029$us = 0;
						while(1) {
							$16 = HEAP32[$15>>2]|0;
							$17 = (($16) + (($row$032$us*12)|0)|0);
							while(1) {
								$18 = (_fgetc($f)|0);
								$19 = ($18|0)==(-1);
								if ($19) {
									label = 50;
									break L51;
								}
								$20 = $18&255;
								$21 = ($20<<24>>24)==(35);
								if ($21) {
									while(1) {
										$22 = (_fgetc($f)|0);
										$23 = ($22|0)==(-1);
										if ($23) {
											label = 51;
											break L51;
										}
										$24 = $22&255;
										$25 = ($24<<24>>24)==(10);
										if ($25) {
											$ch$0$i$us = 10;
											break;
										}
									}
								} else {
									$ch$0$i$us = $20;
								}
								$26 = $ch$0$i$us&255;
								$27 = (_isspace($26)|0);
								$28 = ($27|0)==(0);
								if ($28) {
									$ch$0$i$us$lcssa = $ch$0$i$us;
									break;
								}
							}
							switch ($ch$0$i$us$lcssa<<24>>24) {
								case 48:  {
									$$0$i$us = 1;
									break;
								}
								case 49:  {
									$$0$i$us = 0;
									break;
								}
								default: {
									label = 52;
									break L51;
								}
							}
							$29 = (((($16) + (($row$032$us*12)|0)|0)) + 4|0);
							$30 = HEAP32[$29>>2]|0;
							$31 = (((($16) + (($row$032$us*12)|0)|0)) + 8|0);
							$32 = HEAP32[$31>>2]|0;
							$33 = ($30|0)==($32|0);
							$34 = $32;
							if ($33) {
								$37 = $30;
								$38 = HEAP32[$17>>2]|0;
								$39 = (($37) - ($38))|0;
								$40 = (($39) + 1)|0;
								$41 = ($40|0)<(0);
								if ($41) {
									__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($17);
									$$pre$i$i3$us = HEAP32[$17>>2]|0;
									$$pre$i5$us = HEAP32[$31>>2]|0;
									$$in$i$i7$us = $$pre$i$i3$us;$$pre$phi$i6$usZ2D = $31;$44 = $$pre$i5$us;
								} else {
									$$in$i$i7$us = $38;$$pre$phi$i6$usZ2D = $31;$44 = $34;
								}
								$42 = $$in$i$i7$us;
								$43 = (($44) - ($$in$i$i7$us))|0;
								$45 = ($43>>>0)<(1073741823);
								if ($45) {
									$48 = $43 << 1;
									$49 = ($48>>>0)<($40>>>0);
									$50 = $49 ? $40 : $48;
									$51 = HEAP32[$29>>2]|0;
									$52 = (($51) - ($$in$i$i7$us))|0;
									$53 = ($50|0)==(0);
									if ($53) {
										$$0$i2$i$i11$us = 0;$56 = 0;$57 = $52;$63 = $51;
									} else {
										$$0$i1$i$i10$us = $50;$136 = $51;$137 = $52;
										label = 20;
									}
								} else {
									$46 = HEAP32[$29>>2]|0;
									$47 = (($46) - ($$in$i$i7$us))|0;
									$$0$i1$i$i10$us = 2147483647;$136 = $46;$137 = $47;
									label = 20;
								}
								if ((label|0) == 20) {
									label = 0;
									$54 = (__Znwj($$0$i1$i$i10$us)|0);
									$$0$i2$i$i11$us = $$0$i1$i$i10$us;$56 = $54;$57 = $137;$63 = $136;
								}
								$55 = (($56) + ($57)|0);
								$58 = (($56) + ($$0$i2$i$i11$us)|0);
								$59 = $58;
								HEAP8[$55>>0] = $$0$i$us;
								$60 = ((($55)) + 1|0);
								$61 = $60;
								$62 = (($63) - ($$in$i$i7$us))|0;
								$64 = (0 - ($62))|0;
								$65 = (($55) + ($64)|0);
								$66 = $65;
								_memcpy(($65|0),($42|0),($62|0))|0;
								HEAP32[$17>>2] = $66;
								HEAP32[$29>>2] = $61;
								HEAP32[$$pre$phi$i6$usZ2D>>2] = $59;
								$67 = ($$in$i$i7$us|0)==(0);
								if (!($67)) {
									__ZdlPv($42);
								}
							} else {
								HEAP8[$30>>0] = $$0$i$us;
								$35 = HEAP32[$29>>2]|0;
								$36 = ((($35)) + 1|0);
								HEAP32[$29>>2] = $36;
							}
							$68 = (($col$029$us) + 1)|0;
							$69 = ($68|0)<($12|0);
							if ($69) {
								$col$029$us = $68;
							} else {
								break;
							}
						}
						$70 = (($row$032$us) + 1)|0;
						$71 = ($70|0)<($7|0);
						if ($71) {
							$row$032$us = $70;
						} else {
							label = 56;
							break;
						}
					}
					if ((label|0) == 50) {
						$130 = (___cxa_allocate_exception(4)|0);
						HEAP32[$130>>2] = 872;
						___cxa_throw(($130|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 51) {
						$131 = (___cxa_allocate_exception(4)|0);
						HEAP32[$131>>2] = 872;
						___cxa_throw(($131|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 52) {
						$132 = (___cxa_allocate_exception(4)|0);
						HEAP32[$132>>2] = 923;
						___cxa_throw(($132|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 56) {
						return;
					}
				}
			}
			function __ZN10Page_image7read_p4EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$0$i1$i$i$us = 0, $$0$i1$i$i12$us = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i13$us = 0, $$in$i$i$us = 0, $$in$i$i9$us = 0, $$pre$i$i$us = 0, $$pre$i$i5$us = 0, $$pre$i$us = 0, $$pre$i7$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i8$usZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$030$us = 0, $col$1$lcssa$us = 0, $col$127$us = 0, $col2$022$us = 0, $col2$1$lcssa$us = 0, $col2$121$us = 0, $not$$us = 0, $or$cond$us = 0, $or$cond2$us = 0, $row$032$us = 0, $row1$024$us = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				HEAP8[$0>>0] = 1;
				$1 = ((($this)) + 29|0);
				HEAP8[$1>>0] = 0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$this>>2]|0;
				$11 = (($9) + 1)|0;
				$12 = (($11) - ($10))|0;
				$13 = ($7|0)>(0);
				if ($invert) {
					if (!($13)) {
						return;
					}
					$70 = ($12|0)>(0);
					$71 = ((($this)) + 16|0);
					if ($70) {
						$row1$024$us = 0;
					} else {
						return;
					}
					L8: while(1) {
						$col2$022$us = 0;
						while(1) {
							$72 = (_fgetc($f)|0);
							$73 = ($72|0)==(-1);
							if ($73) {
								label = 41;
								break L8;
							}
							$123 = ($col2$022$us|0)<($12|0);
							if ($123) {
								$77 = 128;$col2$121$us = $col2$022$us;
								while(1) {
									$74 = HEAP32[$71>>2]|0;
									$75 = (($74) + (($row1$024$us*12)|0)|0);
									$76 = $77 & $72;
									$78 = ($76|0)!=(0);
									$79 = $78&1;
									$80 = (((($74) + (($row1$024$us*12)|0)|0)) + 4|0);
									$81 = HEAP32[$80>>2]|0;
									$82 = (((($74) + (($row1$024$us*12)|0)|0)) + 8|0);
									$83 = HEAP32[$82>>2]|0;
									$84 = ($81|0)==($83|0);
									$85 = $83;
									if ($84) {
										$88 = $81;
										$89 = HEAP32[$75>>2]|0;
										$90 = (($88) - ($89))|0;
										$91 = (($90) + 1)|0;
										$92 = ($91|0)<(0);
										if ($92) {
											__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($75);
											$$pre$i$i$us = HEAP32[$75>>2]|0;
											$$pre$i$us = HEAP32[$82>>2]|0;
											$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $82;$95 = $$pre$i$us;
										} else {
											$$in$i$i$us = $89;$$pre$phi$i$usZ2D = $82;$95 = $85;
										}
										$93 = $$in$i$i$us;
										$94 = (($95) - ($$in$i$i$us))|0;
										$96 = ($94>>>0)<(1073741823);
										if ($96) {
											$99 = $94 << 1;
											$100 = ($99>>>0)<($91>>>0);
											$101 = $100 ? $91 : $99;
											$102 = HEAP32[$80>>2]|0;
											$103 = (($102) - ($$in$i$i$us))|0;
											$104 = ($101|0)==(0);
											if ($104) {
												$$0$i2$i$i$us = 0;$107 = 0;$108 = $103;$114 = $102;
											} else {
												$$0$i1$i$i$us = $101;$131 = $102;$132 = $103;
												label = 32;
											}
										} else {
											$97 = HEAP32[$80>>2]|0;
											$98 = (($97) - ($$in$i$i$us))|0;
											$$0$i1$i$i$us = 2147483647;$131 = $97;$132 = $98;
											label = 32;
										}
										if ((label|0) == 32) {
											label = 0;
											$105 = (__Znwj($$0$i1$i$i$us)|0);
											$$0$i2$i$i$us = $$0$i1$i$i$us;$107 = $105;$108 = $132;$114 = $131;
										}
										$106 = (($107) + ($108)|0);
										$109 = (($107) + ($$0$i2$i$i$us)|0);
										$110 = $109;
										HEAP8[$106>>0] = $79;
										$111 = ((($106)) + 1|0);
										$112 = $111;
										$113 = (($114) - ($$in$i$i$us))|0;
										$115 = (0 - ($113))|0;
										$116 = (($106) + ($115)|0);
										$117 = $116;
										_memcpy(($116|0),($93|0),($113|0))|0;
										HEAP32[$75>>2] = $117;
										HEAP32[$80>>2] = $112;
										HEAP32[$$pre$phi$i$usZ2D>>2] = $110;
										$118 = ($$in$i$i$us|0)==(0);
										if (!($118)) {
											__ZdlPv($93);
										}
									} else {
										HEAP8[$81>>0] = $79;
										$86 = HEAP32[$80>>2]|0;
										$87 = ((($86)) + 1|0);
										HEAP32[$80>>2] = $87;
									}
									$119 = $77 >>> 1;
									$120 = (($col2$121$us) + 1)|0;
									$121 = ($119|0)!=(0);
									$122 = ($120|0)<($12|0);
									$or$cond2$us = $122 & $121;
									if ($or$cond2$us) {
										$77 = $119;$col2$121$us = $120;
									} else {
										$col2$1$lcssa$us = $120;
										break;
									}
								}
							} else {
								$col2$1$lcssa$us = $col2$022$us;
							}
							$124 = ($col2$1$lcssa$us|0)<($12|0);
							if ($124) {
								$col2$022$us = $col2$1$lcssa$us;
							} else {
								break;
							}
						}
						$125 = (($row1$024$us) + 1)|0;
						$126 = ($125|0)<($7|0);
						if ($126) {
							$row1$024$us = $125;
						} else {
							label = 42;
							break;
						}
					}
					if ((label|0) == 41) {
						$128 = (___cxa_allocate_exception(4)|0);
						HEAP32[$128>>2] = 872;
						___cxa_throw(($128|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 42) {
						return;
					}
				} else {
					if (!($13)) {
						return;
					}
					$14 = ($12|0)>(0);
					$15 = ((($this)) + 16|0);
					if ($14) {
						$row$032$us = 0;
					} else {
						return;
					}
					L42: while(1) {
						$col$030$us = 0;
						while(1) {
							$16 = (_fgetc($f)|0);
							$17 = ($16|0)==(-1);
							if ($17) {
								label = 40;
								break L42;
							}
							$66 = ($col$030$us|0)<($12|0);
							if ($66) {
								$21 = 128;$col$127$us = $col$030$us;
								while(1) {
									$18 = HEAP32[$15>>2]|0;
									$19 = (($18) + (($row$032$us*12)|0)|0);
									$20 = $21 & $16;
									$not$$us = ($20|0)==(0);
									$22 = $not$$us&1;
									$23 = (((($18) + (($row$032$us*12)|0)|0)) + 4|0);
									$24 = HEAP32[$23>>2]|0;
									$25 = (((($18) + (($row$032$us*12)|0)|0)) + 8|0);
									$26 = HEAP32[$25>>2]|0;
									$27 = ($24|0)==($26|0);
									$28 = $26;
									if ($27) {
										$31 = $24;
										$32 = HEAP32[$19>>2]|0;
										$33 = (($31) - ($32))|0;
										$34 = (($33) + 1)|0;
										$35 = ($34|0)<(0);
										if ($35) {
											__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($19);
											$$pre$i$i5$us = HEAP32[$19>>2]|0;
											$$pre$i7$us = HEAP32[$25>>2]|0;
											$$in$i$i9$us = $$pre$i$i5$us;$$pre$phi$i8$usZ2D = $25;$38 = $$pre$i7$us;
										} else {
											$$in$i$i9$us = $32;$$pre$phi$i8$usZ2D = $25;$38 = $28;
										}
										$36 = $$in$i$i9$us;
										$37 = (($38) - ($$in$i$i9$us))|0;
										$39 = ($37>>>0)<(1073741823);
										if ($39) {
											$42 = $37 << 1;
											$43 = ($42>>>0)<($34>>>0);
											$44 = $43 ? $34 : $42;
											$45 = HEAP32[$23>>2]|0;
											$46 = (($45) - ($$in$i$i9$us))|0;
											$47 = ($44|0)==(0);
											if ($47) {
												$$0$i2$i$i13$us = 0;$50 = 0;$51 = $46;$57 = $45;
											} else {
												$$0$i1$i$i12$us = $44;$129 = $45;$130 = $46;
												label = 13;
											}
										} else {
											$40 = HEAP32[$23>>2]|0;
											$41 = (($40) - ($$in$i$i9$us))|0;
											$$0$i1$i$i12$us = 2147483647;$129 = $40;$130 = $41;
											label = 13;
										}
										if ((label|0) == 13) {
											label = 0;
											$48 = (__Znwj($$0$i1$i$i12$us)|0);
											$$0$i2$i$i13$us = $$0$i1$i$i12$us;$50 = $48;$51 = $130;$57 = $129;
										}
										$49 = (($50) + ($51)|0);
										$52 = (($50) + ($$0$i2$i$i13$us)|0);
										$53 = $52;
										HEAP8[$49>>0] = $22;
										$54 = ((($49)) + 1|0);
										$55 = $54;
										$56 = (($57) - ($$in$i$i9$us))|0;
										$58 = (0 - ($56))|0;
										$59 = (($49) + ($58)|0);
										$60 = $59;
										_memcpy(($59|0),($36|0),($56|0))|0;
										HEAP32[$19>>2] = $60;
										HEAP32[$23>>2] = $55;
										HEAP32[$$pre$phi$i8$usZ2D>>2] = $53;
										$61 = ($$in$i$i9$us|0)==(0);
										if (!($61)) {
											__ZdlPv($36);
										}
									} else {
										HEAP8[$24>>0] = $22;
										$29 = HEAP32[$23>>2]|0;
										$30 = ((($29)) + 1|0);
										HEAP32[$23>>2] = $30;
									}
									$62 = $21 >>> 1;
									$63 = (($col$127$us) + 1)|0;
									$64 = ($62|0)!=(0);
									$65 = ($63|0)<($12|0);
									$or$cond$us = $65 & $64;
									if ($or$cond$us) {
										$21 = $62;$col$127$us = $63;
									} else {
										$col$1$lcssa$us = $63;
										break;
									}
								}
							} else {
								$col$1$lcssa$us = $col$030$us;
							}
							$67 = ($col$1$lcssa$us|0)<($12|0);
							if ($67) {
								$col$030$us = $col$1$lcssa$us;
							} else {
								break;
							}
						}
						$68 = (($row$032$us) + 1)|0;
						$69 = ($68|0)<($7|0);
						if ($69) {
							$row$032$us = $68;
						} else {
							label = 42;
							break;
						}
					}
					if ((label|0) == 40) {
						$127 = (___cxa_allocate_exception(4)|0);
						HEAP32[$127>>2] = 872;
						___cxa_throw(($127|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 42) {
						return;
					}
				}
			}
			function __ZN10Page_image7read_p2EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$ = 0, $$$us = 0, $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
				var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
				var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $col$02 = 0, $col$02$us = 0, $row$03 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$2 = (___cxa_allocate_exception(4)|0);
					HEAP32[$2>>2] = 1035;
					___cxa_throw(($2|0),(8|0),(0|0));
					// unreachable;
				}
				$3 = ($0|0)>(255);
				$4 = $3 ? 255 : $0;
				$5 = $4&255;
				$6 = ((($this)) + 28|0);
				HEAP8[$6>>0] = $5;
				$7 = $4 >>> 1;
				$8 = $7 & 127;
				$9 = $8&255;
				$10 = ((($this)) + 29|0);
				HEAP8[$10>>0] = $9;
				$11 = ((($this)) + 12|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ((($this)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = (($12) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$this>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				$22 = ($16|0)>(0);
				if (!($22)) {
					return;
				}
				$23 = ($21|0)>(0);
				$24 = ((($this)) + 16|0);
				$row$03 = 0;
				L7: while(1) {
					if ($23) {
						if ($3) {
							$col$02$us = 0;
							while(1) {
								$25 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$26 = ($0|0)<($25|0);
								if ($26) {
									label = 23;
									break L7;
								}
								$27 = (($0) - ($25))|0;
								$$$us = $invert ? $27 : $25;
								$28 = ($$$us*255)|0;
								$29 = (($28|0) / ($0|0))&-1;
								$30 = HEAP32[$24>>2]|0;
								$31 = (($30) + (($row$03*12)|0)|0);
								$32 = $29&255;
								$33 = (((($30) + (($row$03*12)|0)|0)) + 4|0);
								$34 = HEAP32[$33>>2]|0;
								$35 = (((($30) + (($row$03*12)|0)|0)) + 8|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = ($34|0)==($36|0);
								$38 = $36;
								if ($37) {
									$41 = $34;
									$42 = HEAP32[$31>>2]|0;
									$43 = (($41) - ($42))|0;
									$44 = (($43) + 1)|0;
									$45 = ($44|0)<(0);
									if ($45) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($31);
										$$pre$i$i$us = HEAP32[$31>>2]|0;
										$$pre$i$us = HEAP32[$35>>2]|0;
										$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $35;$48 = $$pre$i$us;
									} else {
										$$in$i$i$us = $42;$$pre$phi$i$usZ2D = $35;$48 = $38;
									}
									$46 = $$in$i$i$us;
									$47 = (($48) - ($$in$i$i$us))|0;
									$49 = ($47>>>0)<(1073741823);
									if ($49) {
										$52 = $47 << 1;
										$53 = ($52>>>0)<($44>>>0);
										$54 = $53 ? $44 : $52;
										$55 = HEAP32[$33>>2]|0;
										$56 = (($55) - ($$in$i$i$us))|0;
										$57 = ($54|0)==(0);
										if ($57) {
											$$0$i2$i$i$us = 0;$60 = 0;$61 = $56;$67 = $55;
										} else {
											$$0$i1$i$i$us = $54;$124 = $55;$125 = $56;
											label = 16;
										}
									} else {
										$50 = HEAP32[$33>>2]|0;
										$51 = (($50) - ($$in$i$i$us))|0;
										$$0$i1$i$i$us = 2147483647;$124 = $50;$125 = $51;
										label = 16;
									}
									if ((label|0) == 16) {
										label = 0;
										$58 = (__Znwj($$0$i1$i$i$us)|0);
										$$0$i2$i$i$us = $$0$i1$i$i$us;$60 = $58;$61 = $125;$67 = $124;
									}
									$59 = (($60) + ($61)|0);
									$62 = (($60) + ($$0$i2$i$i$us)|0);
									$63 = $62;
									HEAP8[$59>>0] = $32;
									$64 = ((($59)) + 1|0);
									$65 = $64;
									$66 = (($67) - ($$in$i$i$us))|0;
									$68 = (0 - ($66))|0;
									$69 = (($59) + ($68)|0);
									$70 = $69;
									_memcpy(($69|0),($46|0),($66|0))|0;
									HEAP32[$31>>2] = $70;
									HEAP32[$33>>2] = $65;
									HEAP32[$$pre$phi$i$usZ2D>>2] = $63;
									$71 = ($$in$i$i$us|0)==(0);
									if (!($71)) {
										__ZdlPv($46);
									}
								} else {
									HEAP8[$34>>0] = $32;
									$39 = HEAP32[$33>>2]|0;
									$40 = ((($39)) + 1|0);
									HEAP32[$33>>2] = $40;
								}
								$72 = (($col$02$us) + 1)|0;
								$73 = ($72|0)<($21|0);
								if ($73) {
									$col$02$us = $72;
								} else {
									break;
								}
							}
						} else {
							$col$02 = 0;
							while(1) {
								$76 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$77 = ($0|0)<($76|0);
								if ($77) {
									label = 23;
									break L7;
								}
								$79 = (($0) - ($76))|0;
								$$ = $invert ? $79 : $76;
								$80 = HEAP32[$24>>2]|0;
								$81 = (($80) + (($row$03*12)|0)|0);
								$82 = $$&255;
								$83 = (((($80) + (($row$03*12)|0)|0)) + 4|0);
								$84 = HEAP32[$83>>2]|0;
								$85 = (((($80) + (($row$03*12)|0)|0)) + 8|0);
								$86 = HEAP32[$85>>2]|0;
								$87 = ($84|0)==($86|0);
								$88 = $86;
								if ($87) {
									$91 = $84;
									$92 = HEAP32[$81>>2]|0;
									$93 = (($91) - ($92))|0;
									$94 = (($93) + 1)|0;
									$95 = ($94|0)<(0);
									if ($95) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($81);
										$$pre$i$i = HEAP32[$81>>2]|0;
										$$pre$i = HEAP32[$85>>2]|0;
										$$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $85;$98 = $$pre$i;
									} else {
										$$in$i$i = $92;$$pre$phi$iZ2D = $85;$98 = $88;
									}
									$96 = $$in$i$i;
									$97 = (($98) - ($$in$i$i))|0;
									$99 = ($97>>>0)<(1073741823);
									if ($99) {
										$102 = $97 << 1;
										$103 = ($102>>>0)<($94>>>0);
										$104 = $103 ? $94 : $102;
										$105 = HEAP32[$83>>2]|0;
										$106 = (($105) - ($$in$i$i))|0;
										$107 = ($104|0)==(0);
										if ($107) {
											$$0$i2$i$i = 0;$110 = 0;$111 = $106;$117 = $105;
										} else {
											$$0$i1$i$i = $104;$126 = $105;$127 = $106;
											label = 32;
										}
									} else {
										$100 = HEAP32[$83>>2]|0;
										$101 = (($100) - ($$in$i$i))|0;
										$$0$i1$i$i = 2147483647;$126 = $100;$127 = $101;
										label = 32;
									}
									if ((label|0) == 32) {
										label = 0;
										$108 = (__Znwj($$0$i1$i$i)|0);
										$$0$i2$i$i = $$0$i1$i$i;$110 = $108;$111 = $127;$117 = $126;
									}
									$109 = (($110) + ($111)|0);
									$112 = (($110) + ($$0$i2$i$i)|0);
									$113 = $112;
									HEAP8[$109>>0] = $82;
									$114 = ((($109)) + 1|0);
									$115 = $114;
									$116 = (($117) - ($$in$i$i))|0;
									$118 = (0 - ($116))|0;
									$119 = (($109) + ($118)|0);
									$120 = $119;
									_memcpy(($119|0),($96|0),($116|0))|0;
									HEAP32[$81>>2] = $120;
									HEAP32[$83>>2] = $115;
									HEAP32[$$pre$phi$iZ2D>>2] = $113;
									$121 = ($$in$i$i|0)==(0);
									if (!($121)) {
										__ZdlPv($96);
									}
								} else {
									HEAP8[$84>>0] = $82;
									$89 = HEAP32[$83>>2]|0;
									$90 = ((($89)) + 1|0);
									HEAP32[$83>>2] = $90;
								}
								$122 = (($col$02) + 1)|0;
								$123 = ($122|0)<($21|0);
								if ($123) {
									$col$02 = $122;
								} else {
									break;
								}
							}
						}
					}
					$74 = (($row$03) + 1)|0;
					$75 = ($74|0)<($16|0);
					if ($75) {
						$row$03 = $74;
					} else {
						label = 20;
						break;
					}
				}
				if ((label|0) == 20) {
					return;
				}
				else if ((label|0) == 23) {
					$78 = (___cxa_allocate_exception(4)|0);
					HEAP32[$78>>2] = 1060;
					___cxa_throw(($78|0),(8|0),(0|0));
					// unreachable;
				}
			}
			function __ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f) {
				$f = $f|0;
				var $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$0 = 0, $ch$0$i = 0, $ch$0$i$lcssa = 0, $ch$0$i5 = 0, $i$0 = 0;
				var $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				L1: while(1) {
					$0 = (_fgetc($f)|0);
					$1 = ($0|0)==(-1);
					if ($1) {
						label = 3;
						break;
					}
					$3 = $0&255;
					$4 = ($3<<24>>24)==(35);
					if ($4) {
						while(1) {
							$5 = (_fgetc($f)|0);
							$6 = ($5|0)==(-1);
							if ($6) {
								label = 6;
								break L1;
							}
							$8 = $5&255;
							$9 = ($8<<24>>24)==(10);
							if ($9) {
								$ch$0$i = 10;
								break;
							}
						}
					} else {
						$ch$0$i = $3;
					}
					$10 = $ch$0$i&255;
					$11 = (_isspace($10)|0);
					$12 = ($11|0)==(0);
					if ($12) {
						$$lcssa = $10;$ch$0$i$lcssa = $ch$0$i;
						label = 9;
						break;
					}
				}
				if ((label|0) == 3) {
					$2 = (___cxa_allocate_exception(4)|0);
					HEAP32[$2>>2] = 872;
					___cxa_throw(($2|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 6) {
					$7 = (___cxa_allocate_exception(4)|0);
					HEAP32[$7>>2] = 872;
					___cxa_throw(($7|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 9) {
					$isdigittmp = (($$lcssa) + -48)|0;
					$isdigit = ($isdigittmp>>>0)<(10);
					if ($isdigit) {
						$ch$0 = $ch$0$i$lcssa;$i$0 = 0;
					} else {
						$13 = (___cxa_allocate_exception(4)|0);
						HEAP32[$13>>2] = 962;
						___cxa_throw(($13|0),(8|0),(0|0));
						// unreachable;
					}
					L14: while(1) {
						$14 = $ch$0&255;
						$15 = (-2147483601 - ($14))|0;
						$16 = (($15|0) / 10)&-1;
						$17 = ($16|0)<($i$0|0);
						if ($17) {
							label = 12;
							break;
						}
						$19 = (($14) + -48)|0;
						$20 = ($i$0*10)|0;
						$21 = (($19) + ($20))|0;
						$22 = (_fgetc($f)|0);
						$23 = ($22|0)==(-1);
						if ($23) {
							label = 14;
							break;
						}
						$25 = $22&255;
						$26 = ($25<<24>>24)==(35);
						if ($26) {
							while(1) {
								$27 = (_fgetc($f)|0);
								$28 = ($27|0)==(-1);
								if ($28) {
									label = 17;
									break L14;
								}
								$30 = $27&255;
								$31 = ($30<<24>>24)==(10);
								if ($31) {
									$ch$0$i5 = 10;
									break;
								}
							}
						} else {
							$ch$0$i5 = $25;
						}
						$32 = $ch$0$i5&255;
						$isdigittmp1 = (($32) + -48)|0;
						$isdigit2 = ($isdigittmp1>>>0)<(10);
						if ($isdigit2) {
							$ch$0 = $ch$0$i5;$i$0 = $21;
						} else {
							$$lcssa19 = $21;
							label = 20;
							break;
						}
					}
					if ((label|0) == 12) {
						$18 = (___cxa_allocate_exception(4)|0);
						HEAP32[$18>>2] = 1007;
						___cxa_throw(($18|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 14) {
						$24 = (___cxa_allocate_exception(4)|0);
						HEAP32[$24>>2] = 872;
						___cxa_throw(($24|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 17) {
						$29 = (___cxa_allocate_exception(4)|0);
						HEAP32[$29>>2] = 872;
						___cxa_throw(($29|0),(8|0),(0|0));
						// unreachable;
					}
					else if ((label|0) == 20) {
						return ($$lcssa19|0);
					}
				}
				return (0)|0;
			}
			function __ZN10Page_image7read_p5EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
				var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
				var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$02 = 0, $col$02$us = 0, $row$03 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$2 = (___cxa_allocate_exception(4)|0);
					HEAP32[$2>>2] = 1035;
					___cxa_throw(($2|0),(8|0),(0|0));
					// unreachable;
				}
				$3 = ($0|0)>(255);
				if ($3) {
					$4 = (___cxa_allocate_exception(4)|0);
					HEAP32[$4>>2] = 1088;
					___cxa_throw(($4|0),(8|0),(0|0));
					// unreachable;
				}
				$5 = $0&255;
				$6 = ((($this)) + 28|0);
				HEAP8[$6>>0] = $5;
				$7 = $0 >>> 1;
				$8 = $7 & 127;
				$9 = $8&255;
				$10 = ((($this)) + 29|0);
				HEAP8[$10>>0] = $9;
				$11 = ((($this)) + 12|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ((($this)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = (($12) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$this>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				$22 = ($16|0)>(0);
				if (!($22)) {
					return;
				}
				$23 = ($21|0)>(0);
				$24 = ((($this)) + 16|0);
				$row$03 = 0;
				L10: while(1) {
					if ($23) {
						if ($invert) {
							$col$02$us = 0;
							while(1) {
								$25 = (_fgetc($f)|0);
								$26 = ($25|0)==(-1);
								if ($26) {
									label = 26;
									break L10;
								}
								$27 = $25&255;
								$28 = HEAP8[$6>>0]|0;
								$29 = ($28&255)<($27&255);
								if ($29) {
									label = 28;
									break L10;
								}
								$30 = $28&255;
								$31 = (($30) - ($25))|0;
								$32 = $31&255;
								$33 = HEAP32[$24>>2]|0;
								$34 = (($33) + (($row$03*12)|0)|0);
								$35 = (((($33) + (($row$03*12)|0)|0)) + 4|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = (((($33) + (($row$03*12)|0)|0)) + 8|0);
								$38 = HEAP32[$37>>2]|0;
								$39 = ($36|0)==($38|0);
								$40 = $38;
								if ($39) {
									$43 = $36;
									$44 = HEAP32[$34>>2]|0;
									$45 = (($43) - ($44))|0;
									$46 = (($45) + 1)|0;
									$47 = ($46|0)<(0);
									if ($47) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($34);
										$$pre$i$i$us = HEAP32[$34>>2]|0;
										$$pre$i$us = HEAP32[$37>>2]|0;
										$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $37;$50 = $$pre$i$us;
									} else {
										$$in$i$i$us = $44;$$pre$phi$i$usZ2D = $37;$50 = $40;
									}
									$48 = $$in$i$i$us;
									$49 = (($50) - ($$in$i$i$us))|0;
									$51 = ($49>>>0)<(1073741823);
									if ($51) {
										$54 = $49 << 1;
										$55 = ($54>>>0)<($46>>>0);
										$56 = $55 ? $46 : $54;
										$57 = HEAP32[$35>>2]|0;
										$58 = (($57) - ($$in$i$i$us))|0;
										$59 = ($56|0)==(0);
										if ($59) {
											$$0$i2$i$i$us = 0;$62 = 0;$63 = $58;$69 = $57;
										} else {
											$$0$i1$i$i$us = $56;$128 = $57;$129 = $58;
											label = 19;
										}
									} else {
										$52 = HEAP32[$35>>2]|0;
										$53 = (($52) - ($$in$i$i$us))|0;
										$$0$i1$i$i$us = 2147483647;$128 = $52;$129 = $53;
										label = 19;
									}
									if ((label|0) == 19) {
										label = 0;
										$60 = (__Znwj($$0$i1$i$i$us)|0);
										$$0$i2$i$i$us = $$0$i1$i$i$us;$62 = $60;$63 = $129;$69 = $128;
									}
									$61 = (($62) + ($63)|0);
									$64 = (($62) + ($$0$i2$i$i$us)|0);
									$65 = $64;
									HEAP8[$61>>0] = $32;
									$66 = ((($61)) + 1|0);
									$67 = $66;
									$68 = (($69) - ($$in$i$i$us))|0;
									$70 = (0 - ($68))|0;
									$71 = (($61) + ($70)|0);
									$72 = $71;
									_memcpy(($71|0),($48|0),($68|0))|0;
									HEAP32[$34>>2] = $72;
									HEAP32[$35>>2] = $67;
									HEAP32[$$pre$phi$i$usZ2D>>2] = $65;
									$73 = ($$in$i$i$us|0)==(0);
									if (!($73)) {
										__ZdlPv($48);
									}
								} else {
									HEAP8[$36>>0] = $32;
									$41 = HEAP32[$35>>2]|0;
									$42 = ((($41)) + 1|0);
									HEAP32[$35>>2] = $42;
								}
								$74 = (($col$02$us) + 1)|0;
								$75 = ($74|0)<($21|0);
								if ($75) {
									$col$02$us = $74;
								} else {
									break;
								}
							}
						} else {
							$col$02 = 0;
							while(1) {
								$78 = (_fgetc($f)|0);
								$79 = ($78|0)==(-1);
								if ($79) {
									label = 26;
									break L10;
								}
								$81 = $78&255;
								$82 = HEAP8[$6>>0]|0;
								$83 = ($82&255)<($81&255);
								if ($83) {
									label = 28;
									break L10;
								}
								$85 = HEAP32[$24>>2]|0;
								$86 = (($85) + (($row$03*12)|0)|0);
								$87 = (((($85) + (($row$03*12)|0)|0)) + 4|0);
								$88 = HEAP32[$87>>2]|0;
								$89 = (((($85) + (($row$03*12)|0)|0)) + 8|0);
								$90 = HEAP32[$89>>2]|0;
								$91 = ($88|0)==($90|0);
								$92 = $90;
								if ($91) {
									$95 = $88;
									$96 = HEAP32[$86>>2]|0;
									$97 = (($95) - ($96))|0;
									$98 = (($97) + 1)|0;
									$99 = ($98|0)<(0);
									if ($99) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($86);
										$$pre$i$i = HEAP32[$86>>2]|0;
										$$pre$i = HEAP32[$89>>2]|0;
										$$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $89;$102 = $$pre$i;
									} else {
										$$in$i$i = $96;$$pre$phi$iZ2D = $89;$102 = $92;
									}
									$100 = $$in$i$i;
									$101 = (($102) - ($$in$i$i))|0;
									$103 = ($101>>>0)<(1073741823);
									if ($103) {
										$106 = $101 << 1;
										$107 = ($106>>>0)<($98>>>0);
										$108 = $107 ? $98 : $106;
										$109 = HEAP32[$87>>2]|0;
										$110 = (($109) - ($$in$i$i))|0;
										$111 = ($108|0)==(0);
										if ($111) {
											$$0$i2$i$i = 0;$114 = 0;$115 = $110;$121 = $109;
										} else {
											$$0$i1$i$i = $108;$130 = $109;$131 = $110;
											label = 37;
										}
									} else {
										$104 = HEAP32[$87>>2]|0;
										$105 = (($104) - ($$in$i$i))|0;
										$$0$i1$i$i = 2147483647;$130 = $104;$131 = $105;
										label = 37;
									}
									if ((label|0) == 37) {
										label = 0;
										$112 = (__Znwj($$0$i1$i$i)|0);
										$$0$i2$i$i = $$0$i1$i$i;$114 = $112;$115 = $131;$121 = $130;
									}
									$113 = (($114) + ($115)|0);
									$116 = (($114) + ($$0$i2$i$i)|0);
									$117 = $116;
									HEAP8[$113>>0] = $81;
									$118 = ((($113)) + 1|0);
									$119 = $118;
									$120 = (($121) - ($$in$i$i))|0;
									$122 = (0 - ($120))|0;
									$123 = (($113) + ($122)|0);
									$124 = $123;
									_memcpy(($123|0),($100|0),($120|0))|0;
									HEAP32[$86>>2] = $124;
									HEAP32[$87>>2] = $119;
									HEAP32[$$pre$phi$iZ2D>>2] = $117;
									$125 = ($$in$i$i|0)==(0);
									if (!($125)) {
										__ZdlPv($100);
									}
								} else {
									HEAP8[$88>>0] = $81;
									$93 = HEAP32[$87>>2]|0;
									$94 = ((($93)) + 1|0);
									HEAP32[$87>>2] = $94;
								}
								$126 = (($col$02) + 1)|0;
								$127 = ($126|0)<($21|0);
								if ($127) {
									$col$02 = $126;
								} else {
									break;
								}
							}
						}
					}
					$76 = (($row$03) + 1)|0;
					$77 = ($76|0)<($16|0);
					if ($77) {
						$row$03 = $76;
					} else {
						label = 23;
						break;
					}
				}
				if ((label|0) == 23) {
					return;
				}
				else if ((label|0) == 26) {
					$80 = (___cxa_allocate_exception(4)|0);
					HEAP32[$80>>2] = 872;
					___cxa_throw(($80|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 28) {
					$84 = (___cxa_allocate_exception(4)|0);
					HEAP32[$84>>2] = 1060;
					___cxa_throw(($84|0),(8|0),(0|0));
					// unreachable;
				}
			}
			function __ZN10Page_image7read_p3EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
				var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
				var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
				var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
				var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
				var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$06 = 0, $col$06$us = 0, $or$cond = 0;
				var $or$cond$us = 0, $or$cond2 = 0, $or$cond2$us = 0, $row$07 = 0, $val$1 = 0, $val$1$us = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$2 = (___cxa_allocate_exception(4)|0);
					HEAP32[$2>>2] = 1119;
					___cxa_throw(($2|0),(8|0),(0|0));
					// unreachable;
				}
				$3 = ($0|0)>(255);
				$4 = $3 ? 255 : $0;
				$5 = $4&255;
				$6 = ((($this)) + 28|0);
				HEAP8[$6>>0] = $5;
				$7 = $4 >>> 1;
				$8 = $7 & 127;
				$9 = $8&255;
				$10 = ((($this)) + 29|0);
				HEAP8[$10>>0] = $9;
				$11 = ((($this)) + 12|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ((($this)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = (($12) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$this>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				$22 = ($16|0)>(0);
				if (!($22)) {
					return;
				}
				$23 = ($21|0)>(0);
				$24 = ((($this)) + 16|0);
				$row$07 = 0;
				L7: while(1) {
					if ($23) {
						if ($invert) {
							$col$06$us = 0;
							while(1) {
								$25 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$26 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$27 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$28 = ($25|0)>($0|0);
								$29 = ($26|0)>($0|0);
								$or$cond$us = $28 | $29;
								$30 = ($27|0)>($0|0);
								$or$cond2$us = $or$cond$us | $30;
								if ($or$cond2$us) {
									label = 25;
									break L7;
								}
								$31 = ($26|0)<($27|0);
								$32 = $31 ? $27 : $26;
								$33 = ($25|0)<($32|0);
								$34 = $33 ? $32 : $25;
								$35 = (($0) - ($34))|0;
								if ($3) {
									$36 = ($35*255)|0;
									$37 = (($36|0) / ($0|0))&-1;
									$val$1$us = $37;
								} else {
									$val$1$us = $35;
								}
								$38 = HEAP32[$24>>2]|0;
								$39 = (($38) + (($row$07*12)|0)|0);
								$40 = $val$1$us&255;
								$41 = (((($38) + (($row$07*12)|0)|0)) + 4|0);
								$42 = HEAP32[$41>>2]|0;
								$43 = (((($38) + (($row$07*12)|0)|0)) + 8|0);
								$44 = HEAP32[$43>>2]|0;
								$45 = ($42|0)==($44|0);
								$46 = $44;
								if ($45) {
									$49 = $42;
									$50 = HEAP32[$39>>2]|0;
									$51 = (($49) - ($50))|0;
									$52 = (($51) + 1)|0;
									$53 = ($52|0)<(0);
									if ($53) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($39);
										$$pre$i$i$us = HEAP32[$39>>2]|0;
										$$pre$i$us = HEAP32[$43>>2]|0;
										$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $43;$56 = $$pre$i$us;
									} else {
										$$in$i$i$us = $50;$$pre$phi$i$usZ2D = $43;$56 = $46;
									}
									$54 = $$in$i$i$us;
									$55 = (($56) - ($$in$i$i$us))|0;
									$57 = ($55>>>0)<(1073741823);
									if ($57) {
										$60 = $55 << 1;
										$61 = ($60>>>0)<($52>>>0);
										$62 = $61 ? $52 : $60;
										$63 = HEAP32[$41>>2]|0;
										$64 = (($63) - ($$in$i$i$us))|0;
										$65 = ($62|0)==(0);
										if ($65) {
											$$0$i2$i$i$us = 0;$68 = 0;$69 = $64;$75 = $63;
										} else {
											$$0$i1$i$i$us = $62;$141 = $63;$142 = $64;
											label = 18;
										}
									} else {
										$58 = HEAP32[$41>>2]|0;
										$59 = (($58) - ($$in$i$i$us))|0;
										$$0$i1$i$i$us = 2147483647;$141 = $58;$142 = $59;
										label = 18;
									}
									if ((label|0) == 18) {
										label = 0;
										$66 = (__Znwj($$0$i1$i$i$us)|0);
										$$0$i2$i$i$us = $$0$i1$i$i$us;$68 = $66;$69 = $142;$75 = $141;
									}
									$67 = (($68) + ($69)|0);
									$70 = (($68) + ($$0$i2$i$i$us)|0);
									$71 = $70;
									HEAP8[$67>>0] = $40;
									$72 = ((($67)) + 1|0);
									$73 = $72;
									$74 = (($75) - ($$in$i$i$us))|0;
									$76 = (0 - ($74))|0;
									$77 = (($67) + ($76)|0);
									$78 = $77;
									_memcpy(($77|0),($54|0),($74|0))|0;
									HEAP32[$39>>2] = $78;
									HEAP32[$41>>2] = $73;
									HEAP32[$$pre$phi$i$usZ2D>>2] = $71;
									$79 = ($$in$i$i$us|0)==(0);
									if (!($79)) {
										__ZdlPv($54);
									}
								} else {
									HEAP8[$42>>0] = $40;
									$47 = HEAP32[$41>>2]|0;
									$48 = ((($47)) + 1|0);
									HEAP32[$41>>2] = $48;
								}
								$80 = (($col$06$us) + 1)|0;
								$81 = ($80|0)<($21|0);
								if ($81) {
									$col$06$us = $80;
								} else {
									break;
								}
							}
						} else {
							$col$06 = 0;
							while(1) {
								$84 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$85 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$86 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
								$87 = ($84|0)>($0|0);
								$88 = ($85|0)>($0|0);
								$or$cond = $87 | $88;
								$89 = ($86|0)>($0|0);
								$or$cond2 = $or$cond | $89;
								if ($or$cond2) {
									label = 25;
									break L7;
								}
								$91 = ($86|0)<($85|0);
								$92 = $91 ? $86 : $85;
								$93 = ($92|0)<($84|0);
								$94 = $93 ? $92 : $84;
								if ($3) {
									$95 = ($94*255)|0;
									$96 = (($95|0) / ($0|0))&-1;
									$val$1 = $96;
								} else {
									$val$1 = $94;
								}
								$97 = HEAP32[$24>>2]|0;
								$98 = (($97) + (($row$07*12)|0)|0);
								$99 = $val$1&255;
								$100 = (((($97) + (($row$07*12)|0)|0)) + 4|0);
								$101 = HEAP32[$100>>2]|0;
								$102 = (((($97) + (($row$07*12)|0)|0)) + 8|0);
								$103 = HEAP32[$102>>2]|0;
								$104 = ($101|0)==($103|0);
								$105 = $103;
								if ($104) {
									$108 = $101;
									$109 = HEAP32[$98>>2]|0;
									$110 = (($108) - ($109))|0;
									$111 = (($110) + 1)|0;
									$112 = ($111|0)<(0);
									if ($112) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($98);
										$$pre$i$i = HEAP32[$98>>2]|0;
										$$pre$i = HEAP32[$102>>2]|0;
										$$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $102;$115 = $$pre$i;
									} else {
										$$in$i$i = $109;$$pre$phi$iZ2D = $102;$115 = $105;
									}
									$113 = $$in$i$i;
									$114 = (($115) - ($$in$i$i))|0;
									$116 = ($114>>>0)<(1073741823);
									if ($116) {
										$119 = $114 << 1;
										$120 = ($119>>>0)<($111>>>0);
										$121 = $120 ? $111 : $119;
										$122 = HEAP32[$100>>2]|0;
										$123 = (($122) - ($$in$i$i))|0;
										$124 = ($121|0)==(0);
										if ($124) {
											$$0$i2$i$i = 0;$127 = 0;$128 = $123;$134 = $122;
										} else {
											$$0$i1$i$i = $121;$143 = $122;$144 = $123;
											label = 36;
										}
									} else {
										$117 = HEAP32[$100>>2]|0;
										$118 = (($117) - ($$in$i$i))|0;
										$$0$i1$i$i = 2147483647;$143 = $117;$144 = $118;
										label = 36;
									}
									if ((label|0) == 36) {
										label = 0;
										$125 = (__Znwj($$0$i1$i$i)|0);
										$$0$i2$i$i = $$0$i1$i$i;$127 = $125;$128 = $144;$134 = $143;
									}
									$126 = (($127) + ($128)|0);
									$129 = (($127) + ($$0$i2$i$i)|0);
									$130 = $129;
									HEAP8[$126>>0] = $99;
									$131 = ((($126)) + 1|0);
									$132 = $131;
									$133 = (($134) - ($$in$i$i))|0;
									$135 = (0 - ($133))|0;
									$136 = (($126) + ($135)|0);
									$137 = $136;
									_memcpy(($136|0),($113|0),($133|0))|0;
									HEAP32[$98>>2] = $137;
									HEAP32[$100>>2] = $132;
									HEAP32[$$pre$phi$iZ2D>>2] = $130;
									$138 = ($$in$i$i|0)==(0);
									if (!($138)) {
										__ZdlPv($113);
									}
								} else {
									HEAP8[$101>>0] = $99;
									$106 = HEAP32[$100>>2]|0;
									$107 = ((($106)) + 1|0);
									HEAP32[$100>>2] = $107;
								}
								$139 = (($col$06) + 1)|0;
								$140 = ($139|0)<($21|0);
								if ($140) {
									$col$06 = $139;
								} else {
									break;
								}
							}
						}
					}
					$82 = (($row$07) + 1)|0;
					$83 = ($82|0)<($16|0);
					if ($83) {
						$row$07 = $82;
					} else {
						label = 22;
						break;
					}
				}
				if ((label|0) == 22) {
					return;
				}
				else if ((label|0) == 25) {
					$90 = (___cxa_allocate_exception(4)|0);
					HEAP32[$90>>2] = 1144;
					___cxa_throw(($90|0),(8|0),(0|0));
					// unreachable;
				}
			}
			function __ZN10Page_image7read_p6EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
				var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$08 = 0, $col$08$us = 0, $or$cond = 0, $or$cond$us = 0, $or$cond2 = 0, $or$cond2$us = 0, $row$09 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE($f)|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$2 = (___cxa_allocate_exception(4)|0);
					HEAP32[$2>>2] = 1119;
					___cxa_throw(($2|0),(8|0),(0|0));
					// unreachable;
				}
				$3 = ($0|0)>(255);
				if ($3) {
					$4 = (___cxa_allocate_exception(4)|0);
					HEAP32[$4>>2] = 1172;
					___cxa_throw(($4|0),(8|0),(0|0));
					// unreachable;
				}
				$5 = $0&255;
				$6 = ((($this)) + 28|0);
				HEAP8[$6>>0] = $5;
				$7 = $0 >>> 1;
				$8 = $7 & 127;
				$9 = $8&255;
				$10 = ((($this)) + 29|0);
				HEAP8[$10>>0] = $9;
				$11 = ((($this)) + 12|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ((($this)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = (($12) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$this>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				$22 = ($16|0)>(0);
				if (!($22)) {
					return;
				}
				$23 = ($21|0)>(0);
				$24 = ((($this)) + 16|0);
				$row$09 = 0;
				L10: while(1) {
					if ($23) {
						if ($invert) {
							$col$08$us = 0;
							while(1) {
								$25 = (_fgetc($f)|0);
								$26 = ($25|0)==(-1);
								if ($26) {
									label = 28;
									break L10;
								}
								$27 = $25&255;
								$28 = (_fgetc($f)|0);
								$29 = ($28|0)==(-1);
								if ($29) {
									label = 30;
									break L10;
								}
								$30 = $28&255;
								$31 = (_fgetc($f)|0);
								$32 = ($31|0)==(-1);
								if ($32) {
									label = 32;
									break L10;
								}
								$33 = $31&255;
								$34 = HEAP8[$6>>0]|0;
								$35 = ($27&255)>($34&255);
								$36 = ($30&255)>($34&255);
								$or$cond$us = $35 | $36;
								$37 = ($33&255)>($34&255);
								$or$cond2$us = $37 | $or$cond$us;
								if ($or$cond2$us) {
									label = 34;
									break L10;
								}
								$38 = $34&255;
								$39 = ($30&255)<($33&255);
								$40 = $39 ? $33 : $30;
								$41 = ($27&255)<($40&255);
								$42 = $41 ? $40 : $27;
								$43 = $42&255;
								$44 = (($38) - ($43))|0;
								$45 = $44&255;
								$46 = HEAP32[$24>>2]|0;
								$47 = (($46) + (($row$09*12)|0)|0);
								$48 = (((($46) + (($row$09*12)|0)|0)) + 4|0);
								$49 = HEAP32[$48>>2]|0;
								$50 = (((($46) + (($row$09*12)|0)|0)) + 8|0);
								$51 = HEAP32[$50>>2]|0;
								$52 = ($49|0)==($51|0);
								$53 = $51;
								if ($52) {
									$56 = $49;
									$57 = HEAP32[$47>>2]|0;
									$58 = (($56) - ($57))|0;
									$59 = (($58) + 1)|0;
									$60 = ($59|0)<(0);
									if ($60) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($47);
										$$pre$i$i$us = HEAP32[$47>>2]|0;
										$$pre$i$us = HEAP32[$50>>2]|0;
										$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $50;$63 = $$pre$i$us;
									} else {
										$$in$i$i$us = $57;$$pre$phi$i$usZ2D = $50;$63 = $53;
									}
									$61 = $$in$i$i$us;
									$62 = (($63) - ($$in$i$i$us))|0;
									$64 = ($62>>>0)<(1073741823);
									if ($64) {
										$67 = $62 << 1;
										$68 = ($67>>>0)<($59>>>0);
										$69 = $68 ? $59 : $67;
										$70 = HEAP32[$48>>2]|0;
										$71 = (($70) - ($$in$i$i$us))|0;
										$72 = ($69|0)==(0);
										if ($72) {
											$$0$i2$i$i$us = 0;$75 = 0;$76 = $71;$82 = $70;
										} else {
											$$0$i1$i$i$us = $69;$155 = $70;$156 = $71;
											label = 21;
										}
									} else {
										$65 = HEAP32[$48>>2]|0;
										$66 = (($65) - ($$in$i$i$us))|0;
										$$0$i1$i$i$us = 2147483647;$155 = $65;$156 = $66;
										label = 21;
									}
									if ((label|0) == 21) {
										label = 0;
										$73 = (__Znwj($$0$i1$i$i$us)|0);
										$$0$i2$i$i$us = $$0$i1$i$i$us;$75 = $73;$76 = $156;$82 = $155;
									}
									$74 = (($75) + ($76)|0);
									$77 = (($75) + ($$0$i2$i$i$us)|0);
									$78 = $77;
									HEAP8[$74>>0] = $45;
									$79 = ((($74)) + 1|0);
									$80 = $79;
									$81 = (($82) - ($$in$i$i$us))|0;
									$83 = (0 - ($81))|0;
									$84 = (($74) + ($83)|0);
									$85 = $84;
									_memcpy(($84|0),($61|0),($81|0))|0;
									HEAP32[$47>>2] = $85;
									HEAP32[$48>>2] = $80;
									HEAP32[$$pre$phi$i$usZ2D>>2] = $78;
									$86 = ($$in$i$i$us|0)==(0);
									if (!($86)) {
										__ZdlPv($61);
									}
								} else {
									HEAP8[$49>>0] = $45;
									$54 = HEAP32[$48>>2]|0;
									$55 = ((($54)) + 1|0);
									HEAP32[$48>>2] = $55;
								}
								$87 = (($col$08$us) + 1)|0;
								$88 = ($87|0)<($21|0);
								if ($88) {
									$col$08$us = $87;
								} else {
									break;
								}
							}
						} else {
							$col$08 = 0;
							while(1) {
								$91 = (_fgetc($f)|0);
								$92 = ($91|0)==(-1);
								if ($92) {
									label = 28;
									break L10;
								}
								$94 = $91&255;
								$95 = (_fgetc($f)|0);
								$96 = ($95|0)==(-1);
								if ($96) {
									label = 30;
									break L10;
								}
								$98 = $95&255;
								$99 = (_fgetc($f)|0);
								$100 = ($99|0)==(-1);
								if ($100) {
									label = 32;
									break L10;
								}
								$102 = $99&255;
								$103 = HEAP8[$6>>0]|0;
								$104 = ($94&255)>($103&255);
								$105 = ($98&255)>($103&255);
								$or$cond = $104 | $105;
								$106 = ($102&255)>($103&255);
								$or$cond2 = $106 | $or$cond;
								if ($or$cond2) {
									label = 34;
									break L10;
								}
								$108 = ($102&255)<($98&255);
								$109 = $108 ? $102 : $98;
								$110 = ($109&255)<($94&255);
								$111 = $110 ? $109 : $94;
								$112 = HEAP32[$24>>2]|0;
								$113 = (($112) + (($row$09*12)|0)|0);
								$114 = (((($112) + (($row$09*12)|0)|0)) + 4|0);
								$115 = HEAP32[$114>>2]|0;
								$116 = (((($112) + (($row$09*12)|0)|0)) + 8|0);
								$117 = HEAP32[$116>>2]|0;
								$118 = ($115|0)==($117|0);
								$119 = $117;
								if ($118) {
									$122 = $115;
									$123 = HEAP32[$113>>2]|0;
									$124 = (($122) - ($123))|0;
									$125 = (($124) + 1)|0;
									$126 = ($125|0)<(0);
									if ($126) {
										__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($113);
										$$pre$i$i = HEAP32[$113>>2]|0;
										$$pre$i = HEAP32[$116>>2]|0;
										$$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $116;$129 = $$pre$i;
									} else {
										$$in$i$i = $123;$$pre$phi$iZ2D = $116;$129 = $119;
									}
									$127 = $$in$i$i;
									$128 = (($129) - ($$in$i$i))|0;
									$130 = ($128>>>0)<(1073741823);
									if ($130) {
										$133 = $128 << 1;
										$134 = ($133>>>0)<($125>>>0);
										$135 = $134 ? $125 : $133;
										$136 = HEAP32[$114>>2]|0;
										$137 = (($136) - ($$in$i$i))|0;
										$138 = ($135|0)==(0);
										if ($138) {
											$$0$i2$i$i = 0;$141 = 0;$142 = $137;$148 = $136;
										} else {
											$$0$i1$i$i = $135;$157 = $136;$158 = $137;
											label = 43;
										}
									} else {
										$131 = HEAP32[$114>>2]|0;
										$132 = (($131) - ($$in$i$i))|0;
										$$0$i1$i$i = 2147483647;$157 = $131;$158 = $132;
										label = 43;
									}
									if ((label|0) == 43) {
										label = 0;
										$139 = (__Znwj($$0$i1$i$i)|0);
										$$0$i2$i$i = $$0$i1$i$i;$141 = $139;$142 = $158;$148 = $157;
									}
									$140 = (($141) + ($142)|0);
									$143 = (($141) + ($$0$i2$i$i)|0);
									$144 = $143;
									HEAP8[$140>>0] = $111;
									$145 = ((($140)) + 1|0);
									$146 = $145;
									$147 = (($148) - ($$in$i$i))|0;
									$149 = (0 - ($147))|0;
									$150 = (($140) + ($149)|0);
									$151 = $150;
									_memcpy(($150|0),($127|0),($147|0))|0;
									HEAP32[$113>>2] = $151;
									HEAP32[$114>>2] = $146;
									HEAP32[$$pre$phi$iZ2D>>2] = $144;
									$152 = ($$in$i$i|0)==(0);
									if (!($152)) {
										__ZdlPv($127);
									}
								} else {
									HEAP8[$115>>0] = $111;
									$120 = HEAP32[$114>>2]|0;
									$121 = ((($120)) + 1|0);
									HEAP32[$114>>2] = $121;
								}
								$153 = (($col$08) + 1)|0;
								$154 = ($153|0)<($21|0);
								if ($154) {
									$col$08 = $153;
								} else {
									break;
								}
							}
						}
					}
					$89 = (($row$09) + 1)|0;
					$90 = ($89|0)<($16|0);
					if ($90) {
						$row$09 = $89;
					} else {
						label = 25;
						break;
					}
				}
				if ((label|0) == 25) {
					return;
				}
				else if ((label|0) == 28) {
					$93 = (___cxa_allocate_exception(4)|0);
					HEAP32[$93>>2] = 872;
					___cxa_throw(($93|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 30) {
					$97 = (___cxa_allocate_exception(4)|0);
					HEAP32[$97>>2] = 872;
					___cxa_throw(($97|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 32) {
					$101 = (___cxa_allocate_exception(4)|0);
					HEAP32[$101>>2] = 872;
					___cxa_throw(($101|0),(8|0),(0|0));
					// unreachable;
				}
				else if ((label|0) == 34) {
					$107 = (___cxa_allocate_exception(4)|0);
					HEAP32[$107>>2] = 1144;
					___cxa_throw(($107|0),(8|0),(0|0));
					// unreachable;
				}
			}
			function __ZN10Page_imageC2EP8_IO_FILEb($this,$f,$invert) {
				$this = $this|0;
				$f = $f|0;
				$invert = $invert|0;
				var $$in = 0, $$in$lcssa = 0, $$in17 = 0, $$lcssa = 0, $$off = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i6 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
				var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
				var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
				var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index6 = 0, $row$013 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				__ZN9RectangleC2Eiiii($this,0,0,0,0);
				$0 = ((($this)) + 16|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 20|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($this)) + 24|0);
				HEAP32[$2>>2] = 0;
				$3 = (_fgetc($f)|0);
				$4 = ($3|0)==(-1);
				L1: do {
					if ($4) {
						$5 = (___cxa_allocate_exception(4)|0);
						HEAP32[$5>>2] = 872;
						__THREW__ = 0;
						invoke_viii(34,($5|0),(8|0),(0|0));
						$6 = __THREW__; __THREW__ = 0;
						label = 8;
					} else {
						$7 = $3&255;
						$8 = ($7<<24>>24)==(80);
						if ($8) {
							$9 = (_fgetc($f)|0);
							$10 = ($9|0)==(-1);
							if ($10) {
								$11 = (___cxa_allocate_exception(4)|0);
								HEAP32[$11>>2] = 872;
								__THREW__ = 0;
								invoke_viii(34,($11|0),(8|0),(0|0));
								$12 = __THREW__; __THREW__ = 0;
								label = 8;
								break;
							}
							$13 = $9&255;
							$$off = (($13) + -49)<<24>>24;
							$14 = ($$off&255)<(6);
							if ($14) {
								$35 = $9 & 255;
								__THREW__ = 0;
								$36 = (invoke_ii(35,($f|0))|0);
								$37 = __THREW__; __THREW__ = 0;
								$38 = $37&1;
								if ($38) {
									label = 8;
									break;
								}
								$39 = ($36|0)==(0);
								if ($39) {
									$40 = (___cxa_allocate_exception(4)|0);
									HEAP32[$40>>2] = 1250;
									__THREW__ = 0;
									invoke_viii(34,($40|0),(8|0),(0|0));
									$41 = __THREW__; __THREW__ = 0;
									label = 8;
									break;
								}
								__THREW__ = 0;
								invoke_vii(36,($this|0),($36|0));
								$42 = __THREW__; __THREW__ = 0;
								$43 = $42&1;
								if ($43) {
									label = 8;
									break;
								}
								__THREW__ = 0;
								$44 = (invoke_ii(35,($f|0))|0);
								$45 = __THREW__; __THREW__ = 0;
								$46 = $45&1;
								if ($46) {
									label = 8;
									break;
								}
								$47 = ($44|0)==(0);
								if ($47) {
									$48 = (___cxa_allocate_exception(4)|0);
									HEAP32[$48>>2] = 1274;
									__THREW__ = 0;
									invoke_viii(34,($48|0),(8|0),(0|0));
									$49 = __THREW__; __THREW__ = 0;
									label = 8;
									break;
								}
								__THREW__ = 0;
								invoke_vii(37,($this|0),($44|0));
								$50 = __THREW__; __THREW__ = 0;
								$51 = $50&1;
								if ($51) {
									label = 8;
									break;
								}
								$52 = ((($this)) + 8|0);
								$53 = HEAP32[$52>>2]|0;
								$54 = HEAP32[$this>>2]|0;
								$55 = (($53) + 1)|0;
								$56 = (($55) - ($54))|0;
								$57 = ($56|0)<(3);
								if (!($57)) {
									$58 = ((($this)) + 12|0);
									$59 = HEAP32[$58>>2]|0;
									$60 = ((($this)) + 4|0);
									$61 = HEAP32[$60>>2]|0;
									$62 = (($59) + 1)|0;
									$63 = (($62) - ($61))|0;
									$64 = ($63|0)<(3);
									if (!($64)) {
										$67 = (2147483647 / ($56|0))&-1;
										$68 = ($67|0)<($63|0);
										if ($68) {
											$69 = (___cxa_allocate_exception(4)|0);
											HEAP32[$69>>2] = 1337;
											__THREW__ = 0;
											invoke_viii(34,($69|0),(8|0),(0|0));
											$70 = __THREW__; __THREW__ = 0;
											label = 8;
											break;
										}
										$71 = HEAP32[$1>>2]|0;
										$72 = HEAP32[$0>>2]|0;
										$73 = (($71) - ($72))|0;
										$74 = (($73|0) / 12)&-1;
										$75 = ($63>>>0)>($74>>>0);
										$76 = $72;
										$77 = $71;
										if ($75) {
											$78 = (($63) - ($74))|0;
											__THREW__ = 0;
											invoke_vii(38,($0|0),($78|0));
											$79 = __THREW__; __THREW__ = 0;
											$80 = $79&1;
											if ($80) {
												label = 8;
												break;
											}
											$$pre = HEAP32[$1>>2]|0;
											$91 = $$pre;
										} else {
											$81 = ($63>>>0)<($74>>>0);
											if ($81) {
												$82 = (($76) + (($63*12)|0)|0);
												$83 = ($77|0)==($82|0);
												if ($83) {
													$91 = $71;
												} else {
													$85 = $77;
													while(1) {
														$84 = ((($85)) + -12|0);
														HEAP32[$1>>2] = $84;
														$86 = HEAP32[$84>>2]|0;
														$87 = ($86|0)==(0|0);
														if ($87) {
															$$in = $84;
														} else {
															$93 = ((($85)) + -8|0);
															$94 = HEAP32[$93>>2]|0;
															$95 = ($94|0)==($86|0);
															if (!($95)) {
																HEAP32[$93>>2] = $86;
															}
															__ZdlPv($86);
															$$pre$i$i$i6 = HEAP32[$1>>2]|0;
															$$in = $$pre$i$i$i6;
														}
														$88 = ($$in|0)==($82|0);
														if ($88) {
															$$in$lcssa = $$in;
															break;
														} else {
															$85 = $$in;
														}
													}
													$89 = $$in$lcssa;
													$91 = $89;
												}
											} else {
												$91 = $71;
											}
										}
										$90 = HEAP32[$0>>2]|0;
										$92 = ($91|0)==($90|0);
										L41: do {
											if (!($92)) {
												$$in17 = $90;$row$013 = 0;
												L42: while(1) {
													$96 = $$in17;
													$97 = (($96) + (($row$013*12)|0)|0);
													$98 = HEAP32[$52>>2]|0;
													$99 = HEAP32[$this>>2]|0;
													$100 = (($98) + 1)|0;
													$101 = (($100) - ($99))|0;
													$102 = (((($96) + (($row$013*12)|0)|0)) + 8|0);
													$103 = HEAP32[$102>>2]|0;
													$104 = HEAP32[$97>>2]|0;
													$105 = (($103) - ($104))|0;
													$106 = ($105>>>0)<($101>>>0);
													$107 = $104;
													do {
														if ($106) {
															$108 = (((($96) + (($row$013*12)|0)|0)) + 4|0);
															$109 = HEAP32[$108>>2]|0;
															$110 = (($109) - ($104))|0;
															$111 = ($100|0)==($99|0);
															if ($111) {
																$116 = 0;
															} else {
																__THREW__ = 0;
																$112 = (invoke_ii(29,($101|0))|0);
																$113 = __THREW__; __THREW__ = 0;
																$114 = $113&1;
																if ($114) {
																	$$lcssa = $96;
																	break L42;
																} else {
																	$116 = $112;
																}
															}
															$115 = (($116) + ($110)|0);
															$117 = $115;
															$118 = (($116) + ($101)|0);
															$119 = $118;
															$120 = (0 - ($110))|0;
															$121 = (($115) + ($120)|0);
															$122 = $121;
															_memcpy(($121|0),($107|0),($110|0))|0;
															HEAP32[$97>>2] = $122;
															HEAP32[$108>>2] = $117;
															HEAP32[$102>>2] = $119;
															$123 = ($104|0)==(0);
															if ($123) {
																break;
															}
															__ZdlPv($107);
														}
													} while(0);
													$124 = (($row$013) + 1)|0;
													$125 = HEAP32[$1>>2]|0;
													$126 = HEAP32[$0>>2]|0;
													$127 = (($125) - ($126))|0;
													$128 = (($127|0) / 12)&-1;
													$129 = ($124>>>0)<($128>>>0);
													if ($129) {
														$$in17 = $126;$row$013 = $124;
													} else {
														break L41;
													}
												}
												$15 = ___cxa_find_matching_catch_2()|0;
												$16 = tempRet0;
												$19 = $$lcssa;$lpad$phi$index = $15;$lpad$phi$index6 = $16;
												break L1;
											}
										} while(0);
										switch ($35|0) {
											case 49:  {
												__THREW__ = 0;
												invoke_viii(39,($this|0),($f|0),($invert|0));
												$130 = __THREW__; __THREW__ = 0;
												$131 = $130&1;
												if ($131) {
													label = 8;
													break L1;
												}
												break;
											}
											case 52:  {
												__THREW__ = 0;
												invoke_viii(40,($this|0),($f|0),($invert|0));
												$132 = __THREW__; __THREW__ = 0;
												$133 = $132&1;
												if ($133) {
													label = 8;
													break L1;
												}
												break;
											}
											case 50:  {
												__THREW__ = 0;
												invoke_viii(41,($this|0),($f|0),($invert|0));
												$134 = __THREW__; __THREW__ = 0;
												$135 = $134&1;
												if ($135) {
													label = 8;
													break L1;
												}
												break;
											}
											case 53:  {
												__THREW__ = 0;
												invoke_viii(42,($this|0),($f|0),($invert|0));
												$136 = __THREW__; __THREW__ = 0;
												$137 = $136&1;
												if ($137) {
													label = 8;
													break L1;
												}
												break;
											}
											case 51:  {
												__THREW__ = 0;
												invoke_viii(43,($this|0),($f|0),($invert|0));
												$138 = __THREW__; __THREW__ = 0;
												$139 = $138&1;
												if ($139) {
													label = 8;
													break L1;
												}
												break;
											}
											case 54:  {
												__THREW__ = 0;
												invoke_viii(44,($this|0),($f|0),($invert|0));
												$140 = __THREW__; __THREW__ = 0;
												$141 = $140&1;
												if ($141) {
													label = 8;
													break L1;
												}
												break;
											}
											default: {
											}
										}
										$142 = HEAP32[1700]|0;
										$143 = ($142|0)>(0);
										if (!($143)) {
											STACKTOP = sp;return;
										}
										$144 = HEAP32[90]|0;
										HEAP32[$vararg_buffer>>2] = $35;
										(_fprintf($144,1373,$vararg_buffer)|0);
										$145 = HEAP32[$52>>2]|0;
										$146 = HEAP32[$this>>2]|0;
										$147 = (($145) + 1)|0;
										$148 = (($147) - ($146))|0;
										$149 = HEAP32[$58>>2]|0;
										$150 = HEAP32[$60>>2]|0;
										$151 = (($149) + 1)|0;
										$152 = (($151) - ($150))|0;
										HEAP32[$vararg_buffer1>>2] = $148;
										$vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
										HEAP32[$vararg_ptr4>>2] = $152;
										(_fprintf($144,1391,$vararg_buffer1)|0);
										STACKTOP = sp;return;
									}
								}
								$65 = (___cxa_allocate_exception(4)|0);
								HEAP32[$65>>2] = 1299;
								__THREW__ = 0;
								invoke_viii(34,($65|0),(8|0),(0|0));
								$66 = __THREW__; __THREW__ = 0;
								label = 8;
								break;
							}
						}
						$33 = (___cxa_allocate_exception(4)|0);
						HEAP32[$33>>2] = 1203;
						__THREW__ = 0;
						invoke_viii(34,($33|0),(8|0),(0|0));
						$34 = __THREW__; __THREW__ = 0;
						label = 8;
					}
				} while(0);
				if ((label|0) == 8) {
					$17 = ___cxa_find_matching_catch_2()|0;
					$18 = tempRet0;
					$$pre15 = HEAP32[$0>>2]|0;
					$19 = $$pre15;$lpad$phi$index = $17;$lpad$phi$index6 = $18;
				}
				$20 = ($19|0)==(0|0);
				if ($20) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$21 = HEAP32[$1>>2]|0;
				$22 = ($21|0)==($19|0);
				if ($22) {
					$32 = $19;
				} else {
					$24 = $21;
					while(1) {
						$23 = ((($24)) + -12|0);
						HEAP32[$1>>2] = $23;
						$25 = HEAP32[$23>>2]|0;
						$26 = ($25|0)==(0|0);
						if ($26) {
							$27 = $23;
						} else {
							$29 = ((($24)) + -8|0);
							$30 = HEAP32[$29>>2]|0;
							$31 = ($30|0)==($25|0);
							if (!($31)) {
								HEAP32[$29>>2] = $25;
							}
							__ZdlPv($25);
							$$pre$i$i$i = HEAP32[$1>>2]|0;
							$27 = $$pre$i$i$i;
						}
						$28 = ($27|0)==($19|0);
						if ($28) {
							break;
						} else {
							$24 = $27;
						}
					}
					$$pre$i = HEAP32[$0>>2]|0;
					$32 = $$pre$i;
				}
				__ZdlPv($32);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i = 0, $$0$i10 = 0, $$0$i8 = 0, $$pre = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $8 = 0, $9 = 0, $__v = 0, $scevgep$i = 0, $scevgep$i11 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$__v = sp;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = (($4|0) / 12)&-1;
				$6 = ($5>>>0)<($__n>>>0);
				$7 = $3;
				if (!($6)) {
					$$0$i = $__n;$8 = $7;
					while(1) {
						HEAP32[$8>>2] = 0;
						$9 = ((($8)) + 4|0);
						HEAP32[$9>>2] = 0;
						$10 = ((($8)) + 8|0);
						HEAP32[$10>>2] = 0;
						$11 = ((($8)) + 12|0);
						$12 = (($$0$i) + -1)|0;
						$13 = ($12|0)==(0);
						if ($13) {
							break;
						} else {
							$$0$i = $12;$8 = $11;
						}
					}
					$scevgep$i = (($7) + (($__n*12)|0)|0);
					HEAP32[$2>>2] = $scevgep$i;
					STACKTOP = sp;return;
				}
				$14 = ((($this)) + 8|0);
				$15 = HEAP32[$this>>2]|0;
				$16 = (($3) - ($15))|0;
				$17 = (($16|0) / 12)&-1;
				$18 = (($17) + ($__n))|0;
				$19 = ($18>>>0)>(357913941);
				if ($19) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre20 = HEAP32[$this>>2]|0;
					$21 = $$pre20;$22 = $$pre;
				} else {
					$21 = $15;$22 = $1;
				}
				$20 = (($22) - ($21))|0;
				$23 = (($20|0) / 12)&-1;
				$24 = ($23>>>0)<(178956970);
				if ($24) {
					$25 = $23 << 1;
					$26 = ($25>>>0)<($18>>>0);
					$27 = $26 ? $18 : $25;
					$$0$i8 = $27;
				} else {
					$$0$i8 = 357913941;
				}
				$28 = HEAP32[$2>>2]|0;
				$29 = (($28) - ($21))|0;
				$30 = (($29|0) / 12)&-1;
				$31 = ((($__v)) + 12|0);
				HEAP32[$31>>2] = 0;
				$32 = ((($__v)) + 16|0);
				HEAP32[$32>>2] = $14;
				$33 = ($$0$i8|0)==(0);
				if ($33) {
					$36 = 0;
				} else {
					$34 = ($$0$i8*12)|0;
					$35 = (__Znwj($34)|0);
					$36 = $35;
				}
				HEAP32[$__v>>2] = $36;
				$37 = (($36) + (($30*12)|0)|0);
				$38 = ((($__v)) + 8|0);
				HEAP32[$38>>2] = $37;
				$39 = ((($__v)) + 4|0);
				HEAP32[$39>>2] = $37;
				$40 = (($36) + (($$0$i8*12)|0)|0);
				$41 = ((($__v)) + 12|0);
				HEAP32[$41>>2] = $40;
				$$0$i10 = $__n;$42 = $37;
				while(1) {
					HEAP32[$42>>2] = 0;
					$43 = ((($42)) + 4|0);
					HEAP32[$43>>2] = 0;
					$44 = ((($42)) + 8|0);
					HEAP32[$44>>2] = 0;
					$45 = ((($42)) + 12|0);
					$46 = (($$0$i10) + -1)|0;
					$47 = ($46|0)==(0);
					if ($47) {
						break;
					} else {
						$$0$i10 = $46;$42 = $45;
					}
				}
				$scevgep$i11 = (($37) + (($__n*12)|0)|0);
				HEAP32[$38>>2] = $scevgep$i11;
				__THREW__ = 0;
				invoke_vii(45,($this|0),($__v|0));
				$48 = __THREW__; __THREW__ = 0;
				$49 = $48&1;
				if ($49) {
					$63 = ___cxa_find_matching_catch_2()|0;
					$64 = tempRet0;
					$65 = HEAP32[$39>>2]|0;
					$66 = HEAP32[$38>>2]|0;
					$67 = ($66|0)==($65|0);
					if (!($67)) {
						$69 = $66;
						while(1) {
							$68 = ((($69)) + -12|0);
							$70 = HEAP32[$68>>2]|0;
							$71 = ($70|0)==(0|0);
							if (!($71)) {
								$73 = ((($69)) + -8|0);
								$74 = HEAP32[$73>>2]|0;
								$75 = ($74|0)==($70|0);
								if (!($75)) {
									HEAP32[$73>>2] = $70;
								}
								__ZdlPv($70);
							}
							$72 = ($68|0)==($65|0);
							if ($72) {
								break;
							} else {
								$69 = $68;
							}
						}
						HEAP32[$38>>2] = $65;
					}
					$76 = HEAP32[$__v>>2]|0;
					$77 = ($76|0)==(0|0);
					if ($77) {
						___resumeException($63|0);
						// unreachable;
					}
					__ZdlPv($76);
					___resumeException($63|0);
					// unreachable;
				} else {
					$50 = HEAP32[$39>>2]|0;
					$51 = HEAP32[$38>>2]|0;
					$52 = ($51|0)==($50|0);
					if (!($52)) {
						$54 = $51;
						while(1) {
							$53 = ((($54)) + -12|0);
							$55 = HEAP32[$53>>2]|0;
							$56 = ($55|0)==(0|0);
							if (!($56)) {
								$58 = ((($54)) + -8|0);
								$59 = HEAP32[$58>>2]|0;
								$60 = ($59|0)==($55|0);
								if (!($60)) {
									HEAP32[$58>>2] = $55;
								}
								__ZdlPv($55);
							}
							$57 = ($53|0)==($50|0);
							if ($57) {
								break;
							} else {
								$54 = $53;
							}
						}
						HEAP32[$38>>2] = $50;
					}
					$61 = HEAP32[$__v>>2]|0;
					$62 = ($61|0)==(0|0);
					if (!($62)) {
						__ZdlPv($61);
					}
					STACKTOP = sp;return;
				}
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($this,$__v) {
				$this = $this|0;
				$__v = $__v|0;
				var $$01$i$i$i$i = 0, $$02$i = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa27 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($this)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ((($__v)) + 4|0);
				$4 = ($2|0)==($0|0);
				do {
					if ($4) {
						$5 = $0;
						$$pre8 = HEAP32[$3>>2]|0;
						$$pre$phi11Z2D = $3;$$pre$phiZ2D = $this;$43 = $$pre8;$44 = $5;
					} else {
						$$pre$i = HEAP32[$3>>2]|0;
						$$02$i = $2;$7 = $$pre$i;
						while(1) {
							$6 = ((($7)) + -12|0);
							$8 = ((($$02$i)) + -12|0);
							HEAP32[$6>>2] = 0;
							$9 = ((($7)) + -8|0);
							HEAP32[$9>>2] = 0;
							$10 = ((($7)) + -4|0);
							HEAP32[$10>>2] = 0;
							$11 = ((($$02$i)) + -8|0);
							$12 = HEAP32[$11>>2]|0;
							$13 = HEAP32[$8>>2]|0;
							$14 = (($12) - ($13))|0;
							$15 = ($12|0)==($13|0);
							if (!($15)) {
								$16 = ($14|0)<(0);
								if ($16) {
									__THREW__ = 0;
									invoke_vi(46,($6|0));
									$17 = __THREW__; __THREW__ = 0;
									$18 = $17&1;
									if ($18) {
										$$lcssa = $6;$$lcssa25 = $9;
										break;
									}
								}
								__THREW__ = 0;
								$19 = (invoke_ii(29,($14|0))|0);
								$20 = __THREW__; __THREW__ = 0;
								$21 = $20&1;
								if ($21) {
									$$lcssa = $6;$$lcssa25 = $9;
									break;
								}
								HEAP32[$9>>2] = $19;
								HEAP32[$6>>2] = $19;
								$22 = (($19) + ($14)|0);
								$23 = ((($7)) + -4|0);
								HEAP32[$23>>2] = $22;
								$24 = HEAP32[$8>>2]|0;
								$25 = HEAP32[$11>>2]|0;
								$26 = ($24|0)==($25|0);
								if (!($26)) {
									$$01$i$i$i$i = $24;$28 = $19;
									while(1) {
										$27 = HEAP8[$$01$i$i$i$i>>0]|0;
										HEAP8[$28>>0] = $27;
										$29 = HEAP32[$9>>2]|0;
										$30 = ((($29)) + 1|0);
										HEAP32[$9>>2] = $30;
										$31 = ((($$01$i$i$i$i)) + 1|0);
										$32 = ($31|0)==($25|0);
										if ($32) {
											break;
										} else {
											$$01$i$i$i$i = $31;$28 = $30;
										}
									}
								}
							}
							$39 = HEAP32[$3>>2]|0;
							$40 = ((($39)) + -12|0);
							HEAP32[$3>>2] = $40;
							$41 = ($8|0)==($0|0);
							if ($41) {
								$$lcssa27 = $40;
								label = 16;
								break;
							} else {
								$$02$i = $8;$7 = $40;
							}
						}
						if ((label|0) == 16) {
							$42 = $$lcssa27;
							$$pre = HEAP32[$this>>2]|0;
							$$pre$phi11Z2D = $3;$$pre$phiZ2D = $this;$43 = $42;$44 = $$pre;
							break;
						}
						$33 = ___cxa_find_matching_catch_2()|0;
						$34 = tempRet0;
						$35 = HEAP32[$$lcssa>>2]|0;
						$36 = ($35|0)==(0|0);
						if ($36) {
							___resumeException($33|0);
							// unreachable;
						}
						$37 = HEAP32[$$lcssa25>>2]|0;
						$38 = ($37|0)==($35|0);
						if (!($38)) {
							HEAP32[$$lcssa25>>2] = $35;
						}
						__ZdlPv($35);
						___resumeException($33|0);
						// unreachable;
					}
				} while(0);
				HEAP32[$$pre$phiZ2D>>2] = $43;
				HEAP32[$$pre$phi11Z2D>>2] = $44;
				$45 = ((($__v)) + 8|0);
				$46 = HEAP32[$1>>2]|0;
				$47 = HEAP32[$45>>2]|0;
				HEAP32[$1>>2] = $47;
				HEAP32[$45>>2] = $46;
				$48 = ((($this)) + 8|0);
				$49 = ((($__v)) + 12|0);
				$50 = HEAP32[$48>>2]|0;
				$51 = HEAP32[$49>>2]|0;
				HEAP32[$48>>2] = $51;
				HEAP32[$49>>2] = $50;
				$52 = HEAP32[$$pre$phi11Z2D>>2]|0;
				HEAP32[$__v>>2] = $52;
				return;
			}
			function __ZNK10Page_image4saveEP8_IO_FILEc($this,$f,$filetype) {
				$this = $this|0;
				$f = $f|0;
				$filetype = $filetype|0;
				var $$0 = 0, $$byte$0 = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa116 = 0, $$lcssa7 = 0, $$lcssa8 = 0, $$lcssa9 = 0, $$pre = 0, $$pre71 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $$pre75 = 0, $$pre76 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
				var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
				var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
				var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
				var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
				var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
				var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
				var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
				var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
				var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byte$050 = 0, $byte$2 = 0, $byte$2$lcssa = 0, $col$04299 = 0, $col11$016 = 0, $col2$052 = 0, $col4$024 = 0;
				var $col6$034 = 0, $col8$010 = 0, $filetype$off = 0, $mask$051 = 0, $mask$1 = 0, $mask$1$lcssa = 0, $row$046 = 0, $row1$058 = 0, $row10$020 = 0, $row3$030 = 0, $row5$038 = 0, $row7$012 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0;
				var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer22 = sp + 72|0;
				$vararg_buffer17 = sp + 56|0;
				$vararg_buffer12 = sp + 40|0;
				$vararg_buffer9 = sp + 32|0;
				$vararg_buffer6 = sp + 24|0;
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$filetype$off = (($filetype) + -49)<<24>>24;
				$0 = ($filetype$off&255)>(5);
				if ($0) {
					$$0 = 0;
					STACKTOP = sp;return ($$0|0);
				}
				$1 = $filetype << 24 >> 24;
				$2 = ((($this)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$this>>2]|0;
				$5 = (($3) + 1)|0;
				$6 = (($5) - ($4))|0;
				$7 = ((($this)) + 12|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ((($this)) + 4|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = (($8) + 1)|0;
				$12 = (($11) - ($10))|0;
				HEAP32[$vararg_buffer>>2] = $1;
				$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
				HEAP32[$vararg_ptr1>>2] = $6;
				$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
				HEAP32[$vararg_ptr2>>2] = $12;
				(_fprintf($f,1415,$vararg_buffer)|0);
				switch ($filetype<<24>>24) {
					case 49:  {
						$16 = HEAP32[$9>>2]|0;
						$17 = HEAP32[$7>>2]|0;
						$18 = ($16|0)>($17|0);
						if ($18) {
							$$0 = 1;
							STACKTOP = sp;return ($$0|0);
						}
						$19 = ((($this)) + 16|0);
						$20 = ((($this)) + 29|0);
						$row$046 = $16;
						while(1) {
							$21 = HEAP32[$this>>2]|0;
							$22 = HEAP32[$2>>2]|0;
							$23 = ($21|0)>($22|0);
							if (!($23)) {
								$24 = HEAP32[$9>>2]|0;
								$25 = (($row$046) - ($24))|0;
								$26 = HEAP32[$19>>2]|0;
								$27 = (($26) + (($25*12)|0)|0);
								$28 = HEAP32[$27>>2]|0;
								$29 = HEAP8[$28>>0]|0;
								$30 = HEAP8[$20>>0]|0;
								$31 = ($29&255)<=($30&255);
								$32 = $31 ? 49 : 48;
								(_putc($32,$f)|0);
								$33 = HEAP32[$2>>2]|0;
								$34 = ($21|0)<($33|0);
								if ($34) {
									$col$04299 = $21;
									while(1) {
										$38 = (($col$04299) + 1)|0;
										$$pre72 = HEAP32[$this>>2]|0;
										$39 = HEAP32[$9>>2]|0;
										$40 = (($row$046) - ($39))|0;
										$41 = HEAP32[$19>>2]|0;
										$42 = (($38) - ($$pre72))|0;
										$43 = (($41) + (($40*12)|0)|0);
										$44 = HEAP32[$43>>2]|0;
										$45 = (($44) + ($42)|0);
										$46 = HEAP8[$45>>0]|0;
										$47 = HEAP8[$20>>0]|0;
										$48 = ($46&255)<=($47&255);
										$49 = $48 ? 49 : 48;
										(_putc($49,$f)|0);
										$50 = HEAP32[$2>>2]|0;
										$51 = ($38|0)<($50|0);
										if ($51) {
											$col$04299 = $38;
										} else {
											break;
										}
									}
								}
							}
							(_putc(10,$f)|0);
							$35 = (($row$046) + 1)|0;
							$36 = HEAP32[$7>>2]|0;
							$37 = ($row$046|0)<($36|0);
							if ($37) {
								$row$046 = $35;
							} else {
								$$0 = 1;
								break;
							}
						}
						STACKTOP = sp;return ($$0|0);
						break;
					}
					case 52:  {
						$52 = HEAP32[$9>>2]|0;
						$53 = HEAP32[$7>>2]|0;
						$54 = ($52|0)>($53|0);
						if ($54) {
							$$0 = 1;
							STACKTOP = sp;return ($$0|0);
						}
						$55 = ((($this)) + 16|0);
						$56 = ((($this)) + 29|0);
						$row1$058 = $52;
						while(1) {
							$57 = HEAP32[$this>>2]|0;
							$58 = HEAP32[$2>>2]|0;
							$59 = ($57|0)>($58|0);
							if (!($59)) {
								$173 = $58;$65 = $57;$byte$050 = 0;$col2$052 = $57;$mask$051 = -128;
								while(1) {
									$61 = HEAP32[$9>>2]|0;
									$62 = (($row1$058) - ($61))|0;
									$63 = HEAP32[$55>>2]|0;
									$64 = (($col2$052) - ($65))|0;
									$66 = (($63) + (($62*12)|0)|0);
									$67 = HEAP32[$66>>2]|0;
									$68 = (($67) + ($64)|0);
									$69 = HEAP8[$68>>0]|0;
									$70 = HEAP8[$56>>0]|0;
									$71 = ($69&255)<=($70&255);
									$72 = $71 ? $mask$051 : 0;
									$$byte$0 = $72 | $byte$050;
									$73 = ($mask$051&255) >>> 1;
									$74 = ($73<<24>>24)==(0);
									if ($74) {
										$75 = $$byte$0&255;
										(_putc($75,$f)|0);
										$$pre71 = HEAP32[$2>>2]|0;
										$77 = $$pre71;$byte$2 = 0;$mask$1 = -128;
									} else {
										$77 = $173;$byte$2 = $$byte$0;$mask$1 = $73;
									}
									$76 = ($col2$052|0)<($77|0);
									if (!($76)) {
										$byte$2$lcssa = $byte$2;$mask$1$lcssa = $mask$1;
										break;
									}
									$78 = (($col2$052) + 1)|0;
									$$pre = HEAP32[$this>>2]|0;
									$173 = $77;$65 = $$pre;$byte$050 = $byte$2;$col2$052 = $78;$mask$051 = $mask$1;
								}
								$60 = ($mask$1$lcssa<<24>>24)==(-128);
								if (!($60)) {
									$79 = $byte$2$lcssa&255;
									(_putc($79,$f)|0);
								}
							}
							$80 = (($row1$058) + 1)|0;
							$81 = HEAP32[$7>>2]|0;
							$82 = ($row1$058|0)<($81|0);
							if ($82) {
								$row1$058 = $80;
							} else {
								$$0 = 1;
								break;
							}
						}
						STACKTOP = sp;return ($$0|0);
						break;
					}
					default: {
						$13 = ((($this)) + 28|0);
						$14 = HEAP8[$13>>0]|0;
						$15 = $14&255;
						HEAP32[$vararg_buffer3>>2] = $15;
						(_fprintf($f,1426,$vararg_buffer3)|0);
						switch ($filetype<<24>>24) {
							case 51:  {
								$128 = HEAP32[$9>>2]|0;
								$129 = HEAP32[$7>>2]|0;
								$130 = ($128|0)>($129|0);
								if ($130) {
									$$0 = 1;
									STACKTOP = sp;return ($$0|0);
								}
								$131 = ((($this)) + 16|0);
								$row7$012 = $128;
								while(1) {
									$132 = HEAP32[$this>>2]|0;
									$133 = HEAP32[$2>>2]|0;
									$134 = ($132|0)<($133|0);
									$135 = HEAP32[$131>>2]|0;
									$136 = (($135) + (($row7$012*12)|0)|0);
									$137 = HEAP32[$136>>2]|0;
									if ($134) {
										$145 = $137;$col8$010 = $132;
										while(1) {
											$144 = (($145) + ($col8$010)|0);
											$146 = HEAP8[$144>>0]|0;
											$147 = $146&255;
											HEAP32[$vararg_buffer17>>2] = $147;
											$vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
											HEAP32[$vararg_ptr20>>2] = $147;
											$vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
											HEAP32[$vararg_ptr21>>2] = $147;
											(_fprintf($f,1444,$vararg_buffer17)|0);
											$148 = (($col8$010) + 1)|0;
											$149 = HEAP32[$2>>2]|0;
											$150 = ($148|0)<($149|0);
											$151 = HEAP32[$131>>2]|0;
											$152 = (($151) + (($row7$012*12)|0)|0);
											$153 = HEAP32[$152>>2]|0;
											if ($150) {
												$145 = $153;$col8$010 = $148;
											} else {
												$$lcssa = $149;$$lcssa7 = $153;
												break;
											}
										}
									} else {
										$$lcssa = $133;$$lcssa7 = $137;
									}
									$138 = (($$lcssa7) + ($$lcssa)|0);
									$139 = HEAP8[$138>>0]|0;
									$140 = $139&255;
									HEAP32[$vararg_buffer12>>2] = $140;
									$vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
									HEAP32[$vararg_ptr15>>2] = $140;
									$vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
									HEAP32[$vararg_ptr16>>2] = $140;
									(_fprintf($f,1434,$vararg_buffer12)|0);
									$141 = (($row7$012) + 1)|0;
									$142 = HEAP32[$7>>2]|0;
									$143 = ($row7$012|0)<($142|0);
									if ($143) {
										$row7$012 = $141;
									} else {
										$$0 = 1;
										break;
									}
								}
								STACKTOP = sp;return ($$0|0);
								break;
							}
							case 54:  {
								$154 = HEAP32[$9>>2]|0;
								$155 = HEAP32[$7>>2]|0;
								$156 = ($154|0)>($155|0);
								if ($156) {
									$$0 = 1;
									STACKTOP = sp;return ($$0|0);
								}
								$157 = ((($this)) + 16|0);
								$$pre75 = HEAP32[$2>>2]|0;
								$160 = $$pre75;$176 = $155;$row10$020 = $154;
								while(1) {
									$158 = HEAP32[$this>>2]|0;
									$159 = ($158|0)>($160|0);
									if ($159) {
										$163 = $176;$177 = $160;
									} else {
										$col11$016 = $158;
										while(1) {
											$164 = HEAP32[$157>>2]|0;
											$165 = (($164) + (($row10$020*12)|0)|0);
											$166 = HEAP32[$165>>2]|0;
											$167 = (($166) + ($col11$016)|0);
											$168 = HEAP8[$167>>0]|0;
											$169 = $168&255;
											HEAP32[$vararg_buffer22>>2] = $169;
											$vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
											HEAP32[$vararg_ptr25>>2] = $169;
											$vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
											HEAP32[$vararg_ptr26>>2] = $169;
											(_fprintf($f,1454,$vararg_buffer22)|0);
											$170 = (($col11$016) + 1)|0;
											$171 = HEAP32[$2>>2]|0;
											$172 = ($col11$016|0)<($171|0);
											if ($172) {
												$col11$016 = $170;
											} else {
												$$lcssa113 = $171;
												break;
											}
										}
										$$pre76 = HEAP32[$7>>2]|0;
										$163 = $$pre76;$177 = $$lcssa113;
									}
									$161 = (($row10$020) + 1)|0;
									$162 = ($row10$020|0)<($163|0);
									if ($162) {
										$160 = $177;$176 = $163;$row10$020 = $161;
									} else {
										$$0 = 1;
										break;
									}
								}
								STACKTOP = sp;return ($$0|0);
								break;
							}
							case 50:  {
								$83 = HEAP32[$9>>2]|0;
								$84 = HEAP32[$7>>2]|0;
								$85 = ($83|0)>($84|0);
								if ($85) {
									$$0 = 1;
									STACKTOP = sp;return ($$0|0);
								}
								$86 = ((($this)) + 16|0);
								$row3$030 = $83;
								while(1) {
									$87 = HEAP32[$this>>2]|0;
									$88 = HEAP32[$2>>2]|0;
									$89 = ($87|0)<($88|0);
									$90 = HEAP32[$86>>2]|0;
									$91 = (($90) + (($row3$030*12)|0)|0);
									$92 = HEAP32[$91>>2]|0;
									if ($89) {
										$100 = $92;$col4$024 = $87;
										while(1) {
											$99 = (($100) + ($col4$024)|0);
											$101 = HEAP8[$99>>0]|0;
											$102 = $101&255;
											HEAP32[$vararg_buffer9>>2] = $102;
											(_fprintf($f,1430,$vararg_buffer9)|0);
											$103 = (($col4$024) + 1)|0;
											$104 = HEAP32[$2>>2]|0;
											$105 = ($103|0)<($104|0);
											$106 = HEAP32[$86>>2]|0;
											$107 = (($106) + (($row3$030*12)|0)|0);
											$108 = HEAP32[$107>>2]|0;
											if ($105) {
												$100 = $108;$col4$024 = $103;
											} else {
												$$lcssa8 = $104;$$lcssa9 = $108;
												break;
											}
										}
									} else {
										$$lcssa8 = $88;$$lcssa9 = $92;
									}
									$93 = (($$lcssa9) + ($$lcssa8)|0);
									$94 = HEAP8[$93>>0]|0;
									$95 = $94&255;
									HEAP32[$vararg_buffer6>>2] = $95;
									(_fprintf($f,1426,$vararg_buffer6)|0);
									$96 = (($row3$030) + 1)|0;
									$97 = HEAP32[$7>>2]|0;
									$98 = ($row3$030|0)<($97|0);
									if ($98) {
										$row3$030 = $96;
									} else {
										$$0 = 1;
										break;
									}
								}
								STACKTOP = sp;return ($$0|0);
								break;
							}
							case 53:  {
								$109 = HEAP32[$9>>2]|0;
								$110 = HEAP32[$7>>2]|0;
								$111 = ($109|0)>($110|0);
								if ($111) {
									$$0 = 1;
									STACKTOP = sp;return ($$0|0);
								}
								$112 = ((($this)) + 16|0);
								$$pre73 = HEAP32[$2>>2]|0;
								$115 = $$pre73;$174 = $110;$row5$038 = $109;
								while(1) {
									$113 = HEAP32[$this>>2]|0;
									$114 = ($113|0)>($115|0);
									if ($114) {
										$118 = $174;$175 = $115;
									} else {
										$col6$034 = $113;
										while(1) {
											$119 = HEAP32[$112>>2]|0;
											$120 = (($119) + (($row5$038*12)|0)|0);
											$121 = HEAP32[$120>>2]|0;
											$122 = (($121) + ($col6$034)|0);
											$123 = HEAP8[$122>>0]|0;
											$124 = $123&255;
											(_fputc($124,$f)|0);
											$125 = (($col6$034) + 1)|0;
											$126 = HEAP32[$2>>2]|0;
											$127 = ($col6$034|0)<($126|0);
											if ($127) {
												$col6$034 = $125;
											} else {
												$$lcssa116 = $126;
												break;
											}
										}
										$$pre74 = HEAP32[$7>>2]|0;
										$118 = $$pre74;$175 = $$lcssa116;
									}
									$116 = (($row5$038) + 1)|0;
									$117 = ($row5$038|0)<($118|0);
									if ($117) {
										$115 = $175;$174 = $118;$row5$038 = $116;
									} else {
										$$0 = 1;
										break;
									}
								}
								STACKTOP = sp;return ($$0|0);
								break;
							}
							default: {
								$$0 = 1;
								STACKTOP = sp;return ($$0|0);
							}
						}
					}
				}
				return (0)|0;
			}
			function __ZN10Page_imageC2ERK12OCRAD_Pixmapb($this,$image,$invert) {
				$this = $this|0;
				$image = $image|0;
				$invert = $invert|0;
				var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i1$i$i12$us = 0, $$0$i1$i$i35$us = 0, $$0$i1$i$i50$us = 0, $$0$i1$i$i65$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$0$i2$i$i13$us = 0, $$0$i2$i$i36$us = 0, $$0$i2$i$i51$us = 0, $$0$i2$i$i66$us = 0, $$in = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$in$i$i32$us = 0, $$in$i$i47$us = 0, $$in$i$i62$us = 0, $$in$i$i9$us = 0, $$lcssa = 0;
				var $$lcssa200 = 0, $$lcssa201 = 0, $$lcssa202 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i21 = 0, $$pre$i$i$us = 0, $$pre$i$i28$us = 0, $$pre$i$i43$us = 0, $$pre$i$i5$us = 0, $$pre$i$i58$us = 0, $$pre$i$us = 0, $$pre$i24 = 0, $$pre$i30$us = 0, $$pre$i45$us = 0, $$pre$i60$us = 0, $$pre$i7$us = 0, $$pre$phi$i$usZ2D = 0, $$pre$phi$i31$usZ2D = 0;
				var $$pre$phi$i46$usZ2D = 0, $$pre$phi$i61$usZ2D = 0, $$pre$phi$i8$usZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi169Z2D = 0, $$pre$phiZ2D = 0, $$pre166 = 0, $$pre167 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
				var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
				var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
				var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
				var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
				var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
				var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
				var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
				var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
				var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
				var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
				var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
				var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
				var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
				var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
				var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
				var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
				var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
				var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
				var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
				var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
				var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
				var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0111$us = 0, $col10$0119$us = 0;
				var $col13$0135 = 0, $col13$0135$us = 0, $col4$0106$us = 0, $col7$0127$us = 0, $i$0115$us = 0, $i$1110$us = 0, $i11$0139 = 0, $i11$1$lcssa = 0, $i11$1134 = 0, $i11$1134$us = 0, $i2$0107$us = 0, $i2$1105$us = 0, $i5$0131$us = 0, $i5$1126$us = 0, $i8$0123$us = 0, $i8$1118$us = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $not$$us = 0, $row$0142 = 0;
				var $row1$0116$us = 0, $row12$0140 = 0, $row3$0108$us = 0, $row6$0132$us = 0, $row9$0124$us = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($image)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = (($1) + -1)|0;
				$3 = ((($image)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($4) + -1)|0;
				__ZN9RectangleC2Eiiii($this,0,0,$2,$5);
				$6 = ((($this)) + 16|0);
				HEAP32[$6>>2] = 0;
				$7 = ((($this)) + 20|0);
				HEAP32[$7>>2] = 0;
				$8 = ((($this)) + 24|0);
				HEAP32[$8>>2] = 0;
				$9 = ((($this)) + 12|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = ((($this)) + 4|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = (($10) + 1)|0;
				$14 = ($13|0)==($12|0);
				L1: do {
					if ($14) {
						label = 4;
					} else {
						$15 = (($13) - ($12))|0;
						__THREW__ = 0;
						invoke_vii(38,($6|0),($15|0));
						$16 = __THREW__; __THREW__ = 0;
						$17 = $16&1;
						if ($17) {
							$34 = ___cxa_find_matching_catch_2()|0;
							$35 = tempRet0;
							$lpad$phi$index = $34;$lpad$phi$index8 = $35;
							break;
						}
						$$pre = HEAP32[$7>>2]|0;
						$$pre166 = HEAP32[$6>>2]|0;
						$18 = ($$pre|0)==($$pre166|0);
						if ($18) {
							label = 4;
						} else {
							$19 = ((($this)) + 8|0);
							$$in = $$pre166;$row$0142 = 0;
							while(1) {
								$50 = $$in;
								$51 = (($50) + (($row$0142*12)|0)|0);
								$52 = HEAP32[$19>>2]|0;
								$53 = HEAP32[$this>>2]|0;
								$54 = (($52) + 1)|0;
								$55 = (($54) - ($53))|0;
								$56 = (((($50) + (($row$0142*12)|0)|0)) + 8|0);
								$57 = HEAP32[$56>>2]|0;
								$58 = HEAP32[$51>>2]|0;
								$59 = (($57) - ($58))|0;
								$60 = ($59>>>0)<($55>>>0);
								$61 = $58;
								if ($60) {
									$62 = (((($50) + (($row$0142*12)|0)|0)) + 4|0);
									$63 = HEAP32[$62>>2]|0;
									$64 = (($63) - ($58))|0;
									$65 = ($54|0)==($53|0);
									if ($65) {
										$70 = 0;
									} else {
										__THREW__ = 0;
										$66 = (invoke_ii(29,($55|0))|0);
										$67 = __THREW__; __THREW__ = 0;
										$68 = $67&1;
										if ($68) {
											break;
										} else {
											$70 = $66;
										}
									}
									$69 = (($70) + ($64)|0);
									$71 = $69;
									$72 = (($70) + ($55)|0);
									$73 = $72;
									$74 = (0 - ($64))|0;
									$75 = (($69) + ($74)|0);
									$76 = $75;
									_memcpy(($75|0),($61|0),($64|0))|0;
									HEAP32[$51>>2] = $76;
									HEAP32[$62>>2] = $71;
									HEAP32[$56>>2] = $73;
									$77 = ($58|0)==(0);
									if (!($77)) {
										__ZdlPv($61);
									}
								}
								$78 = (($row$0142) + 1)|0;
								$79 = HEAP32[$7>>2]|0;
								$80 = HEAP32[$6>>2]|0;
								$81 = (($79) - ($80))|0;
								$82 = (($81|0) / 12)&-1;
								$83 = ($78>>>0)<($82>>>0);
								if ($83) {
									$$in = $80;$row$0142 = $78;
								} else {
									$$pre$phi169Z2D = $this;$$pre$phiZ2D = $19;
									label = 6;
									break L1;
								}
							}
							$32 = ___cxa_find_matching_catch_2()|0;
							$33 = tempRet0;
							$lpad$phi$index = $32;$lpad$phi$index8 = $33;
						}
					}
				} while(0);
				if ((label|0) == 4) {
					$$pre167 = ((($this)) + 8|0);
					$$pre$phi169Z2D = $this;$$pre$phiZ2D = $$pre167;
					label = 6;
				}
				L19: do {
					if ((label|0) == 6) {
						$20 = HEAP32[$9>>2]|0;
						$21 = HEAP32[$11>>2]|0;
						$22 = (($20) + 1)|0;
						$23 = (($22) - ($21))|0;
						$24 = HEAP32[$$pre$phiZ2D>>2]|0;
						$25 = HEAP32[$$pre$phi169Z2D>>2]|0;
						$26 = (($24) + 1)|0;
						$27 = (($26) - ($25))|0;
						$28 = ((($image)) + 12|0);
						$29 = HEAP32[$28>>2]|0;
						switch ($29|0) {
							case 0:  {
								$84 = ((($this)) + 28|0);
								HEAP8[$84>>0] = 1;
								$85 = ((($this)) + 29|0);
								HEAP8[$85>>0] = 0;
								$86 = ($23|0)>(0);
								if ($invert) {
									if (!($86)) {
										return;
									}
									$144 = ($27|0)>(0);
									if ($144) {
										$i2$0107$us = 0;$row3$0108$us = 0;
									} else {
										return;
									}
									L30: while(1) {
										$col4$0106$us = 0;$i2$1105$us = $i2$0107$us;
										while(1) {
											$145 = HEAP32[$6>>2]|0;
											$146 = (($145) + (($row3$0108$us*12)|0)|0);
											$147 = HEAP32[$image>>2]|0;
											$148 = (($147) + ($i2$1105$us)|0);
											$149 = HEAP8[$148>>0]|0;
											$150 = ($149<<24>>24)!=(0);
											$151 = $150&1;
											$152 = (((($145) + (($row3$0108$us*12)|0)|0)) + 4|0);
											$153 = HEAP32[$152>>2]|0;
											$154 = (((($145) + (($row3$0108$us*12)|0)|0)) + 8|0);
											$155 = HEAP32[$154>>2]|0;
											$156 = ($153|0)==($155|0);
											$157 = $155;
											if ($156) {
												$160 = $153;
												$161 = HEAP32[$146>>2]|0;
												$162 = (($160) - ($161))|0;
												$163 = (($162) + 1)|0;
												$164 = ($163|0)<(0);
												if ($164) {
													__THREW__ = 0;
													invoke_vi(46,($146|0));
													$165 = __THREW__; __THREW__ = 0;
													$166 = $165&1;
													if ($166) {
														label = 61;
														break L30;
													}
													$$pre$i$i43$us = HEAP32[$146>>2]|0;
													$$pre$i45$us = HEAP32[$154>>2]|0;
													$$in$i$i47$us = $$pre$i$i43$us;$$pre$phi$i46$usZ2D = $154;$169 = $$pre$i45$us;
												} else {
													$$in$i$i47$us = $161;$$pre$phi$i46$usZ2D = $154;$169 = $157;
												}
												$167 = $$in$i$i47$us;
												$168 = (($169) - ($$in$i$i47$us))|0;
												$170 = ($168>>>0)<(1073741823);
												if ($170) {
													$173 = $168 << 1;
													$174 = ($173>>>0)<($163>>>0);
													$175 = $174 ? $163 : $173;
													$176 = HEAP32[$152>>2]|0;
													$177 = (($176) - ($$in$i$i47$us))|0;
													$178 = ($175|0)==(0);
													if ($178) {
														$$0$i2$i$i51$us = 0;$183 = 0;$184 = $177;$190 = $176;
													} else {
														$$0$i1$i$i50$us = $175;$460 = $176;$461 = $177;
														label = 55;
													}
												} else {
													$171 = HEAP32[$152>>2]|0;
													$172 = (($171) - ($$in$i$i47$us))|0;
													$$0$i1$i$i50$us = 2147483647;$460 = $171;$461 = $172;
													label = 55;
												}
												if ((label|0) == 55) {
													label = 0;
													__THREW__ = 0;
													$179 = (invoke_ii(29,($$0$i1$i$i50$us|0))|0);
													$180 = __THREW__; __THREW__ = 0;
													$181 = $180&1;
													if ($181) {
														label = 61;
														break L30;
													} else {
														$$0$i2$i$i51$us = $$0$i1$i$i50$us;$183 = $179;$184 = $461;$190 = $460;
													}
												}
												$182 = (($183) + ($184)|0);
												$185 = (($183) + ($$0$i2$i$i51$us)|0);
												$186 = $185;
												HEAP8[$182>>0] = $151;
												$187 = ((($182)) + 1|0);
												$188 = $187;
												$189 = (($190) - ($$in$i$i47$us))|0;
												$191 = (0 - ($189))|0;
												$192 = (($182) + ($191)|0);
												$193 = $192;
												_memcpy(($192|0),($167|0),($189|0))|0;
												HEAP32[$146>>2] = $193;
												HEAP32[$152>>2] = $188;
												HEAP32[$$pre$phi$i46$usZ2D>>2] = $186;
												$194 = ($$in$i$i47$us|0)==(0);
												if (!($194)) {
													__ZdlPv($167);
												}
											} else {
												HEAP8[$153>>0] = $151;
												$158 = HEAP32[$152>>2]|0;
												$159 = ((($158)) + 1|0);
												HEAP32[$152>>2] = $159;
											}
											$195 = (($col4$0106$us) + 1)|0;
											$196 = (($i2$1105$us) + 1)|0;
											$197 = ($195|0)<($27|0);
											if ($197) {
												$col4$0106$us = $195;$i2$1105$us = $196;
											} else {
												$$lcssa = $196;
												break;
											}
										}
										$198 = (($row3$0108$us) + 1)|0;
										$199 = ($198|0)<($23|0);
										if ($199) {
											$i2$0107$us = $$lcssa;$row3$0108$us = $198;
										} else {
											label = 131;
											break;
										}
									}
									if ((label|0) == 61) {
										$200 = ___cxa_find_matching_catch_2()|0;
										$201 = tempRet0;
										$lpad$phi$index = $200;$lpad$phi$index8 = $201;
										break L19;
									}
									else if ((label|0) == 131) {
										return;
									}
								} else {
									if (!($86)) {
										return;
									}
									$87 = ($27|0)>(0);
									if ($87) {
										$i$0115$us = 0;$row1$0116$us = 0;
									} else {
										return;
									}
									L60: while(1) {
										$col$0111$us = 0;$i$1110$us = $i$0115$us;
										while(1) {
											$88 = HEAP32[$6>>2]|0;
											$89 = (($88) + (($row1$0116$us*12)|0)|0);
											$90 = HEAP32[$image>>2]|0;
											$91 = (($90) + ($i$1110$us)|0);
											$92 = HEAP8[$91>>0]|0;
											$not$$us = ($92<<24>>24)==(0);
											$93 = $not$$us&1;
											$94 = (((($88) + (($row1$0116$us*12)|0)|0)) + 4|0);
											$95 = HEAP32[$94>>2]|0;
											$96 = (((($88) + (($row1$0116$us*12)|0)|0)) + 8|0);
											$97 = HEAP32[$96>>2]|0;
											$98 = ($95|0)==($97|0);
											$99 = $97;
											if ($98) {
												$102 = $95;
												$103 = HEAP32[$89>>2]|0;
												$104 = (($102) - ($103))|0;
												$105 = (($104) + 1)|0;
												$106 = ($105|0)<(0);
												if ($106) {
													__THREW__ = 0;
													invoke_vi(46,($89|0));
													$107 = __THREW__; __THREW__ = 0;
													$108 = $107&1;
													if ($108) {
														label = 43;
														break L60;
													}
													$$pre$i$i28$us = HEAP32[$89>>2]|0;
													$$pre$i30$us = HEAP32[$96>>2]|0;
													$$in$i$i32$us = $$pre$i$i28$us;$$pre$phi$i31$usZ2D = $96;$111 = $$pre$i30$us;
												} else {
													$$in$i$i32$us = $103;$$pre$phi$i31$usZ2D = $96;$111 = $99;
												}
												$109 = $$in$i$i32$us;
												$110 = (($111) - ($$in$i$i32$us))|0;
												$112 = ($110>>>0)<(1073741823);
												if ($112) {
													$115 = $110 << 1;
													$116 = ($115>>>0)<($105>>>0);
													$117 = $116 ? $105 : $115;
													$118 = HEAP32[$94>>2]|0;
													$119 = (($118) - ($$in$i$i32$us))|0;
													$120 = ($117|0)==(0);
													if ($120) {
														$$0$i2$i$i36$us = 0;$125 = 0;$126 = $119;$132 = $118;
													} else {
														$$0$i1$i$i35$us = $117;$458 = $118;$459 = $119;
														label = 37;
													}
												} else {
													$113 = HEAP32[$94>>2]|0;
													$114 = (($113) - ($$in$i$i32$us))|0;
													$$0$i1$i$i35$us = 2147483647;$458 = $113;$459 = $114;
													label = 37;
												}
												if ((label|0) == 37) {
													label = 0;
													__THREW__ = 0;
													$121 = (invoke_ii(29,($$0$i1$i$i35$us|0))|0);
													$122 = __THREW__; __THREW__ = 0;
													$123 = $122&1;
													if ($123) {
														label = 43;
														break L60;
													} else {
														$$0$i2$i$i36$us = $$0$i1$i$i35$us;$125 = $121;$126 = $459;$132 = $458;
													}
												}
												$124 = (($125) + ($126)|0);
												$127 = (($125) + ($$0$i2$i$i36$us)|0);
												$128 = $127;
												HEAP8[$124>>0] = $93;
												$129 = ((($124)) + 1|0);
												$130 = $129;
												$131 = (($132) - ($$in$i$i32$us))|0;
												$133 = (0 - ($131))|0;
												$134 = (($124) + ($133)|0);
												$135 = $134;
												_memcpy(($134|0),($109|0),($131|0))|0;
												HEAP32[$89>>2] = $135;
												HEAP32[$94>>2] = $130;
												HEAP32[$$pre$phi$i31$usZ2D>>2] = $128;
												$136 = ($$in$i$i32$us|0)==(0);
												if (!($136)) {
													__ZdlPv($109);
												}
											} else {
												HEAP8[$95>>0] = $93;
												$100 = HEAP32[$94>>2]|0;
												$101 = ((($100)) + 1|0);
												HEAP32[$94>>2] = $101;
											}
											$137 = (($col$0111$us) + 1)|0;
											$138 = (($i$1110$us) + 1)|0;
											$139 = ($137|0)<($27|0);
											if ($139) {
												$col$0111$us = $137;$i$1110$us = $138;
											} else {
												$$lcssa200 = $138;
												break;
											}
										}
										$140 = (($row1$0116$us) + 1)|0;
										$141 = ($140|0)<($23|0);
										if ($141) {
											$i$0115$us = $$lcssa200;$row1$0116$us = $140;
										} else {
											label = 131;
											break;
										}
									}
									if ((label|0) == 43) {
										$142 = ___cxa_find_matching_catch_2()|0;
										$143 = tempRet0;
										$lpad$phi$index = $142;$lpad$phi$index8 = $143;
										break L19;
									}
									else if ((label|0) == 131) {
										return;
									}
								}
								break;
							}
							case 1:  {
								$202 = ((($this)) + 28|0);
								HEAP8[$202>>0] = -1;
								$203 = ((($this)) + 29|0);
								HEAP8[$203>>0] = 127;
								$204 = ($23|0)>(0);
								if ($invert) {
									if (!($204)) {
										return;
									}
									$262 = ($27|0)>(0);
									if ($262) {
										$i8$0123$us = 0;$row9$0124$us = 0;
									} else {
										return;
									}
									L92: while(1) {
										$col10$0119$us = 0;$i8$1118$us = $i8$0123$us;
										while(1) {
											$263 = HEAP32[$6>>2]|0;
											$264 = (($263) + (($row9$0124$us*12)|0)|0);
											$265 = HEAP8[$202>>0]|0;
											$266 = $265&255;
											$267 = HEAP32[$image>>2]|0;
											$268 = (($267) + ($i8$1118$us)|0);
											$269 = HEAP8[$268>>0]|0;
											$270 = $269&255;
											$271 = (($266) - ($270))|0;
											$272 = $271&255;
											$273 = (((($263) + (($row9$0124$us*12)|0)|0)) + 4|0);
											$274 = HEAP32[$273>>2]|0;
											$275 = (((($263) + (($row9$0124$us*12)|0)|0)) + 8|0);
											$276 = HEAP32[$275>>2]|0;
											$277 = ($274|0)==($276|0);
											$278 = $276;
											if ($277) {
												$281 = $274;
												$282 = HEAP32[$264>>2]|0;
												$283 = (($281) - ($282))|0;
												$284 = (($283) + 1)|0;
												$285 = ($284|0)<(0);
												if ($285) {
													__THREW__ = 0;
													invoke_vi(46,($264|0));
													$286 = __THREW__; __THREW__ = 0;
													$287 = $286&1;
													if ($287) {
														label = 98;
														break L92;
													}
													$$pre$i$i5$us = HEAP32[$264>>2]|0;
													$$pre$i7$us = HEAP32[$275>>2]|0;
													$$in$i$i9$us = $$pre$i$i5$us;$$pre$phi$i8$usZ2D = $275;$290 = $$pre$i7$us;
												} else {
													$$in$i$i9$us = $282;$$pre$phi$i8$usZ2D = $275;$290 = $278;
												}
												$288 = $$in$i$i9$us;
												$289 = (($290) - ($$in$i$i9$us))|0;
												$291 = ($289>>>0)<(1073741823);
												if ($291) {
													$294 = $289 << 1;
													$295 = ($294>>>0)<($284>>>0);
													$296 = $295 ? $284 : $294;
													$297 = HEAP32[$273>>2]|0;
													$298 = (($297) - ($$in$i$i9$us))|0;
													$299 = ($296|0)==(0);
													if ($299) {
														$$0$i2$i$i13$us = 0;$304 = 0;$305 = $298;$311 = $297;
													} else {
														$$0$i1$i$i12$us = $296;$464 = $297;$465 = $298;
														label = 92;
													}
												} else {
													$292 = HEAP32[$273>>2]|0;
													$293 = (($292) - ($$in$i$i9$us))|0;
													$$0$i1$i$i12$us = 2147483647;$464 = $292;$465 = $293;
													label = 92;
												}
												if ((label|0) == 92) {
													label = 0;
													__THREW__ = 0;
													$300 = (invoke_ii(29,($$0$i1$i$i12$us|0))|0);
													$301 = __THREW__; __THREW__ = 0;
													$302 = $301&1;
													if ($302) {
														label = 98;
														break L92;
													} else {
														$$0$i2$i$i13$us = $$0$i1$i$i12$us;$304 = $300;$305 = $465;$311 = $464;
													}
												}
												$303 = (($304) + ($305)|0);
												$306 = (($304) + ($$0$i2$i$i13$us)|0);
												$307 = $306;
												HEAP8[$303>>0] = $272;
												$308 = ((($303)) + 1|0);
												$309 = $308;
												$310 = (($311) - ($$in$i$i9$us))|0;
												$312 = (0 - ($310))|0;
												$313 = (($303) + ($312)|0);
												$314 = $313;
												_memcpy(($313|0),($288|0),($310|0))|0;
												HEAP32[$264>>2] = $314;
												HEAP32[$273>>2] = $309;
												HEAP32[$$pre$phi$i8$usZ2D>>2] = $307;
												$315 = ($$in$i$i9$us|0)==(0);
												if (!($315)) {
													__ZdlPv($288);
												}
											} else {
												HEAP8[$274>>0] = $272;
												$279 = HEAP32[$273>>2]|0;
												$280 = ((($279)) + 1|0);
												HEAP32[$273>>2] = $280;
											}
											$316 = (($col10$0119$us) + 1)|0;
											$317 = (($i8$1118$us) + 1)|0;
											$318 = ($316|0)<($27|0);
											if ($318) {
												$col10$0119$us = $316;$i8$1118$us = $317;
											} else {
												$$lcssa201 = $317;
												break;
											}
										}
										$319 = (($row9$0124$us) + 1)|0;
										$320 = ($319|0)<($23|0);
										if ($320) {
											$i8$0123$us = $$lcssa201;$row9$0124$us = $319;
										} else {
											label = 131;
											break;
										}
									}
									if ((label|0) == 98) {
										$321 = ___cxa_find_matching_catch_2()|0;
										$322 = tempRet0;
										$lpad$phi$index = $321;$lpad$phi$index8 = $322;
										break L19;
									}
									else if ((label|0) == 131) {
										return;
									}
								} else {
									if (!($204)) {
										return;
									}
									$205 = ($27|0)>(0);
									if ($205) {
										$i5$0131$us = 0;$row6$0132$us = 0;
									} else {
										return;
									}
									L122: while(1) {
										$col7$0127$us = 0;$i5$1126$us = $i5$0131$us;
										while(1) {
											$206 = HEAP32[$6>>2]|0;
											$207 = (($206) + (($row6$0132$us*12)|0)|0);
											$208 = HEAP32[$image>>2]|0;
											$209 = (($208) + ($i5$1126$us)|0);
											$210 = (((($206) + (($row6$0132$us*12)|0)|0)) + 4|0);
											$211 = HEAP32[$210>>2]|0;
											$212 = (((($206) + (($row6$0132$us*12)|0)|0)) + 8|0);
											$213 = HEAP32[$212>>2]|0;
											$214 = ($211|0)==($213|0);
											$215 = $213;
											if ($214) {
												$219 = $211;
												$220 = HEAP32[$207>>2]|0;
												$221 = (($219) - ($220))|0;
												$222 = (($221) + 1)|0;
												$223 = ($222|0)<(0);
												if ($223) {
													__THREW__ = 0;
													invoke_vi(46,($207|0));
													$224 = __THREW__; __THREW__ = 0;
													$225 = $224&1;
													if ($225) {
														label = 80;
														break L122;
													}
													$$pre$i$i58$us = HEAP32[$207>>2]|0;
													$$pre$i60$us = HEAP32[$212>>2]|0;
													$$in$i$i62$us = $$pre$i$i58$us;$$pre$phi$i61$usZ2D = $212;$228 = $$pre$i60$us;
												} else {
													$$in$i$i62$us = $220;$$pre$phi$i61$usZ2D = $212;$228 = $215;
												}
												$226 = $$in$i$i62$us;
												$227 = (($228) - ($$in$i$i62$us))|0;
												$229 = ($227>>>0)<(1073741823);
												if ($229) {
													$232 = $227 << 1;
													$233 = ($232>>>0)<($222>>>0);
													$234 = $233 ? $222 : $232;
													$235 = HEAP32[$210>>2]|0;
													$236 = (($235) - ($$in$i$i62$us))|0;
													$237 = ($234|0)==(0);
													if ($237) {
														$$0$i2$i$i66$us = 0;$242 = 0;$243 = $236;$250 = $235;
													} else {
														$$0$i1$i$i65$us = $234;$462 = $235;$463 = $236;
														label = 74;
													}
												} else {
													$230 = HEAP32[$210>>2]|0;
													$231 = (($230) - ($$in$i$i62$us))|0;
													$$0$i1$i$i65$us = 2147483647;$462 = $230;$463 = $231;
													label = 74;
												}
												if ((label|0) == 74) {
													label = 0;
													__THREW__ = 0;
													$238 = (invoke_ii(29,($$0$i1$i$i65$us|0))|0);
													$239 = __THREW__; __THREW__ = 0;
													$240 = $239&1;
													if ($240) {
														label = 80;
														break L122;
													} else {
														$$0$i2$i$i66$us = $$0$i1$i$i65$us;$242 = $238;$243 = $463;$250 = $462;
													}
												}
												$241 = (($242) + ($243)|0);
												$244 = (($242) + ($$0$i2$i$i66$us)|0);
												$245 = $244;
												$246 = HEAP8[$209>>0]|0;
												HEAP8[$241>>0] = $246;
												$247 = ((($241)) + 1|0);
												$248 = $247;
												$249 = (($250) - ($$in$i$i62$us))|0;
												$251 = (0 - ($249))|0;
												$252 = (($241) + ($251)|0);
												$253 = $252;
												_memcpy(($252|0),($226|0),($249|0))|0;
												HEAP32[$207>>2] = $253;
												HEAP32[$210>>2] = $248;
												HEAP32[$$pre$phi$i61$usZ2D>>2] = $245;
												$254 = ($$in$i$i62$us|0)==(0);
												if (!($254)) {
													__ZdlPv($226);
												}
											} else {
												$216 = HEAP8[$209>>0]|0;
												HEAP8[$211>>0] = $216;
												$217 = HEAP32[$210>>2]|0;
												$218 = ((($217)) + 1|0);
												HEAP32[$210>>2] = $218;
											}
											$255 = (($col7$0127$us) + 1)|0;
											$256 = (($i5$1126$us) + 1)|0;
											$257 = ($255|0)<($27|0);
											if ($257) {
												$col7$0127$us = $255;$i5$1126$us = $256;
											} else {
												$$lcssa202 = $256;
												break;
											}
										}
										$258 = (($row6$0132$us) + 1)|0;
										$259 = ($258|0)<($23|0);
										if ($259) {
											$i5$0131$us = $$lcssa202;$row6$0132$us = $258;
										} else {
											label = 131;
											break;
										}
									}
									if ((label|0) == 80) {
										$260 = ___cxa_find_matching_catch_2()|0;
										$261 = tempRet0;
										$lpad$phi$index = $260;$lpad$phi$index8 = $261;
										break L19;
									}
									else if ((label|0) == 131) {
										return;
									}
								}
								break;
							}
							case 2:  {
								$323 = ((($this)) + 28|0);
								HEAP8[$323>>0] = -1;
								$324 = ((($this)) + 29|0);
								HEAP8[$324>>0] = 127;
								$325 = ($23|0)>(0);
								if (!($325)) {
									return;
								}
								$326 = ($27|0)>(0);
								$i11$0139 = 0;$row12$0140 = 0;
								L150: while(1) {
									if ($326) {
										if ($invert) {
											$col13$0135$us = 0;$i11$1134$us = $i11$0139;
											while(1) {
												$327 = HEAP32[$image>>2]|0;
												$328 = (($327) + ($i11$1134$us)|0);
												$329 = HEAP8[$328>>0]|0;
												$330 = (($i11$1134$us) + 1)|0;
												$331 = (($327) + ($330)|0);
												$332 = HEAP8[$331>>0]|0;
												$333 = (($i11$1134$us) + 2)|0;
												$334 = (($327) + ($333)|0);
												$335 = HEAP8[$334>>0]|0;
												$336 = HEAP8[$323>>0]|0;
												$337 = $336&255;
												$338 = ($332&255)<($335&255);
												$339 = $338 ? $335 : $332;
												$340 = ($329&255)<($339&255);
												$341 = $340 ? $339 : $329;
												$342 = $341&255;
												$343 = (($337) - ($342))|0;
												$344 = $343&255;
												$345 = HEAP32[$6>>2]|0;
												$346 = (($345) + (($row12$0140*12)|0)|0);
												$347 = (((($345) + (($row12$0140*12)|0)|0)) + 4|0);
												$348 = HEAP32[$347>>2]|0;
												$349 = (((($345) + (($row12$0140*12)|0)|0)) + 8|0);
												$350 = HEAP32[$349>>2]|0;
												$351 = ($348|0)==($350|0);
												$352 = $350;
												if ($351) {
													$355 = $348;
													$356 = HEAP32[$346>>2]|0;
													$357 = (($355) - ($356))|0;
													$358 = (($357) + 1)|0;
													$359 = ($358|0)<(0);
													if ($359) {
														__THREW__ = 0;
														invoke_vi(46,($346|0));
														$360 = __THREW__; __THREW__ = 0;
														$361 = $360&1;
														if ($361) {
															label = 116;
															break L150;
														}
														$$pre$i$i$us = HEAP32[$346>>2]|0;
														$$pre$i$us = HEAP32[$349>>2]|0;
														$$in$i$i$us = $$pre$i$i$us;$$pre$phi$i$usZ2D = $349;$364 = $$pre$i$us;
													} else {
														$$in$i$i$us = $356;$$pre$phi$i$usZ2D = $349;$364 = $352;
													}
													$362 = $$in$i$i$us;
													$363 = (($364) - ($$in$i$i$us))|0;
													$365 = ($363>>>0)<(1073741823);
													if ($365) {
														$368 = $363 << 1;
														$369 = ($368>>>0)<($358>>>0);
														$370 = $369 ? $358 : $368;
														$371 = HEAP32[$347>>2]|0;
														$372 = (($371) - ($$in$i$i$us))|0;
														$373 = ($370|0)==(0);
														if ($373) {
															$$0$i2$i$i$us = 0;$378 = 0;$379 = $372;$385 = $371;
														} else {
															$$0$i1$i$i$us = $370;$466 = $371;$467 = $372;
															label = 112;
														}
													} else {
														$366 = HEAP32[$347>>2]|0;
														$367 = (($366) - ($$in$i$i$us))|0;
														$$0$i1$i$i$us = 2147483647;$466 = $366;$467 = $367;
														label = 112;
													}
													if ((label|0) == 112) {
														label = 0;
														__THREW__ = 0;
														$374 = (invoke_ii(29,($$0$i1$i$i$us|0))|0);
														$375 = __THREW__; __THREW__ = 0;
														$376 = $375&1;
														if ($376) {
															label = 116;
															break L150;
														} else {
															$$0$i2$i$i$us = $$0$i1$i$i$us;$378 = $374;$379 = $467;$385 = $466;
														}
													}
													$377 = (($378) + ($379)|0);
													$380 = (($378) + ($$0$i2$i$i$us)|0);
													$381 = $380;
													HEAP8[$377>>0] = $344;
													$382 = ((($377)) + 1|0);
													$383 = $382;
													$384 = (($385) - ($$in$i$i$us))|0;
													$386 = (0 - ($384))|0;
													$387 = (($377) + ($386)|0);
													$388 = $387;
													_memcpy(($387|0),($362|0),($384|0))|0;
													HEAP32[$346>>2] = $388;
													HEAP32[$347>>2] = $383;
													HEAP32[$$pre$phi$i$usZ2D>>2] = $381;
													$389 = ($$in$i$i$us|0)==(0);
													if (!($389)) {
														__ZdlPv($362);
													}
												} else {
													HEAP8[$348>>0] = $344;
													$353 = HEAP32[$347>>2]|0;
													$354 = ((($353)) + 1|0);
													HEAP32[$347>>2] = $354;
												}
												$390 = (($col13$0135$us) + 1)|0;
												$391 = (($i11$1134$us) + 3)|0;
												$392 = ($390|0)<($27|0);
												if ($392) {
													$col13$0135$us = $390;$i11$1134$us = $391;
												} else {
													$i11$1$lcssa = $391;
													break;
												}
											}
										} else {
											$col13$0135 = 0;$i11$1134 = $i11$0139;
											while(1) {
												$397 = HEAP32[$image>>2]|0;
												$398 = (($397) + ($i11$1134)|0);
												$399 = HEAP8[$398>>0]|0;
												$400 = (($i11$1134) + 1)|0;
												$401 = (($397) + ($400)|0);
												$402 = HEAP8[$401>>0]|0;
												$403 = (($i11$1134) + 2)|0;
												$404 = (($397) + ($403)|0);
												$405 = HEAP8[$404>>0]|0;
												$406 = ($405&255)<($402&255);
												$407 = $406 ? $405 : $402;
												$408 = ($407&255)<($399&255);
												$409 = $408 ? $407 : $399;
												$410 = HEAP32[$6>>2]|0;
												$411 = (($410) + (($row12$0140*12)|0)|0);
												$412 = (((($410) + (($row12$0140*12)|0)|0)) + 4|0);
												$413 = HEAP32[$412>>2]|0;
												$414 = (((($410) + (($row12$0140*12)|0)|0)) + 8|0);
												$415 = HEAP32[$414>>2]|0;
												$416 = ($413|0)==($415|0);
												$417 = $415;
												if ($416) {
													$420 = $413;
													$421 = HEAP32[$411>>2]|0;
													$422 = (($420) - ($421))|0;
													$423 = (($422) + 1)|0;
													$424 = ($423|0)<(0);
													if ($424) {
														__THREW__ = 0;
														invoke_vi(46,($411|0));
														$425 = __THREW__; __THREW__ = 0;
														$426 = $425&1;
														if ($426) {
															label = 7;
															break L150;
														}
														$$pre$i$i = HEAP32[$411>>2]|0;
														$$pre$i = HEAP32[$414>>2]|0;
														$$in$i$i = $$pre$i$i;$$pre$phi$iZ2D = $414;$429 = $$pre$i;
													} else {
														$$in$i$i = $421;$$pre$phi$iZ2D = $414;$429 = $417;
													}
													$427 = $$in$i$i;
													$428 = (($429) - ($$in$i$i))|0;
													$430 = ($428>>>0)<(1073741823);
													if ($430) {
														$433 = $428 << 1;
														$434 = ($433>>>0)<($423>>>0);
														$435 = $434 ? $423 : $433;
														$436 = HEAP32[$412>>2]|0;
														$437 = (($436) - ($$in$i$i))|0;
														$438 = ($435|0)==(0);
														if ($438) {
															$$0$i2$i$i = 0;$443 = 0;$444 = $437;$450 = $436;
														} else {
															$$0$i1$i$i = $435;$468 = $436;$469 = $437;
															label = 127;
														}
													} else {
														$431 = HEAP32[$412>>2]|0;
														$432 = (($431) - ($$in$i$i))|0;
														$$0$i1$i$i = 2147483647;$468 = $431;$469 = $432;
														label = 127;
													}
													if ((label|0) == 127) {
														label = 0;
														__THREW__ = 0;
														$439 = (invoke_ii(29,($$0$i1$i$i|0))|0);
														$440 = __THREW__; __THREW__ = 0;
														$441 = $440&1;
														if ($441) {
															label = 7;
															break L150;
														} else {
															$$0$i2$i$i = $$0$i1$i$i;$443 = $439;$444 = $469;$450 = $468;
														}
													}
													$442 = (($443) + ($444)|0);
													$445 = (($443) + ($$0$i2$i$i)|0);
													$446 = $445;
													HEAP8[$442>>0] = $409;
													$447 = ((($442)) + 1|0);
													$448 = $447;
													$449 = (($450) - ($$in$i$i))|0;
													$451 = (0 - ($449))|0;
													$452 = (($442) + ($451)|0);
													$453 = $452;
													_memcpy(($452|0),($427|0),($449|0))|0;
													HEAP32[$411>>2] = $453;
													HEAP32[$412>>2] = $448;
													HEAP32[$$pre$phi$iZ2D>>2] = $446;
													$454 = ($$in$i$i|0)==(0);
													if (!($454)) {
														__ZdlPv($427);
													}
												} else {
													HEAP8[$413>>0] = $409;
													$418 = HEAP32[$412>>2]|0;
													$419 = ((($418)) + 1|0);
													HEAP32[$412>>2] = $419;
												}
												$455 = (($col13$0135) + 1)|0;
												$456 = (($i11$1134) + 3)|0;
												$457 = ($455|0)<($27|0);
												if ($457) {
													$col13$0135 = $455;$i11$1134 = $456;
												} else {
													$i11$1$lcssa = $456;
													break;
												}
											}
										}
									} else {
										$i11$1$lcssa = $i11$0139;
									}
									$395 = (($row12$0140) + 1)|0;
									$396 = ($395|0)<($23|0);
									if ($396) {
										$i11$0139 = $i11$1$lcssa;$row12$0140 = $395;
									} else {
										label = 131;
										break;
									}
								}
								if ((label|0) == 7) {
									$30 = ___cxa_find_matching_catch_2()|0;
									$31 = tempRet0;
									$lpad$phi$index = $30;$lpad$phi$index8 = $31;
									break L19;
								}
								else if ((label|0) == 116) {
									$393 = ___cxa_find_matching_catch_2()|0;
									$394 = tempRet0;
									$lpad$phi$index = $393;$lpad$phi$index8 = $394;
									break L19;
								}
								else if ((label|0) == 131) {
									return;
								}
								break;
							}
							default: {
								return;
							}
						}
					}
				} while(0);
				$36 = HEAP32[$6>>2]|0;
				$37 = ($36|0)==(0|0);
				if ($37) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$38 = HEAP32[$7>>2]|0;
				$39 = ($38|0)==($36|0);
				if ($39) {
					$49 = $36;
				} else {
					$41 = $38;
					while(1) {
						$40 = ((($41)) + -12|0);
						HEAP32[$7>>2] = $40;
						$42 = HEAP32[$40>>2]|0;
						$43 = ($42|0)==(0|0);
						if ($43) {
							$44 = $40;
						} else {
							$46 = ((($41)) + -8|0);
							$47 = HEAP32[$46>>2]|0;
							$48 = ($47|0)==($42|0);
							if (!($48)) {
								HEAP32[$46>>2] = $42;
							}
							__ZdlPv($42);
							$$pre$i$i$i21 = HEAP32[$7>>2]|0;
							$44 = $$pre$i$i$i21;
						}
						$45 = ($44|0)==($36|0);
						if ($45) {
							break;
						} else {
							$41 = $44;
						}
					}
					$$pre$i24 = HEAP32[$6>>2]|0;
					$49 = $$pre$i24;
				}
				__ZdlPv($49);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZN10Page_imageC2ERKS_i($this,$source,$scale) {
				$this = $this|0;
				$source = $source|0;
				$scale = $scale|0;
				var $$0$i1$i$i = 0, $$0$i1$i$i$us = 0, $$0$i2$i$i = 0, $$0$i2$i$i$us = 0, $$in$i$i = 0, $$in$i$i$us = 0, $$lcssa74 = 0, $$lcssa74$lcssa = 0, $$phi$trans$insert = 0, $$phi$trans$insert51 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i8 = 0, $$pre$i$i$us = 0, $$pre$i$us = 0, $$pre$i3 = 0, $$pre52 = 0, $$pre53 = 0;
				var $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
				var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
				var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
				var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
				var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
				var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
				var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
				var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
				var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
				var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
				var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
				var $99 = 0, $col$030 = 0, $col$030$us = 0, $i$023$us$us = 0, $j$021$us$us = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $row$034 = 0, $sum$022$us$us = 0, $sum$120$us$us = 0, label = 0, sp = 0;
				sp = STACKTOP;
				;HEAP32[$this>>2]=HEAP32[$source>>2]|0;HEAP32[$this+4>>2]=HEAP32[$source+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$source+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$source+12>>2]|0;
				$0 = ((($this)) + 16|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 20|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($this)) + 24|0);
				HEAP32[$2>>2] = 0;
				$3 = ((($this)) + 28|0);
				$4 = ((($source)) + 28|0);
				$5 = HEAP16[$4>>1]|0;
				$6 = $5&255;
				HEAP8[$3>>0] = $6;
				$7 = ((($this)) + 29|0);
				$8 = ($5&65535) >>> 8;
				$9 = $8&255;
				HEAP8[$7>>0] = $9;
				$10 = ($scale|0)<(2);
				if ($10) {
					label = 4;
				} else {
					$11 = ((($source)) + 8|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = HEAP32[$source>>2]|0;
					$14 = (($12) + 1)|0;
					$15 = (($14) - ($13))|0;
					$16 = ($15|0)<($scale|0);
					if ($16) {
						label = 4;
					} else {
						$17 = ((($source)) + 12|0);
						$18 = HEAP32[$17>>2]|0;
						$19 = ((($source)) + 4|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = (($18) + 1)|0;
						$22 = (($21) - ($20))|0;
						$23 = ($22|0)<($scale|0);
						if ($23) {
							label = 4;
						} else {
							$48 = $18;$50 = $20;
							label = 18;
						}
					}
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					invoke_vi(47,(1464|0));
					$24 = __THREW__; __THREW__ = 0;
					$25 = $24&1;
					if ($25) {
						label = 8;
					} else {
						$$phi$trans$insert = ((($source)) + 12|0);
						$$pre = HEAP32[$$phi$trans$insert>>2]|0;
						$$phi$trans$insert51 = ((($source)) + 4|0);
						$$pre52 = HEAP32[$$phi$trans$insert51>>2]|0;
						$48 = $$pre;$50 = $$pre52;
						label = 18;
					}
				}
				do {
					if ((label|0) == 18) {
						$46 = Math_imul($scale, $scale)|0;
						$47 = (($48) + 1)|0;
						$49 = (($47) - ($50))|0;
						$51 = (($49|0) / ($scale|0))&-1;
						__THREW__ = 0;
						invoke_vii(37,($this|0),($51|0));
						$52 = __THREW__; __THREW__ = 0;
						$53 = $52&1;
						if ($53) {
							label = 8;
						} else {
							$54 = ((($source)) + 8|0);
							$55 = HEAP32[$54>>2]|0;
							$56 = HEAP32[$source>>2]|0;
							$57 = (($55) + 1)|0;
							$58 = (($57) - ($56))|0;
							$59 = (($58|0) / ($scale|0))&-1;
							__THREW__ = 0;
							invoke_vii(36,($this|0),($59|0));
							$60 = __THREW__; __THREW__ = 0;
							$61 = $60&1;
							if ($61) {
								label = 8;
							} else {
								$62 = ((($this)) + 12|0);
								$63 = HEAP32[$62>>2]|0;
								$64 = ((($this)) + 4|0);
								$65 = HEAP32[$64>>2]|0;
								$66 = (($63) + 1)|0;
								$67 = (($66) - ($65))|0;
								$68 = HEAP32[$1>>2]|0;
								$69 = HEAP32[$0>>2]|0;
								$70 = (($68) - ($69))|0;
								$71 = (($70|0) / 12)&-1;
								$72 = ($67>>>0)>($71>>>0);
								$73 = $69;
								$74 = $68;
								if ($72) {
									$75 = (($67) - ($71))|0;
									__THREW__ = 0;
									invoke_vii(38,($0|0),($75|0));
									$76 = __THREW__; __THREW__ = 0;
									$77 = $76&1;
									if ($77) {
										label = 8;
										break;
									}
								} else {
									$78 = ($67>>>0)<($71>>>0);
									if ($78) {
										$79 = (($73) + (($67*12)|0)|0);
										$80 = ($74|0)==($79|0);
										if (!($80)) {
											$82 = $74;
											while(1) {
												$81 = ((($82)) + -12|0);
												HEAP32[$1>>2] = $81;
												$83 = HEAP32[$81>>2]|0;
												$84 = ($83|0)==(0|0);
												if ($84) {
													$85 = $81;
												} else {
													$95 = ((($82)) + -8|0);
													$96 = HEAP32[$95>>2]|0;
													$97 = ($96|0)==($83|0);
													if (!($97)) {
														HEAP32[$95>>2] = $83;
													}
													__ZdlPv($83);
													$$pre$i$i$i8 = HEAP32[$1>>2]|0;
													$85 = $$pre$i$i$i8;
												}
												$86 = ($85|0)==($79|0);
												if ($86) {
													break;
												} else {
													$82 = $85;
												}
											}
										}
									}
								}
								$87 = HEAP32[$62>>2]|0;
								$88 = HEAP32[$64>>2]|0;
								$89 = (($87) + 1)|0;
								$90 = (($89) - ($88))|0;
								$91 = ($90|0)>(0);
								if (!($91)) {
									return;
								}
								$92 = ((($this)) + 8|0);
								$93 = ((($source)) + 16|0);
								$$pre53 = HEAP32[$92>>2]|0;
								$$pre54 = HEAP32[$this>>2]|0;
								$94 = ($scale|0)>(0);
								$103 = $$pre53;$105 = $$pre54;$row$034 = 0;
								L27: while(1) {
									$98 = Math_imul($row$034, $scale)|0;
									$99 = (($98) + ($scale))|0;
									$100 = HEAP32[$0>>2]|0;
									$101 = (($100) + (($row$034*12)|0)|0);
									$102 = (($103) + 1)|0;
									$104 = (($102) - ($105))|0;
									$106 = (((($100) + (($row$034*12)|0)|0)) + 8|0);
									$107 = HEAP32[$106>>2]|0;
									$108 = HEAP32[$101>>2]|0;
									$109 = (($107) - ($108))|0;
									$110 = ($109>>>0)<($104>>>0);
									$111 = $108;
									if ($110) {
										$112 = (((($100) + (($row$034*12)|0)|0)) + 4|0);
										$113 = HEAP32[$112>>2]|0;
										$114 = (($113) - ($108))|0;
										$115 = ($102|0)==($105|0);
										if ($115) {
											$120 = 0;
										} else {
											__THREW__ = 0;
											$116 = (invoke_ii(29,($104|0))|0);
											$117 = __THREW__; __THREW__ = 0;
											$118 = $117&1;
											if ($118) {
												label = 7;
												break;
											} else {
												$120 = $116;
											}
										}
										$119 = (($120) + ($114)|0);
										$121 = $119;
										$122 = (($120) + ($104)|0);
										$123 = $122;
										$124 = (0 - ($114))|0;
										$125 = (($119) + ($124)|0);
										$126 = $125;
										_memcpy(($125|0),($111|0),($114|0))|0;
										HEAP32[$101>>2] = $126;
										HEAP32[$112>>2] = $121;
										HEAP32[$106>>2] = $123;
										$127 = ($108|0)==(0);
										if ($127) {
											$131 = $103;$133 = $105;
										} else {
											__ZdlPv($111);
											$$pre55 = HEAP32[$92>>2]|0;
											$$pre56 = HEAP32[$this>>2]|0;
											$131 = $$pre55;$133 = $$pre56;
										}
									} else {
										$131 = $103;$133 = $105;
									}
									$128 = HEAP32[$0>>2]|0;
									$129 = (($128) + (($row$034*12)|0)|0);
									$130 = (($131) + 1)|0;
									$132 = (($130) - ($133))|0;
									$134 = ($132|0)>(0);
									L36: do {
										if ($134) {
											$135 = (((($128) + (($row$034*12)|0)|0)) + 4|0);
											$136 = (((($128) + (($row$034*12)|0)|0)) + 8|0);
											if ($94) {
												$col$030$us = 0;
											} else {
												$col$030 = 0;
												while(1) {
													$206 = HEAP32[$135>>2]|0;
													$207 = HEAP32[$136>>2]|0;
													$208 = ($206|0)==($207|0);
													if ($208) {
														$211 = $206;
														$212 = HEAP32[$129>>2]|0;
														$213 = (($211) - ($212))|0;
														$214 = (($213) + 1)|0;
														$215 = ($214|0)<(0);
														if ($215) {
															__THREW__ = 0;
															invoke_vi(46,($129|0));
															$216 = __THREW__; __THREW__ = 0;
															$217 = $216&1;
															if ($217) {
																label = 6;
																break L27;
															}
															$$pre$i$i = HEAP32[$129>>2]|0;
															$$pre$i = HEAP32[$136>>2]|0;
															$$in$i$i = $$pre$i$i;$220 = $$pre$i;
														} else {
															$$in$i$i = $212;$220 = $211;
														}
														$218 = $$in$i$i;
														$219 = (($220) - ($$in$i$i))|0;
														$221 = ($219>>>0)<(1073741823);
														if ($221) {
															$224 = $219 << 1;
															$225 = ($224>>>0)<($214>>>0);
															$226 = $225 ? $214 : $224;
															$227 = HEAP32[$135>>2]|0;
															$228 = (($227) - ($$in$i$i))|0;
															$229 = ($226|0)==(0);
															if ($229) {
																$$0$i2$i$i = 0;$234 = 0;$235 = $228;$241 = $227;
															} else {
																$$0$i1$i$i = $226;$256 = $227;$257 = $228;
																label = 65;
															}
														} else {
															$222 = HEAP32[$135>>2]|0;
															$223 = (($222) - ($$in$i$i))|0;
															$$0$i1$i$i = 2147483647;$256 = $222;$257 = $223;
															label = 65;
														}
														if ((label|0) == 65) {
															label = 0;
															__THREW__ = 0;
															$230 = (invoke_ii(29,($$0$i1$i$i|0))|0);
															$231 = __THREW__; __THREW__ = 0;
															$232 = $231&1;
															if ($232) {
																label = 6;
																break L27;
															} else {
																$$0$i2$i$i = $$0$i1$i$i;$234 = $230;$235 = $257;$241 = $256;
															}
														}
														$233 = (($234) + ($235)|0);
														$236 = (($234) + ($$0$i2$i$i)|0);
														$237 = $236;
														HEAP8[$233>>0] = 0;
														$238 = ((($233)) + 1|0);
														$239 = $238;
														$240 = (($241) - ($$in$i$i))|0;
														$242 = (0 - ($240))|0;
														$243 = (($233) + ($242)|0);
														$244 = $243;
														_memcpy(($243|0),($218|0),($240|0))|0;
														HEAP32[$129>>2] = $244;
														HEAP32[$135>>2] = $239;
														HEAP32[$136>>2] = $237;
														$245 = ($$in$i$i|0)==(0);
														if (!($245)) {
															__ZdlPv($218);
														}
													} else {
														HEAP8[$206>>0] = 0;
														$209 = HEAP32[$135>>2]|0;
														$210 = ((($209)) + 1|0);
														HEAP32[$135>>2] = $210;
													}
													$246 = (($col$030) + 1)|0;
													$247 = HEAP32[$92>>2]|0;
													$248 = HEAP32[$this>>2]|0;
													$249 = (($247) + 1)|0;
													$250 = (($249) - ($248))|0;
													$251 = ($246|0)<($250|0);
													if ($251) {
														$col$030 = $246;
													} else {
														$252 = $248;$253 = $247;
														break L36;
													}
												}
											}
											while(1) {
												$137 = Math_imul($col$030$us, $scale)|0;
												$138 = (($137) + ($scale))|0;
												$139 = HEAP32[$93>>2]|0;
												$i$023$us$us = $98;$sum$022$us$us = 0;
												while(1) {
													$188 = (($139) + (($i$023$us$us*12)|0)|0);
													$189 = HEAP32[$188>>2]|0;
													$j$021$us$us = $137;$sum$120$us$us = $sum$022$us$us;
													while(1) {
														$192 = (($189) + ($j$021$us$us)|0);
														$193 = HEAP8[$192>>0]|0;
														$194 = $193&255;
														$195 = (($194) + ($sum$120$us$us))|0;
														$196 = (($j$021$us$us) + 1)|0;
														$197 = ($196|0)<($138|0);
														if ($197) {
															$j$021$us$us = $196;$sum$120$us$us = $195;
														} else {
															$$lcssa74 = $195;
															break;
														}
													}
													$190 = (($i$023$us$us) + 1)|0;
													$191 = ($190|0)<($99|0);
													if ($191) {
														$i$023$us$us = $190;$sum$022$us$us = $$lcssa74;
													} else {
														$$lcssa74$lcssa = $$lcssa74;
														break;
													}
												}
												$185 = (($$lcssa74$lcssa|0) / ($46|0))&-1;
												$140 = $185&255;
												$141 = HEAP32[$135>>2]|0;
												$186 = HEAP32[$136>>2]|0;
												$187 = ($141|0)==($186|0);
												if ($187) {
													$144 = $141;
													$145 = HEAP32[$129>>2]|0;
													$146 = (($144) - ($145))|0;
													$147 = (($146) + 1)|0;
													$148 = ($147|0)<(0);
													if ($148) {
														__THREW__ = 0;
														invoke_vi(46,($129|0));
														$149 = __THREW__; __THREW__ = 0;
														$150 = $149&1;
														if ($150) {
															label = 55;
															break L27;
														}
														$$pre$i$i$us = HEAP32[$129>>2]|0;
														$$pre$i$us = HEAP32[$136>>2]|0;
														$$in$i$i$us = $$pre$i$i$us;$153 = $$pre$i$us;
													} else {
														$$in$i$i$us = $145;$153 = $144;
													}
													$151 = $$in$i$i$us;
													$152 = (($153) - ($$in$i$i$us))|0;
													$154 = ($152>>>0)<(1073741823);
													if ($154) {
														$157 = $152 << 1;
														$158 = ($157>>>0)<($147>>>0);
														$159 = $158 ? $147 : $157;
														$160 = HEAP32[$135>>2]|0;
														$161 = (($160) - ($$in$i$i$us))|0;
														$162 = ($159|0)==(0);
														if ($162) {
															$$0$i2$i$i$us = 0;$167 = 0;$168 = $161;$174 = $160;
														} else {
															$$0$i1$i$i$us = $159;$254 = $160;$255 = $161;
															label = 47;
														}
													} else {
														$155 = HEAP32[$135>>2]|0;
														$156 = (($155) - ($$in$i$i$us))|0;
														$$0$i1$i$i$us = 2147483647;$254 = $155;$255 = $156;
														label = 47;
													}
													if ((label|0) == 47) {
														label = 0;
														__THREW__ = 0;
														$163 = (invoke_ii(29,($$0$i1$i$i$us|0))|0);
														$164 = __THREW__; __THREW__ = 0;
														$165 = $164&1;
														if ($165) {
															label = 55;
															break L27;
														} else {
															$$0$i2$i$i$us = $$0$i1$i$i$us;$167 = $163;$168 = $255;$174 = $254;
														}
													}
													$166 = (($167) + ($168)|0);
													$169 = (($167) + ($$0$i2$i$i$us)|0);
													$170 = $169;
													HEAP8[$166>>0] = $140;
													$171 = ((($166)) + 1|0);
													$172 = $171;
													$173 = (($174) - ($$in$i$i$us))|0;
													$175 = (0 - ($173))|0;
													$176 = (($166) + ($175)|0);
													$177 = $176;
													_memcpy(($176|0),($151|0),($173|0))|0;
													HEAP32[$129>>2] = $177;
													HEAP32[$135>>2] = $172;
													HEAP32[$136>>2] = $170;
													$178 = ($$in$i$i$us|0)==(0);
													if (!($178)) {
														__ZdlPv($151);
													}
												} else {
													HEAP8[$141>>0] = $140;
													$142 = HEAP32[$135>>2]|0;
													$143 = ((($142)) + 1|0);
													HEAP32[$135>>2] = $143;
												}
												$179 = (($col$030$us) + 1)|0;
												$180 = HEAP32[$92>>2]|0;
												$181 = HEAP32[$this>>2]|0;
												$182 = (($180) + 1)|0;
												$183 = (($182) - ($181))|0;
												$184 = ($179|0)<($183|0);
												if ($184) {
													$col$030$us = $179;
												} else {
													$252 = $181;$253 = $180;
													break;
												}
											}
										} else {
											$252 = $133;$253 = $131;
										}
									} while(0);
									$200 = (($row$034) + 1)|0;
									$201 = HEAP32[$62>>2]|0;
									$202 = HEAP32[$64>>2]|0;
									$203 = (($201) + 1)|0;
									$204 = (($203) - ($202))|0;
									$205 = ($200|0)<($204|0);
									if ($205) {
										$103 = $253;$105 = $252;$row$034 = $200;
									} else {
										label = 31;
										break;
									}
								}
								if ((label|0) == 6) {
									$26 = ___cxa_find_matching_catch_2()|0;
									$27 = tempRet0;
									$lpad$phi$index = $26;$lpad$phi$index4 = $27;
									break;
								}
								else if ((label|0) == 7) {
									$28 = ___cxa_find_matching_catch_2()|0;
									$29 = tempRet0;
									$lpad$phi$index = $28;$lpad$phi$index4 = $29;
									break;
								}
								else if ((label|0) == 31) {
									return;
								}
								else if ((label|0) == 55) {
									$198 = ___cxa_find_matching_catch_2()|0;
									$199 = tempRet0;
									$lpad$phi$index = $198;$lpad$phi$index4 = $199;
									break;
								}
							}
						}
					}
				} while(0);
				if ((label|0) == 8) {
					$30 = ___cxa_find_matching_catch_2()|0;
					$31 = tempRet0;
					$lpad$phi$index = $30;$lpad$phi$index4 = $31;
				}
				$32 = HEAP32[$0>>2]|0;
				$33 = ($32|0)==(0|0);
				if ($33) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$34 = HEAP32[$1>>2]|0;
				$35 = ($34|0)==($32|0);
				if ($35) {
					$45 = $32;
				} else {
					$37 = $34;
					while(1) {
						$36 = ((($37)) + -12|0);
						HEAP32[$1>>2] = $36;
						$38 = HEAP32[$36>>2]|0;
						$39 = ($38|0)==(0|0);
						if ($39) {
							$40 = $36;
						} else {
							$42 = ((($37)) + -8|0);
							$43 = HEAP32[$42>>2]|0;
							$44 = ($43|0)==($38|0);
							if (!($44)) {
								HEAP32[$42>>2] = $38;
							}
							__ZdlPv($38);
							$$pre$i$i$i = HEAP32[$1>>2]|0;
							$40 = $$pre$i$i$i;
						}
						$41 = ($40|0)==($32|0);
						if ($41) {
							break;
						} else {
							$37 = $40;
						}
					}
					$$pre$i3 = HEAP32[$0>>2]|0;
					$45 = $$pre$i3;
				}
				__ZdlPv($45);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZN12_GLOBAL__N_17otsu_thERKNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEERK9Rectanglei($data,$re,$maxval) {
				$data = $data|0;
				$re = $re|0;
				$maxval = $maxval|0;
				var $$0 = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $$pre = 0, $$pre49 = 0, $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0;
				var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
				var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
				var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
				var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
				var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
				var $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
				var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
				var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0;
				var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bvar_max$035 = 0.0;
				var $bvar_max$1 = 0.0, $bvar_max$2 = 0.0, $chist = 0, $cmom = 0, $col$040 = 0, $exitcond = 0, $hist = 0, $i$038 = 0, $i1$037 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $row$044 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i14 = 0, $scevgep$i$i$i19 = 0, $scevgep$i$i$i29 = 0, $scevgep$i$i$i4 = 0, $scevgep$i$i$i9 = 0;
				var $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i10 = 0, $scevgep4$i$i$i15 = 0, $scevgep4$i$i$i20 = 0, $scevgep4$i$i$i30 = 0, $scevgep4$i$i$i5 = 0, $threshold$0$lcssa = 0, $threshold$036 = 0, $threshold$1 = 0, $threshold$2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hist = sp + 44|0;
				$chist = sp + 32|0;
				$cmom = sp + 20|0;
				$0 = sp + 8|0;
				$1 = sp + 16|0;
				$2 = sp;
				$3 = ($maxval|0)==(1);
				if ($3) {
					$$0 = 0;
					STACKTOP = sp;return ($$0|0);
				}
				$4 = (($maxval) + 1)|0;
				HEAP32[$hist>>2] = 0;
				$5 = ((($hist)) + 4|0);
				HEAP32[$5>>2] = 0;
				$6 = ((($hist)) + 8|0);
				HEAP32[$6>>2] = 0;
				$7 = ($4|0)==(0);
				do {
					if ($7) {
						$49 = 0;
					} else {
						$8 = ($4>>>0)>(1073741823);
						if ($8) {
							__THREW__ = 0;
							invoke_vi(46,($hist|0));
							$9 = __THREW__; __THREW__ = 0;
							$10 = $9&1;
							if (!($10)) {
								label = 5;
							}
						} else {
							label = 5;
						}
						if ((label|0) == 5) {
							$11 = $4 << 2;
							__THREW__ = 0;
							$12 = (invoke_ii(29,($11|0))|0);
							$13 = __THREW__; __THREW__ = 0;
							$14 = $13&1;
							if (!($14)) {
								HEAP32[$hist>>2] = $12;
								$15 = (($12) + ($4<<2)|0);
								$16 = ((($hist)) + 8|0);
								HEAP32[$16>>2] = $15;
								$17 = $maxval << 2;
								$18 = (($17) + 4)|0;
								_memset(($12|0),0,($18|0))|0;
								HEAP32[$5>>2] = $15;
								$49 = $12;
								break;
							}
						}
						$19 = ___cxa_find_matching_catch_2()|0;
						$20 = tempRet0;
						$21 = HEAP32[$hist>>2]|0;
						$22 = ($21|0)==(0|0);
						$23 = $21;
						if ($22) {
							___resumeException($19|0);
							// unreachable;
						}
						$24 = HEAP32[$5>>2]|0;
						$25 = ($24|0)==($21|0);
						if (!($25)) {
							$scevgep$i$i$i$i = ((($24)) + -4|0);
							$26 = $scevgep$i$i$i$i;
							$27 = (($26) - ($23))|0;
							$28 = $27 >>> 2;
							$29 = $28 ^ -1;
							$scevgep4$i$i$i$i = (($24) + ($29<<2)|0);
							HEAP32[$5>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($21);
						___resumeException($19|0);
						// unreachable;
					}
				} while(0);
				$30 = ((($re)) + 4|0);
				$31 = HEAP32[$30>>2]|0;
				$32 = ((($re)) + 12|0);
				$33 = HEAP32[$32>>2]|0;
				$34 = ($31|0)>($33|0);
				if (!($34)) {
					$35 = ((($re)) + 8|0);
					$$pre = HEAP32[$35>>2]|0;
					$250 = $33;$38 = $$pre;$row$044 = $31;
					while(1) {
						$36 = HEAP32[$re>>2]|0;
						$37 = ($36|0)>($38|0);
						if ($37) {
							$251 = $38;$41 = $250;
						} else {
							$col$040 = $36;
							while(1) {
								$42 = HEAP32[$data>>2]|0;
								$43 = (($42) + (($row$044*12)|0)|0);
								$44 = HEAP32[$43>>2]|0;
								$45 = (($44) + ($col$040)|0);
								$46 = HEAP8[$45>>0]|0;
								$47 = $46&255;
								$48 = (($49) + ($47<<2)|0);
								$50 = HEAP32[$48>>2]|0;
								$51 = (($50) + 1)|0;
								HEAP32[$48>>2] = $51;
								$52 = (($col$040) + 1)|0;
								$53 = HEAP32[$35>>2]|0;
								$54 = ($col$040|0)<($53|0);
								if ($54) {
									$col$040 = $52;
								} else {
									$$lcssa = $53;
									break;
								}
							}
							$$pre49 = HEAP32[$32>>2]|0;
							$251 = $$lcssa;$41 = $$pre49;
						}
						$39 = (($row$044) + 1)|0;
						$40 = ($row$044|0)<($41|0);
						if ($40) {
							$250 = $41;$38 = $251;$row$044 = $39;
						} else {
							break;
						}
					}
				}
				HEAP32[$chist>>2] = 0;
				$55 = ((($chist)) + 4|0);
				HEAP32[$55>>2] = 0;
				$56 = ((($chist)) + 8|0);
				HEAP32[$56>>2] = 0;
				$57 = ((($chist)) + 8|0);
				$58 = ($4|0)!=(0);
				if ($58) {
					$59 = $4 << 2;
					__THREW__ = 0;
					$60 = (invoke_ii(29,($59|0))|0);
					$61 = __THREW__; __THREW__ = 0;
					$62 = $61&1;
					if ($62) {
						label = 33;
					} else {
						$63 = $60;
						$64 = (($60) + ($4<<2)|0);
						$65 = $64;
						HEAP32[$chist>>2] = $63;
						HEAP32[$55>>2] = $63;
						HEAP32[$57>>2] = $65;
						$66 = ($60|0)==($64|0);
						if ($66) {
							label = 22;
						} else {
							$67 = HEAP32[$49>>2]|0;
							HEAP32[$60>>2] = $67;
							$68 = ((($60)) + 4|0);
							HEAP32[$55>>2] = $68;
							label = 23;
						}
					}
				} else {
					label = 22;
				}
				if ((label|0) == 22) {
					__THREW__ = 0;
					invoke_vii(48,($chist|0),($49|0));
					$69 = __THREW__; __THREW__ = 0;
					$70 = $69&1;
					if ($70) {
						label = 33;
					} else {
						label = 23;
					}
				}
				if ((label|0) == 23) {
					HEAP32[$cmom>>2] = 0;
					$71 = ((($cmom)) + 4|0);
					HEAP32[$71>>2] = 0;
					$72 = ((($cmom)) + 8|0);
					HEAP32[$72>>2] = 0;
					$73 = ((($cmom)) + 8|0);
					if ($58) {
						$78 = $4 << 3;
						__THREW__ = 0;
						$79 = (invoke_ii(29,($78|0))|0);
						$80 = __THREW__; __THREW__ = 0;
						$81 = $80&1;
						if ($81) {
							label = 35;
						} else {
							$82 = $79;
							$83 = (($79) + ($4<<3)|0);
							$84 = $83;
							HEAP32[$cmom>>2] = $82;
							HEAP32[$71>>2] = $82;
							HEAP32[$73>>2] = $84;
							$85 = $0;
							$86 = $85;
							HEAP32[$86>>2] = 0;
							$87 = (($85) + 4)|0;
							$88 = $87;
							HEAP32[$88>>2] = 0;
							$89 = ($79|0)==($83|0);
							if ($89) {
								label = 28;
							} else {
								$90 = $79;
								$91 = $90;
								HEAP32[$91>>2] = 0;
								$92 = (($90) + 4)|0;
								$93 = $92;
								HEAP32[$93>>2] = 0;
								$94 = ((($79)) + 8|0);
								HEAP32[$71>>2] = $94;
								label = 29;
							}
						}
					} else {
						$74 = $0;
						$75 = $74;
						HEAP32[$75>>2] = 0;
						$76 = (($74) + 4)|0;
						$77 = $76;
						HEAP32[$77>>2] = 0;
						label = 28;
					}
					if ((label|0) == 28) {
						__THREW__ = 0;
						invoke_vii(49,($cmom|0),($0|0));
						$95 = __THREW__; __THREW__ = 0;
						$96 = $95&1;
						if ($96) {
							label = 35;
						} else {
							label = 29;
						}
					}
					do {
						if ((label|0) == 29) {
							$97 = ($maxval|0)<(1);
							if ($97) {
								$98 = HEAP32[$cmom>>2]|0;
								$181 = $98;$threshold$0$lcssa = 0;
							} else {
								$i$038 = 1;
								while(1) {
									$135 = (($i$038) + -1)|0;
									$136 = HEAP32[$chist>>2]|0;
									$137 = (($136) + ($135<<2)|0);
									$138 = HEAP32[$137>>2]|0;
									$139 = HEAP32[$hist>>2]|0;
									$140 = (($139) + ($i$038<<2)|0);
									$141 = HEAP32[$140>>2]|0;
									$142 = (($141) + ($138))|0;
									HEAP32[$1>>2] = $142;
									$143 = HEAP32[$55>>2]|0;
									$144 = HEAP32[$57>>2]|0;
									$145 = ($143|0)==($144|0);
									if ($145) {
										__THREW__ = 0;
										invoke_vii(48,($chist|0),($1|0));
										$147 = __THREW__; __THREW__ = 0;
										$148 = $147&1;
										if ($148) {
											label = 34;
											break;
										}
										$$pre50 = HEAP32[$hist>>2]|0;
										$158 = $$pre50;
									} else {
										HEAP32[$143>>2] = $142;
										$146 = ((($143)) + 4|0);
										HEAP32[$55>>2] = $146;
										$158 = $139;
									}
									$149 = HEAP32[$cmom>>2]|0;
									$150 = (($149) + ($135<<3)|0);
									$151 = $150;
									$152 = $151;
									$153 = HEAP32[$152>>2]|0;
									$154 = (($151) + 4)|0;
									$155 = $154;
									$156 = HEAP32[$155>>2]|0;
									$157 = (($158) + ($i$038<<2)|0);
									$159 = HEAP32[$157>>2]|0;
									$160 = Math_imul($159, $i$038)|0;
									$161 = ($160|0)<(0);
									$162 = $161 << 31 >> 31;
									$163 = (_i64Add(($160|0),($162|0),($153|0),($156|0))|0);
									$164 = tempRet0;
									$165 = $2;
									$166 = $165;
									HEAP32[$166>>2] = $163;
									$167 = (($165) + 4)|0;
									$168 = $167;
									HEAP32[$168>>2] = $164;
									$169 = HEAP32[$71>>2]|0;
									$170 = HEAP32[$73>>2]|0;
									$171 = ($169|0)==($170|0);
									if ($171) {
										__THREW__ = 0;
										invoke_vii(49,($cmom|0),($2|0));
										$177 = __THREW__; __THREW__ = 0;
										$178 = $177&1;
										if ($178) {
											label = 34;
											break;
										}
									} else {
										$172 = $169;
										$173 = $172;
										HEAP32[$173>>2] = $163;
										$174 = (($172) + 4)|0;
										$175 = $174;
										HEAP32[$175>>2] = $164;
										$176 = ((($169)) + 8|0);
										HEAP32[$71>>2] = $176;
									}
									$179 = (($i$038) + 1)|0;
									$180 = ($i$038|0)<($maxval|0);
									if ($180) {
										$i$038 = $179;
									} else {
										break;
									}
								}
								if ((label|0) == 34) {
									$122 = ___cxa_find_matching_catch_2()|0;
									$123 = tempRet0;
									$lpad$phi$index = $122;$lpad$phi$index2 = $123;
									break;
								}
								$99 = HEAP32[$cmom>>2]|0;
								$100 = (($99) + ($maxval<<3)|0);
								$101 = $100;
								$102 = $101;
								$103 = HEAP32[$102>>2]|0;
								$104 = (($101) + 4)|0;
								$105 = $104;
								$106 = HEAP32[$105>>2]|0;
								$107 = (+($103>>>0)) + (4294967296.0*(+($106|0)));
								$108 = ($maxval|0)>(0);
								if ($108) {
									$109 = HEAP32[$chist>>2]|0;
									$110 = HEAP32[$30>>2]|0;
									$111 = ((($re)) + 8|0);
									$112 = HEAP32[$111>>2]|0;
									$113 = HEAP32[$re>>2]|0;
									$114 = (($112) + 1)|0;
									$115 = (($114) - ($113))|0;
									$116 = HEAP32[$32>>2]|0;
									$117 = (($116) + 1)|0;
									$118 = (($117) - ($110))|0;
									$119 = Math_imul($115, $118)|0;
									$bvar_max$035 = 0.0;$i1$037 = 0;$threshold$036 = 0;
									while(1) {
										$190 = (($109) + ($i1$037<<2)|0);
										$191 = HEAP32[$190>>2]|0;
										$192 = ($191|0)>(0);
										$193 = ($119|0)>($191|0);
										$or$cond = $192 & $193;
										if ($or$cond) {
											$194 = (($99) + ($i1$037<<3)|0);
											$195 = $194;
											$196 = $195;
											$197 = HEAP32[$196>>2]|0;
											$198 = (($195) + 4)|0;
											$199 = $198;
											$200 = HEAP32[$199>>2]|0;
											$201 = (+($197>>>0)) + (4294967296.0*(+($200|0)));
											$202 = (+($191|0));
											$203 = $201 / $202;
											$204 = $107 - $201;
											$205 = (($119) - ($191))|0;
											$206 = (+($205|0));
											$207 = $204 / $206;
											$208 = $203 - $207;
											$209 = $208 * $208;
											$210 = $202 * $209;
											$211 = $206 * $210;
											$212 = $211 > $bvar_max$035;
											$bvar_max$1 = $212 ? $211 : $bvar_max$035;
											$threshold$1 = $212 ? $i1$037 : $threshold$036;
											$bvar_max$2 = $bvar_max$1;$threshold$2 = $threshold$1;
										} else {
											$bvar_max$2 = $bvar_max$035;$threshold$2 = $threshold$036;
										}
										$213 = (($i1$037) + 1)|0;
										$exitcond = ($213|0)==($maxval|0);
										if ($exitcond) {
											$181 = $99;$threshold$0$lcssa = $threshold$2;
											break;
										} else {
											$bvar_max$035 = $bvar_max$2;$i1$037 = $213;$threshold$036 = $threshold$2;
										}
									}
								} else {
									$181 = $99;$threshold$0$lcssa = 0;
								}
							}
							$182 = ($181|0)==(0|0);
							$183 = $181;
							if (!($182)) {
								$184 = HEAP32[$71>>2]|0;
								$185 = ($184|0)==($181|0);
								if (!($185)) {
									$scevgep$i$i$i19 = ((($184)) + -8|0);
									$186 = $scevgep$i$i$i19;
									$187 = (($186) - ($183))|0;
									$188 = $187 >>> 3;
									$189 = $188 ^ -1;
									$scevgep4$i$i$i20 = (($184) + ($189<<3)|0);
									HEAP32[$71>>2] = $scevgep4$i$i$i20;
								}
								__ZdlPv($181);
							}
							$214 = HEAP32[$chist>>2]|0;
							$215 = ($214|0)==(0|0);
							$216 = $214;
							if (!($215)) {
								$217 = HEAP32[$55>>2]|0;
								$218 = ($217|0)==($214|0);
								if (!($218)) {
									$scevgep$i$i$i14 = ((($217)) + -4|0);
									$219 = $scevgep$i$i$i14;
									$220 = (($219) - ($216))|0;
									$221 = $220 >>> 2;
									$222 = $221 ^ -1;
									$scevgep4$i$i$i15 = (($217) + ($222<<2)|0);
									HEAP32[$55>>2] = $scevgep4$i$i$i15;
								}
								__ZdlPv($214);
							}
							$223 = HEAP32[$hist>>2]|0;
							$224 = ($223|0)==(0|0);
							$225 = $223;
							if (!($224)) {
								$226 = HEAP32[$5>>2]|0;
								$227 = ($226|0)==($223|0);
								if (!($227)) {
									$scevgep$i$i$i9 = ((($226)) + -4|0);
									$228 = $scevgep$i$i$i9;
									$229 = (($228) - ($225))|0;
									$230 = $229 >>> 2;
									$231 = $230 ^ -1;
									$scevgep4$i$i$i10 = (($226) + ($231<<2)|0);
									HEAP32[$5>>2] = $scevgep4$i$i$i10;
								}
								__ZdlPv($223);
							}
							$$0 = $threshold$0$lcssa;
							STACKTOP = sp;return ($$0|0);
						}
						else if ((label|0) == 35) {
							$124 = ___cxa_find_matching_catch_2()|0;
							$125 = tempRet0;
							$lpad$phi$index = $124;$lpad$phi$index2 = $125;
						}
					} while(0);
					$126 = HEAP32[$cmom>>2]|0;
					$127 = ($126|0)==(0|0);
					$128 = $126;
					if ($127) {
						$$01 = $lpad$phi$index2;$$02 = $lpad$phi$index;
					} else {
						$129 = HEAP32[$71>>2]|0;
						$130 = ($129|0)==($126|0);
						if (!($130)) {
							$scevgep$i$i$i29 = ((($129)) + -8|0);
							$131 = $scevgep$i$i$i29;
							$132 = (($131) - ($128))|0;
							$133 = $132 >>> 3;
							$134 = $133 ^ -1;
							$scevgep4$i$i$i30 = (($129) + ($134<<3)|0);
							HEAP32[$71>>2] = $scevgep4$i$i$i30;
						}
						__ZdlPv($126);
						$$01 = $lpad$phi$index2;$$02 = $lpad$phi$index;
					}
				}
				else if ((label|0) == 33) {
					$120 = ___cxa_find_matching_catch_2()|0;
					$121 = tempRet0;
					$$01 = $121;$$02 = $120;
				}
				$232 = HEAP32[$chist>>2]|0;
				$233 = ($232|0)==(0|0);
				$234 = $232;
				if (!($233)) {
					$235 = HEAP32[$55>>2]|0;
					$236 = ($235|0)==($232|0);
					if (!($236)) {
						$scevgep$i$i$i4 = ((($235)) + -4|0);
						$237 = $scevgep$i$i$i4;
						$238 = (($237) - ($234))|0;
						$239 = $238 >>> 2;
						$240 = $239 ^ -1;
						$scevgep4$i$i$i5 = (($235) + ($240<<2)|0);
						HEAP32[$55>>2] = $scevgep4$i$i$i5;
					}
					__ZdlPv($232);
				}
				$241 = HEAP32[$hist>>2]|0;
				$242 = ($241|0)==(0|0);
				$243 = $241;
				if ($242) {
					___resumeException($$02|0);
					// unreachable;
				}
				$244 = HEAP32[$5>>2]|0;
				$245 = ($244|0)==($241|0);
				if (!($245)) {
					$scevgep$i$i$i = ((($244)) + -4|0);
					$246 = $scevgep$i$i$i;
					$247 = (($246) - ($243))|0;
					$248 = $247 >>> 2;
					$249 = $248 ^ -1;
					$scevgep4$i$i$i = (($244) + ($249<<2)|0);
					HEAP32[$5>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($241);
				___resumeException($$02|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(1073741823);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 2;
				$11 = ($10>>>0)<(536870911);
				if ($11) {
					$15 = $9 >> 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
					} else {
						$$0$i1 = $17;$41 = $18;$42 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 2;
					$$0$i1 = 1073741823;$41 = $12;$42 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 2;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
				}
				$24 = (($25) + ($26<<2)|0);
				$27 = (($25) + ($$0$i2<<2)|0);
				$28 = $27;
				$29 = HEAP32[$__x>>2]|0;
				HEAP32[$24>>2] = $29;
				$30 = ((($24)) + 4|0);
				$31 = $30;
				$32 = (($33) - ($$in))|0;
				$34 = $32 >> 2;
				$35 = (0 - ($34))|0;
				$36 = (($24) + ($35<<2)|0);
				$37 = $36;
				$38 = $$in;
				_memcpy(($36|0),($38|0),($32|0))|0;
				HEAP32[$this>>2] = $37;
				HEAP32[$0>>2] = $31;
				HEAP32[$7>>2] = $28;
				$39 = ($$in|0)==(0);
				if ($39) {
					return;
				}
				$40 = $$in;
				__ZdlPv($40);
				return;
			}
			function __ZNSt3__16vectorIxNS_9allocatorIxEEE21__push_back_slow_pathIKxEEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 3;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(536870911);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 3;
				$11 = ($10>>>0)<(268435455);
				if ($11) {
					$15 = $9 >> 2;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 3;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$42 = $18;
					} else {
						$$0$i1 = $17;$50 = $18;$51 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 3;
					$$0$i1 = 536870911;$50 = $12;$51 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 3;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $51;$42 = $50;
				}
				$24 = (($25) + ($26<<3)|0);
				$27 = (($25) + ($$0$i2<<3)|0);
				$28 = $27;
				$29 = $__x;
				$30 = $29;
				$31 = HEAP32[$30>>2]|0;
				$32 = (($29) + 4)|0;
				$33 = $32;
				$34 = HEAP32[$33>>2]|0;
				$35 = $24;
				$36 = $35;
				HEAP32[$36>>2] = $31;
				$37 = (($35) + 4)|0;
				$38 = $37;
				HEAP32[$38>>2] = $34;
				$39 = ((($24)) + 8|0);
				$40 = $39;
				$41 = (($42) - ($$in))|0;
				$43 = $41 >> 3;
				$44 = (0 - ($43))|0;
				$45 = (($24) + ($44<<3)|0);
				$46 = $45;
				$47 = $$in;
				_memcpy(($45|0),($47|0),($41|0))|0;
				HEAP32[$this>>2] = $46;
				HEAP32[$0>>2] = $40;
				HEAP32[$7>>2] = $28;
				$48 = ($$in|0)==(0);
				if ($48) {
					return;
				}
				$49 = $$in;
				__ZdlPv($49);
				return;
			}
			function __ZN10Page_image9thresholdEi($this,$th) {
				$this = $this|0;
				$th = $th|0;
				var $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($th>>>0)<(256);
				$1 = ((($this)) + 28|0);
				$2 = HEAP8[$1>>0]|0;
				if ($0) {
					$3 = $2&255;
					$4 = Math_imul($3, $th)|0;
					$5 = (($4|0) / 255)&-1;
					$$sink$in = $5;
				} else {
					$6 = ((($this)) + 16|0);
					$7 = $2&255;
					$8 = (__ZN12_GLOBAL__N_17otsu_thERKNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEERK9Rectanglei($6,$this,$7)|0);
					$$sink$in = $8;
				}
				$$sink = $$sink$in&255;
				$9 = ((($this)) + 29|0);
				HEAP8[$9>>0] = $$sink;
				return;
			}
			function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i = 0, $$0$i2 = 0, $$0$i34 = 0, $$0$i35 = 0, $$lcssa = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v$sroa$12$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = ($4>>>0)<($__n>>>0);
				if (!($5)) {
					$6 = $3;
					$$0$i = $__n;$7 = $6;
					while(1) {
						HEAP8[$7>>0] = 0;
						$8 = HEAP32[$2>>2]|0;
						$9 = ((($8)) + 1|0);
						HEAP32[$2>>2] = $9;
						$10 = (($$0$i) + -1)|0;
						$11 = ($10|0)==(0);
						if ($11) {
							break;
						} else {
							$$0$i = $10;$7 = $9;
						}
					}
					return;
				}
				$12 = HEAP32[$this>>2]|0;
				$13 = (($3) - ($12))|0;
				$14 = (($13) + ($__n))|0;
				$15 = ($14|0)<(0);
				if ($15) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre6 = HEAP32[$this>>2]|0;
					$17 = $$pre6;$18 = $$pre;
				} else {
					$17 = $12;$18 = $1;
				}
				$16 = (($18) - ($17))|0;
				$19 = ($16>>>0)<(1073741823);
				if ($19) {
					$22 = $16 << 1;
					$23 = ($22>>>0)<($14>>>0);
					$24 = $23 ? $14 : $22;
					$25 = HEAP32[$2>>2]|0;
					$26 = (($25) - ($17))|0;
					$27 = ($24|0)==(0);
					if ($27) {
						$$0$i35 = 0;$30 = 0;$31 = $26;
					} else {
						$$0$i34 = $24;$49 = $26;
						label = 9;
					}
				} else {
					$20 = HEAP32[$2>>2]|0;
					$21 = (($20) - ($17))|0;
					$$0$i34 = 2147483647;$49 = $21;
					label = 9;
				}
				if ((label|0) == 9) {
					$28 = (__Znwj($$0$i34)|0);
					$$0$i35 = $$0$i34;$30 = $28;$31 = $49;
				}
				$29 = (($30) + ($31)|0);
				$32 = $29;
				$33 = (($30) + ($$0$i35)|0);
				$$0$i2 = $__n;$34 = $29;$__v$sroa$12$0 = $32;
				while(1) {
					HEAP8[$34>>0] = 0;
					$35 = $__v$sroa$12$0;
					$36 = ((($35)) + 1|0);
					$37 = $36;
					$38 = (($$0$i2) + -1)|0;
					$39 = ($38|0)==(0);
					if ($39) {
						$$lcssa = $37;
						break;
					} else {
						$$0$i2 = $38;$34 = $36;$__v$sroa$12$0 = $37;
					}
				}
				$40 = $33;
				$41 = HEAP32[$this>>2]|0;
				$42 = HEAP32[$2>>2]|0;
				$43 = $41;
				$44 = (($42) - ($43))|0;
				$45 = (0 - ($44))|0;
				$46 = (($29) + ($45)|0);
				$47 = $46;
				_memcpy(($46|0),($41|0),($44|0))|0;
				HEAP32[$this>>2] = $47;
				HEAP32[$2>>2] = $$lcssa;
				HEAP32[$0>>2] = $40;
				$48 = ($41|0)==(0|0);
				if ($48) {
					return;
				}
				__ZdlPv($41);
				return;
			}
			function __ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$mux = 0, $$not = 0, $$not10 = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $__last;
				$1 = $__first;
				$2 = (($0) - ($1))|0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$this>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = ($2>>>0)>($6>>>0);
				$8 = $5;
				if (!($7)) {
					$9 = ((($this)) + 4|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = (($10) - ($5))|0;
					$12 = ($2>>>0)>($11>>>0);
					$13 = (($__first) + ($11)|0);
					$$__last = $12 ? $13 : $__last;
					$14 = $$__last;
					$15 = (($14) - ($1))|0;
					_memmove(($8|0),($__first|0),($15|0))|0;
					$16 = (($8) + ($15)|0);
					if (!($12)) {
						$24 = HEAP32[$9>>2]|0;
						$25 = ($24|0)==($16|0);
						if ($25) {
							return;
						}
						HEAP32[$9>>2] = $16;
						return;
					}
					$17 = ($$__last|0)==($__last|0);
					if ($17) {
						return;
					}
					$$pre$i1 = HEAP32[$9>>2]|0;
					$$01$i3 = $13;$19 = $$pre$i1;
					while(1) {
						$18 = HEAP8[$$01$i3>>0]|0;
						HEAP8[$19>>0] = $18;
						$20 = HEAP32[$9>>2]|0;
						$21 = ((($20)) + 1|0);
						HEAP32[$9>>2] = $21;
						$22 = ((($$01$i3)) + 1|0);
						$23 = ($22|0)==($__last|0);
						if ($23) {
							break;
						} else {
							$$01$i3 = $22;$19 = $21;
						}
					}
					return;
				}
				$26 = ($5|0)==(0);
				if ($26) {
					$46 = $4;
				} else {
					$27 = ((($this)) + 4|0);
					$28 = HEAP32[$27>>2]|0;
					$29 = ($28|0)==($8|0);
					if (!($29)) {
						HEAP32[$27>>2] = $8;
					}
					__ZdlPv($8);
					HEAP32[$3>>2] = 0;
					HEAP32[$27>>2] = 0;
					HEAP32[$this>>2] = 0;
					$46 = 0;
				}
				$30 = ($2|0)<(0);
				if ($30) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$3>>2]|0;
					$$pre8 = HEAP32[$this>>2]|0;
					$32 = $$pre8;$33 = $$pre;
				} else {
					$32 = 0;$33 = $46;
				}
				$31 = (($33) - ($32))|0;
				$34 = ($31>>>0)<(1073741823);
				if ($34) {
					$35 = $31 << 1;
					$$not = ($35>>>0)>=($2>>>0);
					$$not10 = $30 ^ 1;
					$brmerge = $$not | $$not10;
					$$mux = $$not ? $35 : $2;
					if ($brmerge) {
						$$0$i5 = $$mux;
					} else {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$0$i5 = $2;
					}
				} else {
					$$0$i5 = 2147483647;
				}
				$36 = (__Znwj($$0$i5)|0);
				$37 = ((($this)) + 4|0);
				HEAP32[$37>>2] = $36;
				HEAP32[$this>>2] = $36;
				$38 = (($36) + ($$0$i5)|0);
				HEAP32[$3>>2] = $38;
				$39 = ($__first|0)==($__last|0);
				if ($39) {
					return;
				} else {
					$$01$i = $__first;$41 = $36;
				}
				while(1) {
					$40 = HEAP8[$$01$i>>0]|0;
					HEAP8[$41>>0] = $40;
					$42 = HEAP32[$37>>2]|0;
					$43 = ((($42)) + 1|0);
					HEAP32[$37>>2] = $43;
					$44 = ((($$01$i)) + 1|0);
					$45 = ($44|0)==($__last|0);
					if ($45) {
						break;
					} else {
						$$01$i = $44;$41 = $43;
					}
				}
				return;
			}
			function __ZN10Page_image9draw_maskERK4Mask($this,$m) {
				$this = $this|0;
				$m = $m|0;
				var $$pre = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
				var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$018 = 0, $col1$015 = 0, $col2$0722 = 0, $col5$0823 = 0, $lprev$0$ = 0, $lprev$012 = 0, $rnew$0 = 0, $row$013 = 0, $row$013$in = 0, $rprev$011 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($m)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)<($3|0);
				$5 = $4 ? $3 : $1;
				$6 = ((($this)) + 12|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($m)) + 12|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($9|0)<($7|0);
				$11 = $10 ? $9 : $7;
				$12 = ($5|0)==($3|0);
				if ($12) {
					$13 = (__ZNK4Mask4leftEi($m,$3)|0);
					$14 = ($13|0)>(-1);
					if ($14) {
						$15 = (__ZNK4Mask5rightEi($m,$3)|0);
						$16 = ($15|0)>(-1);
						if ($16) {
							$17 = (__ZNK4Mask4leftEi($m,$3)|0);
							$18 = (__ZNK4Mask5rightEi($m,$3)|0);
							$19 = ($17|0)>($18|0);
							if (!($19)) {
								$20 = ((($this)) + 16|0);
								$col$018 = $17;
								while(1) {
									$21 = HEAP32[$0>>2]|0;
									$22 = (($3) - ($21))|0;
									$23 = HEAP32[$20>>2]|0;
									$24 = HEAP32[$this>>2]|0;
									$25 = (($col$018) - ($24))|0;
									$26 = (($23) + (($22*12)|0)|0);
									$27 = HEAP32[$26>>2]|0;
									$28 = (($27) + ($25)|0);
									HEAP8[$28>>0] = 0;
									$29 = (($col$018) + 1)|0;
									$30 = (__ZNK4Mask5rightEi($m,$3)|0);
									$31 = ($col$018|0)<($30|0);
									if ($31) {
										$col$018 = $29;
									} else {
										break;
									}
								}
							}
						}
					}
				}
				$32 = HEAP32[$8>>2]|0;
				$33 = ($11|0)==($32|0);
				if ($33) {
					$34 = (__ZNK4Mask4leftEi($m,$11)|0);
					$35 = ($34|0)>(-1);
					if ($35) {
						$36 = (__ZNK4Mask5rightEi($m,$11)|0);
						$37 = ($36|0)>(-1);
						if ($37) {
							$38 = (__ZNK4Mask4leftEi($m,$11)|0);
							$39 = (__ZNK4Mask5rightEi($m,$11)|0);
							$40 = ($38|0)>($39|0);
							if (!($40)) {
								$41 = ((($this)) + 16|0);
								$col1$015 = $38;
								while(1) {
									$42 = HEAP32[$0>>2]|0;
									$43 = (($11) - ($42))|0;
									$44 = HEAP32[$41>>2]|0;
									$45 = HEAP32[$this>>2]|0;
									$46 = (($col1$015) - ($45))|0;
									$47 = (($44) + (($43*12)|0)|0);
									$48 = HEAP32[$47>>2]|0;
									$49 = (($48) + ($46)|0);
									HEAP8[$49>>0] = 0;
									$50 = (($col1$015) + 1)|0;
									$51 = (__ZNK4Mask5rightEi($m,$11)|0);
									$52 = ($col1$015|0)<($51|0);
									if ($52) {
										$col1$015 = $50;
									} else {
										break;
									}
								}
							}
						}
					}
				}
				$53 = (__ZNK4Mask4leftEi($m,$5)|0);
				$54 = (__ZNK4Mask5rightEi($m,$5)|0);
				$55 = ($5|0)<($11|0);
				if (!($55)) {
					return;
				}
				$56 = ((($this)) + 8|0);
				$57 = ((($this)) + 16|0);
				$lprev$012 = $53;$row$013$in = $5;$rprev$011 = $54;
				while(1) {
					$row$013 = (($row$013$in) + 1)|0;
					$58 = (__ZNK4Mask4leftEi($m,$row$013)|0);
					$59 = (__ZNK4Mask5rightEi($m,$row$013)|0);
					$60 = ($58|0)<(0);
					$lprev$0$ = $60 ? $lprev$012 : $58;
					$61 = ($59|0)<(0);
					$rnew$0 = $61 ? $rprev$011 : $59;
					$62 = $lprev$0$ | $lprev$012;
					$63 = ($62|0)>(-1);
					if ($63) {
						$64 = HEAP32[$this>>2]|0;
						$65 = ($lprev$0$|0)<($lprev$012|0);
						$66 = $65 ? $lprev$0$ : $lprev$012;
						$67 = ($64|0)<($66|0);
						$68 = $67 ? $66 : $64;
						$69 = HEAP32[$56>>2]|0;
						$70 = ($lprev$012|0)<($lprev$0$|0);
						$71 = $70 ? $lprev$0$ : $lprev$012;
						$72 = ($71|0)<($69|0);
						$73 = $72 ? $71 : $69;
						$74 = ($68|0)>($73|0);
						if (!($74)) {
							$75 = HEAP32[$0>>2]|0;
							$76 = (($row$013) - ($75))|0;
							$77 = HEAP32[$57>>2]|0;
							$78 = (($68) - ($64))|0;
							$79 = (($77) + (($76*12)|0)|0);
							$80 = HEAP32[$79>>2]|0;
							$81 = (($80) + ($78)|0);
							HEAP8[$81>>0] = 0;
							$82 = ($68|0)<($73|0);
							if ($82) {
								$col2$0722 = $68;
								while(1) {
									$83 = (($col2$0722) + 1)|0;
									$$pre = HEAP32[$this>>2]|0;
									$84 = HEAP32[$0>>2]|0;
									$85 = (($row$013) - ($84))|0;
									$86 = HEAP32[$57>>2]|0;
									$87 = (($83) - ($$pre))|0;
									$88 = (($86) + (($85*12)|0)|0);
									$89 = HEAP32[$88>>2]|0;
									$90 = (($89) + ($87)|0);
									HEAP8[$90>>0] = 0;
									$91 = ($83|0)<($73|0);
									if ($91) {
										$col2$0722 = $83;
									} else {
										break;
									}
								}
							}
						}
					}
					$92 = $rnew$0 | $rprev$011;
					$93 = ($92|0)>(-1);
					if ($93) {
						$95 = HEAP32[$this>>2]|0;
						$96 = ($rnew$0|0)<($rprev$011|0);
						$97 = $96 ? $rnew$0 : $rprev$011;
						$98 = ($95|0)<($97|0);
						$99 = $98 ? $97 : $95;
						$100 = HEAP32[$56>>2]|0;
						$101 = ($rprev$011|0)<($rnew$0|0);
						$102 = $101 ? $rnew$0 : $rprev$011;
						$103 = ($102|0)<($100|0);
						$104 = $103 ? $102 : $100;
						$105 = ($99|0)>($104|0);
						if (!($105)) {
							$106 = HEAP32[$0>>2]|0;
							$107 = (($row$013) - ($106))|0;
							$108 = HEAP32[$57>>2]|0;
							$109 = (($99) - ($95))|0;
							$110 = (($108) + (($107*12)|0)|0);
							$111 = HEAP32[$110>>2]|0;
							$112 = (($111) + ($109)|0);
							HEAP8[$112>>0] = 0;
							$113 = ($99|0)<($104|0);
							if ($113) {
								$col5$0823 = $99;
								while(1) {
									$114 = (($col5$0823) + 1)|0;
									$$pre21 = HEAP32[$this>>2]|0;
									$115 = HEAP32[$0>>2]|0;
									$116 = (($row$013) - ($115))|0;
									$117 = HEAP32[$57>>2]|0;
									$118 = (($114) - ($$pre21))|0;
									$119 = (($117) + (($116*12)|0)|0);
									$120 = HEAP32[$119>>2]|0;
									$121 = (($120) + ($118)|0);
									HEAP8[$121>>0] = 0;
									$122 = ($114|0)<($104|0);
									if ($122) {
										$col5$0823 = $114;
									} else {
										break;
									}
								}
							}
						}
					}
					$94 = ($row$013|0)<($11|0);
					if ($94) {
						$lprev$012 = $lprev$0$;$row$013$in = $row$013;$rprev$011 = $rnew$0;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN10Page_image14draw_rectangleERK9Rectangle($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$pre = 0, $$pre17 = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $9 = 0, $col$010 = 0, $col2$07 = 0, $or$cond = 0, $or$cond14 = 0, $or$cond15 = 0, $or$cond16 = 0, $row$01219 = 0, $row1$08 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$re>>2]|0;
				$2 = ($1|0)>($0|0);
				$3 = $2 ? $1 : $0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ((($re)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ($5|0)<($7|0);
				$9 = $8 ? $7 : $5;
				$10 = ((($this)) + 8|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = ((($re)) + 8|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = ($13|0)<($11|0);
				$15 = $14 ? $13 : $11;
				$16 = ((($this)) + 12|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ((($re)) + 12|0);
				$19 = HEAP32[$18>>2]|0;
				$20 = ($19|0)<($17|0);
				$21 = $20 ? $19 : $17;
				$22 = ($3|0)!=($1|0);
				$23 = ($9|0)>($21|0);
				$or$cond = $22 | $23;
				if ($or$cond) {
					$41 = $7;
				} else {
					$24 = ((($this)) + 16|0);
					$25 = (($9) - ($5))|0;
					$26 = HEAP32[$24>>2]|0;
					$27 = (($1) - ($0))|0;
					$28 = (($26) + (($25*12)|0)|0);
					$29 = HEAP32[$28>>2]|0;
					$30 = (($29) + ($27)|0);
					HEAP8[$30>>0] = 0;
					$31 = ($9|0)<($21|0);
					if ($31) {
						$row$01219 = $9;
						while(1) {
							$32 = (($row$01219) + 1)|0;
							$$pre = HEAP32[$4>>2]|0;
							$$pre17 = HEAP32[$this>>2]|0;
							$33 = (($32) - ($$pre))|0;
							$34 = HEAP32[$24>>2]|0;
							$35 = (($1) - ($$pre17))|0;
							$36 = (($34) + (($33*12)|0)|0);
							$37 = HEAP32[$36>>2]|0;
							$38 = (($37) + ($35)|0);
							HEAP8[$38>>0] = 0;
							$39 = ($32|0)<($21|0);
							if ($39) {
								$row$01219 = $32;
							} else {
								break;
							}
						}
					}
					$$pre18 = HEAP32[$6>>2]|0;
					$41 = $$pre18;
				}
				$40 = ($9|0)!=($41|0);
				$42 = ($3|0)>($15|0);
				$or$cond14 = $40 | $42;
				if (!($or$cond14)) {
					$43 = ((($this)) + 16|0);
					$col$010 = $3;
					while(1) {
						$44 = HEAP32[$4>>2]|0;
						$45 = (($9) - ($44))|0;
						$46 = HEAP32[$43>>2]|0;
						$47 = HEAP32[$this>>2]|0;
						$48 = (($col$010) - ($47))|0;
						$49 = (($46) + (($45*12)|0)|0);
						$50 = HEAP32[$49>>2]|0;
						$51 = (($50) + ($48)|0);
						HEAP8[$51>>0] = 0;
						$52 = (($col$010) + 1)|0;
						$53 = ($col$010|0)<($15|0);
						if ($53) {
							$col$010 = $52;
						} else {
							break;
						}
					}
				}
				$54 = HEAP32[$12>>2]|0;
				$55 = ($15|0)!=($54|0);
				$or$cond15 = $55 | $23;
				if (!($or$cond15)) {
					$56 = ((($this)) + 16|0);
					$row1$08 = $9;
					while(1) {
						$57 = HEAP32[$4>>2]|0;
						$58 = (($row1$08) - ($57))|0;
						$59 = HEAP32[$56>>2]|0;
						$60 = HEAP32[$this>>2]|0;
						$61 = (($15) - ($60))|0;
						$62 = (($59) + (($58*12)|0)|0);
						$63 = HEAP32[$62>>2]|0;
						$64 = (($63) + ($61)|0);
						HEAP8[$64>>0] = 0;
						$65 = (($row1$08) + 1)|0;
						$66 = ($row1$08|0)<($21|0);
						if ($66) {
							$row1$08 = $65;
						} else {
							break;
						}
					}
				}
				$67 = HEAP32[$18>>2]|0;
				$68 = ($21|0)!=($67|0);
				$or$cond16 = $68 | $42;
				if ($or$cond16) {
					return;
				}
				$69 = ((($this)) + 16|0);
				$col2$07 = $3;
				while(1) {
					$70 = HEAP32[$4>>2]|0;
					$71 = (($21) - ($70))|0;
					$72 = HEAP32[$69>>2]|0;
					$73 = HEAP32[$this>>2]|0;
					$74 = (($col2$07) - ($73))|0;
					$75 = (($72) + (($71*12)|0)|0);
					$76 = HEAP32[$75>>2]|0;
					$77 = (($76) + ($74)|0);
					HEAP8[$77>>0] = 0;
					$78 = (($col2$07) + 1)|0;
					$79 = ($col2$07|0)<($15|0);
					if ($79) {
						$col2$07 = $78;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN10Page_image10draw_trackERK5Track($this,$tr) {
				$this = $this|0;
				$tr = $tr|0;
				var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $col$03 = 0, $row$07 = 0, $row1$04 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$tr>>2]|0;
				$2 = ((($tr)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)==($3|0);
				if ($4) {
					$5 = ($0|0)<(0);
					$6 = $5 ? 0 : $0;
					$7 = ((($this)) + 8|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = ($8|0)>(0);
					$10 = $9 ? 0 : $8;
					$21 = $6;$23 = 0;$49 = $10;
				} else {
					$11 = HEAP32[$1>>2]|0;
					$12 = ($0|0)<($11|0);
					$13 = $12 ? $11 : $0;
					$14 = ((($this)) + 8|0);
					$15 = HEAP32[$14>>2]|0;
					$16 = ((($3)) + -12|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = ($17|0)<($15|0);
					$19 = $18 ? $17 : $15;
					$20 = HEAP32[$1>>2]|0;
					$21 = $13;$23 = $20;$49 = $19;
				}
				$22 = ($21|0)==($23|0);
				if ($22) {
					$24 = (__ZNK5Track3topEi($tr,$21)|0);
					$25 = (__ZNK5Track6bottomEi($tr,$21)|0);
					$26 = ($24|0)>($25|0);
					if (!($26)) {
						$27 = ((($this)) + 4|0);
						$28 = ((($this)) + 12|0);
						$29 = ((($this)) + 16|0);
						$row$07 = $24;
						while(1) {
							$30 = HEAP32[$27>>2]|0;
							$31 = ($row$07|0)<($30|0);
							if (!($31)) {
								$32 = HEAP32[$28>>2]|0;
								$33 = ($row$07|0)>($32|0);
								if (!($33)) {
									$34 = (($row$07) - ($30))|0;
									$35 = HEAP32[$29>>2]|0;
									$36 = HEAP32[$this>>2]|0;
									$37 = (($21) - ($36))|0;
									$38 = (($35) + (($34*12)|0)|0);
									$39 = HEAP32[$38>>2]|0;
									$40 = (($39) + ($37)|0);
									HEAP8[$40>>0] = 0;
								}
							}
							$41 = (($row$07) + 1)|0;
							$42 = (__ZNK5Track6bottomEi($tr,$21)|0);
							$43 = ($row$07|0)<($42|0);
							if ($43) {
								$row$07 = $41;
							} else {
								break;
							}
						}
					}
				}
				$44 = HEAP32[$tr>>2]|0;
				$45 = HEAP32[$2>>2]|0;
				$46 = ($44|0)==($45|0);
				if ($46) {
					$51 = 0;
				} else {
					$47 = ((($45)) + -12|0);
					$48 = HEAP32[$47>>2]|0;
					$51 = $48;
				}
				$50 = ($49|0)==($51|0);
				if ($50) {
					$56 = (__ZNK5Track3topEi($tr,$49)|0);
					$57 = (__ZNK5Track6bottomEi($tr,$49)|0);
					$58 = ($56|0)>($57|0);
					if (!($58)) {
						$59 = ((($this)) + 4|0);
						$60 = ((($this)) + 12|0);
						$61 = ((($this)) + 16|0);
						$row1$04 = $56;
						while(1) {
							$62 = HEAP32[$59>>2]|0;
							$63 = ($row1$04|0)<($62|0);
							if (!($63)) {
								$64 = HEAP32[$60>>2]|0;
								$65 = ($row1$04|0)>($64|0);
								if (!($65)) {
									$66 = (($row1$04) - ($62))|0;
									$67 = HEAP32[$61>>2]|0;
									$68 = HEAP32[$this>>2]|0;
									$69 = (($49) - ($68))|0;
									$70 = (($67) + (($66*12)|0)|0);
									$71 = HEAP32[$70>>2]|0;
									$72 = (($71) + ($69)|0);
									HEAP8[$72>>0] = 0;
								}
							}
							$73 = (($row1$04) + 1)|0;
							$74 = (__ZNK5Track6bottomEi($tr,$49)|0);
							$75 = ($row1$04|0)<($74|0);
							if ($75) {
								$row1$04 = $73;
							} else {
								break;
							}
						}
					}
				}
				$52 = ($21|0)>($49|0);
				if ($52) {
					return;
				}
				$53 = ((($this)) + 4|0);
				$54 = ((($this)) + 12|0);
				$55 = ((($this)) + 16|0);
				$col$03 = $21;
				while(1) {
					$76 = (__ZNK5Track3topEi($tr,$col$03)|0);
					$77 = HEAP32[$53>>2]|0;
					$78 = ($76|0)<($77|0);
					if (!($78)) {
						$79 = HEAP32[$54>>2]|0;
						$80 = ($76|0)>($79|0);
						if (!($80)) {
							$81 = (($76) - ($77))|0;
							$82 = HEAP32[$55>>2]|0;
							$83 = HEAP32[$this>>2]|0;
							$84 = (($col$03) - ($83))|0;
							$85 = (($82) + (($81*12)|0)|0);
							$86 = HEAP32[$85>>2]|0;
							$87 = (($86) + ($84)|0);
							HEAP8[$87>>0] = 0;
						}
					}
					$88 = (__ZNK5Track6bottomEi($tr,$col$03)|0);
					$89 = HEAP32[$53>>2]|0;
					$90 = ($88|0)<($89|0);
					if (!($90)) {
						$91 = HEAP32[$54>>2]|0;
						$92 = ($88|0)>($91|0);
						if (!($92)) {
							$93 = (($88) - ($89))|0;
							$94 = HEAP32[$55>>2]|0;
							$95 = HEAP32[$this>>2]|0;
							$96 = (($col$03) - ($95))|0;
							$97 = (($94) + (($93*12)|0)|0);
							$98 = HEAP32[$97>>2]|0;
							$99 = (($98) + ($96)|0);
							HEAP8[$99>>0] = 0;
						}
					}
					$100 = (($col$03) + 1)|0;
					$101 = ($col$03|0)<($49|0);
					if ($101) {
						$col$03 = $100;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN10Page_image12change_scaleEi($this,$n) {
				$this = $this|0;
				$n = $n|0;
				var $$0 = 0, $$0$i1$i$i$i = 0, $$0$i1$i$i$i137 = 0, $$0$i1$i$i$us$i = 0, $$0$i1$i$i15$i = 0, $$0$i1$i$i26$i = 0, $$0$i1$i$i26$us$i = 0, $$0$i1$i$i43$i = 0, $$0$i1$i$i43$i125 = 0, $$0$i1$i$i58$i = 0, $$0$i2$i$i$i = 0, $$0$i2$i$i$i138 = 0, $$0$i2$i$i$us$i = 0, $$0$i2$i$i16$i = 0, $$0$i2$i$i27$i = 0, $$0$i2$i$i27$us$i = 0, $$0$i2$i$i44$i = 0, $$0$i2$i$i44$i126 = 0, $$0$i2$i$i59$i = 0, $$01 = 0;
				var $$01$i$i$i$i$i = 0, $$01150 = 0, $$cast$i = 0, $$cast$i101 = 0, $$cast$i25 = 0, $$cast$i40 = 0, $$cast$i83 = 0, $$in$i$i$i = 0, $$in$i$i$i134 = 0, $$in$i$i$us$i = 0, $$in$i$i12$i = 0, $$in$i$i23$i = 0, $$in$i$i23$us$i = 0, $$in$i$i40$i = 0, $$in$i$i40$i121 = 0, $$in$i$i55$i = 0, $$lcssa211 = 0, $$lcssa211$lcssa = 0, $$lcssa212 = 0, $$lcssa213 = 0;
				var $$lcssa75$i = 0, $$not$i = 0, $$not$i47 = 0, $$not23$i = 0, $$not34$i = 0, $$not4$i = 0, $$not4$i53 = 0, $$not5$i = 0, $$not5$i48 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i143 = 0, $$pre$i$i$i$i18 = 0, $$pre$i$i$i$i32 = 0, $$pre$i$i$i$i75 = 0, $$pre$i$i$i$i8 = 0, $$pre$i$i$i$i93 = 0;
				var $$pre$i$i$i130 = 0, $$pre$i$i$i26$i = 0, $$pre$i$i$i27$i = 0, $$pre$i$i$i5$i = 0, $$pre$i$i$i59$i = 0, $$pre$i$i$i9$i = 0, $$pre$i$i$us$i = 0, $$pre$i$i11 = 0, $$pre$i$i146 = 0, $$pre$i$i19$i = 0, $$pre$i$i19$us$i = 0, $$pre$i$i21 = 0, $$pre$i$i35 = 0, $$pre$i$i36$i = 0, $$pre$i$i36$i118 = 0, $$pre$i$i51$i = 0, $$pre$i$i78 = 0, $$pre$i$i8$i = 0, $$pre$i$i96 = 0, $$pre$i10$i = 0;
				var $$pre$i103 = 0, $$pre$i12$i = 0, $$pre$i21$i = 0, $$pre$i21$us$i = 0, $$pre$i27$us$i = 0, $$pre$i29$i = 0, $$pre$i3$i = 0, $$pre$i3$i132 = 0, $$pre$i30$i = 0, $$pre$i38$i = 0, $$pre$i38$i119 = 0, $$pre$i42 = 0, $$pre$i53$i = 0, $$pre$i62$i = 0, $$pre$i8$i = 0, $$pre$i84 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i$us$iZ2D = 0, $$pre$phi$i27Z2D = 0, $$pre$phi$i54$iZ2D = 0;
				var $$pre$phi175Z2D = 0, $$pre$phi177Z2D = 0, $$pre$phi179Z2D = 0, $$pre$phi51$iZ2D = 0, $$pre$phi87$iZ2D = 0, $$pre172 = 0, $$pre47$i = 0, $$pre48$i = 0, $$pre49$i = 0, $$pre82$i = 0, $$pre83$i = 0, $$pre85$i = 0, $$pre86$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
				var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
				var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
				var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
				var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0;
				var $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0;
				var $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0;
				var $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0;
				var $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0;
				var $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0;
				var $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0;
				var $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0;
				var $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0;
				var $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0;
				var $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0;
				var $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0;
				var $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0;
				var $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0;
				var $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0;
				var $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0;
				var $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0;
				var $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0;
				var $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
				var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
				var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
				var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
				var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
				var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
				var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
				var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
				var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
				var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
				var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
				var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
				var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
				var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
				var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
				var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
				var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
				var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
				var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
				var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
				var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
				var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
				var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
				var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
				var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
				var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
				var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
				var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
				var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
				var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
				var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
				var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
				var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
				var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
				var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
				var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
				var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
				var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
				var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
				var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
				var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
				var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
				var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
				var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
				var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
				var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
				var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
				var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
				var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge$i = 0, $brmerge$i54 = 0, $brmerge10$i = 0, $brmerge10$i60 = 0, $brmerge11$i = 0, $brmerge11$i61 = 0, $brmerge12$i = 0, $brmerge12$i62 = 0, $brmerge12$not$i = 0, $brmerge12$not$i63 = 0, $brmerge13$i = 0, $brmerge13$i64 = 0, $brmerge14$i = 0, $brmerge14$i65 = 0;
				var $brmerge15$i = 0, $brmerge15$i66 = 0, $brmerge15$not$i = 0, $brmerge15$not$i67 = 0, $brmerge17$i = 0, $brmerge17$i68 = 0, $brmerge18$i = 0, $brmerge18$i69 = 0, $brmerge18$not$i = 0, $brmerge18$not$i70 = 0, $brmerge22$demorgan$i = 0, $brmerge22$i = 0, $brmerge24$i = 0, $brmerge27$demorgan$i = 0, $brmerge30$not$i = 0, $brmerge32$not$i = 0, $brmerge35$i = 0, $brmerge38$not$i = 0, $brmerge40$not$i = 0, $brmerge46$demorgan$i = 0;
				var $brmerge48$demorgan$i = 0, $brmerge51$i = 0, $brmerge7$i = 0, $brmerge7$i56 = 0, $brmerge8$i = 0, $brmerge8$i57 = 0, $brmerge9$i = 0, $brmerge9$i58 = 0, $brmerge9$not$i = 0, $brmerge9$not$i59 = 0, $c$069$us$us$i = 0, $col$037$i = 0, $col$038$us$i = 0, $col$067$i = 0, $col$073$i = 0, $col$078$i = 0, $col2$077$i = 0, $col4$076$i = 0, $col4$076$us$i = 0, $col5$080$i = 0;
				var $eh$lpad$body$sink$i$index6Z2D = 0, $eh$lpad$body$sink$i$indexZ2D = 0, $exitcond$i = 0, $exitcond$i105 = 0, $exitcond$i71 = 0, $exitcond113$i = 0, $exitcond114$i = 0, $exitcond115$i = 0, $i$037$us$i = 0, $i1$040$i = 0, $lpad$phi$i$index = 0, $lpad$phi$i$index31 = 0, $lpad$phi$i112$index = 0, $lpad$phi$i112$index18 = 0, $new_data$i = 0, $new_data$i100 = 0, $new_data$i24 = 0, $new_data$i39 = 0, $new_data$i82 = 0, $or$cond$i102 = 0;
				var $or$cond$i28 = 0, $or$cond$i52 = 0, $or$cond1$i = 0, $or$cond20$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond3$i55 = 0, $or$cond52$i = 0, $or$cond53$i = 0, $or$cond54$i = 0, $or$cond55$i = 0, $or$cond66$i = 0, $or$cond67$i = 0, $or$cond68$i = 0, $or$cond69$i = 0, $r$072$us$us$i = 0, $reduced = 0, $row$043$i = 0;
				var $row$043$i86 = 0, $row$078$i = 0, $row$082$i = 0, $row$082$us$i = 0, $row$093$i = 0, $row1$039$i = 0, $row1$074$i = 0, $row1$080$i = 0, $row1$090$i = 0, $row1$090$us$i = 0, $row2$088$i = 0, $row3$083$i = 0, $sum$071$us$us$i = 0, $sum$168$us$us$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$new_data$i100 = sp + 92|0;
				$new_data$i82 = sp + 80|0;
				$0 = sp + 68|0;
				$new_data$i39 = sp + 56|0;
				$1 = sp + 105|0;
				$new_data$i24 = sp + 44|0;
				$2 = sp + 104|0;
				$new_data$i = sp + 32|0;
				$reduced = sp;
				$3 = ($n|0)<(-1);
				if ($3) {
					$4 = (0 - ($n))|0;
					__ZN10Page_imageC2ERKS_i($reduced,$this,$4);
					;HEAP32[$this>>2]=HEAP32[$reduced>>2]|0;HEAP32[$this+4>>2]=HEAP32[$reduced+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$reduced+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$reduced+12>>2]|0;
					$5 = ($reduced|0)==($this|0);
					if (!($5)) {
						$6 = ((($this)) + 16|0);
						$7 = ((($reduced)) + 16|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = ((($reduced)) + 20|0);
						$10 = HEAP32[$9>>2]|0;
						__THREW__ = 0;
						invoke_viii(50,($6|0),($8|0),($10|0));
						$11 = __THREW__; __THREW__ = 0;
						$12 = $11&1;
						if ($12) {
							$32 = ___cxa_find_matching_catch_2()|0;
							$33 = tempRet0;
							$34 = ((($reduced)) + 16|0);
							$35 = HEAP32[$34>>2]|0;
							$36 = ($35|0)==(0|0);
							if ($36) {
								___resumeException($32|0);
								// unreachable;
							}
							$37 = HEAP32[$9>>2]|0;
							$38 = ($37|0)==($35|0);
							if ($38) {
								$48 = $35;
							} else {
								$40 = $37;
								while(1) {
									$39 = ((($40)) + -12|0);
									HEAP32[$9>>2] = $39;
									$41 = HEAP32[$39>>2]|0;
									$42 = ($41|0)==(0|0);
									if ($42) {
										$43 = $39;
									} else {
										$45 = ((($40)) + -8|0);
										$46 = HEAP32[$45>>2]|0;
										$47 = ($46|0)==($41|0);
										if (!($47)) {
											HEAP32[$45>>2] = $41;
										}
										__ZdlPv($41);
										$$pre$i$i$i$i8 = HEAP32[$9>>2]|0;
										$43 = $$pre$i$i$i$i8;
									}
									$44 = ($43|0)==($35|0);
									if ($44) {
										break;
									} else {
										$40 = $43;
									}
								}
								$$pre$i$i11 = HEAP32[$34>>2]|0;
								$48 = $$pre$i$i11;
							}
							__ZdlPv($48);
							___resumeException($32|0);
							// unreachable;
						}
					}
					$13 = ((($this)) + 28|0);
					$14 = ((($reduced)) + 28|0);
					$15 = HEAP16[$14>>1]|0;
					HEAP16[$13>>1] = $15;
					$16 = ((($reduced)) + 16|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = ($17|0)==(0|0);
					if (!($18)) {
						$19 = ((($reduced)) + 20|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = ($20|0)==($17|0);
						if ($21) {
							$31 = $17;
						} else {
							$23 = $20;
							while(1) {
								$22 = ((($23)) + -12|0);
								HEAP32[$19>>2] = $22;
								$24 = HEAP32[$22>>2]|0;
								$25 = ($24|0)==(0|0);
								if ($25) {
									$26 = $22;
								} else {
									$28 = ((($23)) + -8|0);
									$29 = HEAP32[$28>>2]|0;
									$30 = ($29|0)==($24|0);
									if (!($30)) {
										HEAP32[$28>>2] = $24;
									}
									__ZdlPv($24);
									$$pre$i$i$i$i = HEAP32[$19>>2]|0;
									$26 = $$pre$i$i$i$i;
								}
								$27 = ($26|0)==($17|0);
								if ($27) {
									break;
								} else {
									$23 = $26;
								}
							}
							$$pre$i$i = HEAP32[$16>>2]|0;
							$31 = $$pre$i$i;
						}
						__ZdlPv($31);
					}
					$$0 = 1;
					STACKTOP = sp;return ($$0|0);
				}
				$49 = ($n|0)>(1);
				if (!($49)) {
					$$0 = 0;
					STACKTOP = sp;return ($$0|0);
				}
				$50 = (2147483647 / ($n|0))&-1;
				$51 = ((($this)) + 8|0);
				$52 = HEAP32[$51>>2]|0;
				$53 = HEAP32[$this>>2]|0;
				$54 = (($52) + 1)|0;
				$55 = (($54) - ($53))|0;
				$56 = ((($this)) + 12|0);
				$57 = HEAP32[$56>>2]|0;
				$58 = ((($this)) + 4|0);
				$59 = HEAP32[$58>>2]|0;
				$60 = (($57) + 1)|0;
				$61 = (($60) - ($59))|0;
				$62 = Math_imul($61, $55)|0;
				$63 = ($50|0)<($62|0);
				if ($63) {
					$64 = (___cxa_allocate_exception(4)|0);
					HEAP32[$64>>2] = 1509;
					___cxa_throw(($64|0),(8|0),(0|0));
					// unreachable;
				}
				$65 = ((($this)) + 28|0);
				$66 = HEAP8[$65>>0]|0;
				$67 = ($66<<24>>24)==(1);
				do {
					if ($67) {
						$68 = $n & 1;
						$69 = ($68|0)==(0);
						if ($69) {
							$70 = ((($this)) + 16|0);
							$71 = ((($this)) + 20|0);
							$72 = HEAP32[$71>>2]|0;
							$73 = HEAP32[$70>>2]|0;
							$74 = (($72) - ($73))|0;
							$75 = (($74|0) / 12)&-1;
							$$cast$i25 = $73;
							$76 = ((($$cast$i25)) + 4|0);
							$77 = HEAP32[$76>>2]|0;
							$78 = $73;
							$79 = HEAP32[$78>>2]|0;
							$80 = (($77) - ($79))|0;
							$81 = $75 << 1;
							__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i24,$81);
							$82 = ((($new_data$i24)) + 4|0);
							$83 = HEAP32[$82>>2]|0;
							$84 = HEAP32[$new_data$i24>>2]|0;
							$85 = ($83|0)==($84|0);
							$86 = $84;
							L48: do {
								if ($85) {
									$1364 = $86;
								} else {
									$87 = $80 << 1;
									$1365 = $86;$1366 = $84;$1367 = $83;$93 = $86;$row$043$i = 0;
									while(1) {
										$92 = (($93) + (($row$043$i*12)|0)|0);
										HEAP8[$2>>0] = 1;
										$94 = (((($93) + (($row$043$i*12)|0)|0)) + 4|0);
										$95 = HEAP32[$94>>2]|0;
										$96 = HEAP32[$92>>2]|0;
										$97 = (($95) - ($96))|0;
										$98 = ($87>>>0)>($97>>>0);
										$99 = $96;
										$100 = $95;
										if ($98) {
											$101 = (($87) - ($97))|0;
											__THREW__ = 0;
											invoke_viii(51,($92|0),($101|0),($2|0));
											$102 = __THREW__; __THREW__ = 0;
											$103 = $102&1;
											if ($103) {
												break;
											}
											$$pre$i = HEAP32[$82>>2]|0;
											$$pre47$i = HEAP32[$new_data$i24>>2]|0;
											$104 = $$pre47$i;
											$110 = $$pre47$i;$111 = $$pre$i;$1368 = $104;
										} else {
											$105 = ($87>>>0)<($97>>>0);
											if ($105) {
												$106 = (($99) + ($87)|0);
												$107 = ($100|0)==($106|0);
												if ($107) {
													$110 = $1366;$111 = $1367;$1368 = $1365;
												} else {
													HEAP32[$94>>2] = $106;
													$110 = $1366;$111 = $1367;$1368 = $1365;
												}
											} else {
												$110 = $1366;$111 = $1367;$1368 = $1365;
											}
										}
										$108 = (($row$043$i) + 1)|0;
										$109 = (($111) - ($110))|0;
										$112 = (($109|0) / 12)&-1;
										$113 = ($108>>>0)<($112>>>0);
										$114 = $110;
										if ($113) {
											$1365 = $1368;$1366 = $110;$1367 = $111;$93 = $114;$row$043$i = $108;
										} else {
											$1364 = $1368;
											break L48;
										}
									}
									$115 = ___cxa_find_matching_catch_2()|0;
									$116 = tempRet0;
									$117 = HEAP32[$new_data$i24>>2]|0;
									$118 = ($117|0)==(0|0);
									if ($118) {
										___resumeException($115|0);
										// unreachable;
									}
									$119 = HEAP32[$82>>2]|0;
									$120 = ($119|0)==($117|0);
									if ($120) {
										$130 = $117;
									} else {
										$122 = $119;
										while(1) {
											$121 = ((($122)) + -12|0);
											HEAP32[$82>>2] = $121;
											$123 = HEAP32[$121>>2]|0;
											$124 = ($123|0)==(0|0);
											if ($124) {
												$125 = $121;
											} else {
												$127 = ((($122)) + -8|0);
												$128 = HEAP32[$127>>2]|0;
												$129 = ($128|0)==($123|0);
												if (!($129)) {
													HEAP32[$127>>2] = $123;
												}
												__ZdlPv($123);
												$$pre$i$i$i27$i = HEAP32[$82>>2]|0;
												$125 = $$pre$i$i$i27$i;
											}
											$126 = ($125|0)==($117|0);
											if ($126) {
												break;
											} else {
												$122 = $125;
											}
										}
										$$pre$i30$i = HEAP32[$new_data$i24>>2]|0;
										$130 = $$pre$i30$i;
									}
									__ZdlPv($130);
									___resumeException($115|0);
									// unreachable;
								}
							} while(0);
							$88 = ($74|0)>(0);
							L76: do {
								if ($88) {
									$89 = ($80|0)>(0);
									$90 = (($80) + -1)|0;
									$91 = (($75) + -1)|0;
									$140 = $1364;$row1$039$i = 0;
									while(1) {
										$131 = $row1$039$i << 1;
										if ($89) {
											$132 = $131 | 1;
											$133 = HEAP32[$70>>2]|0;
											$134 = (($133) + (($row1$039$i*12)|0)|0);
											$135 = ($row1$039$i|0)>(0);
											$136 = (($row1$039$i) + -1)|0;
											$137 = ($row1$039$i|0)<($91|0);
											$138 = (($row1$039$i) + 1)|0;
											$$not$i = $135 ^ 1;
											$$not5$i = $137 ^ 1;
											$139 = (($140) + (($132*12)|0)|0);
											$141 = (($140) + (($131*12)|0)|0);
											$col$037$i = 0;
											while(1) {
												$143 = HEAP32[$134>>2]|0;
												$144 = (($143) + ($col$037$i)|0);
												$145 = HEAP8[$144>>0]|0;
												$146 = ($145<<24>>24)==(0);
												do {
													if ($146) {
														$147 = ($col$037$i|0)>(0);
														if ($147) {
															$148 = (($col$037$i) + -1)|0;
															$149 = (($143) + ($148)|0);
															$150 = HEAP8[$149>>0]|0;
															$151 = ($150<<24>>24)==(0);
															$198 = $151;
														} else {
															$198 = 0;
														}
														if ($135) {
															$152 = HEAP32[$70>>2]|0;
															$153 = (($152) + (($136*12)|0)|0);
															$154 = HEAP32[$153>>2]|0;
															$155 = (($154) + ($col$037$i)|0);
															$156 = HEAP8[$155>>0]|0;
															$157 = ($156<<24>>24)==(0);
															$197 = $157;
														} else {
															$197 = 0;
														}
														$158 = ($col$037$i|0)<($90|0);
														if ($158) {
															$159 = (($col$037$i) + 1)|0;
															$160 = (($143) + ($159)|0);
															$161 = HEAP8[$160>>0]|0;
															$162 = ($161<<24>>24)==(0);
															$205 = $162;
														} else {
															$205 = 0;
														}
														if ($137) {
															$163 = HEAP32[$70>>2]|0;
															$164 = (($163) + (($138*12)|0)|0);
															$165 = HEAP32[$164>>2]|0;
															$166 = (($165) + ($col$037$i)|0);
															$167 = HEAP8[$166>>0]|0;
															$168 = ($167<<24>>24)==(0);
															$211 = $168;
														} else {
															$211 = 0;
														}
														$or$cond$i28 = $135 & $147;
														if ($or$cond$i28) {
															$169 = HEAP32[$70>>2]|0;
															$170 = (($col$037$i) + -1)|0;
															$171 = (($169) + (($136*12)|0)|0);
															$172 = HEAP32[$171>>2]|0;
															$173 = (($172) + ($170)|0);
															$174 = HEAP8[$173>>0]|0;
															$175 = ($174<<24>>24)==(0);
															$199 = $175;
														} else {
															$199 = 0;
														}
														$$not4$i = $158 ^ 1;
														$brmerge$i = $$not$i | $$not4$i;
														if ($brmerge$i) {
															$201 = 0;
														} else {
															$176 = HEAP32[$70>>2]|0;
															$177 = (($col$037$i) + 1)|0;
															$178 = (($176) + (($136*12)|0)|0);
															$179 = HEAP32[$178>>2]|0;
															$180 = (($179) + ($177)|0);
															$181 = HEAP8[$180>>0]|0;
															$182 = ($181<<24>>24)==(0);
															$201 = $182;
														}
														$or$cond3$i = $137 & $147;
														if ($or$cond3$i) {
															$183 = HEAP32[$70>>2]|0;
															$184 = (($col$037$i) + -1)|0;
															$185 = (($183) + (($138*12)|0)|0);
															$186 = HEAP32[$185>>2]|0;
															$187 = (($186) + ($184)|0);
															$188 = HEAP8[$187>>0]|0;
															$189 = ($188<<24>>24)==(0);
															$200 = $189;
														} else {
															$200 = 0;
														}
														$brmerge7$i = $$not5$i | $$not4$i;
														if ($brmerge7$i) {
															$206 = 0;
														} else {
															$190 = HEAP32[$70>>2]|0;
															$191 = (($col$037$i) + 1)|0;
															$192 = (($190) + (($138*12)|0)|0);
															$193 = HEAP32[$192>>2]|0;
															$194 = (($193) + ($191)|0);
															$195 = HEAP8[$194>>0]|0;
															$196 = ($195<<24>>24)==(0);
															$206 = $196;
														}
														$brmerge8$i = $198 | $197;
														$brmerge9$i = $brmerge8$i | $199;
														$brmerge9$not$i = $brmerge9$i ^ 1;
														$brmerge10$i = $201 | $200;
														$or$cond20$i = $brmerge10$i & $brmerge9$not$i;
														if (!($or$cond20$i)) {
															$202 = $col$037$i << 1;
															$203 = HEAP32[$141>>2]|0;
															$204 = (($203) + ($202)|0);
															HEAP8[$204>>0] = 0;
														}
														$brmerge11$i = $197 | $205;
														$brmerge12$i = $brmerge11$i | $201;
														$brmerge12$not$i = $brmerge12$i ^ 1;
														$brmerge13$i = $199 | $206;
														$or$cond21$i = $brmerge13$i & $brmerge12$not$i;
														if (!($or$cond21$i)) {
															$207 = $col$037$i << 1;
															$208 = $207 | 1;
															$209 = HEAP32[$141>>2]|0;
															$210 = (($209) + ($208)|0);
															HEAP8[$210>>0] = 0;
														}
														$brmerge14$i = $198 | $211;
														$brmerge15$i = $brmerge14$i | $200;
														$brmerge15$not$i = $brmerge15$i ^ 1;
														$or$cond22$i = $brmerge13$i & $brmerge15$not$i;
														if (!($or$cond22$i)) {
															$212 = $col$037$i << 1;
															$213 = HEAP32[$139>>2]|0;
															$214 = (($213) + ($212)|0);
															HEAP8[$214>>0] = 0;
														}
														$brmerge17$i = $205 | $211;
														$brmerge18$i = $brmerge17$i | $206;
														$brmerge18$not$i = $brmerge18$i ^ 1;
														$or$cond23$i = $brmerge10$i & $brmerge18$not$i;
														if ($or$cond23$i) {
															break;
														}
														$215 = $col$037$i << 1;
														$216 = $215 | 1;
														$217 = HEAP32[$139>>2]|0;
														$218 = (($217) + ($216)|0);
														HEAP8[$218>>0] = 0;
													}
												} while(0);
												$219 = (($col$037$i) + 1)|0;
												$exitcond$i = ($219|0)==($80|0);
												if ($exitcond$i) {
													$$pre$phi$i27Z2D = $138;
													break;
												} else {
													$col$037$i = $219;
												}
											}
										} else {
											$$pre49$i = (($row1$039$i) + 1)|0;
											$$pre$phi$i27Z2D = $$pre49$i;
										}
										$142 = ($$pre$phi$i27Z2D|0)<($75|0);
										if (!($142)) {
											break L76;
										}
										$$pre48$i = HEAP32[$new_data$i24>>2]|0;
										$140 = $$pre48$i;$row1$039$i = $$pre$phi$i27Z2D;
									}
								}
							} while(0);
							$220 = HEAP32[$70>>2]|0;
							$221 = HEAP32[$new_data$i24>>2]|0;
							HEAP32[$70>>2] = $221;
							HEAP32[$new_data$i24>>2] = $220;
							$222 = HEAP32[$71>>2]|0;
							$223 = HEAP32[$82>>2]|0;
							HEAP32[$71>>2] = $223;
							HEAP32[$82>>2] = $222;
							$224 = ((($this)) + 24|0);
							$225 = ((($new_data$i24)) + 8|0);
							$226 = HEAP32[$224>>2]|0;
							$227 = HEAP32[$225>>2]|0;
							HEAP32[$224>>2] = $227;
							HEAP32[$225>>2] = $226;
							$228 = $220;
							$229 = ($220|0)==(0);
							$230 = $222;
							if (!($229)) {
								$231 = $220;
								$232 = ($230|0)==($228|0);
								if ($232) {
									$242 = $231;
								} else {
									$234 = $230;
									while(1) {
										$233 = ((($234)) + -12|0);
										HEAP32[$82>>2] = $233;
										$235 = HEAP32[$233>>2]|0;
										$236 = ($235|0)==(0|0);
										if ($236) {
											$237 = $233;
										} else {
											$239 = ((($234)) + -8|0);
											$240 = HEAP32[$239>>2]|0;
											$241 = ($240|0)==($235|0);
											if (!($241)) {
												HEAP32[$239>>2] = $235;
											}
											__ZdlPv($235);
											$$pre$i$i$i$i32 = HEAP32[$82>>2]|0;
											$237 = $$pre$i$i$i$i32;
										}
										$238 = ($237|0)==($228|0);
										if ($238) {
											break;
										} else {
											$234 = $237;
										}
									}
									$$pre$i$i35 = HEAP32[$new_data$i24>>2]|0;
									$242 = $$pre$i$i35;
								}
								__ZdlPv($242);
							}
							$243 = (($n|0) / 2)&-1;
							$$01 = $243;
						} else {
							$244 = (($n|0) % 3)&-1;
							$245 = ($244|0)==(0);
							if (!($245)) {
								$$01150 = $n;
								label = 163;
								break;
							}
							$246 = ((($this)) + 16|0);
							$247 = ((($this)) + 20|0);
							$248 = HEAP32[$247>>2]|0;
							$249 = HEAP32[$246>>2]|0;
							$250 = (($248) - ($249))|0;
							$251 = (($250|0) / 12)&-1;
							$$cast$i40 = $249;
							$252 = ((($$cast$i40)) + 4|0);
							$253 = HEAP32[$252>>2]|0;
							$254 = $249;
							$255 = HEAP32[$254>>2]|0;
							$256 = (($253) - ($255))|0;
							$257 = ($251*3)|0;
							__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i39,$257);
							$258 = ((($new_data$i39)) + 4|0);
							$259 = HEAP32[$258>>2]|0;
							$260 = HEAP32[$new_data$i39>>2]|0;
							$261 = ($259|0)==($260|0);
							$262 = $260;
							L141: do {
								if ($261) {
									$1369 = $262;
								} else {
									$263 = ($256*3)|0;
									$1370 = $262;$1371 = $260;$1372 = $259;$269 = $262;$row$078$i = 0;
									while(1) {
										$268 = (($269) + (($row$078$i*12)|0)|0);
										HEAP8[$1>>0] = 1;
										$270 = (((($269) + (($row$078$i*12)|0)|0)) + 4|0);
										$271 = HEAP32[$270>>2]|0;
										$272 = HEAP32[$268>>2]|0;
										$273 = (($271) - ($272))|0;
										$274 = ($263>>>0)>($273>>>0);
										$275 = $272;
										$276 = $271;
										if ($274) {
											$277 = (($263) - ($273))|0;
											__THREW__ = 0;
											invoke_viii(51,($268|0),($277|0),($1|0));
											$278 = __THREW__; __THREW__ = 0;
											$279 = $278&1;
											if ($279) {
												break;
											}
											$$pre$i42 = HEAP32[$258>>2]|0;
											$$pre82$i = HEAP32[$new_data$i39>>2]|0;
											$280 = $$pre82$i;
											$1373 = $280;$286 = $$pre82$i;$287 = $$pre$i42;
										} else {
											$281 = ($263>>>0)<($273>>>0);
											if ($281) {
												$282 = (($275) + ($263)|0);
												$283 = ($276|0)==($282|0);
												if ($283) {
													$1373 = $1370;$286 = $1371;$287 = $1372;
												} else {
													HEAP32[$270>>2] = $282;
													$1373 = $1370;$286 = $1371;$287 = $1372;
												}
											} else {
												$1373 = $1370;$286 = $1371;$287 = $1372;
											}
										}
										$284 = (($row$078$i) + 1)|0;
										$285 = (($287) - ($286))|0;
										$288 = (($285|0) / 12)&-1;
										$289 = ($284>>>0)<($288>>>0);
										$290 = $286;
										if ($289) {
											$1370 = $1373;$1371 = $286;$1372 = $287;$269 = $290;$row$078$i = $284;
										} else {
											$1369 = $1373;
											break L141;
										}
									}
									$291 = ___cxa_find_matching_catch_2()|0;
									$292 = tempRet0;
									$293 = HEAP32[$new_data$i39>>2]|0;
									$294 = ($293|0)==(0|0);
									if ($294) {
										___resumeException($291|0);
										// unreachable;
									}
									$295 = HEAP32[$258>>2]|0;
									$296 = ($295|0)==($293|0);
									if ($296) {
										$306 = $293;
									} else {
										$298 = $295;
										while(1) {
											$297 = ((($298)) + -12|0);
											HEAP32[$258>>2] = $297;
											$299 = HEAP32[$297>>2]|0;
											$300 = ($299|0)==(0|0);
											if ($300) {
												$301 = $297;
											} else {
												$303 = ((($298)) + -8|0);
												$304 = HEAP32[$303>>2]|0;
												$305 = ($304|0)==($299|0);
												if (!($305)) {
													HEAP32[$303>>2] = $299;
												}
												__ZdlPv($299);
												$$pre$i$i$i59$i = HEAP32[$258>>2]|0;
												$301 = $$pre$i$i$i59$i;
											}
											$302 = ($301|0)==($293|0);
											if ($302) {
												break;
											} else {
												$298 = $301;
											}
										}
										$$pre$i62$i = HEAP32[$new_data$i39>>2]|0;
										$306 = $$pre$i62$i;
									}
									__ZdlPv($306);
									___resumeException($291|0);
									// unreachable;
								}
							} while(0);
							$264 = ($250|0)>(0);
							L169: do {
								if ($264) {
									$265 = ($256|0)>(0);
									$266 = (($256) + -1)|0;
									$267 = (($251) + -1)|0;
									$317 = $1369;$row1$074$i = 0;
									while(1) {
										$307 = ($row1$074$i*3)|0;
										if ($265) {
											$308 = (($307) + 2)|0;
											$309 = HEAP32[$246>>2]|0;
											$310 = (($307) + 1)|0;
											$311 = (($309) + (($row1$074$i*12)|0)|0);
											$312 = ($row1$074$i|0)>(0);
											$313 = (($row1$074$i) + -1)|0;
											$314 = ($row1$074$i|0)<($267|0);
											$315 = (($row1$074$i) + 1)|0;
											$$not$i47 = $312 ^ 1;
											$$not5$i48 = $314 ^ 1;
											$316 = (($317) + (($307*12)|0)|0);
											$318 = (($317) + (($310*12)|0)|0);
											$319 = (($317) + (($308*12)|0)|0);
											$col$073$i = 0;
											while(1) {
												$321 = ($col$073$i*3)|0;
												$322 = ($col$073$i|0)>(0);
												if ($322) {
													$323 = (($col$073$i) + -1)|0;
													$324 = HEAP32[$311>>2]|0;
													$325 = (($324) + ($323)|0);
													$326 = HEAP8[$325>>0]|0;
													$327 = ($326<<24>>24)==(0);
													$379 = $327;
												} else {
													$379 = 0;
												}
												if ($312) {
													$328 = HEAP32[$246>>2]|0;
													$329 = (($328) + (($313*12)|0)|0);
													$330 = HEAP32[$329>>2]|0;
													$331 = (($330) + ($col$073$i)|0);
													$332 = HEAP8[$331>>0]|0;
													$333 = ($332<<24>>24)==(0);
													$378 = $333;
												} else {
													$378 = 0;
												}
												$334 = ($col$073$i|0)<($266|0);
												if ($334) {
													$335 = (($col$073$i) + 1)|0;
													$336 = HEAP32[$311>>2]|0;
													$337 = (($336) + ($335)|0);
													$338 = HEAP8[$337>>0]|0;
													$339 = ($338<<24>>24)==(0);
													$388 = $339;
												} else {
													$388 = 0;
												}
												if ($314) {
													$340 = HEAP32[$246>>2]|0;
													$341 = (($340) + (($315*12)|0)|0);
													$342 = HEAP32[$341>>2]|0;
													$343 = (($342) + ($col$073$i)|0);
													$344 = HEAP8[$343>>0]|0;
													$345 = ($344<<24>>24)==(0);
													$398 = $345;
												} else {
													$398 = 0;
												}
												$or$cond$i52 = $312 & $322;
												if ($or$cond$i52) {
													$346 = HEAP32[$246>>2]|0;
													$347 = (($col$073$i) + -1)|0;
													$348 = (($346) + (($313*12)|0)|0);
													$349 = HEAP32[$348>>2]|0;
													$350 = (($349) + ($347)|0);
													$351 = HEAP8[$350>>0]|0;
													$352 = ($351<<24>>24)==(0);
													$380 = $352;
												} else {
													$380 = 0;
												}
												$$not4$i53 = $334 ^ 1;
												$brmerge$i54 = $$not$i47 | $$not4$i53;
												if ($brmerge$i54) {
													$382 = 0;
												} else {
													$353 = HEAP32[$246>>2]|0;
													$354 = (($col$073$i) + 1)|0;
													$355 = (($353) + (($313*12)|0)|0);
													$356 = HEAP32[$355>>2]|0;
													$357 = (($356) + ($354)|0);
													$358 = HEAP8[$357>>0]|0;
													$359 = ($358<<24>>24)==(0);
													$382 = $359;
												}
												$or$cond3$i55 = $314 & $322;
												if ($or$cond3$i55) {
													$360 = HEAP32[$246>>2]|0;
													$361 = (($col$073$i) + -1)|0;
													$362 = (($360) + (($315*12)|0)|0);
													$363 = HEAP32[$362>>2]|0;
													$364 = (($363) + ($361)|0);
													$365 = HEAP8[$364>>0]|0;
													$366 = ($365<<24>>24)==(0);
													$381 = $366;
												} else {
													$381 = 0;
												}
												$brmerge7$i56 = $$not5$i48 | $$not4$i53;
												if ($brmerge7$i56) {
													$389 = 0;
												} else {
													$367 = HEAP32[$246>>2]|0;
													$368 = (($col$073$i) + 1)|0;
													$369 = (($367) + (($315*12)|0)|0);
													$370 = HEAP32[$369>>2]|0;
													$371 = (($370) + ($368)|0);
													$372 = HEAP8[$371>>0]|0;
													$373 = ($372<<24>>24)==(0);
													$389 = $373;
												}
												$374 = HEAP32[$311>>2]|0;
												$375 = (($374) + ($col$073$i)|0);
												$376 = HEAP8[$375>>0]|0;
												$377 = ($376<<24>>24)==(0);
												do {
													if ($377) {
														$brmerge8$i57 = $379 | $378;
														$brmerge9$i58 = $brmerge8$i57 | $380;
														$brmerge9$not$i59 = $brmerge9$i58 ^ 1;
														$brmerge10$i60 = $382 | $381;
														$or$cond52$i = $brmerge10$i60 & $brmerge9$not$i59;
														if (!($or$cond52$i)) {
															$383 = HEAP32[$316>>2]|0;
															$384 = (($383) + ($321)|0);
															HEAP8[$384>>0] = 0;
														}
														$385 = (($321) + 1)|0;
														$386 = HEAP32[$316>>2]|0;
														$387 = (($386) + ($385)|0);
														HEAP8[$387>>0] = 0;
														$brmerge11$i61 = $378 | $388;
														$brmerge12$i62 = $brmerge11$i61 | $382;
														$brmerge12$not$i63 = $brmerge12$i62 ^ 1;
														$brmerge13$i64 = $380 | $389;
														$or$cond53$i = $brmerge13$i64 & $brmerge12$not$i63;
														$$pre85$i = (($321) + 2)|0;
														if (!($or$cond53$i)) {
															$390 = HEAP32[$316>>2]|0;
															$391 = (($390) + ($$pre85$i)|0);
															HEAP8[$391>>0] = 0;
														}
														$392 = HEAP32[$318>>2]|0;
														$393 = (($392) + ($$pre85$i)|0);
														HEAP8[$393>>0] = 0;
														$394 = HEAP32[$318>>2]|0;
														$395 = (($394) + ($385)|0);
														HEAP8[$395>>0] = 0;
														$396 = HEAP32[$318>>2]|0;
														$397 = (($396) + ($321)|0);
														HEAP8[$397>>0] = 0;
														$brmerge14$i65 = $379 | $398;
														$brmerge15$i66 = $brmerge14$i65 | $381;
														$brmerge15$not$i67 = $brmerge15$i66 ^ 1;
														$or$cond54$i = $brmerge13$i64 & $brmerge15$not$i67;
														if (!($or$cond54$i)) {
															$399 = HEAP32[$319>>2]|0;
															$400 = (($399) + ($321)|0);
															HEAP8[$400>>0] = 0;
														}
														$401 = HEAP32[$319>>2]|0;
														$402 = (($401) + ($385)|0);
														HEAP8[$402>>0] = 0;
														$brmerge17$i68 = $388 | $398;
														$brmerge18$i69 = $brmerge17$i68 | $389;
														$brmerge18$not$i70 = $brmerge18$i69 ^ 1;
														$or$cond55$i = $brmerge10$i60 & $brmerge18$not$i70;
														if ($or$cond55$i) {
															break;
														}
														$403 = HEAP32[$319>>2]|0;
														$404 = (($403) + ($$pre85$i)|0);
														HEAP8[$404>>0] = 0;
													} else {
														$brmerge22$demorgan$i = $379 & $378;
														$brmerge22$i = $brmerge22$demorgan$i ^ 1;
														$$not23$i = $380 ^ 1;
														$brmerge24$i = $brmerge22$i | $$not23$i;
														$brmerge27$demorgan$i = $382 & $381;
														$or$cond69$i = $brmerge24$i | $brmerge27$demorgan$i;
														if (!($or$cond69$i)) {
															$405 = HEAP32[$316>>2]|0;
															$406 = (($405) + ($321)|0);
															HEAP8[$406>>0] = 0;
														}
														$brmerge30$not$i = $378 & $388;
														$brmerge32$not$i = $brmerge30$not$i & $382;
														$$not34$i = $389 ^ 1;
														$brmerge35$i = $$not23$i | $$not34$i;
														$or$cond66$i = $brmerge32$not$i & $brmerge35$i;
														if ($or$cond66$i) {
															$407 = (($321) + 2)|0;
															$408 = HEAP32[$316>>2]|0;
															$409 = (($408) + ($407)|0);
															HEAP8[$409>>0] = 0;
														}
														$brmerge38$not$i = $379 & $398;
														$brmerge40$not$i = $brmerge38$not$i & $381;
														$or$cond67$i = $brmerge40$not$i & $brmerge35$i;
														if ($or$cond67$i) {
															$410 = HEAP32[$319>>2]|0;
															$411 = (($410) + ($321)|0);
															HEAP8[$411>>0] = 0;
														}
														$brmerge46$demorgan$i = $388 & $398;
														$brmerge48$demorgan$i = $brmerge46$demorgan$i & $389;
														$brmerge51$i = $brmerge27$demorgan$i ^ 1;
														$or$cond68$i = $brmerge48$demorgan$i & $brmerge51$i;
														if (!($or$cond68$i)) {
															break;
														}
														$412 = (($321) + 2)|0;
														$413 = HEAP32[$319>>2]|0;
														$414 = (($413) + ($412)|0);
														HEAP8[$414>>0] = 0;
													}
												} while(0);
												$415 = (($col$073$i) + 1)|0;
												$exitcond$i71 = ($415|0)==($256|0);
												if ($exitcond$i71) {
													$$pre$phi87$iZ2D = $315;
													break;
												} else {
													$col$073$i = $415;
												}
											}
										} else {
											$$pre86$i = (($row1$074$i) + 1)|0;
											$$pre$phi87$iZ2D = $$pre86$i;
										}
										$320 = ($$pre$phi87$iZ2D|0)<($251|0);
										if (!($320)) {
											break L169;
										}
										$$pre83$i = HEAP32[$new_data$i39>>2]|0;
										$317 = $$pre83$i;$row1$074$i = $$pre$phi87$iZ2D;
									}
								}
							} while(0);
							$416 = HEAP32[$246>>2]|0;
							$417 = HEAP32[$new_data$i39>>2]|0;
							HEAP32[$246>>2] = $417;
							HEAP32[$new_data$i39>>2] = $416;
							$418 = HEAP32[$247>>2]|0;
							$419 = HEAP32[$258>>2]|0;
							HEAP32[$247>>2] = $419;
							HEAP32[$258>>2] = $418;
							$420 = ((($this)) + 24|0);
							$421 = ((($new_data$i39)) + 8|0);
							$422 = HEAP32[$420>>2]|0;
							$423 = HEAP32[$421>>2]|0;
							HEAP32[$420>>2] = $423;
							HEAP32[$421>>2] = $422;
							$424 = $416;
							$425 = ($416|0)==(0);
							$426 = $418;
							if (!($425)) {
								$427 = $416;
								$428 = ($426|0)==($424|0);
								if ($428) {
									$438 = $427;
								} else {
									$430 = $426;
									while(1) {
										$429 = ((($430)) + -12|0);
										HEAP32[$258>>2] = $429;
										$431 = HEAP32[$429>>2]|0;
										$432 = ($431|0)==(0|0);
										if ($432) {
											$433 = $429;
										} else {
											$435 = ((($430)) + -8|0);
											$436 = HEAP32[$435>>2]|0;
											$437 = ($436|0)==($431|0);
											if (!($437)) {
												HEAP32[$435>>2] = $431;
											}
											__ZdlPv($431);
											$$pre$i$i$i$i75 = HEAP32[$258>>2]|0;
											$433 = $$pre$i$i$i$i75;
										}
										$434 = ($433|0)==($424|0);
										if ($434) {
											break;
										} else {
											$430 = $433;
										}
									}
									$$pre$i$i78 = HEAP32[$new_data$i39>>2]|0;
									$438 = $$pre$i$i78;
								}
								__ZdlPv($438);
							}
							$439 = (($n|0) / 3)&-1;
							$$01 = $439;
						}
						$440 = ($$01|0)>(1);
						if ($440) {
							$$01150 = $$01;
							label = 163;
						} else {
							$$pre = ((($this)) + 16|0);
							$$pre172 = ((($this)) + 20|0);
							$$pre$phi175Z2D = $$pre172;$$pre$phi177Z2D = $$pre;$$pre$phi179Z2D = $$pre;
						}
					} else {
						$$01150 = $n;
						label = 163;
					}
				} while(0);
				L245: do {
					if ((label|0) == 163) {
						$441 = ((($this)) + 16|0);
						$442 = ((($this)) + 20|0);
						$443 = HEAP32[$442>>2]|0;
						$444 = HEAP32[$441>>2]|0;
						$445 = (($443) - ($444))|0;
						$446 = (($445|0) / 12)&-1;
						$$cast$i83 = $444;
						$447 = ((($$cast$i83)) + 4|0);
						$448 = HEAP32[$447>>2]|0;
						$449 = $444;
						$450 = HEAP32[$449>>2]|0;
						$451 = (($448) - ($450))|0;
						HEAP32[$new_data$i82>>2] = 0;
						$452 = ((($new_data$i82)) + 4|0);
						HEAP32[$452>>2] = 0;
						$453 = ((($new_data$i82)) + 8|0);
						HEAP32[$453>>2] = 0;
						$454 = Math_imul($446, $$01150)|0;
						__THREW__ = 0;
						invoke_vii(52,($new_data$i82|0),($454|0));
						$455 = __THREW__; __THREW__ = 0;
						$456 = $455&1;
						L247: do {
							if ($456) {
								$464 = ___cxa_find_matching_catch_2()|0;
								$465 = tempRet0;
								$eh$lpad$body$sink$i$index6Z2D = $465;$eh$lpad$body$sink$i$indexZ2D = $464;
							} else {
								$457 = ($445|0)>(0);
								L250: do {
									if ($457) {
										$458 = ((($0)) + 4|0);
										$459 = ((($0)) + 8|0);
										$460 = ((($new_data$i82)) + 8|0);
										$461 = ($451|0)>(0);
										$row$043$i86 = 0;
										L252: while(1) {
											$466 = HEAP32[$441>>2]|0;
											HEAP32[$0>>2] = 0;
											HEAP32[$458>>2] = 0;
											HEAP32[$459>>2] = 0;
											$467 = HEAP32[$452>>2]|0;
											$468 = HEAP32[$460>>2]|0;
											$469 = ($467|0)==($468|0);
											if ($469) {
												__THREW__ = 0;
												invoke_vii(53,($new_data$i82|0),($0|0));
												$473 = __THREW__; __THREW__ = 0;
												$474 = $473&1;
												if ($474) {
													label = 190;
													break;
												}
											} else {
												HEAP32[$467>>2] = 0;
												$470 = ((($467)) + 4|0);
												HEAP32[$470>>2] = 0;
												$471 = ((($467)) + 8|0);
												HEAP32[$471>>2] = 0;
												$472 = ((($467)) + 12|0);
												HEAP32[$452>>2] = $472;
											}
											if ($461) {
												$475 = (($466) + (($row$043$i86*12)|0)|0);
												$col$038$us$i = 0;
												while(1) {
													$476 = HEAP32[$475>>2]|0;
													$477 = (($476) + ($col$038$us$i)|0);
													$478 = HEAP8[$477>>0]|0;
													$i$037$us$i = 0;
													while(1) {
														$479 = HEAP32[$452>>2]|0;
														$480 = ((($479)) + -12|0);
														$481 = ((($479)) + -8|0);
														$482 = HEAP32[$481>>2]|0;
														$483 = ((($479)) + -4|0);
														$484 = HEAP32[$483>>2]|0;
														$485 = ($482|0)==($484|0);
														$486 = $484;
														if ($485) {
															$489 = $482;
															$490 = HEAP32[$480>>2]|0;
															$491 = (($489) - ($490))|0;
															$492 = (($491) + 1)|0;
															$493 = ($492|0)<(0);
															if ($493) {
																__THREW__ = 0;
																invoke_vi(46,($480|0));
																$494 = __THREW__; __THREW__ = 0;
																$495 = $494&1;
																if ($495) {
																	label = 189;
																	break L252;
																}
																$$pre$i$i$us$i = HEAP32[$480>>2]|0;
																$$pre$i27$us$i = HEAP32[$483>>2]|0;
																$$in$i$i$us$i = $$pre$i$i$us$i;$$pre$phi$i$us$iZ2D = $483;$498 = $$pre$i27$us$i;
															} else {
																$$in$i$i$us$i = $490;$$pre$phi$i$us$iZ2D = $483;$498 = $486;
															}
															$496 = $$in$i$i$us$i;
															$497 = (($498) - ($$in$i$i$us$i))|0;
															$499 = ($497>>>0)<(1073741823);
															if ($499) {
																$502 = $497 << 1;
																$503 = ($502>>>0)<($492>>>0);
																$504 = $503 ? $492 : $502;
																$505 = HEAP32[$481>>2]|0;
																$506 = (($505) - ($$in$i$i$us$i))|0;
																$507 = ($504|0)==(0);
																if ($507) {
																	$$0$i2$i$i$us$i = 0;$512 = 0;$513 = $506;$519 = $505;
																} else {
																	$$0$i1$i$i$us$i = $504;$1374 = $505;$1375 = $506;
																	label = 184;
																}
															} else {
																$500 = HEAP32[$481>>2]|0;
																$501 = (($500) - ($$in$i$i$us$i))|0;
																$$0$i1$i$i$us$i = 2147483647;$1374 = $500;$1375 = $501;
																label = 184;
															}
															if ((label|0) == 184) {
																label = 0;
																__THREW__ = 0;
																$508 = (invoke_ii(29,($$0$i1$i$i$us$i|0))|0);
																$509 = __THREW__; __THREW__ = 0;
																$510 = $509&1;
																if ($510) {
																	label = 189;
																	break L252;
																} else {
																	$$0$i2$i$i$us$i = $$0$i1$i$i$us$i;$512 = $508;$513 = $1375;$519 = $1374;
																}
															}
															$511 = (($512) + ($513)|0);
															$514 = (($512) + ($$0$i2$i$i$us$i)|0);
															$515 = $514;
															HEAP8[$511>>0] = $478;
															$516 = ((($511)) + 1|0);
															$517 = $516;
															$518 = (($519) - ($$in$i$i$us$i))|0;
															$520 = (0 - ($518))|0;
															$521 = (($511) + ($520)|0);
															$522 = $521;
															_memcpy(($521|0),($496|0),($518|0))|0;
															HEAP32[$480>>2] = $522;
															HEAP32[$481>>2] = $517;
															HEAP32[$$pre$phi$i$us$iZ2D>>2] = $515;
															$523 = ($$in$i$i$us$i|0)==(0);
															if (!($523)) {
																__ZdlPv($496);
															}
														} else {
															HEAP8[$482>>0] = $478;
															$487 = HEAP32[$481>>2]|0;
															$488 = ((($487)) + 1|0);
															HEAP32[$481>>2] = $488;
														}
														$524 = (($i$037$us$i) + 1)|0;
														$525 = ($524|0)<($$01150|0);
														if ($525) {
															$i$037$us$i = $524;
														} else {
															break;
														}
													}
													$526 = (($col$038$us$i) + 1)|0;
													$527 = ($526|0)<($451|0);
													if ($527) {
														$col$038$us$i = $526;
													} else {
														$i1$040$i = 1;
														break;
													}
												}
											} else {
												$i1$040$i = 1;
											}
											while(1) {
												$534 = HEAP32[$452>>2]|0;
												$535 = ((($534)) + -12|0);
												$536 = HEAP32[$460>>2]|0;
												$537 = ($534|0)==($536|0);
												if ($537) {
													__THREW__ = 0;
													invoke_vii(53,($new_data$i82|0),($535|0));
													$570 = __THREW__; __THREW__ = 0;
													$571 = $570&1;
													if ($571) {
														label = 167;
														break L252;
													}
												} else {
													HEAP32[$534>>2] = 0;
													$538 = ((($534)) + 4|0);
													HEAP32[$538>>2] = 0;
													$539 = ((($534)) + 8|0);
													HEAP32[$539>>2] = 0;
													$540 = ((($534)) + -8|0);
													$541 = HEAP32[$540>>2]|0;
													$542 = HEAP32[$535>>2]|0;
													$543 = (($541) - ($542))|0;
													$544 = ($541|0)==($542|0);
													if (!($544)) {
														$545 = ($543|0)<(0);
														if ($545) {
															__THREW__ = 0;
															invoke_vi(46,($534|0));
															$546 = __THREW__; __THREW__ = 0;
															$547 = $546&1;
															if ($547) {
																$$lcssa212 = $534;$$lcssa213 = $538;
																label = 199;
																break L252;
															}
														}
														__THREW__ = 0;
														$548 = (invoke_ii(29,($543|0))|0);
														$549 = __THREW__; __THREW__ = 0;
														$550 = $549&1;
														if ($550) {
															$$lcssa212 = $534;$$lcssa213 = $538;
															label = 199;
															break L252;
														}
														HEAP32[$538>>2] = $548;
														HEAP32[$534>>2] = $548;
														$551 = (($548) + ($543)|0);
														$552 = ((($534)) + 8|0);
														HEAP32[$552>>2] = $551;
														$553 = HEAP32[$535>>2]|0;
														$554 = HEAP32[$540>>2]|0;
														$555 = ($553|0)==($554|0);
														if (!($555)) {
															$$01$i$i$i$i$i = $553;$557 = $548;
															while(1) {
																$556 = HEAP8[$$01$i$i$i$i$i>>0]|0;
																HEAP8[$557>>0] = $556;
																$558 = HEAP32[$538>>2]|0;
																$559 = ((($558)) + 1|0);
																HEAP32[$538>>2] = $559;
																$560 = ((($$01$i$i$i$i$i)) + 1|0);
																$561 = ($560|0)==($554|0);
																if ($561) {
																	break;
																} else {
																	$$01$i$i$i$i$i = $560;$557 = $559;
																}
															}
														}
													}
													$568 = HEAP32[$452>>2]|0;
													$569 = ((($568)) + 12|0);
													HEAP32[$452>>2] = $569;
												}
												$572 = (($i1$040$i) + 1)|0;
												$573 = ($572|0)<($$01150|0);
												if ($573) {
													$i1$040$i = $572;
												} else {
													break;
												}
											}
											$532 = (($row$043$i86) + 1)|0;
											$533 = ($532|0)<($446|0);
											if ($533) {
												$row$043$i86 = $532;
											} else {
												$$pre$phi51$iZ2D = $460;
												break L250;
											}
										}
										if ((label|0) == 167) {
											$462 = ___cxa_find_matching_catch_2()|0;
											$463 = tempRet0;
											$eh$lpad$body$sink$i$index6Z2D = $463;$eh$lpad$body$sink$i$indexZ2D = $462;
											break L247;
										}
										else if ((label|0) == 189) {
											$528 = ___cxa_find_matching_catch_2()|0;
											$529 = tempRet0;
											$eh$lpad$body$sink$i$index6Z2D = $529;$eh$lpad$body$sink$i$indexZ2D = $528;
											break L247;
										}
										else if ((label|0) == 190) {
											$530 = ___cxa_find_matching_catch_2()|0;
											$531 = tempRet0;
											$eh$lpad$body$sink$i$index6Z2D = $531;$eh$lpad$body$sink$i$indexZ2D = $530;
											break L247;
										}
										else if ((label|0) == 199) {
											$562 = ___cxa_find_matching_catch_2()|0;
											$563 = tempRet0;
											$564 = HEAP32[$$lcssa212>>2]|0;
											$565 = ($564|0)==(0|0);
											if ($565) {
												$eh$lpad$body$sink$i$index6Z2D = $563;$eh$lpad$body$sink$i$indexZ2D = $562;
												break L247;
											}
											$566 = HEAP32[$$lcssa213>>2]|0;
											$567 = ($566|0)==($564|0);
											if (!($567)) {
												HEAP32[$$lcssa213>>2] = $564;
											}
											__ZdlPv($564);
											$eh$lpad$body$sink$i$index6Z2D = $563;$eh$lpad$body$sink$i$indexZ2D = $562;
											break L247;
										}
									} else {
										$$pre$i84 = ((($new_data$i82)) + 8|0);
										$$pre$phi51$iZ2D = $$pre$i84;
									}
								} while(0);
								$574 = HEAP32[$441>>2]|0;
								$575 = HEAP32[$new_data$i82>>2]|0;
								HEAP32[$441>>2] = $575;
								HEAP32[$new_data$i82>>2] = $574;
								$576 = HEAP32[$442>>2]|0;
								$577 = HEAP32[$452>>2]|0;
								HEAP32[$442>>2] = $577;
								HEAP32[$452>>2] = $576;
								$578 = ((($this)) + 24|0);
								$579 = HEAP32[$578>>2]|0;
								$580 = HEAP32[$$pre$phi51$iZ2D>>2]|0;
								HEAP32[$578>>2] = $580;
								HEAP32[$$pre$phi51$iZ2D>>2] = $579;
								$581 = $574;
								$582 = ($574|0)==(0);
								$583 = $576;
								if (!($582)) {
									$584 = $574;
									$585 = ($583|0)==($581|0);
									if ($585) {
										$595 = $584;
									} else {
										$587 = $583;
										while(1) {
											$586 = ((($587)) + -12|0);
											HEAP32[$452>>2] = $586;
											$588 = HEAP32[$586>>2]|0;
											$589 = ($588|0)==(0|0);
											if ($589) {
												$590 = $586;
											} else {
												$592 = ((($587)) + -8|0);
												$593 = HEAP32[$592>>2]|0;
												$594 = ($593|0)==($588|0);
												if (!($594)) {
													HEAP32[$592>>2] = $588;
												}
												__ZdlPv($588);
												$$pre$i$i$i5$i = HEAP32[$452>>2]|0;
												$590 = $$pre$i$i$i5$i;
											}
											$591 = ($590|0)==($581|0);
											if ($591) {
												break;
											} else {
												$587 = $590;
											}
										}
										$$pre$i8$i = HEAP32[$new_data$i82>>2]|0;
										$595 = $$pre$i8$i;
									}
									__ZdlPv($595);
								}
								$610 = HEAP8[$65>>0]|0;
								$611 = ($610&255)>(1);
								if (!($611)) {
									$$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
									break L245;
								}
								$612 = ($$01150|0)<(4);
								if ($612) {
									$613 = HEAP32[$442>>2]|0;
									$614 = HEAP32[$441>>2]|0;
									$615 = (($613) - ($614))|0;
									$616 = (($615|0) / 12)&-1;
									$$cast$i101 = $614;
									$617 = ((($$cast$i101)) + 4|0);
									$618 = HEAP32[$617>>2]|0;
									$619 = $614;
									$620 = HEAP32[$619>>2]|0;
									$621 = (($618) - ($620))|0;
									$622 = ($615|0)<(36);
									$623 = ($621|0)<(3);
									$or$cond$i102 = $622 | $623;
									if ($or$cond$i102) {
										$$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
										break L245;
									}
									__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i100,$616);
									$624 = HEAP32[$new_data$i100>>2]|0;
									$625 = HEAP32[$441>>2]|0;
									$626 = ($624|0)==($625|0);
									if ($626) {
										$1376 = $624;
										label = 231;
									} else {
										$627 = HEAP32[$625>>2]|0;
										$628 = ((($625)) + 4|0);
										$629 = HEAP32[$628>>2]|0;
										__THREW__ = 0;
										invoke_viii(54,($624|0),($627|0),($629|0));
										$630 = __THREW__; __THREW__ = 0;
										$631 = $630&1;
										if ($631) {
											label = 246;
										} else {
											$$pre$i103 = HEAP32[$new_data$i100>>2]|0;
											$1376 = $$pre$i103;
											label = 231;
										}
									}
									L329: do {
										if ((label|0) == 231) {
											$632 = (($616) + -1)|0;
											$633 = ($632|0)>(1);
											L331: do {
												if ($633) {
													$634 = ($618|0)==($620|0);
													if ($634) {
														$635 = (0 + ($621)|0);
														$636 = $635;
														$638 = $1376;$row$082$us$i = 1;
														while(1) {
															$637 = (($638) + (($row$082$us$i*12)|0)|0);
															$639 = (((($638) + (($row$082$us$i*12)|0)|0)) + 8|0);
															$640 = HEAP32[$639>>2]|0;
															$641 = HEAP32[$637>>2]|0;
															$642 = (($640) - ($641))|0;
															$643 = ($642>>>0)<($621>>>0);
															$644 = $641;
															do {
																if ($643) {
																	$645 = (((($638) + (($row$082$us$i*12)|0)|0)) + 4|0);
																	$646 = HEAP32[$645>>2]|0;
																	$647 = (($646) - ($641))|0;
																	$648 = (0 + ($647)|0);
																	$649 = $648;
																	$650 = (0 - ($647))|0;
																	$651 = (($648) + ($650)|0);
																	$652 = $651;
																	_memcpy(($651|0),($644|0),($647|0))|0;
																	HEAP32[$637>>2] = $652;
																	HEAP32[$645>>2] = $649;
																	HEAP32[$639>>2] = $636;
																	$653 = ($641|0)==(0);
																	if ($653) {
																		break;
																	}
																	__ZdlPv($644);
																}
															} while(0);
															$654 = (($row$082$us$i) + 1)|0;
															$655 = HEAP32[$new_data$i100>>2]|0;
															$exitcond$i105 = ($654|0)==($632|0);
															if ($exitcond$i105) {
																$$lcssa75$i = $655;
																break L331;
															} else {
																$638 = $655;$row$082$us$i = $654;
															}
														}
													} else {
														$694 = $1376;$row$082$i = 1;
													}
													L341: while(1) {
														$693 = (($694) + (($row$082$i*12)|0)|0);
														$695 = (((($694) + (($row$082$i*12)|0)|0)) + 8|0);
														$696 = HEAP32[$695>>2]|0;
														$697 = HEAP32[$693>>2]|0;
														$698 = (($696) - ($697))|0;
														$699 = ($698>>>0)<($621>>>0);
														$700 = $697;
														do {
															if ($699) {
																$701 = (((($694) + (($row$082$i*12)|0)|0)) + 4|0);
																$702 = HEAP32[$701>>2]|0;
																$703 = (($702) - ($697))|0;
																__THREW__ = 0;
																$704 = (invoke_ii(29,($621|0))|0);
																$705 = __THREW__; __THREW__ = 0;
																$706 = $705&1;
																if ($706) {
																	break L341;
																}
																$707 = (($704) + ($703)|0);
																$708 = $707;
																$709 = (($704) + ($621)|0);
																$710 = $709;
																$711 = (0 - ($703))|0;
																$712 = (($707) + ($711)|0);
																$713 = $712;
																_memcpy(($712|0),($700|0),($703|0))|0;
																HEAP32[$693>>2] = $713;
																HEAP32[$701>>2] = $708;
																HEAP32[$695>>2] = $710;
																$714 = ($697|0)==(0);
																if ($714) {
																	break;
																}
																__ZdlPv($700);
															}
														} while(0);
														$715 = (($row$082$i) + 1)|0;
														$716 = ($715|0)<($632|0);
														$717 = HEAP32[$new_data$i100>>2]|0;
														if ($716) {
															$694 = $717;$row$082$i = $715;
														} else {
															$$lcssa75$i = $717;
															break L331;
														}
													}
													$674 = ___cxa_find_matching_catch_2()|0;
													$675 = tempRet0;
													$lpad$phi$i112$index = $674;$lpad$phi$i112$index18 = $675;
													break L329;
												} else {
													$$lcssa75$i = $1376;
												}
											} while(0);
											$656 = HEAP32[$441>>2]|0;
											$657 = ($$lcssa75$i|0)==($656|0);
											if (!($657)) {
												$661 = (($$lcssa75$i) + (($632*12)|0)|0);
												$662 = (($656) + (($632*12)|0)|0);
												$663 = HEAP32[$662>>2]|0;
												$664 = (((($656) + (($632*12)|0)|0)) + 4|0);
												$665 = HEAP32[$664>>2]|0;
												__THREW__ = 0;
												invoke_viii(54,($661|0),($663|0),($665|0));
												$666 = __THREW__; __THREW__ = 0;
												$667 = $666&1;
												if ($667) {
													label = 246;
													break;
												}
											}
											L353: do {
												if ($633) {
													$658 = ($$01150|0)<(3);
													$659 = (($621) + -1)|0;
													$660 = ($659|0)>(1);
													$row1$080$i = 1;
													L355: while(1) {
														$718 = (($row1$080$i) + -1)|0;
														$719 = HEAP32[$441>>2]|0;
														$720 = (($719) + (($718*12)|0)|0);
														$721 = (($row1$080$i) + 1)|0;
														$722 = (($719) + (($721*12)|0)|0);
														$723 = HEAP32[$new_data$i100>>2]|0;
														$724 = (($723) + (($row1$080$i*12)|0)|0);
														$725 = (($719) + (($row1$080$i*12)|0)|0);
														$726 = HEAP32[$725>>2]|0;
														$727 = (((($723) + (($row1$080$i*12)|0)|0)) + 4|0);
														$728 = HEAP32[$727>>2]|0;
														$729 = (((($723) + (($row1$080$i*12)|0)|0)) + 8|0);
														$730 = HEAP32[$729>>2]|0;
														$731 = ($728|0)==($730|0);
														$732 = $730;
														do {
															if ($731) {
																$736 = $728;
																$737 = HEAP32[$724>>2]|0;
																$738 = (($736) - ($737))|0;
																$739 = (($738) + 1)|0;
																$740 = ($739|0)<(0);
																if ($740) {
																	__THREW__ = 0;
																	invoke_vi(46,($724|0));
																	$741 = __THREW__; __THREW__ = 0;
																	$742 = $741&1;
																	if ($742) {
																		label = 244;
																		break L355;
																	}
																	$$pre$i$i51$i = HEAP32[$724>>2]|0;
																	$$pre$i53$i = HEAP32[$729>>2]|0;
																	$$in$i$i55$i = $$pre$i$i51$i;$$pre$phi$i54$iZ2D = $729;$745 = $$pre$i53$i;
																} else {
																	$$in$i$i55$i = $737;$$pre$phi$i54$iZ2D = $729;$745 = $732;
																}
																$743 = $$in$i$i55$i;
																$744 = (($745) - ($$in$i$i55$i))|0;
																$746 = ($744>>>0)<(1073741823);
																if ($746) {
																	$749 = $744 << 1;
																	$750 = ($749>>>0)<($739>>>0);
																	$751 = $750 ? $739 : $749;
																	$752 = HEAP32[$727>>2]|0;
																	$753 = (($752) - ($$in$i$i55$i))|0;
																	$754 = ($751|0)==(0);
																	if ($754) {
																		$$0$i2$i$i59$i = 0;$759 = 0;$760 = $753;$767 = $752;
																	} else {
																		$$0$i1$i$i58$i = $751;$1377 = $752;$1378 = $753;
																		label = 270;
																	}
																} else {
																	$747 = HEAP32[$727>>2]|0;
																	$748 = (($747) - ($$in$i$i55$i))|0;
																	$$0$i1$i$i58$i = 2147483647;$1377 = $747;$1378 = $748;
																	label = 270;
																}
																if ((label|0) == 270) {
																	label = 0;
																	__THREW__ = 0;
																	$755 = (invoke_ii(29,($$0$i1$i$i58$i|0))|0);
																	$756 = __THREW__; __THREW__ = 0;
																	$757 = $756&1;
																	if ($757) {
																		label = 244;
																		break L355;
																	} else {
																		$$0$i2$i$i59$i = $$0$i1$i$i58$i;$759 = $755;$760 = $1378;$767 = $1377;
																	}
																}
																$758 = (($759) + ($760)|0);
																$761 = (($759) + ($$0$i2$i$i59$i)|0);
																$762 = $761;
																$763 = HEAP8[$726>>0]|0;
																HEAP8[$758>>0] = $763;
																$764 = ((($758)) + 1|0);
																$765 = $764;
																$766 = (($767) - ($$in$i$i55$i))|0;
																$768 = (0 - ($766))|0;
																$769 = (($758) + ($768)|0);
																$770 = $769;
																_memcpy(($769|0),($743|0),($766|0))|0;
																HEAP32[$724>>2] = $770;
																HEAP32[$727>>2] = $765;
																HEAP32[$$pre$phi$i54$iZ2D>>2] = $762;
																$771 = ($$in$i$i55$i|0)==(0);
																if ($771) {
																	break;
																}
																__ZdlPv($743);
															} else {
																$733 = HEAP8[$726>>0]|0;
																HEAP8[$728>>0] = $733;
																$734 = HEAP32[$727>>2]|0;
																$735 = ((($734)) + 1|0);
																HEAP32[$727>>2] = $735;
															}
														} while(0);
														do {
															if ($658) {
																if (!($660)) {
																	break;
																}
																$col$078$i = 1;
																while(1) {
																	$772 = (($col$078$i) + -1)|0;
																	$773 = HEAP32[$720>>2]|0;
																	$774 = (($773) + ($772)|0);
																	$775 = HEAP8[$774>>0]|0;
																	$776 = $775&255;
																	$777 = (($773) + ($col$078$i)|0);
																	$778 = HEAP8[$777>>0]|0;
																	$779 = $778&255;
																	$780 = (($col$078$i) + 1)|0;
																	$781 = (($773) + ($780)|0);
																	$782 = HEAP8[$781>>0]|0;
																	$783 = $782&255;
																	$784 = HEAP32[$725>>2]|0;
																	$785 = (($784) + ($772)|0);
																	$786 = HEAP8[$785>>0]|0;
																	$787 = $786&255;
																	$788 = (($784) + ($col$078$i)|0);
																	$789 = HEAP8[$788>>0]|0;
																	$790 = $789&255;
																	$791 = $790 << 1;
																	$792 = (($784) + ($780)|0);
																	$793 = HEAP8[$792>>0]|0;
																	$794 = $793&255;
																	$795 = HEAP32[$722>>2]|0;
																	$796 = (($795) + ($772)|0);
																	$797 = HEAP8[$796>>0]|0;
																	$798 = $797&255;
																	$799 = (($795) + ($col$078$i)|0);
																	$800 = HEAP8[$799>>0]|0;
																	$801 = $800&255;
																	$802 = (($795) + ($780)|0);
																	$803 = HEAP8[$802>>0]|0;
																	$804 = $803&255;
																	$805 = (($776) + 5)|0;
																	$806 = (($805) + ($779))|0;
																	$807 = (($806) + ($783))|0;
																	$808 = (($807) + ($787))|0;
																	$809 = (($808) + ($791))|0;
																	$810 = (($809) + ($794))|0;
																	$811 = (($810) + ($798))|0;
																	$812 = (($811) + ($801))|0;
																	$813 = (($812) + ($804))|0;
																	$814 = (($813|0) / 10)&-1;
																	$815 = $814&255;
																	$816 = HEAP32[$727>>2]|0;
																	$817 = HEAP32[$729>>2]|0;
																	$818 = ($816|0)==($817|0);
																	do {
																		if ($818) {
																			$822 = $816;
																			$823 = HEAP32[$724>>2]|0;
																			$824 = (($822) - ($823))|0;
																			$825 = (($824) + 1)|0;
																			$826 = ($825|0)<(0);
																			if ($826) {
																				__THREW__ = 0;
																				invoke_vi(46,($724|0));
																				$827 = __THREW__; __THREW__ = 0;
																				$828 = $827&1;
																				if ($828) {
																					label = 242;
																					break L355;
																				}
																				$$pre$i$i36$i118 = HEAP32[$724>>2]|0;
																				$$pre$i38$i119 = HEAP32[$729>>2]|0;
																				$$in$i$i40$i121 = $$pre$i$i36$i118;$831 = $$pre$i38$i119;
																			} else {
																				$$in$i$i40$i121 = $823;$831 = $822;
																			}
																			$829 = $$in$i$i40$i121;
																			$830 = (($831) - ($$in$i$i40$i121))|0;
																			$832 = ($830>>>0)<(1073741823);
																			if ($832) {
																				$835 = $830 << 1;
																				$836 = ($835>>>0)<($825>>>0);
																				$837 = $836 ? $825 : $835;
																				$838 = HEAP32[$727>>2]|0;
																				$839 = (($838) - ($$in$i$i40$i121))|0;
																				$840 = ($837|0)==(0);
																				if ($840) {
																					$$0$i2$i$i44$i126 = 0;$845 = 0;$846 = $839;$852 = $838;
																				} else {
																					$$0$i1$i$i43$i125 = $837;$1379 = $838;$1380 = $839;
																					label = 287;
																				}
																			} else {
																				$833 = HEAP32[$727>>2]|0;
																				$834 = (($833) - ($$in$i$i40$i121))|0;
																				$$0$i1$i$i43$i125 = 2147483647;$1379 = $833;$1380 = $834;
																				label = 287;
																			}
																			if ((label|0) == 287) {
																				label = 0;
																				__THREW__ = 0;
																				$841 = (invoke_ii(29,($$0$i1$i$i43$i125|0))|0);
																				$842 = __THREW__; __THREW__ = 0;
																				$843 = $842&1;
																				if ($843) {
																					label = 242;
																					break L355;
																				} else {
																					$$0$i2$i$i44$i126 = $$0$i1$i$i43$i125;$845 = $841;$846 = $1380;$852 = $1379;
																				}
																			}
																			$844 = (($845) + ($846)|0);
																			$847 = (($845) + ($$0$i2$i$i44$i126)|0);
																			$848 = $847;
																			HEAP8[$844>>0] = $815;
																			$849 = ((($844)) + 1|0);
																			$850 = $849;
																			$851 = (($852) - ($$in$i$i40$i121))|0;
																			$853 = (0 - ($851))|0;
																			$854 = (($844) + ($853)|0);
																			$855 = $854;
																			_memcpy(($854|0),($829|0),($851|0))|0;
																			HEAP32[$724>>2] = $855;
																			HEAP32[$727>>2] = $850;
																			HEAP32[$729>>2] = $848;
																			$856 = ($$in$i$i40$i121|0)==(0);
																			if ($856) {
																				break;
																			}
																			__ZdlPv($829);
																		} else {
																			HEAP8[$816>>0] = $815;
																			$819 = HEAP32[$727>>2]|0;
																			$820 = ((($819)) + 1|0);
																			HEAP32[$727>>2] = $820;
																		}
																	} while(0);
																	$821 = ($780|0)<($659|0);
																	if ($821) {
																		$col$078$i = $780;
																	} else {
																		break;
																	}
																}
															} else {
																if (!($660)) {
																	break;
																}
																$col2$077$i = 1;
																while(1) {
																	$857 = (($col2$077$i) + -1)|0;
																	$858 = HEAP32[$720>>2]|0;
																	$859 = (($858) + ($857)|0);
																	$860 = HEAP8[$859>>0]|0;
																	$861 = $860&255;
																	$862 = (($858) + ($col2$077$i)|0);
																	$863 = HEAP8[$862>>0]|0;
																	$864 = $863&255;
																	$865 = (($864) + ($861))|0;
																	$866 = (($col2$077$i) + 1)|0;
																	$867 = (($858) + ($866)|0);
																	$868 = HEAP8[$867>>0]|0;
																	$869 = $868&255;
																	$870 = (($865) + ($869))|0;
																	$871 = HEAP32[$725>>2]|0;
																	$872 = (($871) + ($857)|0);
																	$873 = HEAP8[$872>>0]|0;
																	$874 = $873&255;
																	$875 = (($870) + ($874))|0;
																	$876 = (($871) + ($col2$077$i)|0);
																	$877 = HEAP8[$876>>0]|0;
																	$878 = $877&255;
																	$879 = (($875) + ($878))|0;
																	$880 = (($871) + ($866)|0);
																	$881 = HEAP8[$880>>0]|0;
																	$882 = $881&255;
																	$883 = (($879) + ($882))|0;
																	$884 = HEAP32[$722>>2]|0;
																	$885 = (($884) + ($857)|0);
																	$886 = HEAP8[$885>>0]|0;
																	$887 = $886&255;
																	$888 = (($883) + ($887))|0;
																	$889 = (($884) + ($col2$077$i)|0);
																	$890 = HEAP8[$889>>0]|0;
																	$891 = $890&255;
																	$892 = (($888) + ($891))|0;
																	$893 = (($884) + ($866)|0);
																	$894 = HEAP8[$893>>0]|0;
																	$895 = $894&255;
																	$896 = (($892) + ($895))|0;
																	$897 = $896 << 1;
																	$898 = (($897) + 9)|0;
																	$899 = (($898|0) / 18)&-1;
																	$900 = $899&255;
																	$901 = HEAP32[$727>>2]|0;
																	$902 = HEAP32[$729>>2]|0;
																	$903 = ($901|0)==($902|0);
																	do {
																		if ($903) {
																			$907 = $901;
																			$908 = HEAP32[$724>>2]|0;
																			$909 = (($907) - ($908))|0;
																			$910 = (($909) + 1)|0;
																			$911 = ($910|0)<(0);
																			if ($911) {
																				__THREW__ = 0;
																				invoke_vi(46,($724|0));
																				$912 = __THREW__; __THREW__ = 0;
																				$913 = $912&1;
																				if ($913) {
																					label = 243;
																					break L355;
																				}
																				$$pre$i$i8$i = HEAP32[$724>>2]|0;
																				$$pre$i10$i = HEAP32[$729>>2]|0;
																				$$in$i$i12$i = $$pre$i$i8$i;$916 = $$pre$i10$i;
																			} else {
																				$$in$i$i12$i = $908;$916 = $907;
																			}
																			$914 = $$in$i$i12$i;
																			$915 = (($916) - ($$in$i$i12$i))|0;
																			$917 = ($915>>>0)<(1073741823);
																			if ($917) {
																				$920 = $915 << 1;
																				$921 = ($920>>>0)<($910>>>0);
																				$922 = $921 ? $910 : $920;
																				$923 = HEAP32[$727>>2]|0;
																				$924 = (($923) - ($$in$i$i12$i))|0;
																				$925 = ($922|0)==(0);
																				if ($925) {
																					$$0$i2$i$i16$i = 0;$930 = 0;$931 = $924;$937 = $923;
																				} else {
																					$$0$i1$i$i15$i = $922;$1381 = $923;$1382 = $924;
																					label = 299;
																				}
																			} else {
																				$918 = HEAP32[$727>>2]|0;
																				$919 = (($918) - ($$in$i$i12$i))|0;
																				$$0$i1$i$i15$i = 2147483647;$1381 = $918;$1382 = $919;
																				label = 299;
																			}
																			if ((label|0) == 299) {
																				label = 0;
																				__THREW__ = 0;
																				$926 = (invoke_ii(29,($$0$i1$i$i15$i|0))|0);
																				$927 = __THREW__; __THREW__ = 0;
																				$928 = $927&1;
																				if ($928) {
																					label = 243;
																					break L355;
																				} else {
																					$$0$i2$i$i16$i = $$0$i1$i$i15$i;$930 = $926;$931 = $1382;$937 = $1381;
																				}
																			}
																			$929 = (($930) + ($931)|0);
																			$932 = (($930) + ($$0$i2$i$i16$i)|0);
																			$933 = $932;
																			HEAP8[$929>>0] = $900;
																			$934 = ((($929)) + 1|0);
																			$935 = $934;
																			$936 = (($937) - ($$in$i$i12$i))|0;
																			$938 = (0 - ($936))|0;
																			$939 = (($929) + ($938)|0);
																			$940 = $939;
																			_memcpy(($939|0),($914|0),($936|0))|0;
																			HEAP32[$724>>2] = $940;
																			HEAP32[$727>>2] = $935;
																			HEAP32[$729>>2] = $933;
																			$941 = ($$in$i$i12$i|0)==(0);
																			if ($941) {
																				break;
																			}
																			__ZdlPv($914);
																		} else {
																			HEAP8[$901>>0] = $900;
																			$904 = HEAP32[$727>>2]|0;
																			$905 = ((($904)) + 1|0);
																			HEAP32[$727>>2] = $905;
																		}
																	} while(0);
																	$906 = ($866|0)<($659|0);
																	if ($906) {
																		$col2$077$i = $866;
																	} else {
																		break;
																	}
																}
															}
														} while(0);
														$942 = HEAP32[$725>>2]|0;
														$943 = (($942) + ($659)|0);
														$944 = HEAP32[$727>>2]|0;
														$945 = HEAP32[$729>>2]|0;
														$946 = ($944|0)==($945|0);
														$947 = $945;
														do {
															if ($946) {
																$952 = $944;
																$953 = HEAP32[$724>>2]|0;
																$954 = (($952) - ($953))|0;
																$955 = (($954) + 1)|0;
																$956 = ($955|0)<(0);
																if ($956) {
																	__THREW__ = 0;
																	invoke_vi(46,($724|0));
																	$957 = __THREW__; __THREW__ = 0;
																	$958 = $957&1;
																	if ($958) {
																		label = 244;
																		break L355;
																	}
																	$$pre$i$i$i130 = HEAP32[$724>>2]|0;
																	$$pre$i3$i132 = HEAP32[$729>>2]|0;
																	$$in$i$i$i134 = $$pre$i$i$i130;$$pre$phi$i$iZ2D = $729;$961 = $$pre$i3$i132;
																} else {
																	$$in$i$i$i134 = $953;$$pre$phi$i$iZ2D = $729;$961 = $947;
																}
																$959 = $$in$i$i$i134;
																$960 = (($961) - ($$in$i$i$i134))|0;
																$962 = ($960>>>0)<(1073741823);
																if ($962) {
																	$965 = $960 << 1;
																	$966 = ($965>>>0)<($955>>>0);
																	$967 = $966 ? $955 : $965;
																	$968 = HEAP32[$727>>2]|0;
																	$969 = (($968) - ($$in$i$i$i134))|0;
																	$970 = ($967|0)==(0);
																	if ($970) {
																		$$0$i2$i$i$i138 = 0;$975 = 0;$976 = $969;$983 = $968;
																	} else {
																		$$0$i1$i$i$i137 = $967;$1383 = $968;$1384 = $969;
																		label = 312;
																	}
																} else {
																	$963 = HEAP32[$727>>2]|0;
																	$964 = (($963) - ($$in$i$i$i134))|0;
																	$$0$i1$i$i$i137 = 2147483647;$1383 = $963;$1384 = $964;
																	label = 312;
																}
																if ((label|0) == 312) {
																	label = 0;
																	__THREW__ = 0;
																	$971 = (invoke_ii(29,($$0$i1$i$i$i137|0))|0);
																	$972 = __THREW__; __THREW__ = 0;
																	$973 = $972&1;
																	if ($973) {
																		label = 244;
																		break L355;
																	} else {
																		$$0$i2$i$i$i138 = $$0$i1$i$i$i137;$975 = $971;$976 = $1384;$983 = $1383;
																	}
																}
																$974 = (($975) + ($976)|0);
																$977 = (($975) + ($$0$i2$i$i$i138)|0);
																$978 = $977;
																$979 = HEAP8[$943>>0]|0;
																HEAP8[$974>>0] = $979;
																$980 = ((($974)) + 1|0);
																$981 = $980;
																$982 = (($983) - ($$in$i$i$i134))|0;
																$984 = (0 - ($982))|0;
																$985 = (($974) + ($984)|0);
																$986 = $985;
																_memcpy(($985|0),($959|0),($982|0))|0;
																HEAP32[$724>>2] = $986;
																HEAP32[$727>>2] = $981;
																HEAP32[$$pre$phi$i$iZ2D>>2] = $978;
																$987 = ($$in$i$i$i134|0)==(0);
																if ($987) {
																	break;
																}
																__ZdlPv($959);
															} else {
																$948 = HEAP8[$943>>0]|0;
																HEAP8[$944>>0] = $948;
																$949 = HEAP32[$727>>2]|0;
																$950 = ((($949)) + 1|0);
																HEAP32[$727>>2] = $950;
															}
														} while(0);
														$951 = ($721|0)<($632|0);
														if ($951) {
															$row1$080$i = $721;
														} else {
															break L353;
														}
													}
													if ((label|0) == 242) {
														$668 = ___cxa_find_matching_catch_2()|0;
														$669 = tempRet0;
														$lpad$phi$i112$index = $668;$lpad$phi$i112$index18 = $669;
														break L329;
													}
													else if ((label|0) == 243) {
														$670 = ___cxa_find_matching_catch_2()|0;
														$671 = tempRet0;
														$lpad$phi$i112$index = $670;$lpad$phi$i112$index18 = $671;
														break L329;
													}
													else if ((label|0) == 244) {
														$672 = ___cxa_find_matching_catch_2()|0;
														$673 = tempRet0;
														$lpad$phi$i112$index = $672;$lpad$phi$i112$index18 = $673;
														break L329;
													}
												}
											} while(0);
											$988 = HEAP32[$441>>2]|0;
											$989 = HEAP32[$new_data$i100>>2]|0;
											HEAP32[$441>>2] = $989;
											HEAP32[$new_data$i100>>2] = $988;
											$990 = ((($new_data$i100)) + 4|0);
											$991 = HEAP32[$442>>2]|0;
											$992 = HEAP32[$990>>2]|0;
											HEAP32[$442>>2] = $992;
											HEAP32[$990>>2] = $991;
											$993 = ((($new_data$i100)) + 8|0);
											$994 = HEAP32[$578>>2]|0;
											$995 = HEAP32[$993>>2]|0;
											HEAP32[$578>>2] = $995;
											HEAP32[$993>>2] = $994;
											$996 = $988;
											$997 = ($988|0)==(0);
											$998 = $991;
											if (!($997)) {
												$999 = $988;
												$1000 = ($998|0)==($996|0);
												if ($1000) {
													$1010 = $999;
												} else {
													$1002 = $998;
													while(1) {
														$1001 = ((($1002)) + -12|0);
														HEAP32[$990>>2] = $1001;
														$1003 = HEAP32[$1001>>2]|0;
														$1004 = ($1003|0)==(0|0);
														if ($1004) {
															$1005 = $1001;
														} else {
															$1007 = ((($1002)) + -8|0);
															$1008 = HEAP32[$1007>>2]|0;
															$1009 = ($1008|0)==($1003|0);
															if (!($1009)) {
																HEAP32[$1007>>2] = $1003;
															}
															__ZdlPv($1003);
															$$pre$i$i$i$i143 = HEAP32[$990>>2]|0;
															$1005 = $$pre$i$i$i$i143;
														}
														$1006 = ($1005|0)==($996|0);
														if ($1006) {
															break;
														} else {
															$1002 = $1005;
														}
													}
													$$pre$i$i146 = HEAP32[$new_data$i100>>2]|0;
													$1010 = $$pre$i$i146;
												}
												__ZdlPv($1010);
											}
											$$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
											break L245;
										}
									} while(0);
									if ((label|0) == 246) {
										$676 = ___cxa_find_matching_catch_2()|0;
										$677 = tempRet0;
										$lpad$phi$i112$index = $676;$lpad$phi$i112$index18 = $677;
									}
									$678 = HEAP32[$new_data$i100>>2]|0;
									$679 = ($678|0)==(0|0);
									if ($679) {
										___resumeException($lpad$phi$i112$index|0);
										// unreachable;
									}
									$680 = ((($new_data$i100)) + 4|0);
									$681 = HEAP32[$680>>2]|0;
									$682 = ($681|0)==($678|0);
									if ($682) {
										$692 = $678;
									} else {
										$684 = $681;
										while(1) {
											$683 = ((($684)) + -12|0);
											HEAP32[$680>>2] = $683;
											$685 = HEAP32[$683>>2]|0;
											$686 = ($685|0)==(0|0);
											if ($686) {
												$687 = $683;
											} else {
												$689 = ((($684)) + -8|0);
												$690 = HEAP32[$689>>2]|0;
												$691 = ($690|0)==($685|0);
												if (!($691)) {
													HEAP32[$689>>2] = $685;
												}
												__ZdlPv($685);
												$$pre$i$i$i26$i = HEAP32[$680>>2]|0;
												$687 = $$pre$i$i$i26$i;
											}
											$688 = ($687|0)==($678|0);
											if ($688) {
												break;
											} else {
												$684 = $687;
											}
										}
										$$pre$i29$i = HEAP32[$new_data$i100>>2]|0;
										$692 = $$pre$i29$i;
									}
									__ZdlPv($692);
									___resumeException($lpad$phi$i112$index|0);
									// unreachable;
								}
								$1011 = (($$01150|0) / 2)&-1;
								$1012 = $1011 << 1;
								$1013 = $1012 | 1;
								$1014 = Math_imul($1013, $1013)|0;
								$1015 = HEAP32[$442>>2]|0;
								$1016 = HEAP32[$441>>2]|0;
								$1017 = (($1015) - ($1016))|0;
								$1018 = (($1017|0) / 12)&-1;
								$$cast$i = $1016;
								$1019 = ((($$cast$i)) + 4|0);
								$1020 = HEAP32[$1019>>2]|0;
								$1021 = $1016;
								$1022 = HEAP32[$1021>>2]|0;
								$1023 = (($1020) - ($1022))|0;
								$1024 = ($1018|0)<($1013|0);
								$1025 = ($1023|0)<($1013|0);
								$or$cond1$i = $1024 | $1025;
								if ($or$cond1$i) {
									$$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
									break L245;
								}
								__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($new_data$i,$1018);
								$row$093$i = 0;
								while(1) {
									$1049 = HEAP32[$new_data$i>>2]|0;
									$1050 = HEAP32[$441>>2]|0;
									$1051 = ($1049|0)==($1050|0);
									if (!($1051)) {
										$1052 = (($1049) + (($row$093$i*12)|0)|0);
										$1053 = (($1050) + (($row$093$i*12)|0)|0);
										$1054 = HEAP32[$1053>>2]|0;
										$1055 = (((($1050) + (($row$093$i*12)|0)|0)) + 4|0);
										$1056 = HEAP32[$1055>>2]|0;
										__THREW__ = 0;
										invoke_viii(54,($1052|0),($1054|0),($1056|0));
										$1057 = __THREW__; __THREW__ = 0;
										$1058 = $1057&1;
										if ($1058) {
											label = 343;
											break;
										}
									}
									$1059 = (($row$093$i) + 1)|0;
									$1060 = ($1059|0)<($1011|0);
									if ($1060) {
										$row$093$i = $1059;
									} else {
										label = 328;
										break;
									}
								}
								L473: do {
									if ((label|0) == 328) {
										$1026 = (($1018) - ($1011))|0;
										$1027 = ($1011|0)<($1026|0);
										L475: do {
											if ($1027) {
												$1028 = ($1020|0)==($1022|0);
												if ($1028) {
													$1029 = (0 + ($1023)|0);
													$1030 = $1029;
													$row1$090$us$i = $1011;
													while(1) {
														$1031 = HEAP32[$new_data$i>>2]|0;
														$1032 = (($1031) + (($row1$090$us$i*12)|0)|0);
														$1033 = (((($1031) + (($row1$090$us$i*12)|0)|0)) + 8|0);
														$1034 = HEAP32[$1033>>2]|0;
														$1035 = HEAP32[$1032>>2]|0;
														$1036 = (($1034) - ($1035))|0;
														$1037 = ($1036>>>0)<($1023>>>0);
														$1038 = $1035;
														do {
															if ($1037) {
																$1039 = (((($1031) + (($row1$090$us$i*12)|0)|0)) + 4|0);
																$1040 = HEAP32[$1039>>2]|0;
																$1041 = (($1040) - ($1035))|0;
																$1042 = (0 + ($1041)|0);
																$1043 = $1042;
																$1044 = (0 - ($1041))|0;
																$1045 = (($1042) + ($1044)|0);
																$1046 = $1045;
																_memcpy(($1045|0),($1038|0),($1041|0))|0;
																HEAP32[$1032>>2] = $1046;
																HEAP32[$1039>>2] = $1043;
																HEAP32[$1033>>2] = $1030;
																$1047 = ($1035|0)==(0);
																if ($1047) {
																	break;
																}
																__ZdlPv($1038);
															}
														} while(0);
														$1048 = (($row1$090$us$i) + 1)|0;
														$exitcond115$i = ($1048|0)==($1026|0);
														if ($exitcond115$i) {
															$row2$088$i = $1026;
															break L475;
														} else {
															$row1$090$us$i = $1048;
														}
													}
												} else {
													$row1$090$i = $1011;
												}
												L485: while(1) {
													$1088 = HEAP32[$new_data$i>>2]|0;
													$1089 = (($1088) + (($row1$090$i*12)|0)|0);
													$1090 = (((($1088) + (($row1$090$i*12)|0)|0)) + 8|0);
													$1091 = HEAP32[$1090>>2]|0;
													$1092 = HEAP32[$1089>>2]|0;
													$1093 = (($1091) - ($1092))|0;
													$1094 = ($1093>>>0)<($1023>>>0);
													$1095 = $1092;
													do {
														if ($1094) {
															$1096 = (((($1088) + (($row1$090$i*12)|0)|0)) + 4|0);
															$1097 = HEAP32[$1096>>2]|0;
															$1098 = (($1097) - ($1092))|0;
															__THREW__ = 0;
															$1099 = (invoke_ii(29,($1023|0))|0);
															$1100 = __THREW__; __THREW__ = 0;
															$1101 = $1100&1;
															if ($1101) {
																break L485;
															}
															$1102 = (($1099) + ($1098)|0);
															$1103 = $1102;
															$1104 = (($1099) + ($1023)|0);
															$1105 = $1104;
															$1106 = (0 - ($1098))|0;
															$1107 = (($1102) + ($1106)|0);
															$1108 = $1107;
															_memcpy(($1107|0),($1095|0),($1098|0))|0;
															HEAP32[$1089>>2] = $1108;
															HEAP32[$1096>>2] = $1103;
															HEAP32[$1090>>2] = $1105;
															$1109 = ($1092|0)==(0);
															if ($1109) {
																break;
															}
															__ZdlPv($1095);
														}
													} while(0);
													$1110 = (($row1$090$i) + 1)|0;
													$1111 = ($1110|0)<($1026|0);
													if ($1111) {
														$row1$090$i = $1110;
													} else {
														$row2$088$i = $1026;
														break L475;
													}
												}
												$1069 = ___cxa_find_matching_catch_2()|0;
												$1070 = tempRet0;
												$lpad$phi$i$index = $1069;$lpad$phi$i$index31 = $1070;
												break L473;
											} else {
												$row2$088$i = $1026;
											}
										} while(0);
										while(1) {
											$1117 = HEAP32[$new_data$i>>2]|0;
											$1118 = HEAP32[$441>>2]|0;
											$1119 = ($1117|0)==($1118|0);
											if (!($1119)) {
												$1120 = (($1117) + (($row2$088$i*12)|0)|0);
												$1121 = (($1118) + (($row2$088$i*12)|0)|0);
												$1122 = HEAP32[$1121>>2]|0;
												$1123 = (((($1118) + (($row2$088$i*12)|0)|0)) + 4|0);
												$1124 = HEAP32[$1123>>2]|0;
												__THREW__ = 0;
												invoke_viii(54,($1120|0),($1122|0),($1124|0));
												$1125 = __THREW__; __THREW__ = 0;
												$1126 = $1125&1;
												if ($1126) {
													label = 341;
													break;
												}
											}
											$1127 = (($row2$088$i) + 1)|0;
											$1128 = ($1127|0)<($1018|0);
											if ($1128) {
												$row2$088$i = $1127;
											} else {
												break;
											}
										}
										if ((label|0) == 341) {
											$1067 = ___cxa_find_matching_catch_2()|0;
											$1068 = tempRet0;
											$lpad$phi$i$index = $1067;$lpad$phi$i$index31 = $1068;
											break;
										}
										L501: do {
											if ($1027) {
												$1112 = (($1023) - ($1011))|0;
												$1113 = ($1011|0)<($1112|0);
												$1114 = (0 - ($1011))|0;
												$1115 = ($1011|0)>($1114|0);
												$1116 = $1014 << 1;
												$row3$083$i = $1011;
												L503: while(1) {
													$1129 = HEAP32[$441>>2]|0;
													$1130 = HEAP32[$new_data$i>>2]|0;
													$1131 = (($1130) + (($row3$083$i*12)|0)|0);
													$1132 = (($1129) + (($row3$083$i*12)|0)|0);
													$1133 = (((($1130) + (($row3$083$i*12)|0)|0)) + 4|0);
													$1134 = (((($1130) + (($row3$083$i*12)|0)|0)) + 8|0);
													$col$067$i = 0;
													while(1) {
														$1196 = HEAP32[$1132>>2]|0;
														$1197 = (($1196) + ($col$067$i)|0);
														$1198 = HEAP32[$1133>>2]|0;
														$1199 = HEAP32[$1134>>2]|0;
														$1200 = ($1198|0)==($1199|0);
														do {
															if ($1200) {
																$1204 = $1198;
																$1205 = HEAP32[$1131>>2]|0;
																$1206 = (($1204) - ($1205))|0;
																$1207 = (($1206) + 1)|0;
																$1208 = ($1207|0)<(0);
																if ($1208) {
																	__THREW__ = 0;
																	invoke_vi(46,($1131|0));
																	$1209 = __THREW__; __THREW__ = 0;
																	$1210 = $1209&1;
																	if ($1210) {
																		label = 340;
																		break L503;
																	}
																	$$pre$i$i36$i = HEAP32[$1131>>2]|0;
																	$$pre$i38$i = HEAP32[$1134>>2]|0;
																	$$in$i$i40$i = $$pre$i$i36$i;$1213 = $$pre$i38$i;
																} else {
																	$$in$i$i40$i = $1205;$1213 = $1204;
																}
																$1211 = $$in$i$i40$i;
																$1212 = (($1213) - ($$in$i$i40$i))|0;
																$1214 = ($1212>>>0)<(1073741823);
																if ($1214) {
																	$1217 = $1212 << 1;
																	$1218 = ($1217>>>0)<($1207>>>0);
																	$1219 = $1218 ? $1207 : $1217;
																	$1220 = HEAP32[$1133>>2]|0;
																	$1221 = (($1220) - ($$in$i$i40$i))|0;
																	$1222 = ($1219|0)==(0);
																	if ($1222) {
																		$$0$i2$i$i44$i = 0;$1227 = 0;$1228 = $1221;$1235 = $1220;
																	} else {
																		$$0$i1$i$i43$i = $1219;$1387 = $1220;$1388 = $1221;
																		label = 392;
																	}
																} else {
																	$1215 = HEAP32[$1133>>2]|0;
																	$1216 = (($1215) - ($$in$i$i40$i))|0;
																	$$0$i1$i$i43$i = 2147483647;$1387 = $1215;$1388 = $1216;
																	label = 392;
																}
																if ((label|0) == 392) {
																	label = 0;
																	__THREW__ = 0;
																	$1223 = (invoke_ii(29,($$0$i1$i$i43$i|0))|0);
																	$1224 = __THREW__; __THREW__ = 0;
																	$1225 = $1224&1;
																	if ($1225) {
																		label = 340;
																		break L503;
																	} else {
																		$$0$i2$i$i44$i = $$0$i1$i$i43$i;$1227 = $1223;$1228 = $1388;$1235 = $1387;
																	}
																}
																$1226 = (($1227) + ($1228)|0);
																$1229 = (($1227) + ($$0$i2$i$i44$i)|0);
																$1230 = $1229;
																$1231 = HEAP8[$1197>>0]|0;
																HEAP8[$1226>>0] = $1231;
																$1232 = ((($1226)) + 1|0);
																$1233 = $1232;
																$1234 = (($1235) - ($$in$i$i40$i))|0;
																$1236 = (0 - ($1234))|0;
																$1237 = (($1226) + ($1236)|0);
																$1238 = $1237;
																_memcpy(($1237|0),($1211|0),($1234|0))|0;
																HEAP32[$1131>>2] = $1238;
																HEAP32[$1133>>2] = $1233;
																HEAP32[$1134>>2] = $1230;
																$1239 = ($$in$i$i40$i|0)==(0);
																if ($1239) {
																	break;
																}
																__ZdlPv($1211);
															} else {
																$1201 = HEAP8[$1197>>0]|0;
																HEAP8[$1198>>0] = $1201;
																$1202 = HEAP32[$1133>>2]|0;
																$1203 = ((($1202)) + 1|0);
																HEAP32[$1133>>2] = $1203;
															}
														} while(0);
														$1240 = (($col$067$i) + 1)|0;
														$1241 = ($1240|0)<($1011|0);
														if ($1241) {
															$col$067$i = $1240;
														} else {
															break;
														}
													}
													L523: do {
														if ($1113) {
															if ($1115) {
																$col4$076$us$i = $1011;
															} else {
																$1135 = (($1014|0) / ($1116|0))&-1;
																$1136 = $1135&255;
																$col4$076$i = $1011;
																while(1) {
																	$1242 = HEAP32[$1133>>2]|0;
																	$1243 = HEAP32[$1134>>2]|0;
																	$1244 = ($1242|0)==($1243|0);
																	do {
																		if ($1244) {
																			$1247 = $1242;
																			$1248 = HEAP32[$1131>>2]|0;
																			$1249 = (($1247) - ($1248))|0;
																			$1250 = (($1249) + 1)|0;
																			$1251 = ($1250|0)<(0);
																			if ($1251) {
																				__THREW__ = 0;
																				invoke_vi(46,($1131|0));
																				$1252 = __THREW__; __THREW__ = 0;
																				$1253 = $1252&1;
																				if ($1253) {
																					label = 339;
																					break L503;
																				}
																				$$pre$i$i19$i = HEAP32[$1131>>2]|0;
																				$$pre$i21$i = HEAP32[$1134>>2]|0;
																				$$in$i$i23$i = $$pre$i$i19$i;$1256 = $$pre$i21$i;
																			} else {
																				$$in$i$i23$i = $1248;$1256 = $1247;
																			}
																			$1254 = $$in$i$i23$i;
																			$1255 = (($1256) - ($$in$i$i23$i))|0;
																			$1257 = ($1255>>>0)<(1073741823);
																			if ($1257) {
																				$1260 = $1255 << 1;
																				$1261 = ($1260>>>0)<($1250>>>0);
																				$1262 = $1261 ? $1250 : $1260;
																				$1263 = HEAP32[$1133>>2]|0;
																				$1264 = (($1263) - ($$in$i$i23$i))|0;
																				$1265 = ($1262|0)==(0);
																				if ($1265) {
																					$$0$i2$i$i27$i = 0;$1270 = 0;$1271 = $1264;$1277 = $1263;
																				} else {
																					$$0$i1$i$i26$i = $1262;$1389 = $1263;$1390 = $1264;
																					label = 404;
																				}
																			} else {
																				$1258 = HEAP32[$1133>>2]|0;
																				$1259 = (($1258) - ($$in$i$i23$i))|0;
																				$$0$i1$i$i26$i = 2147483647;$1389 = $1258;$1390 = $1259;
																				label = 404;
																			}
																			if ((label|0) == 404) {
																				label = 0;
																				__THREW__ = 0;
																				$1266 = (invoke_ii(29,($$0$i1$i$i26$i|0))|0);
																				$1267 = __THREW__; __THREW__ = 0;
																				$1268 = $1267&1;
																				if ($1268) {
																					label = 339;
																					break L503;
																				} else {
																					$$0$i2$i$i27$i = $$0$i1$i$i26$i;$1270 = $1266;$1271 = $1390;$1277 = $1389;
																				}
																			}
																			$1269 = (($1270) + ($1271)|0);
																			$1272 = (($1270) + ($$0$i2$i$i27$i)|0);
																			$1273 = $1272;
																			HEAP8[$1269>>0] = $1136;
																			$1274 = ((($1269)) + 1|0);
																			$1275 = $1274;
																			$1276 = (($1277) - ($$in$i$i23$i))|0;
																			$1278 = (0 - ($1276))|0;
																			$1279 = (($1269) + ($1278)|0);
																			$1280 = $1279;
																			_memcpy(($1279|0),($1254|0),($1276|0))|0;
																			HEAP32[$1131>>2] = $1280;
																			HEAP32[$1133>>2] = $1275;
																			HEAP32[$1134>>2] = $1273;
																			$1281 = ($$in$i$i23$i|0)==(0);
																			if ($1281) {
																				break;
																			}
																			__ZdlPv($1254);
																		} else {
																			HEAP8[$1242>>0] = $1136;
																			$1245 = HEAP32[$1133>>2]|0;
																			$1246 = ((($1245)) + 1|0);
																			HEAP32[$1133>>2] = $1246;
																		}
																	} while(0);
																	$1282 = (($col4$076$i) + 1)|0;
																	$1283 = ($1282|0)<($1112|0);
																	if ($1283) {
																		$col4$076$i = $1282;
																	} else {
																		$col5$080$i = $1112;
																		break L523;
																	}
																}
															}
															while(1) {
																$1178 = HEAP32[$441>>2]|0;
																$r$072$us$us$i = $1114;$sum$071$us$us$i = 0;
																while(1) {
																	$1184 = (($r$072$us$us$i) + ($row3$083$i))|0;
																	$1185 = (($1178) + (($1184*12)|0)|0);
																	$1186 = HEAP32[$1185>>2]|0;
																	$c$069$us$us$i = $1114;$sum$168$us$us$i = $sum$071$us$us$i;
																	while(1) {
																		$1188 = (($c$069$us$us$i) + ($col4$076$us$i))|0;
																		$1189 = (($1186) + ($1188)|0);
																		$1190 = HEAP8[$1189>>0]|0;
																		$1191 = $1190&255;
																		$1192 = (($1191) + ($sum$168$us$us$i))|0;
																		$1193 = (($c$069$us$us$i) + 1)|0;
																		$exitcond113$i = ($1193|0)==($1011|0);
																		if ($exitcond113$i) {
																			$$lcssa211 = $1192;
																			break;
																		} else {
																			$c$069$us$us$i = $1193;$sum$168$us$us$i = $1192;
																		}
																	}
																	$1187 = (($r$072$us$us$i) + 1)|0;
																	$exitcond114$i = ($1187|0)==($1011|0);
																	if ($exitcond114$i) {
																		$$lcssa211$lcssa = $$lcssa211;
																		break;
																	} else {
																		$r$072$us$us$i = $1187;$sum$071$us$us$i = $$lcssa211;
																	}
																}
																$1179 = $$lcssa211$lcssa << 1;
																$1180 = (($1179) + ($1014))|0;
																$1181 = (($1180|0) / ($1116|0))&-1;
																$1137 = $1181&255;
																$1138 = HEAP32[$1133>>2]|0;
																$1182 = HEAP32[$1134>>2]|0;
																$1183 = ($1138|0)==($1182|0);
																do {
																	if ($1183) {
																		$1141 = $1138;
																		$1142 = HEAP32[$1131>>2]|0;
																		$1143 = (($1141) - ($1142))|0;
																		$1144 = (($1143) + 1)|0;
																		$1145 = ($1144|0)<(0);
																		if ($1145) {
																			__THREW__ = 0;
																			invoke_vi(46,($1131|0));
																			$1146 = __THREW__; __THREW__ = 0;
																			$1147 = $1146&1;
																			if ($1147) {
																				label = 383;
																				break L503;
																			}
																			$$pre$i$i19$us$i = HEAP32[$1131>>2]|0;
																			$$pre$i21$us$i = HEAP32[$1134>>2]|0;
																			$$in$i$i23$us$i = $$pre$i$i19$us$i;$1150 = $$pre$i21$us$i;
																		} else {
																			$$in$i$i23$us$i = $1142;$1150 = $1141;
																		}
																		$1148 = $$in$i$i23$us$i;
																		$1149 = (($1150) - ($$in$i$i23$us$i))|0;
																		$1151 = ($1149>>>0)<(1073741823);
																		if ($1151) {
																			$1154 = $1149 << 1;
																			$1155 = ($1154>>>0)<($1144>>>0);
																			$1156 = $1155 ? $1144 : $1154;
																			$1157 = HEAP32[$1133>>2]|0;
																			$1158 = (($1157) - ($$in$i$i23$us$i))|0;
																			$1159 = ($1156|0)==(0);
																			if ($1159) {
																				$$0$i2$i$i27$us$i = 0;$1164 = 0;$1165 = $1158;$1171 = $1157;
																			} else {
																				$$0$i1$i$i26$us$i = $1156;$1385 = $1157;$1386 = $1158;
																				label = 374;
																			}
																		} else {
																			$1152 = HEAP32[$1133>>2]|0;
																			$1153 = (($1152) - ($$in$i$i23$us$i))|0;
																			$$0$i1$i$i26$us$i = 2147483647;$1385 = $1152;$1386 = $1153;
																			label = 374;
																		}
																		if ((label|0) == 374) {
																			label = 0;
																			__THREW__ = 0;
																			$1160 = (invoke_ii(29,($$0$i1$i$i26$us$i|0))|0);
																			$1161 = __THREW__; __THREW__ = 0;
																			$1162 = $1161&1;
																			if ($1162) {
																				label = 383;
																				break L503;
																			} else {
																				$$0$i2$i$i27$us$i = $$0$i1$i$i26$us$i;$1164 = $1160;$1165 = $1386;$1171 = $1385;
																			}
																		}
																		$1163 = (($1164) + ($1165)|0);
																		$1166 = (($1164) + ($$0$i2$i$i27$us$i)|0);
																		$1167 = $1166;
																		HEAP8[$1163>>0] = $1137;
																		$1168 = ((($1163)) + 1|0);
																		$1169 = $1168;
																		$1170 = (($1171) - ($$in$i$i23$us$i))|0;
																		$1172 = (0 - ($1170))|0;
																		$1173 = (($1163) + ($1172)|0);
																		$1174 = $1173;
																		_memcpy(($1173|0),($1148|0),($1170|0))|0;
																		HEAP32[$1131>>2] = $1174;
																		HEAP32[$1133>>2] = $1169;
																		HEAP32[$1134>>2] = $1167;
																		$1175 = ($$in$i$i23$us$i|0)==(0);
																		if ($1175) {
																			break;
																		}
																		__ZdlPv($1148);
																	} else {
																		HEAP8[$1138>>0] = $1137;
																		$1139 = HEAP32[$1133>>2]|0;
																		$1140 = ((($1139)) + 1|0);
																		HEAP32[$1133>>2] = $1140;
																	}
																} while(0);
																$1176 = (($col4$076$us$i) + 1)|0;
																$1177 = ($1176|0)<($1112|0);
																if ($1177) {
																	$col4$076$us$i = $1176;
																} else {
																	$col5$080$i = $1112;
																	break;
																}
															}
														} else {
															$col5$080$i = $1112;
														}
													} while(0);
													while(1) {
														$1286 = HEAP32[$1132>>2]|0;
														$1287 = (($1286) + ($col5$080$i)|0);
														$1288 = HEAP32[$1133>>2]|0;
														$1289 = HEAP32[$1134>>2]|0;
														$1290 = ($1288|0)==($1289|0);
														do {
															if ($1290) {
																$1294 = $1288;
																$1295 = HEAP32[$1131>>2]|0;
																$1296 = (($1294) - ($1295))|0;
																$1297 = (($1296) + 1)|0;
																$1298 = ($1297|0)<(0);
																if ($1298) {
																	__THREW__ = 0;
																	invoke_vi(46,($1131|0));
																	$1299 = __THREW__; __THREW__ = 0;
																	$1300 = $1299&1;
																	if ($1300) {
																		label = 338;
																		break L503;
																	}
																	$$pre$i$i$i = HEAP32[$1131>>2]|0;
																	$$pre$i3$i = HEAP32[$1134>>2]|0;
																	$$in$i$i$i = $$pre$i$i$i;$1303 = $$pre$i3$i;
																} else {
																	$$in$i$i$i = $1295;$1303 = $1294;
																}
																$1301 = $$in$i$i$i;
																$1302 = (($1303) - ($$in$i$i$i))|0;
																$1304 = ($1302>>>0)<(1073741823);
																if ($1304) {
																	$1307 = $1302 << 1;
																	$1308 = ($1307>>>0)<($1297>>>0);
																	$1309 = $1308 ? $1297 : $1307;
																	$1310 = HEAP32[$1133>>2]|0;
																	$1311 = (($1310) - ($$in$i$i$i))|0;
																	$1312 = ($1309|0)==(0);
																	if ($1312) {
																		$$0$i2$i$i$i = 0;$1317 = 0;$1318 = $1311;$1325 = $1310;
																	} else {
																		$$0$i1$i$i$i = $1309;$1391 = $1310;$1392 = $1311;
																		label = 417;
																	}
																} else {
																	$1305 = HEAP32[$1133>>2]|0;
																	$1306 = (($1305) - ($$in$i$i$i))|0;
																	$$0$i1$i$i$i = 2147483647;$1391 = $1305;$1392 = $1306;
																	label = 417;
																}
																if ((label|0) == 417) {
																	label = 0;
																	__THREW__ = 0;
																	$1313 = (invoke_ii(29,($$0$i1$i$i$i|0))|0);
																	$1314 = __THREW__; __THREW__ = 0;
																	$1315 = $1314&1;
																	if ($1315) {
																		label = 338;
																		break L503;
																	} else {
																		$$0$i2$i$i$i = $$0$i1$i$i$i;$1317 = $1313;$1318 = $1392;$1325 = $1391;
																	}
																}
																$1316 = (($1317) + ($1318)|0);
																$1319 = (($1317) + ($$0$i2$i$i$i)|0);
																$1320 = $1319;
																$1321 = HEAP8[$1287>>0]|0;
																HEAP8[$1316>>0] = $1321;
																$1322 = ((($1316)) + 1|0);
																$1323 = $1322;
																$1324 = (($1325) - ($$in$i$i$i))|0;
																$1326 = (0 - ($1324))|0;
																$1327 = (($1316) + ($1326)|0);
																$1328 = $1327;
																_memcpy(($1327|0),($1301|0),($1324|0))|0;
																HEAP32[$1131>>2] = $1328;
																HEAP32[$1133>>2] = $1323;
																HEAP32[$1134>>2] = $1320;
																$1329 = ($$in$i$i$i|0)==(0);
																if ($1329) {
																	break;
																}
																__ZdlPv($1301);
															} else {
																$1291 = HEAP8[$1287>>0]|0;
																HEAP8[$1288>>0] = $1291;
																$1292 = HEAP32[$1133>>2]|0;
																$1293 = ((($1292)) + 1|0);
																HEAP32[$1133>>2] = $1293;
															}
														} while(0);
														$1330 = (($col5$080$i) + 1)|0;
														$1331 = ($1330|0)<($1023|0);
														if ($1331) {
															$col5$080$i = $1330;
														} else {
															break;
														}
													}
													$1284 = (($row3$083$i) + 1)|0;
													$1285 = ($1284|0)<($1026|0);
													if ($1285) {
														$row3$083$i = $1284;
													} else {
														break L501;
													}
												}
												if ((label|0) == 338) {
													$1061 = ___cxa_find_matching_catch_2()|0;
													$1062 = tempRet0;
													$lpad$phi$i$index = $1061;$lpad$phi$i$index31 = $1062;
													break L473;
												}
												else if ((label|0) == 339) {
													$1063 = ___cxa_find_matching_catch_2()|0;
													$1064 = tempRet0;
													$lpad$phi$i$index = $1063;$lpad$phi$i$index31 = $1064;
													break L473;
												}
												else if ((label|0) == 340) {
													$1065 = ___cxa_find_matching_catch_2()|0;
													$1066 = tempRet0;
													$lpad$phi$i$index = $1065;$lpad$phi$i$index31 = $1066;
													break L473;
												}
												else if ((label|0) == 383) {
													$1194 = ___cxa_find_matching_catch_2()|0;
													$1195 = tempRet0;
													$lpad$phi$i$index = $1194;$lpad$phi$i$index31 = $1195;
													break L473;
												}
											}
										} while(0);
										$1332 = HEAP32[$441>>2]|0;
										$1333 = HEAP32[$new_data$i>>2]|0;
										HEAP32[$441>>2] = $1333;
										HEAP32[$new_data$i>>2] = $1332;
										$1334 = ((($new_data$i)) + 4|0);
										$1335 = HEAP32[$442>>2]|0;
										$1336 = HEAP32[$1334>>2]|0;
										HEAP32[$442>>2] = $1336;
										HEAP32[$1334>>2] = $1335;
										$1337 = ((($new_data$i)) + 8|0);
										$1338 = HEAP32[$578>>2]|0;
										$1339 = HEAP32[$1337>>2]|0;
										HEAP32[$578>>2] = $1339;
										HEAP32[$1337>>2] = $1338;
										$1340 = $1332;
										$1341 = ($1332|0)==(0);
										$1342 = $1335;
										if (!($1341)) {
											$1343 = $1332;
											$1344 = ($1342|0)==($1340|0);
											if ($1344) {
												$1354 = $1343;
											} else {
												$1346 = $1342;
												while(1) {
													$1345 = ((($1346)) + -12|0);
													HEAP32[$1334>>2] = $1345;
													$1347 = HEAP32[$1345>>2]|0;
													$1348 = ($1347|0)==(0|0);
													if ($1348) {
														$1349 = $1345;
													} else {
														$1351 = ((($1346)) + -8|0);
														$1352 = HEAP32[$1351>>2]|0;
														$1353 = ($1352|0)==($1347|0);
														if (!($1353)) {
															HEAP32[$1351>>2] = $1347;
														}
														__ZdlPv($1347);
														$$pre$i$i$i$i18 = HEAP32[$1334>>2]|0;
														$1349 = $$pre$i$i$i$i18;
													}
													$1350 = ($1349|0)==($1340|0);
													if ($1350) {
														break;
													} else {
														$1346 = $1349;
													}
												}
												$$pre$i$i21 = HEAP32[$new_data$i>>2]|0;
												$1354 = $$pre$i$i21;
											}
											__ZdlPv($1354);
										}
										$$pre$phi175Z2D = $442;$$pre$phi177Z2D = $441;$$pre$phi179Z2D = $441;
										break L245;
									}
									else if ((label|0) == 343) {
										$1071 = ___cxa_find_matching_catch_2()|0;
										$1072 = tempRet0;
										$lpad$phi$i$index = $1071;$lpad$phi$i$index31 = $1072;
									}
								} while(0);
								$1073 = HEAP32[$new_data$i>>2]|0;
								$1074 = ($1073|0)==(0|0);
								if ($1074) {
									___resumeException($lpad$phi$i$index|0);
									// unreachable;
								}
								$1075 = ((($new_data$i)) + 4|0);
								$1076 = HEAP32[$1075>>2]|0;
								$1077 = ($1076|0)==($1073|0);
								if ($1077) {
									$1087 = $1073;
								} else {
									$1079 = $1076;
									while(1) {
										$1078 = ((($1079)) + -12|0);
										HEAP32[$1075>>2] = $1078;
										$1080 = HEAP32[$1078>>2]|0;
										$1081 = ($1080|0)==(0|0);
										if ($1081) {
											$1082 = $1078;
										} else {
											$1084 = ((($1079)) + -8|0);
											$1085 = HEAP32[$1084>>2]|0;
											$1086 = ($1085|0)==($1080|0);
											if (!($1086)) {
												HEAP32[$1084>>2] = $1080;
											}
											__ZdlPv($1080);
											$$pre$i$i$i9$i = HEAP32[$1075>>2]|0;
											$1082 = $$pre$i$i$i9$i;
										}
										$1083 = ($1082|0)==($1073|0);
										if ($1083) {
											break;
										} else {
											$1079 = $1082;
										}
									}
									$$pre$i12$i = HEAP32[$new_data$i>>2]|0;
									$1087 = $$pre$i12$i;
								}
								__ZdlPv($1087);
								___resumeException($lpad$phi$i$index|0);
								// unreachable;
							}
						} while(0);
						$596 = HEAP32[$new_data$i82>>2]|0;
						$597 = ($596|0)==(0|0);
						if ($597) {
							___resumeException($eh$lpad$body$sink$i$indexZ2D|0);
							// unreachable;
						}
						$598 = HEAP32[$452>>2]|0;
						$599 = ($598|0)==($596|0);
						if ($599) {
							$609 = $596;
						} else {
							$601 = $598;
							while(1) {
								$600 = ((($601)) + -12|0);
								HEAP32[$452>>2] = $600;
								$602 = HEAP32[$600>>2]|0;
								$603 = ($602|0)==(0|0);
								if ($603) {
									$604 = $600;
								} else {
									$606 = ((($601)) + -8|0);
									$607 = HEAP32[$606>>2]|0;
									$608 = ($607|0)==($602|0);
									if (!($608)) {
										HEAP32[$606>>2] = $602;
									}
									__ZdlPv($602);
									$$pre$i$i$i$i93 = HEAP32[$452>>2]|0;
									$604 = $$pre$i$i$i$i93;
								}
								$605 = ($604|0)==($596|0);
								if ($605) {
									break;
								} else {
									$601 = $604;
								}
							}
							$$pre$i$i96 = HEAP32[$new_data$i82>>2]|0;
							$609 = $$pre$i$i96;
						}
						__ZdlPv($609);
						___resumeException($eh$lpad$body$sink$i$indexZ2D|0);
						// unreachable;
					}
				} while(0);
				$1355 = HEAP32[$$pre$phi175Z2D>>2]|0;
				$1356 = HEAP32[$$pre$phi177Z2D>>2]|0;
				$1357 = (($1355) - ($1356))|0;
				$1358 = (($1357|0) / 12)&-1;
				__ZN9Rectangle6heightEi($this,$1358);
				$1359 = HEAP32[$$pre$phi179Z2D>>2]|0;
				$1360 = ((($1359)) + 4|0);
				$1361 = HEAP32[$1360>>2]|0;
				$1362 = HEAP32[$1359>>2]|0;
				$1363 = (($1361) - ($1362))|0;
				__ZN9Rectangle5widthEi($this,$1363);
				$$0 = 1;
				STACKTOP = sp;return ($$0|0);
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i2 = 0, $$0$lcssa$i$i = 0, $$012$i$i = 0, $$03$i$i = 0, $$__last = 0, $$mux = 0, $$not = 0, $$not7 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
				var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
				var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
				var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $__first;
				$1 = $__last;
				$2 = (($1) - ($0))|0;
				$3 = (($2|0) / 12)&-1;
				$4 = ((($this)) + 8|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$this>>2]|0;
				$7 = (($5) - ($6))|0;
				$8 = (($7|0) / 12)&-1;
				$9 = ($3>>>0)>($8>>>0);
				$10 = $6;
				if (!($9)) {
					$11 = ((($this)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) - ($6))|0;
					$14 = (($13|0) / 12)&-1;
					$15 = ($3>>>0)>($14>>>0);
					$16 = (($__first) + (($14*12)|0)|0);
					$$__last = $15 ? $16 : $__last;
					$17 = ($$__last|0)==($__first|0);
					if ($17) {
						$$0$lcssa$i$i = $10;
					} else {
						$$012$i$i = $__first;$$03$i$i = $10;
						while(1) {
							$18 = ($$03$i$i|0)==($$012$i$i|0);
							if (!($18)) {
								$19 = HEAP32[$$012$i$i>>2]|0;
								$20 = ((($$012$i$i)) + 4|0);
								$21 = HEAP32[$20>>2]|0;
								__ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i,$19,$21);
							}
							$22 = ((($$012$i$i)) + 12|0);
							$23 = ((($$03$i$i)) + 12|0);
							$24 = ($22|0)==($$__last|0);
							if ($24) {
								$$0$lcssa$i$i = $23;
								break;
							} else {
								$$012$i$i = $22;$$03$i$i = $23;
							}
						}
					}
					if ($15) {
						__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$$__last,$__last);
						return;
					}
					$25 = HEAP32[$11>>2]|0;
					$26 = ($25|0)==($$0$lcssa$i$i|0);
					if ($26) {
						return;
					} else {
						$28 = $25;
					}
					while(1) {
						$27 = ((($28)) + -12|0);
						HEAP32[$11>>2] = $27;
						$29 = HEAP32[$27>>2]|0;
						$30 = ($29|0)==(0|0);
						if ($30) {
							$31 = $27;
						} else {
							$33 = ((($28)) + -8|0);
							$34 = HEAP32[$33>>2]|0;
							$35 = ($34|0)==($29|0);
							if (!($35)) {
								HEAP32[$33>>2] = $29;
							}
							__ZdlPv($29);
							$$pre$i$i = HEAP32[$11>>2]|0;
							$31 = $$pre$i$i;
						}
						$32 = ($31|0)==($$0$lcssa$i$i|0);
						if ($32) {
							break;
						} else {
							$28 = $31;
						}
					}
					return;
				}
				$36 = ($6|0)==(0);
				if ($36) {
					$62 = $5;
				} else {
					$37 = $6;
					$38 = ((($this)) + 4|0);
					$39 = HEAP32[$38>>2]|0;
					$40 = ($39|0)==($10|0);
					if ($40) {
						$50 = $37;
					} else {
						$42 = $39;
						while(1) {
							$41 = ((($42)) + -12|0);
							HEAP32[$38>>2] = $41;
							$43 = HEAP32[$41>>2]|0;
							$44 = ($43|0)==(0|0);
							if ($44) {
								$45 = $41;
							} else {
								$47 = ((($42)) + -8|0);
								$48 = HEAP32[$47>>2]|0;
								$49 = ($48|0)==($43|0);
								if (!($49)) {
									HEAP32[$47>>2] = $43;
								}
								__ZdlPv($43);
								$$pre$i$i$i$i = HEAP32[$38>>2]|0;
								$45 = $$pre$i$i$i$i;
							}
							$46 = ($45|0)==($10|0);
							if ($46) {
								break;
							} else {
								$42 = $45;
							}
						}
						$$pre$i = HEAP32[$this>>2]|0;
						$50 = $$pre$i;
					}
					__ZdlPv($50);
					HEAP32[$4>>2] = 0;
					HEAP32[$38>>2] = 0;
					HEAP32[$this>>2] = 0;
					$62 = 0;
				}
				$51 = ($3>>>0)>(357913941);
				if ($51) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$4>>2]|0;
					$$pre6 = HEAP32[$this>>2]|0;
					$53 = $$pre6;$54 = $$pre;
				} else {
					$53 = 0;$54 = $62;
				}
				$52 = (($54) - ($53))|0;
				$55 = (($52|0) / 12)&-1;
				$56 = ($55>>>0)<(178956970);
				if ($56) {
					$57 = $55 << 1;
					$$not = ($57>>>0)>=($3>>>0);
					$$not7 = $51 ^ 1;
					$brmerge = $$not | $$not7;
					$$mux = $$not ? $57 : $3;
					if ($brmerge) {
						$$0$i2 = $$mux;
					} else {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$0$i2 = $3;
					}
				} else {
					$$0$i2 = 357913941;
				}
				$58 = ($$0$i2*12)|0;
				$59 = (__Znwj($58)|0);
				$60 = ((($this)) + 4|0);
				HEAP32[$60>>2] = $59;
				HEAP32[$this>>2] = $59;
				$61 = (($59) + (($$0$i2*12)|0)|0);
				HEAP32[$4>>2] = $61;
				__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last);
				return;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$01$i$i$i = 0, $$02 = 0, $$lcssa = 0, $$lcssa17 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($__first|0)==($__last|0);
				if ($0) {
					return;
				}
				$1 = ((($this)) + 4|0);
				$$pre = HEAP32[$1>>2]|0;
				$$02 = $__first;$2 = $$pre;
				while(1) {
					HEAP32[$2>>2] = 0;
					$3 = ((($2)) + 4|0);
					HEAP32[$3>>2] = 0;
					$4 = ((($2)) + 8|0);
					HEAP32[$4>>2] = 0;
					$5 = ((($$02)) + 4|0);
					$6 = HEAP32[$5>>2]|0;
					$7 = HEAP32[$$02>>2]|0;
					$8 = (($6) - ($7))|0;
					$9 = ($6|0)==($7|0);
					if (!($9)) {
						$10 = ($8|0)<(0);
						if ($10) {
							__THREW__ = 0;
							invoke_vi(46,($2|0));
							$11 = __THREW__; __THREW__ = 0;
							$12 = $11&1;
							if ($12) {
								$$lcssa = $2;$$lcssa17 = $3;
								break;
							}
						}
						__THREW__ = 0;
						$13 = (invoke_ii(29,($8|0))|0);
						$14 = __THREW__; __THREW__ = 0;
						$15 = $14&1;
						if ($15) {
							$$lcssa = $2;$$lcssa17 = $3;
							break;
						}
						HEAP32[$3>>2] = $13;
						HEAP32[$2>>2] = $13;
						$16 = (($13) + ($8)|0);
						$17 = ((($2)) + 8|0);
						HEAP32[$17>>2] = $16;
						$18 = HEAP32[$$02>>2]|0;
						$19 = HEAP32[$5>>2]|0;
						$20 = ($18|0)==($19|0);
						if (!($20)) {
							$$01$i$i$i = $18;$22 = $13;
							while(1) {
								$21 = HEAP8[$$01$i$i$i>>0]|0;
								HEAP8[$22>>0] = $21;
								$23 = HEAP32[$3>>2]|0;
								$24 = ((($23)) + 1|0);
								HEAP32[$3>>2] = $24;
								$25 = ((($$01$i$i$i)) + 1|0);
								$26 = ($25|0)==($19|0);
								if ($26) {
									break;
								} else {
									$$01$i$i$i = $25;$22 = $24;
								}
							}
						}
					}
					$33 = HEAP32[$1>>2]|0;
					$34 = ((($33)) + 12|0);
					HEAP32[$1>>2] = $34;
					$35 = ((($$02)) + 12|0);
					$36 = ($35|0)==($__last|0);
					if ($36) {
						label = 15;
						break;
					} else {
						$$02 = $35;$2 = $34;
					}
				}
				if ((label|0) == 15) {
					return;
				}
				$27 = ___cxa_find_matching_catch_2()|0;
				$28 = tempRet0;
				$29 = HEAP32[$$lcssa>>2]|0;
				$30 = ($29|0)==(0|0);
				if ($30) {
					___resumeException($27|0);
					// unreachable;
				}
				$31 = HEAP32[$$lcssa17>>2]|0;
				$32 = ($31|0)==($29|0);
				if (!($32)) {
					HEAP32[$$lcssa17>>2] = $29;
				}
				__ZdlPv($29);
				___resumeException($27|0);
				// unreachable;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ($__n|0)==(0);
				if ($2) {
					return;
				}
				$3 = ($__n>>>0)>(357913941);
				if ($3) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$4 = __THREW__; __THREW__ = 0;
					$5 = $4&1;
					if (!($5)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					$6 = ($__n*12)|0;
					__THREW__ = 0;
					$7 = (invoke_ii(29,($6|0))|0);
					$8 = __THREW__; __THREW__ = 0;
					$9 = $8&1;
					if (!($9)) {
						HEAP32[$0>>2] = $7;
						HEAP32[$this>>2] = $7;
						$10 = (($7) + (($__n*12)|0)|0);
						$11 = ((($this)) + 8|0);
						HEAP32[$11>>2] = $10;
						$$0$i = $__n;$12 = $7;
						while(1) {
							HEAP32[$12>>2] = 0;
							$13 = ((($12)) + 4|0);
							HEAP32[$13>>2] = 0;
							$14 = ((($12)) + 8|0);
							HEAP32[$14>>2] = 0;
							$15 = ((($12)) + 12|0);
							$16 = (($$0$i) + -1)|0;
							$17 = ($16|0)==(0);
							if ($17) {
								break;
							} else {
								$$0$i = $16;$12 = $15;
							}
						}
						HEAP32[$0>>2] = $10;
						return;
					}
				}
				$18 = ___cxa_find_matching_catch_2()|0;
				$19 = tempRet0;
				$20 = HEAP32[$this>>2]|0;
				$21 = ($20|0)==(0|0);
				if ($21) {
					___resumeException($18|0);
					// unreachable;
				}
				$22 = HEAP32[$0>>2]|0;
				$23 = ($22|0)==($20|0);
				if ($23) {
					$33 = $20;
				} else {
					$25 = $22;
					while(1) {
						$24 = ((($25)) + -12|0);
						HEAP32[$0>>2] = $24;
						$26 = HEAP32[$24>>2]|0;
						$27 = ($26|0)==(0|0);
						if ($27) {
							$28 = $24;
						} else {
							$30 = ((($25)) + -8|0);
							$31 = HEAP32[$30>>2]|0;
							$32 = ($31|0)==($26|0);
							if (!($32)) {
								HEAP32[$30>>2] = $26;
							}
							__ZdlPv($26);
							$$pre$i$i$i = HEAP32[$0>>2]|0;
							$28 = $$pre$i$i$i;
						}
						$29 = ($28|0)==($20|0);
						if ($29) {
							break;
						} else {
							$25 = $28;
						}
					}
					$$pre$i = HEAP32[$this>>2]|0;
					$33 = $$pre$i;
				}
				__ZdlPv($33);
				___resumeException($18|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($this,$__n,$__x) {
				$this = $this|0;
				$__n = $__n|0;
				$__x = $__x|0;
				var $$0$i = 0, $$0$i2 = 0, $$0$i34 = 0, $$0$i35 = 0, $$lcssa = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v$sroa$12$0 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = ($4>>>0)<($__n>>>0);
				if (!($5)) {
					$6 = $3;
					$$0$i = $__n;$8 = $6;
					while(1) {
						$7 = HEAP8[$__x>>0]|0;
						HEAP8[$8>>0] = $7;
						$9 = HEAP32[$2>>2]|0;
						$10 = ((($9)) + 1|0);
						HEAP32[$2>>2] = $10;
						$11 = (($$0$i) + -1)|0;
						$12 = ($11|0)==(0);
						if ($12) {
							break;
						} else {
							$$0$i = $11;$8 = $10;
						}
					}
					return;
				}
				$13 = HEAP32[$this>>2]|0;
				$14 = (($3) - ($13))|0;
				$15 = (($14) + ($__n))|0;
				$16 = ($15|0)<(0);
				if ($16) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre6 = HEAP32[$this>>2]|0;
					$18 = $$pre6;$19 = $$pre;
				} else {
					$18 = $13;$19 = $1;
				}
				$17 = (($19) - ($18))|0;
				$20 = ($17>>>0)<(1073741823);
				if ($20) {
					$23 = $17 << 1;
					$24 = ($23>>>0)<($15>>>0);
					$25 = $24 ? $15 : $23;
					$26 = HEAP32[$2>>2]|0;
					$27 = (($26) - ($18))|0;
					$28 = ($25|0)==(0);
					if ($28) {
						$$0$i35 = 0;$31 = 0;$32 = $27;
					} else {
						$$0$i34 = $25;$51 = $27;
						label = 9;
					}
				} else {
					$21 = HEAP32[$2>>2]|0;
					$22 = (($21) - ($18))|0;
					$$0$i34 = 2147483647;$51 = $22;
					label = 9;
				}
				if ((label|0) == 9) {
					$29 = (__Znwj($$0$i34)|0);
					$$0$i35 = $$0$i34;$31 = $29;$32 = $51;
				}
				$30 = (($31) + ($32)|0);
				$33 = $30;
				$34 = (($31) + ($$0$i35)|0);
				$$0$i2 = $__n;$36 = $30;$__v$sroa$12$0 = $33;
				while(1) {
					$35 = HEAP8[$__x>>0]|0;
					HEAP8[$36>>0] = $35;
					$37 = $__v$sroa$12$0;
					$38 = ((($37)) + 1|0);
					$39 = $38;
					$40 = (($$0$i2) + -1)|0;
					$41 = ($40|0)==(0);
					if ($41) {
						$$lcssa = $39;
						break;
					} else {
						$$0$i2 = $40;$36 = $38;$__v$sroa$12$0 = $39;
					}
				}
				$42 = $34;
				$43 = HEAP32[$this>>2]|0;
				$44 = HEAP32[$2>>2]|0;
				$45 = $43;
				$46 = (($44) - ($45))|0;
				$47 = (0 - ($46))|0;
				$48 = (($30) + ($47)|0);
				$49 = $48;
				_memcpy(($48|0),($43|0),($46|0))|0;
				HEAP32[$this>>2] = $49;
				HEAP32[$2>>2] = $$lcssa;
				HEAP32[$0>>2] = $42;
				$50 = ($43|0)==(0|0);
				if ($50) {
					return;
				}
				__ZdlPv($43);
				return;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$__v = sp;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = (($3|0) / 12)&-1;
				$5 = ($4>>>0)<($__n>>>0);
				if (!($5)) {
					STACKTOP = sp;return;
				}
				$6 = ((($this)) + 8|0);
				$7 = ((($this)) + 4|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($2))|0;
				$10 = (($9|0) / 12)&-1;
				$11 = ((($__v)) + 12|0);
				HEAP32[$11>>2] = 0;
				$12 = ((($__v)) + 16|0);
				HEAP32[$12>>2] = $6;
				$13 = ($__n|0)==(0);
				if ($13) {
					$16 = 0;
				} else {
					$14 = ($__n*12)|0;
					$15 = (__Znwj($14)|0);
					$16 = $15;
				}
				HEAP32[$__v>>2] = $16;
				$17 = (($16) + (($10*12)|0)|0);
				$18 = ((($__v)) + 8|0);
				HEAP32[$18>>2] = $17;
				$19 = ((($__v)) + 4|0);
				HEAP32[$19>>2] = $17;
				$20 = (($16) + (($__n*12)|0)|0);
				$21 = ((($__v)) + 12|0);
				HEAP32[$21>>2] = $20;
				__THREW__ = 0;
				invoke_vii(45,($this|0),($__v|0));
				$22 = __THREW__; __THREW__ = 0;
				$23 = $22&1;
				if ($23) {
					$37 = ___cxa_find_matching_catch_2()|0;
					$38 = tempRet0;
					$39 = HEAP32[$19>>2]|0;
					$40 = HEAP32[$18>>2]|0;
					$41 = ($40|0)==($39|0);
					if (!($41)) {
						$43 = $40;
						while(1) {
							$42 = ((($43)) + -12|0);
							$44 = HEAP32[$42>>2]|0;
							$45 = ($44|0)==(0|0);
							if (!($45)) {
								$47 = ((($43)) + -8|0);
								$48 = HEAP32[$47>>2]|0;
								$49 = ($48|0)==($44|0);
								if (!($49)) {
									HEAP32[$47>>2] = $44;
								}
								__ZdlPv($44);
							}
							$46 = ($42|0)==($39|0);
							if ($46) {
								break;
							} else {
								$43 = $42;
							}
						}
						HEAP32[$18>>2] = $39;
					}
					$50 = HEAP32[$__v>>2]|0;
					$51 = ($50|0)==(0|0);
					if ($51) {
						___resumeException($37|0);
						// unreachable;
					}
					__ZdlPv($50);
					___resumeException($37|0);
					// unreachable;
				} else {
					$24 = HEAP32[$19>>2]|0;
					$25 = HEAP32[$18>>2]|0;
					$26 = ($25|0)==($24|0);
					if (!($26)) {
						$28 = $25;
						while(1) {
							$27 = ((($28)) + -12|0);
							$29 = HEAP32[$27>>2]|0;
							$30 = ($29|0)==(0|0);
							if (!($30)) {
								$32 = ((($28)) + -8|0);
								$33 = HEAP32[$32>>2]|0;
								$34 = ($33|0)==($29|0);
								if (!($34)) {
									HEAP32[$32>>2] = $29;
								}
								__ZdlPv($29);
							}
							$31 = ($27|0)==($24|0);
							if ($31) {
								break;
							} else {
								$28 = $27;
							}
						}
						HEAP32[$18>>2] = $24;
					}
					$35 = HEAP32[$__v>>2]|0;
					$36 = ($35|0)==(0|0);
					if (!($36)) {
						__ZdlPv($35);
					}
					STACKTOP = sp;return;
				}
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIKS3_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i = 0, $$01$i$i$i = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__v = 0, $eh$lpad$body18$index4Z2D = 0, $eh$lpad$body18$indexZ2D = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$__v = sp;
				$0 = ((($this)) + 8|0);
				$1 = ((($this)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$this>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = (($4|0) / 12)&-1;
				$6 = (($5) + 1)|0;
				$7 = ($6>>>0)>(357913941);
				if ($7) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$11 = $$pre;
				} else {
					$11 = $3;
				}
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = (($9) - ($11))|0;
				$12 = (($10|0) / 12)&-1;
				$13 = ($12>>>0)<(178956970);
				if ($13) {
					$14 = $12 << 1;
					$15 = ($14>>>0)<($6>>>0);
					$16 = $15 ? $6 : $14;
					$$0$i = $16;
				} else {
					$$0$i = 357913941;
				}
				$17 = HEAP32[$1>>2]|0;
				$18 = (($17) - ($11))|0;
				$19 = (($18|0) / 12)&-1;
				$20 = ((($__v)) + 12|0);
				HEAP32[$20>>2] = 0;
				$21 = ((($__v)) + 16|0);
				HEAP32[$21>>2] = $0;
				$22 = ($$0$i|0)==(0);
				if ($22) {
					$25 = 0;
				} else {
					$23 = ($$0$i*12)|0;
					$24 = (__Znwj($23)|0);
					$25 = $24;
				}
				HEAP32[$__v>>2] = $25;
				$26 = (($25) + (($19*12)|0)|0);
				$27 = ((($__v)) + 8|0);
				HEAP32[$27>>2] = $26;
				$28 = ((($__v)) + 4|0);
				HEAP32[$28>>2] = $26;
				$29 = (($25) + (($$0$i*12)|0)|0);
				$30 = ((($__v)) + 12|0);
				HEAP32[$30>>2] = $29;
				HEAP32[$26>>2] = 0;
				$31 = (((($25) + (($19*12)|0)|0)) + 4|0);
				HEAP32[$31>>2] = 0;
				$32 = (((($25) + (($19*12)|0)|0)) + 8|0);
				HEAP32[$32>>2] = 0;
				$33 = ((($__x)) + 4|0);
				$34 = HEAP32[$33>>2]|0;
				$35 = HEAP32[$__x>>2]|0;
				$36 = (($34) - ($35))|0;
				$37 = ($34|0)==($35|0);
				L10: do {
					if ($37) {
						label = 17;
					} else {
						$38 = ($36|0)<(0);
						if ($38) {
							__THREW__ = 0;
							invoke_vi(46,($26|0));
							$39 = __THREW__; __THREW__ = 0;
							$40 = $39&1;
							if (!($40)) {
								label = 10;
							}
						} else {
							label = 10;
						}
						if ((label|0) == 10) {
							__THREW__ = 0;
							$41 = (invoke_ii(29,($36|0))|0);
							$42 = __THREW__; __THREW__ = 0;
							$43 = $42&1;
							if (!($43)) {
								HEAP32[$31>>2] = $41;
								HEAP32[$26>>2] = $41;
								$44 = (($41) + ($36)|0);
								$45 = (((($25) + (($19*12)|0)|0)) + 8|0);
								HEAP32[$45>>2] = $44;
								$46 = HEAP32[$__x>>2]|0;
								$47 = HEAP32[$33>>2]|0;
								$48 = ($46|0)==($47|0);
								if ($48) {
									label = 17;
									break;
								} else {
									$$01$i$i$i = $46;$50 = $41;
								}
								while(1) {
									$49 = HEAP8[$$01$i$i$i>>0]|0;
									HEAP8[$50>>0] = $49;
									$51 = HEAP32[$31>>2]|0;
									$52 = ((($51)) + 1|0);
									HEAP32[$31>>2] = $52;
									$53 = ((($$01$i$i$i)) + 1|0);
									$54 = ($53|0)==($47|0);
									if ($54) {
										label = 17;
										break L10;
									} else {
										$$01$i$i$i = $53;$50 = $52;
									}
								}
							}
						}
						$55 = ___cxa_find_matching_catch_2()|0;
						$56 = tempRet0;
						$57 = HEAP32[$26>>2]|0;
						$58 = ($57|0)==(0|0);
						if ($58) {
							$eh$lpad$body18$index4Z2D = $56;$eh$lpad$body18$indexZ2D = $55;
						} else {
							$59 = HEAP32[$31>>2]|0;
							$60 = ($59|0)==($57|0);
							if (!($60)) {
								HEAP32[$31>>2] = $57;
							}
							__ZdlPv($57);
							$eh$lpad$body18$index4Z2D = $56;$eh$lpad$body18$indexZ2D = $55;
						}
					}
				} while(0);
				do {
					if ((label|0) == 17) {
						$61 = ((($26)) + 12|0);
						HEAP32[$27>>2] = $61;
						__THREW__ = 0;
						invoke_vii(45,($this|0),($__v|0));
						$62 = __THREW__; __THREW__ = 0;
						$63 = $62&1;
						if ($63) {
							$77 = ___cxa_find_matching_catch_2()|0;
							$78 = tempRet0;
							$$pre16 = HEAP32[$28>>2]|0;
							$$pre17 = HEAP32[$27>>2]|0;
							$79 = ($$pre17|0)==($$pre16|0);
							if ($79) {
								$eh$lpad$body18$index4Z2D = $78;$eh$lpad$body18$indexZ2D = $77;
								break;
							} else {
								$81 = $$pre17;
							}
							while(1) {
								$80 = ((($81)) + -12|0);
								$82 = HEAP32[$80>>2]|0;
								$83 = ($82|0)==(0|0);
								if (!($83)) {
									$85 = ((($81)) + -8|0);
									$86 = HEAP32[$85>>2]|0;
									$87 = ($86|0)==($82|0);
									if (!($87)) {
										HEAP32[$85>>2] = $82;
									}
									__ZdlPv($82);
								}
								$84 = ($80|0)==($$pre16|0);
								if ($84) {
									break;
								} else {
									$81 = $80;
								}
							}
							HEAP32[$27>>2] = $$pre16;
							$eh$lpad$body18$index4Z2D = $78;$eh$lpad$body18$indexZ2D = $77;
							break;
						}
						$64 = HEAP32[$28>>2]|0;
						$65 = HEAP32[$27>>2]|0;
						$66 = ($65|0)==($64|0);
						if (!($66)) {
							$68 = $65;
							while(1) {
								$67 = ((($68)) + -12|0);
								$69 = HEAP32[$67>>2]|0;
								$70 = ($69|0)==(0|0);
								if (!($70)) {
									$72 = ((($68)) + -8|0);
									$73 = HEAP32[$72>>2]|0;
									$74 = ($73|0)==($69|0);
									if (!($74)) {
										HEAP32[$72>>2] = $69;
									}
									__ZdlPv($69);
								}
								$71 = ($67|0)==($64|0);
								if ($71) {
									break;
								} else {
									$68 = $67;
								}
							}
							HEAP32[$27>>2] = $64;
						}
						$75 = HEAP32[$__v>>2]|0;
						$76 = ($75|0)==(0|0);
						if ($76) {
							STACKTOP = sp;return;
						}
						__ZdlPv($75);
						STACKTOP = sp;return;
					}
				} while(0);
				$88 = HEAP32[$__v>>2]|0;
				$89 = ($88|0)==(0|0);
				if ($89) {
					___resumeException($eh$lpad$body18$indexZ2D|0);
					// unreachable;
				}
				__ZdlPv($88);
				___resumeException($eh$lpad$body18$indexZ2D|0);
				// unreachable;
			}
			function __ZN10Page_image9transformERK14Transformation($this,$t) {
				$this = $this|0;
				$t = $t|0;
				var $$pre = 0, $$pre$i = 0, $$pre$i16 = 0, $$pre$i2 = 0, $$pre$i24 = 0, $$pre$i32 = 0, $$pre$i40 = 0, $$pre$i48 = 0, $$pre$i8 = 0, $$pre61 = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
				var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
				var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
				var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $d$0$i = 0, $d$0$i23 = 0, $d$0$i47 = 0, $d$0$i7 = 0, $d$01$i = 0, $d$01$i19 = 0, $d$01$i3 = 0, $d$01$i43 = 0, $d$03$i = 0, $d$03$i21 = 0, $d$03$i45 = 0, $d$03$i5 = 0, $row$04$i = 0, $row$04$i12 = 0, $row$04$i28 = 0, $row$04$i36 = 0, $u$02$i = 0, $u$02$i22 = 0;
				var $u$02$i46 = 0, $u$02$i6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$t>>2]|0;
				switch ($0|0) {
					case 7:  {
						$144 = ((($this)) + 16|0);
						__ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($144,$this);
						$145 = ((($this)) + 20|0);
						$146 = HEAP32[$145>>2]|0;
						$147 = HEAP32[$144>>2]|0;
						$148 = (($146) - ($147))|0;
						$149 = (($148|0) / 12)&-1;
						$150 = ($148|0)>(0);
						if ($150) {
							$151 = $147;
							$153 = $151;$row$04$i = 0;
							while(1) {
								$152 = (($153) + (($row$04$i*12)|0)|0);
								$154 = HEAP32[$152>>2]|0;
								$155 = (((($153) + (($row$04$i*12)|0)|0)) + 4|0);
								$156 = HEAP32[$155>>2]|0;
								$157 = ($154|0)==($156|0);
								if (!($157)) {
									$158 = ((($156)) + -1|0);
									$159 = ($154>>>0)<($158>>>0);
									if ($159) {
										$161 = $154;$163 = $158;
										while(1) {
											$160 = HEAP8[$161>>0]|0;
											$162 = HEAP8[$163>>0]|0;
											HEAP8[$161>>0] = $162;
											HEAP8[$163>>0] = $160;
											$164 = ((($161)) + 1|0);
											$165 = ((($163)) + -1|0);
											$166 = ($164>>>0)<($165>>>0);
											if ($166) {
												$161 = $164;$163 = $165;
											} else {
												break;
											}
										}
									}
								}
								$167 = (($row$04$i) + 1)|0;
								$168 = ($167|0)<($149|0);
								if (!($168)) {
									break;
								}
								$$pre$i2 = HEAP32[$144>>2]|0;
								$153 = $$pre$i2;$row$04$i = $167;
							}
							$$pre62 = HEAP32[$145>>2]|0;
							$$pre63 = HEAP32[$144>>2]|0;
							$170 = $$pre63;$171 = $$pre62;
						} else {
							$170 = $147;$171 = $146;
						}
						$169 = (($171) - ($170))|0;
						$172 = ($169|0)>(12);
						if (!($172)) {
							return;
						}
						$173 = $170;
						$174 = (($169|0) / 12)&-1;
						$d$01$i = (($174) + -1)|0;
						$176 = $173;$d$03$i = $d$01$i;$u$02$i = 0;
						while(1) {
							$175 = (($176) + (($u$02$i*12)|0)|0);
							$177 = (($176) + (($d$03$i*12)|0)|0);
							$178 = HEAP32[$175>>2]|0;
							$179 = HEAP32[$177>>2]|0;
							HEAP32[$175>>2] = $179;
							HEAP32[$177>>2] = $178;
							$180 = (((($176) + (($u$02$i*12)|0)|0)) + 4|0);
							$181 = (((($176) + (($d$03$i*12)|0)|0)) + 4|0);
							$182 = HEAP32[$180>>2]|0;
							$183 = HEAP32[$181>>2]|0;
							HEAP32[$180>>2] = $183;
							HEAP32[$181>>2] = $182;
							$184 = (((($176) + (($u$02$i*12)|0)|0)) + 8|0);
							$185 = (((($176) + (($d$03$i*12)|0)|0)) + 8|0);
							$186 = HEAP32[$184>>2]|0;
							$187 = HEAP32[$185>>2]|0;
							HEAP32[$184>>2] = $187;
							HEAP32[$185>>2] = $186;
							$188 = (($u$02$i) + 1)|0;
							$d$0$i = (($d$03$i) + -1)|0;
							$189 = ($188|0)<($d$0$i|0);
							if (!($189)) {
								break;
							}
							$$pre$i = HEAP32[$144>>2]|0;
							$176 = $$pre$i;$d$03$i = $d$0$i;$u$02$i = $188;
						}
						return;
						break;
					}
					case 1:  {
						$1 = ((($this)) + 16|0);
						__ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($1,$this);
						$2 = ((($this)) + 20|0);
						$3 = HEAP32[$2>>2]|0;
						$4 = HEAP32[$1>>2]|0;
						$5 = (($3) - ($4))|0;
						$6 = ($5|0)>(12);
						if (!($6)) {
							return;
						}
						$7 = $4;
						$8 = (($5|0) / 12)&-1;
						$d$01$i3 = (($8) + -1)|0;
						$10 = $7;$d$03$i5 = $d$01$i3;$u$02$i6 = 0;
						while(1) {
							$9 = (($10) + (($u$02$i6*12)|0)|0);
							$11 = (($10) + (($d$03$i5*12)|0)|0);
							$12 = HEAP32[$9>>2]|0;
							$13 = HEAP32[$11>>2]|0;
							HEAP32[$9>>2] = $13;
							HEAP32[$11>>2] = $12;
							$14 = (((($10) + (($u$02$i6*12)|0)|0)) + 4|0);
							$15 = (((($10) + (($d$03$i5*12)|0)|0)) + 4|0);
							$16 = HEAP32[$14>>2]|0;
							$17 = HEAP32[$15>>2]|0;
							HEAP32[$14>>2] = $17;
							HEAP32[$15>>2] = $16;
							$18 = (((($10) + (($u$02$i6*12)|0)|0)) + 8|0);
							$19 = (((($10) + (($d$03$i5*12)|0)|0)) + 8|0);
							$20 = HEAP32[$18>>2]|0;
							$21 = HEAP32[$19>>2]|0;
							HEAP32[$18>>2] = $21;
							HEAP32[$19>>2] = $20;
							$22 = (($u$02$i6) + 1)|0;
							$d$0$i7 = (($d$03$i5) + -1)|0;
							$23 = ($22|0)<($d$0$i7|0);
							if (!($23)) {
								break;
							}
							$$pre$i8 = HEAP32[$1>>2]|0;
							$10 = $$pre$i8;$d$03$i5 = $d$0$i7;$u$02$i6 = $22;
						}
						return;
						break;
					}
					case 2:  {
						$24 = ((($this)) + 16|0);
						$25 = ((($this)) + 20|0);
						$26 = HEAP32[$25>>2]|0;
						$27 = HEAP32[$24>>2]|0;
						$28 = (($26) - ($27))|0;
						$29 = (($28|0) / 12)&-1;
						$30 = ($28|0)>(0);
						if ($30) {
							$31 = $27;
							$33 = $31;$row$04$i12 = 0;
							while(1) {
								$32 = (($33) + (($row$04$i12*12)|0)|0);
								$34 = HEAP32[$32>>2]|0;
								$35 = (((($33) + (($row$04$i12*12)|0)|0)) + 4|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = ($34|0)==($36|0);
								if (!($37)) {
									$38 = ((($36)) + -1|0);
									$39 = ($34>>>0)<($38>>>0);
									if ($39) {
										$41 = $34;$43 = $38;
										while(1) {
											$40 = HEAP8[$41>>0]|0;
											$42 = HEAP8[$43>>0]|0;
											HEAP8[$41>>0] = $42;
											HEAP8[$43>>0] = $40;
											$44 = ((($41)) + 1|0);
											$45 = ((($43)) + -1|0);
											$46 = ($44>>>0)<($45>>>0);
											if ($46) {
												$41 = $44;$43 = $45;
											} else {
												break;
											}
										}
									}
								}
								$47 = (($row$04$i12) + 1)|0;
								$48 = ($47|0)<($29|0);
								if (!($48)) {
									break;
								}
								$$pre$i16 = HEAP32[$24>>2]|0;
								$33 = $$pre$i16;$row$04$i12 = $47;
							}
							$$pre = HEAP32[$25>>2]|0;
							$$pre61 = HEAP32[$24>>2]|0;
							$50 = $$pre61;$51 = $$pre;
						} else {
							$50 = $27;$51 = $26;
						}
						$49 = (($51) - ($50))|0;
						$52 = ($49|0)>(12);
						if (!($52)) {
							return;
						}
						$53 = $50;
						$54 = (($49|0) / 12)&-1;
						$d$01$i43 = (($54) + -1)|0;
						$56 = $53;$d$03$i45 = $d$01$i43;$u$02$i46 = 0;
						while(1) {
							$55 = (($56) + (($u$02$i46*12)|0)|0);
							$57 = (($56) + (($d$03$i45*12)|0)|0);
							$58 = HEAP32[$55>>2]|0;
							$59 = HEAP32[$57>>2]|0;
							HEAP32[$55>>2] = $59;
							HEAP32[$57>>2] = $58;
							$60 = (((($56) + (($u$02$i46*12)|0)|0)) + 4|0);
							$61 = (((($56) + (($d$03$i45*12)|0)|0)) + 4|0);
							$62 = HEAP32[$60>>2]|0;
							$63 = HEAP32[$61>>2]|0;
							HEAP32[$60>>2] = $63;
							HEAP32[$61>>2] = $62;
							$64 = (((($56) + (($u$02$i46*12)|0)|0)) + 8|0);
							$65 = (((($56) + (($d$03$i45*12)|0)|0)) + 8|0);
							$66 = HEAP32[$64>>2]|0;
							$67 = HEAP32[$65>>2]|0;
							HEAP32[$64>>2] = $67;
							HEAP32[$65>>2] = $66;
							$68 = (($u$02$i46) + 1)|0;
							$d$0$i47 = (($d$03$i45) + -1)|0;
							$69 = ($68|0)<($d$0$i47|0);
							if (!($69)) {
								break;
							}
							$$pre$i48 = HEAP32[$24>>2]|0;
							$56 = $$pre$i48;$d$03$i45 = $d$0$i47;$u$02$i46 = $68;
						}
						return;
						break;
					}
					case 3:  {
						$70 = ((($this)) + 16|0);
						__ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($70,$this);
						$71 = ((($this)) + 20|0);
						$72 = HEAP32[$71>>2]|0;
						$73 = HEAP32[$70>>2]|0;
						$74 = (($72) - ($73))|0;
						$75 = (($74|0) / 12)&-1;
						$76 = ($74|0)>(0);
						if (!($76)) {
							return;
						}
						$77 = $73;
						$79 = $77;$row$04$i36 = 0;
						while(1) {
							$78 = (($79) + (($row$04$i36*12)|0)|0);
							$80 = HEAP32[$78>>2]|0;
							$81 = (((($79) + (($row$04$i36*12)|0)|0)) + 4|0);
							$82 = HEAP32[$81>>2]|0;
							$83 = ($80|0)==($82|0);
							if (!($83)) {
								$84 = ((($82)) + -1|0);
								$85 = ($80>>>0)<($84>>>0);
								if ($85) {
									$87 = $80;$89 = $84;
									while(1) {
										$86 = HEAP8[$87>>0]|0;
										$88 = HEAP8[$89>>0]|0;
										HEAP8[$87>>0] = $88;
										HEAP8[$89>>0] = $86;
										$90 = ((($87)) + 1|0);
										$91 = ((($89)) + -1|0);
										$92 = ($90>>>0)<($91>>>0);
										if ($92) {
											$87 = $90;$89 = $91;
										} else {
											break;
										}
									}
								}
							}
							$93 = (($row$04$i36) + 1)|0;
							$94 = ($93|0)<($75|0);
							if (!($94)) {
								break;
							}
							$$pre$i40 = HEAP32[$70>>2]|0;
							$79 = $$pre$i40;$row$04$i36 = $93;
						}
						return;
						break;
					}
					case 4:  {
						$95 = ((($this)) + 16|0);
						$96 = ((($this)) + 20|0);
						$97 = HEAP32[$96>>2]|0;
						$98 = HEAP32[$95>>2]|0;
						$99 = (($97) - ($98))|0;
						$100 = (($99|0) / 12)&-1;
						$101 = ($99|0)>(0);
						if (!($101)) {
							return;
						}
						$102 = $98;
						$104 = $102;$row$04$i28 = 0;
						while(1) {
							$103 = (($104) + (($row$04$i28*12)|0)|0);
							$105 = HEAP32[$103>>2]|0;
							$106 = (((($104) + (($row$04$i28*12)|0)|0)) + 4|0);
							$107 = HEAP32[$106>>2]|0;
							$108 = ($105|0)==($107|0);
							if (!($108)) {
								$109 = ((($107)) + -1|0);
								$110 = ($105>>>0)<($109>>>0);
								if ($110) {
									$112 = $105;$114 = $109;
									while(1) {
										$111 = HEAP8[$112>>0]|0;
										$113 = HEAP8[$114>>0]|0;
										HEAP8[$112>>0] = $113;
										HEAP8[$114>>0] = $111;
										$115 = ((($112)) + 1|0);
										$116 = ((($114)) + -1|0);
										$117 = ($115>>>0)<($116>>>0);
										if ($117) {
											$112 = $115;$114 = $116;
										} else {
											break;
										}
									}
								}
							}
							$118 = (($row$04$i28) + 1)|0;
							$119 = ($118|0)<($100|0);
							if (!($119)) {
								break;
							}
							$$pre$i32 = HEAP32[$95>>2]|0;
							$104 = $$pre$i32;$row$04$i28 = $118;
						}
						return;
						break;
					}
					case 5:  {
						$120 = ((($this)) + 16|0);
						$121 = ((($this)) + 20|0);
						$122 = HEAP32[$121>>2]|0;
						$123 = HEAP32[$120>>2]|0;
						$124 = (($122) - ($123))|0;
						$125 = ($124|0)>(12);
						if (!($125)) {
							return;
						}
						$126 = $123;
						$127 = (($124|0) / 12)&-1;
						$d$01$i19 = (($127) + -1)|0;
						$129 = $126;$d$03$i21 = $d$01$i19;$u$02$i22 = 0;
						while(1) {
							$128 = (($129) + (($u$02$i22*12)|0)|0);
							$130 = (($129) + (($d$03$i21*12)|0)|0);
							$131 = HEAP32[$128>>2]|0;
							$132 = HEAP32[$130>>2]|0;
							HEAP32[$128>>2] = $132;
							HEAP32[$130>>2] = $131;
							$133 = (((($129) + (($u$02$i22*12)|0)|0)) + 4|0);
							$134 = (((($129) + (($d$03$i21*12)|0)|0)) + 4|0);
							$135 = HEAP32[$133>>2]|0;
							$136 = HEAP32[$134>>2]|0;
							HEAP32[$133>>2] = $136;
							HEAP32[$134>>2] = $135;
							$137 = (((($129) + (($u$02$i22*12)|0)|0)) + 8|0);
							$138 = (((($129) + (($d$03$i21*12)|0)|0)) + 8|0);
							$139 = HEAP32[$137>>2]|0;
							$140 = HEAP32[$138>>2]|0;
							HEAP32[$137>>2] = $140;
							HEAP32[$138>>2] = $139;
							$141 = (($u$02$i22) + 1)|0;
							$d$0$i23 = (($d$03$i21) + -1)|0;
							$142 = ($141|0)<($d$0$i23|0);
							if (!($142)) {
								break;
							}
							$$pre$i24 = HEAP32[$120>>2]|0;
							$129 = $$pre$i24;$d$03$i21 = $d$0$i23;$u$02$i22 = $141;
						}
						return;
						break;
					}
					case 6:  {
						$143 = ((($this)) + 16|0);
						__ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($143,$this);
						return;
						break;
					}
					default: {
						return;
					}
				}
			}
			function __ZN12_GLOBAL__N_115mirror_diagonalERNSt3__16vectorINS1_IhNS0_9allocatorIhEEEENS2_IS4_EEEER9Rectangle($data,$re) {
				$data = $data|0;
				$re = $re|0;
				var $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i6 = 0, $$pre39 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
				var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
				var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
				var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
				var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
				var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
				var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
				var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
				var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond51 = 0, $indvars$iv = 0;
				var $indvars$iv$next = 0, $or$cond = 0, $or$cond48 = 0, $row$032 = 0, $row1$035 = 0, $row3$025 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($re)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($re)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ((($re)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$re>>2]|0;
				$9 = (($7) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($5|0)<($10|0);
				$12 = $11 ? $10 : $5;
				if ($11) {
					$13 = ((($data)) + 4|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = HEAP32[$data>>2]|0;
					$16 = (($14) - ($15))|0;
					$17 = (($16|0) / 12)&-1;
					$18 = ($12>>>0)>($17>>>0);
					$19 = $15;
					$20 = $14;
					if ($18) {
						$21 = (($12) - ($17))|0;
						__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($data,$21);
					} else {
						$22 = ($12>>>0)<($17>>>0);
						if ($22) {
							$23 = (($19) + (($12*12)|0)|0);
							$24 = ($20|0)==($23|0);
							if (!($24)) {
								$26 = $20;
								while(1) {
									$25 = ((($26)) + -12|0);
									HEAP32[$13>>2] = $25;
									$27 = HEAP32[$25>>2]|0;
									$28 = ($27|0)==(0|0);
									if ($28) {
										$29 = $25;
									} else {
										$31 = ((($26)) + -8|0);
										$32 = HEAP32[$31>>2]|0;
										$33 = ($32|0)==($27|0);
										if (!($33)) {
											HEAP32[$31>>2] = $27;
										}
										__ZdlPv($27);
										$$pre$i$i$i6 = HEAP32[$13>>2]|0;
										$29 = $$pre$i$i$i6;
									}
									$30 = ($29|0)==($23|0);
									if ($30) {
										break;
									} else {
										$26 = $29;
									}
								}
							}
						}
					}
					$34 = HEAP32[$0>>2]|0;
					$35 = HEAP32[$2>>2]|0;
					$36 = (($34) + 1)|0;
					$37 = (($36) - ($35))|0;
					$38 = ($37|0)<($12|0);
					if ($38) {
						$row$032 = $37;
						while(1) {
							$39 = HEAP32[$data>>2]|0;
							$40 = (($39) + (($row$032*12)|0)|0);
							$41 = (((($39) + (($row$032*12)|0)|0)) + 4|0);
							$42 = HEAP32[$41>>2]|0;
							$43 = HEAP32[$40>>2]|0;
							$44 = (($42) - ($43))|0;
							$45 = ($12>>>0)>($44>>>0);
							$46 = $43;
							$47 = $42;
							if ($45) {
								$48 = (($12) - ($44))|0;
								__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($40,$48);
							} else {
								$49 = ($12>>>0)<($44>>>0);
								if ($49) {
									$50 = (($46) + ($12)|0);
									$51 = ($47|0)==($50|0);
									if (!($51)) {
										HEAP32[$41>>2] = $50;
									}
								}
							}
							$52 = (($row$032) + 1)|0;
							$53 = ($52|0)<($12|0);
							if ($53) {
								$row$032 = $52;
							} else {
								break;
							}
						}
					}
				} else {
					$54 = ($10|0)<($12|0);
					$55 = ($5|0)>(0);
					$or$cond = $54 & $55;
					if ($or$cond) {
						$164 = $3;$165 = $1;$row1$035 = 0;
						while(1) {
							$57 = HEAP32[$data>>2]|0;
							$58 = (($57) + (($row1$035*12)|0)|0);
							$59 = (((($57) + (($row1$035*12)|0)|0)) + 4|0);
							$60 = HEAP32[$59>>2]|0;
							$61 = HEAP32[$58>>2]|0;
							$62 = (($60) - ($61))|0;
							$63 = ($12>>>0)>($62>>>0);
							$64 = $61;
							$65 = $60;
							if ($63) {
								$66 = (($12) - ($62))|0;
								__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($58,$66);
								$$pre = HEAP32[$0>>2]|0;
								$$pre39 = HEAP32[$2>>2]|0;
								$72 = $$pre;$74 = $$pre39;
							} else {
								$67 = ($12>>>0)<($62>>>0);
								if ($67) {
									$68 = (($64) + ($12)|0);
									$69 = ($65|0)==($68|0);
									if ($69) {
										$72 = $165;$74 = $164;
									} else {
										HEAP32[$59>>2] = $68;
										$72 = $165;$74 = $164;
									}
								} else {
									$72 = $165;$74 = $164;
								}
							}
							$70 = (($row1$035) + 1)|0;
							$71 = (($72) + 1)|0;
							$73 = (($71) - ($74))|0;
							$75 = ($70|0)<($73|0);
							if ($75) {
								$164 = $74;$165 = $72;$row1$035 = $70;
							} else {
								break;
							}
						}
					}
				}
				$56 = ($12|0)>(0);
				if ($56) {
					$indvars$iv = 0;
					while(1) {
						$89 = ($indvars$iv|0)>(0);
						if ($89) {
							$90 = HEAP32[$data>>2]|0;
							$91 = (($90) + (($indvars$iv*12)|0)|0);
							$92 = HEAP32[$91>>2]|0;
							$93 = HEAP8[$92>>0]|0;
							$94 = HEAP32[$90>>2]|0;
							$95 = (($94) + ($indvars$iv)|0);
							$96 = HEAP8[$95>>0]|0;
							HEAP8[$92>>0] = $96;
							$97 = HEAP32[$data>>2]|0;
							$98 = HEAP32[$97>>2]|0;
							$99 = (($98) + ($indvars$iv)|0);
							HEAP8[$99>>0] = $93;
							$exitcond51 = ($indvars$iv|0)==(1);
							if (!($exitcond51)) {
								$103 = 1;
								while(1) {
									$$pre41 = HEAP32[$data>>2]|0;
									$101 = HEAP32[$91>>2]|0;
									$102 = (($101) + ($103)|0);
									$104 = HEAP8[$102>>0]|0;
									$105 = (($$pre41) + (($103*12)|0)|0);
									$106 = HEAP32[$105>>2]|0;
									$107 = (($106) + ($indvars$iv)|0);
									$108 = HEAP8[$107>>0]|0;
									HEAP8[$102>>0] = $108;
									$109 = HEAP32[$data>>2]|0;
									$110 = (($109) + (($103*12)|0)|0);
									$111 = HEAP32[$110>>2]|0;
									$112 = (($111) + ($indvars$iv)|0);
									HEAP8[$112>>0] = $104;
									$113 = (($103) + 1)|0;
									$exitcond = ($113|0)==($indvars$iv|0);
									if ($exitcond) {
										break;
									} else {
										$103 = $113;
									}
								}
							}
						}
						$indvars$iv$next = (($indvars$iv) + 1)|0;
						$100 = ($indvars$iv$next|0)<($12|0);
						if ($100) {
							$indvars$iv = $indvars$iv$next;
						} else {
							break;
						}
					}
				}
				$76 = HEAP32[$0>>2]|0;
				$77 = HEAP32[$2>>2]|0;
				$78 = (($76) + 1)|0;
				$79 = (($78) - ($77))|0;
				$80 = HEAP32[$6>>2]|0;
				$81 = HEAP32[$re>>2]|0;
				$82 = (($80) + 1)|0;
				$83 = (($82) - ($81))|0;
				__ZN9Rectangle6heightEi($re,$83);
				__ZN9Rectangle5widthEi($re,$79);
				$84 = HEAP32[$0>>2]|0;
				$85 = HEAP32[$2>>2]|0;
				$86 = (($84) + 1)|0;
				$87 = (($86) - ($85))|0;
				$88 = ($87|0)<($12|0);
				if (!($88)) {
					$135 = HEAP32[$6>>2]|0;
					$136 = HEAP32[$re>>2]|0;
					$137 = (($135) + 1)|0;
					$138 = (($137) - ($136))|0;
					$139 = ($138|0)<($12|0);
					$140 = ($87|0)>(0);
					$or$cond48 = $139 & $140;
					if (!($or$cond48)) {
						return;
					}
					$144 = $135;$146 = $136;$166 = $85;$167 = $84;$row3$025 = 0;
					while(1) {
						$141 = HEAP32[$data>>2]|0;
						$142 = (($141) + (($row3$025*12)|0)|0);
						$143 = (($144) + 1)|0;
						$145 = (($143) - ($146))|0;
						$147 = (((($141) + (($row3$025*12)|0)|0)) + 4|0);
						$148 = HEAP32[$147>>2]|0;
						$149 = HEAP32[$142>>2]|0;
						$150 = (($148) - ($149))|0;
						$151 = ($145>>>0)>($150>>>0);
						$152 = $149;
						$153 = $148;
						if ($151) {
							$154 = (($145) - ($150))|0;
							__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj($142,$154);
							$$pre44 = HEAP32[$0>>2]|0;
							$$pre45 = HEAP32[$2>>2]|0;
							$160 = $$pre44;$162 = $$pre45;
						} else {
							$155 = ($145>>>0)<($150>>>0);
							if ($155) {
								$156 = (($152) + ($145)|0);
								$157 = ($153|0)==($156|0);
								if ($157) {
									$160 = $167;$162 = $166;
								} else {
									HEAP32[$147>>2] = $156;
									$160 = $167;$162 = $166;
								}
							} else {
								$160 = $167;$162 = $166;
							}
						}
						$158 = (($row3$025) + 1)|0;
						$159 = (($160) + 1)|0;
						$161 = (($159) - ($162))|0;
						$163 = ($158|0)<($161|0);
						if (!($163)) {
							break;
						}
						$$pre42 = HEAP32[$6>>2]|0;
						$$pre43 = HEAP32[$re>>2]|0;
						$144 = $$pre42;$146 = $$pre43;$166 = $162;$167 = $160;$row3$025 = $158;
					}
					return;
				}
				$114 = ((($data)) + 4|0);
				$115 = HEAP32[$114>>2]|0;
				$116 = HEAP32[$data>>2]|0;
				$117 = (($115) - ($116))|0;
				$118 = (($117|0) / 12)&-1;
				$119 = ($87>>>0)>($118>>>0);
				$120 = $116;
				$121 = $115;
				if ($119) {
					$122 = (($87) - ($118))|0;
					__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($data,$122);
					return;
				}
				$123 = ($87>>>0)<($118>>>0);
				if (!($123)) {
					return;
				}
				$124 = (($120) + (($87*12)|0)|0);
				$125 = ($121|0)==($124|0);
				if ($125) {
					return;
				} else {
					$127 = $121;
				}
				while(1) {
					$126 = ((($127)) + -12|0);
					HEAP32[$114>>2] = $126;
					$128 = HEAP32[$126>>2]|0;
					$129 = ($128|0)==(0|0);
					if ($129) {
						$130 = $126;
					} else {
						$132 = ((($127)) + -8|0);
						$133 = HEAP32[$132>>2]|0;
						$134 = ($133|0)==($128|0);
						if (!($134)) {
							HEAP32[$132>>2] = $128;
						}
						__ZdlPv($128);
						$$pre$i$i$i = HEAP32[$114>>2]|0;
						$130 = $$pre$i$i$i;
					}
					$131 = ($130|0)==($124|0);
					if ($131) {
						break;
					} else {
						$127 = $130;
					}
				}
				return;
			}
			function __ZN9RectangleC2Eiiii($this,$l,$t,$r,$b) {
				$this = $this|0;
				$l = $l|0;
				$t = $t|0;
				$r = $r|0;
				$b = $b|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$0 = ($r|0)<($l|0);
				$1 = ($b|0)<($t|0);
				$or$cond = $0 | $1;
				if ($or$cond) {
					$2 = HEAP32[1700]|0;
					$3 = ($2|0)>(-1);
					if ($3) {
						$4 = HEAP32[90]|0;
						HEAP32[$vararg_buffer>>2] = $l;
						$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
						HEAP32[$vararg_ptr1>>2] = $t;
						$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
						HEAP32[$vararg_ptr2>>2] = $r;
						$vararg_ptr3 = ((($vararg_buffer)) + 12|0);
						HEAP32[$vararg_ptr3>>2] = $b;
						(_fprintf($4,1552,$vararg_buffer)|0);
					}
					__ZN5Ocrad14internal_errorEPKc(1584);
				}
				HEAP32[$this>>2] = $l;
				$5 = ((($this)) + 4|0);
				HEAP32[$5>>2] = $t;
				$6 = ((($this)) + 8|0);
				HEAP32[$6>>2] = $r;
				$7 = ((($this)) + 12|0);
				HEAP32[$7>>2] = $b;
				STACKTOP = sp;return;
			}
			function __ZN9Rectangle4leftEi($this,$l) {
				$this = $this|0;
				$l = $l|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<($l|0);
				if ($2) {
					__ZN5Ocrad14internal_errorEPKc(1620);
				}
				HEAP32[$this>>2] = $l;
				return;
			}
			function __ZN9Rectangle3topEi($this,$t) {
				$this = $this|0;
				$t = $t|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<($t|0);
				if ($2) {
					__ZN5Ocrad14internal_errorEPKc(1662);
				}
				$3 = ((($this)) + 4|0);
				HEAP32[$3>>2] = $t;
				return;
			}
			function __ZN9Rectangle5rightEi($this,$r) {
				$this = $this|0;
				$r = $r|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)>($r|0);
				if ($1) {
					__ZN5Ocrad14internal_errorEPKc(1703);
				}
				$2 = ((($this)) + 8|0);
				HEAP32[$2>>2] = $r;
				return;
			}
			function __ZN9Rectangle6bottomEi($this,$b) {
				$this = $this|0;
				$b = $b|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>($b|0);
				if ($2) {
					__ZN5Ocrad14internal_errorEPKc(1746);
				}
				$3 = ((($this)) + 12|0);
				HEAP32[$3>>2] = $b;
				return;
			}
			function __ZN9Rectangle6heightEi($this,$h) {
				$this = $this|0;
				$h = $h|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($h|0)<(1);
				if ($0) {
					__ZN5Ocrad14internal_errorEPKc(1790);
				}
				$1 = ((($this)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($h) + -1)|0;
				$4 = (($3) + ($2))|0;
				$5 = ((($this)) + 12|0);
				HEAP32[$5>>2] = $4;
				return;
			}
			function __ZN9Rectangle5widthEi($this,$w) {
				$this = $this|0;
				$w = $w|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($w|0)<(1);
				if ($0) {
					__ZN5Ocrad14internal_errorEPKc(1834);
				}
				$1 = HEAP32[$this>>2]|0;
				$2 = (($w) + -1)|0;
				$3 = (($2) + ($1))|0;
				$4 = ((($this)) + 8|0);
				HEAP32[$4>>2] = $3;
				return;
			}
			function __ZN9Rectangle13add_rectangleERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$re>>2]|0;
				$1 = HEAP32[$this>>2]|0;
				$2 = ($0|0)<($1|0);
				if ($2) {
					HEAP32[$this>>2] = $0;
				}
				$3 = ((($re)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($this)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)<($6|0);
				if ($7) {
					HEAP32[$5>>2] = $4;
				}
				$8 = ((($re)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ((($this)) + 8|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = ($9|0)>($11|0);
				if ($12) {
					HEAP32[$10>>2] = $9;
				}
				$13 = ((($re)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($this)) + 12|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = ($14|0)>($16|0);
				if (!($17)) {
					return;
				}
				HEAP32[$15>>2] = $14;
				return;
			}
			function __ZNK9Rectangle8includesERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$re>>2]|0;
				$2 = ($0|0)>($1|0);
				if ($2) {
					$18 = 0;
					return ($18|0);
				}
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($re)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)>($6|0);
				if ($7) {
					$18 = 0;
					return ($18|0);
				}
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ((($re)) + 8|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = ($9|0)<($11|0);
				if ($12) {
					$18 = 0;
					return ($18|0);
				}
				$13 = ((($this)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($re)) + 12|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = ($14|0)>=($16|0);
				$18 = $17;
				return ($18|0);
			}
			function __ZNK9Rectangle8includesEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)>($col|0);
				if ($1) {
					$11 = 0;
					return ($11|0);
				}
				$2 = ((($this)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($3|0)<($col|0);
				if ($4) {
					$11 = 0;
					return ($11|0);
				}
				$5 = ((($this)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($6|0)>($row|0);
				if ($7) {
					$11 = 0;
					return ($11|0);
				}
				$8 = ((($this)) + 12|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($9|0)>=($row|0);
				$11 = $10;
				return ($11|0);
			}
			function __ZNK9Rectangle17strictly_includesERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$re>>2]|0;
				$2 = ($0|0)<($1|0);
				if (!($2)) {
					$18 = 0;
					return ($18|0);
				}
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($re)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)<($6|0);
				if (!($7)) {
					$18 = 0;
					return ($18|0);
				}
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ((($re)) + 8|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = ($9|0)>($11|0);
				if (!($12)) {
					$18 = 0;
					return ($18|0);
				}
				$13 = ((($this)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($re)) + 12|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = ($14|0)>($16|0);
				$18 = $17;
				return ($18|0);
			}
			function __ZNK9Rectangle16includes_hcenterERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$re>>2]|0;
				$2 = ((($re)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($3) + ($1))|0;
				$5 = (($4|0) / 2)&-1;
				$6 = ($0|0)>($5|0);
				if ($6) {
					$10 = 0;
					return ($10|0);
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ($8|0)>=($5|0);
				$10 = $9;
				return ($10|0);
			}
			function __ZNK9Rectangle16includes_vcenterERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($re)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($re)) + 12|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($5) + ($3))|0;
				$7 = (($6|0) / 2)&-1;
				$8 = ($1|0)>($7|0);
				if ($8) {
					$12 = 0;
					return ($12|0);
				}
				$9 = ((($this)) + 12|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = ($10|0)>=($7|0);
				$12 = $11;
				return ($12|0);
			}
			function __ZNK9Rectangle10h_includesERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$re>>2]|0;
				$2 = ($0|0)>($1|0);
				if ($2) {
					$8 = 0;
					return ($8|0);
				}
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($re)) + 8|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)>=($6|0);
				$8 = $7;
				return ($8|0);
			}
			function __ZNK9Rectangle10h_includesEi($this,$col) {
				$this = $this|0;
				$col = $col|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)>($col|0);
				if ($1) {
					$5 = 0;
					return ($5|0);
				}
				$2 = ((($this)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($3|0)>=($col|0);
				$5 = $4;
				return ($5|0);
			}
			function __ZNK9Rectangle10v_includesEi($this,$row) {
				$this = $this|0;
				$row = $row|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>($row|0);
				if ($2) {
					$6 = 0;
					return ($6|0);
				}
				$3 = ((($this)) + 12|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)>=($row|0);
				$6 = $5;
				return ($6|0);
			}
			function __ZNK9Rectangle10h_overlapsERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($re)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($0|0)>($2|0);
				if ($3) {
					$8 = 0;
					return ($8|0);
				}
				$4 = ((($this)) + 8|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$re>>2]|0;
				$7 = ($5|0)>=($6|0);
				$8 = $7;
				return ($8|0);
			}
			function __ZNK9Rectangle10v_overlapsERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($re)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				if ($4) {
					$10 = 0;
					return ($10|0);
				}
				$5 = ((($this)) + 12|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ((($re)) + 4|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ($6|0)>=($8|0);
				$10 = $9;
				return ($10|0);
			}
			function __ZNK9Rectangle17v_overlap_percentERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ov$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = ((($re)) + 12|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)<($3|0);
				$5 = $4 ? $2 : $3;
				$6 = ((($this)) + 4|0);
				$7 = ((($re)) + 4|0);
				$8 = HEAP32[$6>>2]|0;
				$9 = HEAP32[$7>>2]|0;
				$10 = ($8|0)<($9|0);
				$11 = $10 ? $9 : $8;
				$12 = (($5) - ($11))|0;
				$13 = ($12|0)>(-1);
				if (!($13)) {
					$ov$0 = 0;
					return ($ov$0|0);
				}
				$14 = ($12*100)|0;
				$15 = (($14) + 100)|0;
				$16 = (($3) + 1)|0;
				$17 = (($16) - ($8))|0;
				$18 = (($2) + 1)|0;
				$19 = (($18) - ($9))|0;
				$20 = ($19|0)<($17|0);
				$21 = $20 ? $19 : $17;
				$22 = (($15|0) / ($21|0))&-1;
				$23 = ($22|0)>(1);
				$24 = $23 ? $22 : 1;
				$ov$0 = $24;
				return ($ov$0|0);
			}
			function __ZNK9Rectangle14is_hcentred_inERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$re>>2]|0;
				$1 = ((($re)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($2) + ($0))|0;
				$4 = (($3|0) / 2)&-1;
				$5 = HEAP32[$this>>2]|0;
				$6 = ($5|0)>($4|0);
				$$phi$trans$insert = ((($this)) + 8|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$7 = ($$pre|0)<($4|0);
				$or$cond = $6 | $7;
				if (!($or$cond)) {
					$$2 = 1;
					return ($$2|0);
				}
				$8 = ((($re)) + 12|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ((($re)) + 4|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = (($9) + 1)|0;
				$13 = (($12) - ($11))|0;
				$14 = (($2) + 1)|0;
				$15 = (($14) - ($0))|0;
				$16 = ($15|0)<($13|0);
				$17 = $16 ? $15 : $13;
				$18 = (($17|0) / 2)&-1;
				$19 = (($$pre) + 1)|0;
				$20 = (($19) - ($5))|0;
				$21 = ($20|0)<($18|0);
				if ($21) {
					$22 = (($18) + 1)|0;
					$23 = (($22|0) / 2)&-1;
					$24 = (($5) + ($$pre))|0;
					$25 = (($24|0) / 2)&-1;
					$26 = (($25) - ($23))|0;
					$27 = (($23) + ($25))|0;
					$notlhs = ($26|0)<=($4|0);
					$notrhs = ($27|0)>=($4|0);
					$not$or$cond = $notrhs & $notlhs;
					return ($not$or$cond|0);
				} else {
					$$2 = 0;
					return ($$2|0);
				}
				return (0)|0;
			}
			function __ZNK9Rectangle14is_vcentred_inERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$or$cond = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($re)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($re)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($3) + ($1))|0;
				$5 = (($4|0) / 2)&-1;
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ($7|0)>($5|0);
				$$phi$trans$insert = ((($this)) + 12|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$9 = ($$pre|0)<($5|0);
				$or$cond = $8 | $9;
				if (!($or$cond)) {
					$$2 = 1;
					return ($$2|0);
				}
				$10 = (($3) + 1)|0;
				$11 = (($10) - ($1))|0;
				$12 = ((($re)) + 8|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = HEAP32[$re>>2]|0;
				$15 = (($13) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ($16|0)<($11|0);
				$18 = $17 ? $16 : $11;
				$19 = (($18|0) / 2)&-1;
				$20 = (($$pre) + 1)|0;
				$21 = (($20) - ($7))|0;
				$22 = ($21|0)<($19|0);
				if ($22) {
					$23 = (($19) + 1)|0;
					$24 = (($23|0) / 2)&-1;
					$25 = (($7) + ($$pre))|0;
					$26 = (($25|0) / 2)&-1;
					$27 = (($26) - ($24))|0;
					$28 = (($24) + ($26))|0;
					$notlhs = ($27|0)<=($5|0);
					$notrhs = ($28|0)>=($5|0);
					$not$or$cond = $notrhs & $notlhs;
					return ($not$or$cond|0);
				} else {
					$$2 = 0;
					return ($$2|0);
				}
				return (0)|0;
			}
			function __ZNK9Rectangle8precedesERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$re>>2]|0;
				$3 = ($1|0)<($2|0);
				if ($3) {
					$$0 = 1;
					return ($$0|0);
				}
				$4 = HEAP32[$this>>2]|0;
				$5 = ((($re)) + 8|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)>($6|0);
				if (!($7)) {
					$8 = ((($this)) + 4|0);
					$9 = HEAP32[$8>>2]|0;
					$10 = ((($re)) + 4|0);
					$11 = HEAP32[$10>>2]|0;
					$12 = ($9|0)<($11|0);
					if ($12) {
						$$0 = 1;
						return ($$0|0);
					}
					$13 = ($9|0)==($11|0);
					$14 = ($4|0)<($2|0);
					$or$cond = $13 & $14;
					if ($or$cond) {
						$$0 = 1;
						return ($$0|0);
					}
				}
				$$0 = 0;
				return ($$0|0);
			}
			function __ZNK9Rectangle10h_precedesERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($this)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($2) + ($0))|0;
				$4 = (($3|0) / 2)&-1;
				$5 = HEAP32[$re>>2]|0;
				$6 = ((($re)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = (($7) + ($5))|0;
				$9 = (($8|0) / 2)&-1;
				$10 = ($4|0)<($9|0);
				return ($10|0);
			}
			function __ZN9Rectangle6hypotiEii($c1,$c2) {
				$c1 = $c1|0;
				$c2 = $c2|0;
				var $$lower$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $lower$0$lcssa = 0, $lower$0$upper$0 = 0, $lower$03 = 0, $neg = 0, $neg2 = 0, $upper$0$ = 0, $upper$0$lcssa = 0, $upper$04 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($c1|0)<(0);
				$1 = $0 << 31 >> 31;
				$2 = (___muldi3(($c1|0),($1|0),($c1|0),($1|0))|0);
				$3 = tempRet0;
				$4 = ($c2|0)<(0);
				$5 = $4 << 31 >> 31;
				$6 = (___muldi3(($c2|0),($5|0),($c2|0),($5|0))|0);
				$7 = tempRet0;
				$8 = (_i64Add(($6|0),($7|0),($2|0),($3|0))|0);
				$9 = tempRet0;
				$ispos = ($c1|0)>(-1);
				$neg = (0 - ($c1))|0;
				$10 = $ispos ? $c1 : $neg;
				$ispos1 = ($c2|0)>(-1);
				$neg2 = (0 - ($c2))|0;
				$11 = $ispos1 ? $c2 : $neg2;
				$12 = ($10|0)<($11|0);
				$13 = $12 ? $11 : $10;
				$14 = (($11) + ($10))|0;
				$15 = (($14) - ($13))|0;
				$16 = ($15|0)>(1);
				if ($16) {
					$lower$03 = $13;$upper$04 = $14;
					while(1) {
						$17 = (($upper$04) + ($lower$03))|0;
						$18 = (($17|0) / 2)&-1;
						$19 = ($18|0)<(0);
						$20 = $19 << 31 >> 31;
						$21 = (___muldi3(($18|0),($20|0),($18|0),($20|0))|0);
						$22 = tempRet0;
						$23 = ($22>>>0)<($9>>>0);
						$24 = ($21>>>0)<($8>>>0);
						$25 = ($22|0)==($9|0);
						$26 = $25 & $24;
						$27 = $23 | $26;
						$$lower$0 = $27 ? $18 : $lower$03;
						$upper$0$ = $27 ? $upper$04 : $18;
						$28 = (($upper$0$) - ($$lower$0))|0;
						$29 = ($28|0)>(1);
						if ($29) {
							$lower$03 = $$lower$0;$upper$04 = $upper$0$;
						} else {
							$lower$0$lcssa = $$lower$0;$upper$0$lcssa = $upper$0$;
							break;
						}
					}
				} else {
					$lower$0$lcssa = $13;$upper$0$lcssa = $14;
				}
				$30 = ($lower$0$lcssa|0)<(0);
				$31 = $30 << 31 >> 31;
				$32 = (___muldi3(($lower$0$lcssa|0),($31|0),($lower$0$lcssa|0),($31|0))|0);
				$33 = tempRet0;
				$34 = (_bitshift64Shl(($8|0),($9|0),1)|0);
				$35 = tempRet0;
				$36 = (_i64Subtract(($34|0),($35|0),($32|0),($33|0))|0);
				$37 = tempRet0;
				$38 = ($upper$0$lcssa|0)<(0);
				$39 = $38 << 31 >> 31;
				$40 = (___muldi3(($upper$0$lcssa|0),($39|0),($upper$0$lcssa|0),($39|0))|0);
				$41 = tempRet0;
				$42 = ($37|0)<($41|0);
				$43 = ($36>>>0)<($40>>>0);
				$44 = ($37|0)==($41|0);
				$45 = $44 & $43;
				$46 = $42 | $45;
				$lower$0$upper$0 = $46 ? $lower$0$lcssa : $upper$0$lcssa;
				return ($lower$0$upper$0|0);
			}
			function __ZNK9Rectangle10v_distanceERKS_($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($re)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($3|0)<($1|0);
				if ($4) {
					$6 = ((($re)) + 4|0);
					$7 = HEAP32[$6>>2]|0;
					$8 = ((($this)) + 12|0);
					$9 = HEAP32[$8>>2]|0;
					$10 = ($7|0)<($9|0);
					$11 = (($7) - ($9))|0;
					$$ = $10 ? 0 : $11;
					return ($$|0);
				} else {
					$5 = (($3) - ($1))|0;
					return ($5|0);
				}
				return (0)|0;
			}
			function __ZNK9Rectangle10v_distanceEi($this,$row) {
				$this = $this|0;
				$row = $row|0;
				var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<($row|0);
				if ($2) {
					$4 = ((($this)) + 12|0);
					$5 = HEAP32[$4>>2]|0;
					$6 = ($5|0)>($row|0);
					$7 = (($row) - ($5))|0;
					$$ = $6 ? 0 : $7;
					return ($$|0);
				} else {
					$3 = (($1) - ($row))|0;
					return ($3|0);
				}
				return (0)|0;
			}
			function __ZN8TextpageC2ERK10Page_imagePKcRK7Controlb($this,$page_image,$filename,$control,$layout) {
				$this = $this|0;
				$page_image = $page_image|0;
				$filename = $filename|0;
				$control = $control|0;
				$layout = $layout|0;
				var $$0 = 0, $$06 = 0, $$in = 0, $$in$i = 0, $$in108 = 0, $$in109 = 0, $$index = 0, $$index30 = 0, $$index34 = 0, $$index38 = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa157 = 0, $$lcssa159 = 0, $$lcssa163 = 0, $$lcssa73 = 0, $$lcssa75 = 0, $$off = 0, $$off41 = 0, $$pr = 0;
				var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i34 = 0, $$pre$i$i37 = 0, $$pre$i27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
				var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
				var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
				var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
				var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
				var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
				var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
				var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
				var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
				var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
				var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
				var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
				var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
				var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
				var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
				var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
				var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
				var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
				var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
				var $99 = 0, $i$02$i$i = 0, $i$04$i = 0, $i$083 = 0, $i$083$us = 0, $i1$076 = 0, $i2$081 = 0, $i2$081$us = 0, $i3$079 = 0, $i4$077 = 0, $lpad$phi$index = 0, $lpad$phi$index22 = 0, $lpad$phi51$index = 0, $lpad$phi51$index46 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i22 = 0, $scevgep$i$i$i$i$i$i$i$i$i16 = 0;
				var $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i23 = 0, $scevgep4$i$i$i$i$i$i$i$i$i17 = 0, $sum$0$lcssa$i$i = 0, $sum$01$i$i = 0, $tbp = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $zindex$05$i = 0, $zone_vector = 0, $zone_vector$idx$val$i = 0;
				var $zone_vector$idx11$val = 0, $zone_vector$idx11$val$us = 0, $zone_vector$idx12$val = 0, $zone_vector$idx12$val$us = 0, $zone_vector$idx2$val$i = 0, $zone_vector$idx2$val$in$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer15 = sp + 40|0;
				$vararg_buffer11 = sp + 32|0;
				$vararg_buffer7 = sp + 24|0;
				$vararg_buffer4 = sp + 16|0;
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				$zone_vector = sp + 84|0;
				$tbp = sp + 80|0;
				$tmp = sp + 48|0;
				;HEAP32[$this>>2]=HEAP32[$page_image>>2]|0;HEAP32[$this+4>>2]=HEAP32[$page_image+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$page_image+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$page_image+12>>2]|0;
				$0 = ((($this)) + 16|0);
				$1 = (_strlen($filename)|0);
				__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$filename,$1);
				$2 = ((($this)) + 28|0);
				HEAP32[$2>>2] = 0;
				$3 = ((($this)) + 32|0);
				HEAP32[$3>>2] = 0;
				$4 = ((($this)) + 36|0);
				HEAP32[$4>>2] = 0;
				$5 = ((($control)) + 24|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($6>>>0)>(100);
				if ($7) {
					STACKTOP = sp;return;
				}
				HEAP32[$zone_vector>>2] = 0;
				$8 = ((($zone_vector)) + 4|0);
				HEAP32[$8>>2] = 0;
				$9 = ((($zone_vector)) + 8|0);
				HEAP32[$9>>2] = 0;
				__THREW__ = 0;
				invoke_viiii(55,($page_image|0),($zone_vector|0),($6|0),($layout|0));
				$10 = __THREW__; __THREW__ = 0;
				$11 = $10&1;
				L4: do {
					if ($11) {
						label = 8;
					} else {
						$12 = HEAP32[1700]|0;
						$13 = ($12|0)>(0);
						if ($13) {
							$14 = HEAP32[90]|0;
							$15 = HEAP32[$8>>2]|0;
							$16 = HEAP32[$zone_vector>>2]|0;
							$17 = (($15) - ($16))|0;
							$18 = (($17|0) / 40)&-1;
							HEAP32[$vararg_buffer>>2] = $18;
							(_fprintf($14,1900,$vararg_buffer)|0);
						}
						$27 = ($6|0)>(97);
						L9: do {
							if ($27) {
								$28 = ((($control)) + 16|0);
								$29 = HEAP32[$28>>2]|0;
								$30 = ($29|0)==(0|0);
								if ($30) {
									label = 99;
								} else {
									$31 = HEAP32[$8>>2]|0;
									$32 = HEAP32[$zone_vector>>2]|0;
									$33 = (($31) - ($32))|0;
									$34 = (($33|0) / 40)&-1;
									HEAP32[$vararg_buffer1>>2] = $34;
									(_fprintf($29,1928,$vararg_buffer1)|0);
									$35 = HEAP32[$8>>2]|0;
									$36 = HEAP32[$zone_vector>>2]|0;
									$37 = ($35|0)==($36|0);
									$38 = $36;
									if ($37) {
										$sum$0$lcssa$i$i = 0;
									} else {
										$39 = (($35) - ($36))|0;
										$40 = (($39|0) / 40)&-1;
										$i$02$i$i = 0;$sum$01$i$i = 0;
										while(1) {
											$41 = (((($38) + (($i$02$i$i*40)|0)|0)) + 28|0);
											$42 = (((($38) + (($i$02$i$i*40)|0)|0)) + 32|0);
											$43 = HEAP32[$42>>2]|0;
											$44 = HEAP32[$41>>2]|0;
											$45 = (($43) - ($44))|0;
											$46 = $45 >> 2;
											$47 = (($46) + ($sum$01$i$i))|0;
											$48 = (($i$02$i$i) + 1)|0;
											$49 = ($48>>>0)<($40>>>0);
											if ($49) {
												$i$02$i$i = $48;$sum$01$i$i = $47;
											} else {
												$sum$0$lcssa$i$i = $47;
												break;
											}
										}
									}
									HEAP32[$vararg_buffer4>>2] = $sum$0$lcssa$i$i;
									(_fprintf($29,1952,$vararg_buffer4)|0);
									$50 = HEAP32[$8>>2]|0;
									$51 = HEAP32[$zone_vector>>2]|0;
									$52 = ($50|0)==($51|0);
									$53 = $51;
									if ($52) {
										$320 = $53;
									} else {
										$54 = (($50) - ($51))|0;
										$55 = (($54|0) / 40)&-1;
										$63 = $55;$zindex$05$i = 0;$zone_vector$idx2$val$in$i = $51;
										L18: while(1) {
											$zone_vector$idx2$val$i = $zone_vector$idx2$val$in$i;
											$62 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 28|0);
											$60 = (($zindex$05$i) + 1)|0;
											HEAP32[$vararg_buffer7>>2] = $60;
											$vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
											HEAP32[$vararg_ptr10>>2] = $63;
											(_fprintf($29,1977,$vararg_buffer7)|0);
											$64 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 8|0);
											$65 = HEAP32[$64>>2]|0;
											$66 = (($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0);
											$67 = HEAP32[$66>>2]|0;
											$68 = (($65) + 1)|0;
											$69 = (($68) - ($67))|0;
											$70 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 12|0);
											$71 = HEAP32[$70>>2]|0;
											$72 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 4|0);
											$73 = HEAP32[$72>>2]|0;
											$74 = (($71) + 1)|0;
											$75 = (($74) - ($73))|0;
											HEAP32[$vararg_buffer11>>2] = $69;
											$vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
											HEAP32[$vararg_ptr14>>2] = $75;
											(_fprintf($29,1992,$vararg_buffer11)|0);
											$zone_vector$idx$val$i = HEAP32[$zone_vector>>2]|0;
											$76 = (((($zone_vector$idx$val$i) + (($zindex$05$i*40)|0)|0)) + 28|0);
											$77 = (((($zone_vector$idx$val$i) + (($zindex$05$i*40)|0)|0)) + 32|0);
											$78 = HEAP32[$77>>2]|0;
											$79 = HEAP32[$76>>2]|0;
											$80 = (($78) - ($79))|0;
											$81 = $80 >> 2;
											HEAP32[$vararg_buffer15>>2] = $81;
											(_fprintf($29,2013,$vararg_buffer15)|0);
											$82 = (((($zone_vector$idx2$val$i) + (($zindex$05$i*40)|0)|0)) + 32|0);
											$83 = HEAP32[$82>>2]|0;
											$84 = HEAP32[$62>>2]|0;
											$85 = ($83|0)==($84|0);
											if (!($85)) {
												$$in$i = $84;$i$04$i = 0;
												while(1) {
													$86 = $$in$i;
													$87 = (($86) + ($i$04$i<<2)|0);
													$88 = HEAP32[$87>>2]|0;
													__THREW__ = 0;
													invoke_vii(56,($88|0),($29|0));
													$89 = __THREW__; __THREW__ = 0;
													$90 = $89&1;
													if ($90) {
														label = 5;
														break L18;
													}
													$91 = (($i$04$i) + 1)|0;
													$92 = HEAP32[$82>>2]|0;
													$93 = HEAP32[$62>>2]|0;
													$94 = (($92) - ($93))|0;
													$95 = $94 >> 2;
													$96 = ($91>>>0)<($95>>>0);
													if ($96) {
														$$in$i = $93;$i$04$i = $91;
													} else {
														break;
													}
												}
											}
											$56 = HEAP32[$8>>2]|0;
											$57 = HEAP32[$zone_vector>>2]|0;
											$58 = (($56) - ($57))|0;
											$59 = (($58|0) / 40)&-1;
											$61 = ($60>>>0)<($59>>>0);
											if ($61) {
												$63 = $59;$zindex$05$i = $60;$zone_vector$idx2$val$in$i = $57;
											} else {
												$$lcssa = $57;
												label = 100;
												break;
											}
										}
										if ((label|0) == 5) {
											$19 = ___cxa_find_matching_catch_2()|0;
											$20 = tempRet0;
											$lpad$phi$index = $19;$lpad$phi$index22 = $20;
											label = 9;
											break L4;
										}
										else if ((label|0) == 100) {
											$319 = $$lcssa;
											$320 = $319;
											break;
										}
									}
								}
							} else {
								$97 = ($6|0)>(95);
								$$off = (($6) + -90)|0;
								$98 = ($$off>>>0)<(4);
								$or$cond = $97 | $98;
								if ($or$cond) {
									label = 99;
								} else {
									$99 = HEAP32[$8>>2]|0;
									$100 = HEAP32[$zone_vector>>2]|0;
									$101 = ($99|0)==($100|0);
									$102 = $100;
									L30: do {
										if (!($101)) {
											$103 = ($6|0)<(90);
											$104 = ((($this)) + 36|0);
											do {
												if ($103) {
													$i$083$us = 0;$zone_vector$idx11$val$us = $102;
													L33: while(1) {
														__THREW__ = 0;
														$105 = (invoke_ii(29,28)|0);
														$106 = __THREW__; __THREW__ = 0;
														$107 = $106&1;
														if ($107) {
															label = 36;
															break;
														}
														$108 = (($zone_vector$idx11$val$us) + (($i$083$us*40)|0)|0);
														$109 = (((($zone_vector$idx11$val$us) + (($i$083$us*40)|0)|0)) + 28|0);
														__THREW__ = 0;
														invoke_viiii(57,($105|0),($page_image|0),($108|0),($109|0));
														$110 = __THREW__; __THREW__ = 0;
														$111 = $110&1;
														if ($111) {
															$$lcssa154 = $105;
															label = 35;
															break;
														}
														HEAP32[$tbp>>2] = $105;
														$112 = ((($105)) + 16|0);
														$113 = ((($105)) + 20|0);
														$114 = HEAP32[$113>>2]|0;
														$115 = HEAP32[$112>>2]|0;
														$116 = ($114|0)==($115|0);
														$117 = $105;
														if (!($116)) {
															__THREW__ = 0;
															invoke_vii(58,($105|0),($control|0));
															$118 = __THREW__; __THREW__ = 0;
															$119 = $118&1;
															if ($119) {
																label = 36;
																break;
															}
														}
														$120 = ((($105)) + 16|0);
														$121 = ((($105)) + 20|0);
														$122 = HEAP32[$121>>2]|0;
														$123 = HEAP32[$120>>2]|0;
														$124 = ($122|0)==($123|0);
														do {
															if ($124) {
																__THREW__ = 0;
																invoke_vi(60,($105|0));
																$132 = __THREW__; __THREW__ = 0;
																$133 = $132&1;
																if ($133) {
																	$$lcssa157 = $105;
																	label = 37;
																	break L33;
																}
																__ZdlPv($105);
															} else {
																$125 = HEAP32[$3>>2]|0;
																$126 = HEAP32[$104>>2]|0;
																$127 = ($125|0)==($126|0);
																if ($127) {
																	__THREW__ = 0;
																	invoke_vii(59,($2|0),($tbp|0));
																	$130 = __THREW__; __THREW__ = 0;
																	$131 = $130&1;
																	if ($131) {
																		label = 36;
																		break L33;
																	} else {
																		break;
																	}
																} else {
																	HEAP32[$125>>2] = $117;
																	$128 = HEAP32[$3>>2]|0;
																	$129 = ((($128)) + 4|0);
																	HEAP32[$3>>2] = $129;
																	break;
																}
															}
														} while(0);
														$134 = (($i$083$us) + 1)|0;
														$135 = HEAP32[$8>>2]|0;
														$136 = HEAP32[$zone_vector>>2]|0;
														$137 = (($135) - ($136))|0;
														$138 = (($137|0) / 40)&-1;
														$139 = ($134>>>0)<($138>>>0);
														$140 = $136;
														if ($139) {
															$i$083$us = $134;$zone_vector$idx11$val$us = $140;
														} else {
															break L30;
														}
													}
													if ((label|0) == 35) {
														$141 = ___cxa_find_matching_catch_2()|0;
														$142 = tempRet0;
														$$index = $141;$$index30 = $142;$$lcssa73 = $$lcssa154;
														label = 43;
														break;
													}
													else if ((label|0) == 36) {
														$143 = ___cxa_find_matching_catch_2()|0;
														$144 = tempRet0;
														$lpad$phi$index = $143;$lpad$phi$index22 = $144;
														label = 9;
														break L4;
													}
													else if ((label|0) == 37) {
														$145 = ___cxa_find_matching_catch_2()|0;
														$146 = tempRet0;
														$$index34 = $145;$$index38 = $146;$$lcssa75 = $$lcssa157;
														label = 50;
														break;
													}
												} else {
													$i$083 = 0;$zone_vector$idx11$val = $102;
													L52: while(1) {
														__THREW__ = 0;
														$148 = (invoke_ii(29,28)|0);
														$149 = __THREW__; __THREW__ = 0;
														$150 = $149&1;
														if ($150) {
															label = 7;
															break;
														}
														$151 = (($zone_vector$idx11$val) + (($i$083*40)|0)|0);
														$152 = (((($zone_vector$idx11$val) + (($i$083*40)|0)|0)) + 28|0);
														__THREW__ = 0;
														invoke_viiii(57,($148|0),($page_image|0),($151|0),($152|0));
														$153 = __THREW__; __THREW__ = 0;
														$154 = $153&1;
														if ($154) {
															$$lcssa159 = $148;
															label = 42;
															break;
														}
														HEAP32[$tbp>>2] = $148;
														$155 = ((($148)) + 16|0);
														$156 = ((($148)) + 20|0);
														$157 = HEAP32[$156>>2]|0;
														$158 = HEAP32[$155>>2]|0;
														$159 = ($157|0)==($158|0);
														$160 = $148;
														do {
															if ($159) {
																__THREW__ = 0;
																invoke_vi(60,($148|0));
																$170 = __THREW__; __THREW__ = 0;
																$171 = $170&1;
																if ($171) {
																	$$lcssa163 = $148;
																	label = 49;
																	break L52;
																}
																__ZdlPv($148);
															} else {
																$163 = HEAP32[$3>>2]|0;
																$164 = HEAP32[$104>>2]|0;
																$165 = ($163|0)==($164|0);
																if ($165) {
																	__THREW__ = 0;
																	invoke_vii(59,($2|0),($tbp|0));
																	$168 = __THREW__; __THREW__ = 0;
																	$169 = $168&1;
																	if ($169) {
																		label = 7;
																		break L52;
																	} else {
																		break;
																	}
																} else {
																	HEAP32[$163>>2] = $160;
																	$166 = HEAP32[$3>>2]|0;
																	$167 = ((($166)) + 4|0);
																	HEAP32[$3>>2] = $167;
																	break;
																}
															}
														} while(0);
														$174 = (($i$083) + 1)|0;
														$175 = HEAP32[$8>>2]|0;
														$176 = HEAP32[$zone_vector>>2]|0;
														$177 = (($175) - ($176))|0;
														$178 = (($177|0) / 40)&-1;
														$179 = ($174>>>0)<($178>>>0);
														$180 = $176;
														if ($179) {
															$i$083 = $174;$zone_vector$idx11$val = $180;
														} else {
															break L30;
														}
													}
													if ((label|0) == 7) {
														$23 = ___cxa_find_matching_catch_2()|0;
														$24 = tempRet0;
														$lpad$phi$index = $23;$lpad$phi$index22 = $24;
														label = 9;
														break L4;
													}
													else if ((label|0) == 42) {
														$161 = ___cxa_find_matching_catch_2()|0;
														$162 = tempRet0;
														$$index = $161;$$index30 = $162;$$lcssa73 = $$lcssa159;
														label = 43;
														break;
													}
													else if ((label|0) == 49) {
														$172 = ___cxa_find_matching_catch_2()|0;
														$173 = tempRet0;
														$$index34 = $172;$$index38 = $173;$$lcssa75 = $$lcssa163;
														label = 50;
														break;
													}
												}
											} while(0);
											if ((label|0) == 43) {
												__ZdlPv($$lcssa73);
												$$0 = $$index;$$06 = $$index30;
												break L4;
											}
											else if ((label|0) == 50) {
												__ZdlPv($$lcssa75);
												$$0 = $$index34;$$06 = $$index38;
												break L4;
											}
										}
									} while(0);
									$147 = ($6|0)==(0);
									if ($147) {
										label = 99;
									} else {
										$181 = ((($control)) + 16|0);
										$182 = HEAP32[$181>>2]|0;
										$183 = ($182|0)==(0|0);
										if ($183) {
											label = 99;
										} else {
											$184 = ($6|0)>(85);
											if ($184) {
												$185 = ($6|0)>(87);
												$186 = $6 & 1;
												$187 = ($186|0)!=(0);
												$188 = HEAP32[$3>>2]|0;
												$189 = HEAP32[$2>>2]|0;
												$190 = (($188) - ($189))|0;
												$191 = ($190|0)>(0);
												if ($191) {
													$$in109 = $189;$i1$076 = 0;
												} else {
													label = 99;
													break;
												}
												while(1) {
													$192 = $$in109;
													$193 = (($192) + ($i1$076<<2)|0);
													$194 = HEAP32[$193>>2]|0;
													__THREW__ = 0;
													invoke_viiii(61,($194|0),($control|0),($185|0),($187|0));
													$195 = __THREW__; __THREW__ = 0;
													$196 = $195&1;
													if ($196) {
														break;
													}
													$197 = (($i1$076) + 1)|0;
													$198 = HEAP32[$3>>2]|0;
													$199 = HEAP32[$2>>2]|0;
													$200 = (($198) - ($199))|0;
													$201 = $200 >> 2;
													$202 = ($197|0)<($201|0);
													if ($202) {
														$$in109 = $199;$i1$076 = $197;
													} else {
														label = 99;
														break L9;
													}
												}
												$21 = ___cxa_find_matching_catch_2()|0;
												$22 = tempRet0;
												$lpad$phi$index = $21;$lpad$phi$index22 = $22;
												label = 9;
												break L4;
											}
											$$off41 = (($6) + -70)|0;
											$203 = ($$off41>>>0)<(8);
											if ($203) {
												;HEAP32[$tmp>>2]=HEAP32[$page_image>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$page_image+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$page_image+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$page_image+12>>2]|0;
												$204 = ((($tmp)) + 16|0);
												$205 = ((($page_image)) + 16|0);
												__THREW__ = 0;
												invoke_vii(62,($204|0),($205|0));
												$206 = __THREW__; __THREW__ = 0;
												$207 = $206&1;
												if ($207) {
													label = 8;
													break L4;
												}
												$208 = ((($tmp)) + 28|0);
												$209 = ((($page_image)) + 28|0);
												$210 = HEAP16[$209>>1]|0;
												HEAP16[$208>>1] = $210;
												$211 = $$off41 & 1;
												$212 = ($211|0)==(0);
												L83: do {
													if ($212) {
														label = 80;
													} else {
														$213 = HEAP32[$8>>2]|0;
														$214 = HEAP32[$zone_vector>>2]|0;
														$215 = ($213|0)==($214|0);
														$216 = $214;
														if ($215) {
															label = 80;
														} else {
															$217 = ($6|0)==(71);
															if ($217) {
																$i2$081$us = 0;$zone_vector$idx12$val$us = $216;
																while(1) {
																	$218 = (($zone_vector$idx12$val$us) + (($i2$081$us*40)|0)|0);
																	__THREW__ = 0;
																	invoke_vii(63,($tmp|0),($218|0));
																	$219 = __THREW__; __THREW__ = 0;
																	$220 = $219&1;
																	if ($220) {
																		break;
																	}
																	$221 = (($i2$081$us) + 1)|0;
																	$222 = HEAP32[$8>>2]|0;
																	$223 = HEAP32[$zone_vector>>2]|0;
																	$224 = (($222) - ($223))|0;
																	$225 = (($224|0) / 40)&-1;
																	$226 = ($221>>>0)<($225>>>0);
																	$227 = $223;
																	if ($226) {
																		$i2$081$us = $221;$zone_vector$idx12$val$us = $227;
																	} else {
																		label = 80;
																		break L83;
																	}
																}
																$228 = ___cxa_find_matching_catch_2()|0;
																$229 = tempRet0;
																$lpad$phi51$index = $228;$lpad$phi51$index46 = $229;
																break;
															} else {
																$i2$081 = 0;$zone_vector$idx12$val = $216;
																while(1) {
																	$230 = (($zone_vector$idx12$val) + (($i2$081*40)|0)|0);
																	__THREW__ = 0;
																	invoke_vii(64,($tmp|0),($230|0));
																	$231 = __THREW__; __THREW__ = 0;
																	$232 = $231&1;
																	if ($232) {
																		break;
																	}
																	$257 = (($i2$081) + 1)|0;
																	$258 = HEAP32[$8>>2]|0;
																	$259 = HEAP32[$zone_vector>>2]|0;
																	$260 = (($258) - ($259))|0;
																	$261 = (($260|0) / 40)&-1;
																	$262 = ($257>>>0)<($261>>>0);
																	$263 = $259;
																	if ($262) {
																		$i2$081 = $257;$zone_vector$idx12$val = $263;
																	} else {
																		label = 80;
																		break L83;
																	}
																}
																$237 = ___cxa_find_matching_catch_2()|0;
																$238 = tempRet0;
																$lpad$phi51$index = $237;$lpad$phi51$index46 = $238;
																break;
															}
														}
													}
												} while(0);
												L95: do {
													if ((label|0) == 80) {
														$264 = $$off41 & 2;
														$265 = ($264|0)==(0);
														L97: do {
															if (!($265)) {
																$266 = HEAP32[$3>>2]|0;
																$267 = HEAP32[$2>>2]|0;
																$268 = (($266) - ($267))|0;
																$269 = ($268|0)>(0);
																if ($269) {
																	$$in108 = $267;$i3$079 = 0;
																	while(1) {
																		$270 = $$in108;
																		$271 = (($270) + ($i3$079<<2)|0);
																		$272 = HEAP32[$271>>2]|0;
																		__THREW__ = 0;
																		invoke_vii(65,($272|0),($tmp|0));
																		$273 = __THREW__; __THREW__ = 0;
																		$274 = $273&1;
																		if ($274) {
																			break;
																		}
																		$275 = (($i3$079) + 1)|0;
																		$276 = HEAP32[$3>>2]|0;
																		$277 = HEAP32[$2>>2]|0;
																		$278 = (($276) - ($277))|0;
																		$279 = $278 >> 2;
																		$280 = ($275|0)<($279|0);
																		if ($280) {
																			$$in108 = $277;$i3$079 = $275;
																		} else {
																			break L97;
																		}
																	}
																	$235 = ___cxa_find_matching_catch_2()|0;
																	$236 = tempRet0;
																	$lpad$phi51$index = $235;$lpad$phi51$index46 = $236;
																	break L95;
																}
															}
														} while(0);
														$281 = $$off41 & 4;
														$282 = ($281|0)==(0);
														L104: do {
															if (!($282)) {
																$283 = HEAP32[$3>>2]|0;
																$284 = HEAP32[$2>>2]|0;
																$285 = (($283) - ($284))|0;
																$286 = ($285|0)>(0);
																if ($286) {
																	$$in = $284;$i4$077 = 0;
																	while(1) {
																		$287 = $$in;
																		$288 = (($287) + ($i4$077<<2)|0);
																		$289 = HEAP32[$288>>2]|0;
																		__THREW__ = 0;
																		invoke_vii(66,($289|0),($tmp|0));
																		$290 = __THREW__; __THREW__ = 0;
																		$291 = $290&1;
																		if ($291) {
																			break;
																		}
																		$292 = (($i4$077) + 1)|0;
																		$293 = HEAP32[$3>>2]|0;
																		$294 = HEAP32[$2>>2]|0;
																		$295 = (($293) - ($294))|0;
																		$296 = $295 >> 2;
																		$297 = ($292|0)<($296|0);
																		if ($297) {
																			$$in = $294;$i4$077 = $292;
																		} else {
																			break L104;
																		}
																	}
																	$233 = ___cxa_find_matching_catch_2()|0;
																	$234 = tempRet0;
																	$lpad$phi51$index = $233;$lpad$phi51$index46 = $234;
																	break L95;
																}
															}
														} while(0);
														$298 = HEAP32[$181>>2]|0;
														$299 = ((($control)) + 28|0);
														$300 = HEAP8[$299>>0]|0;
														__THREW__ = 0;
														(invoke_iiii(67,($tmp|0),($298|0),($300|0))|0);
														$301 = __THREW__; __THREW__ = 0;
														$302 = $301&1;
														if ($302) {
															$239 = ___cxa_find_matching_catch_2()|0;
															$240 = tempRet0;
															$lpad$phi51$index = $239;$lpad$phi51$index46 = $240;
															break;
														}
														$303 = ((($tmp)) + 16|0);
														$304 = HEAP32[$303>>2]|0;
														$305 = ($304|0)==(0|0);
														if (!($305)) {
															$306 = ((($tmp)) + 20|0);
															$307 = HEAP32[$306>>2]|0;
															$308 = ($307|0)==($304|0);
															if ($308) {
																$318 = $304;
															} else {
																$310 = $307;
																while(1) {
																	$309 = ((($310)) + -12|0);
																	HEAP32[$306>>2] = $309;
																	$311 = HEAP32[$309>>2]|0;
																	$312 = ($311|0)==(0|0);
																	if ($312) {
																		$313 = $309;
																	} else {
																		$315 = ((($310)) + -8|0);
																		$316 = HEAP32[$315>>2]|0;
																		$317 = ($316|0)==($311|0);
																		if (!($317)) {
																			HEAP32[$315>>2] = $311;
																		}
																		__ZdlPv($311);
																		$$pre$i$i$i$i34 = HEAP32[$306>>2]|0;
																		$313 = $$pre$i$i$i$i34;
																	}
																	$314 = ($313|0)==($304|0);
																	if ($314) {
																		break;
																	} else {
																		$310 = $313;
																	}
																}
																$$pre$i$i37 = HEAP32[$303>>2]|0;
																$318 = $$pre$i$i37;
															}
															__ZdlPv($318);
														}
														label = 99;
														break L9;
													}
												} while(0);
												$241 = ((($tmp)) + 16|0);
												$242 = HEAP32[$241>>2]|0;
												$243 = ($242|0)==(0|0);
												if ($243) {
													$$0 = $lpad$phi51$index;$$06 = $lpad$phi51$index46;
													break L4;
												}
												$244 = ((($tmp)) + 20|0);
												$245 = HEAP32[$244>>2]|0;
												$246 = ($245|0)==($242|0);
												if ($246) {
													$256 = $242;
												} else {
													$248 = $245;
													while(1) {
														$247 = ((($248)) + -12|0);
														HEAP32[$244>>2] = $247;
														$249 = HEAP32[$247>>2]|0;
														$250 = ($249|0)==(0|0);
														if ($250) {
															$251 = $247;
														} else {
															$253 = ((($248)) + -8|0);
															$254 = HEAP32[$253>>2]|0;
															$255 = ($254|0)==($249|0);
															if (!($255)) {
																HEAP32[$253>>2] = $249;
															}
															__ZdlPv($249);
															$$pre$i$i$i$i = HEAP32[$244>>2]|0;
															$251 = $$pre$i$i$i$i;
														}
														$252 = ($251|0)==($242|0);
														if ($252) {
															break;
														} else {
															$248 = $251;
														}
													}
													$$pre$i$i = HEAP32[$241>>2]|0;
													$256 = $$pre$i$i;
												}
												__ZdlPv($256);
												$$0 = $lpad$phi51$index;$$06 = $lpad$phi51$index46;
												break L4;
											} else {
												label = 99;
											}
										}
									}
								}
							}
						} while(0);
						if ((label|0) == 99) {
							$$pr = HEAP32[$zone_vector>>2]|0;
							$320 = $$pr;
						}
						$321 = ($320|0)==(0|0);
						if (!($321)) {
							$322 = HEAP32[$8>>2]|0;
							$323 = ($322|0)==($320|0);
							if ($323) {
								$350 = $320;
							} else {
								$325 = $322;
								while(1) {
									$324 = ((($325)) + -40|0);
									HEAP32[$8>>2] = $324;
									$326 = ((($325)) + -12|0);
									$327 = HEAP32[$326>>2]|0;
									$328 = ($327|0)==(0|0);
									$329 = $327;
									if (!($328)) {
										$330 = ((($325)) + -8|0);
										$331 = HEAP32[$330>>2]|0;
										$332 = ($331|0)==($327|0);
										if (!($332)) {
											$scevgep$i$i$i$i$i$i$i$i$i16 = ((($331)) + -4|0);
											$333 = $scevgep$i$i$i$i$i$i$i$i$i16;
											$334 = (($333) - ($329))|0;
											$335 = $334 >>> 2;
											$336 = $335 ^ -1;
											$scevgep4$i$i$i$i$i$i$i$i$i17 = (($331) + ($336<<2)|0);
											HEAP32[$330>>2] = $scevgep4$i$i$i$i$i$i$i$i$i17;
										}
										__ZdlPv($327);
									}
									$337 = ((($325)) + -24|0);
									$338 = HEAP32[$337>>2]|0;
									$339 = ($338|0)==(0|0);
									$340 = $338;
									if (!($339)) {
										$343 = ((($325)) + -20|0);
										$344 = HEAP32[$343>>2]|0;
										$345 = ($344|0)==($338|0);
										if (!($345)) {
											$scevgep$i$i$i$i$i$i$i$i$i$i22 = ((($344)) + -8|0);
											$346 = $scevgep$i$i$i$i$i$i$i$i$i$i22;
											$347 = (($346) - ($340))|0;
											$348 = $347 >>> 3;
											$349 = $348 ^ -1;
											$scevgep4$i$i$i$i$i$i$i$i$i$i23 = (($344) + ($349<<3)|0);
											HEAP32[$343>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i23;
										}
										__ZdlPv($338);
									}
									$341 = HEAP32[$8>>2]|0;
									$342 = ($341|0)==($320|0);
									if ($342) {
										break;
									} else {
										$325 = $341;
									}
								}
								$$pre$i27 = HEAP32[$zone_vector>>2]|0;
								$350 = $$pre$i27;
							}
							__ZdlPv($350);
						}
						STACKTOP = sp;return;
					}
				} while(0);
				if ((label|0) == 8) {
					$25 = ___cxa_find_matching_catch_2()|0;
					$26 = tempRet0;
					$lpad$phi$index = $25;$lpad$phi$index22 = $26;
					label = 9;
				}
				if ((label|0) == 9) {
					$$0 = $lpad$phi$index;$$06 = $lpad$phi$index22;
				}
				$351 = HEAP32[$zone_vector>>2]|0;
				$352 = ($351|0)==(0|0);
				if (!($352)) {
					$353 = HEAP32[$8>>2]|0;
					$354 = ($353|0)==($351|0);
					if ($354) {
						$381 = $351;
					} else {
						$356 = $353;
						while(1) {
							$355 = ((($356)) + -40|0);
							HEAP32[$8>>2] = $355;
							$357 = ((($356)) + -12|0);
							$358 = HEAP32[$357>>2]|0;
							$359 = ($358|0)==(0|0);
							$360 = $358;
							if (!($359)) {
								$361 = ((($356)) + -8|0);
								$362 = HEAP32[$361>>2]|0;
								$363 = ($362|0)==($358|0);
								if (!($363)) {
									$scevgep$i$i$i$i$i$i$i$i$i = ((($362)) + -4|0);
									$364 = $scevgep$i$i$i$i$i$i$i$i$i;
									$365 = (($364) - ($360))|0;
									$366 = $365 >>> 2;
									$367 = $366 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i$i = (($362) + ($367<<2)|0);
									HEAP32[$361>>2] = $scevgep4$i$i$i$i$i$i$i$i$i;
								}
								__ZdlPv($358);
							}
							$368 = ((($356)) + -24|0);
							$369 = HEAP32[$368>>2]|0;
							$370 = ($369|0)==(0|0);
							$371 = $369;
							if (!($370)) {
								$374 = ((($356)) + -20|0);
								$375 = HEAP32[$374>>2]|0;
								$376 = ($375|0)==($369|0);
								if (!($376)) {
									$scevgep$i$i$i$i$i$i$i$i$i$i = ((($375)) + -8|0);
									$377 = $scevgep$i$i$i$i$i$i$i$i$i$i;
									$378 = (($377) - ($371))|0;
									$379 = $378 >>> 3;
									$380 = $379 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i$i$i = (($375) + ($380<<3)|0);
									HEAP32[$374>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
								}
								__ZdlPv($369);
							}
							$372 = HEAP32[$8>>2]|0;
							$373 = ($372|0)==($351|0);
							if ($373) {
								break;
							} else {
								$356 = $372;
							}
						}
						$$pre$i = HEAP32[$zone_vector>>2]|0;
						$381 = $$pre$i;
					}
					__ZdlPv($381);
				}
				$382 = HEAP32[$2>>2]|0;
				$383 = ($382|0)==(0|0);
				$384 = $382;
				if (!($383)) {
					$385 = HEAP32[$3>>2]|0;
					$386 = ($385|0)==($382|0);
					if (!($386)) {
						$scevgep$i$i$i = ((($385)) + -4|0);
						$387 = $scevgep$i$i$i;
						$388 = (($387) - ($384))|0;
						$389 = $388 >>> 2;
						$390 = $389 ^ -1;
						$scevgep4$i$i$i = (($385) + ($390<<2)|0);
						HEAP32[$3>>2] = $scevgep4$i$i$i;
					}
					__ZdlPv($382);
				}
				__THREW__ = 0;
				invoke_vi(27,($0|0));
				$391 = __THREW__; __THREW__ = 0;
				$392 = $391&1;
				if ($392) {
					$393 = ___cxa_find_matching_catch_3(0|0)|0;
					$394 = tempRet0;
					___clang_call_terminate($393);
					// unreachable;
				} else {
					___resumeException($$0|0);
					// unreachable;
				}
			}
			function __ZN12_GLOBAL__N_19scan_pageERK10Page_imageRNSt3__16vectorINS_4ZoneENS3_9allocatorIS5_EEEEib($page_image,$zone_vector,$debug_level,$layout) {
				$page_image = $page_image|0;
				$zone_vector = $zone_vector|0;
				$debug_level = $debug_level|0;
				$layout = $layout|0;
				var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i13 = 0, $$0$i17$i$i = 0, $$0$i17$i$i$i = 0, $$0$i17$i$i87$i = 0, $$0$i18$i$i = 0, $$0$i18$i$i$i = 0, $$0$i18$i$i88$i = 0, $$0$lcssa$i$i$i$i = 0, $$0$lcssa$i$i5$i$i = 0, $$01 = 0, $$01$i$i = 0, $$01$i$i$i = 0, $$01$i$i$i$i = 0, $$01$i$i$i$i$i = 0, $$01$i$i$i$i98$i = 0, $$01$i$i171$i = 0, $$01$i$i178 = 0;
				var $$01$i$i188 = 0, $$01$i$i193$i = 0, $$01$i$i199 = 0, $$01$i$i201$i = 0, $$01$i$i221$i = 0, $$01$i$i249$i = 0, $$01$i$i259$i = 0, $$01$i$i270$i = 0, $$012$i$i$i$i = 0, $$012$i$i$i230$i = 0, $$03$i = 0, $$03$i$i$i$i = 0, $$03$i$i$i229$i = 0, $$04$i = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$byval_copy145 = 0;
				var $$byval_copy146 = 0, $$byval_copy147 = 0, $$byval_copy148 = 0, $$byval_copy149 = 0, $$cast$i = 0, $$cast$i141 = 0, $$cast$lcssa$i = 0, $$cast453$i = 0, $$cast455$i = 0, $$idx$i = 0, $$in$i = 0, $$in$i131 = 0, $$lcssa = 0, $$lcssa326$i = 0, $$lcssa728 = 0, $$lcssa729 = 0, $$lcssa730 = 0, $$lcssa731 = 0, $$lcssa732 = 0, $$lcssa736 = 0;
				var $$lcssa738 = 0, $$lcssa749 = 0, $$lcssa752 = 0, $$lcssa758 = 0, $$lcssa760 = 0, $$lcssa761 = 0, $$lcssa762 = 0, $$lcssa763 = 0, $$lcssa765 = 0, $$lcssa768 = 0, $$lcssa769 = 0, $$lcssa770 = 0, $$lcssa771 = 0, $$lcssa772 = 0, $$lcssa773 = 0, $$lcssa776 = 0, $$lcssa780 = 0, $$lcssa781 = 0, $$lcssa784 = 0, $$lcssa787 = 0;
				var $$lcssa790 = 0, $$lcssa791 = 0, $$lcssa797 = 0, $$lcssa799 = 0, $$lcssa803 = 0, $$lcssa805 = 0, $$lcssa806 = 0, $$lcssa808 = 0, $$lcssa809 = 0, $$lcssa810 = 0, $$lcssa812 = 0, $$lcssa813 = 0, $$lcssa814 = 0, $$lcssa815 = 0, $$lcssa816 = 0, $$lcssa818 = 0, $$lcssa819 = 0, $$lcssa820 = 0, $$neg293$i = 0, $$pre = 0;
				var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i106$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i126 = 0, $$pre$i$i81$i = 0, $$pre$i116 = 0, $$pre$i143 = 0, $$pre$i211$i = 0, $$pre$i232$i = 0, $$pre$i58 = 0, $$pre$i67 = 0, $$pre$i67$i = 0, $$pre$i75 = 0, $$pre$i83$i = 0, $$pre$i87 = 0, $$pre$i97 = 0, $$pre$phi$i$iZ2D = 0;
				var $$pre$phi$i142Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre20$i = 0, $$pre20$i107 = 0, $$pre20$i96 = 0, $$pre21$i = 0, $$pre21$i108 = 0, $$pre22$i = 0, $$pre23$i = 0, $$pre27$i$i = 0, $$pre27$i$i$i = 0, $$pre27$i$i107$i = 0, $$pre427 = 0, $$pre428 = 0, $$pre429 = 0, $$pre430 = 0, $$pre432 = 0, $$pre433 = 0, $$pre434 = 0;
				var $$pre435 = 0, $$pre436 = 0, $$pre437 = 0, $$pre438 = 0, $$pre439 = 0, $$pre440 = 0, $$pre441 = 0, $$pre442 = 0, $$pre539$i = 0, $$pre540$i = 0, $$pre542$i = 0, $$pre546$i = 0, $$pre7$i = 0, $$pre7$i86 = 0, $$pre8$i = 0, $$sroa$010$0$i = 0, $$sroa$09$0$i = 0, $$sroa$09$0$i$lcssa = 0, $0 = 0, $1 = 0;
				var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
				var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
				var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
				var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
				var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
				var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
				var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
				var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
				var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
				var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
				var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
				var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
				var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
				var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
				var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
				var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
				var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
				var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
				var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
				var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
				var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
				var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
				var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
				var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
				var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
				var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
				var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
				var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
				var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
				var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
				var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
				var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
				var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
				var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
				var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
				var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
				var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
				var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
				var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
				var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
				var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
				var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
				var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
				var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
				var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
				var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
				var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
				var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
				var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
				var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
				var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
				var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
				var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
				var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
				var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
				var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
				var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
				var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
				var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
				var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
				var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
				var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
				var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
				var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
				var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
				var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
				var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
				var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
				var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
				var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
				var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
				var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
				var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
				var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
				var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
				var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
				var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
				var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
				var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
				var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
				var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
				var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
				var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
				var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
				var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
				var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
				var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
				var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
				var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
				var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
				var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
				var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
				var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
				var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
				var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
				var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
				var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
				var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
				var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
				var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
				var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
				var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
				var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
				var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
				var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
				var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
				var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
				var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
				var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
				var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
				var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
				var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__new_last2$i$i$i$i = 0;
				var $__new_last2$i$i$i$i$i = 0, $__new_last2$i$i$i$i62$i = 0, $__new_last2$i$i$i$i77 = 0, $__new_last2$i$i$i$i88 = 0, $__t$i$i = 0, $__v$sroa$15$2$i$i = 0, $__v$sroa$15$2$i$i$i = 0, $__v$sroa$15$2$i$i126$i = 0, $__v$sroa$6$0$i$i = 0, $__v$sroa$6$0$i$i$i = 0, $__v$sroa$6$0$i$i$i$lcssa = 0, $__v$sroa$6$0$i$i$i$lcssa794 = 0, $__v$sroa$6$0$i$i$lcssa = 0, $__v$sroa$6$0$i$i$lcssa800 = 0, $__v$sroa$6$0$i$i97$i = 0, $__v$sroa$6$0$i$i97$i$lcssa = 0, $__v$sroa$6$0$i$i97$i$lcssa733 = 0, $__v$sroa$6$3$i$i = 0, $__v$sroa$6$3$i$i$i = 0, $__v$sroa$6$3$i$i125$i = 0;
				var $begin$0436$i = 0, $begin$1$i = 0, $blobp_vector = 0, $botmax$0440$i = 0, $bvi$01$i = 0, $c$01$i = 0, $c$01$i103 = 0, $c$1$i = 0, $c$1$i104 = 0, $c$2$i = 0, $c$2$i105 = 0, $c$37$i = 0, $c$37$i111 = 0, $c$4$i = 0, $c$4$i112 = 0, $c$5$i = 0, $c$5$i113 = 0, $col$02$i = 0, $col$0334 = 0, $col1$08$i = 0;
				var $cut$0437$i = 0, $cut_index_vector$i = 0, $eh$lpad$body$i$i$i$index36Z2D = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, $eh$lpad$body$i$i$index121Z2D = 0, $eh$lpad$body$i$i$indexZ2D = 0, $eh$lpad$body$i$i127$i$index66Z2D = 0, $eh$lpad$body$i$i127$i$indexZ2D = 0, $eh$lpad$body$i$index51Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body144$i$index81Z2D = 0, $eh$lpad$body144$i$indexZ2D = 0, $eh$lpad$body218$i$index101Z2D = 0, $eh$lpad$body218$i$indexZ2D = 0, $eh$lpad$body61$index136Z2D = 0, $eh$lpad$body61$indexZ2D = 0, $eh$lpad$body74$index14Z2D = 0, $eh$lpad$body74$indexZ2D = 0, $exitcond = 0, $first$0446$i = 0;
				var $first$1$i = 0, $first$1$i$lcssa = 0, $first3$0412$i = 0, $from$011$i = 0, $i$010$i = 0, $i$015$i = 0, $i$015$i101 = 0, $i$0333 = 0, $i$0454$i = 0, $i$06$i = 0, $i1$0441$i = 0, $i2$0414$i = 0, $i2$0414$i$phi = 0, $i5$0418$i = 0, $i6$0424$i = 0, $i7$0428$i = 0, $i8$0434$i = 0, $j$0447$i = 0, $j$1$i = 0, $j4$0$first3$0$i = 0;
				var $j4$0$first3$0$i$lcssa = 0, $j4$0413$i = 0, $join$0$off0$lcssa$i = 0, $join$2$off0$lcssa$i = 0, $new_data = 0, $new_data$idx$val = 0, $not$$i = 0, $old_data = 0, $old_data$idx$val = 0, $old_data$idx4$val = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i85 = 0, $or$cond416$i = 0, $or$cond539 = 0, $or$cond6$i = 0, $or$cond6422$i = 0, $p = 0, $row$02$i = 0, $row$0337 = 0;
				var $row1$08$i = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i101$i = 0;
				var $scevgep$i$i$i$i$i$i$i$i$i$i136 = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i241$i = 0, $scevgep$i$i$i$i$i$i$i$i$i$i68$i = 0, $scevgep$i$i$i$i$i$i$i$i$i235$i = 0, $scevgep$i$i$i$i$i$i$i$i120 = 0, $scevgep$i$i$i$i$i$i$i$i91$i = 0, $scevgep$i$i$i$i$i$i$i146 = 0, $scevgep$i$i$i$i$i$i$i73$i = 0, $scevgep$i$i$i$i$i152 = 0, $scevgep$i$i$i$i$i153$i = 0, $scevgep$i$i$i$i$i16$i$i = 0, $scevgep$i$i$i$i$i164$i = 0, $scevgep$i$i$i$i$i213$i = 0, $scevgep$i$i$i$i$i52 = 0, $scevgep$i$i$i$i$i57$i = 0, $scevgep$i$i$i$i$i6$i$i = 0, $scevgep$i$i$i$i11$i$i = 0;
				var $scevgep$i$i$i$i132 = 0, $scevgep$i$i$i$i14 = 0, $scevgep$i$i$i$i148$i = 0, $scevgep$i$i$i$i159$i = 0, $scevgep$i$i$i$i172 = 0, $scevgep$i$i$i$i172$i = 0, $scevgep$i$i$i$i179 = 0, $scevgep$i$i$i$i189 = 0, $scevgep$i$i$i$i194$i = 0, $scevgep$i$i$i$i200 = 0, $scevgep$i$i$i$i202$i = 0, $scevgep$i$i$i$i222$i = 0, $scevgep$i$i$i$i250$i = 0, $scevgep$i$i$i$i260$i = 0, $scevgep$i$i$i$i271$i = 0, $scevgep$i$i$i$i42 = 0, $scevgep$i$i$i$i42$i = 0, $scevgep$i$i$i$i45$i = 0, $scevgep$i$i$i$i47 = 0, $scevgep$i$i$i$i52$i = 0;
				var $scevgep$i$i$i$i63$i = 0, $scevgep$i$i$i$i68 = 0, $scevgep$i$i$i$i78 = 0, $scevgep$i$i$i$i89 = 0, $scevgep$i$i$i183$i = 0, $scevgep$i$i$i186$i = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i32 = 0, $scevgep$i$i$i37 = 0, $scevgep$i$i$i7 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i = 0;
				var $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129 = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i102$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i137 = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i242$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i$i69$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i236$i = 0, $scevgep4$i$i$i$i$i$i$i$i121 = 0, $scevgep4$i$i$i$i$i$i$i$i92$i = 0, $scevgep4$i$i$i$i$i$i$i147 = 0;
				var $scevgep4$i$i$i$i$i$i$i74$i = 0, $scevgep4$i$i$i$i$i153 = 0, $scevgep4$i$i$i$i$i154$i = 0, $scevgep4$i$i$i$i$i165$i = 0, $scevgep4$i$i$i$i$i17$i$i = 0, $scevgep4$i$i$i$i$i214$i = 0, $scevgep4$i$i$i$i$i53 = 0, $scevgep4$i$i$i$i$i58$i = 0, $scevgep4$i$i$i$i$i7$i$i = 0, $scevgep4$i$i$i$i12$i$i = 0, $scevgep4$i$i$i$i133 = 0, $scevgep4$i$i$i$i149$i = 0, $scevgep4$i$i$i$i15 = 0, $scevgep4$i$i$i$i160$i = 0, $scevgep4$i$i$i$i173 = 0, $scevgep4$i$i$i$i173$i = 0, $scevgep4$i$i$i$i180 = 0, $scevgep4$i$i$i$i190 = 0, $scevgep4$i$i$i$i195$i = 0, $scevgep4$i$i$i$i201 = 0;
				var $scevgep4$i$i$i$i203$i = 0, $scevgep4$i$i$i$i223$i = 0, $scevgep4$i$i$i$i251$i = 0, $scevgep4$i$i$i$i261$i = 0, $scevgep4$i$i$i$i272$i = 0, $scevgep4$i$i$i$i43 = 0, $scevgep4$i$i$i$i43$i = 0, $scevgep4$i$i$i$i46$i = 0, $scevgep4$i$i$i$i48 = 0, $scevgep4$i$i$i$i53$i = 0, $scevgep4$i$i$i$i64$i = 0, $scevgep4$i$i$i$i69 = 0, $scevgep4$i$i$i$i79 = 0, $scevgep4$i$i$i$i90 = 0, $scevgep4$i$i$i184$i = 0, $scevgep4$i$i$i187$i = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i33 = 0, $scevgep4$i$i$i38 = 0;
				var $scevgep4$i$i$i8 = 0, $to$0$lcssa$i = 0, $to$013$i = 0, $to$1$i = 0, $zi$02$i = 0, $zone_vector$idx$val = 0, $zone_vector$idx$val$i = 0, $zone_vector$idx$val$i140 = 0, $zone_vector$idx10$val$i = 0, $zone_vector$idx10$val$pre$i = 0, $zone_vector$idx10$val537$i = 0, $zone_vector$idx13$val$i = 0, $zone_vector$idx15$val$i = 0, $zone_vector$idx17$val$i = 0, $zone_vector$idx20$val$i = 0, $zone_vector$idx20$val$pre$i = 0, $zone_vector$idx22$val$i = 0, $zone_vector$idx24$val$i = 0, $zone_vector$idx24$val$lcssa$i = 0, $zone_vector$idx24$val427$i = 0;
				var $zone_vector$idx24$val429$i = 0, $zone_vector$idx26$val$i = 0, $zone_vector$idx29$val$i = 0, $zone_vector$idx30$val$i = 0, $zone_vector$idx33$val287288$i = 0, $zone_vector$idx6$val = 0, $zone_vector$idx6$val$in = 0, $zone_vector$idx7$val$i = 0, $zone_vector$idx8$val$i = 0, $zone_vector$idx9$val$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy149 = sp + 276|0;
				$$byval_copy148 = sp + 272|0;
				$$byval_copy147 = sp + 268|0;
				$$byval_copy146 = sp + 264|0;
				$$byval_copy145 = sp + 260|0;
				$$byval_copy = sp + 256|0;
				$__t$i$i = sp + 216|0;
				$0 = sp + 212|0;
				$1 = sp + 208|0;
				$2 = sp + 204|0;
				$3 = sp + 200|0;
				$4 = sp + 196|0;
				$5 = sp + 192|0;
				$6 = sp + 152|0;
				$7 = sp + 144|0;
				$8 = sp + 104|0;
				$9 = sp + 100|0;
				$cut_index_vector$i = sp + 88|0;
				$10 = sp + 84|0;
				$11 = sp + 80|0;
				$blobp_vector = sp + 68|0;
				$old_data = sp + 56|0;
				$new_data = sp + 44|0;
				$p = sp + 40|0;
				$12 = sp;
				$13 = ((($page_image)) + 29|0);
				$14 = HEAP8[$13>>0]|0;
				HEAP32[$blobp_vector>>2] = 0;
				$15 = ((($blobp_vector)) + 4|0);
				HEAP32[$15>>2] = 0;
				$16 = ((($blobp_vector)) + 8|0);
				HEAP32[$16>>2] = 0;
				$17 = ((($page_image)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$page_image>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				HEAP32[$old_data>>2] = 0;
				$22 = ((($old_data)) + 4|0);
				HEAP32[$22>>2] = 0;
				$23 = ((($old_data)) + 8|0);
				HEAP32[$23>>2] = 0;
				$24 = ($20|0)==($19|0);
				do {
					if ($24) {
						$51 = $18;$53 = $19;
						label = 12;
					} else {
						$25 = ($21>>>0)>(1073741823);
						if ($25) {
							__THREW__ = 0;
							invoke_vi(46,($old_data|0));
							$26 = __THREW__; __THREW__ = 0;
							$27 = $26&1;
							if (!($27)) {
								label = 4;
							}
						} else {
							label = 4;
						}
						if ((label|0) == 4) {
							$28 = $21 << 2;
							__THREW__ = 0;
							$29 = (invoke_ii(29,($28|0))|0);
							$30 = __THREW__; __THREW__ = 0;
							$31 = $30&1;
							if (!($31)) {
								HEAP32[$22>>2] = $29;
								HEAP32[$old_data>>2] = $29;
								$32 = (($29) + ($21<<2)|0);
								$33 = ((($old_data)) + 8|0);
								HEAP32[$33>>2] = $32;
								$$0$i$i = $21;$34 = $29;
								while(1) {
									HEAP32[$34>>2] = 0;
									$35 = HEAP32[$22>>2]|0;
									$36 = ((($35)) + 4|0);
									HEAP32[$22>>2] = $36;
									$37 = (($$0$i$i) + -1)|0;
									$38 = ($37|0)==(0);
									if ($38) {
										break;
									} else {
										$$0$i$i = $37;$34 = $36;
									}
								}
								$$pre = HEAP32[$17>>2]|0;
								$$pre427 = HEAP32[$page_image>>2]|0;
								$51 = $$pre;$53 = $$pre427;
								label = 12;
								break;
							}
						}
						$39 = ___cxa_find_matching_catch_2()|0;
						$40 = tempRet0;
						$41 = HEAP32[$old_data>>2]|0;
						$42 = ($41|0)==(0|0);
						$43 = $41;
						if (!($42)) {
							$44 = HEAP32[$22>>2]|0;
							$45 = ($44|0)==($41|0);
							if (!($45)) {
								$scevgep$i$i$i$i = ((($44)) + -4|0);
								$46 = $scevgep$i$i$i$i;
								$47 = (($46) - ($43))|0;
								$48 = $47 >>> 2;
								$49 = $48 ^ -1;
								$scevgep4$i$i$i$i = (($44) + ($49<<2)|0);
								HEAP32[$22>>2] = $scevgep4$i$i$i$i;
							}
							__ZdlPv($41);
						}
						$$2 = $39;$$23 = $40;
					}
				} while(0);
				if ((label|0) == 12) {
					$50 = (($51) + 1)|0;
					$52 = (($50) - ($53))|0;
					HEAP32[$new_data>>2] = 0;
					$54 = ((($new_data)) + 4|0);
					HEAP32[$54>>2] = 0;
					$55 = ((($new_data)) + 8|0);
					HEAP32[$55>>2] = 0;
					$56 = ($50|0)==($53|0);
					do {
						if ($56) {
							$2211 = 0;
							label = 23;
						} else {
							$57 = ($52>>>0)>(1073741823);
							if ($57) {
								__THREW__ = 0;
								invoke_vi(46,($new_data|0));
								$58 = __THREW__; __THREW__ = 0;
								$59 = $58&1;
								if (!($59)) {
									label = 15;
								}
							} else {
								label = 15;
							}
							if ((label|0) == 15) {
								$60 = $52 << 2;
								__THREW__ = 0;
								$61 = (invoke_ii(29,($60|0))|0);
								$62 = __THREW__; __THREW__ = 0;
								$63 = $62&1;
								if (!($63)) {
									HEAP32[$54>>2] = $61;
									HEAP32[$new_data>>2] = $61;
									$64 = (($61) + ($52<<2)|0);
									$65 = ((($new_data)) + 8|0);
									HEAP32[$65>>2] = $64;
									$$0$i$i13 = $52;$66 = $61;
									while(1) {
										HEAP32[$66>>2] = 0;
										$67 = HEAP32[$54>>2]|0;
										$68 = ((($67)) + 4|0);
										HEAP32[$54>>2] = $68;
										$69 = (($$0$i$i13) + -1)|0;
										$70 = ($69|0)==(0);
										if ($70) {
											$$lcssa820 = $68;
											break;
										} else {
											$$0$i$i13 = $69;$66 = $68;
										}
									}
									$82 = $$lcssa820;
									$2211 = $82;
									label = 23;
									break;
								}
							}
							$71 = ___cxa_find_matching_catch_2()|0;
							$72 = tempRet0;
							$73 = HEAP32[$new_data>>2]|0;
							$74 = ($73|0)==(0|0);
							$75 = $73;
							if (!($74)) {
								$76 = HEAP32[$54>>2]|0;
								$77 = ($76|0)==($73|0);
								if (!($77)) {
									$scevgep$i$i$i$i14 = ((($76)) + -4|0);
									$78 = $scevgep$i$i$i$i14;
									$79 = (($78) - ($75))|0;
									$80 = $79 >>> 2;
									$81 = $80 ^ -1;
									$scevgep4$i$i$i$i15 = (($76) + ($81<<2)|0);
									HEAP32[$54>>2] = $scevgep4$i$i$i$i15;
								}
								__ZdlPv($73);
							}
							$$1 = $71;$$12 = $72;
						}
					} while(0);
					if ((label|0) == 23) {
						$83 = ((($page_image)) + 4|0);
						$84 = HEAP32[$83>>2]|0;
						$85 = ((($page_image)) + 12|0);
						$86 = HEAP32[$85>>2]|0;
						$87 = ($84|0)>($86|0);
						L39: do {
							if ($87) {
								label = 25;
							} else {
								$88 = ((($old_data)) + 8|0);
								$89 = ((($new_data)) + 8|0);
								$90 = ((($page_image)) + 16|0);
								$91 = ((($blobp_vector)) + 8|0);
								$$pre429 = HEAP32[$17>>2]|0;
								$116 = $2211;$121 = $$pre429;$2212 = $86;$row$0337 = $84;
								L41: while(1) {
									$113 = HEAP32[$old_data>>2]|0;
									$114 = HEAP32[$new_data>>2]|0;
									HEAP32[$old_data>>2] = $114;
									HEAP32[$new_data>>2] = $113;
									$115 = HEAP32[$22>>2]|0;
									HEAP32[$22>>2] = $116;
									HEAP32[$54>>2] = $115;
									$117 = HEAP32[$88>>2]|0;
									$118 = HEAP32[$89>>2]|0;
									HEAP32[$88>>2] = $118;
									HEAP32[$89>>2] = $117;
									$119 = HEAP32[$page_image>>2]|0;
									$120 = ($119|0)>($121|0);
									if ($120) {
										$123 = $2212;$2213 = $121;
									} else {
										$126 = $119;$149 = $121;$col$0334 = $119;
										while(1) {
											$125 = (($col$0334) - ($126))|0;
											$127 = HEAP32[$83>>2]|0;
											$128 = (($row$0337) - ($127))|0;
											$129 = HEAP32[$90>>2]|0;
											$130 = (($129) + (($128*12)|0)|0);
											$131 = HEAP32[$130>>2]|0;
											$132 = (($131) + ($125)|0);
											$133 = HEAP8[$132>>0]|0;
											$134 = ($133&255)>($14&255);
											if ($134) {
												$135 = HEAP32[$new_data>>2]|0;
												$136 = (($135) + ($125<<2)|0);
												HEAP32[$136>>2] = 0;
												$268 = $149;
											} else {
												$137 = ($125|0)>(0);
												if ($137) {
													$138 = (($125) + -1)|0;
													$139 = HEAP32[$new_data>>2]|0;
													$140 = (($139) + ($138<<2)|0);
													$141 = HEAP32[$140>>2]|0;
													$142 = HEAP32[$old_data>>2]|0;
													$143 = (($142) + ($138<<2)|0);
													$144 = HEAP32[$143>>2]|0;
													$146 = $142;$153 = $141;$157 = $144;
												} else {
													$$pre432 = HEAP32[$old_data>>2]|0;
													$146 = $$pre432;$153 = 0;$157 = 0;
												}
												$145 = (($146) + ($125<<2)|0);
												$147 = HEAP32[$145>>2]|0;
												$148 = ($col$0334|0)<($149|0);
												if ($148) {
													$150 = (($125) + 1)|0;
													$151 = (($146) + ($150<<2)|0);
													$152 = HEAP32[$151>>2]|0;
													$164 = $152;
												} else {
													$164 = 0;
												}
												$154 = ($153|0)==(0|0);
												do {
													if ($154) {
														$158 = ($157|0)==(0|0);
														if (!($158)) {
															HEAP32[$p>>2] = $157;
															__THREW__ = 0;
															invoke_viii(68,($157|0),($row$0337|0),($col$0334|0));
															$159 = __THREW__; __THREW__ = 0;
															$160 = $159&1;
															if ($160) {
																label = 36;
																break L41;
															} else {
																$201 = $157;
																label = 66;
																break;
															}
														}
														$161 = ($147|0)==(0|0);
														if (!($161)) {
															HEAP32[$p>>2] = $147;
															__THREW__ = 0;
															invoke_viii(68,($147|0),($row$0337|0),($col$0334|0));
															$162 = __THREW__; __THREW__ = 0;
															$163 = $162&1;
															if ($163) {
																label = 36;
																break L41;
															} else {
																$201 = $147;
																label = 66;
																break;
															}
														}
														$165 = ($164|0)==(0|0);
														if (!($165)) {
															HEAP32[$p>>2] = $164;
															__THREW__ = 0;
															invoke_viii(68,($164|0),($row$0337|0),($col$0334|0));
															$166 = __THREW__; __THREW__ = 0;
															$167 = $166&1;
															if ($167) {
																label = 36;
																break L41;
															}
															$168 = $164;
															$169 = HEAP32[$new_data>>2]|0;
															$170 = (($169) + ($125<<2)|0);
															HEAP32[$170>>2] = $168;
															break;
														}
														__THREW__ = 0;
														$171 = (invoke_ii(29,40)|0);
														$172 = __THREW__; __THREW__ = 0;
														$173 = $172&1;
														if ($173) {
															label = 36;
															break L41;
														}
														__THREW__ = 0;
														invoke_viiiii(69,($171|0),($col$0334|0),($row$0337|0),($col$0334|0),($row$0337|0));
														$174 = __THREW__; __THREW__ = 0;
														$175 = $174&1;
														if ($175) {
															$$lcssa818 = $171;
															label = 64;
															break L41;
														}
														$176 = ((($171)) + 28|0);
														HEAP32[$176>>2] = 0;
														$177 = ((($171)) + 32|0);
														HEAP32[$177>>2] = 0;
														$178 = ((($171)) + 36|0);
														HEAP32[$178>>2] = 0;
														HEAP32[$p>>2] = $171;
														$179 = ((($171)) + 4|0);
														$180 = HEAP32[$179>>2]|0;
														$181 = (($row$0337) - ($180))|0;
														$182 = ((($171)) + 16|0);
														$183 = HEAP32[$182>>2]|0;
														$184 = HEAP32[$171>>2]|0;
														$185 = (($col$0334) - ($184))|0;
														$186 = (($183) + (($181*12)|0)|0);
														$187 = HEAP32[$186>>2]|0;
														$188 = (($187) + ($185)|0);
														HEAP8[$188>>0] = 1;
														$189 = HEAP32[$15>>2]|0;
														$190 = HEAP32[$91>>2]|0;
														$191 = ($189|0)==($190|0);
														$192 = $171;
														if ($191) {
															__THREW__ = 0;
															invoke_vii(70,($blobp_vector|0),($p|0));
															$195 = __THREW__; __THREW__ = 0;
															$196 = $195&1;
															if ($196) {
																label = 36;
																break L41;
															}
														} else {
															HEAP32[$189>>2] = $192;
															$193 = HEAP32[$15>>2]|0;
															$194 = ((($193)) + 4|0);
															HEAP32[$15>>2] = $194;
														}
														$199 = HEAP32[$new_data>>2]|0;
														$200 = (($199) + ($125<<2)|0);
														HEAP32[$200>>2] = $192;
													} else {
														HEAP32[$p>>2] = $153;
														__THREW__ = 0;
														invoke_viii(68,($153|0),($row$0337|0),($col$0334|0));
														$155 = __THREW__; __THREW__ = 0;
														$156 = $155&1;
														if ($156) {
															label = 36;
															break L41;
														} else {
															$201 = $153;
															label = 66;
														}
													}
												} while(0);
												do {
													if ((label|0) == 66) {
														label = 0;
														$202 = $201;
														$203 = HEAP32[$new_data>>2]|0;
														$204 = (($203) + ($125<<2)|0);
														HEAP32[$204>>2] = $202;
														$205 = ($164|0)==(0|0);
														$206 = ($201|0)==($164|0);
														$or$cond = $205 | $206;
														if (!($or$cond)) {
															$old_data$idx4$val = HEAP32[$22>>2]|0;
															$new_data$idx$val = HEAP32[$new_data>>2]|0;
															$207 = $201;
															$208 = $164;
															$209 = ((($201)) + 4|0);
															$210 = HEAP32[$209>>2]|0;
															$211 = ((($164)) + 4|0);
															$212 = HEAP32[$211>>2]|0;
															$213 = ($210|0)>($212|0);
															if ($213) {
																$214 = (($125) + 1)|0;
																$215 = (($new_data$idx$val) + ($214<<2)|0);
																$216 = ($214|0)==(0);
																if ($216) {
																	$$sroa$010$0$i = $208;$$sroa$09$0$i = $207;
																} else {
																	$218 = $new_data$idx$val;
																	while(1) {
																		$217 = HEAP32[$218>>2]|0;
																		$219 = ($217|0)==($201|0);
																		if ($219) {
																			HEAP32[$218>>2] = $208;
																		}
																		$220 = ((($218)) + 4|0);
																		$221 = ($220|0)==($215|0);
																		if ($221) {
																			$$sroa$010$0$i = $208;$$sroa$09$0$i = $207;
																			break;
																		} else {
																			$218 = $220;
																		}
																	}
																}
															} else {
																$old_data$idx$val = HEAP32[$old_data>>2]|0;
																$222 = (($old_data$idx$val) + ($125<<2)|0);
																$223 = ($222|0)==($old_data$idx4$val|0);
																if ($223) {
																	$$sroa$010$0$i = $207;$$sroa$09$0$i = $208;
																} else {
																	$225 = $222;
																	while(1) {
																		$224 = HEAP32[$225>>2]|0;
																		$226 = ($224|0)==($164|0);
																		if ($226) {
																			HEAP32[$225>>2] = $207;
																		}
																		$227 = ((($225)) + 4|0);
																		$228 = ($227|0)==($old_data$idx4$val|0);
																		if ($228) {
																			$$sroa$010$0$i = $207;$$sroa$09$0$i = $208;
																			break;
																		} else {
																			$225 = $227;
																		}
																	}
																}
															}
															$229 = HEAP32[$15>>2]|0;
															$230 = HEAP32[$blobp_vector>>2]|0;
															$231 = (($229) - ($230))|0;
															$232 = $231 >> 2;
															$$cast$i = $230;
															$233 = $$sroa$09$0$i;
															$$0$i = $232;
															while(1) {
																$234 = (($$0$i) + -1)|0;
																$235 = ($$0$i|0)>(0);
																if (!($235)) {
																	$$lcssa816 = $234;
																	label = 79;
																	break;
																}
																$236 = (($$cast$i) + ($234<<2)|0);
																$237 = HEAP32[$236>>2]|0;
																$238 = ($237|0)==($233|0);
																if ($238) {
																	$242 = $$cast$i;$243 = $234;$247 = $229;
																	break;
																} else {
																	$$0$i = $234;
																}
															}
															if ((label|0) == 79) {
																label = 0;
																__THREW__ = 0;
																invoke_vi(47,(1877|0));
																$239 = __THREW__; __THREW__ = 0;
																$240 = $239&1;
																if ($240) {
																	label = 36;
																	break L41;
																}
																$$pre$i67 = HEAP32[$blobp_vector>>2]|0;
																$$pre20$i = HEAP32[$15>>2]|0;
																$242 = $$pre$i67;$243 = $$lcssa816;$247 = $$pre20$i;
															}
															$241 = (($242) + ($243<<2)|0);
															$244 = ((($241)) + 4|0);
															$245 = $244;
															$246 = (($247) - ($245))|0;
															$248 = $246 >> 2;
															_memmove(($241|0),($244|0),($246|0))|0;
															$249 = (($241) + ($248<<2)|0);
															$250 = HEAP32[$15>>2]|0;
															$251 = ($250|0)==($249|0);
															if (!($251)) {
																$__new_last2$i$i$i$i = $249;
																$scevgep$i$i$i$i68 = ((($250)) + -4|0);
																$252 = $scevgep$i$i$i$i68;
																$253 = (($252) - ($__new_last2$i$i$i$i))|0;
																$254 = $253 >>> 2;
																$255 = $254 ^ -1;
																$scevgep4$i$i$i$i69 = (($250) + ($255<<2)|0);
																HEAP32[$15>>2] = $scevgep4$i$i$i$i69;
															}
															$256 = $$sroa$010$0$i;
															$257 = $$sroa$09$0$i;
															__THREW__ = 0;
															invoke_vii(71,($256|0),($257|0));
															$258 = __THREW__; __THREW__ = 0;
															$259 = $258&1;
															if ($259) {
																label = 36;
																break L41;
															}
															$260 = ($$sroa$09$0$i|0)==(0);
															if ($260) {
																break;
															}
															__THREW__ = 0;
															invoke_vi(72,($233|0));
															$261 = __THREW__; __THREW__ = 0;
															$262 = $261&1;
															if ($262) {
																$$sroa$09$0$i$lcssa = $$sroa$09$0$i;
																label = 87;
																break L41;
															}
															$263 = $$sroa$09$0$i;
															__ZdlPv($263);
														}
													}
												} while(0);
												$$pre433 = HEAP32[$17>>2]|0;
												$268 = $$pre433;
											}
											$267 = ($col$0334|0)<($268|0);
											if (!($267)) {
												$$lcssa819 = $268;
												break;
											}
											$269 = (($col$0334) + 1)|0;
											$$pre430 = HEAP32[$page_image>>2]|0;
											$126 = $$pre430;$149 = $268;$col$0334 = $269;
										}
										$$pre434 = HEAP32[$85>>2]|0;
										$123 = $$pre434;$2213 = $$lcssa819;
									}
									$122 = ($row$0337|0)<($123|0);
									if (!($122)) {
										label = 25;
										break L39;
									}
									$124 = (($row$0337) + 1)|0;
									$$pre428 = HEAP32[$54>>2]|0;
									$116 = $$pre428;$121 = $2213;$2212 = $123;$row$0337 = $124;
								}
								if ((label|0) == 36) {
									$109 = ___cxa_find_matching_catch_2()|0;
									$110 = tempRet0;
									$eh$lpad$body74$index14Z2D = $110;$eh$lpad$body74$indexZ2D = $109;
									label = 38;
									break;
								}
								else if ((label|0) == 64) {
									$197 = ___cxa_find_matching_catch_2()|0;
									$198 = tempRet0;
									__ZdlPv($$lcssa818);
									$$0 = $197;$$01 = $198;
									break;
								}
								else if ((label|0) == 87) {
									$264 = ___cxa_find_matching_catch_2()|0;
									$265 = tempRet0;
									$266 = $$sroa$09$0$i$lcssa;
									__ZdlPv($266);
									$eh$lpad$body74$index14Z2D = $265;$eh$lpad$body74$indexZ2D = $264;
									label = 38;
									break;
								}
							}
						} while(0);
						L115: do {
							if ((label|0) == 25) {
								$92 = ($debug_level|0)<(100);
								L117: do {
									if ($92) {
										$270 = HEAP32[$15>>2]|0;
										$271 = HEAP32[$blobp_vector>>2]|0;
										$272 = (($270) - ($271))|0;
										$273 = $272 >> 2;
										$274 = ($273>>>0)>(3);
										if ($274) {
											__THREW__ = 0;
											invoke_vii(73,($page_image|0),($blobp_vector|0));
											$275 = __THREW__; __THREW__ = 0;
											$276 = $275&1;
											if (!($276)) {
												$277 = HEAP32[$15>>2]|0;
												$278 = HEAP32[$blobp_vector>>2]|0;
												$279 = (($277) - ($278))|0;
												$280 = $279 >> 2;
												$281 = ($279|0)>(0);
												L121: do {
													if ($281) {
														$282 = $278;
														$287 = $282;$from$011$i = 0;$to$013$i = 0;
														while(1) {
															$286 = (($287) + ($from$011$i<<2)|0);
															$288 = HEAP32[$286>>2]|0;
															$289 = ((($288)) + 12|0);
															$290 = HEAP32[$289>>2]|0;
															$291 = ((($288)) + 4|0);
															$292 = HEAP32[$291>>2]|0;
															$293 = (($290) + 1)|0;
															$294 = (($293) - ($292))|0;
															$295 = ($294|0)>(4);
															if ($295) {
																$309 = $287;
																label = 104;
															} else {
																$296 = ((($288)) + 8|0);
																$297 = HEAP32[$296>>2]|0;
																$298 = HEAP32[$288>>2]|0;
																$299 = (($297) + 1)|0;
																$300 = (($299) - ($298))|0;
																$301 = ($300|0)>(4);
																if ($301) {
																	$309 = $287;
																	label = 104;
																} else {
																	$302 = ($294|0)>(2);
																	$303 = ($300|0)>(2);
																	$or$cond$i = $302 | $303;
																	if ($or$cond$i) {
																		__THREW__ = 0;
																		$304 = (invoke_ii(74,($288|0))|0);
																		$305 = __THREW__; __THREW__ = 0;
																		$306 = $305&1;
																		if ($306) {
																			break;
																		}
																		$307 = ($304|0)>(5);
																		if ($307) {
																			$$pre22$i = HEAP32[$blobp_vector>>2]|0;
																			$309 = $$pre22$i;
																			label = 104;
																		} else {
																			$to$1$i = $to$013$i;
																		}
																	} else {
																		$to$1$i = $to$013$i;
																	}
																}
															}
															if ((label|0) == 104) {
																label = 0;
																$308 = (($309) + ($to$013$i<<2)|0);
																$310 = HEAP32[$308>>2]|0;
																$311 = (($309) + ($from$011$i<<2)|0);
																HEAP32[$311>>2] = $310;
																$312 = HEAP32[$blobp_vector>>2]|0;
																$313 = (($312) + ($to$013$i<<2)|0);
																HEAP32[$313>>2] = $288;
																$314 = (($to$013$i) + 1)|0;
																$to$1$i = $314;
															}
															$315 = (($from$011$i) + 1)|0;
															$316 = ($315|0)<($280|0);
															if (!($316)) {
																$to$0$lcssa$i = $to$1$i;
																break L121;
															}
															$$pre$i75 = HEAP32[$blobp_vector>>2]|0;
															$287 = $$pre$i75;$from$011$i = $315;$to$013$i = $to$1$i;
														}
														$107 = ___cxa_find_matching_catch_2()|0;
														$108 = tempRet0;
														$eh$lpad$body74$index14Z2D = $108;$eh$lpad$body74$indexZ2D = $107;
														label = 38;
														break L115;
													} else {
														$to$0$lcssa$i = 0;
													}
												} while(0);
												$283 = ($to$0$lcssa$i|0)<($280|0);
												if ($283) {
													$284 = HEAP32[$blobp_vector>>2]|0;
													$285 = $284;
													$2216 = $285;$2217 = $285;$2218 = $285;$327 = $284;$i$010$i = $to$0$lcssa$i;
													while(1) {
														$326 = (($327) + ($i$010$i<<2)|0);
														$328 = HEAP32[$326>>2]|0;
														$329 = ($328|0)==(0|0);
														if ($329) {
															$2219 = $2216;$2220 = $2217;$2221 = $2218;$2222 = $327;
														} else {
															__THREW__ = 0;
															invoke_vi(72,($328|0));
															$330 = __THREW__; __THREW__ = 0;
															$331 = $330&1;
															if ($331) {
																$$lcssa810 = $328;
																label = 113;
																break;
															}
															__ZdlPv($328);
															$$pre23$i = HEAP32[$blobp_vector>>2]|0;
															$332 = $$pre23$i;
															$2219 = $332;$2220 = $332;$2221 = $332;$2222 = $$pre23$i;
														}
														$333 = (($i$010$i) + 1)|0;
														$334 = ($333|0)<($280|0);
														if ($334) {
															$2216 = $2219;$2217 = $2220;$2218 = $2221;$327 = $2222;$i$010$i = $333;
														} else {
															$$lcssa812 = $2219;$$lcssa813 = $2220;$$lcssa814 = $2221;$$lcssa815 = $2222;
															break;
														}
													}
													if ((label|0) == 113) {
														$335 = ___cxa_find_matching_catch_2()|0;
														$336 = tempRet0;
														__ZdlPv($$lcssa810);
														$eh$lpad$body74$index14Z2D = $336;$eh$lpad$body74$indexZ2D = $335;
														label = 38;
														break L115;
													}
													$317 = (($$lcssa815) + ($to$0$lcssa$i<<2)|0);
													$318 = HEAP32[$15>>2]|0;
													$319 = ($317|0)==($318|0);
													$320 = $318;
													if ($319) {
														$2214 = $$lcssa812;$2215 = $$lcssa813;$338 = $$lcssa814;$339 = $320;
													} else {
														$__new_last2$i$i$i$i77 = $317;
														$scevgep$i$i$i$i78 = ((($318)) + -4|0);
														$321 = $scevgep$i$i$i$i78;
														$322 = (($321) - ($__new_last2$i$i$i$i77))|0;
														$323 = $322 >>> 2;
														$324 = $323 ^ -1;
														$scevgep4$i$i$i$i79 = (($318) + ($324<<2)|0);
														HEAP32[$15>>2] = $scevgep4$i$i$i$i79;
														$325 = $scevgep4$i$i$i$i79;
														$2214 = $$lcssa812;$2215 = $$lcssa813;$338 = $$lcssa814;$339 = $325;
													}
												} else {
													$$pre435 = HEAP32[$15>>2]|0;
													$$pre436 = HEAP32[$blobp_vector>>2]|0;
													$2214 = $$pre436;$2215 = $$pre436;$338 = $$pre436;$339 = $$pre435;
												}
												$337 = (($339) - ($338))|0;
												$340 = $337 >> 2;
												$341 = ($340|0)==(0);
												do {
													if ($341) {
														$2223 = $2214;$2224 = $339;$385 = $2215;$386 = $339;
													} else {
														$342 = $338;
														$2225 = $339;$2226 = $339;$2227 = $339;$345 = $342;$i$06$i = $340;
														while(1) {
															$343 = (($i$06$i) + -1)|0;
															$344 = (($345) + ($343<<2)|0);
															$346 = HEAP32[$344>>2]|0;
															$347 = ((($346)) + 12|0);
															$348 = HEAP32[$347>>2]|0;
															$349 = ((($346)) + 4|0);
															$350 = HEAP32[$349>>2]|0;
															$351 = (($348) + 1)|0;
															$352 = (($351) - ($350))|0;
															$353 = ((($346)) + 8|0);
															$354 = HEAP32[$353>>2]|0;
															$355 = HEAP32[$346>>2]|0;
															$356 = (($354) + 1)|0;
															$357 = (($356) - ($355))|0;
															$358 = ($357*35)|0;
															$359 = ($352|0)>($358|0);
															$360 = ($352*25)|0;
															$361 = ($357|0)>($360|0);
															$or$cond$i85 = $361 | $359;
															if ($or$cond$i85) {
																$362 = ($346|0)==(0|0);
																if ($362) {
																	$366 = $345;$370 = $2227;
																} else {
																	__THREW__ = 0;
																	invoke_vi(72,($346|0));
																	$363 = __THREW__; __THREW__ = 0;
																	$364 = $363&1;
																	if ($364) {
																		$$lcssa806 = $346;
																		label = 124;
																		break;
																	}
																	__ZdlPv($346);
																	$$pre7$i86 = HEAP32[$blobp_vector>>2]|0;
																	$$pre8$i = HEAP32[$15>>2]|0;
																	$366 = $$pre7$i86;$370 = $$pre8$i;
																}
																$365 = (($366) + ($343<<2)|0);
																$367 = ((($365)) + 4|0);
																$368 = $367;
																$369 = (($370) - ($368))|0;
																$371 = $369 >> 2;
																_memmove(($365|0),($367|0),($369|0))|0;
																$372 = (($365) + ($371<<2)|0);
																$373 = HEAP32[$15>>2]|0;
																$374 = ($373|0)==($372|0);
																$375 = $373;
																if ($374) {
																	$2228 = $375;$2229 = $375;$2230 = $375;
																} else {
																	$__new_last2$i$i$i$i88 = $372;
																	$scevgep$i$i$i$i89 = ((($373)) + -4|0);
																	$377 = $scevgep$i$i$i$i89;
																	$378 = (($377) - ($__new_last2$i$i$i$i88))|0;
																	$379 = $378 >>> 2;
																	$380 = $379 ^ -1;
																	$scevgep4$i$i$i$i90 = (($373) + ($380<<2)|0);
																	HEAP32[$15>>2] = $scevgep4$i$i$i$i90;
																	$381 = $scevgep4$i$i$i$i90;
																	$2228 = $381;$2229 = $381;$2230 = $381;
																}
															} else {
																$2228 = $2225;$2229 = $2226;$2230 = $2227;
															}
															$376 = ($343|0)==(0);
															if ($376) {
																$$lcssa808 = $2228;$$lcssa809 = $2229;
																label = 125;
																break;
															}
															$$pre$i87 = HEAP32[$blobp_vector>>2]|0;
															$2225 = $2228;$2226 = $2229;$2227 = $2230;$345 = $$pre$i87;$i$06$i = $343;
														}
														if ((label|0) == 124) {
															$382 = ___cxa_find_matching_catch_2()|0;
															$383 = tempRet0;
															__ZdlPv($$lcssa806);
															$eh$lpad$body74$index14Z2D = $383;$eh$lpad$body74$indexZ2D = $382;
															label = 38;
															break L115;
														}
														else if ((label|0) == 125) {
															$$pre437 = HEAP32[$blobp_vector>>2]|0;
															$2223 = $$pre437;$2224 = $$lcssa808;$385 = $$pre437;$386 = $$lcssa809;
															break;
														}
													}
												} while(0);
												$384 = (($386) - ($385))|0;
												$387 = $384 >> 2;
												$388 = ($384|0)>(0);
												do {
													if ($388) {
														$389 = $385;
														$391 = $389;$i$015$i = 0;
														L170: while(1) {
															$390 = (($391) + ($i$015$i<<2)|0);
															$392 = HEAP32[$390>>2]|0;
															$393 = ((($392)) + 12|0);
															$394 = HEAP32[$393>>2]|0;
															$395 = ((($392)) + 4|0);
															$396 = HEAP32[$395>>2]|0;
															$397 = (($394) + 1)|0;
															$398 = (($397) - ($396))|0;
															$399 = ($398|0)<(11);
															do {
																if (!($399)) {
																	$400 = HEAP32[$392>>2]|0;
																	$401 = ((($392)) + 8|0);
																	$402 = HEAP32[$401>>2]|0;
																	$403 = ($400|0)>($402|0);
																	if ($403) {
																		label = 135;
																	} else {
																		$404 = ((($392)) + 16|0);
																		$405 = HEAP32[$404>>2]|0;
																		$406 = HEAP32[$405>>2]|0;
																		$c$01$i = 0;$col$02$i = $400;
																		while(1) {
																			$407 = (($col$02$i) - ($400))|0;
																			$408 = (($406) + ($407)|0);
																			$409 = HEAP8[$408>>0]|0;
																			$410 = ($409<<24>>24)==(0);
																			if ($410) {
																				$c$1$i = $c$01$i;
																			} else {
																				$411 = (($c$01$i) + 1)|0;
																				$412 = ($c$01$i|0)>(0);
																				if ($412) {
																					$c$2$i = $411;
																					break;
																				} else {
																					$c$1$i = $411;
																				}
																			}
																			$413 = (($col$02$i) + 1)|0;
																			$414 = ($col$02$i|0)<($402|0);
																			if ($414) {
																				$c$01$i = $c$1$i;$col$02$i = $413;
																			} else {
																				$c$2$i = $c$1$i;
																				break;
																			}
																		}
																		$415 = ($c$2$i|0)<(2);
																		if ($415) {
																			label = 135;
																		} else {
																			$419 = $400;$421 = $402;
																		}
																	}
																	if ((label|0) == 135) {
																		label = 0;
																		$416 = (($396) + 1)|0;
																		__THREW__ = 0;
																		invoke_vii(75,($392|0),($416|0));
																		$417 = __THREW__; __THREW__ = 0;
																		$418 = $417&1;
																		if ($418) {
																			label = 34;
																			break L170;
																		}
																		$$pre20$i96 = HEAP32[$392>>2]|0;
																		$$pre21$i = HEAP32[$401>>2]|0;
																		$419 = $$pre20$i96;$421 = $$pre21$i;
																	}
																	$420 = ($419|0)>($421|0);
																	$$pre438 = HEAP32[$393>>2]|0;
																	if (!($420)) {
																		$422 = HEAP32[$395>>2]|0;
																		$423 = (($$pre438) - ($422))|0;
																		$424 = ((($392)) + 16|0);
																		$425 = HEAP32[$424>>2]|0;
																		$426 = (($425) + (($423*12)|0)|0);
																		$427 = HEAP32[$426>>2]|0;
																		$c$37$i = 0;$col1$08$i = $419;
																		while(1) {
																			$428 = (($col1$08$i) - ($419))|0;
																			$429 = (($427) + ($428)|0);
																			$430 = HEAP8[$429>>0]|0;
																			$431 = ($430<<24>>24)==(0);
																			if ($431) {
																				$c$4$i = $c$37$i;
																			} else {
																				$432 = (($c$37$i) + 1)|0;
																				$433 = ($c$37$i|0)>(0);
																				if ($433) {
																					$c$5$i = $432;
																					break;
																				} else {
																					$c$4$i = $432;
																				}
																			}
																			$434 = (($col1$08$i) + 1)|0;
																			$435 = ($col1$08$i|0)<($421|0);
																			if ($435) {
																				$c$37$i = $c$4$i;$col1$08$i = $434;
																			} else {
																				$c$5$i = $c$4$i;
																				break;
																			}
																		}
																		$436 = ($c$5$i|0)<(2);
																		if (!($436)) {
																			break;
																		}
																	}
																	$437 = (($$pre438) + -1)|0;
																	__THREW__ = 0;
																	invoke_vii(76,($392|0),($437|0));
																	$438 = __THREW__; __THREW__ = 0;
																	$439 = $438&1;
																	if ($439) {
																		label = 34;
																		break L170;
																	}
																}
															} while(0);
															$440 = (($i$015$i) + 1)|0;
															$441 = ($440|0)<($387|0);
															if (!($441)) {
																label = 146;
																break;
															}
															$$pre$i97 = HEAP32[$blobp_vector>>2]|0;
															$391 = $$pre$i97;$i$015$i = $440;
														}
														if ((label|0) == 34) {
															$105 = ___cxa_find_matching_catch_2()|0;
															$106 = tempRet0;
															$eh$lpad$body74$index14Z2D = $106;$eh$lpad$body74$indexZ2D = $105;
															label = 38;
															break L115;
														}
														else if ((label|0) == 146) {
															$$pre439 = HEAP32[$15>>2]|0;
															$$pre440 = HEAP32[$blobp_vector>>2]|0;
															$443 = $$pre440;$444 = $$pre439;
															break;
														}
													} else {
														$443 = $2223;$444 = $2224;
													}
												} while(0);
												$442 = (($444) - ($443))|0;
												$445 = $442 >> 2;
												$446 = ($442|0)>(0);
												if ($446) {
													$447 = $443;
													$449 = $447;$i$015$i101 = 0;
													L202: while(1) {
														$448 = (($449) + ($i$015$i101<<2)|0);
														$450 = HEAP32[$448>>2]|0;
														$451 = ((($450)) + 8|0);
														$452 = HEAP32[$451>>2]|0;
														$453 = HEAP32[$450>>2]|0;
														$454 = (($452) + 1)|0;
														$455 = (($454) - ($453))|0;
														$456 = ($455|0)<(6);
														do {
															if (!($456)) {
																$457 = ((($450)) + 4|0);
																$458 = HEAP32[$457>>2]|0;
																$459 = ((($450)) + 12|0);
																$460 = HEAP32[$459>>2]|0;
																$461 = ($458|0)>($460|0);
																if ($461) {
																	label = 156;
																} else {
																	$462 = ((($450)) + 16|0);
																	$463 = HEAP32[$462>>2]|0;
																	$c$01$i103 = 0;$row$02$i = $458;
																	while(1) {
																		$464 = (($row$02$i) - ($458))|0;
																		$465 = (($463) + (($464*12)|0)|0);
																		$466 = HEAP32[$465>>2]|0;
																		$467 = HEAP8[$466>>0]|0;
																		$468 = ($467<<24>>24)==(0);
																		if ($468) {
																			$c$1$i104 = $c$01$i103;
																		} else {
																			$469 = (($c$01$i103) + 1)|0;
																			$470 = ($c$01$i103|0)>(0);
																			if ($470) {
																				$c$2$i105 = $469;
																				break;
																			} else {
																				$c$1$i104 = $469;
																			}
																		}
																		$471 = (($row$02$i) + 1)|0;
																		$472 = ($row$02$i|0)<($460|0);
																		if ($472) {
																			$c$01$i103 = $c$1$i104;$row$02$i = $471;
																		} else {
																			$c$2$i105 = $c$1$i104;
																			break;
																		}
																	}
																	$473 = ($c$2$i105|0)<(2);
																	if ($473) {
																		label = 156;
																	} else {
																		$477 = $458;$479 = $460;
																	}
																}
																if ((label|0) == 156) {
																	label = 0;
																	$474 = (($453) + 1)|0;
																	__THREW__ = 0;
																	invoke_vii(77,($450|0),($474|0));
																	$475 = __THREW__; __THREW__ = 0;
																	$476 = $475&1;
																	if ($476) {
																		break L202;
																	}
																	$$pre20$i107 = HEAP32[$457>>2]|0;
																	$$pre21$i108 = HEAP32[$459>>2]|0;
																	$477 = $$pre20$i107;$479 = $$pre21$i108;
																}
																$478 = ($477|0)>($479|0);
																$$pre441 = HEAP32[$451>>2]|0;
																if (!($478)) {
																	$480 = ((($450)) + 16|0);
																	$481 = HEAP32[$480>>2]|0;
																	$482 = HEAP32[$450>>2]|0;
																	$483 = (($$pre441) - ($482))|0;
																	$c$37$i111 = 0;$row1$08$i = $477;
																	while(1) {
																		$484 = (($row1$08$i) - ($477))|0;
																		$485 = (($481) + (($484*12)|0)|0);
																		$486 = HEAP32[$485>>2]|0;
																		$487 = (($486) + ($483)|0);
																		$488 = HEAP8[$487>>0]|0;
																		$489 = ($488<<24>>24)==(0);
																		if ($489) {
																			$c$4$i112 = $c$37$i111;
																		} else {
																			$490 = (($c$37$i111) + 1)|0;
																			$491 = ($c$37$i111|0)>(0);
																			if ($491) {
																				$c$5$i113 = $490;
																				break;
																			} else {
																				$c$4$i112 = $490;
																			}
																		}
																		$492 = (($row1$08$i) + 1)|0;
																		$493 = ($row1$08$i|0)<($479|0);
																		if ($493) {
																			$c$37$i111 = $c$4$i112;$row1$08$i = $492;
																		} else {
																			$c$5$i113 = $c$4$i112;
																			break;
																		}
																	}
																	$494 = ($c$5$i113|0)<(2);
																	if (!($494)) {
																		break;
																	}
																}
																$495 = (($$pre441) + -1)|0;
																__THREW__ = 0;
																invoke_vii(78,($450|0),($495|0));
																$496 = __THREW__; __THREW__ = 0;
																$497 = $496&1;
																if ($497) {
																	break L202;
																}
															}
														} while(0);
														$498 = (($i$015$i101) + 1)|0;
														$499 = ($498|0)<($445|0);
														if (!($499)) {
															label = 167;
															break L117;
														}
														$$pre$i116 = HEAP32[$blobp_vector>>2]|0;
														$449 = $$pre$i116;$i$015$i101 = $498;
													}
													$103 = ___cxa_find_matching_catch_2()|0;
													$104 = tempRet0;
													$eh$lpad$body74$index14Z2D = $104;$eh$lpad$body74$indexZ2D = $103;
													label = 38;
													break L115;
												} else {
													label = 167;
												}
											}
										} else {
											label = 167;
										}
									} else {
										label = 167;
									}
								} while(0);
								L230: do {
									if ((label|0) == 167) {
										L232: do {
											if ($layout) {
												$500 = HEAP32[$17>>2]|0;
												$501 = HEAP32[$page_image>>2]|0;
												$502 = (($500) + 1)|0;
												$503 = (($502) - ($501))|0;
												$504 = ($503|0)>(200);
												if ($504) {
													$505 = HEAP32[$85>>2]|0;
													$506 = HEAP32[$83>>2]|0;
													$507 = (($505) + 1)|0;
													$508 = (($507) - ($506))|0;
													$509 = ($508|0)>(200);
													if ($509) {
														$510 = HEAP32[$15>>2]|0;
														$511 = HEAP32[$blobp_vector>>2]|0;
														$512 = (($510) - ($511))|0;
														$513 = $512 >> 2;
														$514 = ($513>>>0)>(3);
														if ($514) {
															$515 = $510;
															$516 = $511;
															$517 = ($516|0)==($515|0);
															L237: do {
																if (!($517)) {
																	__THREW__ = 0;
																	$518 = (invoke_ii(79,($blobp_vector|0))|0);
																	$519 = __THREW__; __THREW__ = 0;
																	$520 = $519&1;
																	if ($520) {
																		break L230;
																	}
																	$521 = HEAP32[$blobp_vector>>2]|0;
																	$522 = HEAP32[$521>>2]|0;
																	__THREW__ = 0;
																	invoke_vii(80,($6|0),($522|0));
																	$523 = __THREW__; __THREW__ = 0;
																	$524 = $523&1;
																	if ($524) {
																		break L230;
																	}
																	$525 = ((($6)) + 28|0);
																	HEAP32[$525>>2] = 0;
																	$526 = ((($6)) + 32|0);
																	HEAP32[$526>>2] = 0;
																	$527 = ((($6)) + 36|0);
																	HEAP32[$527>>2] = 0;
																	$528 = ((($zone_vector)) + 4|0);
																	$529 = HEAP32[$528>>2]|0;
																	$530 = ((($zone_vector)) + 8|0);
																	$531 = HEAP32[$530>>2]|0;
																	$532 = ($529|0)==($531|0);
																	$533 = $531;
																	L241: do {
																		if ($532) {
																			$630 = $529;
																			$631 = HEAP32[$zone_vector>>2]|0;
																			$632 = (($630) - ($631))|0;
																			$633 = (($632|0) / 40)&-1;
																			$634 = (($633) + 1)|0;
																			$635 = ($634>>>0)>(107374182);
																			do {
																				if ($635) {
																					__THREW__ = 0;
																					invoke_vi(46,($zone_vector|0));
																					$636 = __THREW__; __THREW__ = 0;
																					$637 = $636&1;
																					if ($637) {
																						break;
																					}
																					$$pre$i$i$i125 = HEAP32[$zone_vector>>2]|0;
																					$$pre$i$i126 = HEAP32[$530>>2]|0;
																					$$pre$phi$i$iZ2D = $530;$639 = $$pre$i$i$i125;$640 = $$pre$i$i126;
																					label = 206;
																				} else {
																					$$pre$phi$i$iZ2D = $530;$639 = $631;$640 = $533;
																					label = 206;
																				}
																			} while(0);
																			do {
																				if ((label|0) == 206) {
																					$638 = (($640) - ($639))|0;
																					$641 = (($638|0) / 40)&-1;
																					$642 = ($641>>>0)<(53687091);
																					if ($642) {
																						$646 = $641 << 1;
																						$647 = ($646>>>0)<($634>>>0);
																						$648 = $647 ? $634 : $646;
																						$649 = HEAP32[$528>>2]|0;
																						$650 = (($649) - ($639))|0;
																						$651 = (($650|0) / 40)&-1;
																						$652 = ($648|0)==(0);
																						if ($652) {
																							$$0$i18$i$i$i = 0;$658 = 0;$659 = $651;
																						} else {
																							$$0$i17$i$i$i = $648;$2231 = $651;
																							label = 209;
																						}
																					} else {
																						$643 = HEAP32[$528>>2]|0;
																						$644 = (($643) - ($639))|0;
																						$645 = (($644|0) / 40)&-1;
																						$$0$i17$i$i$i = 107374182;$2231 = $645;
																						label = 209;
																					}
																					if ((label|0) == 209) {
																						$653 = ($$0$i17$i$i$i*40)|0;
																						__THREW__ = 0;
																						$654 = (invoke_ii(29,($653|0))|0);
																						$655 = __THREW__; __THREW__ = 0;
																						$656 = $655&1;
																						if ($656) {
																							break;
																						}
																						$$0$i18$i$i$i = $$0$i17$i$i$i;$658 = $654;$659 = $2231;
																					}
																					$657 = (($658) + (($659*40)|0)|0);
																					$660 = $657;
																					$661 = (($658) + (($$0$i18$i$i$i*40)|0)|0);
																					$662 = $661;
																					;HEAP32[$657>>2]=HEAP32[$6>>2]|0;HEAP32[$657+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$657+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$657+12>>2]=HEAP32[$6+12>>2]|0;
																					$663 = (((($658) + (($659*40)|0)|0)) + 16|0);
																					$664 = ((($6)) + 16|0);
																					HEAP32[$663>>2] = 0;
																					$665 = (((($658) + (($659*40)|0)|0)) + 20|0);
																					HEAP32[$665>>2] = 0;
																					$666 = (((($658) + (($659*40)|0)|0)) + 24|0);
																					HEAP32[$666>>2] = 0;
																					$667 = ((($6)) + 20|0);
																					$668 = HEAP32[$667>>2]|0;
																					$669 = HEAP32[$664>>2]|0;
																					$670 = (($668) - ($669))|0;
																					$671 = $670 >> 3;
																					$672 = ($671|0)==(0);
																					L256: do {
																						if ($672) {
																							label = 222;
																						} else {
																							$673 = ($671>>>0)>(536870911);
																							if ($673) {
																								__THREW__ = 0;
																								invoke_vi(46,($663|0));
																								$674 = __THREW__; __THREW__ = 0;
																								$675 = $674&1;
																								if (!($675)) {
																									label = 214;
																								}
																							} else {
																								label = 214;
																							}
																							do {
																								if ((label|0) == 214) {
																									__THREW__ = 0;
																									$676 = (invoke_ii(29,($670|0))|0);
																									$677 = __THREW__; __THREW__ = 0;
																									$678 = $677&1;
																									if ($678) {
																										break;
																									}
																									HEAP32[$665>>2] = $676;
																									HEAP32[$663>>2] = $676;
																									$679 = (($676) + ($671<<3)|0);
																									$680 = (((($658) + (($659*40)|0)|0)) + 24|0);
																									HEAP32[$680>>2] = $679;
																									$681 = HEAP32[$664>>2]|0;
																									$682 = HEAP32[$667>>2]|0;
																									$683 = ($681|0)==($682|0);
																									if ($683) {
																										label = 222;
																										break L256;
																									}
																									$$01$i$i249$i = $681;$690 = $676;
																									while(1) {
																										$684 = $$01$i$i249$i;
																										$685 = $684;
																										$686 = HEAP32[$685>>2]|0;
																										$687 = (($684) + 4)|0;
																										$688 = $687;
																										$689 = HEAP32[$688>>2]|0;
																										$691 = $690;
																										$692 = $691;
																										HEAP32[$692>>2] = $686;
																										$693 = (($691) + 4)|0;
																										$694 = $693;
																										HEAP32[$694>>2] = $689;
																										$695 = HEAP32[$665>>2]|0;
																										$696 = ((($695)) + 8|0);
																										HEAP32[$665>>2] = $696;
																										$697 = ((($$01$i$i249$i)) + 8|0);
																										$698 = ($697|0)==($682|0);
																										if ($698) {
																											label = 222;
																											break L256;
																										} else {
																											$$01$i$i249$i = $697;$690 = $696;
																										}
																									}
																								}
																							} while(0);
																							$699 = ___cxa_find_matching_catch_2()|0;
																							$700 = tempRet0;
																							$701 = HEAP32[$663>>2]|0;
																							$702 = ($701|0)==(0|0);
																							$703 = $701;
																							if ($702) {
																								$__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $700;$eh$lpad$body$i$i$i$indexZ2D = $699;
																								break;
																							}
																							$704 = HEAP32[$665>>2]|0;
																							$705 = ($704|0)==($701|0);
																							if (!($705)) {
																								$scevgep$i$i$i$i250$i = ((($704)) + -8|0);
																								$706 = $scevgep$i$i$i$i250$i;
																								$707 = (($706) - ($703))|0;
																								$708 = $707 >>> 3;
																								$709 = $708 ^ -1;
																								$scevgep4$i$i$i$i251$i = (($704) + ($709<<3)|0);
																								HEAP32[$665>>2] = $scevgep4$i$i$i$i251$i;
																							}
																							__ZdlPv($701);
																							$__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $700;$eh$lpad$body$i$i$i$indexZ2D = $699;
																						}
																					} while(0);
																					L271: do {
																						if ((label|0) == 222) {
																							$710 = (((($658) + (($659*40)|0)|0)) + 28|0);
																							$711 = ((($6)) + 28|0);
																							HEAP32[$710>>2] = 0;
																							$712 = (((($658) + (($659*40)|0)|0)) + 32|0);
																							HEAP32[$712>>2] = 0;
																							$713 = (((($658) + (($659*40)|0)|0)) + 36|0);
																							HEAP32[$713>>2] = 0;
																							$714 = HEAP32[$526>>2]|0;
																							$715 = HEAP32[$711>>2]|0;
																							$716 = (($714) - ($715))|0;
																							$717 = $716 >> 2;
																							$718 = ($717|0)==(0);
																							L273: do {
																								if (!($718)) {
																									$719 = ($717>>>0)>(1073741823);
																									if ($719) {
																										__THREW__ = 0;
																										invoke_vi(46,($710|0));
																										$720 = __THREW__; __THREW__ = 0;
																										$721 = $720&1;
																										if (!($721)) {
																											label = 225;
																										}
																									} else {
																										label = 225;
																									}
																									do {
																										if ((label|0) == 225) {
																											__THREW__ = 0;
																											$722 = (invoke_ii(29,($716|0))|0);
																											$723 = __THREW__; __THREW__ = 0;
																											$724 = $723&1;
																											if ($724) {
																												break;
																											}
																											HEAP32[$712>>2] = $722;
																											HEAP32[$710>>2] = $722;
																											$725 = (($722) + ($717<<2)|0);
																											$726 = (((($658) + (($659*40)|0)|0)) + 36|0);
																											HEAP32[$726>>2] = $725;
																											$727 = HEAP32[$711>>2]|0;
																											$728 = HEAP32[$526>>2]|0;
																											$729 = ($727|0)==($728|0);
																											if ($729) {
																												break L273;
																											}
																											$$01$i$i$i = $727;$731 = $722;
																											while(1) {
																												$730 = HEAP32[$$01$i$i$i>>2]|0;
																												HEAP32[$731>>2] = $730;
																												$732 = HEAP32[$712>>2]|0;
																												$733 = ((($732)) + 4|0);
																												HEAP32[$712>>2] = $733;
																												$734 = ((($$01$i$i$i)) + 4|0);
																												$735 = ($734|0)==($728|0);
																												if ($735) {
																													break L273;
																												} else {
																													$$01$i$i$i = $734;$731 = $733;
																												}
																											}
																										}
																									} while(0);
																									$736 = ___cxa_find_matching_catch_2()|0;
																									$737 = tempRet0;
																									$738 = HEAP32[$710>>2]|0;
																									$739 = ($738|0)==(0|0);
																									$740 = $738;
																									if (!($739)) {
																										$741 = HEAP32[$712>>2]|0;
																										$742 = ($741|0)==($738|0);
																										if (!($742)) {
																											$scevgep$i$i$i$i45$i = ((($741)) + -4|0);
																											$743 = $scevgep$i$i$i$i45$i;
																											$744 = (($743) - ($740))|0;
																											$745 = $744 >>> 2;
																											$746 = $745 ^ -1;
																											$scevgep4$i$i$i$i46$i = (($741) + ($746<<2)|0);
																											HEAP32[$712>>2] = $scevgep4$i$i$i$i46$i;
																										}
																										__ZdlPv($738);
																									}
																									$747 = (((($658) + (($659*40)|0)|0)) + 16|0);
																									$748 = HEAP32[$747>>2]|0;
																									$749 = ($748|0)==(0|0);
																									$750 = $748;
																									if ($749) {
																										$__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $737;$eh$lpad$body$i$i$i$indexZ2D = $736;
																										break L271;
																									}
																									$751 = HEAP32[$665>>2]|0;
																									$752 = ($751|0)==($748|0);
																									if (!($752)) {
																										$scevgep$i$i$i$i$i$i$i$i$i = ((($751)) + -8|0);
																										$753 = $scevgep$i$i$i$i$i$i$i$i$i;
																										$754 = (($753) - ($750))|0;
																										$755 = $754 >>> 3;
																										$756 = $755 ^ -1;
																										$scevgep4$i$i$i$i$i$i$i$i$i = (($751) + ($756<<3)|0);
																										HEAP32[$665>>2] = $scevgep4$i$i$i$i$i$i$i$i$i;
																									}
																									__ZdlPv($748);
																									$__v$sroa$15$2$i$i$i = $660;$__v$sroa$6$3$i$i$i = $660;$eh$lpad$body$i$i$i$index36Z2D = $737;$eh$lpad$body$i$i$i$indexZ2D = $736;
																									break L271;
																								}
																							} while(0);
																							$757 = ((($657)) + 40|0);
																							$758 = $757;
																							$759 = HEAP32[$zone_vector>>2]|0;
																							$760 = HEAP32[$528>>2]|0;
																							$761 = ($760|0)==($759|0);
																							do {
																								if ($761) {
																									$762 = $759;
																									$791 = $660;$792 = $762;$794 = $759;
																								} else {
																									$$01$i$i$i$i$i = $760;$764 = $657;$__v$sroa$6$0$i$i$i = $660;
																									while(1) {
																										$763 = ((($764)) + -40|0);
																										$765 = ((($$01$i$i$i$i$i)) + -40|0);
																										;HEAP32[$763>>2]=HEAP32[$765>>2]|0;HEAP32[$763+4>>2]=HEAP32[$765+4>>2]|0;HEAP32[$763+8>>2]=HEAP32[$765+8>>2]|0;HEAP32[$763+12>>2]=HEAP32[$765+12>>2]|0;
																										$766 = ((($764)) + -24|0);
																										$767 = ((($$01$i$i$i$i$i)) + -24|0);
																										__THREW__ = 0;
																										invoke_vii(81,($766|0),($767|0));
																										$768 = __THREW__; __THREW__ = 0;
																										$769 = $768&1;
																										if ($769) {
																											$__v$sroa$6$0$i$i$i$lcssa = $__v$sroa$6$0$i$i$i;
																											label = 259;
																											break;
																										}
																										$770 = ((($764)) + -12|0);
																										$771 = ((($$01$i$i$i$i$i)) + -12|0);
																										__THREW__ = 0;
																										invoke_vii(82,($770|0),($771|0));
																										$772 = __THREW__; __THREW__ = 0;
																										$773 = $772&1;
																										if ($773) {
																											$$lcssa797 = $764;$__v$sroa$6$0$i$i$i$lcssa794 = $__v$sroa$6$0$i$i$i;
																											label = 241;
																											break;
																										}
																										$787 = $__v$sroa$6$0$i$i$i;
																										$788 = ((($787)) + -40|0);
																										$789 = $788;
																										$790 = ($765|0)==($759|0);
																										if ($790) {
																											$$lcssa799 = $789;
																											label = 246;
																											break;
																										} else {
																											$$01$i$i$i$i$i = $765;$764 = $788;$__v$sroa$6$0$i$i$i = $789;
																										}
																									}
																									if ((label|0) == 241) {
																										$774 = ___cxa_find_matching_catch_2()|0;
																										$775 = tempRet0;
																										$776 = ((($$lcssa797)) + -24|0);
																										$777 = HEAP32[$776>>2]|0;
																										$778 = ($777|0)==(0|0);
																										$779 = $777;
																										if ($778) {
																											$__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa794;$eh$lpad$body$i$i$i$index36Z2D = $775;$eh$lpad$body$i$i$i$indexZ2D = $774;
																											break L271;
																										}
																										$780 = ((($$lcssa797)) + -20|0);
																										$781 = HEAP32[$780>>2]|0;
																										$782 = ($781|0)==($777|0);
																										if (!($782)) {
																											$scevgep$i$i$i$i$i$i$i$i$i$i$i = ((($781)) + -8|0);
																											$783 = $scevgep$i$i$i$i$i$i$i$i$i$i$i;
																											$784 = (($783) - ($779))|0;
																											$785 = $784 >>> 3;
																											$786 = $785 ^ -1;
																											$scevgep4$i$i$i$i$i$i$i$i$i$i$i = (($781) + ($786<<3)|0);
																											HEAP32[$780>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i;
																										}
																										__ZdlPv($777);
																										$__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa794;$eh$lpad$body$i$i$i$index36Z2D = $775;$eh$lpad$body$i$i$i$indexZ2D = $774;
																										break L271;
																									}
																									else if ((label|0) == 246) {
																										$$pre$i$i$i$i = HEAP32[$zone_vector>>2]|0;
																										$$pre27$i$i$i = HEAP32[$528>>2]|0;
																										$791 = $$lcssa799;$792 = $$pre$i$i$i$i;$794 = $$pre27$i$i$i;
																										break;
																									}
																									else if ((label|0) == 259) {
																										$823 = ___cxa_find_matching_catch_2()|0;
																										$824 = tempRet0;
																										$__v$sroa$15$2$i$i$i = $758;$__v$sroa$6$3$i$i$i = $__v$sroa$6$0$i$i$i$lcssa;$eh$lpad$body$i$i$i$index36Z2D = $824;$eh$lpad$body$i$i$i$indexZ2D = $823;
																										break L271;
																									}
																								}
																							} while(0);
																							HEAP32[$zone_vector>>2] = $791;
																							HEAP32[$528>>2] = $758;
																							HEAP32[$$pre$phi$i$iZ2D>>2] = $662;
																							$793 = $792;
																							$795 = ($794|0)==($793|0);
																							if (!($795)) {
																								$797 = $794;
																								while(1) {
																									$796 = ((($797)) + -40|0);
																									$798 = ((($797)) + -12|0);
																									$799 = HEAP32[$798>>2]|0;
																									$800 = ($799|0)==(0|0);
																									$801 = $799;
																									if (!($800)) {
																										$802 = ((($797)) + -8|0);
																										$803 = HEAP32[$802>>2]|0;
																										$804 = ($803|0)==($799|0);
																										if (!($804)) {
																											$scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i = ((($803)) + -4|0);
																											$805 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i$i;
																											$806 = (($805) - ($801))|0;
																											$807 = $806 >>> 2;
																											$808 = $807 ^ -1;
																											$scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i = (($803) + ($808<<2)|0);
																											HEAP32[$802>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i$i;
																										}
																										__ZdlPv($799);
																									}
																									$809 = ((($797)) + -24|0);
																									$810 = HEAP32[$809>>2]|0;
																									$811 = ($810|0)==(0|0);
																									$812 = $810;
																									if (!($811)) {
																										$814 = ((($797)) + -20|0);
																										$815 = HEAP32[$814>>2]|0;
																										$816 = ($815|0)==($810|0);
																										if (!($816)) {
																											$scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i = ((($815)) + -8|0);
																											$817 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i$i;
																											$818 = (($817) - ($812))|0;
																											$819 = $818 >>> 3;
																											$820 = $819 ^ -1;
																											$scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i = (($815) + ($820<<3)|0);
																											HEAP32[$814>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i$i;
																										}
																										__ZdlPv($810);
																									}
																									$813 = ($796|0)==($793|0);
																									if ($813) {
																										break;
																									} else {
																										$797 = $796;
																									}
																								}
																							}
																							$821 = ($792|0)==(0);
																							if ($821) {
																								label = 272;
																								break L241;
																							}
																							$822 = $792;
																							__ZdlPv($822);
																							label = 272;
																							break L241;
																						}
																					} while(0);
																					$825 = $__v$sroa$6$3$i$i$i;
																					$826 = $__v$sroa$15$2$i$i$i;
																					$827 = ($826|0)==($825|0);
																					if (!($827)) {
																						$829 = $826;
																						while(1) {
																							$828 = ((($829)) + -40|0);
																							$830 = ((($829)) + -12|0);
																							$831 = HEAP32[$830>>2]|0;
																							$832 = ($831|0)==(0|0);
																							$833 = $831;
																							if (!($832)) {
																								$834 = ((($829)) + -8|0);
																								$835 = HEAP32[$834>>2]|0;
																								$836 = ($835|0)==($831|0);
																								if (!($836)) {
																									$scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128 = ((($835)) + -4|0);
																									$837 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i128;
																									$838 = (($837) - ($833))|0;
																									$839 = $838 >>> 2;
																									$840 = $839 ^ -1;
																									$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129 = (($835) + ($840<<2)|0);
																									HEAP32[$834>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i129;
																								}
																								__ZdlPv($831);
																							}
																							$841 = ((($829)) + -24|0);
																							$842 = HEAP32[$841>>2]|0;
																							$843 = ($842|0)==(0|0);
																							$844 = $842;
																							if (!($843)) {
																								$846 = ((($829)) + -20|0);
																								$847 = HEAP32[$846>>2]|0;
																								$848 = ($847|0)==($842|0);
																								if (!($848)) {
																									$scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i = ((($847)) + -8|0);
																									$849 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
																									$850 = (($849) - ($844))|0;
																									$851 = $850 >>> 3;
																									$852 = $851 ^ -1;
																									$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i = (($847) + ($852<<3)|0);
																									HEAP32[$846>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i$i;
																								}
																								__ZdlPv($842);
																							}
																							$845 = ($828|0)==($825|0);
																							if ($845) {
																								break;
																							} else {
																								$829 = $828;
																							}
																						}
																					}
																					$853 = ($658|0)==(0|0);
																					if ($853) {
																						$eh$lpad$body$i$index51Z2D = $eh$lpad$body$i$i$i$index36Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$indexZ2D;
																						label = 289;
																						break L241;
																					}
																					__ZdlPv($658);
																					$eh$lpad$body$i$index51Z2D = $eh$lpad$body$i$i$i$index36Z2D;$eh$lpad$body$i$indexZ2D = $eh$lpad$body$i$i$i$indexZ2D;
																					label = 289;
																					break L241;
																				}
																			} while(0);
																			$909 = ___cxa_find_matching_catch_2()|0;
																			$910 = tempRet0;
																			$eh$lpad$body$i$index51Z2D = $910;$eh$lpad$body$i$indexZ2D = $909;
																			label = 289;
																		} else {
																			;HEAP32[$529>>2]=HEAP32[$6>>2]|0;HEAP32[$529+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$529+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$529+12>>2]=HEAP32[$6+12>>2]|0;
																			$534 = ((($529)) + 16|0);
																			$535 = ((($6)) + 16|0);
																			HEAP32[$534>>2] = 0;
																			$536 = ((($529)) + 20|0);
																			HEAP32[$536>>2] = 0;
																			$537 = ((($529)) + 24|0);
																			HEAP32[$537>>2] = 0;
																			$538 = ((($6)) + 20|0);
																			$539 = HEAP32[$538>>2]|0;
																			$540 = HEAP32[$535>>2]|0;
																			$541 = (($539) - ($540))|0;
																			$542 = $541 >> 3;
																			$543 = ($542|0)==(0);
																			L347: do {
																				if (!($543)) {
																					$544 = ($542>>>0)>(536870911);
																					if ($544) {
																						__THREW__ = 0;
																						invoke_vi(46,($534|0));
																						$545 = __THREW__; __THREW__ = 0;
																						$546 = $545&1;
																						if (!($546)) {
																							label = 178;
																						}
																					} else {
																						label = 178;
																					}
																					do {
																						if ((label|0) == 178) {
																							__THREW__ = 0;
																							$547 = (invoke_ii(29,($541|0))|0);
																							$548 = __THREW__; __THREW__ = 0;
																							$549 = $548&1;
																							if ($549) {
																								break;
																							}
																							HEAP32[$536>>2] = $547;
																							HEAP32[$534>>2] = $547;
																							$550 = (($547) + ($542<<3)|0);
																							$551 = ((($529)) + 24|0);
																							HEAP32[$551>>2] = $550;
																							$552 = HEAP32[$535>>2]|0;
																							$553 = HEAP32[$538>>2]|0;
																							$554 = ($552|0)==($553|0);
																							if ($554) {
																								break L347;
																							}
																							$$01$i$i270$i = $552;$561 = $547;
																							while(1) {
																								$555 = $$01$i$i270$i;
																								$556 = $555;
																								$557 = HEAP32[$556>>2]|0;
																								$558 = (($555) + 4)|0;
																								$559 = $558;
																								$560 = HEAP32[$559>>2]|0;
																								$562 = $561;
																								$563 = $562;
																								HEAP32[$563>>2] = $557;
																								$564 = (($562) + 4)|0;
																								$565 = $564;
																								HEAP32[$565>>2] = $560;
																								$566 = HEAP32[$536>>2]|0;
																								$567 = ((($566)) + 8|0);
																								HEAP32[$536>>2] = $567;
																								$568 = ((($$01$i$i270$i)) + 8|0);
																								$569 = ($568|0)==($553|0);
																								if ($569) {
																									break L347;
																								} else {
																									$$01$i$i270$i = $568;$561 = $567;
																								}
																							}
																						}
																					} while(0);
																					$570 = ___cxa_find_matching_catch_2()|0;
																					$571 = tempRet0;
																					$572 = HEAP32[$534>>2]|0;
																					$573 = ($572|0)==(0|0);
																					$574 = $572;
																					if ($573) {
																						$eh$lpad$body$i$index51Z2D = $571;$eh$lpad$body$i$indexZ2D = $570;
																						label = 289;
																						break L241;
																					}
																					$575 = HEAP32[$536>>2]|0;
																					$576 = ($575|0)==($572|0);
																					if (!($576)) {
																						$scevgep$i$i$i$i271$i = ((($575)) + -8|0);
																						$577 = $scevgep$i$i$i$i271$i;
																						$578 = (($577) - ($574))|0;
																						$579 = $578 >>> 3;
																						$580 = $579 ^ -1;
																						$scevgep4$i$i$i$i272$i = (($575) + ($580<<3)|0);
																						HEAP32[$536>>2] = $scevgep4$i$i$i$i272$i;
																					}
																					__ZdlPv($572);
																					$eh$lpad$body$i$index51Z2D = $571;$eh$lpad$body$i$indexZ2D = $570;
																					label = 289;
																					break L241;
																				}
																			} while(0);
																			$581 = ((($529)) + 28|0);
																			$582 = ((($6)) + 28|0);
																			HEAP32[$581>>2] = 0;
																			$583 = ((($529)) + 32|0);
																			HEAP32[$583>>2] = 0;
																			$584 = ((($529)) + 36|0);
																			HEAP32[$584>>2] = 0;
																			$585 = HEAP32[$526>>2]|0;
																			$586 = HEAP32[$582>>2]|0;
																			$587 = (($585) - ($586))|0;
																			$588 = $587 >> 2;
																			$589 = ($588|0)==(0);
																			L363: do {
																				if (!($589)) {
																					$590 = ($588>>>0)>(1073741823);
																					if ($590) {
																						__THREW__ = 0;
																						invoke_vi(46,($581|0));
																						$591 = __THREW__; __THREW__ = 0;
																						$592 = $591&1;
																						if (!($592)) {
																							label = 189;
																						}
																					} else {
																						label = 189;
																					}
																					do {
																						if ((label|0) == 189) {
																							__THREW__ = 0;
																							$593 = (invoke_ii(29,($587|0))|0);
																							$594 = __THREW__; __THREW__ = 0;
																							$595 = $594&1;
																							if ($595) {
																								break;
																							}
																							HEAP32[$583>>2] = $593;
																							HEAP32[$581>>2] = $593;
																							$596 = (($593) + ($588<<2)|0);
																							$597 = ((($529)) + 36|0);
																							HEAP32[$597>>2] = $596;
																							$598 = HEAP32[$582>>2]|0;
																							$599 = HEAP32[$526>>2]|0;
																							$600 = ($598|0)==($599|0);
																							if ($600) {
																								break L363;
																							}
																							$$01$i$i259$i = $598;$602 = $593;
																							while(1) {
																								$601 = HEAP32[$$01$i$i259$i>>2]|0;
																								HEAP32[$602>>2] = $601;
																								$603 = HEAP32[$583>>2]|0;
																								$604 = ((($603)) + 4|0);
																								HEAP32[$583>>2] = $604;
																								$605 = ((($$01$i$i259$i)) + 4|0);
																								$606 = ($605|0)==($599|0);
																								if ($606) {
																									break L363;
																								} else {
																									$$01$i$i259$i = $605;$602 = $604;
																								}
																							}
																						}
																					} while(0);
																					$607 = ___cxa_find_matching_catch_2()|0;
																					$608 = tempRet0;
																					$609 = HEAP32[$581>>2]|0;
																					$610 = ($609|0)==(0|0);
																					$611 = $609;
																					if (!($610)) {
																						$612 = HEAP32[$583>>2]|0;
																						$613 = ($612|0)==($609|0);
																						if (!($613)) {
																							$scevgep$i$i$i$i260$i = ((($612)) + -4|0);
																							$614 = $scevgep$i$i$i$i260$i;
																							$615 = (($614) - ($611))|0;
																							$616 = $615 >>> 2;
																							$617 = $616 ^ -1;
																							$scevgep4$i$i$i$i261$i = (($612) + ($617<<2)|0);
																							HEAP32[$583>>2] = $scevgep4$i$i$i$i261$i;
																						}
																						__ZdlPv($609);
																					}
																					$618 = ((($529)) + 16|0);
																					$619 = HEAP32[$618>>2]|0;
																					$620 = ($619|0)==(0|0);
																					$621 = $619;
																					if ($620) {
																						$eh$lpad$body$i$index51Z2D = $608;$eh$lpad$body$i$indexZ2D = $607;
																						label = 289;
																						break L241;
																					}
																					$622 = HEAP32[$536>>2]|0;
																					$623 = ($622|0)==($619|0);
																					if (!($623)) {
																						$scevgep$i$i$i$i$i$i$i$i120 = ((($622)) + -8|0);
																						$624 = $scevgep$i$i$i$i$i$i$i$i120;
																						$625 = (($624) - ($621))|0;
																						$626 = $625 >>> 3;
																						$627 = $626 ^ -1;
																						$scevgep4$i$i$i$i$i$i$i$i121 = (($622) + ($627<<3)|0);
																						HEAP32[$536>>2] = $scevgep4$i$i$i$i$i$i$i$i121;
																					}
																					__ZdlPv($619);
																					$eh$lpad$body$i$index51Z2D = $608;$eh$lpad$body$i$indexZ2D = $607;
																					label = 289;
																					break L241;
																				}
																			} while(0);
																			$628 = HEAP32[$528>>2]|0;
																			$629 = ((($628)) + 40|0);
																			HEAP32[$528>>2] = $629;
																			label = 272;
																		}
																	} while(0);
																	L385: do {
																		if ((label|0) == 272) {
																			$854 = HEAP32[$525>>2]|0;
																			$855 = ($854|0)==(0|0);
																			$856 = $854;
																			if (!($855)) {
																				$857 = HEAP32[$526>>2]|0;
																				$858 = ($857|0)==($854|0);
																				if (!($858)) {
																					$scevgep$i$i$i$i42$i = ((($857)) + -4|0);
																					$859 = $scevgep$i$i$i$i42$i;
																					$860 = (($859) - ($856))|0;
																					$861 = $860 >>> 2;
																					$862 = $861 ^ -1;
																					$scevgep4$i$i$i$i43$i = (($857) + ($862<<2)|0);
																					HEAP32[$526>>2] = $scevgep4$i$i$i$i43$i;
																				}
																				__ZdlPv($854);
																			}
																			$863 = ((($6)) + 16|0);
																			$864 = HEAP32[$863>>2]|0;
																			$865 = ($864|0)==(0|0);
																			$866 = $864;
																			if (!($865)) {
																				$867 = ((($6)) + 20|0);
																				$868 = HEAP32[$867>>2]|0;
																				$869 = ($868|0)==($864|0);
																				if (!($869)) {
																					$scevgep$i$i$i$i$i$i = ((($868)) + -8|0);
																					$870 = $scevgep$i$i$i$i$i$i;
																					$871 = (($870) - ($866))|0;
																					$872 = $871 >>> 3;
																					$873 = $872 ^ -1;
																					$scevgep4$i$i$i$i$i$i = (($868) + ($873<<3)|0);
																					HEAP32[$867>>2] = $scevgep4$i$i$i$i$i$i;
																				}
																				__ZdlPv($864);
																			}
																			$zone_vector$idx7$val$i = HEAP32[$528>>2]|0;
																			$874 = HEAP32[$blobp_vector>>2]|0;
																			$875 = ((($zone_vector$idx7$val$i)) + -8|0);
																			$876 = HEAP32[$875>>2]|0;
																			$877 = ((($zone_vector$idx7$val$i)) + -4|0);
																			$878 = HEAP32[$877>>2]|0;
																			$879 = ($876|0)==($878|0);
																			if ($879) {
																				$883 = ((($zone_vector$idx7$val$i)) + -12|0);
																				__THREW__ = 0;
																				invoke_vii(70,($883|0),($874|0));
																				$884 = __THREW__; __THREW__ = 0;
																				$885 = $884&1;
																				if ($885) {
																					break L230;
																				}
																			} else {
																				$880 = HEAP32[$874>>2]|0;
																				HEAP32[$876>>2] = $880;
																				$881 = HEAP32[$875>>2]|0;
																				$882 = ((($881)) + 4|0);
																				HEAP32[$875>>2] = $882;
																			}
																			$886 = HEAP32[$15>>2]|0;
																			$887 = HEAP32[$blobp_vector>>2]|0;
																			$888 = (($886) - ($887))|0;
																			$889 = $888 >> 2;
																			$890 = ($889>>>0)>(1);
																			$$cast453$i = $887;
																			L414: do {
																				if ($890) {
																					$891 = ($518*10)|0;
																					$892 = ((($8)) + 28|0);
																					$893 = ((($8)) + 32|0);
																					$894 = ((($8)) + 36|0);
																					$895 = ((($8)) + 16|0);
																					$896 = ((($8)) + 20|0);
																					$897 = ((($8)) + 28|0);
																					$898 = ((($8)) + 16|0);
																					$899 = $518 << 1;
																					$$cast455$i = $$cast453$i;$i$0454$i = 1;
																					L416: while(1) {
																						$931 = (($$cast455$i) + ($i$0454$i<<2)|0);
																						$932 = HEAP32[$931>>2]|0;
																						$933 = ((($932)) + 12|0);
																						$934 = HEAP32[$933>>2]|0;
																						$935 = ((($932)) + 4|0);
																						$936 = HEAP32[$935>>2]|0;
																						$937 = (($934) + 1)|0;
																						$938 = (($937) - ($936))|0;
																						$939 = ($938|0)>($891|0);
																						L418: do {
																							if ($939) {
																								$944 = ($932|0)==(0|0);
																								if ($944) {
																									break;
																								}
																								__THREW__ = 0;
																								invoke_vi(72,($932|0));
																								$945 = __THREW__; __THREW__ = 0;
																								$946 = $945&1;
																								if ($946) {
																									$$lcssa749 = $932;
																									label = 303;
																									break L416;
																								}
																								__ZdlPv($932);
																							} else {
																								$940 = HEAP32[$528>>2]|0;
																								$941 = HEAP32[$zone_vector>>2]|0;
																								$942 = ($940|0)==($941|0);
																								do {
																									if (!($942)) {
																										$943 = $941;
																										$first$0446$i = -1;$j$0447$i = 0;$zone_vector$idx30$val$i = $943;
																										while(1) {
																											$950 = (($zone_vector$idx30$val$i) + (($j$0447$i*40)|0)|0);
																											__THREW__ = 0;
																											$951 = (invoke_iii(83,($950|0),($932|0))|0);
																											$952 = __THREW__; __THREW__ = 0;
																											$953 = $952&1;
																											if ($953) {
																												label = 31;
																												break L416;
																											}
																											$954 = ($951|0)<($899|0);
																											do {
																												if ($954) {
																													$955 = ($first$0446$i|0)<(0);
																													if ($955) {
																														$first$1$i = $j$0447$i;$j$1$i = $j$0447$i;
																														break;
																													}
																													$zone_vector$idx29$val$i = HEAP32[$zone_vector>>2]|0;
																													$956 = (($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0);
																													$957 = (($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0);
																													__THREW__ = 0;
																													invoke_vii(84,($956|0),($957|0));
																													$958 = __THREW__; __THREW__ = 0;
																													$959 = $958&1;
																													if ($959) {
																														label = 31;
																														break L416;
																													}
																													$960 = (((($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0)) + 28|0);
																													$961 = (((($zone_vector$idx29$val$i) + (($first$0446$i*40)|0)|0)) + 32|0);
																													$962 = HEAP32[$961>>2]|0;
																													HEAP32[$0>>2] = $962;
																													$963 = (((($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0)) + 28|0);
																													$964 = HEAP32[$963>>2]|0;
																													HEAP32[$1>>2] = $964;
																													$965 = (((($zone_vector$idx29$val$i) + (($j$0447$i*40)|0)|0)) + 32|0);
																													$966 = HEAP32[$965>>2]|0;
																													HEAP32[$2>>2] = $966;
																													__THREW__ = 0;
																													;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
																													;HEAP32[$$byval_copy145>>2]=HEAP32[$1>>2]|0;
																													;HEAP32[$$byval_copy146>>2]=HEAP32[$2>>2]|0;
																													(invoke_iiiii(85,($960|0),($$byval_copy|0),($$byval_copy145|0),($$byval_copy146|0))|0);
																													$967 = __THREW__; __THREW__ = 0;
																													$968 = $967&1;
																													if ($968) {
																														label = 31;
																														break L416;
																													}
																													$969 = HEAP32[$963>>2]|0;
																													$970 = HEAP32[$965>>2]|0;
																													$971 = ($970|0)==($969|0);
																													if (!($971)) {
																														$__new_last2$i$i$i$i62$i = $969;
																														$scevgep$i$i$i$i63$i = ((($970)) + -4|0);
																														$972 = $scevgep$i$i$i$i63$i;
																														$973 = (($972) - ($__new_last2$i$i$i$i62$i))|0;
																														$974 = $973 >>> 2;
																														$975 = $974 ^ -1;
																														$scevgep4$i$i$i$i64$i = (($970) + ($975<<2)|0);
																														HEAP32[$965>>2] = $scevgep4$i$i$i$i64$i;
																													}
																													$zone_vector$idx33$val287288$i = HEAP32[$zone_vector>>2]|0;
																													$$idx$i = ($j$0447$i*40)|0;
																													$976 = (($$idx$i|0) / 40)&-1;
																													$977 = (($zone_vector$idx33$val287288$i) + (($976*40)|0)|0);
																													$978 = ((($977)) + 40|0);
																													$979 = HEAP32[$528>>2]|0;
																													$980 = ($978|0)==($979|0);
																													if ($980) {
																														$$0$lcssa$i$i5$i$i = $977;$2233 = $978;
																														label = 317;
																													} else {
																														$$012$i$i$i$i = $978;$$03$i$i$i$i = $977;
																														while(1) {
																															;HEAP32[$$03$i$i$i$i>>2]=HEAP32[$$012$i$i$i$i>>2]|0;HEAP32[$$03$i$i$i$i+4>>2]=HEAP32[$$012$i$i$i$i+4>>2]|0;HEAP32[$$03$i$i$i$i+8>>2]=HEAP32[$$012$i$i$i$i+8>>2]|0;HEAP32[$$03$i$i$i$i+12>>2]=HEAP32[$$012$i$i$i$i+12>>2]|0;
																															$981 = ((($$03$i$i$i$i)) + 16|0);
																															$982 = ((($$012$i$i$i$i)) + 16|0);
																															$983 = HEAP32[$982>>2]|0;
																															$984 = ((($$012$i$i$i$i)) + 20|0);
																															$985 = HEAP32[$984>>2]|0;
																															__THREW__ = 0;
																															invoke_viii(86,($981|0),($983|0),($985|0));
																															$986 = __THREW__; __THREW__ = 0;
																															$987 = $986&1;
																															if ($987) {
																																label = 30;
																																break L416;
																															}
																															$988 = ((($$03$i$i$i$i)) + 28|0);
																															$989 = ((($$012$i$i$i$i)) + 28|0);
																															$990 = HEAP32[$989>>2]|0;
																															$991 = ((($$012$i$i$i$i)) + 32|0);
																															$992 = HEAP32[$991>>2]|0;
																															__THREW__ = 0;
																															invoke_viii(87,($988|0),($990|0),($992|0));
																															$993 = __THREW__; __THREW__ = 0;
																															$994 = $993&1;
																															if ($994) {
																																label = 30;
																																break L416;
																															}
																															$995 = ((($$012$i$i$i$i)) + 40|0);
																															$996 = ((($$03$i$i$i$i)) + 40|0);
																															$997 = ($995|0)==($979|0);
																															if ($997) {
																																$$lcssa731 = $996;
																																break;
																															} else {
																																$$012$i$i$i$i = $995;$$03$i$i$i$i = $996;
																															}
																														}
																														$$pre$i67$i = HEAP32[$528>>2]|0;
																														$998 = ($$pre$i67$i|0)==($$lcssa731|0);
																														if (!($998)) {
																															$$0$lcssa$i$i5$i$i = $$lcssa731;$2233 = $$pre$i67$i;
																															label = 317;
																														}
																													}
																													if ((label|0) == 317) {
																														label = 0;
																														$1000 = $2233;
																														while(1) {
																															$999 = ((($1000)) + -40|0);
																															HEAP32[$528>>2] = $999;
																															$1001 = ((($1000)) + -12|0);
																															$1002 = HEAP32[$1001>>2]|0;
																															$1003 = ($1002|0)==(0|0);
																															$1004 = $1002;
																															if (!($1003)) {
																																$1005 = ((($1000)) + -8|0);
																																$1006 = HEAP32[$1005>>2]|0;
																																$1007 = ($1006|0)==($1002|0);
																																if (!($1007)) {
																																	$scevgep$i$i$i$i$i$i$i$i$i$i136 = ((($1006)) + -4|0);
																																	$1008 = $scevgep$i$i$i$i$i$i$i$i$i$i136;
																																	$1009 = (($1008) - ($1004))|0;
																																	$1010 = $1009 >>> 2;
																																	$1011 = $1010 ^ -1;
																																	$scevgep4$i$i$i$i$i$i$i$i$i$i137 = (($1006) + ($1011<<2)|0);
																																	HEAP32[$1005>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i137;
																																}
																																__ZdlPv($1002);
																															}
																															$1012 = ((($1000)) + -24|0);
																															$1013 = HEAP32[$1012>>2]|0;
																															$1014 = ($1013|0)==(0|0);
																															$1015 = $1013;
																															if (!($1014)) {
																																$1018 = ((($1000)) + -20|0);
																																$1019 = HEAP32[$1018>>2]|0;
																																$1020 = ($1019|0)==($1013|0);
																																if (!($1020)) {
																																	$scevgep$i$i$i$i$i$i$i$i$i$i68$i = ((($1019)) + -8|0);
																																	$1021 = $scevgep$i$i$i$i$i$i$i$i$i$i68$i;
																																	$1022 = (($1021) - ($1015))|0;
																																	$1023 = $1022 >>> 3;
																																	$1024 = $1023 ^ -1;
																																	$scevgep4$i$i$i$i$i$i$i$i$i$i69$i = (($1019) + ($1024<<3)|0);
																																	HEAP32[$1018>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i69$i;
																																}
																																__ZdlPv($1013);
																															}
																															$1016 = HEAP32[$528>>2]|0;
																															$1017 = ($1016|0)==($$0$lcssa$i$i5$i$i|0);
																															if ($1017) {
																																break;
																															} else {
																																$1000 = $1016;
																															}
																														}
																													}
																													$1025 = (($j$0447$i) + -1)|0;
																													$first$1$i = $first$0446$i;$j$1$i = $1025;
																												} else {
																													$first$1$i = $first$0446$i;$j$1$i = $j$0447$i;
																												}
																											} while(0);
																											$1026 = (($j$1$i) + 1)|0;
																											$1027 = HEAP32[$528>>2]|0;
																											$1028 = HEAP32[$zone_vector>>2]|0;
																											$1029 = (($1027) - ($1028))|0;
																											$1030 = (($1029|0) / 40)&-1;
																											$1031 = ($1026>>>0)<($1030>>>0);
																											$1032 = $1028;
																											if ($1031) {
																												$first$0446$i = $first$1$i;$j$0447$i = $1026;$zone_vector$idx30$val$i = $1032;
																											} else {
																												$$lcssa732 = $1032;$first$1$i$lcssa = $first$1$i;
																												break;
																											}
																										}
																										$949 = ($first$1$i$lcssa|0)>(-1);
																										if (!($949)) {
																											break;
																										}
																										$1033 = (($$lcssa732) + (($first$1$i$lcssa*40)|0)|0);
																										__THREW__ = 0;
																										invoke_vii(88,($1033|0),($932|0));
																										$1034 = __THREW__; __THREW__ = 0;
																										$1035 = $1034&1;
																										if ($1035) {
																											label = 32;
																											break L416;
																										}
																										$zone_vector$idx26$val$i = HEAP32[$zone_vector>>2]|0;
																										HEAP32[$7>>2] = $932;
																										$1036 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 32|0);
																										$1037 = HEAP32[$1036>>2]|0;
																										$1038 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 36|0);
																										$1039 = HEAP32[$1038>>2]|0;
																										$1040 = ($1037|0)==($1039|0);
																										if ($1040) {
																											$1044 = (((($zone_vector$idx26$val$i) + (($first$1$i$lcssa*40)|0)|0)) + 28|0);
																											__THREW__ = 0;
																											invoke_vii(70,($1044|0),($7|0));
																											$1045 = __THREW__; __THREW__ = 0;
																											$1046 = $1045&1;
																											if ($1046) {
																												label = 32;
																												break L416;
																											} else {
																												break L418;
																											}
																										} else {
																											$1041 = $932;
																											HEAP32[$1037>>2] = $1041;
																											$1042 = HEAP32[$1036>>2]|0;
																											$1043 = ((($1042)) + 4|0);
																											HEAP32[$1036>>2] = $1043;
																											break L418;
																										}
																									}
																								} while(0);
																								__THREW__ = 0;
																								invoke_vii(80,($8|0),($932|0));
																								$1047 = __THREW__; __THREW__ = 0;
																								$1048 = $1047&1;
																								if ($1048) {
																									label = 32;
																									break L416;
																								}
																								HEAP32[$892>>2] = 0;
																								HEAP32[$893>>2] = 0;
																								HEAP32[$894>>2] = 0;
																								$1049 = HEAP32[$528>>2]|0;
																								$1050 = HEAP32[$530>>2]|0;
																								$1051 = ($1049|0)==($1050|0);
																								do {
																									if ($1051) {
																										$1145 = $1049;
																										$1146 = HEAP32[$zone_vector>>2]|0;
																										$1147 = (($1145) - ($1146))|0;
																										$1148 = (($1147|0) / 40)&-1;
																										$1149 = (($1148) + 1)|0;
																										$1150 = ($1149>>>0)>(107374182);
																										if ($1150) {
																											__THREW__ = 0;
																											invoke_vi(46,($zone_vector|0));
																											$1151 = __THREW__; __THREW__ = 0;
																											$1152 = $1151&1;
																											if ($1152) {
																												label = 442;
																												break L416;
																											}
																											$$pre$i$i81$i = HEAP32[$zone_vector>>2]|0;
																											$$pre$i83$i = HEAP32[$530>>2]|0;
																											$1154 = $$pre$i$i81$i;$1155 = $$pre$i83$i;
																										} else {
																											$1154 = $1146;$1155 = $1145;
																										}
																										$1153 = (($1155) - ($1154))|0;
																										$1156 = (($1153|0) / 40)&-1;
																										$1157 = ($1156>>>0)<(53687091);
																										if ($1157) {
																											$1161 = $1156 << 1;
																											$1162 = ($1161>>>0)<($1149>>>0);
																											$1163 = $1162 ? $1149 : $1161;
																											$1164 = HEAP32[$528>>2]|0;
																											$1165 = (($1164) - ($1154))|0;
																											$1166 = (($1165|0) / 40)&-1;
																											$1167 = ($1163|0)==(0);
																											if ($1167) {
																												$$0$i18$i$i88$i = 0;$1173 = 0;$1174 = $1166;
																											} else {
																												$$0$i17$i$i87$i = $1163;$2234 = $1166;
																												label = 368;
																											}
																										} else {
																											$1158 = HEAP32[$528>>2]|0;
																											$1159 = (($1158) - ($1154))|0;
																											$1160 = (($1159|0) / 40)&-1;
																											$$0$i17$i$i87$i = 107374182;$2234 = $1160;
																											label = 368;
																										}
																										if ((label|0) == 368) {
																											label = 0;
																											$1168 = ($$0$i17$i$i87$i*40)|0;
																											__THREW__ = 0;
																											$1169 = (invoke_ii(29,($1168|0))|0);
																											$1170 = __THREW__; __THREW__ = 0;
																											$1171 = $1170&1;
																											if ($1171) {
																												label = 442;
																												break L416;
																											}
																											$$0$i18$i$i88$i = $$0$i17$i$i87$i;$1173 = $1169;$1174 = $2234;
																										}
																										$1172 = (($1173) + (($1174*40)|0)|0);
																										$1175 = $1172;
																										$1176 = (($1173) + (($$0$i18$i$i88$i*40)|0)|0);
																										$1177 = $1176;
																										;HEAP32[$1172>>2]=HEAP32[$8>>2]|0;HEAP32[$1172+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$1172+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$1172+12>>2]=HEAP32[$8+12>>2]|0;
																										$1178 = (((($1173) + (($1174*40)|0)|0)) + 16|0);
																										HEAP32[$1178>>2] = 0;
																										$1179 = (((($1173) + (($1174*40)|0)|0)) + 20|0);
																										HEAP32[$1179>>2] = 0;
																										$1180 = (((($1173) + (($1174*40)|0)|0)) + 24|0);
																										HEAP32[$1180>>2] = 0;
																										$1181 = HEAP32[$896>>2]|0;
																										$1182 = HEAP32[$895>>2]|0;
																										$1183 = (($1181) - ($1182))|0;
																										$1184 = $1183 >> 3;
																										$1185 = ($1184|0)==(0);
																										do {
																											if (!($1185)) {
																												$1186 = ($1184>>>0)>(536870911);
																												if ($1186) {
																													__THREW__ = 0;
																													invoke_vi(46,($1178|0));
																													$1187 = __THREW__; __THREW__ = 0;
																													$1188 = $1187&1;
																													if ($1188) {
																														$$lcssa768 = $1173;$$lcssa772 = $1175;$$lcssa776 = $1178;$$lcssa780 = $1179;
																														label = 377;
																														break L416;
																													}
																												}
																												__THREW__ = 0;
																												$1189 = (invoke_ii(29,($1183|0))|0);
																												$1190 = __THREW__; __THREW__ = 0;
																												$1191 = $1190&1;
																												if ($1191) {
																													$$lcssa768 = $1173;$$lcssa772 = $1175;$$lcssa776 = $1178;$$lcssa780 = $1179;
																													label = 377;
																													break L416;
																												}
																												HEAP32[$1179>>2] = $1189;
																												HEAP32[$1178>>2] = $1189;
																												$1192 = (($1189) + ($1184<<3)|0);
																												$1193 = (((($1173) + (($1174*40)|0)|0)) + 24|0);
																												HEAP32[$1193>>2] = $1192;
																												$1194 = HEAP32[$895>>2]|0;
																												$1195 = HEAP32[$896>>2]|0;
																												$1196 = ($1194|0)==($1195|0);
																												if ($1196) {
																													break;
																												}
																												$$01$i$i221$i = $1194;$1203 = $1189;
																												while(1) {
																													$1197 = $$01$i$i221$i;
																													$1198 = $1197;
																													$1199 = HEAP32[$1198>>2]|0;
																													$1200 = (($1197) + 4)|0;
																													$1201 = $1200;
																													$1202 = HEAP32[$1201>>2]|0;
																													$1204 = $1203;
																													$1205 = $1204;
																													HEAP32[$1205>>2] = $1199;
																													$1206 = (($1204) + 4)|0;
																													$1207 = $1206;
																													HEAP32[$1207>>2] = $1202;
																													$1208 = HEAP32[$1179>>2]|0;
																													$1209 = ((($1208)) + 8|0);
																													HEAP32[$1179>>2] = $1209;
																													$1210 = ((($$01$i$i221$i)) + 8|0);
																													$1211 = ($1210|0)==($1195|0);
																													if ($1211) {
																														break;
																													} else {
																														$$01$i$i221$i = $1210;$1203 = $1209;
																													}
																												}
																											}
																										} while(0);
																										$1223 = (((($1173) + (($1174*40)|0)|0)) + 28|0);
																										HEAP32[$1223>>2] = 0;
																										$1224 = (((($1173) + (($1174*40)|0)|0)) + 32|0);
																										HEAP32[$1224>>2] = 0;
																										$1225 = (((($1173) + (($1174*40)|0)|0)) + 36|0);
																										HEAP32[$1225>>2] = 0;
																										$1226 = HEAP32[$893>>2]|0;
																										$1227 = HEAP32[$897>>2]|0;
																										$1228 = (($1226) - ($1227))|0;
																										$1229 = $1228 >> 2;
																										$1230 = ($1229|0)==(0);
																										do {
																											if (!($1230)) {
																												$1231 = ($1229>>>0)>(1073741823);
																												if ($1231) {
																													__THREW__ = 0;
																													invoke_vi(46,($1223|0));
																													$1232 = __THREW__; __THREW__ = 0;
																													$1233 = $1232&1;
																													if ($1233) {
																														$$lcssa765 = $1174;$$lcssa769 = $1173;$$lcssa773 = $1175;$$lcssa781 = $1179;$$lcssa784 = $1223;$$lcssa787 = $1224;
																														label = 388;
																														break L416;
																													}
																												}
																												__THREW__ = 0;
																												$1234 = (invoke_ii(29,($1228|0))|0);
																												$1235 = __THREW__; __THREW__ = 0;
																												$1236 = $1235&1;
																												if ($1236) {
																													$$lcssa765 = $1174;$$lcssa769 = $1173;$$lcssa773 = $1175;$$lcssa781 = $1179;$$lcssa784 = $1223;$$lcssa787 = $1224;
																													label = 388;
																													break L416;
																												}
																												HEAP32[$1224>>2] = $1234;
																												HEAP32[$1223>>2] = $1234;
																												$1237 = (($1234) + ($1229<<2)|0);
																												$1238 = (((($1173) + (($1174*40)|0)|0)) + 36|0);
																												HEAP32[$1238>>2] = $1237;
																												$1239 = HEAP32[$897>>2]|0;
																												$1240 = HEAP32[$893>>2]|0;
																												$1241 = ($1239|0)==($1240|0);
																												if ($1241) {
																													break;
																												}
																												$$01$i$i171$i = $1239;$1243 = $1234;
																												while(1) {
																													$1242 = HEAP32[$$01$i$i171$i>>2]|0;
																													HEAP32[$1243>>2] = $1242;
																													$1244 = HEAP32[$1224>>2]|0;
																													$1245 = ((($1244)) + 4|0);
																													HEAP32[$1224>>2] = $1245;
																													$1246 = ((($$01$i$i171$i)) + 4|0);
																													$1247 = ($1246|0)==($1240|0);
																													if ($1247) {
																														break;
																													} else {
																														$$01$i$i171$i = $1246;$1243 = $1245;
																													}
																												}
																											}
																										} while(0);
																										$1269 = ((($1172)) + 40|0);
																										$1270 = $1269;
																										$1271 = HEAP32[$zone_vector>>2]|0;
																										$1272 = HEAP32[$528>>2]|0;
																										$1273 = ($1272|0)==($1271|0);
																										if ($1273) {
																											$1274 = $1271;
																											$1303 = $1175;$1304 = $1274;$1306 = $1271;
																										} else {
																											$$01$i$i$i$i98$i = $1272;$1276 = $1172;$__v$sroa$6$0$i$i97$i = $1175;
																											while(1) {
																												$1275 = ((($1276)) + -40|0);
																												$1277 = ((($$01$i$i$i$i98$i)) + -40|0);
																												;HEAP32[$1275>>2]=HEAP32[$1277>>2]|0;HEAP32[$1275+4>>2]=HEAP32[$1277+4>>2]|0;HEAP32[$1275+8>>2]=HEAP32[$1277+8>>2]|0;HEAP32[$1275+12>>2]=HEAP32[$1277+12>>2]|0;
																												$1278 = ((($1276)) + -24|0);
																												$1279 = ((($$01$i$i$i$i98$i)) + -24|0);
																												__THREW__ = 0;
																												invoke_vii(81,($1278|0),($1279|0));
																												$1280 = __THREW__; __THREW__ = 0;
																												$1281 = $1280&1;
																												if ($1281) {
																													$$lcssa770 = $1173;$$lcssa790 = $1270;$__v$sroa$6$0$i$i97$i$lcssa = $__v$sroa$6$0$i$i97$i;
																													label = 418;
																													break L416;
																												}
																												$1282 = ((($1276)) + -12|0);
																												$1283 = ((($$01$i$i$i$i98$i)) + -12|0);
																												__THREW__ = 0;
																												invoke_vii(82,($1282|0),($1283|0));
																												$1284 = __THREW__; __THREW__ = 0;
																												$1285 = $1284&1;
																												if ($1285) {
																													$$lcssa736 = $1276;$$lcssa771 = $1173;$$lcssa791 = $1270;$__v$sroa$6$0$i$i97$i$lcssa733 = $__v$sroa$6$0$i$i97$i;
																													label = 400;
																													break L416;
																												}
																												$1299 = $__v$sroa$6$0$i$i97$i;
																												$1300 = ((($1299)) + -40|0);
																												$1301 = $1300;
																												$1302 = ($1277|0)==($1271|0);
																												if ($1302) {
																													$$lcssa738 = $1301;
																													break;
																												} else {
																													$$01$i$i$i$i98$i = $1277;$1276 = $1300;$__v$sroa$6$0$i$i97$i = $1301;
																												}
																											}
																											$$pre$i$i$i106$i = HEAP32[$zone_vector>>2]|0;
																											$$pre27$i$i107$i = HEAP32[$528>>2]|0;
																											$1303 = $$lcssa738;$1304 = $$pre$i$i$i106$i;$1306 = $$pre27$i$i107$i;
																										}
																										HEAP32[$zone_vector>>2] = $1303;
																										HEAP32[$528>>2] = $1270;
																										HEAP32[$530>>2] = $1177;
																										$1305 = $1304;
																										$1307 = ($1306|0)==($1305|0);
																										if (!($1307)) {
																											$1309 = $1306;
																											while(1) {
																												$1308 = ((($1309)) + -40|0);
																												$1310 = ((($1309)) + -12|0);
																												$1311 = HEAP32[$1310>>2]|0;
																												$1312 = ($1311|0)==(0|0);
																												$1313 = $1311;
																												if (!($1312)) {
																													$1314 = ((($1309)) + -8|0);
																													$1315 = HEAP32[$1314>>2]|0;
																													$1316 = ($1315|0)==($1311|0);
																													if (!($1316)) {
																														$scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i = ((($1315)) + -4|0);
																														$1317 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i110$i;
																														$1318 = (($1317) - ($1313))|0;
																														$1319 = $1318 >>> 2;
																														$1320 = $1319 ^ -1;
																														$scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i = (($1315) + ($1320<<2)|0);
																														HEAP32[$1314>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i111$i;
																													}
																													__ZdlPv($1311);
																												}
																												$1321 = ((($1309)) + -24|0);
																												$1322 = HEAP32[$1321>>2]|0;
																												$1323 = ($1322|0)==(0|0);
																												$1324 = $1322;
																												if (!($1323)) {
																													$1326 = ((($1309)) + -20|0);
																													$1327 = HEAP32[$1326>>2]|0;
																													$1328 = ($1327|0)==($1322|0);
																													if (!($1328)) {
																														$scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i = ((($1327)) + -8|0);
																														$1329 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i116$i;
																														$1330 = (($1329) - ($1324))|0;
																														$1331 = $1330 >>> 3;
																														$1332 = $1331 ^ -1;
																														$scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i = (($1327) + ($1332<<3)|0);
																														HEAP32[$1326>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i117$i;
																													}
																													__ZdlPv($1322);
																												}
																												$1325 = ($1308|0)==($1305|0);
																												if ($1325) {
																													break;
																												} else {
																													$1309 = $1308;
																												}
																											}
																										}
																										$1333 = ($1304|0)==(0);
																										if ($1333) {
																											break;
																										}
																										$1334 = $1304;
																										__ZdlPv($1334);
																									} else {
																										;HEAP32[$1049>>2]=HEAP32[$8>>2]|0;HEAP32[$1049+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$1049+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$1049+12>>2]=HEAP32[$8+12>>2]|0;
																										$1052 = ((($1049)) + 16|0);
																										HEAP32[$1052>>2] = 0;
																										$1053 = ((($1049)) + 20|0);
																										HEAP32[$1053>>2] = 0;
																										$1054 = ((($1049)) + 24|0);
																										HEAP32[$1054>>2] = 0;
																										$1055 = HEAP32[$896>>2]|0;
																										$1056 = HEAP32[$895>>2]|0;
																										$1057 = (($1055) - ($1056))|0;
																										$1058 = $1057 >> 3;
																										$1059 = ($1058|0)==(0);
																										do {
																											if (!($1059)) {
																												$1060 = ($1058>>>0)>(536870911);
																												if ($1060) {
																													__THREW__ = 0;
																													invoke_vi(46,($1052|0));
																													$1061 = __THREW__; __THREW__ = 0;
																													$1062 = $1061&1;
																													if ($1062) {
																														$$lcssa758 = $1052;$$lcssa760 = $1053;
																														label = 342;
																														break L416;
																													}
																												}
																												__THREW__ = 0;
																												$1063 = (invoke_ii(29,($1057|0))|0);
																												$1064 = __THREW__; __THREW__ = 0;
																												$1065 = $1064&1;
																												if ($1065) {
																													$$lcssa758 = $1052;$$lcssa760 = $1053;
																													label = 342;
																													break L416;
																												}
																												HEAP32[$1053>>2] = $1063;
																												HEAP32[$1052>>2] = $1063;
																												$1066 = (($1063) + ($1058<<3)|0);
																												$1067 = ((($1049)) + 24|0);
																												HEAP32[$1067>>2] = $1066;
																												$1068 = HEAP32[$895>>2]|0;
																												$1069 = HEAP32[$896>>2]|0;
																												$1070 = ($1068|0)==($1069|0);
																												if ($1070) {
																													break;
																												}
																												$$01$i$i193$i = $1068;$1077 = $1063;
																												while(1) {
																													$1071 = $$01$i$i193$i;
																													$1072 = $1071;
																													$1073 = HEAP32[$1072>>2]|0;
																													$1074 = (($1071) + 4)|0;
																													$1075 = $1074;
																													$1076 = HEAP32[$1075>>2]|0;
																													$1078 = $1077;
																													$1079 = $1078;
																													HEAP32[$1079>>2] = $1073;
																													$1080 = (($1078) + 4)|0;
																													$1081 = $1080;
																													HEAP32[$1081>>2] = $1076;
																													$1082 = HEAP32[$1053>>2]|0;
																													$1083 = ((($1082)) + 8|0);
																													HEAP32[$1053>>2] = $1083;
																													$1084 = ((($$01$i$i193$i)) + 8|0);
																													$1085 = ($1084|0)==($1069|0);
																													if ($1085) {
																														break;
																													} else {
																														$$01$i$i193$i = $1084;$1077 = $1083;
																													}
																												}
																											}
																										} while(0);
																										$1097 = ((($1049)) + 28|0);
																										HEAP32[$1097>>2] = 0;
																										$1098 = ((($1049)) + 32|0);
																										HEAP32[$1098>>2] = 0;
																										$1099 = ((($1049)) + 36|0);
																										HEAP32[$1099>>2] = 0;
																										$1100 = HEAP32[$893>>2]|0;
																										$1101 = HEAP32[$897>>2]|0;
																										$1102 = (($1100) - ($1101))|0;
																										$1103 = $1102 >> 2;
																										$1104 = ($1103|0)==(0);
																										do {
																											if (!($1104)) {
																												$1105 = ($1103>>>0)>(1073741823);
																												if ($1105) {
																													__THREW__ = 0;
																													invoke_vi(46,($1097|0));
																													$1106 = __THREW__; __THREW__ = 0;
																													$1107 = $1106&1;
																													if ($1107) {
																														$$lcssa752 = $1049;$$lcssa761 = $1053;$$lcssa762 = $1097;$$lcssa763 = $1098;
																														label = 353;
																														break L416;
																													}
																												}
																												__THREW__ = 0;
																												$1108 = (invoke_ii(29,($1102|0))|0);
																												$1109 = __THREW__; __THREW__ = 0;
																												$1110 = $1109&1;
																												if ($1110) {
																													$$lcssa752 = $1049;$$lcssa761 = $1053;$$lcssa762 = $1097;$$lcssa763 = $1098;
																													label = 353;
																													break L416;
																												}
																												HEAP32[$1098>>2] = $1108;
																												HEAP32[$1097>>2] = $1108;
																												$1111 = (($1108) + ($1103<<2)|0);
																												$1112 = ((($1049)) + 36|0);
																												HEAP32[$1112>>2] = $1111;
																												$1113 = HEAP32[$897>>2]|0;
																												$1114 = HEAP32[$893>>2]|0;
																												$1115 = ($1113|0)==($1114|0);
																												if ($1115) {
																													break;
																												}
																												$$01$i$i201$i = $1113;$1117 = $1108;
																												while(1) {
																													$1116 = HEAP32[$$01$i$i201$i>>2]|0;
																													HEAP32[$1117>>2] = $1116;
																													$1118 = HEAP32[$1098>>2]|0;
																													$1119 = ((($1118)) + 4|0);
																													HEAP32[$1098>>2] = $1119;
																													$1120 = ((($$01$i$i201$i)) + 4|0);
																													$1121 = ($1120|0)==($1114|0);
																													if ($1121) {
																														break;
																													} else {
																														$$01$i$i201$i = $1120;$1117 = $1119;
																													}
																												}
																											}
																										} while(0);
																										$1143 = HEAP32[$528>>2]|0;
																										$1144 = ((($1143)) + 40|0);
																										HEAP32[$528>>2] = $1144;
																									}
																								} while(0);
																								$1367 = HEAP32[$892>>2]|0;
																								$1368 = ($1367|0)==(0|0);
																								$1369 = $1367;
																								if (!($1368)) {
																									$1370 = HEAP32[$893>>2]|0;
																									$1371 = ($1370|0)==($1367|0);
																									if (!($1371)) {
																										$scevgep$i$i$i$i148$i = ((($1370)) + -4|0);
																										$1372 = $scevgep$i$i$i$i148$i;
																										$1373 = (($1372) - ($1369))|0;
																										$1374 = $1373 >>> 2;
																										$1375 = $1374 ^ -1;
																										$scevgep4$i$i$i$i149$i = (($1370) + ($1375<<2)|0);
																										HEAP32[$893>>2] = $scevgep4$i$i$i$i149$i;
																									}
																									__ZdlPv($1367);
																								}
																								$1376 = HEAP32[$898>>2]|0;
																								$1377 = ($1376|0)==(0|0);
																								$1378 = $1376;
																								if (!($1377)) {
																									$1379 = HEAP32[$896>>2]|0;
																									$1380 = ($1379|0)==($1376|0);
																									if (!($1380)) {
																										$scevgep$i$i$i$i$i153$i = ((($1379)) + -8|0);
																										$1381 = $scevgep$i$i$i$i$i153$i;
																										$1382 = (($1381) - ($1378))|0;
																										$1383 = $1382 >>> 3;
																										$1384 = $1383 ^ -1;
																										$scevgep4$i$i$i$i$i154$i = (($1379) + ($1384<<3)|0);
																										HEAP32[$896>>2] = $scevgep4$i$i$i$i$i154$i;
																									}
																									__ZdlPv($1376);
																								}
																								$zone_vector$idx$val$i140 = HEAP32[$528>>2]|0;
																								HEAP32[$9>>2] = $932;
																								$1385 = ((($zone_vector$idx$val$i140)) + -8|0);
																								$1386 = HEAP32[$1385>>2]|0;
																								$1387 = ((($zone_vector$idx$val$i140)) + -4|0);
																								$1388 = HEAP32[$1387>>2]|0;
																								$1389 = ($1386|0)==($1388|0);
																								if ($1389) {
																									$1393 = ((($zone_vector$idx$val$i140)) + -12|0);
																									__THREW__ = 0;
																									invoke_vii(70,($1393|0),($9|0));
																									$1394 = __THREW__; __THREW__ = 0;
																									$1395 = $1394&1;
																									if ($1395) {
																										label = 32;
																										break L416;
																									} else {
																										break;
																									}
																								} else {
																									$1390 = $932;
																									HEAP32[$1386>>2] = $1390;
																									$1391 = HEAP32[$1385>>2]|0;
																									$1392 = ((($1391)) + 4|0);
																									HEAP32[$1385>>2] = $1392;
																									break;
																								}
																							}
																						} while(0);
																						$1416 = (($i$0454$i) + 1)|0;
																						$1417 = HEAP32[$15>>2]|0;
																						$1418 = HEAP32[$blobp_vector>>2]|0;
																						$1419 = (($1417) - ($1418))|0;
																						$1420 = $1419 >> 2;
																						$1421 = ($1416>>>0)<($1420>>>0);
																						$$cast$i141 = $1418;
																						if ($1421) {
																							$$cast455$i = $$cast$i141;$i$0454$i = $1416;
																						} else {
																							$$cast$lcssa$i = $$cast$i141;$$in$i131 = $1417;$$lcssa326$i = $1418;
																							break L414;
																						}
																					}
																					switch (label|0) {
																						case 30: {
																							$97 = ___cxa_find_matching_catch_2()|0;
																							$98 = tempRet0;
																							$eh$lpad$body74$index14Z2D = $98;$eh$lpad$body74$indexZ2D = $97;
																							label = 38;
																							break L115;
																							break;
																						}
																						case 31: {
																							$99 = ___cxa_find_matching_catch_2()|0;
																							$100 = tempRet0;
																							$eh$lpad$body74$index14Z2D = $100;$eh$lpad$body74$indexZ2D = $99;
																							label = 38;
																							break L115;
																							break;
																						}
																						case 32: {
																							$101 = ___cxa_find_matching_catch_2()|0;
																							$102 = tempRet0;
																							$eh$lpad$body74$index14Z2D = $102;$eh$lpad$body74$indexZ2D = $101;
																							label = 38;
																							break L115;
																							break;
																						}
																						case 303: {
																							$947 = ___cxa_find_matching_catch_2()|0;
																							$948 = tempRet0;
																							__ZdlPv($$lcssa749);
																							$$03$i = $947;$$04$i = $948;
																							break L385;
																							break;
																						}
																						case 342: {
																							$1086 = ___cxa_find_matching_catch_2()|0;
																							$1087 = tempRet0;
																							$1088 = HEAP32[$$lcssa758>>2]|0;
																							$1089 = ($1088|0)==(0|0);
																							$1090 = $1088;
																							if ($1089) {
																								$eh$lpad$body144$i$index81Z2D = $1087;$eh$lpad$body144$i$indexZ2D = $1086;
																								break;
																							}
																							$1091 = HEAP32[$$lcssa760>>2]|0;
																							$1092 = ($1091|0)==($1088|0);
																							if (!($1092)) {
																								$scevgep$i$i$i$i194$i = ((($1091)) + -8|0);
																								$1093 = $scevgep$i$i$i$i194$i;
																								$1094 = (($1093) - ($1090))|0;
																								$1095 = $1094 >>> 3;
																								$1096 = $1095 ^ -1;
																								$scevgep4$i$i$i$i195$i = (($1091) + ($1096<<3)|0);
																								HEAP32[$$lcssa760>>2] = $scevgep4$i$i$i$i195$i;
																							}
																							__ZdlPv($1088);
																							$eh$lpad$body144$i$index81Z2D = $1087;$eh$lpad$body144$i$indexZ2D = $1086;
																							break;
																						}
																						case 353: {
																							$1122 = ___cxa_find_matching_catch_2()|0;
																							$1123 = tempRet0;
																							$1124 = HEAP32[$$lcssa762>>2]|0;
																							$1125 = ($1124|0)==(0|0);
																							$1126 = $1124;
																							if (!($1125)) {
																								$1127 = HEAP32[$$lcssa763>>2]|0;
																								$1128 = ($1127|0)==($1124|0);
																								if (!($1128)) {
																									$scevgep$i$i$i$i202$i = ((($1127)) + -4|0);
																									$1129 = $scevgep$i$i$i$i202$i;
																									$1130 = (($1129) - ($1126))|0;
																									$1131 = $1130 >>> 2;
																									$1132 = $1131 ^ -1;
																									$scevgep4$i$i$i$i203$i = (($1127) + ($1132<<2)|0);
																									HEAP32[$$lcssa763>>2] = $scevgep4$i$i$i$i203$i;
																								}
																								__ZdlPv($1124);
																							}
																							$1133 = ((($$lcssa752)) + 16|0);
																							$1134 = HEAP32[$1133>>2]|0;
																							$1135 = ($1134|0)==(0|0);
																							$1136 = $1134;
																							if ($1135) {
																								$eh$lpad$body144$i$index81Z2D = $1123;$eh$lpad$body144$i$indexZ2D = $1122;
																								break;
																							}
																							$1137 = HEAP32[$$lcssa761>>2]|0;
																							$1138 = ($1137|0)==($1134|0);
																							if (!($1138)) {
																								$scevgep$i$i$i$i$i$i$i73$i = ((($1137)) + -8|0);
																								$1139 = $scevgep$i$i$i$i$i$i$i73$i;
																								$1140 = (($1139) - ($1136))|0;
																								$1141 = $1140 >>> 3;
																								$1142 = $1141 ^ -1;
																								$scevgep4$i$i$i$i$i$i$i74$i = (($1137) + ($1142<<3)|0);
																								HEAP32[$$lcssa761>>2] = $scevgep4$i$i$i$i$i$i$i74$i;
																							}
																							__ZdlPv($1134);
																							$eh$lpad$body144$i$index81Z2D = $1123;$eh$lpad$body144$i$indexZ2D = $1122;
																							break;
																						}
																						case 377: {
																							$1212 = ___cxa_find_matching_catch_2()|0;
																							$1213 = tempRet0;
																							$1214 = HEAP32[$$lcssa776>>2]|0;
																							$1215 = ($1214|0)==(0|0);
																							$1216 = $1214;
																							if ($1215) {
																								$1365 = $$lcssa768;$__v$sroa$15$2$i$i126$i = $$lcssa772;$__v$sroa$6$3$i$i125$i = $$lcssa772;$eh$lpad$body$i$i127$i$index66Z2D = $1213;$eh$lpad$body$i$i127$i$indexZ2D = $1212;
																								label = 419;
																								break;
																							}
																							$1217 = HEAP32[$$lcssa780>>2]|0;
																							$1218 = ($1217|0)==($1214|0);
																							if (!($1218)) {
																								$scevgep$i$i$i$i222$i = ((($1217)) + -8|0);
																								$1219 = $scevgep$i$i$i$i222$i;
																								$1220 = (($1219) - ($1216))|0;
																								$1221 = $1220 >>> 3;
																								$1222 = $1221 ^ -1;
																								$scevgep4$i$i$i$i223$i = (($1217) + ($1222<<3)|0);
																								HEAP32[$$lcssa780>>2] = $scevgep4$i$i$i$i223$i;
																							}
																							__ZdlPv($1214);
																							$1365 = $$lcssa768;$__v$sroa$15$2$i$i126$i = $$lcssa772;$__v$sroa$6$3$i$i125$i = $$lcssa772;$eh$lpad$body$i$i127$i$index66Z2D = $1213;$eh$lpad$body$i$i127$i$indexZ2D = $1212;
																							label = 419;
																							break;
																						}
																						case 388: {
																							$1248 = ___cxa_find_matching_catch_2()|0;
																							$1249 = tempRet0;
																							$1250 = HEAP32[$$lcssa784>>2]|0;
																							$1251 = ($1250|0)==(0|0);
																							$1252 = $1250;
																							if (!($1251)) {
																								$1253 = HEAP32[$$lcssa787>>2]|0;
																								$1254 = ($1253|0)==($1250|0);
																								if (!($1254)) {
																									$scevgep$i$i$i$i172$i = ((($1253)) + -4|0);
																									$1255 = $scevgep$i$i$i$i172$i;
																									$1256 = (($1255) - ($1252))|0;
																									$1257 = $1256 >>> 2;
																									$1258 = $1257 ^ -1;
																									$scevgep4$i$i$i$i173$i = (($1253) + ($1258<<2)|0);
																									HEAP32[$$lcssa787>>2] = $scevgep4$i$i$i$i173$i;
																								}
																								__ZdlPv($1250);
																							}
																							$1259 = (((($$lcssa769) + (($$lcssa765*40)|0)|0)) + 16|0);
																							$1260 = HEAP32[$1259>>2]|0;
																							$1261 = ($1260|0)==(0|0);
																							$1262 = $1260;
																							if ($1261) {
																								$1365 = $$lcssa769;$__v$sroa$15$2$i$i126$i = $$lcssa773;$__v$sroa$6$3$i$i125$i = $$lcssa773;$eh$lpad$body$i$i127$i$index66Z2D = $1249;$eh$lpad$body$i$i127$i$indexZ2D = $1248;
																								label = 419;
																								break;
																							}
																							$1263 = HEAP32[$$lcssa781>>2]|0;
																							$1264 = ($1263|0)==($1260|0);
																							if (!($1264)) {
																								$scevgep$i$i$i$i$i$i$i$i91$i = ((($1263)) + -8|0);
																								$1265 = $scevgep$i$i$i$i$i$i$i$i91$i;
																								$1266 = (($1265) - ($1262))|0;
																								$1267 = $1266 >>> 3;
																								$1268 = $1267 ^ -1;
																								$scevgep4$i$i$i$i$i$i$i$i92$i = (($1263) + ($1268<<3)|0);
																								HEAP32[$$lcssa781>>2] = $scevgep4$i$i$i$i$i$i$i$i92$i;
																							}
																							__ZdlPv($1260);
																							$1365 = $$lcssa769;$__v$sroa$15$2$i$i126$i = $$lcssa773;$__v$sroa$6$3$i$i125$i = $$lcssa773;$eh$lpad$body$i$i127$i$index66Z2D = $1249;$eh$lpad$body$i$i127$i$indexZ2D = $1248;
																							label = 419;
																							break;
																						}
																						case 400: {
																							$1286 = ___cxa_find_matching_catch_2()|0;
																							$1287 = tempRet0;
																							$1288 = ((($$lcssa736)) + -24|0);
																							$1289 = HEAP32[$1288>>2]|0;
																							$1290 = ($1289|0)==(0|0);
																							$1291 = $1289;
																							if ($1290) {
																								$1365 = $$lcssa771;$__v$sroa$15$2$i$i126$i = $$lcssa791;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa733;$eh$lpad$body$i$i127$i$index66Z2D = $1287;$eh$lpad$body$i$i127$i$indexZ2D = $1286;
																								label = 419;
																								break;
																							}
																							$1292 = ((($$lcssa736)) + -20|0);
																							$1293 = HEAP32[$1292>>2]|0;
																							$1294 = ($1293|0)==($1289|0);
																							if (!($1294)) {
																								$scevgep$i$i$i$i$i$i$i$i$i$i101$i = ((($1293)) + -8|0);
																								$1295 = $scevgep$i$i$i$i$i$i$i$i$i$i101$i;
																								$1296 = (($1295) - ($1291))|0;
																								$1297 = $1296 >>> 3;
																								$1298 = $1297 ^ -1;
																								$scevgep4$i$i$i$i$i$i$i$i$i$i102$i = (($1293) + ($1298<<3)|0);
																								HEAP32[$1292>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i102$i;
																							}
																							__ZdlPv($1289);
																							$1365 = $$lcssa771;$__v$sroa$15$2$i$i126$i = $$lcssa791;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa733;$eh$lpad$body$i$i127$i$index66Z2D = $1287;$eh$lpad$body$i$i127$i$indexZ2D = $1286;
																							label = 419;
																							break;
																						}
																						case 418: {
																							$1335 = ___cxa_find_matching_catch_2()|0;
																							$1336 = tempRet0;
																							$1365 = $$lcssa770;$__v$sroa$15$2$i$i126$i = $$lcssa790;$__v$sroa$6$3$i$i125$i = $__v$sroa$6$0$i$i97$i$lcssa;$eh$lpad$body$i$i127$i$index66Z2D = $1336;$eh$lpad$body$i$i127$i$indexZ2D = $1335;
																							label = 419;
																							break;
																						}
																						case 442: {
																							$1396 = ___cxa_find_matching_catch_2()|0;
																							$1397 = tempRet0;
																							$eh$lpad$body144$i$index81Z2D = $1397;$eh$lpad$body144$i$indexZ2D = $1396;
																							break;
																						}
																					}
																					do {
																						if ((label|0) == 419) {
																							$1337 = $__v$sroa$6$3$i$i125$i;
																							$1338 = $__v$sroa$15$2$i$i126$i;
																							$1339 = ($1338|0)==($1337|0);
																							if (!($1339)) {
																								$1341 = $1338;
																								while(1) {
																									$1340 = ((($1341)) + -40|0);
																									$1342 = ((($1341)) + -12|0);
																									$1343 = HEAP32[$1342>>2]|0;
																									$1344 = ($1343|0)==(0|0);
																									$1345 = $1343;
																									if (!($1344)) {
																										$1346 = ((($1341)) + -8|0);
																										$1347 = HEAP32[$1346>>2]|0;
																										$1348 = ($1347|0)==($1343|0);
																										if (!($1348)) {
																											$scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i = ((($1347)) + -4|0);
																											$1349 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i130$i;
																											$1350 = (($1349) - ($1345))|0;
																											$1351 = $1350 >>> 2;
																											$1352 = $1351 ^ -1;
																											$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i = (($1347) + ($1352<<2)|0);
																											HEAP32[$1346>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i131$i;
																										}
																										__ZdlPv($1343);
																									}
																									$1353 = ((($1341)) + -24|0);
																									$1354 = HEAP32[$1353>>2]|0;
																									$1355 = ($1354|0)==(0|0);
																									$1356 = $1354;
																									if (!($1355)) {
																										$1358 = ((($1341)) + -20|0);
																										$1359 = HEAP32[$1358>>2]|0;
																										$1360 = ($1359|0)==($1354|0);
																										if (!($1360)) {
																											$scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i = ((($1359)) + -8|0);
																											$1361 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i136$i;
																											$1362 = (($1361) - ($1356))|0;
																											$1363 = $1362 >>> 3;
																											$1364 = $1363 ^ -1;
																											$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i = (($1359) + ($1364<<3)|0);
																											HEAP32[$1358>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i137$i;
																										}
																										__ZdlPv($1354);
																									}
																									$1357 = ($1340|0)==($1337|0);
																									if ($1357) {
																										break;
																									} else {
																										$1341 = $1340;
																									}
																								}
																							}
																							$1366 = ($1365|0)==(0|0);
																							if ($1366) {
																								$eh$lpad$body144$i$index81Z2D = $eh$lpad$body$i$i127$i$index66Z2D;$eh$lpad$body144$i$indexZ2D = $eh$lpad$body$i$i127$i$indexZ2D;
																								break;
																							}
																							__ZdlPv($1365);
																							$eh$lpad$body144$i$index81Z2D = $eh$lpad$body$i$i127$i$index66Z2D;$eh$lpad$body144$i$indexZ2D = $eh$lpad$body$i$i127$i$indexZ2D;
																						}
																					} while(0);
																					$1398 = HEAP32[$892>>2]|0;
																					$1399 = ($1398|0)==(0|0);
																					$1400 = $1398;
																					if (!($1399)) {
																						$1401 = HEAP32[$893>>2]|0;
																						$1402 = ($1401|0)==($1398|0);
																						if (!($1402)) {
																							$scevgep$i$i$i$i159$i = ((($1401)) + -4|0);
																							$1403 = $scevgep$i$i$i$i159$i;
																							$1404 = (($1403) - ($1400))|0;
																							$1405 = $1404 >>> 2;
																							$1406 = $1405 ^ -1;
																							$scevgep4$i$i$i$i160$i = (($1401) + ($1406<<2)|0);
																							HEAP32[$893>>2] = $scevgep4$i$i$i$i160$i;
																						}
																						__ZdlPv($1398);
																					}
																					$1407 = HEAP32[$898>>2]|0;
																					$1408 = ($1407|0)==(0|0);
																					$1409 = $1407;
																					if ($1408) {
																						$$03$i = $eh$lpad$body144$i$indexZ2D;$$04$i = $eh$lpad$body144$i$index81Z2D;
																						break L385;
																					}
																					$1410 = HEAP32[$896>>2]|0;
																					$1411 = ($1410|0)==($1407|0);
																					if (!($1411)) {
																						$scevgep$i$i$i$i$i164$i = ((($1410)) + -8|0);
																						$1412 = $scevgep$i$i$i$i$i164$i;
																						$1413 = (($1412) - ($1409))|0;
																						$1414 = $1413 >>> 3;
																						$1415 = $1414 ^ -1;
																						$scevgep4$i$i$i$i$i165$i = (($1410) + ($1415<<3)|0);
																						HEAP32[$896>>2] = $scevgep4$i$i$i$i$i165$i;
																					}
																					__ZdlPv($1407);
																					$$03$i = $eh$lpad$body144$i$indexZ2D;$$04$i = $eh$lpad$body144$i$index81Z2D;
																					break L385;
																				} else {
																					$$cast$lcssa$i = $$cast453$i;$$in$i131 = $886;$$lcssa326$i = $887;
																				}
																			} while(0);
																			$900 = $$in$i131;
																			$901 = ($900|0)==($$cast$lcssa$i|0);
																			if (!($901)) {
																				$scevgep$i$i$i$i132 = ((($900)) + -4|0);
																				$902 = $scevgep$i$i$i$i132;
																				$903 = (($902) - ($$lcssa326$i))|0;
																				$904 = $903 >>> 2;
																				$905 = $904 ^ -1;
																				$scevgep4$i$i$i$i133 = (($900) + ($905<<2)|0);
																				HEAP32[$15>>2] = $scevgep4$i$i$i$i133;
																			}
																			$zone_vector$idx8$val$i = HEAP32[$zone_vector>>2]|0;
																			$zone_vector$idx9$val$i = HEAP32[$528>>2]|0;
																			$906 = ($zone_vector$idx8$val$i|0)==($zone_vector$idx9$val$i|0);
																			$907 = $zone_vector$idx9$val$i;
																			$908 = $zone_vector$idx8$val$i;
																			if ($906) {
																				$2232 = 0;
																			} else {
																				$1422 = ((($zone_vector$idx8$val$i)) + 12|0);
																				$1423 = HEAP32[$1422>>2]|0;
																				$2232 = $1423;
																			}
																			HEAP32[$cut_index_vector$i>>2] = 0;
																			$1424 = ((($cut_index_vector$i)) + 4|0);
																			HEAP32[$1424>>2] = 0;
																			$1425 = ((($cut_index_vector$i)) + 8|0);
																			HEAP32[$1425>>2] = 0;
																			$1426 = (($907) - ($908))|0;
																			$1427 = (($1426|0) / 40)&-1;
																			$1428 = ($1427>>>0)>(1);
																			do {
																				if ($1428) {
																					$1429 = ((($cut_index_vector$i)) + 8|0);
																					$2235 = $908;$2236 = $907;$botmax$0440$i = $2232;$i1$0441$i = 1;$zone_vector$idx10$val537$i = $zone_vector$idx8$val$i;
																					L647: while(1) {
																						$1445 = (((($zone_vector$idx10$val537$i) + (($i1$0441$i*40)|0)|0)) + 4|0);
																						$1446 = HEAP32[$1445>>2]|0;
																						$1447 = ($1446|0)>($botmax$0440$i|0);
																						do {
																							if ($1447) {
																								HEAP32[$10>>2] = $i1$0441$i;
																								$1448 = HEAP32[$1424>>2]|0;
																								$1449 = HEAP32[$1429>>2]|0;
																								$1450 = ($1448|0)==($1449|0);
																								if (!($1450)) {
																									HEAP32[$1448>>2] = $i1$0441$i;
																									$1451 = ((($1448)) + 4|0);
																									HEAP32[$1424>>2] = $1451;
																									$1486 = $2235;$1487 = $2236;$zone_vector$idx10$val$i = $zone_vector$idx10$val537$i;
																									break;
																								}
																								__THREW__ = 0;
																								invoke_vii(48,($cut_index_vector$i|0),($10|0));
																								$1452 = __THREW__; __THREW__ = 0;
																								$1453 = $1452&1;
																								if ($1453) {
																									label = 473;
																									break L647;
																								}
																								$zone_vector$idx10$val$pre$i = HEAP32[$zone_vector>>2]|0;
																								$$pre$i143 = HEAP32[$528>>2]|0;
																								$1454 = $zone_vector$idx10$val$pre$i;
																								$1486 = $1454;$1487 = $$pre$i143;$zone_vector$idx10$val$i = $zone_vector$idx10$val$pre$i;
																							} else {
																								$1486 = $2235;$1487 = $2236;$zone_vector$idx10$val$i = $zone_vector$idx10$val537$i;
																							}
																						} while(0);
																						$1480 = (((($zone_vector$idx10$val$i) + (($i1$0441$i*40)|0)|0)) + 12|0);
																						$1481 = HEAP32[$1480>>2]|0;
																						$1482 = ($botmax$0440$i|0)<($1481|0);
																						$1483 = $1482 ? $1481 : $botmax$0440$i;
																						$1484 = (($i1$0441$i) + 1)|0;
																						$1485 = (($1487) - ($1486))|0;
																						$1488 = (($1485|0) / 40)&-1;
																						$1489 = ($1484>>>0)<($1488>>>0);
																						$1490 = $1486;
																						if ($1489) {
																							$2235 = $1486;$2236 = $1487;$botmax$0440$i = $1483;$i1$0441$i = $1484;$zone_vector$idx10$val537$i = $1490;
																						} else {
																							$$lcssa730 = $1488;
																							break;
																						}
																					}
																					if ((label|0) == 473) {
																						$1467 = ___cxa_find_matching_catch_2()|0;
																						$1468 = tempRet0;
																						$eh$lpad$body218$i$index101Z2D = $1468;$eh$lpad$body218$i$indexZ2D = $1467;
																						break;
																					}
																					$$pre539$i = HEAP32[$1424>>2]|0;
																					$$pre540$i = HEAP32[$1429>>2]|0;
																					HEAP32[$11>>2] = $$lcssa730;
																					$1430 = ($$pre539$i|0)==($$pre540$i|0);
																					if ($1430) {
																						label = 460;
																						break;
																					}
																					HEAP32[$$pre539$i>>2] = $$lcssa730;
																					$1431 = ((($$pre539$i)) + 4|0);
																					HEAP32[$1424>>2] = $1431;
																					$1432 = $1431;
																					$$pre$phi$i142Z2D = $1424;$1434 = $1432;$2237 = $1431;
																					label = 458;
																				} else {
																					HEAP32[$11>>2] = $1427;
																					label = 460;
																				}
																			} while(0);
																			do {
																				if ((label|0) == 460) {
																					__THREW__ = 0;
																					invoke_vii(48,($cut_index_vector$i|0),($11|0));
																					$1442 = __THREW__; __THREW__ = 0;
																					$1443 = $1442&1;
																					if ($1443) {
																						$1469 = ___cxa_find_matching_catch_2()|0;
																						$1470 = tempRet0;
																						$eh$lpad$body218$i$index101Z2D = $1470;$eh$lpad$body218$i$indexZ2D = $1469;
																						break;
																					} else {
																						$$pre542$i = HEAP32[$1424>>2]|0;
																						$1444 = $$pre542$i;
																						$$pre$phi$i142Z2D = $1424;$1434 = $$pre542$i;$2237 = $1444;
																						label = 458;
																						break;
																					}
																				}
																			} while(0);
																			L666: do {
																				if ((label|0) == 458) {
																					$1433 = HEAP32[$cut_index_vector$i>>2]|0;
																					$1435 = ($1434|0)==($1433|0);
																					$1436 = $1433;
																					do {
																						if ($1435) {
																							$1492 = $1436;$1495 = $2237;
																						} else {
																							$1437 = ((($__t$i$i)) + 16|0);
																							$1438 = ((($__t$i$i)) + 28|0);
																							$$pre$i211$i = ((($__t$i$i)) + 28|0);
																							$1439 = ((($__t$i$i)) + 16|0);
																							$1440 = ((($__t$i$i)) + 20|0);
																							$1441 = ((($__t$i$i)) + 32|0);
																							$1502 = $1436;$begin$0436$i = 0;$cut$0437$i = 0;
																							L670: while(1) {
																								$1501 = (($1502) + ($cut$0437$i<<2)|0);
																								$1503 = HEAP32[$1501>>2]|0;
																								$1504 = (($begin$0436$i) + 1)|0;
																								$1505 = ($1504>>>0)<($1503>>>0);
																								if ($1505) {
																									$1511 = $1504;$i2$0414$i = $begin$0436$i;
																									while(1) {
																										$first3$0412$i = $i2$0414$i;$j4$0413$i = $1511;
																										while(1) {
																											$zone_vector$idx13$val$i = HEAP32[$zone_vector>>2]|0;
																											$1513 = (($zone_vector$idx13$val$i) + (($j4$0413$i*40)|0)|0);
																											$1514 = (($zone_vector$idx13$val$i) + (($first3$0412$i*40)|0)|0);
																											__THREW__ = 0;
																											$1515 = (invoke_iii(89,($1513|0),($1514|0))|0);
																											$1516 = __THREW__; __THREW__ = 0;
																											$1517 = $1516&1;
																											if ($1517) {
																												label = 467;
																												break L670;
																											}
																											$j4$0$first3$0$i = $1515 ? $j4$0413$i : $first3$0412$i;
																											$1518 = (($j4$0413$i) + 1)|0;
																											$1519 = ($1518>>>0)<($1503>>>0);
																											if ($1519) {
																												$first3$0412$i = $j4$0$first3$0$i;$j4$0413$i = $1518;
																											} else {
																												$j4$0$first3$0$i$lcssa = $j4$0$first3$0$i;
																												break;
																											}
																										}
																										$1509 = ($j4$0$first3$0$i$lcssa|0)==($i2$0414$i|0);
																										if (!($1509)) {
																											$zone_vector$idx15$val$i = HEAP32[$zone_vector>>2]|0;
																											$1520 = (($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0);
																											$1521 = (($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0);
																											;HEAP32[$__t$i$i>>2]=HEAP32[$1520>>2]|0;HEAP32[$__t$i$i+4>>2]=HEAP32[$1520+4>>2]|0;HEAP32[$__t$i$i+8>>2]=HEAP32[$1520+8>>2]|0;HEAP32[$__t$i$i+12>>2]=HEAP32[$1520+12>>2]|0;
																											$1522 = (((($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0)) + 16|0);
																											__THREW__ = 0;
																											invoke_vii(81,($1437|0),($1522|0));
																											$1523 = __THREW__; __THREW__ = 0;
																											$1524 = $1523&1;
																											if ($1524) {
																												label = 472;
																												break L670;
																											}
																											$1525 = (((($zone_vector$idx15$val$i) + (($i2$0414$i*40)|0)|0)) + 28|0);
																											__THREW__ = 0;
																											invoke_vii(82,($1438|0),($1525|0));
																											$1526 = __THREW__; __THREW__ = 0;
																											$1527 = $1526&1;
																											if ($1527) {
																												label = 496;
																												break L670;
																											}
																											;HEAP32[$1520>>2]=HEAP32[$1521>>2]|0;HEAP32[$1520+4>>2]=HEAP32[$1521+4>>2]|0;HEAP32[$1520+8>>2]=HEAP32[$1521+8>>2]|0;HEAP32[$1520+12>>2]=HEAP32[$1521+12>>2]|0;
																											$1539 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 16|0);
																											$1540 = HEAP32[$1539>>2]|0;
																											$1541 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 20|0);
																											$1542 = HEAP32[$1541>>2]|0;
																											__THREW__ = 0;
																											invoke_viii(86,($1522|0),($1540|0),($1542|0));
																											$1543 = __THREW__; __THREW__ = 0;
																											$1544 = $1543&1;
																											if ($1544) {
																												label = 513;
																												break L670;
																											}
																											$1545 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 28|0);
																											$1546 = HEAP32[$1545>>2]|0;
																											$1547 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 32|0);
																											$1548 = HEAP32[$1547>>2]|0;
																											__THREW__ = 0;
																											invoke_viii(87,($1525|0),($1546|0),($1548|0));
																											$1549 = __THREW__; __THREW__ = 0;
																											$1550 = $1549&1;
																											if ($1550) {
																												label = 513;
																												break L670;
																											}
																											;HEAP32[$1521>>2]=HEAP32[$__t$i$i>>2]|0;HEAP32[$1521+4>>2]=HEAP32[$__t$i$i+4>>2]|0;HEAP32[$1521+8>>2]=HEAP32[$__t$i$i+8>>2]|0;HEAP32[$1521+12>>2]=HEAP32[$__t$i$i+12>>2]|0;
																											$1551 = ($__t$i$i|0)==($1521|0);
																											if (!($1551)) {
																												$1552 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 16|0);
																												$1553 = HEAP32[$1439>>2]|0;
																												$1554 = HEAP32[$1440>>2]|0;
																												__THREW__ = 0;
																												invoke_viii(86,($1552|0),($1553|0),($1554|0));
																												$1555 = __THREW__; __THREW__ = 0;
																												$1556 = $1555&1;
																												if ($1556) {
																													label = 513;
																													break L670;
																												}
																												$1557 = (((($zone_vector$idx15$val$i) + (($j4$0$first3$0$i$lcssa*40)|0)|0)) + 28|0);
																												$1558 = HEAP32[$$pre$i211$i>>2]|0;
																												$1559 = HEAP32[$1441>>2]|0;
																												__THREW__ = 0;
																												invoke_viii(87,($1557|0),($1558|0),($1559|0));
																												$1560 = __THREW__; __THREW__ = 0;
																												$1561 = $1560&1;
																												if ($1561) {
																													label = 513;
																													break L670;
																												}
																											}
																											$1562 = HEAP32[$$pre$i211$i>>2]|0;
																											$1563 = ($1562|0)==(0|0);
																											$1564 = $1562;
																											if (!($1563)) {
																												$1565 = HEAP32[$1441>>2]|0;
																												$1566 = ($1565|0)==($1562|0);
																												if (!($1566)) {
																													$scevgep$i$i$i$i$i213$i = ((($1565)) + -4|0);
																													$1567 = $scevgep$i$i$i$i$i213$i;
																													$1568 = (($1567) - ($1564))|0;
																													$1569 = $1568 >>> 2;
																													$1570 = $1569 ^ -1;
																													$scevgep4$i$i$i$i$i214$i = (($1565) + ($1570<<2)|0);
																													HEAP32[$1441>>2] = $scevgep4$i$i$i$i$i214$i;
																												}
																												__ZdlPv($1562);
																											}
																											$1571 = HEAP32[$1439>>2]|0;
																											$1572 = ($1571|0)==(0|0);
																											$1573 = $1571;
																											if (!($1572)) {
																												$1574 = HEAP32[$1440>>2]|0;
																												$1575 = ($1574|0)==($1571|0);
																												if (!($1575)) {
																													$scevgep$i$i$i$i$i6$i$i = ((($1574)) + -8|0);
																													$1576 = $scevgep$i$i$i$i$i6$i$i;
																													$1577 = (($1576) - ($1573))|0;
																													$1578 = $1577 >>> 3;
																													$1579 = $1578 ^ -1;
																													$scevgep4$i$i$i$i$i7$i$i = (($1574) + ($1579<<3)|0);
																													HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i7$i$i;
																												}
																												__ZdlPv($1571);
																											}
																										}
																										$1510 = (($1511) + 1)|0;
																										$1512 = ($1510>>>0)<($1503>>>0);
																										if ($1512) {
																											$i2$0414$i$phi = $1511;$1511 = $1510;$i2$0414$i = $i2$0414$i$phi;
																										} else {
																											break;
																										}
																									}
																								}
																								$1506 = (($1503) - ($begin$0436$i))|0;
																								$1507 = ($1506>>>0)>(1);
																								$1508 = ($1503>>>0)>($begin$0436$i>>>0);
																								$or$cond416$i = $1508 & $1507;
																								L703: do {
																									if ($or$cond416$i) {
																										$zone_vector$idx20$val$pre$i = HEAP32[$zone_vector>>2]|0;
																										$i5$0418$i = $begin$0436$i;$zone_vector$idx20$val$i = $zone_vector$idx20$val$pre$i;
																										while(1) {
																											$1600 = (((($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0)) + 28|0);
																											$1601 = (((($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0)) + 32|0);
																											$1602 = HEAP32[$1601>>2]|0;
																											$1603 = HEAP32[$1600>>2]|0;
																											$1604 = (($1602) - ($1603))|0;
																											$1605 = $1604 >> 2;
																											$1606 = ($1605>>>0)>(80);
																											if ($1606) {
																												label = 528;
																												break L703;
																											}
																											$1607 = (($zone_vector$idx20$val$i) + (($i5$0418$i*40)|0)|0);
																											$1608 = (($zone_vector$idx20$val$i) + (($begin$0436$i*40)|0)|0);
																											__THREW__ = 0;
																											$1609 = (invoke_iii(90,($1607|0),($1608|0))|0);
																											$1610 = __THREW__; __THREW__ = 0;
																											$1611 = $1610&1;
																											if ($1611) {
																												label = 471;
																												break L670;
																											}
																											$zone_vector$idx17$val$i = HEAP32[$zone_vector>>2]|0;
																											$1612 = (((($zone_vector$idx17$val$i) + (($i5$0418$i*40)|0)|0)) + 12|0);
																											$1613 = HEAP32[$1612>>2]|0;
																											$1614 = (((($zone_vector$idx17$val$i) + (($i5$0418$i*40)|0)|0)) + 4|0);
																											$1615 = HEAP32[$1614>>2]|0;
																											$1616 = (((($zone_vector$idx17$val$i) + (($begin$0436$i*40)|0)|0)) + 12|0);
																											$1617 = HEAP32[$1616>>2]|0;
																											$1618 = (((($zone_vector$idx17$val$i) + (($begin$0436$i*40)|0)|0)) + 4|0);
																											$1619 = HEAP32[$1618>>2]|0;
																											$1620 = (($1613) + 2)|0;
																											$1621 = (($1620) - ($1615))|0;
																											$1622 = (($1621) + ($1617))|0;
																											$1623 = (($1622) - ($1619))|0;
																											$1624 = ($1609|0)>($1623|0);
																											if ($1624) {
																												label = 528;
																												break L703;
																											}
																											$1625 = (($i5$0418$i) + 1)|0;
																											$1626 = ($1625>>>0)<($1503>>>0);
																											if ($1626) {
																												$i5$0418$i = $1625;$zone_vector$idx20$val$i = $zone_vector$idx17$val$i;
																											} else {
																												$join$0$off0$lcssa$i = 1;
																												label = 522;
																												break;
																											}
																										}
																									} else {
																										$join$0$off0$lcssa$i = $1507;
																										label = 522;
																									}
																								} while(0);
																								do {
																									if ((label|0) == 522) {
																										label = 0;
																										$or$cond6422$i = $1508 & $join$0$off0$lcssa$i;
																										if ($or$cond6422$i) {
																											$i6$0424$i = $begin$0436$i;
																											while(1) {
																												$zone_vector$idx22$val$i = HEAP32[$zone_vector>>2]|0;
																												$1628 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 12|0);
																												$1629 = HEAP32[$1628>>2]|0;
																												$1630 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 4|0);
																												$1631 = HEAP32[$1630>>2]|0;
																												$1632 = (((($zone_vector$idx22$val$i) + (($i6$0424$i*40)|0)|0)) + 28|0);
																												__THREW__ = 0;
																												$1633 = (invoke_ii(79,($1632|0))|0);
																												$1634 = __THREW__; __THREW__ = 0;
																												$1635 = $1634&1;
																												if ($1635) {
																													label = 470;
																													break L670;
																												}
																												$1636 = (($1629) + 1)|0;
																												$1637 = (($1636) - ($1631))|0;
																												$1638 = $1633 << 2;
																												$not$$i = ($1637|0)<=($1638|0);
																												$1639 = (($i6$0424$i) + 1)|0;
																												$1640 = ($1639>>>0)<($1503>>>0);
																												$or$cond6$i = $1640 & $not$$i;
																												if ($or$cond6$i) {
																													$i6$0424$i = $1639;
																												} else {
																													$join$2$off0$lcssa$i = $not$$i;
																													break;
																												}
																											}
																										} else {
																											$join$2$off0$lcssa$i = $join$0$off0$lcssa$i;
																										}
																										if (!($join$2$off0$lcssa$i)) {
																											label = 528;
																											break;
																										}
																										$zone_vector$idx24$val427$i = HEAP32[$zone_vector>>2]|0;
																										if ($1505) {
																											$i7$0428$i = $1504;$zone_vector$idx24$val429$i = $zone_vector$idx24$val427$i;
																											while(1) {
																												$1698 = (($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0);
																												$1699 = (($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0);
																												__THREW__ = 0;
																												invoke_vii(84,($1698|0),($1699|0));
																												$1700 = __THREW__; __THREW__ = 0;
																												$1701 = $1700&1;
																												if ($1701) {
																													label = 469;
																													break L670;
																												}
																												$1702 = (((($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0)) + 28|0);
																												$1703 = (((($zone_vector$idx24$val429$i) + (($begin$0436$i*40)|0)|0)) + 32|0);
																												$1704 = HEAP32[$1703>>2]|0;
																												HEAP32[$3>>2] = $1704;
																												$1705 = (((($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0)) + 28|0);
																												$1706 = HEAP32[$1705>>2]|0;
																												HEAP32[$4>>2] = $1706;
																												$1707 = (((($zone_vector$idx24$val429$i) + (($i7$0428$i*40)|0)|0)) + 32|0);
																												$1708 = HEAP32[$1707>>2]|0;
																												HEAP32[$5>>2] = $1708;
																												__THREW__ = 0;
																												;HEAP32[$$byval_copy147>>2]=HEAP32[$3>>2]|0;
																												;HEAP32[$$byval_copy148>>2]=HEAP32[$4>>2]|0;
																												;HEAP32[$$byval_copy149>>2]=HEAP32[$5>>2]|0;
																												(invoke_iiiii(85,($1702|0),($$byval_copy147|0),($$byval_copy148|0),($$byval_copy149|0))|0);
																												$1709 = __THREW__; __THREW__ = 0;
																												$1710 = $1709&1;
																												if ($1710) {
																													label = 469;
																													break L670;
																												}
																												$1711 = HEAP32[$1705>>2]|0;
																												$1712 = HEAP32[$1707>>2]|0;
																												$1713 = ($1712|0)==($1711|0);
																												if (!($1713)) {
																													$__new_last2$i$i$i$i$i = $1711;
																													$scevgep$i$i$i$i$i152 = ((($1712)) + -4|0);
																													$1714 = $scevgep$i$i$i$i$i152;
																													$1715 = (($1714) - ($__new_last2$i$i$i$i$i))|0;
																													$1716 = $1715 >>> 2;
																													$1717 = $1716 ^ -1;
																													$scevgep4$i$i$i$i$i153 = (($1712) + ($1717<<2)|0);
																													HEAP32[$1707>>2] = $scevgep4$i$i$i$i$i153;
																												}
																												$1718 = (($i7$0428$i) + 1)|0;
																												$1719 = ($1718>>>0)<($1503>>>0);
																												$zone_vector$idx24$val$i = HEAP32[$zone_vector>>2]|0;
																												if ($1719) {
																													$i7$0428$i = $1718;$zone_vector$idx24$val429$i = $zone_vector$idx24$val$i;
																												} else {
																													$zone_vector$idx24$val$lcssa$i = $zone_vector$idx24$val$i;
																													break;
																												}
																											}
																										} else {
																											$zone_vector$idx24$val$lcssa$i = $zone_vector$idx24$val427$i;
																										}
																										$1641 = (($zone_vector$idx24$val$lcssa$i) + (($1504*40)|0)|0);
																										$1642 = (($zone_vector$idx24$val$lcssa$i) + (($1503*40)|0)|0);
																										$1643 = ($1504|0)==($1503|0);
																										do {
																											if (!($1643)) {
																												$1644 = HEAP32[$528>>2]|0;
																												$1645 = ($1644|0)==($1642|0);
																												if ($1645) {
																													$$0$lcssa$i$i$i$i = $1641;$1664 = $1642;
																												} else {
																													$$012$i$i$i230$i = $1642;$$03$i$i$i229$i = $1641;
																													while(1) {
																														;HEAP32[$$03$i$i$i229$i>>2]=HEAP32[$$012$i$i$i230$i>>2]|0;HEAP32[$$03$i$i$i229$i+4>>2]=HEAP32[$$012$i$i$i230$i+4>>2]|0;HEAP32[$$03$i$i$i229$i+8>>2]=HEAP32[$$012$i$i$i230$i+8>>2]|0;HEAP32[$$03$i$i$i229$i+12>>2]=HEAP32[$$012$i$i$i230$i+12>>2]|0;
																														$1646 = ($$03$i$i$i229$i|0)==($$012$i$i$i230$i|0);
																														if (!($1646)) {
																															$1647 = ((($$03$i$i$i229$i)) + 16|0);
																															$1648 = ((($$012$i$i$i230$i)) + 16|0);
																															$1649 = HEAP32[$1648>>2]|0;
																															$1650 = ((($$012$i$i$i230$i)) + 20|0);
																															$1651 = HEAP32[$1650>>2]|0;
																															__THREW__ = 0;
																															invoke_viii(86,($1647|0),($1649|0),($1651|0));
																															$1652 = __THREW__; __THREW__ = 0;
																															$1653 = $1652&1;
																															if ($1653) {
																																label = 468;
																																break L670;
																															}
																															$1654 = ((($$03$i$i$i229$i)) + 28|0);
																															$1655 = ((($$012$i$i$i230$i)) + 28|0);
																															$1656 = HEAP32[$1655>>2]|0;
																															$1657 = ((($$012$i$i$i230$i)) + 32|0);
																															$1658 = HEAP32[$1657>>2]|0;
																															__THREW__ = 0;
																															invoke_viii(87,($1654|0),($1656|0),($1658|0));
																															$1659 = __THREW__; __THREW__ = 0;
																															$1660 = $1659&1;
																															if ($1660) {
																																label = 468;
																																break L670;
																															}
																														}
																														$1661 = ((($$012$i$i$i230$i)) + 40|0);
																														$1662 = ((($$03$i$i$i229$i)) + 40|0);
																														$1663 = ($1661|0)==($1644|0);
																														if ($1663) {
																															$$lcssa = $1662;
																															break;
																														} else {
																															$$012$i$i$i230$i = $1661;$$03$i$i$i229$i = $1662;
																														}
																													}
																													$$pre$i232$i = HEAP32[$528>>2]|0;
																													$$0$lcssa$i$i$i$i = $$lcssa;$1664 = $$pre$i232$i;
																												}
																												$1665 = ($1664|0)==($$0$lcssa$i$i$i$i|0);
																												if ($1665) {
																													break;
																												} else {
																													$1667 = $1664;
																												}
																												while(1) {
																													$1666 = ((($1667)) + -40|0);
																													HEAP32[$528>>2] = $1666;
																													$1668 = ((($1667)) + -12|0);
																													$1669 = HEAP32[$1668>>2]|0;
																													$1670 = ($1669|0)==(0|0);
																													$1671 = $1669;
																													if (!($1670)) {
																														$1672 = ((($1667)) + -8|0);
																														$1673 = HEAP32[$1672>>2]|0;
																														$1674 = ($1673|0)==($1669|0);
																														if (!($1674)) {
																															$scevgep$i$i$i$i$i$i$i$i$i235$i = ((($1673)) + -4|0);
																															$1675 = $scevgep$i$i$i$i$i$i$i$i$i235$i;
																															$1676 = (($1675) - ($1671))|0;
																															$1677 = $1676 >>> 2;
																															$1678 = $1677 ^ -1;
																															$scevgep4$i$i$i$i$i$i$i$i$i236$i = (($1673) + ($1678<<2)|0);
																															HEAP32[$1672>>2] = $scevgep4$i$i$i$i$i$i$i$i$i236$i;
																														}
																														__ZdlPv($1669);
																													}
																													$1679 = ((($1667)) + -24|0);
																													$1680 = HEAP32[$1679>>2]|0;
																													$1681 = ($1680|0)==(0|0);
																													$1682 = $1680;
																													if (!($1681)) {
																														$1691 = ((($1667)) + -20|0);
																														$1692 = HEAP32[$1691>>2]|0;
																														$1693 = ($1692|0)==($1680|0);
																														if (!($1693)) {
																															$scevgep$i$i$i$i$i$i$i$i$i$i241$i = ((($1692)) + -8|0);
																															$1694 = $scevgep$i$i$i$i$i$i$i$i$i$i241$i;
																															$1695 = (($1694) - ($1682))|0;
																															$1696 = $1695 >>> 3;
																															$1697 = $1696 ^ -1;
																															$scevgep4$i$i$i$i$i$i$i$i$i$i242$i = (($1692) + ($1697<<3)|0);
																															HEAP32[$1691>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i242$i;
																														}
																														__ZdlPv($1680);
																													}
																													$1683 = HEAP32[$528>>2]|0;
																													$1684 = ($1683|0)==($$0$lcssa$i$i$i$i|0);
																													if ($1684) {
																														break;
																													} else {
																														$1667 = $1683;
																													}
																												}
																											}
																										} while(0);
																										$1685 = HEAP32[$$pre$phi$i142Z2D>>2]|0;
																										$1686 = HEAP32[$cut_index_vector$i>>2]|0;
																										$1687 = (($1685) - ($1686))|0;
																										$1688 = $1687 >> 2;
																										$1689 = ($cut$0437$i>>>0)<($1688>>>0);
																										$1690 = $1686;
																										if (!($1689)) {
																											$1726 = $1686;$1727 = $1685;$2238 = $1690;$begin$1$i = $1504;
																											break;
																										}
																										$$neg293$i = (1 - ($1506))|0;
																										$i8$0434$i = $cut$0437$i;
																										while(1) {
																											$1720 = (($1690) + ($i8$0434$i<<2)|0);
																											$1721 = HEAP32[$1720>>2]|0;
																											$1722 = (($$neg293$i) + ($1721))|0;
																											HEAP32[$1720>>2] = $1722;
																											$1723 = (($i8$0434$i) + 1)|0;
																											$exitcond = ($1723|0)==($1688|0);
																											if ($exitcond) {
																												$1726 = $1686;$1727 = $1685;$2238 = $1690;$begin$1$i = $1504;
																												break;
																											} else {
																												$i8$0434$i = $1723;
																											}
																										}
																									}
																								} while(0);
																								if ((label|0) == 528) {
																									label = 0;
																									$$pre546$i = HEAP32[$cut_index_vector$i>>2]|0;
																									$1627 = $$pre546$i;
																									$$pre442 = HEAP32[$$pre$phi$i142Z2D>>2]|0;
																									$1726 = $$pre546$i;$1727 = $$pre442;$2238 = $1627;$begin$1$i = $1503;
																								}
																								$1724 = (($cut$0437$i) + 1)|0;
																								$1725 = (($1727) - ($1726))|0;
																								$1728 = $1725 >> 2;
																								$1729 = ($1724>>>0)<($1728>>>0);
																								$1730 = $1726;
																								if ($1729) {
																									$1502 = $1730;$begin$0436$i = $begin$1$i;$cut$0437$i = $1724;
																								} else {
																									$$lcssa728 = $1727;$$lcssa729 = $2238;
																									label = 480;
																									break;
																								}
																							}
																							if ((label|0) == 467) {
																								$1455 = ___cxa_find_matching_catch_2()|0;
																								$1456 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1456;$eh$lpad$body218$i$indexZ2D = $1455;
																								break L666;
																							}
																							else if ((label|0) == 468) {
																								$1457 = ___cxa_find_matching_catch_2()|0;
																								$1458 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1458;$eh$lpad$body218$i$indexZ2D = $1457;
																								break L666;
																							}
																							else if ((label|0) == 469) {
																								$1459 = ___cxa_find_matching_catch_2()|0;
																								$1460 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1460;$eh$lpad$body218$i$indexZ2D = $1459;
																								break L666;
																							}
																							else if ((label|0) == 470) {
																								$1461 = ___cxa_find_matching_catch_2()|0;
																								$1462 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1462;$eh$lpad$body218$i$indexZ2D = $1461;
																								break L666;
																							}
																							else if ((label|0) == 471) {
																								$1463 = ___cxa_find_matching_catch_2()|0;
																								$1464 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1464;$eh$lpad$body218$i$indexZ2D = $1463;
																								break L666;
																							}
																							else if ((label|0) == 472) {
																								$1465 = ___cxa_find_matching_catch_2()|0;
																								$1466 = tempRet0;
																								$eh$lpad$body218$i$index101Z2D = $1466;$eh$lpad$body218$i$indexZ2D = $1465;
																								break L666;
																							}
																							else if ((label|0) == 480) {
																								$1491 = $$lcssa728;
																								$1492 = $$lcssa729;$1495 = $1491;
																								break;
																							}
																							else if ((label|0) == 496) {
																								$1528 = ___cxa_find_matching_catch_2()|0;
																								$1529 = tempRet0;
																								$1530 = HEAP32[$1439>>2]|0;
																								$1531 = ($1530|0)==(0|0);
																								$1532 = $1530;
																								if ($1531) {
																									$eh$lpad$body218$i$index101Z2D = $1529;$eh$lpad$body218$i$indexZ2D = $1528;
																									break L666;
																								}
																								$1533 = HEAP32[$1440>>2]|0;
																								$1534 = ($1533|0)==($1530|0);
																								if (!($1534)) {
																									$scevgep$i$i$i$i$i$i$i146 = ((($1533)) + -8|0);
																									$1535 = $scevgep$i$i$i$i$i$i$i146;
																									$1536 = (($1535) - ($1532))|0;
																									$1537 = $1536 >>> 3;
																									$1538 = $1537 ^ -1;
																									$scevgep4$i$i$i$i$i$i$i147 = (($1533) + ($1538<<3)|0);
																									HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i$i$i147;
																								}
																								__ZdlPv($1530);
																								$eh$lpad$body218$i$index101Z2D = $1529;$eh$lpad$body218$i$indexZ2D = $1528;
																								break L666;
																							}
																							else if ((label|0) == 513) {
																								$1580 = ___cxa_find_matching_catch_2()|0;
																								$1581 = tempRet0;
																								$1582 = HEAP32[$$pre$i211$i>>2]|0;
																								$1583 = ($1582|0)==(0|0);
																								$1584 = $1582;
																								if (!($1583)) {
																									$1585 = HEAP32[$1441>>2]|0;
																									$1586 = ($1585|0)==($1582|0);
																									if (!($1586)) {
																										$scevgep$i$i$i$i11$i$i = ((($1585)) + -4|0);
																										$1587 = $scevgep$i$i$i$i11$i$i;
																										$1588 = (($1587) - ($1584))|0;
																										$1589 = $1588 >>> 2;
																										$1590 = $1589 ^ -1;
																										$scevgep4$i$i$i$i12$i$i = (($1585) + ($1590<<2)|0);
																										HEAP32[$1441>>2] = $scevgep4$i$i$i$i12$i$i;
																									}
																									__ZdlPv($1582);
																								}
																								$1591 = HEAP32[$1439>>2]|0;
																								$1592 = ($1591|0)==(0|0);
																								$1593 = $1591;
																								if ($1592) {
																									$eh$lpad$body218$i$index101Z2D = $1581;$eh$lpad$body218$i$indexZ2D = $1580;
																									break L666;
																								}
																								$1594 = HEAP32[$1440>>2]|0;
																								$1595 = ($1594|0)==($1591|0);
																								if (!($1595)) {
																									$scevgep$i$i$i$i$i16$i$i = ((($1594)) + -8|0);
																									$1596 = $scevgep$i$i$i$i$i16$i$i;
																									$1597 = (($1596) - ($1593))|0;
																									$1598 = $1597 >>> 3;
																									$1599 = $1598 ^ -1;
																									$scevgep4$i$i$i$i$i17$i$i = (($1594) + ($1599<<3)|0);
																									HEAP32[$1440>>2] = $scevgep4$i$i$i$i$i17$i$i;
																								}
																								__ZdlPv($1591);
																								$eh$lpad$body218$i$index101Z2D = $1581;$eh$lpad$body218$i$indexZ2D = $1580;
																								break L666;
																							}
																						}
																					} while(0);
																					$1493 = ($1492|0)==(0|0);
																					$1494 = $1492;
																					if (!($1493)) {
																						$1496 = ($1495|0)==($1492|0);
																						if (!($1496)) {
																							$scevgep$i$i$i186$i = ((($1495)) + -4|0);
																							$1497 = $scevgep$i$i$i186$i;
																							$1498 = (($1497) - ($1494))|0;
																							$1499 = $1498 >>> 2;
																							$1500 = $1499 ^ -1;
																							$scevgep4$i$i$i187$i = (($1495) + ($1500<<2)|0);
																							HEAP32[$1424>>2] = $scevgep4$i$i$i187$i;
																						}
																						__ZdlPv($1492);
																					}
																					break L237;
																				}
																			} while(0);
																			$1471 = HEAP32[$cut_index_vector$i>>2]|0;
																			$1472 = ($1471|0)==(0|0);
																			$1473 = $1471;
																			if ($1472) {
																				$$03$i = $eh$lpad$body218$i$indexZ2D;$$04$i = $eh$lpad$body218$i$index101Z2D;
																				break;
																			}
																			$1474 = HEAP32[$1424>>2]|0;
																			$1475 = ($1474|0)==($1471|0);
																			if (!($1475)) {
																				$scevgep$i$i$i183$i = ((($1474)) + -4|0);
																				$1476 = $scevgep$i$i$i183$i;
																				$1477 = (($1476) - ($1473))|0;
																				$1478 = $1477 >>> 2;
																				$1479 = $1478 ^ -1;
																				$scevgep4$i$i$i184$i = (($1474) + ($1479<<2)|0);
																				HEAP32[$1424>>2] = $scevgep4$i$i$i184$i;
																			}
																			__ZdlPv($1471);
																			$$03$i = $eh$lpad$body218$i$indexZ2D;$$04$i = $eh$lpad$body218$i$index101Z2D;
																		}
																		else if ((label|0) == 289) {
																			$911 = HEAP32[$525>>2]|0;
																			$912 = ($911|0)==(0|0);
																			$913 = $911;
																			if (!($912)) {
																				$914 = HEAP32[$526>>2]|0;
																				$915 = ($914|0)==($911|0);
																				if (!($915)) {
																					$scevgep$i$i$i$i52$i = ((($914)) + -4|0);
																					$916 = $scevgep$i$i$i$i52$i;
																					$917 = (($916) - ($913))|0;
																					$918 = $917 >>> 2;
																					$919 = $918 ^ -1;
																					$scevgep4$i$i$i$i53$i = (($914) + ($919<<2)|0);
																					HEAP32[$526>>2] = $scevgep4$i$i$i$i53$i;
																				}
																				__ZdlPv($911);
																			}
																			$920 = ((($6)) + 16|0);
																			$921 = HEAP32[$920>>2]|0;
																			$922 = ($921|0)==(0|0);
																			$923 = $921;
																			if ($922) {
																				$$03$i = $eh$lpad$body$i$indexZ2D;$$04$i = $eh$lpad$body$i$index51Z2D;
																				break;
																			}
																			$924 = ((($6)) + 20|0);
																			$925 = HEAP32[$924>>2]|0;
																			$926 = ($925|0)==($921|0);
																			if (!($926)) {
																				$scevgep$i$i$i$i$i57$i = ((($925)) + -8|0);
																				$927 = $scevgep$i$i$i$i$i57$i;
																				$928 = (($927) - ($923))|0;
																				$929 = $928 >>> 3;
																				$930 = $929 ^ -1;
																				$scevgep4$i$i$i$i$i58$i = (($925) + ($930<<3)|0);
																				HEAP32[$924>>2] = $scevgep4$i$i$i$i$i58$i;
																			}
																			__ZdlPv($921);
																			$$03$i = $eh$lpad$body$i$indexZ2D;$$04$i = $eh$lpad$body$i$index51Z2D;
																		}
																	} while(0);
																	$eh$lpad$body74$index14Z2D = $$04$i;$eh$lpad$body74$indexZ2D = $$03$i;
																	label = 38;
																	break L115;
																}
															} while(0);
															$1731 = ((($zone_vector)) + 4|0);
															if ($92) {
																$1732 = HEAP32[$1731>>2]|0;
																$1733 = HEAP32[$zone_vector>>2]|0;
																$1734 = (($1732) - ($1733))|0;
																$1735 = (($1734|0) / 40)&-1;
																$1736 = ($1735>>>0)<(2);
																$1737 = ($1732|0)==($1733|0);
																$or$cond539 = $1736 | $1737;
																if ($or$cond539) {
																	$$pre$phiZ2D = $1731;
																} else {
																	$i$0333 = 0;$zone_vector$idx6$val$in = $1733;
																	while(1) {
																		$zone_vector$idx6$val = $zone_vector$idx6$val$in;
																		$1738 = (($zone_vector$idx6$val) + (($i$0333*40)|0)|0);
																		$1739 = (((($zone_vector$idx6$val) + (($i$0333*40)|0)|0)) + 28|0);
																		__THREW__ = 0;
																		invoke_vii(73,($1738|0),($1739|0));
																		$1740 = __THREW__; __THREW__ = 0;
																		$1741 = $1740&1;
																		if ($1741) {
																			break;
																		}
																		$1742 = (($i$0333) + 1)|0;
																		$1743 = HEAP32[$1731>>2]|0;
																		$1744 = HEAP32[$zone_vector>>2]|0;
																		$1745 = (($1743) - ($1744))|0;
																		$1746 = (($1745|0) / 40)&-1;
																		$1747 = ($1742>>>0)<($1746>>>0);
																		if ($1747) {
																			$i$0333 = $1742;$zone_vector$idx6$val$in = $1744;
																		} else {
																			$$pre$phiZ2D = $1731;
																			break L232;
																		}
																	}
																	$95 = ___cxa_find_matching_catch_2()|0;
																	$96 = tempRet0;
																	$eh$lpad$body74$index14Z2D = $96;$eh$lpad$body74$indexZ2D = $95;
																	label = 38;
																	break L115;
																}
															} else {
																$$pre$phiZ2D = $1731;
															}
														} else {
															label = 563;
														}
													} else {
														label = 563;
													}
												} else {
													label = 563;
												}
											} else {
												label = 563;
											}
										} while(0);
										if ((label|0) == 563) {
											__THREW__ = 0;
											invoke_vii(80,($12|0),($page_image|0));
											$1748 = __THREW__; __THREW__ = 0;
											$1749 = $1748&1;
											if ($1749) {
												break;
											}
											$1750 = ((($12)) + 28|0);
											HEAP32[$1750>>2] = 0;
											$1751 = ((($12)) + 32|0);
											HEAP32[$1751>>2] = 0;
											$1752 = ((($12)) + 36|0);
											HEAP32[$1752>>2] = 0;
											$1753 = ((($zone_vector)) + 4|0);
											$1754 = HEAP32[$1753>>2]|0;
											$1755 = ((($zone_vector)) + 8|0);
											$1756 = HEAP32[$1755>>2]|0;
											$1757 = ($1754|0)==($1756|0);
											$1758 = $1756;
											L805: do {
												if ($1757) {
													$1855 = $1754;
													$1856 = HEAP32[$zone_vector>>2]|0;
													$1857 = (($1855) - ($1856))|0;
													$1858 = (($1857|0) / 40)&-1;
													$1859 = (($1858) + 1)|0;
													$1860 = ($1859>>>0)>(107374182);
													if ($1860) {
														__THREW__ = 0;
														invoke_vi(46,($zone_vector|0));
														$1861 = __THREW__; __THREW__ = 0;
														$1862 = $1861&1;
														if (!($1862)) {
															$$pre$i$i = HEAP32[$zone_vector>>2]|0;
															$$pre$i58 = HEAP32[$1755>>2]|0;
															$$pre$phi$iZ2D = $1755;$1864 = $$pre$i$i;$1865 = $$pre$i58;
															label = 596;
														}
													} else {
														$$pre$phi$iZ2D = $1755;$1864 = $1856;$1865 = $1758;
														label = 596;
													}
													do {
														if ((label|0) == 596) {
															$1863 = (($1865) - ($1864))|0;
															$1866 = (($1863|0) / 40)&-1;
															$1867 = ($1866>>>0)<(53687091);
															if ($1867) {
																$1871 = $1866 << 1;
																$1872 = ($1871>>>0)<($1859>>>0);
																$1873 = $1872 ? $1859 : $1871;
																$1874 = HEAP32[$1753>>2]|0;
																$1875 = (($1874) - ($1864))|0;
																$1876 = (($1875|0) / 40)&-1;
																$1877 = ($1873|0)==(0);
																if ($1877) {
																	$$0$i18$i$i = 0;$1883 = 0;$1884 = $1876;
																} else {
																	$$0$i17$i$i = $1873;$2239 = $1876;
																	label = 599;
																}
															} else {
																$1868 = HEAP32[$1753>>2]|0;
																$1869 = (($1868) - ($1864))|0;
																$1870 = (($1869|0) / 40)&-1;
																$$0$i17$i$i = 107374182;$2239 = $1870;
																label = 599;
															}
															if ((label|0) == 599) {
																$1878 = ($$0$i17$i$i*40)|0;
																__THREW__ = 0;
																$1879 = (invoke_ii(29,($1878|0))|0);
																$1880 = __THREW__; __THREW__ = 0;
																$1881 = $1880&1;
																if ($1881) {
																	break;
																}
																$$0$i18$i$i = $$0$i17$i$i;$1883 = $1879;$1884 = $2239;
															}
															$1882 = (($1883) + (($1884*40)|0)|0);
															$1885 = $1882;
															$1886 = (($1883) + (($$0$i18$i$i*40)|0)|0);
															$1887 = $1886;
															;HEAP32[$1882>>2]=HEAP32[$12>>2]|0;HEAP32[$1882+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$1882+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$1882+12>>2]=HEAP32[$12+12>>2]|0;
															$1888 = (((($1883) + (($1884*40)|0)|0)) + 16|0);
															$1889 = ((($12)) + 16|0);
															HEAP32[$1888>>2] = 0;
															$1890 = (((($1883) + (($1884*40)|0)|0)) + 20|0);
															HEAP32[$1890>>2] = 0;
															$1891 = (((($1883) + (($1884*40)|0)|0)) + 24|0);
															HEAP32[$1891>>2] = 0;
															$1892 = ((($12)) + 20|0);
															$1893 = HEAP32[$1892>>2]|0;
															$1894 = HEAP32[$1889>>2]|0;
															$1895 = (($1893) - ($1894))|0;
															$1896 = $1895 >> 3;
															$1897 = ($1896|0)==(0);
															L820: do {
																if ($1897) {
																	label = 612;
																} else {
																	$1898 = ($1896>>>0)>(536870911);
																	if ($1898) {
																		__THREW__ = 0;
																		invoke_vi(46,($1888|0));
																		$1899 = __THREW__; __THREW__ = 0;
																		$1900 = $1899&1;
																		if (!($1900)) {
																			label = 604;
																		}
																	} else {
																		label = 604;
																	}
																	do {
																		if ((label|0) == 604) {
																			__THREW__ = 0;
																			$1901 = (invoke_ii(29,($1895|0))|0);
																			$1902 = __THREW__; __THREW__ = 0;
																			$1903 = $1902&1;
																			if ($1903) {
																				break;
																			}
																			HEAP32[$1890>>2] = $1901;
																			HEAP32[$1888>>2] = $1901;
																			$1904 = (($1901) + ($1896<<3)|0);
																			$1905 = (((($1883) + (($1884*40)|0)|0)) + 24|0);
																			HEAP32[$1905>>2] = $1904;
																			$1906 = HEAP32[$1889>>2]|0;
																			$1907 = HEAP32[$1892>>2]|0;
																			$1908 = ($1906|0)==($1907|0);
																			if ($1908) {
																				label = 612;
																				break L820;
																			}
																			$$01$i$i = $1906;$1915 = $1901;
																			while(1) {
																				$1909 = $$01$i$i;
																				$1910 = $1909;
																				$1911 = HEAP32[$1910>>2]|0;
																				$1912 = (($1909) + 4)|0;
																				$1913 = $1912;
																				$1914 = HEAP32[$1913>>2]|0;
																				$1916 = $1915;
																				$1917 = $1916;
																				HEAP32[$1917>>2] = $1911;
																				$1918 = (($1916) + 4)|0;
																				$1919 = $1918;
																				HEAP32[$1919>>2] = $1914;
																				$1920 = HEAP32[$1890>>2]|0;
																				$1921 = ((($1920)) + 8|0);
																				HEAP32[$1890>>2] = $1921;
																				$1922 = ((($$01$i$i)) + 8|0);
																				$1923 = ($1922|0)==($1907|0);
																				if ($1923) {
																					label = 612;
																					break L820;
																				} else {
																					$$01$i$i = $1922;$1915 = $1921;
																				}
																			}
																		}
																	} while(0);
																	$1924 = ___cxa_find_matching_catch_2()|0;
																	$1925 = tempRet0;
																	$1926 = HEAP32[$1888>>2]|0;
																	$1927 = ($1926|0)==(0|0);
																	$1928 = $1926;
																	if ($1927) {
																		$__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1925;$eh$lpad$body$i$i$indexZ2D = $1924;
																	} else {
																		$1929 = HEAP32[$1890>>2]|0;
																		$1930 = ($1929|0)==($1926|0);
																		if (!($1930)) {
																			$scevgep$i$i$i$i172 = ((($1929)) + -8|0);
																			$1931 = $scevgep$i$i$i$i172;
																			$1932 = (($1931) - ($1928))|0;
																			$1933 = $1932 >>> 3;
																			$1934 = $1933 ^ -1;
																			$scevgep4$i$i$i$i173 = (($1929) + ($1934<<3)|0);
																			HEAP32[$1890>>2] = $scevgep4$i$i$i$i173;
																		}
																		__ZdlPv($1926);
																		$__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1925;$eh$lpad$body$i$i$indexZ2D = $1924;
																	}
																}
															} while(0);
															L835: do {
																if ((label|0) == 612) {
																	$1935 = (((($1883) + (($1884*40)|0)|0)) + 28|0);
																	$1936 = ((($12)) + 28|0);
																	HEAP32[$1935>>2] = 0;
																	$1937 = (((($1883) + (($1884*40)|0)|0)) + 32|0);
																	HEAP32[$1937>>2] = 0;
																	$1938 = (((($1883) + (($1884*40)|0)|0)) + 36|0);
																	HEAP32[$1938>>2] = 0;
																	$1939 = HEAP32[$1751>>2]|0;
																	$1940 = HEAP32[$1936>>2]|0;
																	$1941 = (($1939) - ($1940))|0;
																	$1942 = $1941 >> 2;
																	$1943 = ($1942|0)==(0);
																	L837: do {
																		if (!($1943)) {
																			$1944 = ($1942>>>0)>(1073741823);
																			if ($1944) {
																				__THREW__ = 0;
																				invoke_vi(46,($1935|0));
																				$1945 = __THREW__; __THREW__ = 0;
																				$1946 = $1945&1;
																				if (!($1946)) {
																					label = 615;
																				}
																			} else {
																				label = 615;
																			}
																			do {
																				if ((label|0) == 615) {
																					__THREW__ = 0;
																					$1947 = (invoke_ii(29,($1941|0))|0);
																					$1948 = __THREW__; __THREW__ = 0;
																					$1949 = $1948&1;
																					if ($1949) {
																						break;
																					}
																					HEAP32[$1937>>2] = $1947;
																					HEAP32[$1935>>2] = $1947;
																					$1950 = (($1947) + ($1942<<2)|0);
																					$1951 = (((($1883) + (($1884*40)|0)|0)) + 36|0);
																					HEAP32[$1951>>2] = $1950;
																					$1952 = HEAP32[$1936>>2]|0;
																					$1953 = HEAP32[$1751>>2]|0;
																					$1954 = ($1952|0)==($1953|0);
																					if ($1954) {
																						break L837;
																					}
																					$$01$i$i199 = $1952;$1956 = $1947;
																					while(1) {
																						$1955 = HEAP32[$$01$i$i199>>2]|0;
																						HEAP32[$1956>>2] = $1955;
																						$1957 = HEAP32[$1937>>2]|0;
																						$1958 = ((($1957)) + 4|0);
																						HEAP32[$1937>>2] = $1958;
																						$1959 = ((($$01$i$i199)) + 4|0);
																						$1960 = ($1959|0)==($1953|0);
																						if ($1960) {
																							break L837;
																						} else {
																							$$01$i$i199 = $1959;$1956 = $1958;
																						}
																					}
																				}
																			} while(0);
																			$1961 = ___cxa_find_matching_catch_2()|0;
																			$1962 = tempRet0;
																			$1963 = HEAP32[$1935>>2]|0;
																			$1964 = ($1963|0)==(0|0);
																			$1965 = $1963;
																			if (!($1964)) {
																				$1966 = HEAP32[$1937>>2]|0;
																				$1967 = ($1966|0)==($1963|0);
																				if (!($1967)) {
																					$scevgep$i$i$i$i200 = ((($1966)) + -4|0);
																					$1968 = $scevgep$i$i$i$i200;
																					$1969 = (($1968) - ($1965))|0;
																					$1970 = $1969 >>> 2;
																					$1971 = $1970 ^ -1;
																					$scevgep4$i$i$i$i201 = (($1966) + ($1971<<2)|0);
																					HEAP32[$1937>>2] = $scevgep4$i$i$i$i201;
																				}
																				__ZdlPv($1963);
																			}
																			$1972 = (((($1883) + (($1884*40)|0)|0)) + 16|0);
																			$1973 = HEAP32[$1972>>2]|0;
																			$1974 = ($1973|0)==(0|0);
																			$1975 = $1973;
																			if ($1974) {
																				$__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1962;$eh$lpad$body$i$i$indexZ2D = $1961;
																				break L835;
																			}
																			$1976 = HEAP32[$1890>>2]|0;
																			$1977 = ($1976|0)==($1973|0);
																			if (!($1977)) {
																				$scevgep$i$i$i$i$i$i$i$i = ((($1976)) + -8|0);
																				$1978 = $scevgep$i$i$i$i$i$i$i$i;
																				$1979 = (($1978) - ($1975))|0;
																				$1980 = $1979 >>> 3;
																				$1981 = $1980 ^ -1;
																				$scevgep4$i$i$i$i$i$i$i$i = (($1976) + ($1981<<3)|0);
																				HEAP32[$1890>>2] = $scevgep4$i$i$i$i$i$i$i$i;
																			}
																			__ZdlPv($1973);
																			$__v$sroa$15$2$i$i = $1885;$__v$sroa$6$3$i$i = $1885;$eh$lpad$body$i$i$index121Z2D = $1962;$eh$lpad$body$i$i$indexZ2D = $1961;
																			break L835;
																		}
																	} while(0);
																	$1982 = ((($1882)) + 40|0);
																	$1983 = $1982;
																	$1984 = HEAP32[$zone_vector>>2]|0;
																	$1985 = HEAP32[$1753>>2]|0;
																	$1986 = ($1985|0)==($1984|0);
																	do {
																		if ($1986) {
																			$1987 = $1984;
																			$2016 = $1885;$2017 = $1987;$2019 = $1984;
																		} else {
																			$$01$i$i$i$i = $1985;$1989 = $1882;$__v$sroa$6$0$i$i = $1885;
																			while(1) {
																				$1988 = ((($1989)) + -40|0);
																				$1990 = ((($$01$i$i$i$i)) + -40|0);
																				;HEAP32[$1988>>2]=HEAP32[$1990>>2]|0;HEAP32[$1988+4>>2]=HEAP32[$1990+4>>2]|0;HEAP32[$1988+8>>2]=HEAP32[$1990+8>>2]|0;HEAP32[$1988+12>>2]=HEAP32[$1990+12>>2]|0;
																				$1991 = ((($1989)) + -24|0);
																				$1992 = ((($$01$i$i$i$i)) + -24|0);
																				__THREW__ = 0;
																				invoke_vii(81,($1991|0),($1992|0));
																				$1993 = __THREW__; __THREW__ = 0;
																				$1994 = $1993&1;
																				if ($1994) {
																					$__v$sroa$6$0$i$i$lcssa = $__v$sroa$6$0$i$i;
																					label = 649;
																					break;
																				}
																				$1995 = ((($1989)) + -12|0);
																				$1996 = ((($$01$i$i$i$i)) + -12|0);
																				__THREW__ = 0;
																				invoke_vii(82,($1995|0),($1996|0));
																				$1997 = __THREW__; __THREW__ = 0;
																				$1998 = $1997&1;
																				if ($1998) {
																					$$lcssa803 = $1989;$__v$sroa$6$0$i$i$lcssa800 = $__v$sroa$6$0$i$i;
																					label = 631;
																					break;
																				}
																				$2012 = $__v$sroa$6$0$i$i;
																				$2013 = ((($2012)) + -40|0);
																				$2014 = $2013;
																				$2015 = ($1990|0)==($1984|0);
																				if ($2015) {
																					$$lcssa805 = $2014;
																					label = 636;
																					break;
																				} else {
																					$$01$i$i$i$i = $1990;$1989 = $2013;$__v$sroa$6$0$i$i = $2014;
																				}
																			}
																			if ((label|0) == 631) {
																				$1999 = ___cxa_find_matching_catch_2()|0;
																				$2000 = tempRet0;
																				$2001 = ((($$lcssa803)) + -24|0);
																				$2002 = HEAP32[$2001>>2]|0;
																				$2003 = ($2002|0)==(0|0);
																				$2004 = $2002;
																				if ($2003) {
																					$__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa800;$eh$lpad$body$i$i$index121Z2D = $2000;$eh$lpad$body$i$i$indexZ2D = $1999;
																					break L835;
																				}
																				$2005 = ((($$lcssa803)) + -20|0);
																				$2006 = HEAP32[$2005>>2]|0;
																				$2007 = ($2006|0)==($2002|0);
																				if (!($2007)) {
																					$scevgep$i$i$i$i$i$i$i$i$i$i = ((($2006)) + -8|0);
																					$2008 = $scevgep$i$i$i$i$i$i$i$i$i$i;
																					$2009 = (($2008) - ($2004))|0;
																					$2010 = $2009 >>> 3;
																					$2011 = $2010 ^ -1;
																					$scevgep4$i$i$i$i$i$i$i$i$i$i = (($2006) + ($2011<<3)|0);
																					HEAP32[$2005>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i;
																				}
																				__ZdlPv($2002);
																				$__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa800;$eh$lpad$body$i$i$index121Z2D = $2000;$eh$lpad$body$i$i$indexZ2D = $1999;
																				break L835;
																			}
																			else if ((label|0) == 636) {
																				$$pre$i$i$i = HEAP32[$zone_vector>>2]|0;
																				$$pre27$i$i = HEAP32[$1753>>2]|0;
																				$2016 = $$lcssa805;$2017 = $$pre$i$i$i;$2019 = $$pre27$i$i;
																				break;
																			}
																			else if ((label|0) == 649) {
																				$2048 = ___cxa_find_matching_catch_2()|0;
																				$2049 = tempRet0;
																				$__v$sroa$15$2$i$i = $1983;$__v$sroa$6$3$i$i = $__v$sroa$6$0$i$i$lcssa;$eh$lpad$body$i$i$index121Z2D = $2049;$eh$lpad$body$i$i$indexZ2D = $2048;
																				break L835;
																			}
																		}
																	} while(0);
																	HEAP32[$zone_vector>>2] = $2016;
																	HEAP32[$1753>>2] = $1983;
																	HEAP32[$$pre$phi$iZ2D>>2] = $1887;
																	$2018 = $2017;
																	$2020 = ($2019|0)==($2018|0);
																	if (!($2020)) {
																		$2022 = $2019;
																		while(1) {
																			$2021 = ((($2022)) + -40|0);
																			$2023 = ((($2022)) + -12|0);
																			$2024 = HEAP32[$2023>>2]|0;
																			$2025 = ($2024|0)==(0|0);
																			$2026 = $2024;
																			if (!($2025)) {
																				$2027 = ((($2022)) + -8|0);
																				$2028 = HEAP32[$2027>>2]|0;
																				$2029 = ($2028|0)==($2024|0);
																				if (!($2029)) {
																					$scevgep$i$i$i$i$i$i$i$i$i$i2$i$i = ((($2028)) + -4|0);
																					$2030 = $scevgep$i$i$i$i$i$i$i$i$i$i2$i$i;
																					$2031 = (($2030) - ($2026))|0;
																					$2032 = $2031 >>> 2;
																					$2033 = $2032 ^ -1;
																					$scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i = (($2028) + ($2033<<2)|0);
																					HEAP32[$2027>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i3$i$i;
																				}
																				__ZdlPv($2024);
																			}
																			$2034 = ((($2022)) + -24|0);
																			$2035 = HEAP32[$2034>>2]|0;
																			$2036 = ($2035|0)==(0|0);
																			$2037 = $2035;
																			if (!($2036)) {
																				$2039 = ((($2022)) + -20|0);
																				$2040 = HEAP32[$2039>>2]|0;
																				$2041 = ($2040|0)==($2035|0);
																				if (!($2041)) {
																					$scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i = ((($2040)) + -8|0);
																					$2042 = $scevgep$i$i$i$i$i$i$i$i$i$i$i8$i$i;
																					$2043 = (($2042) - ($2037))|0;
																					$2044 = $2043 >>> 3;
																					$2045 = $2044 ^ -1;
																					$scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i = (($2040) + ($2045<<3)|0);
																					HEAP32[$2039>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i9$i$i;
																				}
																				__ZdlPv($2035);
																			}
																			$2038 = ($2021|0)==($2018|0);
																			if ($2038) {
																				break;
																			} else {
																				$2022 = $2021;
																			}
																		}
																	}
																	$2046 = ($2017|0)==(0);
																	if ($2046) {
																		break L805;
																	}
																	$2047 = $2017;
																	__ZdlPv($2047);
																	break L805;
																}
															} while(0);
															$2050 = $__v$sroa$6$3$i$i;
															$2051 = $__v$sroa$15$2$i$i;
															$2052 = ($2051|0)==($2050|0);
															if (!($2052)) {
																$2054 = $2051;
																while(1) {
																	$2053 = ((($2054)) + -40|0);
																	$2055 = ((($2054)) + -12|0);
																	$2056 = HEAP32[$2055>>2]|0;
																	$2057 = ($2056|0)==(0|0);
																	$2058 = $2056;
																	if (!($2057)) {
																		$2059 = ((($2054)) + -8|0);
																		$2060 = HEAP32[$2059>>2]|0;
																		$2061 = ($2060|0)==($2056|0);
																		if (!($2061)) {
																			$scevgep$i$i$i$i$i$i$i$i$i$i$i$i = ((($2060)) + -4|0);
																			$2062 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i;
																			$2063 = (($2062) - ($2058))|0;
																			$2064 = $2063 >>> 2;
																			$2065 = $2064 ^ -1;
																			$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i = (($2060) + ($2065<<2)|0);
																			HEAP32[$2059>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i;
																		}
																		__ZdlPv($2056);
																	}
																	$2066 = ((($2054)) + -24|0);
																	$2067 = HEAP32[$2066>>2]|0;
																	$2068 = ($2067|0)==(0|0);
																	$2069 = $2067;
																	if (!($2068)) {
																		$2071 = ((($2054)) + -20|0);
																		$2072 = HEAP32[$2071>>2]|0;
																		$2073 = ($2072|0)==($2067|0);
																		if (!($2073)) {
																			$scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i = ((($2072)) + -8|0);
																			$2074 = $scevgep$i$i$i$i$i$i$i$i$i$i$i$i$i;
																			$2075 = (($2074) - ($2069))|0;
																			$2076 = $2075 >>> 3;
																			$2077 = $2076 ^ -1;
																			$scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i = (($2072) + ($2077<<3)|0);
																			HEAP32[$2071>>2] = $scevgep4$i$i$i$i$i$i$i$i$i$i$i$i$i;
																		}
																		__ZdlPv($2067);
																	}
																	$2070 = ($2053|0)==($2050|0);
																	if ($2070) {
																		break;
																	} else {
																		$2054 = $2053;
																	}
																}
															}
															$2078 = ($1883|0)==(0|0);
															if ($2078) {
																$eh$lpad$body61$index136Z2D = $eh$lpad$body$i$i$index121Z2D;$eh$lpad$body61$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
																label = 672;
																break L805;
															}
															__ZdlPv($1883);
															$eh$lpad$body61$index136Z2D = $eh$lpad$body$i$i$index121Z2D;$eh$lpad$body61$indexZ2D = $eh$lpad$body$i$i$indexZ2D;
															label = 672;
															break L805;
														}
													} while(0);
													$2109 = ___cxa_find_matching_catch_2()|0;
													$2110 = tempRet0;
													$eh$lpad$body61$index136Z2D = $2110;$eh$lpad$body61$indexZ2D = $2109;
													label = 672;
												} else {
													;HEAP32[$1754>>2]=HEAP32[$12>>2]|0;HEAP32[$1754+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$1754+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$1754+12>>2]=HEAP32[$12+12>>2]|0;
													$1759 = ((($1754)) + 16|0);
													$1760 = ((($12)) + 16|0);
													HEAP32[$1759>>2] = 0;
													$1761 = ((($1754)) + 20|0);
													HEAP32[$1761>>2] = 0;
													$1762 = ((($1754)) + 24|0);
													HEAP32[$1762>>2] = 0;
													$1763 = ((($12)) + 20|0);
													$1764 = HEAP32[$1763>>2]|0;
													$1765 = HEAP32[$1760>>2]|0;
													$1766 = (($1764) - ($1765))|0;
													$1767 = $1766 >> 3;
													$1768 = ($1767|0)==(0);
													L911: do {
														if (!($1768)) {
															$1769 = ($1767>>>0)>(536870911);
															if ($1769) {
																__THREW__ = 0;
																invoke_vi(46,($1759|0));
																$1770 = __THREW__; __THREW__ = 0;
																$1771 = $1770&1;
																if (!($1771)) {
																	label = 568;
																}
															} else {
																label = 568;
															}
															if ((label|0) == 568) {
																__THREW__ = 0;
																$1772 = (invoke_ii(29,($1766|0))|0);
																$1773 = __THREW__; __THREW__ = 0;
																$1774 = $1773&1;
																if (!($1774)) {
																	HEAP32[$1761>>2] = $1772;
																	HEAP32[$1759>>2] = $1772;
																	$1775 = (($1772) + ($1767<<3)|0);
																	$1776 = ((($1754)) + 24|0);
																	HEAP32[$1776>>2] = $1775;
																	$1777 = HEAP32[$1760>>2]|0;
																	$1778 = HEAP32[$1763>>2]|0;
																	$1779 = ($1777|0)==($1778|0);
																	if ($1779) {
																		break;
																	}
																	$$01$i$i188 = $1777;$1786 = $1772;
																	while(1) {
																		$1780 = $$01$i$i188;
																		$1781 = $1780;
																		$1782 = HEAP32[$1781>>2]|0;
																		$1783 = (($1780) + 4)|0;
																		$1784 = $1783;
																		$1785 = HEAP32[$1784>>2]|0;
																		$1787 = $1786;
																		$1788 = $1787;
																		HEAP32[$1788>>2] = $1782;
																		$1789 = (($1787) + 4)|0;
																		$1790 = $1789;
																		HEAP32[$1790>>2] = $1785;
																		$1791 = HEAP32[$1761>>2]|0;
																		$1792 = ((($1791)) + 8|0);
																		HEAP32[$1761>>2] = $1792;
																		$1793 = ((($$01$i$i188)) + 8|0);
																		$1794 = ($1793|0)==($1778|0);
																		if ($1794) {
																			break L911;
																		} else {
																			$$01$i$i188 = $1793;$1786 = $1792;
																		}
																	}
																}
															}
															$1795 = ___cxa_find_matching_catch_2()|0;
															$1796 = tempRet0;
															$1797 = HEAP32[$1759>>2]|0;
															$1798 = ($1797|0)==(0|0);
															$1799 = $1797;
															if ($1798) {
																$eh$lpad$body61$index136Z2D = $1796;$eh$lpad$body61$indexZ2D = $1795;
																label = 672;
																break L805;
															}
															$1800 = HEAP32[$1761>>2]|0;
															$1801 = ($1800|0)==($1797|0);
															if (!($1801)) {
																$scevgep$i$i$i$i189 = ((($1800)) + -8|0);
																$1802 = $scevgep$i$i$i$i189;
																$1803 = (($1802) - ($1799))|0;
																$1804 = $1803 >>> 3;
																$1805 = $1804 ^ -1;
																$scevgep4$i$i$i$i190 = (($1800) + ($1805<<3)|0);
																HEAP32[$1761>>2] = $scevgep4$i$i$i$i190;
															}
															__ZdlPv($1797);
															$eh$lpad$body61$index136Z2D = $1796;$eh$lpad$body61$indexZ2D = $1795;
															label = 672;
															break L805;
														}
													} while(0);
													$1806 = ((($1754)) + 28|0);
													$1807 = ((($12)) + 28|0);
													HEAP32[$1806>>2] = 0;
													$1808 = ((($1754)) + 32|0);
													HEAP32[$1808>>2] = 0;
													$1809 = ((($1754)) + 36|0);
													HEAP32[$1809>>2] = 0;
													$1810 = HEAP32[$1751>>2]|0;
													$1811 = HEAP32[$1807>>2]|0;
													$1812 = (($1810) - ($1811))|0;
													$1813 = $1812 >> 2;
													$1814 = ($1813|0)==(0);
													L927: do {
														if (!($1814)) {
															$1815 = ($1813>>>0)>(1073741823);
															if ($1815) {
																__THREW__ = 0;
																invoke_vi(46,($1806|0));
																$1816 = __THREW__; __THREW__ = 0;
																$1817 = $1816&1;
																if (!($1817)) {
																	label = 579;
																}
															} else {
																label = 579;
															}
															if ((label|0) == 579) {
																__THREW__ = 0;
																$1818 = (invoke_ii(29,($1812|0))|0);
																$1819 = __THREW__; __THREW__ = 0;
																$1820 = $1819&1;
																if (!($1820)) {
																	HEAP32[$1808>>2] = $1818;
																	HEAP32[$1806>>2] = $1818;
																	$1821 = (($1818) + ($1813<<2)|0);
																	$1822 = ((($1754)) + 36|0);
																	HEAP32[$1822>>2] = $1821;
																	$1823 = HEAP32[$1807>>2]|0;
																	$1824 = HEAP32[$1751>>2]|0;
																	$1825 = ($1823|0)==($1824|0);
																	if ($1825) {
																		break;
																	}
																	$$01$i$i178 = $1823;$1827 = $1818;
																	while(1) {
																		$1826 = HEAP32[$$01$i$i178>>2]|0;
																		HEAP32[$1827>>2] = $1826;
																		$1828 = HEAP32[$1808>>2]|0;
																		$1829 = ((($1828)) + 4|0);
																		HEAP32[$1808>>2] = $1829;
																		$1830 = ((($$01$i$i178)) + 4|0);
																		$1831 = ($1830|0)==($1824|0);
																		if ($1831) {
																			break L927;
																		} else {
																			$$01$i$i178 = $1830;$1827 = $1829;
																		}
																	}
																}
															}
															$1832 = ___cxa_find_matching_catch_2()|0;
															$1833 = tempRet0;
															$1834 = HEAP32[$1806>>2]|0;
															$1835 = ($1834|0)==(0|0);
															$1836 = $1834;
															if (!($1835)) {
																$1837 = HEAP32[$1808>>2]|0;
																$1838 = ($1837|0)==($1834|0);
																if (!($1838)) {
																	$scevgep$i$i$i$i179 = ((($1837)) + -4|0);
																	$1839 = $scevgep$i$i$i$i179;
																	$1840 = (($1839) - ($1836))|0;
																	$1841 = $1840 >>> 2;
																	$1842 = $1841 ^ -1;
																	$scevgep4$i$i$i$i180 = (($1837) + ($1842<<2)|0);
																	HEAP32[$1808>>2] = $scevgep4$i$i$i$i180;
																}
																__ZdlPv($1834);
															}
															$1843 = ((($1754)) + 16|0);
															$1844 = HEAP32[$1843>>2]|0;
															$1845 = ($1844|0)==(0|0);
															$1846 = $1844;
															if ($1845) {
																$eh$lpad$body61$index136Z2D = $1833;$eh$lpad$body61$indexZ2D = $1832;
																label = 672;
																break L805;
															}
															$1847 = HEAP32[$1761>>2]|0;
															$1848 = ($1847|0)==($1844|0);
															if (!($1848)) {
																$scevgep$i$i$i$i$i$i$i = ((($1847)) + -8|0);
																$1849 = $scevgep$i$i$i$i$i$i$i;
																$1850 = (($1849) - ($1846))|0;
																$1851 = $1850 >>> 3;
																$1852 = $1851 ^ -1;
																$scevgep4$i$i$i$i$i$i$i = (($1847) + ($1852<<3)|0);
																HEAP32[$1761>>2] = $scevgep4$i$i$i$i$i$i$i;
															}
															__ZdlPv($1844);
															$eh$lpad$body61$index136Z2D = $1833;$eh$lpad$body61$indexZ2D = $1832;
															label = 672;
															break L805;
														}
													} while(0);
													$1853 = HEAP32[$1753>>2]|0;
													$1854 = ((($1853)) + 40|0);
													HEAP32[$1753>>2] = $1854;
												}
											} while(0);
											if ((label|0) == 672) {
												$2111 = HEAP32[$1750>>2]|0;
												$2112 = ($2111|0)==(0|0);
												$2113 = $2111;
												if (!($2112)) {
													$2114 = HEAP32[$1751>>2]|0;
													$2115 = ($2114|0)==($2111|0);
													if (!($2115)) {
														$scevgep$i$i$i$i42 = ((($2114)) + -4|0);
														$2116 = $scevgep$i$i$i$i42;
														$2117 = (($2116) - ($2113))|0;
														$2118 = $2117 >>> 2;
														$2119 = $2118 ^ -1;
														$scevgep4$i$i$i$i43 = (($2114) + ($2119<<2)|0);
														HEAP32[$1751>>2] = $scevgep4$i$i$i$i43;
													}
													__ZdlPv($2111);
												}
												$2120 = ((($12)) + 16|0);
												$2121 = HEAP32[$2120>>2]|0;
												$2122 = ($2121|0)==(0|0);
												$2123 = $2121;
												if ($2122) {
													$$0 = $eh$lpad$body61$indexZ2D;$$01 = $eh$lpad$body61$index136Z2D;
													break L115;
												}
												$2124 = ((($12)) + 20|0);
												$2125 = HEAP32[$2124>>2]|0;
												$2126 = ($2125|0)==($2121|0);
												if (!($2126)) {
													$scevgep$i$i$i$i$i = ((($2125)) + -8|0);
													$2127 = $scevgep$i$i$i$i$i;
													$2128 = (($2127) - ($2123))|0;
													$2129 = $2128 >>> 3;
													$2130 = $2129 ^ -1;
													$scevgep4$i$i$i$i$i = (($2125) + ($2130<<3)|0);
													HEAP32[$2124>>2] = $scevgep4$i$i$i$i$i;
												}
												__ZdlPv($2121);
												$$0 = $eh$lpad$body61$indexZ2D;$$01 = $eh$lpad$body61$index136Z2D;
												break L115;
											}
											$2079 = HEAP32[$1750>>2]|0;
											$2080 = ($2079|0)==(0|0);
											$2081 = $2079;
											if (!($2080)) {
												$2082 = HEAP32[$1751>>2]|0;
												$2083 = ($2082|0)==($2079|0);
												if (!($2083)) {
													$scevgep$i$i$i$i47 = ((($2082)) + -4|0);
													$2084 = $scevgep$i$i$i$i47;
													$2085 = (($2084) - ($2081))|0;
													$2086 = $2085 >>> 2;
													$2087 = $2086 ^ -1;
													$scevgep4$i$i$i$i48 = (($2082) + ($2087<<2)|0);
													HEAP32[$1751>>2] = $scevgep4$i$i$i$i48;
												}
												__ZdlPv($2079);
											}
											$2088 = ((($12)) + 16|0);
											$2089 = HEAP32[$2088>>2]|0;
											$2090 = ($2089|0)==(0|0);
											$2091 = $2089;
											if (!($2090)) {
												$2092 = ((($12)) + 20|0);
												$2093 = HEAP32[$2092>>2]|0;
												$2094 = ($2093|0)==($2089|0);
												if (!($2094)) {
													$scevgep$i$i$i$i$i52 = ((($2093)) + -8|0);
													$2095 = $scevgep$i$i$i$i$i52;
													$2096 = (($2095) - ($2091))|0;
													$2097 = $2096 >>> 3;
													$2098 = $2097 ^ -1;
													$scevgep4$i$i$i$i$i53 = (($2093) + ($2098<<3)|0);
													HEAP32[$2092>>2] = $scevgep4$i$i$i$i$i53;
												}
												__ZdlPv($2089);
											}
											$zone_vector$idx$val = HEAP32[$1753>>2]|0;
											$2099 = ((($zone_vector$idx$val)) + -12|0);
											$2100 = HEAP32[$2099>>2]|0;
											$2101 = HEAP32[$blobp_vector>>2]|0;
											HEAP32[$2099>>2] = $2101;
											HEAP32[$blobp_vector>>2] = $2100;
											$2102 = ((($zone_vector$idx$val)) + -8|0);
											$2103 = HEAP32[$2102>>2]|0;
											$2104 = HEAP32[$15>>2]|0;
											HEAP32[$2102>>2] = $2104;
											HEAP32[$15>>2] = $2103;
											$2105 = ((($zone_vector$idx$val)) + -4|0);
											$2106 = ((($blobp_vector)) + 8|0);
											$2107 = HEAP32[$2105>>2]|0;
											$2108 = HEAP32[$2106>>2]|0;
											HEAP32[$2105>>2] = $2108;
											HEAP32[$2106>>2] = $2107;
											$$pre$phiZ2D = $1753;
										}
										$2131 = HEAP32[$$pre$phiZ2D>>2]|0;
										$2132 = HEAP32[$zone_vector>>2]|0;
										$2133 = ($2131|0)==($2132|0);
										L975: do {
											if (!($2133)) {
												$2134 = $2132;$2240 = $2131;$zi$02$i = 0;
												L976: while(1) {
													$zone_vector$idx$val$i = $2134;
													$2135 = (((($zone_vector$idx$val$i) + (($zi$02$i*40)|0)|0)) + 28|0);
													$2136 = (((($zone_vector$idx$val$i) + (($zi$02$i*40)|0)|0)) + 32|0);
													$2137 = HEAP32[$2136>>2]|0;
													$2138 = HEAP32[$2135>>2]|0;
													$2139 = ($2137|0)==($2138|0);
													if ($2139) {
														$2142 = $2134;$2143 = $2240;
													} else {
														$$in$i = $2138;$bvi$01$i = 0;
														while(1) {
															$2146 = $$in$i;
															$2147 = (($2146) + ($bvi$01$i<<2)|0);
															$2148 = HEAP32[$2147>>2]|0;
															__THREW__ = 0;
															invoke_vi(91,($2148|0));
															$2149 = __THREW__; __THREW__ = 0;
															$2150 = $2149&1;
															if ($2150) {
																break L976;
															}
															$2151 = (($bvi$01$i) + 1)|0;
															$2152 = HEAP32[$2136>>2]|0;
															$2153 = HEAP32[$2135>>2]|0;
															$2154 = (($2152) - ($2153))|0;
															$2155 = $2154 >> 2;
															$2156 = ($2151>>>0)<($2155>>>0);
															if ($2156) {
																$$in$i = $2153;$bvi$01$i = $2151;
															} else {
																break;
															}
														}
														$$pre$i = HEAP32[$$pre$phiZ2D>>2]|0;
														$$pre7$i = HEAP32[$zone_vector>>2]|0;
														$2142 = $$pre7$i;$2143 = $$pre$i;
													}
													$2140 = (($zi$02$i) + 1)|0;
													$2141 = (($2143) - ($2142))|0;
													$2144 = (($2141|0) / 40)&-1;
													$2145 = ($2140>>>0)<($2144>>>0);
													if ($2145) {
														$2134 = $2142;$2240 = $2143;$zi$02$i = $2140;
													} else {
														break L975;
													}
												}
												$93 = ___cxa_find_matching_catch_2()|0;
												$94 = tempRet0;
												$eh$lpad$body74$index14Z2D = $94;$eh$lpad$body74$indexZ2D = $93;
												label = 38;
												break L115;
											}
										} while(0);
										$2157 = HEAP32[$new_data>>2]|0;
										$2158 = ($2157|0)==(0|0);
										$2159 = $2157;
										if (!($2158)) {
											$2160 = HEAP32[$54>>2]|0;
											$2161 = ($2160|0)==($2157|0);
											if (!($2161)) {
												$scevgep$i$i$i37 = ((($2160)) + -4|0);
												$2162 = $scevgep$i$i$i37;
												$2163 = (($2162) - ($2159))|0;
												$2164 = $2163 >>> 2;
												$2165 = $2164 ^ -1;
												$scevgep4$i$i$i38 = (($2160) + ($2165<<2)|0);
												HEAP32[$54>>2] = $scevgep4$i$i$i38;
											}
											__ZdlPv($2157);
										}
										$2166 = HEAP32[$old_data>>2]|0;
										$2167 = ($2166|0)==(0|0);
										$2168 = $2166;
										if (!($2167)) {
											$2169 = HEAP32[$22>>2]|0;
											$2170 = ($2169|0)==($2166|0);
											if (!($2170)) {
												$scevgep$i$i$i32 = ((($2169)) + -4|0);
												$2171 = $scevgep$i$i$i32;
												$2172 = (($2171) - ($2168))|0;
												$2173 = $2172 >>> 2;
												$2174 = $2173 ^ -1;
												$scevgep4$i$i$i33 = (($2169) + ($2174<<2)|0);
												HEAP32[$22>>2] = $scevgep4$i$i$i33;
											}
											__ZdlPv($2166);
										}
										$2175 = HEAP32[$blobp_vector>>2]|0;
										$2176 = ($2175|0)==(0|0);
										$2177 = $2175;
										if ($2176) {
											STACKTOP = sp;return;
										}
										$2178 = HEAP32[$15>>2]|0;
										$2179 = ($2178|0)==($2175|0);
										if (!($2179)) {
											$scevgep$i$i$i27 = ((($2178)) + -4|0);
											$2180 = $scevgep$i$i$i27;
											$2181 = (($2180) - ($2177))|0;
											$2182 = $2181 >>> 2;
											$2183 = $2182 ^ -1;
											$scevgep4$i$i$i28 = (($2178) + ($2183<<2)|0);
											HEAP32[$15>>2] = $scevgep4$i$i$i28;
										}
										__ZdlPv($2175);
										STACKTOP = sp;return;
									}
								} while(0);
								$111 = ___cxa_find_matching_catch_2()|0;
								$112 = tempRet0;
								$eh$lpad$body74$index14Z2D = $112;$eh$lpad$body74$indexZ2D = $111;
								label = 38;
							}
						} while(0);
						if ((label|0) == 38) {
							$$0 = $eh$lpad$body74$indexZ2D;$$01 = $eh$lpad$body74$index14Z2D;
						}
						$2184 = HEAP32[$new_data>>2]|0;
						$2185 = ($2184|0)==(0|0);
						$2186 = $2184;
						if ($2185) {
							$$1 = $$0;$$12 = $$01;
						} else {
							$2187 = HEAP32[$54>>2]|0;
							$2188 = ($2187|0)==($2184|0);
							if (!($2188)) {
								$scevgep$i$i$i22 = ((($2187)) + -4|0);
								$2189 = $scevgep$i$i$i22;
								$2190 = (($2189) - ($2186))|0;
								$2191 = $2190 >>> 2;
								$2192 = $2191 ^ -1;
								$scevgep4$i$i$i23 = (($2187) + ($2192<<2)|0);
								HEAP32[$54>>2] = $scevgep4$i$i$i23;
							}
							__ZdlPv($2184);
							$$1 = $$0;$$12 = $$01;
						}
					}
					$2193 = HEAP32[$old_data>>2]|0;
					$2194 = ($2193|0)==(0|0);
					$2195 = $2193;
					if ($2194) {
						$$2 = $$1;$$23 = $$12;
					} else {
						$2196 = HEAP32[$22>>2]|0;
						$2197 = ($2196|0)==($2193|0);
						if (!($2197)) {
							$scevgep$i$i$i7 = ((($2196)) + -4|0);
							$2198 = $scevgep$i$i$i7;
							$2199 = (($2198) - ($2195))|0;
							$2200 = $2199 >>> 2;
							$2201 = $2200 ^ -1;
							$scevgep4$i$i$i8 = (($2196) + ($2201<<2)|0);
							HEAP32[$22>>2] = $scevgep4$i$i$i8;
						}
						__ZdlPv($2193);
						$$2 = $$1;$$23 = $$12;
					}
				}
				$2202 = HEAP32[$blobp_vector>>2]|0;
				$2203 = ($2202|0)==(0|0);
				$2204 = $2202;
				if ($2203) {
					___resumeException($$2|0);
					// unreachable;
				}
				$2205 = HEAP32[$15>>2]|0;
				$2206 = ($2205|0)==($2202|0);
				if (!($2206)) {
					$scevgep$i$i$i = ((($2205)) + -4|0);
					$2207 = $scevgep$i$i$i;
					$2208 = (($2207) - ($2204))|0;
					$2209 = $2208 >>> 2;
					$2210 = $2209 ^ -1;
					$scevgep4$i$i$i = (($2205) + ($2210<<2)|0);
					HEAP32[$15>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($2202);
				___resumeException($$2|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(1073741823);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 2;
				$11 = ($10>>>0)<(536870911);
				if ($11) {
					$15 = $9 >> 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
					} else {
						$$0$i1 = $17;$41 = $18;$42 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 2;
					$$0$i1 = 1073741823;$41 = $12;$42 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 2;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
				}
				$24 = (($25) + ($26<<2)|0);
				$27 = (($25) + ($$0$i2<<2)|0);
				$28 = $27;
				$29 = HEAP32[$__x>>2]|0;
				HEAP32[$24>>2] = $29;
				$30 = ((($24)) + 4|0);
				$31 = $30;
				$32 = (($33) - ($$in))|0;
				$34 = $32 >> 2;
				$35 = (0 - ($34))|0;
				$36 = (($24) + ($35<<2)|0);
				$37 = $36;
				$38 = $$in;
				_memcpy(($36|0),($38|0),($32|0))|0;
				HEAP32[$this>>2] = $37;
				HEAP32[$0>>2] = $31;
				HEAP32[$7>>2] = $28;
				$39 = ($$in|0)==(0);
				if ($39) {
					return;
				}
				$40 = $$in;
				__ZdlPv($40);
				return;
			}
			function __ZN12_GLOBAL__N_117ignore_wide_blobsERK9RectangleRNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE($re,$blobp_vector) {
				$re = $re|0;
				$blobp_vector = $blobp_vector|0;
				var $$03 = 0, $$04 = 0, $$blobs$0 = 0, $$cast = 0, $$cast$lcssa = 0, $$cast80 = 0, $$cast82 = 0, $$lcssa = 0, $$lcssa215 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa233 = 0, $$lcssa241 = 0, $$lcssa242 = 0, $$lcssa243 = 0, $$lcssa245 = 0, $$pre = 0, $$pre113 = 0, $$pre114 = 0, $0 = 0;
				var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
				var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
				var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
				var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
				var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
				var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
				var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
				var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
				var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
				var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i10 = 0, $blobs$0$lcssa = 0, $blobs$084 = 0, $i$0$ph97 = 0, $j$085 = 0, $j1$091 = 0, $j3$081 = 0, $j4$093 = 0, $or$cond = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i11 = 0, $scevgep$i$i$i7 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i12 = 0;
				var $scevgep4$i$i$i8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($blobp_vector)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$blobp_vector>>2]|0;
				$3 = ($1|0)==($2|0);
				if ($3) {
					return;
				}
				$4 = ((($re)) + 8|0);
				$5 = ((($re)) + 12|0);
				$6 = ((($re)) + 4|0);
				$256 = $2;$257 = $1;$i$0$ph97 = 0;
				L4: while(1) {
					$29 = $257;$7 = $256;
					while(1) {
						$8 = $7;
						$9 = (($8) + ($i$0$ph97<<2)|0);
						$10 = HEAP32[$9>>2]|0;
						$11 = ((($10)) + 8|0);
						$12 = HEAP32[$11>>2]|0;
						$13 = HEAP32[$10>>2]|0;
						$14 = (($12) + 1)|0;
						$15 = (($14) - ($13))|0;
						$16 = $15 << 1;
						$17 = HEAP32[$4>>2]|0;
						$18 = HEAP32[$re>>2]|0;
						$19 = (($17) + 1)|0;
						$20 = (($19) - ($18))|0;
						$21 = ($16|0)<($20|0);
						if ($21) {
							$$lcssa226 = $7;$$lcssa233 = $29;
							break;
						}
						$26 = ((($9)) + 4|0);
						$27 = $26;
						$28 = (($29) - ($27))|0;
						$30 = $28 >> 2;
						_memmove(($9|0),($26|0),($28|0))|0;
						$31 = (($9) + ($30<<2)|0);
						$32 = HEAP32[$0>>2]|0;
						$33 = ($32|0)==($31|0);
						if (!($33)) {
							$__new_last2$i$i$i10 = $31;
							$scevgep$i$i$i11 = ((($32)) + -4|0);
							$34 = $scevgep$i$i$i11;
							$35 = (($34) - ($__new_last2$i$i$i10))|0;
							$36 = $35 >>> 2;
							$37 = $36 ^ -1;
							$scevgep4$i$i$i12 = (($32) + ($37<<2)|0);
							HEAP32[$0>>2] = $scevgep4$i$i$i12;
						}
						$38 = (__ZNK6Bitmap4areaEv($10)|0);
						$39 = $38 << 2;
						$40 = ((($10)) + 12|0);
						$41 = HEAP32[$40>>2]|0;
						$42 = ((($10)) + 4|0);
						$43 = HEAP32[$42>>2]|0;
						$44 = (($41) + 1)|0;
						$45 = (($44) - ($43))|0;
						$46 = HEAP32[$11>>2]|0;
						$47 = HEAP32[$10>>2]|0;
						$48 = (($46) + 1)|0;
						$49 = (($48) - ($47))|0;
						$50 = ($45*3)|0;
						$51 = Math_imul($50, $49)|0;
						$52 = ($39|0)>($51|0);
						L12: do {
							if ($52) {
								$165 = $46;$167 = $47;$176 = $41;$178 = $43;
								label = 25;
							} else {
								$53 = HEAP32[$0>>2]|0;
								$54 = HEAP32[$blobp_vector>>2]|0;
								$55 = (($53) - ($54))|0;
								$56 = $55 >> 2;
								$57 = ($i$0$ph97>>>0)<($56>>>0);
								$58 = $54;
								L14: do {
									if ($57) {
										$59 = (($53) - ($54))|0;
										$60 = $59 >> 2;
										$blobs$084 = 0;$j$085 = $i$0$ph97;
										while(1) {
											$61 = (($58) + ($j$085<<2)|0);
											$62 = HEAP32[$61>>2]|0;
											$63 = ((($62)) + 4|0);
											$64 = HEAP32[$63>>2]|0;
											$65 = ($64|0)>($41|0);
											if ($65) {
												$blobs$0$lcssa = $blobs$084;
												break L14;
											}
											$66 = ((($62)) + 12|0);
											$67 = HEAP32[$66>>2]|0;
											$68 = (1 - ($64))|0;
											$69 = (($68) + ($67))|0;
											$70 = ((($62)) + 8|0);
											$71 = HEAP32[$70>>2]|0;
											$72 = HEAP32[$62>>2]|0;
											$73 = (($71) + 1)|0;
											$74 = (($73) - ($72))|0;
											$75 = Math_imul($74, $69)|0;
											$76 = ($75|0)>(15);
											$77 = $76&1;
											$$blobs$0 = (($77) + ($blobs$084))|0;
											$78 = (($j$085) + 1)|0;
											$79 = ($78>>>0)<($60>>>0);
											if ($79) {
												$blobs$084 = $$blobs$0;$j$085 = $78;
											} else {
												$blobs$0$lcssa = $$blobs$0;
												break;
											}
										}
									} else {
										$blobs$0$lcssa = 0;
									}
								} while(0);
								$80 = Math_imul($49, $45)|0;
								$81 = (($80|0) / 400)&-1;
								$82 = ($blobs$0$lcssa|0)>($81|0);
								if ($82) {
									$165 = $46;$167 = $47;$176 = $41;$178 = $43;
									label = 25;
								} else {
									$83 = (__ZNK6Bitmap4areaEv($10)|0);
									$84 = $83 << 2;
									$85 = HEAP32[$40>>2]|0;
									$86 = HEAP32[$42>>2]|0;
									$87 = (($85) + 1)|0;
									$88 = (($87) - ($86))|0;
									$89 = HEAP32[$11>>2]|0;
									$90 = HEAP32[$10>>2]|0;
									$91 = (($89) + 1)|0;
									$92 = (($91) - ($90))|0;
									$93 = Math_imul($92, $88)|0;
									$94 = ($84|0)>($93|0);
									if (!($94)) {
										__THREW__ = 0;
										invoke_vi(72,($10|0));
										$95 = __THREW__; __THREW__ = 0;
										$96 = $95&1;
										if ($96) {
											$$lcssa241 = $10;
											label = 17;
											break L4;
										}
										__ZdlPv($10);
										break;
									}
									__ZN4Blob10find_holesEv($10);
									$99 = ((($10)) + 28|0);
									$100 = ((($10)) + 32|0);
									$101 = HEAP32[$100>>2]|0;
									$102 = HEAP32[$99>>2]|0;
									$103 = (($101) - ($102))|0;
									$104 = $103 >> 2;
									$105 = HEAP32[$40>>2]|0;
									$106 = HEAP32[$42>>2]|0;
									$107 = (($105) + 1)|0;
									$108 = (($107) - ($106))|0;
									$109 = HEAP32[$11>>2]|0;
									$110 = HEAP32[$10>>2]|0;
									$111 = (($109) + 1)|0;
									$112 = (($111) - ($110))|0;
									$113 = ($112|0)<($108|0);
									$114 = $113 ? $112 : $108;
									$115 = ($104|0)<($114|0);
									$116 = ($103|0)>(0);
									$or$cond = $115 & $116;
									if ($or$cond) {
										$j1$091 = 0;
										while(1) {
											$117 = (__ZNK4Blob4holeEi($10,$j1$091)|0);
											$118 = ((($117)) + 12|0);
											$119 = HEAP32[$118>>2]|0;
											$120 = ((($117)) + 4|0);
											$121 = HEAP32[$120>>2]|0;
											$122 = (($119) + 1)|0;
											$123 = (($122) - ($121))|0;
											$124 = ((($117)) + 8|0);
											$125 = HEAP32[$124>>2]|0;
											$126 = HEAP32[$117>>2]|0;
											$127 = (($125) + 1)|0;
											$128 = (($127) - ($126))|0;
											$129 = $123 << 2;
											$130 = Math_imul($129, $128)|0;
											$131 = HEAP32[$40>>2]|0;
											$132 = HEAP32[$42>>2]|0;
											$133 = (($131) + 1)|0;
											$134 = (($133) - ($132))|0;
											$135 = HEAP32[$11>>2]|0;
											$136 = HEAP32[$10>>2]|0;
											$137 = (($135) + 1)|0;
											$138 = (($137) - ($136))|0;
											$139 = Math_imul($138, $134)|0;
											$140 = ($130|0)<($139|0);
											if ($140) {
												$258 = $132;$259 = $131;$260 = $136;$261 = $135;
											} else {
												$141 = (__ZNK4Blob4holeEi($10,$j1$091)|0);
												$142 = (__ZNK6Bitmap4areaEv($141)|0);
												$143 = $142 << 2;
												$144 = HEAP32[$40>>2]|0;
												$145 = HEAP32[$42>>2]|0;
												$146 = (($144) + 1)|0;
												$147 = (($146) - ($145))|0;
												$148 = HEAP32[$11>>2]|0;
												$149 = HEAP32[$10>>2]|0;
												$150 = (($148) + 1)|0;
												$151 = (($150) - ($149))|0;
												$152 = Math_imul($151, $147)|0;
												$153 = ($143|0)<($152|0);
												if ($153) {
													$258 = $145;$259 = $144;$260 = $149;$261 = $148;
												} else {
													break;
												}
											}
											$154 = (($j1$091) + 1)|0;
											$155 = HEAP32[$100>>2]|0;
											$156 = HEAP32[$99>>2]|0;
											$157 = (($155) - ($156))|0;
											$158 = $157 >> 2;
											$159 = ($154|0)<($158|0);
											if ($159) {
												$j1$091 = $154;
											} else {
												$165 = $261;$167 = $260;$176 = $259;$178 = $258;
												label = 25;
												break L12;
											}
										}
										__THREW__ = 0;
										invoke_vi(72,($10|0));
										$160 = __THREW__; __THREW__ = 0;
										$161 = $160&1;
										if ($161) {
											$$lcssa242 = $10;
											label = 23;
											break L4;
										}
										__ZdlPv($10);
									} else {
										$165 = $109;$167 = $110;$176 = $105;$178 = $106;
										label = 25;
									}
								}
							}
						} while(0);
						if ((label|0) == 25) {
							label = 0;
							$164 = (($165) + 1)|0;
							$166 = (($164) - ($167))|0;
							$168 = ($166*5)|0;
							$169 = HEAP32[$4>>2]|0;
							$170 = HEAP32[$re>>2]|0;
							$171 = (($169) + 1)|0;
							$172 = (($171) - ($170))|0;
							$173 = $172 << 2;
							$174 = ($168|0)>($173|0);
							if ($174) {
								$175 = (($176) + 1)|0;
								$177 = (($175) - ($178))|0;
								$179 = ($177*5)|0;
								$180 = HEAP32[$5>>2]|0;
								$181 = HEAP32[$6>>2]|0;
								$182 = (($180) + 1)|0;
								$183 = (($182) - ($181))|0;
								$184 = $183 << 2;
								$185 = ($179|0)>($184|0);
								if ($185) {
									$$lcssa243 = $10;
									label = 27;
									break L4;
								}
							}
							$215 = HEAP32[$0>>2]|0;
							$216 = HEAP32[$blobp_vector>>2]|0;
							$217 = (($215) - ($216))|0;
							$218 = $217 >> 2;
							$219 = ($218>>>0)>($i$0$ph97>>>0);
							L37: do {
								if ($219) {
									$220 = $216;
									$224 = $220;$j4$093 = $218;
									while(1) {
										$222 = (($j4$093) + -1)|0;
										$223 = (($224) + ($222<<2)|0);
										$225 = HEAP32[$223>>2]|0;
										$226 = (__ZNK9Rectangle8includesERKS_($10,$225)|0);
										if ($226) {
											$228 = ($225|0)==(0|0);
											if (!($228)) {
												__THREW__ = 0;
												invoke_vi(72,($225|0));
												$229 = __THREW__; __THREW__ = 0;
												$230 = $229&1;
												if ($230) {
													$$lcssa224 = $225;
													label = 50;
													break L4;
												}
												__ZdlPv($225);
											}
											$231 = HEAP32[$blobp_vector>>2]|0;
											$232 = (($231) + ($222<<2)|0);
											$233 = ((($232)) + 4|0);
											$234 = HEAP32[$0>>2]|0;
											$235 = $233;
											$236 = (($234) - ($235))|0;
											$237 = $236 >> 2;
											_memmove(($232|0),($233|0),($236|0))|0;
											$238 = (($232) + ($237<<2)|0);
											$239 = HEAP32[$0>>2]|0;
											$240 = ($239|0)==($238|0);
											if (!($240)) {
												$__new_last2$i$i$i = $238;
												$scevgep$i$i$i = ((($239)) + -4|0);
												$241 = $scevgep$i$i$i;
												$242 = (($241) - ($__new_last2$i$i$i))|0;
												$243 = $242 >>> 2;
												$244 = $243 ^ -1;
												$scevgep4$i$i$i = (($239) + ($244<<2)|0);
												HEAP32[$0>>2] = $scevgep4$i$i$i;
											}
										}
										$227 = ($222>>>0)>($i$0$ph97>>>0);
										if (!($227)) {
											break L37;
										}
										$$pre = HEAP32[$blobp_vector>>2]|0;
										$224 = $$pre;$j4$093 = $222;
									}
								}
							} while(0);
							$221 = ($10|0)==(0|0);
							if (!($221)) {
								__THREW__ = 0;
								invoke_vi(72,($10|0));
								$247 = __THREW__; __THREW__ = 0;
								$248 = $247&1;
								if ($248) {
									$$lcssa245 = $10;
									label = 54;
									break L4;
								}
								__ZdlPv($10);
							}
						}
						$249 = HEAP32[$0>>2]|0;
						$250 = HEAP32[$blobp_vector>>2]|0;
						$251 = (($249) - ($250))|0;
						$252 = $251 >> 2;
						$253 = ($i$0$ph97>>>0)<($252>>>0);
						if ($253) {
							$29 = $249;$7 = $250;
						} else {
							label = 55;
							break L4;
						}
					}
					$22 = (($i$0$ph97) + 1)|0;
					$23 = (($$lcssa233) - ($$lcssa226))|0;
					$24 = $23 >> 2;
					$25 = ($22>>>0)<($24>>>0);
					if ($25) {
						$256 = $$lcssa226;$257 = $$lcssa233;$i$0$ph97 = $22;
					} else {
						label = 55;
						break;
					}
				}
				if ((label|0) == 17) {
					$97 = ___cxa_find_matching_catch_2()|0;
					$98 = tempRet0;
					__ZdlPv($$lcssa241);
					$$03 = $98;$$04 = $97;
					___resumeException($$04|0);
					// unreachable;
				}
				else if ((label|0) == 23) {
					$162 = ___cxa_find_matching_catch_2()|0;
					$163 = tempRet0;
					__ZdlPv($$lcssa242);
					$$03 = $163;$$04 = $162;
					___resumeException($$04|0);
					// unreachable;
				}
				else if ((label|0) == 27) {
					$186 = HEAP32[$0>>2]|0;
					$187 = HEAP32[$blobp_vector>>2]|0;
					$188 = ($186|0)==($187|0);
					$$cast80 = $187;
					$189 = $186;
					L65: do {
						if ($188) {
							$$cast$lcssa = $$cast80;$$lcssa = $186;$190 = $189;
						} else {
							$$cast82 = $$cast80;$262 = $189;$263 = $187;$264 = $186;$j3$081 = 0;
							while(1) {
								$197 = (($$cast82) + ($j3$081<<2)|0);
								$198 = HEAP32[$197>>2]|0;
								$199 = ($198|0)==(0|0);
								if ($199) {
									$205 = $263;$206 = $264;$265 = $262;
								} else {
									__THREW__ = 0;
									invoke_vi(72,($198|0));
									$200 = __THREW__; __THREW__ = 0;
									$201 = $200&1;
									if ($201) {
										$$lcssa215 = $198;
										break;
									}
									__ZdlPv($198);
									$$pre113 = HEAP32[$0>>2]|0;
									$$pre114 = HEAP32[$blobp_vector>>2]|0;
									$202 = $$pre113;
									$205 = $$pre114;$206 = $$pre113;$265 = $202;
								}
								$203 = (($j3$081) + 1)|0;
								$204 = (($206) - ($205))|0;
								$207 = $204 >> 2;
								$208 = ($203>>>0)<($207>>>0);
								$$cast = $205;
								if ($208) {
									$$cast82 = $$cast;$262 = $265;$263 = $205;$264 = $206;$j3$081 = $203;
								} else {
									$$cast$lcssa = $$cast;$$lcssa = $205;$190 = $265;
									break L65;
								}
							}
							$209 = ___cxa_find_matching_catch_2()|0;
							$210 = tempRet0;
							__ZdlPv($$lcssa215);
							$$03 = $210;$$04 = $209;
							___resumeException($$04|0);
							// unreachable;
						}
					} while(0);
					$191 = ($190|0)==($$cast$lcssa|0);
					if (!($191)) {
						$scevgep$i$i$i7 = ((($190)) + -4|0);
						$192 = $scevgep$i$i$i7;
						$193 = (($192) - ($$lcssa))|0;
						$194 = $193 >>> 2;
						$195 = $194 ^ -1;
						$scevgep4$i$i$i8 = (($190) + ($195<<2)|0);
						HEAP32[$0>>2] = $scevgep4$i$i$i8;
					}
					$196 = ($$lcssa243|0)==(0|0);
					if ($196) {
						return;
					}
					__THREW__ = 0;
					invoke_vi(72,($$lcssa243|0));
					$211 = __THREW__; __THREW__ = 0;
					$212 = $211&1;
					if ($212) {
						$213 = ___cxa_find_matching_catch_2()|0;
						$214 = tempRet0;
						__ZdlPv($$lcssa243);
						$$03 = $214;$$04 = $213;
						___resumeException($$04|0);
						// unreachable;
					} else {
						__ZdlPv($$lcssa243);
						return;
					}
				}
				else if ((label|0) == 50) {
					$245 = ___cxa_find_matching_catch_2()|0;
					$246 = tempRet0;
					__ZdlPv($$lcssa224);
					$$03 = $246;$$04 = $245;
					___resumeException($$04|0);
					// unreachable;
				}
				else if ((label|0) == 54) {
					$254 = ___cxa_find_matching_catch_2()|0;
					$255 = tempRet0;
					__ZdlPv($$lcssa245);
					$$03 = $255;$$04 = $254;
					___resumeException($$04|0);
					// unreachable;
				}
				else if ((label|0) == 55) {
					return;
				}
			}
			function __ZN12_GLOBAL__N_116mean_blob_heightERKNSt3__16vectorIP4BlobNS0_9allocatorIS3_EEEE($blobp_vector) {
				$blobp_vector = $blobp_vector|0;
				var $$cast = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$pre = 0, $$pre43 = 0, $$pre43$pre = 0, $$pre44 = 0, $$pre44$pre = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0;
				var $$pre50 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
				var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
				var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
				var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
				var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
				var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i5 = 0, $count$026 = 0, $height_distrib = 0, $i$033 = 0, $i1$029 = 0, $i3$025 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $mean_height$027 = 0, $mean_height$1 = 0, $mean_height$1$lcssa = 0, $mean_height$2 = 0;
				var $mean_height$255 = 0, $or$cond = 0, $or$cond42 = 0, $samples$034 = 0, $samples$1 = 0, $samples$1$lcssa = 0, $samples$230 = 0, $samples$3 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i11 = 0, $scevgep$i$i$i2 = 0, $scevgep$i$i$i6 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i12 = 0, $scevgep4$i$i$i3 = 0, $scevgep4$i$i$i7 = 0, $valid_samples$024 = 0, $valid_samples$1 = 0, $valid_samples$1$lcssa = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$height_distrib = sp;
				HEAP32[$height_distrib>>2] = 0;
				$0 = ((($height_distrib)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($height_distrib)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($blobp_vector)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$blobp_vector>>2]|0;
				$5 = ($3|0)==($4|0);
				$6 = $4;
				if ($5) {
					$mean_height$255 = 0;
					STACKTOP = sp;return ($mean_height$255|0);
				}
				$11 = $6;$147 = 0;$148 = 0;$149 = $6;$150 = $4;$151 = $3;$152 = 0;$42 = 0;$i$033 = 0;$samples$034 = 0;
				L4: while(1) {
					$10 = (($11) + ($i$033<<2)|0);
					$12 = HEAP32[$10>>2]|0;
					$13 = ((($12)) + 12|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = ((($12)) + 4|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = (($14) + 1)|0;
					$18 = (($17) - ($16))|0;
					$19 = ((($12)) + 8|0);
					$20 = HEAP32[$19>>2]|0;
					$21 = HEAP32[$12>>2]|0;
					$22 = (($20) + 1)|0;
					$23 = (($22) - ($21))|0;
					$24 = ($18>>>0)>(9);
					$25 = ($18*3)|0;
					$26 = ($23>>>0)<($25>>>0);
					$or$cond = $24 & $26;
					if ($or$cond) {
						$40 = HEAP32[$0>>2]|0;
						$41 = (($40) - ($42))|0;
						$43 = $41 >> 2;
						$44 = ($18>>>0)<($43>>>0);
						$45 = $40;
						do {
							if ($44) {
								$$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
							} else {
								$46 = (($18) + 1)|0;
								$47 = ($46>>>0)>($43>>>0);
								$48 = $42;
								if ($47) {
									$49 = (($46) - ($43))|0;
									__THREW__ = 0;
									invoke_vii(92,($height_distrib|0),($49|0));
									$50 = __THREW__; __THREW__ = 0;
									$51 = $50&1;
									if ($51) {
										label = 8;
										break L4;
									}
									$$pre = HEAP32[$height_distrib>>2]|0;
									$52 = $$pre;
									$$pre43$pre = HEAP32[$2>>2]|0;
									$$pre44$pre = HEAP32[$blobp_vector>>2]|0;
									$$pre43 = $$pre43$pre;$$pre44 = $$pre44$pre;$163 = $52;$164 = $52;$61 = $$pre;
									break;
								}
								$53 = ($46>>>0)<($43>>>0);
								if ($53) {
									$54 = (($48) + ($46<<2)|0);
									$55 = ($45|0)==($54|0);
									if ($55) {
										$$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
									} else {
										$__new_last2$i$i$i5 = $54;
										$scevgep$i$i$i6 = ((($45)) + -4|0);
										$56 = $scevgep$i$i$i6;
										$57 = (($56) - ($__new_last2$i$i$i5))|0;
										$58 = $57 >>> 2;
										$59 = $58 ^ -1;
										$scevgep4$i$i$i7 = (($45) + ($59<<2)|0);
										HEAP32[$0>>2] = $scevgep4$i$i$i7;
										$$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
									}
								} else {
									$$pre43 = $151;$$pre44 = $150;$163 = $147;$164 = $148;$61 = $152;
								}
							}
						} while(0);
						$60 = (($61) + ($18<<2)|0);
						$62 = HEAP32[$60>>2]|0;
						$63 = (($62) + 1)|0;
						HEAP32[$60>>2] = $63;
						$64 = (($samples$034) + 1)|0;
						$65 = $61;
						$66 = $$pre44;
						$158 = $163;$159 = $164;$160 = $66;$161 = $61;$162 = $65;$69 = $$pre44;$70 = $$pre43;$samples$1 = $64;
					} else {
						$158 = $147;$159 = $148;$160 = $149;$161 = $152;$162 = $42;$69 = $150;$70 = $151;$samples$1 = $samples$034;
					}
					$67 = (($i$033) + 1)|0;
					$68 = (($70) - ($69))|0;
					$71 = $68 >> 2;
					$72 = ($67>>>0)<($71>>>0);
					$73 = $69;
					if ($72) {
						$11 = $73;$147 = $158;$148 = $159;$149 = $160;$150 = $69;$151 = $70;$152 = $161;$42 = $162;$i$033 = $67;$samples$034 = $samples$1;
					} else {
						$$lcssa82 = $158;$$lcssa83 = $159;$$lcssa84 = $160;$$lcssa85 = $69;$$lcssa86 = $70;$$lcssa87 = $161;$samples$1$lcssa = $samples$1;
						label = 3;
						break;
					}
				}
				L18: do {
					if ((label|0) == 3) {
						$$pre45 = HEAP32[$0>>2]|0;
						$7 = $$pre45;
						$8 = ($$lcssa87|0)==($$pre45|0);
						do {
							if ($8) {
								$9 = ($$lcssa86|0)==($$lcssa85|0);
								if ($9) {
									$117 = $7;$119 = $$lcssa82;$141 = $$pre45;$153 = $$pre45;$samples$3 = $samples$1$lcssa;
								} else {
									$154 = $$lcssa82;$155 = $$lcssa85;$156 = $$lcssa86;$157 = $$pre45;$75 = $$lcssa84;$84 = $$lcssa83;$85 = $7;$i1$029 = 0;$samples$230 = $samples$1$lcssa;
									L23: while(1) {
										$74 = (($75) + ($i1$029<<2)|0);
										$76 = HEAP32[$74>>2]|0;
										$77 = ((($76)) + 12|0);
										$78 = HEAP32[$77>>2]|0;
										$79 = ((($76)) + 4|0);
										$80 = HEAP32[$79>>2]|0;
										$81 = (($78) + 1)|0;
										$82 = (($81) - ($80))|0;
										$83 = (($85) - ($84))|0;
										$86 = $83 >> 2;
										$87 = ($82>>>0)<($86>>>0);
										do {
											if ($87) {
												$104 = $157;$110 = $155;$111 = $156;$165 = $154;
											} else {
												$88 = (($82) + 1)|0;
												$89 = ($88>>>0)>($86>>>0);
												$90 = $84;
												$91 = $85;
												if ($89) {
													$92 = (($88) - ($86))|0;
													__THREW__ = 0;
													invoke_vii(92,($height_distrib|0),($92|0));
													$93 = __THREW__; __THREW__ = 0;
													$94 = $93&1;
													if ($94) {
														label = 7;
														break L23;
													}
													$$pre47 = HEAP32[$height_distrib>>2]|0;
													$$pre48 = HEAP32[$2>>2]|0;
													$$pre49 = HEAP32[$blobp_vector>>2]|0;
													$95 = $$pre47;
													$104 = $$pre47;$110 = $$pre49;$111 = $$pre48;$165 = $95;
													break;
												}
												$96 = ($88>>>0)<($86>>>0);
												if ($96) {
													$97 = (($90) + ($88<<2)|0);
													$98 = ($91|0)==($97|0);
													if ($98) {
														$104 = $157;$110 = $155;$111 = $156;$165 = $154;
													} else {
														$__new_last2$i$i$i = $97;
														$scevgep$i$i$i2 = ((($91)) + -4|0);
														$99 = $scevgep$i$i$i2;
														$100 = (($99) - ($__new_last2$i$i$i))|0;
														$101 = $100 >>> 2;
														$102 = $101 ^ -1;
														$scevgep4$i$i$i3 = (($91) + ($102<<2)|0);
														HEAP32[$0>>2] = $scevgep4$i$i$i3;
														$104 = $157;$110 = $155;$111 = $156;$165 = $154;
													}
												} else {
													$104 = $157;$110 = $155;$111 = $156;$165 = $154;
												}
											}
										} while(0);
										$103 = (($104) + ($82<<2)|0);
										$105 = HEAP32[$103>>2]|0;
										$106 = (($105) + 1)|0;
										HEAP32[$103>>2] = $106;
										$107 = (($samples$230) + 1)|0;
										$108 = (($i1$029) + 1)|0;
										$109 = (($111) - ($110))|0;
										$112 = $109 >> 2;
										$113 = ($108>>>0)<($112>>>0);
										if (!($113)) {
											$$lcssa = $165;$$lcssa80 = $104;$$lcssa81 = $107;
											label = 31;
											break;
										}
										$114 = $104;
										$115 = $110;
										$$pre46 = HEAP32[$0>>2]|0;
										$154 = $165;$155 = $110;$156 = $111;$157 = $104;$75 = $115;$84 = $114;$85 = $$pre46;$i1$029 = $108;$samples$230 = $107;
									}
									if ((label|0) == 7) {
										$27 = ___cxa_find_matching_catch_2()|0;
										$28 = tempRet0;
										$lpad$phi$index = $27;$lpad$phi$index2 = $28;
										break L18;
									}
									else if ((label|0) == 31) {
										$$pre50 = HEAP32[$0>>2]|0;
										$116 = $$pre50;
										$117 = $$pre50;$119 = $$lcssa;$141 = $116;$153 = $$lcssa80;$samples$3 = $$lcssa81;
										break;
									}
								}
							} else {
								$117 = $7;$119 = $$lcssa82;$141 = $$pre45;$153 = $$lcssa87;$samples$3 = $samples$1$lcssa;
							}
						} while(0);
						$118 = ($117|0)==($119|0);
						if ($118) {
							$138 = $153;$mean_height$2 = 0;
						} else {
							$120 = HEAP32[$height_distrib>>2]|0;
							$$cast = $120;
							$121 = (($117) - ($$cast))|0;
							$122 = $121 >> 2;
							$123 = ($samples$3*9)|0;
							$count$026 = 0;$i3$025 = 0;$mean_height$027 = 0;$valid_samples$024 = 0;
							while(1) {
								$125 = (($120) + ($i3$025<<2)|0);
								$126 = HEAP32[$125>>2]|0;
								$127 = (($126) + ($count$026))|0;
								$128 = ($127*10)|0;
								$129 = ($128>>>0)>=($samples$3>>>0);
								$130 = ($count$026*10)|0;
								$131 = ($130>>>0)<($123>>>0);
								$or$cond42 = $129 & $131;
								if ($or$cond42) {
									$132 = Math_imul($126, $i3$025)|0;
									$133 = (($132) + ($mean_height$027))|0;
									$134 = (($126) + ($valid_samples$024))|0;
									$mean_height$1 = $133;$valid_samples$1 = $134;
								} else {
									$mean_height$1 = $mean_height$027;$valid_samples$1 = $valid_samples$024;
								}
								$135 = (($i3$025) + 1)|0;
								$136 = ($135>>>0)<($122>>>0);
								if ($136) {
									$count$026 = $127;$i3$025 = $135;$mean_height$027 = $mean_height$1;$valid_samples$024 = $valid_samples$1;
								} else {
									$mean_height$1$lcssa = $mean_height$1;$valid_samples$1$lcssa = $valid_samples$1;
									break;
								}
							}
							$124 = ($valid_samples$1$lcssa|0)==(0);
							if ($124) {
								$138 = $120;$mean_height$2 = $mean_height$1$lcssa;
							} else {
								$137 = (($mean_height$1$lcssa|0) / ($valid_samples$1$lcssa|0))&-1;
								$138 = $120;$mean_height$2 = $137;
							}
						}
						$139 = ($138|0)==(0|0);
						$140 = $138;
						if ($139) {
							$mean_height$255 = $mean_height$2;
							STACKTOP = sp;return ($mean_height$255|0);
						}
						$142 = ($141|0)==($138|0);
						if (!($142)) {
							$scevgep$i$i$i = ((($141)) + -4|0);
							$143 = $scevgep$i$i$i;
							$144 = (($143) - ($140))|0;
							$145 = $144 >>> 2;
							$146 = $145 ^ -1;
							$scevgep4$i$i$i = (($141) + ($146<<2)|0);
							HEAP32[$0>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($138);
						$mean_height$255 = $mean_height$2;
						STACKTOP = sp;return ($mean_height$255|0);
					}
					else if ((label|0) == 8) {
						$29 = ___cxa_find_matching_catch_2()|0;
						$30 = tempRet0;
						$lpad$phi$index = $29;$lpad$phi$index2 = $30;
					}
				} while(0);
				$31 = HEAP32[$height_distrib>>2]|0;
				$32 = ($31|0)==(0|0);
				$33 = $31;
				if ($32) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$34 = HEAP32[$0>>2]|0;
				$35 = ($34|0)==($31|0);
				if (!($35)) {
					$scevgep$i$i$i11 = ((($34)) + -4|0);
					$36 = $scevgep$i$i$i11;
					$37 = (($36) - ($33))|0;
					$38 = $37 >>> 2;
					$39 = $38 ^ -1;
					$scevgep4$i$i$i12 = (($34) + ($39<<2)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i12;
				}
				__ZdlPv($31);
				___resumeException($lpad$phi$index|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i4 = 0, $$0$i5 = 0, $$in = 0, $$pre = 0, $$pre6 = 0, $$promoted1$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $scevgep$i3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = $4 >> 2;
				$6 = ($5>>>0)<($__n>>>0);
				if (!($6)) {
					$7 = $3;
					$$promoted1$i = $3;
					$8 = $__n << 2;
					_memset(($$promoted1$i|0),0,($8|0))|0;
					$scevgep$i = (($7) + ($__n<<2)|0);
					HEAP32[$2>>2] = $scevgep$i;
					return;
				}
				$9 = HEAP32[$this>>2]|0;
				$10 = (($3) - ($9))|0;
				$11 = $10 >> 2;
				$12 = (($11) + ($__n))|0;
				$13 = ($12>>>0)>(1073741823);
				if ($13) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre6 = HEAP32[$this>>2]|0;
					$$in = $$pre6;$15 = $$pre;
				} else {
					$$in = $9;$15 = $1;
				}
				$14 = (($15) - ($$in))|0;
				$16 = $14 >> 2;
				$17 = ($16>>>0)<(536870911);
				if ($17) {
					$21 = $14 >> 1;
					$22 = ($21>>>0)<($12>>>0);
					$23 = $22 ? $12 : $21;
					$24 = HEAP32[$2>>2]|0;
					$25 = (($24) - ($$in))|0;
					$26 = $25 >> 2;
					$27 = ($23|0)==(0);
					if ($27) {
						$$0$i5 = 0;$31 = 0;$32 = $26;$38 = $24;
					} else {
						$$0$i4 = $23;$46 = $24;$47 = $26;
						label = 8;
					}
				} else {
					$18 = HEAP32[$2>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$$0$i4 = 1073741823;$46 = $18;$47 = $20;
					label = 8;
				}
				if ((label|0) == 8) {
					$28 = $$0$i4 << 2;
					$29 = (__Znwj($28)|0);
					$$0$i5 = $$0$i4;$31 = $29;$32 = $47;$38 = $46;
				}
				$30 = (($31) + ($32<<2)|0);
				$33 = (($31) + ($$0$i5<<2)|0);
				$34 = $33;
				$35 = $__n << 2;
				_memset(($30|0),0,($35|0))|0;
				$scevgep$i3 = (($30) + ($__n<<2)|0);
				$36 = $scevgep$i3;
				$37 = (($38) - ($$in))|0;
				$39 = $37 >> 2;
				$40 = (0 - ($39))|0;
				$41 = (($30) + ($40<<2)|0);
				$42 = $41;
				$43 = $$in;
				_memcpy(($41|0),($43|0),($37|0))|0;
				HEAP32[$this>>2] = $42;
				HEAP32[$2>>2] = $36;
				HEAP32[$0>>2] = $34;
				$44 = ($$in|0)==(0);
				if ($44) {
					return;
				}
				$45 = $$in;
				__ZdlPv($45);
				return;
			}
			function __ZN4MaskC2ERK9Rectangle($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				;HEAP32[$this>>2]=HEAP32[$re>>2]|0;HEAP32[$this+4>>2]=HEAP32[$re+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$re+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$re+12>>2]|0;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 12|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($2) + 1)|0;
				$6 = (($5) - ($4))|0;
				$7 = HEAP32[$re>>2]|0;
				$8 = ((($re)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				HEAP32[$0>>2] = 0;
				$10 = ((($this)) + 20|0);
				HEAP32[$10>>2] = 0;
				$11 = ((($this)) + 24|0);
				HEAP32[$11>>2] = 0;
				$12 = ($5|0)==($4|0);
				if ($12) {
					return;
				}
				$13 = ($6>>>0)>(536870911);
				if ($13) {
					__THREW__ = 0;
					invoke_vi(46,($0|0));
					$14 = __THREW__; __THREW__ = 0;
					$15 = $14&1;
					if (!($15)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					$16 = $6 << 3;
					__THREW__ = 0;
					$17 = (invoke_ii(29,($16|0))|0);
					$18 = __THREW__; __THREW__ = 0;
					$19 = $18&1;
					if (!($19)) {
						HEAP32[$10>>2] = $17;
						HEAP32[$0>>2] = $17;
						$20 = (($17) + ($6<<3)|0);
						$21 = ((($this)) + 24|0);
						HEAP32[$21>>2] = $20;
						$$0$i$i = $6;$22 = $17;
						while(1) {
							$23 = $22;
							$24 = $23;
							HEAP32[$24>>2] = $7;
							$25 = (($23) + 4)|0;
							$26 = $25;
							HEAP32[$26>>2] = $9;
							$27 = HEAP32[$10>>2]|0;
							$28 = ((($27)) + 8|0);
							HEAP32[$10>>2] = $28;
							$29 = (($$0$i$i) + -1)|0;
							$30 = ($29|0)==(0);
							if ($30) {
								break;
							} else {
								$$0$i$i = $29;$22 = $28;
							}
						}
						return;
					}
				}
				$31 = ___cxa_find_matching_catch_2()|0;
				$32 = tempRet0;
				$33 = HEAP32[$0>>2]|0;
				$34 = ($33|0)==(0|0);
				$35 = $33;
				if ($34) {
					___resumeException($31|0);
					// unreachable;
				}
				$36 = HEAP32[$10>>2]|0;
				$37 = ($36|0)==($33|0);
				if (!($37)) {
					$scevgep$i$i$i$i = ((($36)) + -8|0);
					$38 = $scevgep$i$i$i$i;
					$39 = (($38) - ($35))|0;
					$40 = $39 >>> 3;
					$41 = $40 ^ -1;
					$scevgep4$i$i$i$i = (($36) + ($41<<3)|0);
					HEAP32[$10>>2] = $scevgep4$i$i$i$i;
				}
				__ZdlPv($33);
				___resumeException($31|0);
				// unreachable;
			}
			function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEEC2ERKS4_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($__x)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$__x>>2]|0;
				$5 = (($3) - ($4))|0;
				$6 = $5 >> 3;
				$7 = ($6|0)==(0);
				if ($7) {
					return;
				}
				$8 = ($6>>>0)>(536870911);
				if ($8) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$9 = __THREW__; __THREW__ = 0;
					$10 = $9&1;
					if (!($10)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					$11 = (invoke_ii(29,($5|0))|0);
					$12 = __THREW__; __THREW__ = 0;
					$13 = $12&1;
					if (!($13)) {
						HEAP32[$0>>2] = $11;
						HEAP32[$this>>2] = $11;
						$14 = (($11) + ($6<<3)|0);
						$15 = ((($this)) + 8|0);
						HEAP32[$15>>2] = $14;
						$16 = HEAP32[$__x>>2]|0;
						$17 = HEAP32[$2>>2]|0;
						$18 = ($16|0)==($17|0);
						if ($18) {
							return;
						}
						$$01$i = $16;$25 = $11;
						while(1) {
							$19 = $$01$i;
							$20 = $19;
							$21 = HEAP32[$20>>2]|0;
							$22 = (($19) + 4)|0;
							$23 = $22;
							$24 = HEAP32[$23>>2]|0;
							$26 = $25;
							$27 = $26;
							HEAP32[$27>>2] = $21;
							$28 = (($26) + 4)|0;
							$29 = $28;
							HEAP32[$29>>2] = $24;
							$30 = HEAP32[$0>>2]|0;
							$31 = ((($30)) + 8|0);
							HEAP32[$0>>2] = $31;
							$32 = ((($$01$i)) + 8|0);
							$33 = ($32|0)==($17|0);
							if ($33) {
								break;
							} else {
								$$01$i = $32;$25 = $31;
							}
						}
						return;
					}
				}
				$34 = ___cxa_find_matching_catch_2()|0;
				$35 = tempRet0;
				$36 = HEAP32[$this>>2]|0;
				$37 = ($36|0)==(0|0);
				$38 = $36;
				if ($37) {
					___resumeException($34|0);
					// unreachable;
				}
				$39 = HEAP32[$0>>2]|0;
				$40 = ($39|0)==($36|0);
				if (!($40)) {
					$scevgep$i$i$i = ((($39)) + -8|0);
					$41 = $scevgep$i$i$i;
					$42 = (($41) - ($38))|0;
					$43 = $42 >>> 3;
					$44 = $43 ^ -1;
					$scevgep4$i$i$i = (($39) + ($44<<3)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($36);
				___resumeException($34|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($__x)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$__x>>2]|0;
				$5 = (($3) - ($4))|0;
				$6 = $5 >> 2;
				$7 = ($6|0)==(0);
				if ($7) {
					return;
				}
				$8 = ($6>>>0)>(1073741823);
				if ($8) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$9 = __THREW__; __THREW__ = 0;
					$10 = $9&1;
					if (!($10)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					$11 = (invoke_ii(29,($5|0))|0);
					$12 = __THREW__; __THREW__ = 0;
					$13 = $12&1;
					if (!($13)) {
						HEAP32[$0>>2] = $11;
						HEAP32[$this>>2] = $11;
						$14 = (($11) + ($6<<2)|0);
						$15 = ((($this)) + 8|0);
						HEAP32[$15>>2] = $14;
						$16 = HEAP32[$__x>>2]|0;
						$17 = HEAP32[$2>>2]|0;
						$18 = ($16|0)==($17|0);
						if ($18) {
							return;
						}
						$$01$i = $16;$20 = $11;
						while(1) {
							$19 = HEAP32[$$01$i>>2]|0;
							HEAP32[$20>>2] = $19;
							$21 = HEAP32[$0>>2]|0;
							$22 = ((($21)) + 4|0);
							HEAP32[$0>>2] = $22;
							$23 = ((($$01$i)) + 4|0);
							$24 = ($23|0)==($17|0);
							if ($24) {
								break;
							} else {
								$$01$i = $23;$20 = $22;
							}
						}
						return;
					}
				}
				$25 = ___cxa_find_matching_catch_2()|0;
				$26 = tempRet0;
				$27 = HEAP32[$this>>2]|0;
				$28 = ($27|0)==(0|0);
				$29 = $27;
				if ($28) {
					___resumeException($25|0);
					// unreachable;
				}
				$30 = HEAP32[$0>>2]|0;
				$31 = ($30|0)==($27|0);
				if (!($31)) {
					$scevgep$i$i$i = ((($30)) + -4|0);
					$32 = $scevgep$i$i$i;
					$33 = (($32) - ($29))|0;
					$34 = $33 >>> 2;
					$35 = $34 ^ -1;
					$scevgep4$i$i$i = (($30) + ($35<<2)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($27);
				___resumeException($25|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPS2_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueES9_E4typeENS7_IPKS2_EESB_SB_($this,$__position,$__first,$__last) {
				$this = $this|0;
				$__position = $__position|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i24 = 0, $$0$i25 = 0, $$in = 0, $$in$i = 0, $$in28 = 0, $$lcssa = 0, $$pre = 0, $$pre26 = 0, $$pre27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
				var $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
				var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0;
				var $__m$sroa$0$023 = 0, $__p$0 = 0, $__v$sroa$12$0 = 0, $__v$sroa$12$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 2;
				$5 = (($0) + ($4<<2)|0);
				$6 = HEAP32[$__first>>2]|0;
				$7 = HEAP32[$__last>>2]|0;
				$8 = (($7) - ($6))|0;
				$9 = $8 >> 2;
				$10 = ($8|0)>(0);
				$11 = $6;
				$12 = $7;
				if (!($10)) {
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$13 = ((($this)) + 8|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($this)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = $16;
				$18 = (($14) - ($17))|0;
				$19 = $18 >> 2;
				$20 = ($9|0)>($19|0);
				if (!($20)) {
					$21 = $5;
					$22 = (($17) - ($21))|0;
					$23 = $22 >> 2;
					$24 = ($9|0)>($23|0);
					if ($24) {
						$25 = (($11) + ($23<<2)|0);
						$26 = $25;
						$27 = ($25|0)==($12|0);
						if ($27) {
							$106 = $16;
						} else {
							$$in28 = $16;$29 = $25;
							while(1) {
								$28 = HEAP32[$29>>2]|0;
								HEAP32[$$in28>>2] = $28;
								$30 = HEAP32[$15>>2]|0;
								$31 = ((($30)) + 4|0);
								HEAP32[$15>>2] = $31;
								$32 = ((($29)) + 4|0);
								$33 = ($32|0)==($12|0);
								if ($33) {
									$106 = $31;
									break;
								} else {
									$$in28 = $31;$29 = $32;
								}
							}
						}
						$34 = ($22|0)>(0);
						if ($34) {
							$36 = $106;$__m$sroa$0$023 = $26;
						} else {
							$__p$0 = $5;
							return ($__p$0|0);
						}
					} else {
						$36 = $16;$__m$sroa$0$023 = $7;
					}
					$35 = (($5) + ($9<<2)|0);
					$37 = $36;
					$38 = $35;
					$39 = (($37) - ($38))|0;
					$40 = $39 >> 2;
					$41 = (($5) + ($40<<2)|0);
					$42 = ($41>>>0)<($16>>>0);
					if ($42) {
						$$in$i = $36;$__i$01$i = $41;
						while(1) {
							$43 = HEAP32[$__i$01$i>>2]|0;
							HEAP32[$$in$i>>2] = $43;
							$44 = ((($__i$01$i)) + 4|0);
							$45 = HEAP32[$15>>2]|0;
							$46 = ((($45)) + 4|0);
							HEAP32[$15>>2] = $46;
							$47 = ($44>>>0)<($16>>>0);
							if ($47) {
								$$in$i = $46;$__i$01$i = $44;
							} else {
								break;
							}
						}
					}
					$48 = (0 - ($40))|0;
					$49 = (($36) + ($48<<2)|0);
					_memmove(($49|0),($5|0),($39|0))|0;
					$50 = HEAP32[$__first>>2]|0;
					$51 = $50;
					$52 = (($__m$sroa$0$023) - ($51))|0;
					_memmove(($5|0),($50|0),($52|0))|0;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$53 = (($17) - ($1))|0;
				$54 = $53 >> 2;
				$55 = (($54) + ($9))|0;
				$56 = ($55>>>0)>(1073741823);
				if ($56) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$13>>2]|0;
					$$pre26 = HEAP32[$this>>2]|0;
					$57 = $$pre26;
					$107 = $57;$59 = $$pre26;$60 = $$pre;
				} else {
					$107 = $0;$59 = $1;$60 = $14;
				}
				$58 = (($60) - ($59))|0;
				$61 = $58 >> 2;
				$62 = ($61>>>0)<(536870911);
				if ($62) {
					$66 = $58 >> 1;
					$67 = ($66>>>0)<($55>>>0);
					$68 = $67 ? $55 : $66;
					$69 = $5;
					$70 = (($69) - ($59))|0;
					$71 = $70 >> 2;
					$72 = ($68|0)==(0);
					if ($72) {
						$$0$i25 = 0;$76 = 0;$77 = $71;$92 = $69;
					} else {
						$$0$i24 = $68;$108 = $71;$109 = $69;
						label = 15;
					}
				} else {
					$63 = $5;
					$64 = (($63) - ($59))|0;
					$65 = $64 >> 2;
					$$0$i24 = 1073741823;$108 = $65;$109 = $63;
					label = 15;
				}
				if ((label|0) == 15) {
					$73 = $$0$i24 << 2;
					$74 = (__Znwj($73)|0);
					$$0$i25 = $$0$i24;$76 = $74;$77 = $108;$92 = $109;
				}
				$75 = (($76) + ($77<<2)|0);
				$78 = $75;
				$79 = (($76) + ($$0$i25<<2)|0);
				$80 = $79;
				$81 = ($11|0)==($12|0);
				if ($81) {
					$89 = $107;$__v$sroa$12$1 = $78;
				} else {
					$$in = $75;$83 = $11;$__v$sroa$12$0 = $78;
					while(1) {
						$82 = HEAP32[$83>>2]|0;
						HEAP32[$$in>>2] = $82;
						$84 = $__v$sroa$12$0;
						$85 = ((($84)) + 4|0);
						$86 = $85;
						$87 = ((($83)) + 4|0);
						$88 = ($87|0)==($12|0);
						if ($88) {
							$$lcssa = $86;
							break;
						} else {
							$$in = $85;$83 = $87;$__v$sroa$12$0 = $86;
						}
					}
					$$pre27 = HEAP32[$this>>2]|0;
					$89 = $$pre27;$__v$sroa$12$1 = $$lcssa;
				}
				$90 = $89;
				$91 = (($92) - ($90))|0;
				$93 = $91 >> 2;
				$94 = (0 - ($93))|0;
				$95 = (($75) + ($94<<2)|0);
				$96 = $95;
				_memcpy(($95|0),($89|0),($91|0))|0;
				$97 = HEAP32[$15>>2]|0;
				$98 = (($97) - ($92))|0;
				$99 = $98 >> 2;
				$100 = $__v$sroa$12$1;
				_memcpy(($100|0),($5|0),($98|0))|0;
				$101 = $__v$sroa$12$1;
				$102 = (($101) + ($99<<2)|0);
				$103 = $102;
				$104 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $96;
				HEAP32[$15>>2] = $103;
				HEAP32[$13>>2] = $80;
				$105 = ($104|0)==(0|0);
				if ($105) {
					$__p$0 = $75;
					return ($__p$0|0);
				}
				__ZdlPv($104);
				$__p$0 = $75;
				return ($__p$0|0);
			}
			function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
				var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $__last;
				$1 = $__first;
				$2 = (($0) - ($1))|0;
				$3 = $2 >> 3;
				$4 = ((($this)) + 8|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$this>>2]|0;
				$7 = (($5) - ($6))|0;
				$8 = $7 >> 3;
				$9 = ($3>>>0)>($8>>>0);
				$10 = $6;
				if (!($9)) {
					$11 = ((($this)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) - ($6))|0;
					$14 = $13 >> 3;
					$15 = ($3>>>0)>($14>>>0);
					$16 = (($__first) + ($14<<3)|0);
					$$__last = $15 ? $16 : $__last;
					$17 = $$__last;
					$18 = (($17) - ($1))|0;
					$19 = $18 >> 3;
					$20 = $6;
					_memmove(($20|0),($__first|0),($18|0))|0;
					$21 = (($10) + ($19<<3)|0);
					if (!($15)) {
						$38 = HEAP32[$11>>2]|0;
						$39 = ($38|0)==($21|0);
						if ($39) {
							return;
						}
						$__new_last2$i$i = $21;
						$scevgep$i$i = ((($38)) + -8|0);
						$40 = $scevgep$i$i;
						$41 = (($40) - ($__new_last2$i$i))|0;
						$42 = $41 >>> 3;
						$43 = $42 ^ -1;
						$scevgep4$i$i = (($38) + ($43<<3)|0);
						HEAP32[$11>>2] = $scevgep4$i$i;
						return;
					}
					$22 = ($$__last|0)==($__last|0);
					if ($22) {
						return;
					}
					$$pre$i1 = HEAP32[$11>>2]|0;
					$$01$i3 = $16;$29 = $$pre$i1;
					while(1) {
						$23 = $$01$i3;
						$24 = $23;
						$25 = HEAP32[$24>>2]|0;
						$26 = (($23) + 4)|0;
						$27 = $26;
						$28 = HEAP32[$27>>2]|0;
						$30 = $29;
						$31 = $30;
						HEAP32[$31>>2] = $25;
						$32 = (($30) + 4)|0;
						$33 = $32;
						HEAP32[$33>>2] = $28;
						$34 = HEAP32[$11>>2]|0;
						$35 = ((($34)) + 8|0);
						HEAP32[$11>>2] = $35;
						$36 = ((($$01$i3)) + 8|0);
						$37 = ($36|0)==($__last|0);
						if ($37) {
							break;
						} else {
							$$01$i3 = $36;$29 = $35;
						}
					}
					return;
				}
				$44 = ($6|0)==(0);
				$45 = $6;
				if ($44) {
					$83 = $5;
				} else {
					$46 = ((($this)) + 4|0);
					$47 = HEAP32[$46>>2]|0;
					$48 = ($47|0)==($10|0);
					if (!($48)) {
						$scevgep$i$i$i$i = ((($47)) + -8|0);
						$49 = $scevgep$i$i$i$i;
						$50 = (($49) - ($6))|0;
						$51 = $50 >>> 3;
						$52 = $51 ^ -1;
						$scevgep4$i$i$i$i = (($47) + ($52<<3)|0);
						HEAP32[$46>>2] = $scevgep4$i$i$i$i;
					}
					__ZdlPv($45);
					HEAP32[$4>>2] = 0;
					HEAP32[$46>>2] = 0;
					HEAP32[$this>>2] = 0;
					$83 = 0;
				}
				$53 = ($3>>>0)>(536870911);
				if ($53) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$4>>2]|0;
					$$pre8 = HEAP32[$this>>2]|0;
					$55 = $$pre8;$56 = $$pre;
				} else {
					$55 = 0;$56 = $83;
				}
				$54 = (($56) - ($55))|0;
				$57 = $54 >> 3;
				$58 = ($57>>>0)<(268435455);
				if ($58) {
					$59 = $54 >> 2;
					$60 = ($59>>>0)<($3>>>0);
					$61 = $60 ? $3 : $59;
					$62 = ($61>>>0)>(536870911);
					if ($62) {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$0$i5 = $61;
					} else {
						$$0$i5 = $61;
					}
				} else {
					$$0$i5 = 536870911;
				}
				$63 = $$0$i5 << 3;
				$64 = (__Znwj($63)|0);
				$65 = ((($this)) + 4|0);
				HEAP32[$65>>2] = $64;
				HEAP32[$this>>2] = $64;
				$66 = (($64) + ($$0$i5<<3)|0);
				HEAP32[$4>>2] = $66;
				$67 = ($__first|0)==($__last|0);
				if ($67) {
					return;
				}
				$$01$i = $__first;$74 = $64;
				while(1) {
					$68 = $$01$i;
					$69 = $68;
					$70 = HEAP32[$69>>2]|0;
					$71 = (($68) + 4)|0;
					$72 = $71;
					$73 = HEAP32[$72>>2]|0;
					$75 = $74;
					$76 = $75;
					HEAP32[$76>>2] = $70;
					$77 = (($75) + 4)|0;
					$78 = $77;
					HEAP32[$78>>2] = $73;
					$79 = HEAP32[$65>>2]|0;
					$80 = ((($79)) + 8|0);
					HEAP32[$65>>2] = $80;
					$81 = ((($$01$i)) + 8|0);
					$82 = ($81|0)==($__last|0);
					if ($82) {
						break;
					} else {
						$$01$i = $81;$74 = $80;
					}
				}
				return;
			}
			function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $__last;
				$1 = $__first;
				$2 = (($0) - ($1))|0;
				$3 = $2 >> 2;
				$4 = ((($this)) + 8|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$this>>2]|0;
				$7 = (($5) - ($6))|0;
				$8 = $7 >> 2;
				$9 = ($3>>>0)>($8>>>0);
				$10 = $6;
				if (!($9)) {
					$11 = ((($this)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) - ($6))|0;
					$14 = $13 >> 2;
					$15 = ($3>>>0)>($14>>>0);
					$16 = (($__first) + ($14<<2)|0);
					$$__last = $15 ? $16 : $__last;
					$17 = $$__last;
					$18 = (($17) - ($1))|0;
					$19 = $18 >> 2;
					$20 = $6;
					_memmove(($20|0),($__first|0),($18|0))|0;
					$21 = (($10) + ($19<<2)|0);
					if (!($15)) {
						$29 = HEAP32[$11>>2]|0;
						$30 = ($29|0)==($21|0);
						if ($30) {
							return;
						}
						$__new_last2$i$i = $21;
						$scevgep$i$i = ((($29)) + -4|0);
						$31 = $scevgep$i$i;
						$32 = (($31) - ($__new_last2$i$i))|0;
						$33 = $32 >>> 2;
						$34 = $33 ^ -1;
						$scevgep4$i$i = (($29) + ($34<<2)|0);
						HEAP32[$11>>2] = $scevgep4$i$i;
						return;
					}
					$22 = ($$__last|0)==($__last|0);
					if ($22) {
						return;
					}
					$$pre$i1 = HEAP32[$11>>2]|0;
					$$01$i3 = $16;$24 = $$pre$i1;
					while(1) {
						$23 = HEAP32[$$01$i3>>2]|0;
						HEAP32[$24>>2] = $23;
						$25 = HEAP32[$11>>2]|0;
						$26 = ((($25)) + 4|0);
						HEAP32[$11>>2] = $26;
						$27 = ((($$01$i3)) + 4|0);
						$28 = ($27|0)==($__last|0);
						if ($28) {
							break;
						} else {
							$$01$i3 = $27;$24 = $26;
						}
					}
					return;
				}
				$35 = ($6|0)==(0);
				$36 = $6;
				if ($35) {
					$65 = $5;
				} else {
					$37 = ((($this)) + 4|0);
					$38 = HEAP32[$37>>2]|0;
					$39 = ($38|0)==($10|0);
					if (!($39)) {
						$scevgep$i$i$i$i = ((($38)) + -4|0);
						$40 = $scevgep$i$i$i$i;
						$41 = (($40) - ($6))|0;
						$42 = $41 >>> 2;
						$43 = $42 ^ -1;
						$scevgep4$i$i$i$i = (($38) + ($43<<2)|0);
						HEAP32[$37>>2] = $scevgep4$i$i$i$i;
					}
					__ZdlPv($36);
					HEAP32[$4>>2] = 0;
					HEAP32[$37>>2] = 0;
					HEAP32[$this>>2] = 0;
					$65 = 0;
				}
				$44 = ($3>>>0)>(1073741823);
				if ($44) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$4>>2]|0;
					$$pre8 = HEAP32[$this>>2]|0;
					$46 = $$pre8;$47 = $$pre;
				} else {
					$46 = 0;$47 = $65;
				}
				$45 = (($47) - ($46))|0;
				$48 = $45 >> 2;
				$49 = ($48>>>0)<(536870911);
				if ($49) {
					$50 = $45 >> 1;
					$51 = ($50>>>0)<($3>>>0);
					$52 = $51 ? $3 : $50;
					$53 = ($52>>>0)>(1073741823);
					if ($53) {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$0$i5 = $52;
					} else {
						$$0$i5 = $52;
					}
				} else {
					$$0$i5 = 1073741823;
				}
				$54 = $$0$i5 << 2;
				$55 = (__Znwj($54)|0);
				$56 = ((($this)) + 4|0);
				HEAP32[$56>>2] = $55;
				HEAP32[$this>>2] = $55;
				$57 = (($55) + ($$0$i5<<2)|0);
				HEAP32[$4>>2] = $57;
				$58 = ($__first|0)==($__last|0);
				if ($58) {
					return;
				}
				$$01$i = $__first;$60 = $55;
				while(1) {
					$59 = HEAP32[$$01$i>>2]|0;
					HEAP32[$60>>2] = $59;
					$61 = HEAP32[$56>>2]|0;
					$62 = ((($61)) + 4|0);
					HEAP32[$56>>2] = $62;
					$63 = ((($$01$i)) + 4|0);
					$64 = ($63|0)==($__last|0);
					if ($64) {
						break;
					} else {
						$$01$i = $63;$60 = $62;
					}
				}
				return;
			}
			function __ZNSt3__16vectorIP9TextblockNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(1073741823);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 2;
				$11 = ($10>>>0)<(536870911);
				if ($11) {
					$15 = $9 >> 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
					} else {
						$$0$i1 = $17;$41 = $18;$42 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 2;
					$$0$i1 = 1073741823;$41 = $12;$42 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 2;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
				}
				$24 = (($25) + ($26<<2)|0);
				$27 = (($25) + ($$0$i2<<2)|0);
				$28 = $27;
				$29 = HEAP32[$__x>>2]|0;
				HEAP32[$24>>2] = $29;
				$30 = ((($24)) + 4|0);
				$31 = $30;
				$32 = (($33) - ($$in))|0;
				$34 = $32 >> 2;
				$35 = (0 - ($34))|0;
				$36 = (($24) + ($35<<2)|0);
				$37 = $36;
				$38 = $$in;
				_memcpy(($36|0),($38|0),($32|0))|0;
				HEAP32[$this>>2] = $37;
				HEAP32[$0>>2] = $31;
				HEAP32[$7>>2] = $28;
				$39 = ($$in|0)==(0);
				if ($39) {
					return;
				}
				$40 = $$in;
				__ZdlPv($40);
				return;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($__x)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$__x>>2]|0;
				$5 = (($3) - ($4))|0;
				$6 = (($5|0) / 12)&-1;
				$7 = ($3|0)==($4|0);
				if ($7) {
					return;
				}
				$8 = ($6>>>0)>(357913941);
				if ($8) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$9 = __THREW__; __THREW__ = 0;
					$10 = $9&1;
					if (!($10)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					$11 = (invoke_ii(29,($5|0))|0);
					$12 = __THREW__; __THREW__ = 0;
					$13 = $12&1;
					if (!($13)) {
						HEAP32[$0>>2] = $11;
						HEAP32[$this>>2] = $11;
						$14 = (($11) + (($6*12)|0)|0);
						$15 = ((($this)) + 8|0);
						HEAP32[$15>>2] = $14;
						$16 = HEAP32[$__x>>2]|0;
						$17 = HEAP32[$2>>2]|0;
						__THREW__ = 0;
						invoke_viii(93,($this|0),($16|0),($17|0));
						$18 = __THREW__; __THREW__ = 0;
						$19 = $18&1;
						if (!($19)) {
							return;
						}
					}
				}
				$20 = ___cxa_find_matching_catch_2()|0;
				$21 = tempRet0;
				$22 = HEAP32[$this>>2]|0;
				$23 = ($22|0)==(0|0);
				if ($23) {
					___resumeException($20|0);
					// unreachable;
				}
				$24 = HEAP32[$0>>2]|0;
				$25 = ($24|0)==($22|0);
				if ($25) {
					$35 = $22;
				} else {
					$27 = $24;
					while(1) {
						$26 = ((($27)) + -12|0);
						HEAP32[$0>>2] = $26;
						$28 = HEAP32[$26>>2]|0;
						$29 = ($28|0)==(0|0);
						if ($29) {
							$30 = $26;
						} else {
							$32 = ((($27)) + -8|0);
							$33 = HEAP32[$32>>2]|0;
							$34 = ($33|0)==($28|0);
							if (!($34)) {
								HEAP32[$32>>2] = $28;
							}
							__ZdlPv($28);
							$$pre$i$i$i = HEAP32[$0>>2]|0;
							$30 = $$pre$i$i$i;
						}
						$31 = ($30|0)==($22|0);
						if ($31) {
							break;
						} else {
							$27 = $30;
						}
					}
					$$pre$i = HEAP32[$this>>2]|0;
					$35 = $$pre$i;
				}
				__ZdlPv($35);
				___resumeException($20|0);
				// unreachable;
			}
			function __ZN8TextpageD2Ev($this) {
				$this = $this|0;
				var $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$08$in = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i2 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				$6 = $3;
				do {
					if ($5) {
						$7 = $4 >> 2;
						$18 = $6;$i$08$in = $7;
						while(1) {
							$i$08 = (($i$08$in) + -1)|0;
							$17 = (($18) + ($i$08<<2)|0);
							$19 = HEAP32[$17>>2]|0;
							$20 = ($19|0)==(0|0);
							if (!($20)) {
								__THREW__ = 0;
								invoke_vi(60,($19|0));
								$22 = __THREW__; __THREW__ = 0;
								$23 = $22&1;
								if ($23) {
									$$lcssa = $19;
									break;
								}
								__ZdlPv($19);
							}
							$21 = ($i$08$in|0)>(1);
							if (!($21)) {
								label = 3;
								break;
							}
							$$pre = HEAP32[$0>>2]|0;
							$18 = $$pre;$i$08$in = $i$08;
						}
						if ((label|0) == 3) {
							$$phi$trans$insert = ((($this)) + 28|0);
							$$pre10 = HEAP32[$$phi$trans$insert>>2]|0;
							$8 = $$pre10;
							break;
						}
						$24 = ___cxa_find_matching_catch_2()|0;
						$25 = tempRet0;
						__ZdlPv($$lcssa);
						$26 = HEAP32[$0>>2]|0;
						$27 = ($26|0)==(0|0);
						$28 = $26;
						if (!($27)) {
							$29 = HEAP32[$1>>2]|0;
							$30 = ($29|0)==($26|0);
							if (!($30)) {
								$scevgep$i$i$i2 = ((($29)) + -4|0);
								$31 = $scevgep$i$i$i2;
								$32 = (($31) - ($28))|0;
								$33 = $32 >>> 2;
								$34 = $33 ^ -1;
								$scevgep4$i$i$i3 = (($29) + ($34<<2)|0);
								HEAP32[$1>>2] = $scevgep4$i$i$i3;
							}
							__ZdlPv($26);
						}
						$36 = ((($this)) + 16|0);
						__THREW__ = 0;
						invoke_vi(27,($36|0));
						$37 = __THREW__; __THREW__ = 0;
						$38 = $37&1;
						if ($38) {
							$39 = ___cxa_find_matching_catch_3(0|0)|0;
							$40 = tempRet0;
							___clang_call_terminate($39);
							// unreachable;
						} else {
							___resumeException($24|0);
							// unreachable;
						}
					} else {
						$8 = $6;
					}
				} while(0);
				$9 = ($8|0)==(0|0);
				$10 = $8;
				if ($9) {
					$35 = ((($this)) + 16|0);
					__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
					return;
				}
				$11 = HEAP32[$1>>2]|0;
				$12 = ($11|0)==($8|0);
				if (!($12)) {
					$scevgep$i$i$i = ((($11)) + -4|0);
					$13 = $scevgep$i$i$i;
					$14 = (($13) - ($10))|0;
					$15 = $14 >>> 2;
					$16 = $15 ^ -1;
					$scevgep4$i$i$i = (($11) + ($16<<2)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($8);
				$35 = ((($this)) + 16|0);
				__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($35);
				return;
			}
			function __ZNK8Textpage9textblockEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 28|0);
					$2 = ((($this)) + 32|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2038);
				$$phi$trans$insert = ((($this)) + 28|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZNK8Textpage6xprintERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr10 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer4 = sp + 16|0;
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				$0 = ((($control)) + 20|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					STACKTOP = sp;return;
				}
				$3 = ((($this)) + 16|0);
				$4 = HEAP8[$3>>0]|0;
				$5 = $4 & 1;
				$6 = ($5<<24>>24)==(0);
				if ($6) {
					$9 = ((($3)) + 1|0);
					$10 = $9;
				} else {
					$7 = ((($this)) + 24|0);
					$8 = HEAP32[$7>>2]|0;
					$10 = $8;
				}
				HEAP32[$vararg_buffer>>2] = $10;
				(_fprintf($1,2080,$vararg_buffer)|0);
				$11 = HEAP32[$0>>2]|0;
				$12 = ((($this)) + 28|0);
				$13 = ((($this)) + 32|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = HEAP32[$12>>2]|0;
				$16 = (($14) - ($15))|0;
				$17 = $16 >> 2;
				HEAP32[$vararg_buffer1>>2] = $17;
				(_fprintf($11,2096,$vararg_buffer1)|0);
				$18 = HEAP32[$13>>2]|0;
				$19 = HEAP32[$12>>2]|0;
				$20 = (($18) - ($19))|0;
				$21 = ($20|0)>(0);
				if ($21) {
					$$in = $19;$i$02 = 0;
				} else {
					STACKTOP = sp;return;
				}
				while(1) {
					$22 = $$in;
					$23 = (($22) + ($i$02<<2)|0);
					$24 = HEAP32[$23>>2]|0;
					$25 = HEAP32[$0>>2]|0;
					$26 = (($i$02) + 1)|0;
					$27 = HEAP32[$24>>2]|0;
					$28 = ((($24)) + 4|0);
					$29 = HEAP32[$28>>2]|0;
					$30 = ((($24)) + 8|0);
					$31 = HEAP32[$30>>2]|0;
					$32 = (1 - ($27))|0;
					$33 = (($32) + ($31))|0;
					$34 = ((($24)) + 12|0);
					$35 = HEAP32[$34>>2]|0;
					$36 = (1 - ($29))|0;
					$37 = (($36) + ($35))|0;
					HEAP32[$vararg_buffer4>>2] = $26;
					$vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
					HEAP32[$vararg_ptr7>>2] = $27;
					$vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
					HEAP32[$vararg_ptr8>>2] = $29;
					$vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
					HEAP32[$vararg_ptr9>>2] = $33;
					$vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
					HEAP32[$vararg_ptr10>>2] = $37;
					(_fprintf($25,2118,$vararg_buffer4)|0);
					__ZNK9Textblock6xprintERK7Control($24,$control);
					$38 = HEAP32[$13>>2]|0;
					$39 = HEAP32[$12>>2]|0;
					$40 = (($38) - ($39))|0;
					$41 = $40 >> 2;
					$42 = ($26|0)<($41|0);
					if ($42) {
						$$in = $39;$i$02 = $26;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN6BitmapC2Eiiii($this,$l,$t,$r,$b) {
				$this = $this|0;
				$l = $l|0;
				$t = $t|0;
				$r = $r|0;
				$b = $b|0;
				var $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $row$04 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				__ZN9RectangleC2Eiiii($this,$l,$t,$r,$b);
				$1 = ((($this)) + 16|0);
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($1,$7);
				$8 = HEAP32[$2>>2]|0;
				$9 = HEAP32[$4>>2]|0;
				$10 = (($8) + 1)|0;
				$11 = (($10) - ($9))|0;
				$12 = ($11|0)>(0);
				if (!($12)) {
					STACKTOP = sp;return;
				}
				$13 = ((($this)) + 8|0);
				$56 = $9;$57 = $8;$row$04 = 0;
				while(1) {
					$31 = HEAP32[$1>>2]|0;
					$32 = (($31) + (($row$04*12)|0)|0);
					$33 = HEAP32[$13>>2]|0;
					$34 = HEAP32[$this>>2]|0;
					$35 = (($33) + 1)|0;
					$36 = (($35) - ($34))|0;
					HEAP8[$0>>0] = 0;
					$37 = (((($31) + (($row$04*12)|0)|0)) + 4|0);
					$38 = HEAP32[$37>>2]|0;
					$39 = HEAP32[$32>>2]|0;
					$40 = (($38) - ($39))|0;
					$41 = ($36>>>0)>($40>>>0);
					$42 = $39;
					$43 = $38;
					if ($41) {
						$44 = (($36) - ($40))|0;
						__THREW__ = 0;
						invoke_viii(51,($32|0),($44|0),($0|0));
						$45 = __THREW__; __THREW__ = 0;
						$46 = $45&1;
						if ($46) {
							break;
						}
						$$pre = HEAP32[$2>>2]|0;
						$$pre5 = HEAP32[$4>>2]|0;
						$52 = $$pre;$54 = $$pre5;
					} else {
						$47 = ($36>>>0)<($40>>>0);
						if ($47) {
							$48 = (($42) + ($36)|0);
							$49 = ($43|0)==($48|0);
							if ($49) {
								$52 = $57;$54 = $56;
							} else {
								HEAP32[$37>>2] = $48;
								$52 = $57;$54 = $56;
							}
						} else {
							$52 = $57;$54 = $56;
						}
					}
					$50 = (($row$04) + 1)|0;
					$51 = (($52) + 1)|0;
					$53 = (($51) - ($54))|0;
					$55 = ($50|0)<($53|0);
					if ($55) {
						$56 = $54;$57 = $52;$row$04 = $50;
					} else {
						label = 3;
						break;
					}
				}
				if ((label|0) == 3) {
					STACKTOP = sp;return;
				}
				$14 = ___cxa_find_matching_catch_2()|0;
				$15 = tempRet0;
				$16 = HEAP32[$1>>2]|0;
				$17 = ($16|0)==(0|0);
				if ($17) {
					___resumeException($14|0);
					// unreachable;
				}
				$18 = ((($this)) + 20|0);
				$19 = HEAP32[$18>>2]|0;
				$20 = ($19|0)==($16|0);
				if ($20) {
					$30 = $16;
				} else {
					$22 = $19;
					while(1) {
						$21 = ((($22)) + -12|0);
						HEAP32[$18>>2] = $21;
						$23 = HEAP32[$21>>2]|0;
						$24 = ($23|0)==(0|0);
						if ($24) {
							$25 = $21;
						} else {
							$27 = ((($22)) + -8|0);
							$28 = HEAP32[$27>>2]|0;
							$29 = ($28|0)==($23|0);
							if (!($29)) {
								HEAP32[$27>>2] = $23;
							}
							__ZdlPv($23);
							$$pre$i$i$i = HEAP32[$18>>2]|0;
							$25 = $$pre$i$i$i;
						}
						$26 = ($25|0)==($16|0);
						if ($26) {
							break;
						} else {
							$22 = $25;
						}
					}
					$$pre$i = HEAP32[$1>>2]|0;
					$30 = $$pre$i;
				}
				__ZdlPv($30);
				___resumeException($14|0);
				// unreachable;
			}
			function __ZN6BitmapC2ERKS_RK9Rectangle($this,$source,$re) {
				$this = $this|0;
				$source = $source|0;
				$re = $re|0;
				var $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$phiZ2D = 0, $$pre14 = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
				var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
				var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
				var $94 = 0, $col$07 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $row$09 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				;HEAP32[$this>>2]=HEAP32[$re>>2]|0;HEAP32[$this+4>>2]=HEAP32[$re+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$re+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$re+12>>2]|0;
				$0 = ((($this)) + 16|0);
				$1 = ((($re)) + 12|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ((($re)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($2) + 1)|0;
				$6 = (($5) - ($4))|0;
				__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2Ej($0,$6);
				__THREW__ = 0;
				$7 = (invoke_iii(94,($source|0),($re|0))|0);
				$8 = __THREW__; __THREW__ = 0;
				$9 = $8&1;
				do {
					if ($9) {
						label = 5;
					} else {
						if (!($7)) {
							__THREW__ = 0;
							invoke_vi(47,(2145|0));
							$10 = __THREW__; __THREW__ = 0;
							$11 = $10&1;
							if ($11) {
								label = 5;
								break;
							}
						}
						$31 = HEAP32[$this>>2]|0;
						$32 = HEAP32[$source>>2]|0;
						$33 = (($31) - ($32))|0;
						$34 = ((($this)) + 4|0);
						$35 = HEAP32[$34>>2]|0;
						$36 = ((($source)) + 4|0);
						$37 = HEAP32[$36>>2]|0;
						$38 = (($35) - ($37))|0;
						$39 = ((($this)) + 12|0);
						$40 = HEAP32[$39>>2]|0;
						$41 = (($40) + 1)|0;
						$42 = (($41) - ($35))|0;
						$43 = ($42|0)>(0);
						if (!($43)) {
							return;
						}
						$44 = ((($this)) + 8|0);
						$45 = ((($source)) + 16|0);
						$$pre = HEAP32[$44>>2]|0;
						$49 = $$pre;$51 = $31;$row$09 = 0;
						while(1) {
							$46 = HEAP32[$0>>2]|0;
							$47 = (($46) + (($row$09*12)|0)|0);
							$48 = (($49) + 1)|0;
							$50 = (($48) - ($51))|0;
							$52 = (((($46) + (($row$09*12)|0)|0)) + 4|0);
							$53 = HEAP32[$52>>2]|0;
							$54 = HEAP32[$47>>2]|0;
							$55 = (($53) - ($54))|0;
							$56 = ($50>>>0)>($55>>>0);
							$57 = $54;
							$58 = $53;
							if ($56) {
								$59 = (($50) - ($55))|0;
								__THREW__ = 0;
								invoke_vii(95,($47|0),($59|0));
								$60 = __THREW__; __THREW__ = 0;
								$61 = $60&1;
								if ($61) {
									label = 4;
									break;
								}
								$$pre14 = HEAP32[$44>>2]|0;
								$$pre15 = HEAP32[$this>>2]|0;
								$66 = $$pre14;$68 = $$pre15;
							} else {
								$62 = ($50>>>0)<($55>>>0);
								if ($62) {
									$63 = (($57) + ($50)|0);
									$64 = ($58|0)==($63|0);
									if ($64) {
										$66 = $49;$68 = $51;
									} else {
										HEAP32[$52>>2] = $63;
										$66 = $49;$68 = $51;
									}
								} else {
									$66 = $49;$68 = $51;
								}
							}
							$65 = (($66) + 1)|0;
							$67 = (($65) - ($68))|0;
							$69 = ($67|0)>(0);
							if ($69) {
								$70 = HEAP32[$45>>2]|0;
								$71 = (($38) + ($row$09))|0;
								$72 = HEAP32[$0>>2]|0;
								$73 = (($70) + (($71*12)|0)|0);
								$74 = (($72) + (($row$09*12)|0)|0);
								$col$07 = 0;
								while(1) {
									$81 = (($33) + ($col$07))|0;
									$82 = HEAP32[$73>>2]|0;
									$83 = (($82) + ($81)|0);
									$84 = HEAP8[$83>>0]|0;
									$85 = HEAP32[$74>>2]|0;
									$86 = (($85) + ($col$07)|0);
									HEAP8[$86>>0] = $84;
									$87 = (($col$07) + 1)|0;
									$88 = HEAP32[$44>>2]|0;
									$89 = HEAP32[$this>>2]|0;
									$90 = (($88) + 1)|0;
									$91 = (($90) - ($89))|0;
									$92 = ($87|0)<($91|0);
									if ($92) {
										$col$07 = $87;
									} else {
										$93 = $89;$94 = $88;
										break;
									}
								}
							} else {
								$93 = $68;$94 = $66;
							}
							$75 = (($row$09) + 1)|0;
							$76 = HEAP32[$39>>2]|0;
							$77 = HEAP32[$34>>2]|0;
							$78 = (($76) + 1)|0;
							$79 = (($78) - ($77))|0;
							$80 = ($75|0)<($79|0);
							if ($80) {
								$49 = $94;$51 = $93;$row$09 = $75;
							} else {
								label = 17;
								break;
							}
						}
						if ((label|0) == 4) {
							$12 = ___cxa_find_matching_catch_2()|0;
							$13 = tempRet0;
							$$pre$phiZ2D = $0;$lpad$phi$index = $12;$lpad$phi$index2 = $13;
							break;
						}
						else if ((label|0) == 17) {
							return;
						}
					}
				} while(0);
				if ((label|0) == 5) {
					$14 = ___cxa_find_matching_catch_2()|0;
					$15 = tempRet0;
					$$pre$phiZ2D = $0;$lpad$phi$index = $14;$lpad$phi$index2 = $15;
				}
				$16 = HEAP32[$$pre$phiZ2D>>2]|0;
				$17 = ($16|0)==(0|0);
				if ($17) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$18 = ((($this)) + 20|0);
				$19 = HEAP32[$18>>2]|0;
				$20 = ($19|0)==($16|0);
				if ($20) {
					$30 = $16;
				} else {
					$22 = $19;
					while(1) {
						$21 = ((($22)) + -12|0);
						HEAP32[$18>>2] = $21;
						$23 = HEAP32[$21>>2]|0;
						$24 = ($23|0)==(0|0);
						if ($24) {
							$25 = $21;
						} else {
							$27 = ((($22)) + -8|0);
							$28 = HEAP32[$27>>2]|0;
							$29 = ($28|0)==($23|0);
							if (!($29)) {
								HEAP32[$27>>2] = $23;
							}
							__ZdlPv($23);
							$$pre$i$i$i = HEAP32[$18>>2]|0;
							$25 = $$pre$i$i$i;
						}
						$26 = ($25|0)==($16|0);
						if ($26) {
							break;
						} else {
							$22 = $25;
						}
					}
					$$pre$i = HEAP32[$0>>2]|0;
					$30 = $$pre$i;
				}
				__ZdlPv($30);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZN6Bitmap4leftEi($this,$l) {
				$this = $this|0;
				$l = $l|0;
				var $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $row$0 = 0, $row$010 = 0, $row$01119 = 0, $row1$0 = 0, $row1$013 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy1 = sp + 8|0;
				$$byval_copy = sp + 4|0;
				$0 = sp;
				$1 = sp + 12|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($2|0)==($l|0);
				if ($3) {
					STACKTOP = sp;return;
				}
				$4 = ($2|0)>($l|0);
				$5 = ((($this)) + 12|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ((($this)) + 4|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($6) + 1)|0;
				$10 = (($9) - ($8))|0;
				$row$010 = (($10) + -1)|0;
				$11 = ($10|0)>(0);
				L4: do {
					if ($4) {
						if ($11) {
							$13 = ((($this)) + 16|0);
							$14 = HEAP32[$13>>2]|0;
							$15 = (($14) + (($row$010*12)|0)|0);
							$16 = HEAP32[$15>>2]|0;
							HEAP32[$0>>2] = $16;
							$17 = (($2) - ($l))|0;
							HEAP8[$1>>0] = 0;
							;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
							(__ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($15,$$byval_copy,$17,$1)|0);
							$18 = ($10|0)>(1);
							if ($18) {
								$row$01119 = $row$010;
								while(1) {
									$row$0 = (($row$01119) + -1)|0;
									$$pre16 = HEAP32[$this>>2]|0;
									$19 = HEAP32[$13>>2]|0;
									$20 = (($19) + (($row$0*12)|0)|0);
									$21 = HEAP32[$20>>2]|0;
									HEAP32[$0>>2] = $21;
									$22 = (($$pre16) - ($l))|0;
									HEAP8[$1>>0] = 0;
									;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;
									(__ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($20,$$byval_copy1,$22,$1)|0);
									$23 = ($row$01119|0)>(1);
									if ($23) {
										$row$01119 = $row$0;
									} else {
										break;
									}
								}
							}
						}
					} else {
						if ($11) {
							$12 = ((($this)) + 16|0);
							$28 = $2;$row1$013 = $row$010;
							while(1) {
								$24 = HEAP32[$12>>2]|0;
								$25 = (($24) + (($row1$013*12)|0)|0);
								$26 = HEAP32[$25>>2]|0;
								$27 = (($l) - ($28))|0;
								$29 = (($26) + ($27)|0);
								$30 = ($28|0)==($l|0);
								if (!($30)) {
									$32 = $29;
									$33 = (((($24) + (($row1$013*12)|0)|0)) + 4|0);
									$34 = HEAP32[$33>>2]|0;
									$35 = (($34) - ($32))|0;
									_memmove(($26|0),($29|0),($35|0))|0;
									$36 = (($26) + ($35)|0);
									$37 = HEAP32[$33>>2]|0;
									$38 = ($37|0)==($36|0);
									if (!($38)) {
										HEAP32[$33>>2] = $36;
									}
								}
								$31 = ($row1$013|0)>(0);
								if (!($31)) {
									break L4;
								}
								$row1$0 = (($row1$013) + -1)|0;
								$$pre = HEAP32[$this>>2]|0;
								$28 = $$pre;$row1$013 = $row1$0;
							}
						}
					}
				} while(0);
				__ZN9Rectangle4leftEi($this,$l);
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorIhNS_9allocatorIhEEE6insertENS_11__wrap_iterIPKhEEjRS5_($this,$__position,$__n,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__n = $__n|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i = 0, $$0$i2 = 0, $$0$i35 = 0, $$0$i36 = 0, $$04 = 0, $$lcssa = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
				var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
				var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$12$0$in = 0, $__xr$0 = 0, $exitcond$i = 0, $scevgep = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = (($0) + ($3)|0);
				$5 = ($__n|0)==(0);
				if ($5) {
					$__p$0 = $4;
					return ($__p$0|0);
				}
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 4|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = $9;
				$11 = (($7) - ($10))|0;
				$12 = ($11>>>0)<($__n>>>0);
				if (!($12)) {
					$13 = $4;
					$14 = (($10) - ($13))|0;
					$15 = ($14>>>0)<($__n>>>0);
					if ($15) {
						$16 = (($__n) - ($14))|0;
						$$0$i2 = $16;$18 = $9;
						while(1) {
							$17 = HEAP8[$__x>>0]|0;
							HEAP8[$18>>0] = $17;
							$19 = HEAP32[$8>>2]|0;
							$20 = ((($19)) + 1|0);
							HEAP32[$8>>2] = $20;
							$21 = (($$0$i2) + -1)|0;
							$22 = ($21|0)==(0);
							if ($22) {
								$$lcssa = $20;
								break;
							} else {
								$$0$i2 = $21;$18 = $20;
							}
						}
						$23 = ($9|0)==($4|0);
						if ($23) {
							$__p$0 = $4;
							return ($__p$0|0);
						} else {
							$$04 = $14;$25 = $$lcssa;
						}
					} else {
						$$04 = $__n;$25 = $9;
					}
					$24 = (($4) + ($__n)|0);
					$26 = $25;
					$27 = $24;
					$28 = (($26) - ($27))|0;
					$29 = (($4) + ($28)|0);
					$30 = ($29>>>0)<($9>>>0);
					if ($30) {
						$32 = $25;$__i$01$i = $29;
						while(1) {
							$31 = HEAP8[$__i$01$i>>0]|0;
							HEAP8[$32>>0] = $31;
							$33 = ((($__i$01$i)) + 1|0);
							$34 = HEAP32[$8>>2]|0;
							$35 = ((($34)) + 1|0);
							HEAP32[$8>>2] = $35;
							$exitcond$i = ($33|0)==($9|0);
							if ($exitcond$i) {
								break;
							} else {
								$32 = $35;$__i$01$i = $33;
							}
						}
					}
					$36 = (0 - ($28))|0;
					$37 = (($25) + ($36)|0);
					_memmove(($37|0),($4|0),($28|0))|0;
					$38 = ($4>>>0)>($__x>>>0);
					if ($38) {
						$__xr$0 = $__x;
					} else {
						$39 = HEAP32[$8>>2]|0;
						$40 = ($39>>>0)>($__x>>>0);
						$41 = (($__x) + ($__n)|0);
						$$ = $40 ? $41 : $__x;
						$__xr$0 = $$;
					}
					$42 = HEAP8[$__xr$0>>0]|0;
					_memset(($4|0),($42|0),($$04|0))|0;
					$__p$0 = $4;
					return ($__p$0|0);
				}
				$43 = (($10) - ($1))|0;
				$44 = (($43) + ($__n))|0;
				$45 = ($44|0)<(0);
				if ($45) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$6>>2]|0;
					$$pre7 = HEAP32[$this>>2]|0;
					$47 = $$pre7;$48 = $$pre;
				} else {
					$47 = $1;$48 = $7;
				}
				$46 = (($48) - ($47))|0;
				$49 = ($46>>>0)<(1073741823);
				if ($49) {
					$52 = $46 << 1;
					$53 = ($52>>>0)<($44>>>0);
					$54 = $53 ? $44 : $52;
					$55 = $4;
					$56 = (($55) - ($47))|0;
					$57 = ($54|0)==(0);
					if ($57) {
						$$0$i36 = 0;$60 = 0;$61 = $56;$72 = $55;
					} else {
						$$0$i35 = $54;$81 = $56;$82 = $55;
						label = 17;
					}
				} else {
					$50 = $4;
					$51 = (($50) - ($47))|0;
					$$0$i35 = 2147483647;$81 = $51;$82 = $50;
					label = 17;
				}
				if ((label|0) == 17) {
					$58 = (__Znwj($$0$i35)|0);
					$$0$i36 = $$0$i35;$60 = $58;$61 = $81;$72 = $82;
				}
				$59 = (($60) + ($61)|0);
				$62 = (($60) + ($$0$i36)|0);
				$63 = (($61) + ($__n))|0;
				$$0$i = $__n;$__v$sroa$12$0$in = $59;
				while(1) {
					$64 = HEAP8[$__x>>0]|0;
					HEAP8[$__v$sroa$12$0$in>>0] = $64;
					$65 = ((($__v$sroa$12$0$in)) + 1|0);
					$66 = (($$0$i) + -1)|0;
					$67 = ($66|0)==(0);
					if ($67) {
						break;
					} else {
						$$0$i = $66;$__v$sroa$12$0$in = $65;
					}
				}
				$68 = $62;
				$scevgep = (($60) + ($63)|0);
				$69 = HEAP32[$this>>2]|0;
				$70 = $69;
				$71 = (($72) - ($70))|0;
				$73 = (0 - ($71))|0;
				$74 = (($59) + ($73)|0);
				$75 = $74;
				_memcpy(($74|0),($69|0),($71|0))|0;
				$76 = HEAP32[$8>>2]|0;
				$77 = (($76) - ($72))|0;
				_memcpy(($scevgep|0),($4|0),($77|0))|0;
				$78 = (($scevgep) + ($77)|0);
				$79 = $78;
				HEAP32[$this>>2] = $75;
				HEAP32[$8>>2] = $79;
				HEAP32[$6>>2] = $68;
				$80 = ($69|0)==(0|0);
				if ($80) {
					$__p$0 = $59;
					return ($__p$0|0);
				}
				__ZdlPv($69);
				$__p$0 = $59;
				return ($__p$0|0);
			}
			function __ZN6Bitmap3topEi($this,$t) {
				$this = $this|0;
				$t = $t|0;
				var $$0$i$i = 0, $$0$lcssa$i$i$i = 0, $$012$i$i$i = 0, $$03$i$i$i = 0, $$byval_copy = 0, $$lcssa = 0, $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
				var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
				var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
				var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 16|0;
				$0 = sp + 12|0;
				$1 = sp;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($3|0)==($t|0);
				if ($4) {
					STACKTOP = sp;return;
				}
				$5 = ($3|0)>($t|0);
				$6 = ((($this)) + 16|0);
				$7 = HEAP32[$6>>2]|0;
				do {
					if ($5) {
						$8 = $7;
						HEAP32[$0>>2] = $8;
						$9 = (($3) - ($t))|0;
						$10 = ((($this)) + 8|0);
						$11 = HEAP32[$10>>2]|0;
						$12 = HEAP32[$this>>2]|0;
						$13 = (($11) + 1)|0;
						$14 = (($13) - ($12))|0;
						HEAP32[$1>>2] = 0;
						$15 = ((($1)) + 4|0);
						HEAP32[$15>>2] = 0;
						$16 = ((($1)) + 8|0);
						HEAP32[$16>>2] = 0;
						$17 = ($13|0)==($12|0);
						L6: do {
							if (!($17)) {
								$18 = ($14|0)<(0);
								if ($18) {
									__THREW__ = 0;
									invoke_vi(46,($1|0));
									$19 = __THREW__; __THREW__ = 0;
									$20 = $19&1;
									if (!($20)) {
										label = 6;
									}
								} else {
									label = 6;
								}
								if ((label|0) == 6) {
									__THREW__ = 0;
									$21 = (invoke_ii(29,($14|0))|0);
									$22 = __THREW__; __THREW__ = 0;
									$23 = $22&1;
									if (!($23)) {
										HEAP32[$15>>2] = $21;
										HEAP32[$1>>2] = $21;
										$24 = (($21) + ($14)|0);
										$25 = ((($1)) + 8|0);
										HEAP32[$25>>2] = $24;
										$$0$i$i = $14;$26 = $21;
										while(1) {
											HEAP8[$26>>0] = 0;
											$27 = HEAP32[$15>>2]|0;
											$28 = ((($27)) + 1|0);
											HEAP32[$15>>2] = $28;
											$29 = (($$0$i$i) + -1)|0;
											$30 = ($29|0)==(0);
											if ($30) {
												break L6;
											} else {
												$$0$i$i = $29;$26 = $28;
											}
										}
									}
								}
								$31 = ___cxa_find_matching_catch_2()|0;
								$32 = tempRet0;
								$33 = HEAP32[$1>>2]|0;
								$34 = ($33|0)==(0|0);
								if ($34) {
									___resumeException($31|0);
									// unreachable;
								}
								$35 = HEAP32[$15>>2]|0;
								$36 = ($35|0)==($33|0);
								if (!($36)) {
									HEAP32[$15>>2] = $33;
								}
								__ZdlPv($33);
								___resumeException($31|0);
								// unreachable;
							}
						} while(0);
						__THREW__ = 0;
						;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
						(invoke_iiiii(96,($6|0),($$byval_copy|0),($9|0),($1|0))|0);
						$37 = __THREW__; __THREW__ = 0;
						$38 = $37&1;
						if (!($38)) {
							$39 = HEAP32[$1>>2]|0;
							$40 = ($39|0)==(0|0);
							if ($40) {
								break;
							}
							$41 = HEAP32[$15>>2]|0;
							$42 = ($41|0)==($39|0);
							if (!($42)) {
								HEAP32[$15>>2] = $39;
							}
							__ZdlPv($39);
							break;
						}
						$43 = ___cxa_find_matching_catch_2()|0;
						$44 = tempRet0;
						$45 = HEAP32[$1>>2]|0;
						$46 = ($45|0)==(0|0);
						if ($46) {
							___resumeException($43|0);
							// unreachable;
						}
						$47 = HEAP32[$15>>2]|0;
						$48 = ($47|0)==($45|0);
						if (!($48)) {
							HEAP32[$15>>2] = $45;
						}
						__ZdlPv($45);
						___resumeException($43|0);
						// unreachable;
					} else {
						$49 = (($t) - ($3))|0;
						$50 = (($7) + (($49*12)|0)|0);
						$51 = ((($this)) + 20|0);
						$52 = HEAP32[$51>>2]|0;
						$53 = ($50|0)==($52|0);
						if ($53) {
							$$0$lcssa$i$i$i = $7;$61 = $50;
						} else {
							$$012$i$i$i = $50;$$03$i$i$i = $7;
							while(1) {
								$54 = ($$03$i$i$i|0)==($$012$i$i$i|0);
								if (!($54)) {
									$55 = HEAP32[$$012$i$i$i>>2]|0;
									$56 = ((($$012$i$i$i)) + 4|0);
									$57 = HEAP32[$56>>2]|0;
									__ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i$i,$55,$57);
								}
								$58 = ((($$012$i$i$i)) + 12|0);
								$59 = ((($$03$i$i$i)) + 12|0);
								$60 = ($58|0)==($52|0);
								if ($60) {
									$$lcssa = $59;
									break;
								} else {
									$$012$i$i$i = $58;$$03$i$i$i = $59;
								}
							}
							$$pre$i = HEAP32[$51>>2]|0;
							$$0$lcssa$i$i$i = $$lcssa;$61 = $$pre$i;
						}
						$62 = ($61|0)==($$0$lcssa$i$i$i|0);
						if (!($62)) {
							$64 = $61;
							while(1) {
								$63 = ((($64)) + -12|0);
								HEAP32[$51>>2] = $63;
								$65 = HEAP32[$63>>2]|0;
								$66 = ($65|0)==(0|0);
								if ($66) {
									$67 = $63;
								} else {
									$69 = ((($64)) + -8|0);
									$70 = HEAP32[$69>>2]|0;
									$71 = ($70|0)==($65|0);
									if (!($71)) {
										HEAP32[$69>>2] = $65;
									}
									__ZdlPv($65);
									$$pre$i$i$i = HEAP32[$51>>2]|0;
									$67 = $$pre$i$i$i;
								}
								$68 = ($67|0)==($$0$lcssa$i$i$i|0);
								if ($68) {
									break;
								} else {
									$64 = $67;
								}
							}
						}
					}
				} while(0);
				__ZN9Rectangle3topEi($this,$t);
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6insertENS_11__wrap_iterIPKS3_EEjRS7_($this,$__position,$__n,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__n = $__n|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i = 0, $$0$i10 = 0, $$0$i18 = 0, $$01$i$i$i$i = 0, $$01$i$i$i$i12 = 0, $$012$i$i = 0, $$019 = 0, $$03$i$i = 0, $$lcssa = 0, $$lcssa74 = 0, $$lcssa76 = 0, $$lcssa78 = 0, $$lcssa80 = 0, $$pre = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0;
				var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
				var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
				var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
				var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
				var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
				var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
				var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
				var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$0 = 0, $__v = 0, $__xr$0 = 0;
				var $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$__v = sp;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = (($3|0) / 12)&-1;
				$5 = (($0) + (($4*12)|0)|0);
				$6 = ($__n|0)==(0);
				if ($6) {
					$__p$0 = $5;
					STACKTOP = sp;return ($__p$0|0);
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ((($this)) + 4|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = $10;
				$12 = (($8) - ($11))|0;
				$13 = (($12|0) / 12)&-1;
				$14 = ($13>>>0)<($__n>>>0);
				if (!($14)) {
					$15 = $5;
					$16 = (($11) - ($15))|0;
					$17 = (($16|0) / 12)&-1;
					$18 = ($17>>>0)<($__n>>>0);
					do {
						if ($18) {
							$19 = (($__n) - ($17))|0;
							$20 = ((($__x)) + 4|0);
							$$0$i = $19;$21 = $10;
							while(1) {
								HEAP32[$21>>2] = 0;
								$22 = ((($21)) + 4|0);
								HEAP32[$22>>2] = 0;
								$23 = ((($21)) + 8|0);
								HEAP32[$23>>2] = 0;
								$24 = HEAP32[$20>>2]|0;
								$25 = HEAP32[$__x>>2]|0;
								$26 = (($24) - ($25))|0;
								$27 = ($24|0)==($25|0);
								if (!($27)) {
									$28 = ($26|0)<(0);
									if ($28) {
										__THREW__ = 0;
										invoke_vi(46,($21|0));
										$29 = __THREW__; __THREW__ = 0;
										$30 = $29&1;
										if ($30) {
											$$lcssa78 = $21;$$lcssa80 = $22;
											break;
										}
									}
									__THREW__ = 0;
									$31 = (invoke_ii(29,($26|0))|0);
									$32 = __THREW__; __THREW__ = 0;
									$33 = $32&1;
									if ($33) {
										$$lcssa78 = $21;$$lcssa80 = $22;
										break;
									}
									HEAP32[$22>>2] = $31;
									HEAP32[$21>>2] = $31;
									$34 = (($31) + ($26)|0);
									$35 = ((($21)) + 8|0);
									HEAP32[$35>>2] = $34;
									$36 = HEAP32[$__x>>2]|0;
									$37 = HEAP32[$20>>2]|0;
									$38 = ($36|0)==($37|0);
									if (!($38)) {
										$$01$i$i$i$i = $36;$40 = $31;
										while(1) {
											$39 = HEAP8[$$01$i$i$i$i>>0]|0;
											HEAP8[$40>>0] = $39;
											$41 = HEAP32[$22>>2]|0;
											$42 = ((($41)) + 1|0);
											HEAP32[$22>>2] = $42;
											$43 = ((($$01$i$i$i$i)) + 1|0);
											$44 = ($43|0)==($37|0);
											if ($44) {
												break;
											} else {
												$$01$i$i$i$i = $43;$40 = $42;
											}
										}
									}
								}
								$51 = HEAP32[$9>>2]|0;
								$52 = ((($51)) + 12|0);
								HEAP32[$9>>2] = $52;
								$53 = (($$0$i) + -1)|0;
								$54 = ($53|0)==(0);
								if ($54) {
									label = 17;
									break;
								} else {
									$$0$i = $53;$21 = $52;
								}
							}
							if ((label|0) == 17) {
								$55 = ($10|0)==($5|0);
								if ($55) {
									$__p$0 = $5;
								} else {
									$$019 = $17;
									break;
								}
								STACKTOP = sp;return ($__p$0|0);
							}
							$45 = ___cxa_find_matching_catch_2()|0;
							$46 = tempRet0;
							$47 = HEAP32[$$lcssa78>>2]|0;
							$48 = ($47|0)==(0|0);
							if ($48) {
								___resumeException($45|0);
								// unreachable;
							}
							$49 = HEAP32[$$lcssa80>>2]|0;
							$50 = ($49|0)==($47|0);
							if (!($50)) {
								HEAP32[$$lcssa80>>2] = $47;
							}
							__ZdlPv($47);
							___resumeException($45|0);
							// unreachable;
						} else {
							$$019 = $__n;
						}
					} while(0);
					$56 = (($5) + (($__n*12)|0)|0);
					__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE12__move_rangeEPS3_S6_S6_($this,$5,$10,$56);
					$57 = ($5>>>0)>($__x>>>0);
					if ($57) {
						$__xr$0 = $__x;
					} else {
						$58 = HEAP32[$9>>2]|0;
						$59 = ($58>>>0)>($__x>>>0);
						$60 = (($__x) + (($__n*12)|0)|0);
						$$ = $59 ? $60 : $__x;
						$__xr$0 = $$;
					}
					$61 = ((($__xr$0)) + 4|0);
					$$012$i$i = $$019;$$03$i$i = $5;
					while(1) {
						$62 = ($$03$i$i|0)==($__xr$0|0);
						if (!($62)) {
							$63 = HEAP32[$__xr$0>>2]|0;
							$64 = HEAP32[$61>>2]|0;
							__ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($$03$i$i,$63,$64);
						}
						$65 = ((($$03$i$i)) + 12|0);
						$66 = (($$012$i$i) + -1)|0;
						$67 = ($66|0)==(0);
						if ($67) {
							$__p$0 = $5;
							break;
						} else {
							$$012$i$i = $66;$$03$i$i = $65;
						}
					}
					STACKTOP = sp;return ($__p$0|0);
				}
				$68 = ((($this)) + 8|0);
				$69 = (($11) - ($1))|0;
				$70 = (($69|0) / 12)&-1;
				$71 = (($70) + ($__n))|0;
				$72 = ($71>>>0)>(357913941);
				if ($72) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$7>>2]|0;
					$$pre44 = HEAP32[$this>>2]|0;
					$74 = $$pre44;$75 = $$pre;
				} else {
					$74 = $1;$75 = $8;
				}
				$73 = (($75) - ($74))|0;
				$76 = (($73|0) / 12)&-1;
				$77 = ($76>>>0)<(178956970);
				if ($77) {
					$78 = $76 << 1;
					$79 = ($78>>>0)<($71>>>0);
					$80 = $79 ? $71 : $78;
					$$0$i18 = $80;
				} else {
					$$0$i18 = 357913941;
				}
				$81 = $5;
				$82 = (($81) - ($74))|0;
				$83 = (($82|0) / 12)&-1;
				$84 = ((($__v)) + 12|0);
				HEAP32[$84>>2] = 0;
				$85 = ((($__v)) + 16|0);
				HEAP32[$85>>2] = $68;
				$86 = ($$0$i18|0)==(0);
				if ($86) {
					$89 = 0;
				} else {
					$87 = ($$0$i18*12)|0;
					$88 = (__Znwj($87)|0);
					$89 = $88;
				}
				HEAP32[$__v>>2] = $89;
				$90 = (($89) + (($83*12)|0)|0);
				$91 = ((($__v)) + 8|0);
				HEAP32[$91>>2] = $90;
				$92 = ((($__v)) + 4|0);
				HEAP32[$92>>2] = $90;
				$93 = (($89) + (($$0$i18*12)|0)|0);
				$94 = ((($__v)) + 12|0);
				HEAP32[$94>>2] = $93;
				$95 = ((($__x)) + 4|0);
				$$0$i10 = $__n;$96 = $90;
				while(1) {
					HEAP32[$96>>2] = 0;
					$97 = ((($96)) + 4|0);
					HEAP32[$97>>2] = 0;
					$98 = ((($96)) + 8|0);
					HEAP32[$98>>2] = 0;
					$99 = HEAP32[$95>>2]|0;
					$100 = HEAP32[$__x>>2]|0;
					$101 = (($99) - ($100))|0;
					$102 = ($99|0)==($100|0);
					if (!($102)) {
						$103 = ($101|0)<(0);
						if ($103) {
							__THREW__ = 0;
							invoke_vi(46,($96|0));
							$104 = __THREW__; __THREW__ = 0;
							$105 = $104&1;
							if ($105) {
								$$lcssa = $96;$$lcssa74 = $96;$$lcssa76 = $97;
								label = 37;
								break;
							}
						}
						__THREW__ = 0;
						$106 = (invoke_ii(29,($101|0))|0);
						$107 = __THREW__; __THREW__ = 0;
						$108 = $107&1;
						if ($108) {
							$$lcssa = $96;$$lcssa74 = $96;$$lcssa76 = $97;
							label = 37;
							break;
						}
						HEAP32[$97>>2] = $106;
						HEAP32[$96>>2] = $106;
						$109 = (($106) + ($101)|0);
						$110 = ((($96)) + 8|0);
						HEAP32[$110>>2] = $109;
						$111 = HEAP32[$__x>>2]|0;
						$112 = HEAP32[$95>>2]|0;
						$113 = ($111|0)==($112|0);
						if (!($113)) {
							$$01$i$i$i$i12 = $111;$115 = $106;
							while(1) {
								$114 = HEAP8[$$01$i$i$i$i12>>0]|0;
								HEAP8[$115>>0] = $114;
								$116 = HEAP32[$97>>2]|0;
								$117 = ((($116)) + 1|0);
								HEAP32[$97>>2] = $117;
								$118 = ((($$01$i$i$i$i12)) + 1|0);
								$119 = ($118|0)==($112|0);
								if ($119) {
									break;
								} else {
									$$01$i$i$i$i12 = $118;$115 = $117;
								}
							}
						}
					}
					$126 = ((($96)) + 12|0);
					HEAP32[$91>>2] = $126;
					$127 = (($$0$i10) + -1)|0;
					$128 = ($127|0)==(0);
					if ($128) {
						label = 42;
						break;
					} else {
						$$0$i10 = $127;$96 = $126;
					}
				}
				do {
					if ((label|0) == 37) {
						$120 = ___cxa_find_matching_catch_2()|0;
						$121 = tempRet0;
						$122 = HEAP32[$$lcssa74>>2]|0;
						$123 = ($122|0)==(0|0);
						if ($123) {
							$148 = $$lcssa;$eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
						} else {
							$124 = HEAP32[$$lcssa76>>2]|0;
							$125 = ($124|0)==($122|0);
							if (!($125)) {
								HEAP32[$$lcssa76>>2] = $122;
							}
							__ZdlPv($122);
							$148 = $$lcssa;$eh$lpad$body$index3Z2D = $121;$eh$lpad$body$indexZ2D = $120;
						}
					}
					else if ((label|0) == 42) {
						__THREW__ = 0;
						$129 = (invoke_iiii(97,($this|0),($__v|0),($5|0))|0);
						$130 = __THREW__; __THREW__ = 0;
						$131 = $130&1;
						if ($131) {
							$145 = ___cxa_find_matching_catch_2()|0;
							$146 = tempRet0;
							$$pre45 = HEAP32[$91>>2]|0;
							$148 = $$pre45;$eh$lpad$body$index3Z2D = $146;$eh$lpad$body$indexZ2D = $145;
							break;
						}
						$132 = HEAP32[$92>>2]|0;
						$133 = HEAP32[$91>>2]|0;
						$134 = ($133|0)==($132|0);
						if (!($134)) {
							$136 = $133;
							while(1) {
								$135 = ((($136)) + -12|0);
								$137 = HEAP32[$135>>2]|0;
								$138 = ($137|0)==(0|0);
								if (!($138)) {
									$140 = ((($136)) + -8|0);
									$141 = HEAP32[$140>>2]|0;
									$142 = ($141|0)==($137|0);
									if (!($142)) {
										HEAP32[$140>>2] = $137;
									}
									__ZdlPv($137);
								}
								$139 = ($135|0)==($132|0);
								if ($139) {
									break;
								} else {
									$136 = $135;
								}
							}
							HEAP32[$91>>2] = $132;
						}
						$143 = HEAP32[$__v>>2]|0;
						$144 = ($143|0)==(0|0);
						if (!($144)) {
							__ZdlPv($143);
						}
						$__p$0 = $129;
						STACKTOP = sp;return ($__p$0|0);
					}
				} while(0);
				$147 = HEAP32[$92>>2]|0;
				$149 = ($148|0)==($147|0);
				if (!($149)) {
					$151 = $148;
					while(1) {
						$150 = ((($151)) + -12|0);
						$152 = HEAP32[$150>>2]|0;
						$153 = ($152|0)==(0|0);
						if (!($153)) {
							$155 = ((($151)) + -8|0);
							$156 = HEAP32[$155>>2]|0;
							$157 = ($156|0)==($152|0);
							if (!($157)) {
								HEAP32[$155>>2] = $152;
							}
							__ZdlPv($152);
						}
						$154 = ($150|0)==($147|0);
						if ($154) {
							break;
						} else {
							$151 = $150;
						}
					}
					HEAP32[$91>>2] = $147;
				}
				$158 = HEAP32[$__v>>2]|0;
				$159 = ($158|0)==(0|0);
				if ($159) {
					___resumeException($eh$lpad$body$indexZ2D|0);
					// unreachable;
				}
				__ZdlPv($158);
				___resumeException($eh$lpad$body$indexZ2D|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE12__move_rangeEPS3_S6_S6_($this,$__from_s,$__from_e,$__to) {
				$this = $this|0;
				$__from_s = $__from_s|0;
				$__from_e = $__from_e|0;
				$__to = $__to|0;
				var $$01$i$i$i = 0, $$012$i$i = 0, $$03$i$i = 0, $$lcssa = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$02 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = $1;
				$3 = $__to;
				$4 = (($2) - ($3))|0;
				$5 = (($4|0) / 12)&-1;
				$6 = (($__from_s) + (($5*12)|0)|0);
				$7 = ($6>>>0)<($__from_e>>>0);
				L1: do {
					if ($7) {
						$16 = $1;$__i$02 = $6;
						while(1) {
							HEAP32[$16>>2] = 0;
							$17 = ((($16)) + 4|0);
							HEAP32[$17>>2] = 0;
							$18 = ((($16)) + 8|0);
							HEAP32[$18>>2] = 0;
							$19 = ((($__i$02)) + 4|0);
							$20 = HEAP32[$19>>2]|0;
							$21 = HEAP32[$__i$02>>2]|0;
							$22 = (($20) - ($21))|0;
							$23 = ($20|0)==($21|0);
							if (!($23)) {
								$24 = ($22|0)<(0);
								if ($24) {
									__THREW__ = 0;
									invoke_vi(46,($16|0));
									$25 = __THREW__; __THREW__ = 0;
									$26 = $25&1;
									if ($26) {
										$$lcssa = $16;$$lcssa17 = $17;
										break;
									}
								}
								__THREW__ = 0;
								$27 = (invoke_ii(29,($22|0))|0);
								$28 = __THREW__; __THREW__ = 0;
								$29 = $28&1;
								if ($29) {
									$$lcssa = $16;$$lcssa17 = $17;
									break;
								}
								HEAP32[$17>>2] = $27;
								HEAP32[$16>>2] = $27;
								$30 = (($27) + ($22)|0);
								$31 = ((($16)) + 8|0);
								HEAP32[$31>>2] = $30;
								$32 = HEAP32[$__i$02>>2]|0;
								$33 = HEAP32[$19>>2]|0;
								$34 = ($32|0)==($33|0);
								if (!($34)) {
									$$01$i$i$i = $32;$36 = $27;
									while(1) {
										$35 = HEAP8[$$01$i$i$i>>0]|0;
										HEAP8[$36>>0] = $35;
										$37 = HEAP32[$17>>2]|0;
										$38 = ((($37)) + 1|0);
										HEAP32[$17>>2] = $38;
										$39 = ((($$01$i$i$i)) + 1|0);
										$40 = ($39|0)==($33|0);
										if ($40) {
											break;
										} else {
											$$01$i$i$i = $39;$36 = $38;
										}
									}
								}
							}
							$47 = ((($__i$02)) + 12|0);
							$48 = HEAP32[$0>>2]|0;
							$49 = ((($48)) + 12|0);
							HEAP32[$0>>2] = $49;
							$50 = ($47>>>0)<($__from_e>>>0);
							if ($50) {
								$16 = $49;$__i$02 = $47;
							} else {
								break L1;
							}
						}
						$41 = ___cxa_find_matching_catch_2()|0;
						$42 = tempRet0;
						$43 = HEAP32[$$lcssa>>2]|0;
						$44 = ($43|0)==(0|0);
						if ($44) {
							___resumeException($41|0);
							// unreachable;
						}
						$45 = HEAP32[$$lcssa17>>2]|0;
						$46 = ($45|0)==($43|0);
						if (!($46)) {
							HEAP32[$$lcssa17>>2] = $43;
						}
						__ZdlPv($43);
						___resumeException($41|0);
						// unreachable;
					}
				} while(0);
				$8 = ($1|0)==($__to|0);
				if ($8) {
					return;
				} else {
					$$012$i$i = $6;$$03$i$i = $1;
				}
				while(1) {
					$9 = ((($$03$i$i)) + -12|0);
					$10 = ((($$012$i$i)) + -12|0);
					$11 = ($$03$i$i|0)==($$012$i$i|0);
					if (!($11)) {
						$13 = HEAP32[$10>>2]|0;
						$14 = ((($$012$i$i)) + -8|0);
						$15 = HEAP32[$14>>2]|0;
						__ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($9,$13,$15);
					}
					$12 = ($10|0)==($__from_s|0);
					if ($12) {
						break;
					} else {
						$$012$i$i = $10;$$03$i$i = $9;
					}
				}
				return;
			}
			function __ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EEPS3_($this,$__v,$__p) {
				$this = $this|0;
				$__v = $__v|0;
				$__p = $__p|0;
				var $$01$i$i$i$i = 0, $$01$i$i$i$i6 = 0, $$02$i = 0, $$02$i3 = 0, $$in = 0, $$lcssa = 0, $$lcssa52 = 0, $$lcssa54 = 0, $$lcssa56 = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
				var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
				var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
				var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
				var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
				var $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($__v)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($2|0)==($__p|0);
				L1: do {
					if ($3) {
						$$in = $1;
					} else {
						$$02$i3 = $__p;$5 = $1;
						while(1) {
							$4 = ((($5)) + -12|0);
							$6 = ((($$02$i3)) + -12|0);
							HEAP32[$4>>2] = 0;
							$7 = ((($5)) + -8|0);
							HEAP32[$7>>2] = 0;
							$8 = ((($5)) + -4|0);
							HEAP32[$8>>2] = 0;
							$9 = ((($$02$i3)) + -8|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$6>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = ($10|0)==($11|0);
							if (!($13)) {
								$14 = ($12|0)<(0);
								if ($14) {
									__THREW__ = 0;
									invoke_vi(46,($4|0));
									$15 = __THREW__; __THREW__ = 0;
									$16 = $15&1;
									if ($16) {
										$$lcssa54 = $4;$$lcssa56 = $7;
										break;
									}
								}
								__THREW__ = 0;
								$17 = (invoke_ii(29,($12|0))|0);
								$18 = __THREW__; __THREW__ = 0;
								$19 = $18&1;
								if ($19) {
									$$lcssa54 = $4;$$lcssa56 = $7;
									break;
								}
								HEAP32[$7>>2] = $17;
								HEAP32[$4>>2] = $17;
								$20 = (($17) + ($12)|0);
								$21 = ((($5)) + -4|0);
								HEAP32[$21>>2] = $20;
								$22 = HEAP32[$6>>2]|0;
								$23 = HEAP32[$9>>2]|0;
								$24 = ($22|0)==($23|0);
								if (!($24)) {
									$$01$i$i$i$i6 = $22;$26 = $17;
									while(1) {
										$25 = HEAP8[$$01$i$i$i$i6>>0]|0;
										HEAP8[$26>>0] = $25;
										$27 = HEAP32[$7>>2]|0;
										$28 = ((($27)) + 1|0);
										HEAP32[$7>>2] = $28;
										$29 = ((($$01$i$i$i$i6)) + 1|0);
										$30 = ($29|0)==($23|0);
										if ($30) {
											break;
										} else {
											$$01$i$i$i$i6 = $29;$26 = $28;
										}
									}
								}
							}
							$37 = HEAP32[$0>>2]|0;
							$38 = ((($37)) + -12|0);
							HEAP32[$0>>2] = $38;
							$39 = ($6|0)==($2|0);
							if ($39) {
								$$in = $38;
								break L1;
							} else {
								$$02$i3 = $6;$5 = $38;
							}
						}
						$31 = ___cxa_find_matching_catch_2()|0;
						$32 = tempRet0;
						$33 = HEAP32[$$lcssa54>>2]|0;
						$34 = ($33|0)==(0|0);
						if ($34) {
							___resumeException($31|0);
							// unreachable;
						}
						$35 = HEAP32[$$lcssa56>>2]|0;
						$36 = ($35|0)==($33|0);
						if (!($36)) {
							HEAP32[$$lcssa56>>2] = $33;
						}
						__ZdlPv($33);
						___resumeException($31|0);
						// unreachable;
					}
				} while(0);
				$40 = ((($this)) + 4|0);
				$41 = HEAP32[$40>>2]|0;
				$42 = ((($__v)) + 8|0);
				$43 = ($41|0)==($__p|0);
				if ($43) {
					$44 = $$in;
					$$pre$phiZ2D = $0;$81 = $44;
					$80 = HEAP32[$this>>2]|0;
					HEAP32[$this>>2] = $81;
					HEAP32[$$pre$phiZ2D>>2] = $80;
					$82 = HEAP32[$40>>2]|0;
					$83 = HEAP32[$42>>2]|0;
					HEAP32[$40>>2] = $83;
					HEAP32[$42>>2] = $82;
					$84 = ((($this)) + 8|0);
					$85 = ((($__v)) + 12|0);
					$86 = HEAP32[$84>>2]|0;
					$87 = HEAP32[$85>>2]|0;
					HEAP32[$84>>2] = $87;
					HEAP32[$85>>2] = $86;
					$88 = HEAP32[$$pre$phiZ2D>>2]|0;
					HEAP32[$__v>>2] = $88;
					return ($1|0);
				}
				$$pre$i = HEAP32[$42>>2]|0;
				$$02$i = $__p;$45 = $$pre$i;
				while(1) {
					HEAP32[$45>>2] = 0;
					$46 = ((($45)) + 4|0);
					HEAP32[$46>>2] = 0;
					$47 = ((($45)) + 8|0);
					HEAP32[$47>>2] = 0;
					$48 = ((($$02$i)) + 4|0);
					$49 = HEAP32[$48>>2]|0;
					$50 = HEAP32[$$02$i>>2]|0;
					$51 = (($49) - ($50))|0;
					$52 = ($49|0)==($50|0);
					if (!($52)) {
						$53 = ($51|0)<(0);
						if ($53) {
							__THREW__ = 0;
							invoke_vi(46,($45|0));
							$54 = __THREW__; __THREW__ = 0;
							$55 = $54&1;
							if ($55) {
								$$lcssa = $45;$$lcssa52 = $46;
								break;
							}
						}
						__THREW__ = 0;
						$56 = (invoke_ii(29,($51|0))|0);
						$57 = __THREW__; __THREW__ = 0;
						$58 = $57&1;
						if ($58) {
							$$lcssa = $45;$$lcssa52 = $46;
							break;
						}
						HEAP32[$46>>2] = $56;
						HEAP32[$45>>2] = $56;
						$59 = (($56) + ($51)|0);
						$60 = ((($45)) + 8|0);
						HEAP32[$60>>2] = $59;
						$61 = HEAP32[$$02$i>>2]|0;
						$62 = HEAP32[$48>>2]|0;
						$63 = ($61|0)==($62|0);
						if (!($63)) {
							$$01$i$i$i$i = $61;$65 = $56;
							while(1) {
								$64 = HEAP8[$$01$i$i$i$i>>0]|0;
								HEAP8[$65>>0] = $64;
								$66 = HEAP32[$46>>2]|0;
								$67 = ((($66)) + 1|0);
								HEAP32[$46>>2] = $67;
								$68 = ((($$01$i$i$i$i)) + 1|0);
								$69 = ($68|0)==($62|0);
								if ($69) {
									break;
								} else {
									$$01$i$i$i$i = $68;$65 = $67;
								}
							}
						}
					}
					$76 = ((($$02$i)) + 12|0);
					$77 = HEAP32[$42>>2]|0;
					$78 = ((($77)) + 12|0);
					HEAP32[$42>>2] = $78;
					$79 = ($76|0)==($41|0);
					if ($79) {
						label = 29;
						break;
					} else {
						$$02$i = $76;$45 = $78;
					}
				}
				if ((label|0) == 29) {
					$$pre = HEAP32[$0>>2]|0;
					$$pre$phiZ2D = $0;$81 = $$pre;
					$80 = HEAP32[$this>>2]|0;
					HEAP32[$this>>2] = $81;
					HEAP32[$$pre$phiZ2D>>2] = $80;
					$82 = HEAP32[$40>>2]|0;
					$83 = HEAP32[$42>>2]|0;
					HEAP32[$40>>2] = $83;
					HEAP32[$42>>2] = $82;
					$84 = ((($this)) + 8|0);
					$85 = ((($__v)) + 12|0);
					$86 = HEAP32[$84>>2]|0;
					$87 = HEAP32[$85>>2]|0;
					HEAP32[$84>>2] = $87;
					HEAP32[$85>>2] = $86;
					$88 = HEAP32[$$pre$phiZ2D>>2]|0;
					HEAP32[$__v>>2] = $88;
					return ($1|0);
				}
				$70 = ___cxa_find_matching_catch_2()|0;
				$71 = tempRet0;
				$72 = HEAP32[$$lcssa>>2]|0;
				$73 = ($72|0)==(0|0);
				if ($73) {
					___resumeException($70|0);
					// unreachable;
				}
				$74 = HEAP32[$$lcssa52>>2]|0;
				$75 = ($74|0)==($72|0);
				if (!($75)) {
					HEAP32[$$lcssa52>>2] = $72;
				}
				__ZdlPv($72);
				___resumeException($70|0);
				// unreachable;
				return (0)|0;
			}
			function __ZN6Bitmap5rightEi($this,$r) {
				$this = $this|0;
				$r = $r|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03 = 0, $row$03$in = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)==($r|0);
				if ($3) {
					STACKTOP = sp;return;
				}
				__ZN9Rectangle5rightEi($this,$r);
				$4 = ((($this)) + 12|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = (($5) + 1)|0;
				$9 = (($8) - ($7))|0;
				$10 = ($9|0)>(0);
				if (!($10)) {
					STACKTOP = sp;return;
				}
				$11 = ((($this)) + 16|0);
				$row$03$in = $9;
				while(1) {
					$row$03 = (($row$03$in) + -1)|0;
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) + (($row$03*12)|0)|0);
					$14 = HEAP32[$1>>2]|0;
					$15 = HEAP32[$this>>2]|0;
					$16 = (($14) + 1)|0;
					$17 = (($16) - ($15))|0;
					HEAP8[$0>>0] = 0;
					$18 = (((($12) + (($row$03*12)|0)|0)) + 4|0);
					$19 = HEAP32[$18>>2]|0;
					$20 = HEAP32[$13>>2]|0;
					$21 = (($19) - ($20))|0;
					$22 = ($17>>>0)>($21>>>0);
					$23 = $20;
					$24 = $19;
					if ($22) {
						$25 = (($17) - ($21))|0;
						__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($13,$25,$0);
					} else {
						$27 = ($17>>>0)<($21>>>0);
						if ($27) {
							$28 = (($23) + ($17)|0);
							$29 = ($24|0)==($28|0);
							if (!($29)) {
								HEAP32[$18>>2] = $28;
							}
						}
					}
					$26 = ($row$03$in|0)>(1);
					if ($26) {
						$row$03$in = $row$03;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN6Bitmap6bottomEi($this,$b) {
				$this = $this|0;
				$b = $b|0;
				var $$pre = 0, $$pre$i$i$i = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $row$05 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 12|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)==($b|0);
				if ($3) {
					STACKTOP = sp;return;
				}
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($2) + 1)|0;
				$7 = (($6) - ($5))|0;
				__ZN9Rectangle6bottomEi($this,$b);
				$8 = ((($this)) + 16|0);
				$9 = HEAP32[$1>>2]|0;
				$10 = HEAP32[$4>>2]|0;
				$11 = (($9) + 1)|0;
				$12 = (($11) - ($10))|0;
				$13 = ((($this)) + 20|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = HEAP32[$8>>2]|0;
				$16 = (($14) - ($15))|0;
				$17 = (($16|0) / 12)&-1;
				$18 = ($12>>>0)>($17>>>0);
				$19 = $15;
				$20 = $14;
				if ($18) {
					$21 = (($12) - ($17))|0;
					__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj($8,$21);
				} else {
					$22 = ($12>>>0)<($17>>>0);
					if ($22) {
						$23 = (($19) + (($12*12)|0)|0);
						$24 = ($20|0)==($23|0);
						if (!($24)) {
							$26 = $20;
							while(1) {
								$25 = ((($26)) + -12|0);
								HEAP32[$13>>2] = $25;
								$27 = HEAP32[$25>>2]|0;
								$28 = ($27|0)==(0|0);
								if ($28) {
									$29 = $25;
								} else {
									$37 = ((($26)) + -8|0);
									$38 = HEAP32[$37>>2]|0;
									$39 = ($38|0)==($27|0);
									if (!($39)) {
										HEAP32[$37>>2] = $27;
									}
									__ZdlPv($27);
									$$pre$i$i$i = HEAP32[$13>>2]|0;
									$29 = $$pre$i$i$i;
								}
								$30 = ($29|0)==($23|0);
								if ($30) {
									break;
								} else {
									$26 = $29;
								}
							}
						}
					}
				}
				$31 = HEAP32[$1>>2]|0;
				$32 = HEAP32[$4>>2]|0;
				$33 = (($31) + 1)|0;
				$34 = (($33) - ($32))|0;
				$35 = ($7|0)<($34|0);
				if (!($35)) {
					STACKTOP = sp;return;
				}
				$36 = ((($this)) + 8|0);
				$63 = $32;$64 = $31;$row$05 = $7;
				while(1) {
					$40 = HEAP32[$8>>2]|0;
					$41 = (($40) + (($row$05*12)|0)|0);
					$42 = HEAP32[$36>>2]|0;
					$43 = HEAP32[$this>>2]|0;
					$44 = (($42) + 1)|0;
					$45 = (($44) - ($43))|0;
					HEAP8[$0>>0] = 0;
					$46 = (((($40) + (($row$05*12)|0)|0)) + 4|0);
					$47 = HEAP32[$46>>2]|0;
					$48 = HEAP32[$41>>2]|0;
					$49 = (($47) - ($48))|0;
					$50 = ($45>>>0)>($49>>>0);
					$51 = $48;
					$52 = $47;
					if ($50) {
						$53 = (($45) - ($49))|0;
						__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($41,$53,$0);
						$$pre = HEAP32[$1>>2]|0;
						$$pre6 = HEAP32[$4>>2]|0;
						$59 = $$pre;$61 = $$pre6;
					} else {
						$54 = ($45>>>0)<($49>>>0);
						if ($54) {
							$55 = (($51) + ($45)|0);
							$56 = ($52|0)==($55|0);
							if ($56) {
								$59 = $64;$61 = $63;
							} else {
								HEAP32[$46>>2] = $55;
								$59 = $64;$61 = $63;
							}
						} else {
							$59 = $64;$61 = $63;
						}
					}
					$57 = (($row$05) + 1)|0;
					$58 = (($59) + 1)|0;
					$60 = (($58) - ($61))|0;
					$62 = ($57|0)<($60|0);
					if ($62) {
						$63 = $61;$64 = $59;$row$05 = $57;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN6Bitmap10add_bitmapERKS_($this,$bm) {
				$this = $this|0;
				$bm = $bm|0;
				var $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				__ZN6Bitmap13add_rectangleERK9Rectangle($this,$bm);
				$0 = ((($bm)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($bm)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				if ($4) {
					return;
				}
				$5 = ((($bm)) + 8|0);
				$6 = ((($bm)) + 16|0);
				$7 = ((($this)) + 4|0);
				$8 = ((($this)) + 16|0);
				$$pre = HEAP32[$5>>2]|0;
				$11 = $$pre;$row$02 = $1;
				while(1) {
					$9 = HEAP32[$bm>>2]|0;
					$10 = ($9|0)>($11|0);
					L6: do {
						if ($10) {
							$36 = $11;
						} else {
							$19 = $9;$37 = $11;$col$01 = $9;
							while(1) {
								$15 = HEAP32[$0>>2]|0;
								$16 = (($row$02) - ($15))|0;
								$17 = HEAP32[$6>>2]|0;
								$18 = (($col$01) - ($19))|0;
								$20 = (($17) + (($16*12)|0)|0);
								$21 = HEAP32[$20>>2]|0;
								$22 = (($21) + ($18)|0);
								$23 = HEAP8[$22>>0]|0;
								$24 = ($23<<24>>24)==(0);
								if ($24) {
									$34 = $37;
								} else {
									$25 = HEAP32[$7>>2]|0;
									$26 = (($row$02) - ($25))|0;
									$27 = HEAP32[$8>>2]|0;
									$28 = HEAP32[$this>>2]|0;
									$29 = (($col$01) - ($28))|0;
									$30 = (($27) + (($26*12)|0)|0);
									$31 = HEAP32[$30>>2]|0;
									$32 = (($31) + ($29)|0);
									HEAP8[$32>>0] = 1;
									$$pre8 = HEAP32[$5>>2]|0;
									$34 = $$pre8;
								}
								$33 = ($col$01|0)<($34|0);
								if (!($33)) {
									$36 = $34;
									break L6;
								}
								$35 = (($col$01) + 1)|0;
								$$pre7 = HEAP32[$bm>>2]|0;
								$19 = $$pre7;$37 = $34;$col$01 = $35;
							}
						}
					} while(0);
					$12 = (($row$02) + 1)|0;
					$13 = HEAP32[$2>>2]|0;
					$14 = ($row$02|0)<($13|0);
					if ($14) {
						$11 = $36;$row$02 = $12;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN6Bitmap13add_rectangleERK9Rectangle($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03$i = 0, $row$03$in$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = HEAP32[$re>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($1|0)<($2|0);
				if ($3) {
					__ZN6Bitmap4leftEi($this,$1);
				}
				$4 = ((($re)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ($5|0)<($7|0);
				if ($8) {
					__ZN6Bitmap3topEi($this,$5);
				}
				$9 = ((($re)) + 8|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = ((($this)) + 8|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ($10|0)>($12|0);
				if ($13) {
					$14 = ($12|0)==($10|0);
					if (!($14)) {
						__ZN9Rectangle5rightEi($this,$10);
						$15 = ((($this)) + 12|0);
						$16 = HEAP32[$15>>2]|0;
						$17 = HEAP32[$6>>2]|0;
						$18 = (($16) + 1)|0;
						$19 = (($18) - ($17))|0;
						$20 = ($19|0)>(0);
						if ($20) {
							$21 = ((($this)) + 16|0);
							$row$03$in$i = $19;
							while(1) {
								$row$03$i = (($row$03$in$i) + -1)|0;
								$22 = HEAP32[$21>>2]|0;
								$23 = (($22) + (($row$03$i*12)|0)|0);
								$24 = HEAP32[$11>>2]|0;
								$25 = HEAP32[$this>>2]|0;
								$26 = (($24) + 1)|0;
								$27 = (($26) - ($25))|0;
								HEAP8[$0>>0] = 0;
								$28 = (((($22) + (($row$03$i*12)|0)|0)) + 4|0);
								$29 = HEAP32[$28>>2]|0;
								$30 = HEAP32[$23>>2]|0;
								$31 = (($29) - ($30))|0;
								$32 = ($27>>>0)>($31>>>0);
								$33 = $30;
								$34 = $29;
								if ($32) {
									$35 = (($27) - ($31))|0;
									__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($23,$35,$0);
								} else {
									$37 = ($27>>>0)<($31>>>0);
									if ($37) {
										$38 = (($33) + ($27)|0);
										$39 = ($34|0)==($38|0);
										if (!($39)) {
											HEAP32[$28>>2] = $38;
										}
									}
								}
								$36 = ($row$03$in$i|0)>(1);
								if ($36) {
									$row$03$in$i = $row$03$i;
								} else {
									break;
								}
							}
						}
					}
				}
				$40 = ((($re)) + 12|0);
				$41 = HEAP32[$40>>2]|0;
				$42 = ((($this)) + 12|0);
				$43 = HEAP32[$42>>2]|0;
				$44 = ($41|0)>($43|0);
				if (!($44)) {
					STACKTOP = sp;return;
				}
				__ZN6Bitmap6bottomEi($this,$41);
				STACKTOP = sp;return;
			}
			function __ZN6Bitmap9add_pointEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row$03$i = 0, $row$03$in$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)<($col|0);
				if ($3) {
					$4 = ($2|0)==($col|0);
					if (!($4)) {
						__ZN9Rectangle5rightEi($this,$col);
						$5 = ((($this)) + 12|0);
						$6 = HEAP32[$5>>2]|0;
						$7 = ((($this)) + 4|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = (($6) + 1)|0;
						$10 = (($9) - ($8))|0;
						$11 = ($10|0)>(0);
						if ($11) {
							$12 = ((($this)) + 16|0);
							$row$03$in$i = $10;
							while(1) {
								$row$03$i = (($row$03$in$i) + -1)|0;
								$13 = HEAP32[$12>>2]|0;
								$14 = (($13) + (($row$03$i*12)|0)|0);
								$15 = HEAP32[$1>>2]|0;
								$16 = HEAP32[$this>>2]|0;
								$17 = (($15) + 1)|0;
								$18 = (($17) - ($16))|0;
								HEAP8[$0>>0] = 0;
								$19 = (((($13) + (($row$03$i*12)|0)|0)) + 4|0);
								$20 = HEAP32[$19>>2]|0;
								$21 = HEAP32[$14>>2]|0;
								$22 = (($20) - ($21))|0;
								$23 = ($18>>>0)>($22>>>0);
								$24 = $21;
								$25 = $20;
								if ($23) {
									$26 = (($18) - ($22))|0;
									__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($14,$26,$0);
								} else {
									$28 = ($18>>>0)<($22>>>0);
									if ($28) {
										$29 = (($24) + ($18)|0);
										$30 = ($25|0)==($29|0);
										if (!($30)) {
											HEAP32[$19>>2] = $29;
										}
									}
								}
								$27 = ($row$03$in$i|0)>(1);
								if ($27) {
									$row$03$in$i = $row$03$i;
								} else {
									break;
								}
							}
						}
					}
				} else {
					$31 = HEAP32[$this>>2]|0;
					$32 = ($31|0)>($col|0);
					if ($32) {
						__ZN6Bitmap4leftEi($this,$col);
					}
				}
				$33 = ((($this)) + 12|0);
				$34 = HEAP32[$33>>2]|0;
				$35 = ($34|0)<($row|0);
				if ($35) {
					__ZN6Bitmap6bottomEi($this,$row);
					$$pre = ((($this)) + 4|0);
					$$pre$phiZ2D = $$pre;
				} else {
					$36 = ((($this)) + 4|0);
					$37 = HEAP32[$36>>2]|0;
					$38 = ($37|0)>($row|0);
					if ($38) {
						__ZN6Bitmap3topEi($this,$row);
						$$pre$phiZ2D = $36;
					} else {
						$$pre$phiZ2D = $36;
					}
				}
				$39 = HEAP32[$$pre$phiZ2D>>2]|0;
				$40 = (($row) - ($39))|0;
				$41 = ((($this)) + 16|0);
				$42 = HEAP32[$41>>2]|0;
				$43 = HEAP32[$this>>2]|0;
				$44 = (($col) - ($43))|0;
				$45 = (($42) + (($40*12)|0)|0);
				$46 = HEAP32[$45>>2]|0;
				$47 = (($46) + ($44)|0);
				HEAP8[$47>>0] = 1;
				STACKTOP = sp;return;
			}
			function __ZN6Bitmap13adjust_heightEv($this) {
				$this = $this|0;
				var $$01 = 0, $$pre = 0, $$pre30 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$013 = 0, $col1$08 = 0, $row1$017 = 0, $row1$017$us = 0, $row1$06 = 0, $row2$09 = 0, $row2$09$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				L1: do {
					if ($4) {
						$row1$06 = $1;
					} else {
						$5 = HEAP32[$this>>2]|0;
						$6 = ((($this)) + 8|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = ($5|0)>($7|0);
						if ($8) {
							$row1$017$us = $1;
							while(1) {
								$10 = (($row1$017$us) + 1)|0;
								$11 = ($row1$017$us|0)<($3|0);
								if ($11) {
									$row1$017$us = $10;
								} else {
									$row1$06 = $10;
									break L1;
								}
							}
						}
						$9 = ((($this)) + 16|0);
						$$pre = HEAP32[$9>>2]|0;
						$row1$017 = $1;
						while(1) {
							$12 = (($row1$017) - ($1))|0;
							$13 = (($$pre) + (($12*12)|0)|0);
							$14 = HEAP32[$13>>2]|0;
							$col$013 = $5;
							while(1) {
								$17 = (($col$013) - ($5))|0;
								$18 = (($14) + ($17)|0);
								$19 = HEAP8[$18>>0]|0;
								$20 = ($19<<24>>24)==(0);
								if (!($20)) {
									$row1$06 = $row1$017;
									break L1;
								}
								$15 = (($col$013) + 1)|0;
								$16 = ($col$013|0)<($7|0);
								if ($16) {
									$col$013 = $15;
								} else {
									break;
								}
							}
							$21 = (($row1$017) + 1)|0;
							$22 = ($row1$017|0)<($3|0);
							if ($22) {
								$row1$017 = $21;
							} else {
								$row1$06 = $21;
								break;
							}
						}
					}
				} while(0);
				$23 = ($3|0)<($row1$06|0);
				if ($23) {
					$$01 = 0;
					return ($$01|0);
				}
				$24 = HEAP32[$this>>2]|0;
				$25 = ((($this)) + 8|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = ($24|0)>($26|0);
				if ($27) {
					$$01 = 0;
					return ($$01|0);
				}
				$28 = ((($this)) + 16|0);
				$$pre30 = HEAP32[$28>>2]|0;
				$row2$09 = $3;
				L20: while(1) {
					$29 = (($row2$09) - ($1))|0;
					$30 = (($$pre30) + (($29*12)|0)|0);
					$31 = HEAP32[$30>>2]|0;
					$col1$08 = $24;
					while(1) {
						$34 = (($col1$08) - ($24))|0;
						$35 = (($31) + ($34)|0);
						$36 = HEAP8[$35>>0]|0;
						$37 = ($36<<24>>24)==(0);
						if (!($37)) {
							$row2$09$lcssa = $row2$09;
							break L20;
						}
						$32 = (($col1$08) + 1)|0;
						$33 = ($col1$08|0)<($26|0);
						if ($33) {
							$col1$08 = $32;
						} else {
							break;
						}
					}
					$38 = (($row2$09) + -1)|0;
					$39 = ($row2$09|0)>($row1$06|0);
					if ($39) {
						$row2$09 = $38;
					} else {
						$$01 = 0;
						label = 20;
						break;
					}
				}
				if ((label|0) == 20) {
					return ($$01|0);
				}
				$40 = ($row1$06|0)>($1|0);
				if ($40) {
					__ZN6Bitmap3topEi($this,$row1$06);
					$$pre31 = HEAP32[$2>>2]|0;
					$42 = $$pre31;
				} else {
					$42 = $3;
				}
				$41 = ($row2$09$lcssa|0)<($42|0);
				if (!($41)) {
					$$01 = 1;
					return ($$01|0);
				}
				__ZN6Bitmap6bottomEi($this,$row2$09$lcssa);
				$$01 = 1;
				return ($$01|0);
			}
			function __ZN6Bitmap12adjust_widthEv($this) {
				$this = $this|0;
				var $$01 = 0, $$pre = 0, $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
				var $col1$020 = 0, $col1$020$us = 0, $col1$09 = 0, $col2$012 = 0, $col2$07 = 0, $row$016 = 0, $row$03$i = 0, $row$03$in$i = 0, $row1$011 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = HEAP32[$this>>2]|0;
				$2 = ((($this)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				L1: do {
					if ($4) {
						$col1$09 = $1;
					} else {
						$5 = ((($this)) + 4|0);
						$6 = HEAP32[$5>>2]|0;
						$7 = ((($this)) + 12|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = ($6|0)>($8|0);
						if ($9) {
							$col1$020$us = $1;
							while(1) {
								$11 = (($col1$020$us) + 1)|0;
								$12 = ($col1$020$us|0)<($3|0);
								if ($12) {
									$col1$020$us = $11;
								} else {
									$col1$09 = $11;
									break L1;
								}
							}
						}
						$10 = ((($this)) + 16|0);
						$$pre = HEAP32[$10>>2]|0;
						$col1$020 = $1;
						while(1) {
							$13 = (($col1$020) - ($1))|0;
							$row$016 = $6;
							while(1) {
								$16 = (($row$016) - ($6))|0;
								$17 = (($$pre) + (($16*12)|0)|0);
								$18 = HEAP32[$17>>2]|0;
								$19 = (($18) + ($13)|0);
								$20 = HEAP8[$19>>0]|0;
								$21 = ($20<<24>>24)==(0);
								if (!($21)) {
									$col1$09 = $col1$020;
									break L1;
								}
								$14 = (($row$016) + 1)|0;
								$15 = ($row$016|0)<($8|0);
								if ($15) {
									$row$016 = $14;
								} else {
									break;
								}
							}
							$22 = (($col1$020) + 1)|0;
							$23 = ($col1$020|0)<($3|0);
							if ($23) {
								$col1$020 = $22;
							} else {
								$col1$09 = $22;
								break;
							}
						}
					}
				} while(0);
				$24 = ($3|0)<($col1$09|0);
				L14: do {
					if ($24) {
						$col2$07 = $3;
					} else {
						$25 = ((($this)) + 4|0);
						$26 = HEAP32[$25>>2]|0;
						$27 = ((($this)) + 12|0);
						$28 = HEAP32[$27>>2]|0;
						$29 = ($26|0)>($28|0);
						if ($29) {
							$31 = ($3|0)>($col1$09|0);
							$32 = $31 ? $col1$09 : $3;
							$33 = (($32) + -1)|0;
							$col2$07 = $33;
							break;
						}
						$30 = ((($this)) + 16|0);
						$$pre35 = HEAP32[$30>>2]|0;
						$col2$012 = $3;
						while(1) {
							$34 = (($col2$012) - ($1))|0;
							$row1$011 = $26;
							while(1) {
								$37 = (($row1$011) - ($26))|0;
								$38 = (($$pre35) + (($37*12)|0)|0);
								$39 = HEAP32[$38>>2]|0;
								$40 = (($39) + ($34)|0);
								$41 = HEAP8[$40>>0]|0;
								$42 = ($41<<24>>24)==(0);
								if (!($42)) {
									$col2$07 = $col2$012;
									break L14;
								}
								$35 = (($row1$011) + 1)|0;
								$36 = ($row1$011|0)<($28|0);
								if ($36) {
									$row1$011 = $35;
								} else {
									break;
								}
							}
							$43 = (($col2$012) + -1)|0;
							$44 = ($col2$012|0)>($col1$09|0);
							if ($44) {
								$col2$012 = $43;
							} else {
								$col2$07 = $43;
								break;
							}
						}
					}
				} while(0);
				$45 = ($col1$09|0)<($col2$07|0);
				if (!($45)) {
					$$01 = 0;
					STACKTOP = sp;return ($$01|0);
				}
				$46 = ($col1$09|0)>($1|0);
				if ($46) {
					__ZN6Bitmap4leftEi($this,$col1$09);
					$$pre36 = HEAP32[$2>>2]|0;
					$48 = $$pre36;
				} else {
					$48 = $3;
				}
				$47 = ($col2$07|0)<($48|0);
				if (!($47)) {
					$$01 = 1;
					STACKTOP = sp;return ($$01|0);
				}
				$49 = ($48|0)==($col2$07|0);
				if (!($49)) {
					__ZN9Rectangle5rightEi($this,$col2$07);
					$50 = ((($this)) + 12|0);
					$51 = HEAP32[$50>>2]|0;
					$52 = ((($this)) + 4|0);
					$53 = HEAP32[$52>>2]|0;
					$54 = (($51) + 1)|0;
					$55 = (($54) - ($53))|0;
					$56 = ($55|0)>(0);
					if ($56) {
						$57 = ((($this)) + 16|0);
						$row$03$in$i = $55;
						while(1) {
							$row$03$i = (($row$03$in$i) + -1)|0;
							$58 = HEAP32[$57>>2]|0;
							$59 = (($58) + (($row$03$i*12)|0)|0);
							$60 = HEAP32[$2>>2]|0;
							$61 = HEAP32[$this>>2]|0;
							$62 = (($60) + 1)|0;
							$63 = (($62) - ($61))|0;
							HEAP8[$0>>0] = 0;
							$64 = (((($58) + (($row$03$i*12)|0)|0)) + 4|0);
							$65 = HEAP32[$64>>2]|0;
							$66 = HEAP32[$59>>2]|0;
							$67 = (($65) - ($66))|0;
							$68 = ($63>>>0)>($67>>>0);
							$69 = $66;
							$70 = $65;
							if ($68) {
								$71 = (($63) - ($67))|0;
								__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($59,$71,$0);
							} else {
								$73 = ($63>>>0)<($67>>>0);
								if ($73) {
									$74 = (($69) + ($63)|0);
									$75 = ($70|0)==($74|0);
									if (!($75)) {
										HEAP32[$64>>2] = $74;
									}
								}
							}
							$72 = ($row$03$in$i|0)>(1);
							if ($72) {
								$row$03$in$i = $row$03$i;
							} else {
								break;
							}
						}
					}
				}
				$$01 = 1;
				STACKTOP = sp;return ($$01|0);
			}
			function __ZNK6Bitmap4areaEv($this) {
				$this = $this|0;
				var $$a$1 = 0, $$a$1$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$lcssa = 0, $a$03 = 0, $a$11 = 0, $col$02 = 0, $row$04 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				if ($4) {
					$a$0$lcssa = 0;
					return ($a$0$lcssa|0);
				}
				$5 = HEAP32[$this>>2]|0;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ($5|0)>($7|0);
				if ($8) {
					$a$0$lcssa = 0;
					return ($a$0$lcssa|0);
				}
				$9 = ((($this)) + 16|0);
				$$pre = HEAP32[$9>>2]|0;
				$a$03 = 0;$row$04 = $1;
				while(1) {
					$10 = (($row$04) - ($1))|0;
					$11 = (($$pre) + (($10*12)|0)|0);
					$12 = HEAP32[$11>>2]|0;
					$a$11 = $a$03;$col$02 = $5;
					while(1) {
						$15 = (($col$02) - ($5))|0;
						$16 = (($12) + ($15)|0);
						$17 = HEAP8[$16>>0]|0;
						$18 = ($17<<24>>24)!=(0);
						$19 = $18&1;
						$$a$1 = (($19) + ($a$11))|0;
						$20 = (($col$02) + 1)|0;
						$21 = ($col$02|0)<($7|0);
						if ($21) {
							$a$11 = $$a$1;$col$02 = $20;
						} else {
							$$a$1$lcssa = $$a$1;
							break;
						}
					}
					$13 = (($row$04) + 1)|0;
					$14 = ($row$04|0)<($3|0);
					if ($14) {
						$a$03 = $$a$1$lcssa;$row$04 = $13;
					} else {
						$a$0$lcssa = $$a$1$lcssa;
						break;
					}
				}
				return ($a$0$lcssa|0);
			}
			function __ZNK6Bitmap12area_octagonEv($this) {
				$this = $this|0;
				var $$a$1 = 0, $$a$4 = 0, $$a$4$lcssa = 0, $$a$7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$lcssa = 0, $a$030 = 0, $a$1$lcssa = 0, $a$124 = 0, $a$3$lcssa = 0, $a$319 = 0, $a$412 = 0;
				var $a$6$lcssa = 0, $a$67 = 0, $a$7$lcssa = 0, $a$74 = 0, $col$023 = 0, $col2$011 = 0, $col5$05 = 0, $i$029 = 0, $i3$0$neg = 0, $i3$08 = 0, $i3$08$in = 0, $or$cond = 0, $row1$017 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($7) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($10|0)<($5|0);
				$12 = $11 ? $10 : $5;
				$13 = ($12*29)|0;
				$14 = (($13|0) / 100)&-1;
				$15 = (($14) + ($8))|0;
				$16 = (($7) - ($14))|0;
				$17 = ($13|0)>(99);
				if ($17) {
					$18 = ((($this)) + 16|0);
					$a$030 = 0;$i$029 = 0;
					while(1) {
						$24 = (($15) - ($i$029))|0;
						$25 = (($i$029) + ($16))|0;
						$26 = ($24|0)>($25|0);
						if ($26) {
							$a$1$lcssa = $a$030;
						} else {
							$27 = HEAP32[$18>>2]|0;
							$28 = (($27) + (($i$029*12)|0)|0);
							$29 = HEAP32[$28>>2]|0;
							$a$124 = $a$030;$col$023 = $24;
							while(1) {
								$32 = (($col$023) - ($8))|0;
								$33 = (($29) + ($32)|0);
								$34 = HEAP8[$33>>0]|0;
								$35 = ($34<<24>>24)!=(0);
								$36 = $35&1;
								$$a$1 = (($36) + ($a$124))|0;
								$37 = (($col$023) + 1)|0;
								$38 = ($col$023|0)<($25|0);
								if ($38) {
									$a$124 = $$a$1;$col$023 = $37;
								} else {
									$a$1$lcssa = $$a$1;
									break;
								}
							}
						}
						$30 = (($i$029) + 1)|0;
						$31 = ($30|0)<($14|0);
						if ($31) {
							$a$030 = $a$1$lcssa;$i$029 = $30;
						} else {
							$a$0$lcssa = $a$1$lcssa;
							break;
						}
					}
				} else {
					$a$0$lcssa = 0;
				}
				$19 = (($3) + ($14))|0;
				$20 = (($1) - ($14))|0;
				$21 = ($19|0)>($20|0);
				$22 = ($8|0)>($7|0);
				$or$cond = $21 | $22;
				if ($or$cond) {
					$a$3$lcssa = $a$0$lcssa;
				} else {
					$23 = ((($this)) + 16|0);
					$$pre = HEAP32[$23>>2]|0;
					$a$319 = $a$0$lcssa;$row1$017 = $19;
					while(1) {
						$40 = (($row1$017) - ($3))|0;
						$41 = (($$pre) + (($40*12)|0)|0);
						$42 = HEAP32[$41>>2]|0;
						$a$412 = $a$319;$col2$011 = $8;
						while(1) {
							$45 = (($col2$011) - ($8))|0;
							$46 = (($42) + ($45)|0);
							$47 = HEAP8[$46>>0]|0;
							$48 = ($47<<24>>24)!=(0);
							$49 = $48&1;
							$$a$4 = (($49) + ($a$412))|0;
							$50 = (($col2$011) + 1)|0;
							$51 = ($col2$011|0)<($7|0);
							if ($51) {
								$a$412 = $$a$4;$col2$011 = $50;
							} else {
								$$a$4$lcssa = $$a$4;
								break;
							}
						}
						$43 = (($row1$017) + 1)|0;
						$44 = ($row1$017|0)<($20|0);
						if ($44) {
							$a$319 = $$a$4$lcssa;$row1$017 = $43;
						} else {
							$a$3$lcssa = $$a$4$lcssa;
							break;
						}
					}
				}
				if (!($17)) {
					$a$6$lcssa = $a$3$lcssa;
					return ($a$6$lcssa|0);
				}
				$39 = ((($this)) + 16|0);
				$a$67 = $a$3$lcssa;$i3$08$in = $14;
				while(1) {
					$i3$08 = (($i3$08$in) + -1)|0;
					$53 = (($15) - ($i3$08))|0;
					$54 = (($i3$08) + ($16))|0;
					$55 = ($53|0)>($54|0);
					if ($55) {
						$a$7$lcssa = $a$67;
					} else {
						$i3$0$neg = (1 - ($i3$08$in))|0;
						$56 = (($1) + ($i3$0$neg))|0;
						$57 = (($56) - ($3))|0;
						$58 = HEAP32[$39>>2]|0;
						$59 = (($58) + (($57*12)|0)|0);
						$60 = HEAP32[$59>>2]|0;
						$a$74 = $a$67;$col5$05 = $53;
						while(1) {
							$61 = (($col5$05) - ($8))|0;
							$62 = (($60) + ($61)|0);
							$63 = HEAP8[$62>>0]|0;
							$64 = ($63<<24>>24)!=(0);
							$65 = $64&1;
							$$a$7 = (($65) + ($a$74))|0;
							$66 = (($col5$05) + 1)|0;
							$67 = ($col5$05|0)<($54|0);
							if ($67) {
								$a$74 = $$a$7;$col5$05 = $66;
							} else {
								$a$7$lcssa = $$a$7;
								break;
							}
						}
					}
					$52 = ($i3$08$in|0)>(1);
					if ($52) {
						$a$67 = $a$7$lcssa;$i3$08$in = $i3$08;
					} else {
						$a$6$lcssa = $a$7$lcssa;
						break;
					}
				}
				return ($a$6$lcssa|0);
			}
			function __ZNK6Bitmap12size_octagonEv($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($7) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($10|0)<($5|0);
				$12 = $11 ? $10 : $5;
				$13 = ($12*29)|0;
				$14 = (($13|0) / 100)&-1;
				$15 = Math_imul($10, $5)|0;
				$16 = $14 << 1;
				$17 = (($14) + 1)|0;
				$18 = Math_imul($16, $17)|0;
				$19 = (($15) - ($18))|0;
				return ($19|0);
			}
			function __ZNK6Bitmap9seek_leftEiib($this,$row,$col,$black) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				$black = $black|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($this)) + 4|0);
				$2 = ((($this)) + 16|0);
				$c$0 = $col;
				while(1) {
					$3 = ($c$0|0)>($0|0);
					if (!($3)) {
						$c$0$lcssa = $c$0;
						label = 4;
						break;
					}
					$4 = (($c$0) + -1)|0;
					$5 = HEAP32[$1>>2]|0;
					$6 = (($row) - ($5))|0;
					$7 = HEAP32[$2>>2]|0;
					$8 = (($4) - ($0))|0;
					$9 = (($7) + (($6*12)|0)|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = (($10) + ($8)|0);
					$12 = HEAP8[$11>>0]|0;
					$13 = ($12<<24>>24)!=(0);
					$14 = $13 ^ $black;
					if ($14) {
						$c$0 = $4;
					} else {
						$c$0$lcssa = $c$0;
						label = 4;
						break;
					}
				}
				if ((label|0) == 4) {
					return ($c$0$lcssa|0);
				}
				return (0)|0;
			}
			function __ZNK6Bitmap8seek_topEiib($this,$row,$col,$black) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				$black = $black|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r$0 = 0, $r$0$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$r$0 = $row;
				while(1) {
					$3 = ($r$0|0)>($1|0);
					if (!($3)) {
						$r$0$lcssa = $r$0;
						label = 4;
						break;
					}
					$4 = (($r$0) + -1)|0;
					$5 = (($4) - ($1))|0;
					$6 = HEAP32[$2>>2]|0;
					$7 = HEAP32[$this>>2]|0;
					$8 = (($col) - ($7))|0;
					$9 = (($6) + (($5*12)|0)|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = (($10) + ($8)|0);
					$12 = HEAP8[$11>>0]|0;
					$13 = ($12<<24>>24)!=(0);
					$14 = $13 ^ $black;
					if ($14) {
						$r$0 = $4;
					} else {
						$r$0$lcssa = $r$0;
						label = 4;
						break;
					}
				}
				if ((label|0) == 4) {
					return ($r$0$lcssa|0);
				}
				return (0)|0;
			}
			function __ZNK6Bitmap10seek_rightEiib($this,$row,$col,$black) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				$black = $black|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$lcssa = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = ((($this)) + 16|0);
				$c$0 = $col;
				while(1) {
					$4 = ($c$0|0)<($1|0);
					if (!($4)) {
						$c$0$lcssa = $c$0;
						label = 4;
						break;
					}
					$5 = (($c$0) + 1)|0;
					$6 = HEAP32[$2>>2]|0;
					$7 = (($row) - ($6))|0;
					$8 = HEAP32[$3>>2]|0;
					$9 = HEAP32[$this>>2]|0;
					$10 = (($5) - ($9))|0;
					$11 = (($8) + (($7*12)|0)|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) + ($10)|0);
					$14 = HEAP8[$13>>0]|0;
					$15 = ($14<<24>>24)!=(0);
					$16 = $15 ^ $black;
					if ($16) {
						$c$0 = $5;
					} else {
						$c$0$lcssa = $c$0;
						label = 4;
						break;
					}
				}
				if ((label|0) == 4) {
					return ($c$0$lcssa|0);
				}
				return (0)|0;
			}
			function __ZNK6Bitmap11seek_bottomEiib($this,$row,$col,$black) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				$black = $black|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $r$0 = 0, $r$0$lcssa = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = ((($this)) + 16|0);
				$r$0 = $row;
				while(1) {
					$4 = ($r$0|0)<($1|0);
					if (!($4)) {
						$r$0$lcssa = $r$0;
						label = 4;
						break;
					}
					$5 = (($r$0) + 1)|0;
					$6 = HEAP32[$2>>2]|0;
					$7 = (($5) - ($6))|0;
					$8 = HEAP32[$3>>2]|0;
					$9 = HEAP32[$this>>2]|0;
					$10 = (($col) - ($9))|0;
					$11 = (($8) + (($7*12)|0)|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) + ($10)|0);
					$14 = HEAP8[$13>>0]|0;
					$15 = ($14<<24>>24)!=(0);
					$16 = $15 ^ $black;
					if ($16) {
						$r$0 = $5;
					} else {
						$r$0$lcssa = $r$0;
						label = 4;
						break;
					}
				}
				if ((label|0) == 4) {
					return ($r$0$lcssa|0);
				}
				return (0)|0;
			}
			function __ZNK6Bitmap11escape_leftEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$015 = 0, $$03 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$0$lcssa = 0, $d$1$ = 0, $d$117 = 0;
				var $d$2$ph = 0, $d$3$lcssa = 0, $d$311 = 0, $not$ = 0, $not$4 = 0, $u$0 = 0, $u$0$lcssa = 0, $u$1$ = 0, $u$116 = 0, $u$2 = 0, $u$3$lcssa = 0, $u$38 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = (($row) - ($1))|0;
				$3 = ((($this)) + 16|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$this>>2]|0;
				$6 = (($col) - ($5))|0;
				$7 = (($4) + (($2*12)|0)|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) + ($6)|0);
				$10 = HEAP8[$9>>0]|0;
				$11 = ($10<<24>>24)==(0);
				if (!($11)) {
					$$03 = 0;
					return ($$03|0);
				}
				$12 = (($1) + 1)|0;
				$u$0 = $row;
				while(1) {
					$13 = ($u$0|0)>($12|0);
					if (!($13)) {
						$u$0$lcssa = $u$0;
						break;
					}
					$14 = (($u$0) + -1)|0;
					$15 = (($14) - ($1))|0;
					$16 = (($4) + (($15*12)|0)|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = (($17) + ($6)|0);
					$19 = HEAP8[$18>>0]|0;
					$20 = ($19<<24>>24)==(0);
					if ($20) {
						$u$0 = $14;
					} else {
						$u$0$lcssa = $u$0;
						break;
					}
				}
				$21 = ((($this)) + 12|0);
				$22 = HEAP32[$21>>2]|0;
				$23 = (($22) + -1)|0;
				$d$0 = $row;
				while(1) {
					$24 = ($d$0|0)<($23|0);
					if (!($24)) {
						$d$0$lcssa = $d$0;
						break;
					}
					$25 = (($d$0) + 1)|0;
					$26 = (($25) - ($1))|0;
					$27 = (($4) + (($26*12)|0)|0);
					$28 = HEAP32[$27>>2]|0;
					$29 = (($28) + ($6)|0);
					$30 = HEAP8[$29>>0]|0;
					$31 = ($30<<24>>24)==(0);
					if ($31) {
						$d$0 = $25;
					} else {
						$d$0$lcssa = $d$0;
						break;
					}
				}
				$32 = ($u$0$lcssa|0)>($d$0$lcssa|0);
				L12: do {
					if ($32) {
						$$1 = $col;
					} else {
						$$015 = $col;$d$117 = $d$0$lcssa;$u$116 = $u$0$lcssa;
						while(1) {
							$34 = (($$015) + -1)|0;
							$35 = ($$015|0)>($5|0);
							if (!($35)) {
								$$1 = $34;
								break L12;
							}
							$36 = ($u$116|0)>($12|0);
							if ($36) {
								$37 = (($u$116) - ($1))|0;
								$38 = (($34) - ($5))|0;
								$39 = (($4) + (($37*12)|0)|0);
								$40 = HEAP32[$39>>2]|0;
								$41 = (($40) + ($38)|0);
								$42 = HEAP8[$41>>0]|0;
								$not$4 = ($42<<24>>24)==(0);
								$43 = $not$4 << 31 >> 31;
								$u$1$ = (($43) + ($u$116))|0;
								$u$2 = $u$1$;
							} else {
								$u$2 = $u$116;
							}
							$44 = ($d$117|0)<($23|0);
							if ($44) {
								$45 = (($d$117) - ($1))|0;
								$46 = (($34) - ($5))|0;
								$47 = (($4) + (($45*12)|0)|0);
								$48 = HEAP32[$47>>2]|0;
								$49 = (($48) + ($46)|0);
								$50 = HEAP8[$49>>0]|0;
								$not$ = ($50<<24>>24)==(0);
								$51 = $not$&1;
								$d$1$ = (($51) + ($d$117))|0;
								$d$2$ph = $d$1$;
							} else {
								$d$2$ph = $d$117;
							}
							$52 = ($u$2|0)>($d$2$ph|0);
							L22: do {
								if ($52) {
									$u$3$lcssa = $u$2;
								} else {
									$53 = (($34) - ($5))|0;
									$u$38 = $u$2;
									while(1) {
										$54 = (($u$38) - ($1))|0;
										$55 = (($4) + (($54*12)|0)|0);
										$56 = HEAP32[$55>>2]|0;
										$57 = (($56) + ($53)|0);
										$58 = HEAP8[$57>>0]|0;
										$59 = ($58<<24>>24)==(0);
										if ($59) {
											$u$3$lcssa = $u$38;
											break L22;
										}
										$62 = (($u$38) + 1)|0;
										$63 = ($u$38|0)<($d$2$ph|0);
										if ($63) {
											$u$38 = $62;
										} else {
											$u$3$lcssa = $62;
											break;
										}
									}
								}
							} while(0);
							$60 = ($u$3$lcssa|0)>($d$2$ph|0);
							L28: do {
								if ($60) {
									$d$3$lcssa = $d$2$ph;
								} else {
									$61 = (($34) - ($5))|0;
									$d$311 = $d$2$ph;
									while(1) {
										$64 = (($d$311) - ($1))|0;
										$65 = (($4) + (($64*12)|0)|0);
										$66 = HEAP32[$65>>2]|0;
										$67 = (($66) + ($61)|0);
										$68 = HEAP8[$67>>0]|0;
										$69 = ($68<<24>>24)==(0);
										if ($69) {
											$d$3$lcssa = $d$311;
											break L28;
										}
										$70 = (($d$311) + -1)|0;
										$71 = ($u$3$lcssa|0)<($d$311|0);
										if ($71) {
											$d$311 = $70;
										} else {
											$d$3$lcssa = $70;
											break;
										}
									}
								}
							} while(0);
							$33 = ($u$3$lcssa|0)>($d$3$lcssa|0);
							if ($33) {
								$$1 = $34;
								break;
							} else {
								$$015 = $34;$d$117 = $d$3$lcssa;$u$116 = $u$3$lcssa;
							}
						}
					}
				} while(0);
				$72 = ($$1|0)<($5|0);
				$$03 = $72;
				return ($$03|0);
			}
			function __ZNK6Bitmap10escape_topEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$0 = 0, $$0315 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1$ = 0, $l$116 = 0, $l$2 = 0, $l$3$lcssa = 0, $l$38 = 0, $not$ = 0;
				var $not$4 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1$ = 0, $r$117 = 0, $r$2$ph = 0, $r$3$lcssa = 0, $r$311 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = (($row) - ($1))|0;
				$3 = ((($this)) + 16|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$this>>2]|0;
				$6 = (($col) - ($5))|0;
				$7 = (($4) + (($2*12)|0)|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) + ($6)|0);
				$10 = HEAP8[$9>>0]|0;
				$11 = ($10<<24>>24)==(0);
				if (!($11)) {
					$$0 = 0;
					return ($$0|0);
				}
				$12 = (($5) + 1)|0;
				$l$0 = $col;
				while(1) {
					$13 = ($l$0|0)>($12|0);
					if (!($13)) {
						$l$0$lcssa = $l$0;
						break;
					}
					$14 = (($l$0) + -1)|0;
					$15 = (($14) - ($5))|0;
					$16 = (($8) + ($15)|0);
					$17 = HEAP8[$16>>0]|0;
					$18 = ($17<<24>>24)==(0);
					if ($18) {
						$l$0 = $14;
					} else {
						$l$0$lcssa = $l$0;
						break;
					}
				}
				$19 = ((($this)) + 8|0);
				$20 = HEAP32[$19>>2]|0;
				$21 = (($20) + -1)|0;
				$r$0 = $col;
				while(1) {
					$22 = ($r$0|0)<($21|0);
					if (!($22)) {
						$r$0$lcssa = $r$0;
						break;
					}
					$23 = (($r$0) + 1)|0;
					$24 = (($23) - ($5))|0;
					$25 = (($8) + ($24)|0);
					$26 = HEAP8[$25>>0]|0;
					$27 = ($26<<24>>24)==(0);
					if ($27) {
						$r$0 = $23;
					} else {
						$r$0$lcssa = $r$0;
						break;
					}
				}
				$28 = ($l$0$lcssa|0)>($r$0$lcssa|0);
				L12: do {
					if ($28) {
						$$1 = $row;
					} else {
						$$0315 = $row;$l$116 = $l$0$lcssa;$r$117 = $r$0$lcssa;
						while(1) {
							$30 = (($$0315) + -1)|0;
							$31 = ($$0315|0)>($1|0);
							if (!($31)) {
								$$1 = $30;
								break L12;
							}
							$32 = ($l$116|0)>($12|0);
							if ($32) {
								$33 = (($30) - ($1))|0;
								$34 = (($l$116) - ($5))|0;
								$35 = (($4) + (($33*12)|0)|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = (($36) + ($34)|0);
								$38 = HEAP8[$37>>0]|0;
								$not$4 = ($38<<24>>24)==(0);
								$39 = $not$4 << 31 >> 31;
								$l$1$ = (($39) + ($l$116))|0;
								$l$2 = $l$1$;
							} else {
								$l$2 = $l$116;
							}
							$40 = ($r$117|0)<($21|0);
							if ($40) {
								$41 = (($30) - ($1))|0;
								$42 = (($r$117) - ($5))|0;
								$43 = (($4) + (($41*12)|0)|0);
								$44 = HEAP32[$43>>2]|0;
								$45 = (($44) + ($42)|0);
								$46 = HEAP8[$45>>0]|0;
								$not$ = ($46<<24>>24)==(0);
								$47 = $not$&1;
								$r$1$ = (($47) + ($r$117))|0;
								$r$2$ph = $r$1$;
							} else {
								$r$2$ph = $r$117;
							}
							$48 = ($l$2|0)>($r$2$ph|0);
							L22: do {
								if ($48) {
									$l$3$lcssa = $l$2;
								} else {
									$49 = (($30) - ($1))|0;
									$50 = (($4) + (($49*12)|0)|0);
									$51 = HEAP32[$50>>2]|0;
									$l$38 = $l$2;
									while(1) {
										$52 = (($l$38) - ($5))|0;
										$53 = (($51) + ($52)|0);
										$54 = HEAP8[$53>>0]|0;
										$55 = ($54<<24>>24)==(0);
										if ($55) {
											$l$3$lcssa = $l$38;
											break L22;
										}
										$60 = (($l$38) + 1)|0;
										$61 = ($l$38|0)<($r$2$ph|0);
										if ($61) {
											$l$38 = $60;
										} else {
											$l$3$lcssa = $60;
											break;
										}
									}
								}
							} while(0);
							$56 = ($l$3$lcssa|0)>($r$2$ph|0);
							L28: do {
								if ($56) {
									$r$3$lcssa = $r$2$ph;
								} else {
									$57 = (($30) - ($1))|0;
									$58 = (($4) + (($57*12)|0)|0);
									$59 = HEAP32[$58>>2]|0;
									$r$311 = $r$2$ph;
									while(1) {
										$62 = (($r$311) - ($5))|0;
										$63 = (($59) + ($62)|0);
										$64 = HEAP8[$63>>0]|0;
										$65 = ($64<<24>>24)==(0);
										if ($65) {
											$r$3$lcssa = $r$311;
											break L28;
										}
										$66 = (($r$311) + -1)|0;
										$67 = ($l$3$lcssa|0)<($r$311|0);
										if ($67) {
											$r$311 = $66;
										} else {
											$r$3$lcssa = $66;
											break;
										}
									}
								}
							} while(0);
							$29 = ($l$3$lcssa|0)>($r$3$lcssa|0);
							if ($29) {
								$$1 = $30;
								break;
							} else {
								$$0315 = $30;$l$116 = $l$3$lcssa;$r$117 = $r$3$lcssa;
							}
						}
					}
				} while(0);
				$68 = ($$1|0)<($1|0);
				$$0 = $68;
				return ($$0|0);
			}
			function __ZNK6Bitmap12escape_rightEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$024 = 0, $$05 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $8 = 0, $9 = 0, $d$0 = 0, $d$0$lcssa = 0, $d$126 = 0, $d$2$lcssa = 0, $d$212 = 0, $d$3$lcssa = 0, $d$320 = 0, $u$0 = 0, $u$0$lcssa = 0, $u$125 = 0, $u$2$lcssa = 0, $u$29 = 0, $u$3$lcssa = 0, $u$316 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = (($row) - ($1))|0;
				$3 = ((($this)) + 16|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$this>>2]|0;
				$6 = (($col) - ($5))|0;
				$7 = (($4) + (($2*12)|0)|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) + ($6)|0);
				$10 = HEAP8[$9>>0]|0;
				$11 = ($10<<24>>24)==(0);
				if (!($11)) {
					$$05 = 0;
					return ($$05|0);
				}
				$12 = (($1) + 1)|0;
				$u$0 = $row;
				while(1) {
					$13 = ($u$0|0)>($12|0);
					if (!($13)) {
						$u$0$lcssa = $u$0;
						break;
					}
					$14 = (($u$0) + -1)|0;
					$15 = (($14) - ($1))|0;
					$16 = (($4) + (($15*12)|0)|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = (($17) + ($6)|0);
					$19 = HEAP8[$18>>0]|0;
					$20 = ($19<<24>>24)==(0);
					if ($20) {
						$u$0 = $14;
					} else {
						$u$0$lcssa = $u$0;
						break;
					}
				}
				$21 = ((($this)) + 12|0);
				$22 = HEAP32[$21>>2]|0;
				$23 = (($22) + -1)|0;
				$d$0 = $row;
				while(1) {
					$24 = ($d$0|0)<($23|0);
					if (!($24)) {
						$d$0$lcssa = $d$0;
						break;
					}
					$25 = (($d$0) + 1)|0;
					$26 = (($25) - ($1))|0;
					$27 = (($4) + (($26*12)|0)|0);
					$28 = HEAP32[$27>>2]|0;
					$29 = (($28) + ($6)|0);
					$30 = HEAP8[$29>>0]|0;
					$31 = ($30<<24>>24)==(0);
					if ($31) {
						$d$0 = $25;
					} else {
						$d$0$lcssa = $d$0;
						break;
					}
				}
				$32 = ($u$0$lcssa|0)>($d$0$lcssa|0);
				$$phi$trans$insert = ((($this)) + 8|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				L12: do {
					if ($32) {
						$$1 = $col;
					} else {
						$33 = (($1) + 1)|0;
						$$024 = $col;$d$126 = $d$0$lcssa;$u$125 = $u$0$lcssa;
						while(1) {
							$35 = (($$024) + 1)|0;
							$36 = ($$024|0)<($$pre|0);
							if (!($36)) {
								$$1 = $35;
								break L12;
							}
							$37 = ($u$125|0)>($33|0);
							L17: do {
								if ($37) {
									$38 = (($35) - ($5))|0;
									$u$29 = $u$125;
									while(1) {
										$39 = (($u$29) - ($1))|0;
										$40 = (($4) + (($39*12)|0)|0);
										$41 = HEAP32[$40>>2]|0;
										$42 = (($41) + ($38)|0);
										$43 = HEAP8[$42>>0]|0;
										$44 = ($43<<24>>24)==(0);
										if (!($44)) {
											$u$2$lcssa = $u$29;
											break L17;
										}
										$47 = (($u$29) + -1)|0;
										$48 = ($47|0)>($33|0);
										if ($48) {
											$u$29 = $47;
										} else {
											$u$2$lcssa = $47;
											break;
										}
									}
								} else {
									$u$2$lcssa = $u$125;
								}
							} while(0);
							$45 = ($d$126|0)<($23|0);
							L23: do {
								if ($45) {
									$46 = (($35) - ($5))|0;
									$d$212 = $d$126;
									while(1) {
										$49 = (($d$212) - ($1))|0;
										$50 = (($4) + (($49*12)|0)|0);
										$51 = HEAP32[$50>>2]|0;
										$52 = (($51) + ($46)|0);
										$53 = HEAP8[$52>>0]|0;
										$54 = ($53<<24>>24)==(0);
										if (!($54)) {
											$d$2$lcssa = $d$212;
											break L23;
										}
										$57 = (($d$212) + 1)|0;
										$58 = ($57|0)<($23|0);
										if ($58) {
											$d$212 = $57;
										} else {
											$d$2$lcssa = $57;
											break;
										}
									}
								} else {
									$d$2$lcssa = $d$126;
								}
							} while(0);
							$55 = ($u$2$lcssa|0)>($d$2$lcssa|0);
							L29: do {
								if ($55) {
									$u$3$lcssa = $u$2$lcssa;
								} else {
									$56 = (($35) - ($5))|0;
									$u$316 = $u$2$lcssa;
									while(1) {
										$59 = (($u$316) - ($1))|0;
										$60 = (($4) + (($59*12)|0)|0);
										$61 = HEAP32[$60>>2]|0;
										$62 = (($61) + ($56)|0);
										$63 = HEAP8[$62>>0]|0;
										$64 = ($63<<24>>24)==(0);
										if ($64) {
											$u$3$lcssa = $u$316;
											break L29;
										}
										$67 = (($u$316) + 1)|0;
										$68 = ($u$316|0)<($d$2$lcssa|0);
										if ($68) {
											$u$316 = $67;
										} else {
											$u$3$lcssa = $67;
											break;
										}
									}
								}
							} while(0);
							$65 = ($u$3$lcssa|0)>($d$2$lcssa|0);
							L35: do {
								if ($65) {
									$d$3$lcssa = $d$2$lcssa;
								} else {
									$66 = (($35) - ($5))|0;
									$d$320 = $d$2$lcssa;
									while(1) {
										$69 = (($d$320) - ($1))|0;
										$70 = (($4) + (($69*12)|0)|0);
										$71 = HEAP32[$70>>2]|0;
										$72 = (($71) + ($66)|0);
										$73 = HEAP8[$72>>0]|0;
										$74 = ($73<<24>>24)==(0);
										if ($74) {
											$d$3$lcssa = $d$320;
											break L35;
										}
										$75 = (($d$320) + -1)|0;
										$76 = ($u$3$lcssa|0)<($d$320|0);
										if ($76) {
											$d$320 = $75;
										} else {
											$d$3$lcssa = $75;
											break;
										}
									}
								}
							} while(0);
							$34 = ($u$3$lcssa|0)>($d$3$lcssa|0);
							if ($34) {
								$$1 = $35;
								break;
							} else {
								$$024 = $35;$d$126 = $d$3$lcssa;$u$125 = $u$3$lcssa;
							}
						}
					}
				} while(0);
				$77 = ($$1|0)>($$pre|0);
				$$05 = $77;
				return ($$05|0);
			}
			function __ZNK6Bitmap13escape_bottomEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$0 = 0, $$0315 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1$ = 0, $l$116 = 0, $l$2 = 0, $l$3$lcssa = 0;
				var $l$38 = 0, $not$ = 0, $not$4 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1$ = 0, $r$117 = 0, $r$2$ph = 0, $r$3$lcssa = 0, $r$311 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = (($row) - ($1))|0;
				$3 = ((($this)) + 16|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$this>>2]|0;
				$6 = (($col) - ($5))|0;
				$7 = (($4) + (($2*12)|0)|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) + ($6)|0);
				$10 = HEAP8[$9>>0]|0;
				$11 = ($10<<24>>24)==(0);
				if (!($11)) {
					$$0 = 0;
					return ($$0|0);
				}
				$12 = (($5) + 1)|0;
				$l$0 = $col;
				while(1) {
					$13 = ($l$0|0)>($12|0);
					if (!($13)) {
						$l$0$lcssa = $l$0;
						break;
					}
					$14 = (($l$0) + -1)|0;
					$15 = (($14) - ($5))|0;
					$16 = (($8) + ($15)|0);
					$17 = HEAP8[$16>>0]|0;
					$18 = ($17<<24>>24)==(0);
					if ($18) {
						$l$0 = $14;
					} else {
						$l$0$lcssa = $l$0;
						break;
					}
				}
				$19 = ((($this)) + 8|0);
				$20 = HEAP32[$19>>2]|0;
				$21 = (($20) + -1)|0;
				$r$0 = $col;
				while(1) {
					$22 = ($r$0|0)<($21|0);
					if (!($22)) {
						$r$0$lcssa = $r$0;
						break;
					}
					$23 = (($r$0) + 1)|0;
					$24 = (($23) - ($5))|0;
					$25 = (($8) + ($24)|0);
					$26 = HEAP8[$25>>0]|0;
					$27 = ($26<<24>>24)==(0);
					if ($27) {
						$r$0 = $23;
					} else {
						$r$0$lcssa = $r$0;
						break;
					}
				}
				$28 = ($l$0$lcssa|0)>($r$0$lcssa|0);
				$$phi$trans$insert = ((($this)) + 12|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				L12: do {
					if ($28) {
						$$1 = $row;
					} else {
						$$0315 = $row;$l$116 = $l$0$lcssa;$r$117 = $r$0$lcssa;
						while(1) {
							$30 = (($$0315) + 1)|0;
							$31 = ($$0315|0)<($$pre|0);
							if (!($31)) {
								$$1 = $30;
								break L12;
							}
							$32 = ($l$116|0)>($12|0);
							if ($32) {
								$33 = (($30) - ($1))|0;
								$34 = (($l$116) - ($5))|0;
								$35 = (($4) + (($33*12)|0)|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = (($36) + ($34)|0);
								$38 = HEAP8[$37>>0]|0;
								$not$4 = ($38<<24>>24)==(0);
								$39 = $not$4 << 31 >> 31;
								$l$1$ = (($39) + ($l$116))|0;
								$l$2 = $l$1$;
							} else {
								$l$2 = $l$116;
							}
							$40 = ($r$117|0)<($21|0);
							if ($40) {
								$41 = (($30) - ($1))|0;
								$42 = (($r$117) - ($5))|0;
								$43 = (($4) + (($41*12)|0)|0);
								$44 = HEAP32[$43>>2]|0;
								$45 = (($44) + ($42)|0);
								$46 = HEAP8[$45>>0]|0;
								$not$ = ($46<<24>>24)==(0);
								$47 = $not$&1;
								$r$1$ = (($47) + ($r$117))|0;
								$r$2$ph = $r$1$;
							} else {
								$r$2$ph = $r$117;
							}
							$48 = ($l$2|0)>($r$2$ph|0);
							L22: do {
								if ($48) {
									$l$3$lcssa = $l$2;
								} else {
									$49 = (($30) - ($1))|0;
									$50 = (($4) + (($49*12)|0)|0);
									$51 = HEAP32[$50>>2]|0;
									$l$38 = $l$2;
									while(1) {
										$52 = (($l$38) - ($5))|0;
										$53 = (($51) + ($52)|0);
										$54 = HEAP8[$53>>0]|0;
										$55 = ($54<<24>>24)==(0);
										if ($55) {
											$l$3$lcssa = $l$38;
											break L22;
										}
										$60 = (($l$38) + 1)|0;
										$61 = ($l$38|0)<($r$2$ph|0);
										if ($61) {
											$l$38 = $60;
										} else {
											$l$3$lcssa = $60;
											break;
										}
									}
								}
							} while(0);
							$56 = ($l$3$lcssa|0)>($r$2$ph|0);
							L28: do {
								if ($56) {
									$r$3$lcssa = $r$2$ph;
								} else {
									$57 = (($30) - ($1))|0;
									$58 = (($4) + (($57*12)|0)|0);
									$59 = HEAP32[$58>>2]|0;
									$r$311 = $r$2$ph;
									while(1) {
										$62 = (($r$311) - ($5))|0;
										$63 = (($59) + ($62)|0);
										$64 = HEAP8[$63>>0]|0;
										$65 = ($64<<24>>24)==(0);
										if ($65) {
											$r$3$lcssa = $r$311;
											break L28;
										}
										$66 = (($r$311) + -1)|0;
										$67 = ($l$3$lcssa|0)<($r$311|0);
										if ($67) {
											$r$311 = $66;
										} else {
											$r$3$lcssa = $66;
											break;
										}
									}
								}
							} while(0);
							$29 = ($l$3$lcssa|0)>($r$3$lcssa|0);
							if ($29) {
								$$1 = $30;
								break;
							} else {
								$$0315 = $30;$l$116 = $l$3$lcssa;$r$117 = $r$3$lcssa;
							}
						}
					}
				} while(0);
				$68 = ($$1|0)>($$pre|0);
				$$0 = $68;
				return ($$0|0);
			}
			function __ZNK6Bitmap10follow_topEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$02 = 0, $$03$lcssa = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
				var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
				var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
				var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
				var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $99 = 0, $alive$0$off024 = 0, $alive$1$off0 = 0, $array = 0, $c$0 = 0, $c$0$lcssa77 = 0, $c$1 = 0, $c$1$lcssa = 0, $c$175 = 0, $i$025 = 0, $i1$027 = 0, $i2$031 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$array = sp;
				$0 = sp + 14|0;
				$1 = sp + 13|0;
				$2 = sp + 12|0;
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($row) - ($4))|0;
				$6 = ((($this)) + 16|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($col) - ($8))|0;
				$10 = (($7) + (($5*12)|0)|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = (($11) + ($9)|0);
				$13 = HEAP8[$12>>0]|0;
				$14 = ($13<<24>>24)==(0);
				if ($14) {
					$$02 = $row;
					STACKTOP = sp;return ($$02|0);
				}
				HEAP32[$array>>2] = 0;
				$15 = ((($array)) + 4|0);
				HEAP32[$15>>2] = 0;
				$16 = ((($array)) + 8|0);
				HEAP32[$16>>2] = 0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = (($18) + 1)|0;
				$20 = (($19) - ($8))|0;
				$21 = ((($array)) + 8|0);
				$22 = ($19|0)==($8|0);
				do {
					if ($22) {
						$c$0 = $col;
						label = 6;
					} else {
						$23 = ($19|0)==($8|0);
						if ($23) {
							$27 = 0;
						} else {
							__THREW__ = 0;
							$24 = (invoke_ii(29,($20|0))|0);
							$25 = __THREW__; __THREW__ = 0;
							$26 = $25&1;
							if ($26) {
								break;
							} else {
								$27 = $24;
							}
						}
						$28 = $27;
						$29 = (($27) + ($20)|0);
						$30 = $29;
						HEAP32[$array>>2] = $28;
						HEAP32[$15>>2] = $28;
						HEAP32[$21>>2] = $30;
						$c$0 = $col;
						label = 6;
					}
				} while(0);
				L9: do {
					if ((label|0) == 6) {
						while(1) {
							label = 0;
							$31 = ($c$0|0)>($8|0);
							if (!($31)) {
								$49 = $18;
								break;
							}
							$32 = (($c$0) + -1)|0;
							$33 = (($32) - ($8))|0;
							$34 = HEAP32[$10>>2]|0;
							$35 = (($34) + ($33)|0);
							$36 = HEAP8[$35>>0]|0;
							$37 = ($36<<24>>24)==(0);
							if ($37) {
								$c$0$lcssa77 = $c$0;
								label = 12;
								break;
							} else {
								$c$0 = $32;
								label = 6;
							}
						}
						if ((label|0) == 12) {
							HEAP8[$0>>0] = 0;
							$44 = ($c$0$lcssa77|0)==($8|0);
							if ($44) {
								$49 = $18;
							} else {
								$45 = (($c$0$lcssa77) - ($8))|0;
								__THREW__ = 0;
								invoke_viii(51,($array|0),($45|0),($0|0));
								$46 = __THREW__; __THREW__ = 0;
								$47 = $46&1;
								if ($47) {
									break;
								}
								$$pre = HEAP32[$17>>2]|0;
								$49 = $$pre;
							}
						}
						$c$1 = $col;
						while(1) {
							$48 = ($c$1|0)<($49|0);
							if (!($48)) {
								$c$1$lcssa = $c$1;
								label = 17;
								break;
							}
							$50 = (($c$1) + 1)|0;
							$51 = HEAP32[$3>>2]|0;
							$52 = (($row) - ($51))|0;
							$53 = HEAP32[$6>>2]|0;
							$54 = HEAP32[$this>>2]|0;
							$55 = (($50) - ($54))|0;
							$56 = (($53) + (($52*12)|0)|0);
							$57 = HEAP32[$56>>2]|0;
							$58 = (($57) + ($55)|0);
							$59 = HEAP8[$58>>0]|0;
							$60 = ($59<<24>>24)==(0);
							if ($60) {
								$62 = $54;$c$175 = $c$1;
								break;
							} else {
								$c$1 = $50;
							}
						}
						if ((label|0) == 17) {
							$$pre39 = HEAP32[$this>>2]|0;
							$62 = $$pre39;$c$175 = $c$1$lcssa;
						}
						$61 = (($c$175) - ($62))|0;
						$63 = (($61) + 1)|0;
						HEAP8[$1>>0] = 1;
						$64 = HEAP32[$15>>2]|0;
						$65 = HEAP32[$array>>2]|0;
						$66 = (($64) - ($65))|0;
						$67 = ($63>>>0)>($66>>>0);
						$68 = $65;
						$69 = $64;
						if ($67) {
							$70 = (($63) - ($66))|0;
							__THREW__ = 0;
							invoke_viii(51,($array|0),($70|0),($1|0));
							$71 = __THREW__; __THREW__ = 0;
							$72 = $71&1;
							if ($72) {
								break;
							}
							$$pre40 = HEAP32[$17>>2]|0;
							$77 = $$pre40;
						} else {
							$73 = ($63>>>0)<($66>>>0);
							if ($73) {
								$74 = (($68) + ($63)|0);
								$75 = ($69|0)==($74|0);
								if ($75) {
									$77 = $49;
								} else {
									HEAP32[$15>>2] = $74;
									$77 = $49;
								}
							} else {
								$77 = $49;
							}
						}
						$76 = ($c$175|0)<($77|0);
						do {
							if ($76) {
								$78 = HEAP32[$this>>2]|0;
								$79 = (($77) + 1)|0;
								$80 = (($79) - ($78))|0;
								HEAP8[$2>>0] = 0;
								$81 = HEAP32[$15>>2]|0;
								$82 = HEAP32[$array>>2]|0;
								$83 = (($81) - ($82))|0;
								$84 = ($80>>>0)>($83>>>0);
								$85 = $82;
								$86 = $81;
								if ($84) {
									$87 = (($80) - ($83))|0;
									__THREW__ = 0;
									invoke_viii(51,($array|0),($87|0),($2|0));
									$88 = __THREW__; __THREW__ = 0;
									$89 = $88&1;
									if ($89) {
										break L9;
									} else {
										break;
									}
								}
								$90 = ($80>>>0)<($83>>>0);
								if ($90) {
									$91 = (($85) + ($80)|0);
									$92 = ($86|0)==($91|0);
									if (!($92)) {
										HEAP32[$15>>2] = $91;
									}
								}
							}
						} while(0);
						$93 = HEAP32[$3>>2]|0;
						$94 = ($93|0)<($row|0);
						L39: do {
							if ($94) {
								$$in = $row;
								while(1) {
									$96 = (($$in) + -1)|0;
									$98 = HEAP32[$17>>2]|0;
									$99 = HEAP32[$this>>2]|0;
									$100 = (($98) + 1)|0;
									$101 = (($100) - ($99))|0;
									$102 = ($101|0)>(0);
									if ($102) {
										$168 = $98;$169 = $99;$alive$0$off024 = 0;$i$025 = 0;
									} else {
										$$03$lcssa = $$in;
										break L39;
									}
									while(1) {
										$105 = HEAP32[$array>>2]|0;
										$106 = (($105) + ($i$025)|0);
										$107 = HEAP8[$106>>0]|0;
										$108 = ($107<<24>>24)==(0);
										if ($108) {
											$119 = $168;$120 = $169;$alive$1$off0 = $alive$0$off024;
										} else {
											$109 = HEAP32[$3>>2]|0;
											$110 = (($96) - ($109))|0;
											$111 = HEAP32[$6>>2]|0;
											$112 = (($111) + (($110*12)|0)|0);
											$113 = HEAP32[$112>>2]|0;
											$114 = (($113) + ($i$025)|0);
											$115 = HEAP8[$114>>0]|0;
											$116 = ($115<<24>>24)==(0);
											if ($116) {
												HEAP8[$106>>0] = 0;
												$$pre41 = HEAP32[$17>>2]|0;
												$$pre42 = HEAP32[$this>>2]|0;
												$119 = $$pre41;$120 = $$pre42;$alive$1$off0 = $alive$0$off024;
											} else {
												$119 = $168;$120 = $169;$alive$1$off0 = 1;
											}
										}
										$117 = (($i$025) + 1)|0;
										$118 = (($119) + 1)|0;
										$103 = (($118) - ($120))|0;
										$121 = ($117|0)<($103|0);
										if ($121) {
											$168 = $119;$169 = $120;$alive$0$off024 = $alive$1$off0;$i$025 = $117;
										} else {
											break;
										}
									}
									if (!($alive$1$off0)) {
										$$03$lcssa = $$in;
										break L39;
									}
									$104 = ($103|0)>(1);
									if ($104) {
										$170 = $119;$171 = $120;$i1$027 = 1;
										while(1) {
											$124 = (($i1$027) + -1)|0;
											$125 = HEAP32[$array>>2]|0;
											$126 = (($125) + ($124)|0);
											$127 = HEAP8[$126>>0]|0;
											$128 = ($127<<24>>24)==(0);
											if ($128) {
												$142 = $170;$144 = $171;
											} else {
												$129 = (($125) + ($i1$027)|0);
												$130 = HEAP8[$129>>0]|0;
												$131 = ($130<<24>>24)==(0);
												if ($131) {
													$132 = HEAP32[$3>>2]|0;
													$133 = (($96) - ($132))|0;
													$134 = HEAP32[$6>>2]|0;
													$135 = (($134) + (($133*12)|0)|0);
													$136 = HEAP32[$135>>2]|0;
													$137 = (($136) + ($i1$027)|0);
													$138 = HEAP8[$137>>0]|0;
													$139 = ($138<<24>>24)==(0);
													if ($139) {
														$142 = $170;$144 = $171;
													} else {
														HEAP8[$129>>0] = 1;
														$$pre43 = HEAP32[$17>>2]|0;
														$$pre44 = HEAP32[$this>>2]|0;
														$142 = $$pre43;$144 = $$pre44;
													}
												} else {
													$142 = $170;$144 = $171;
												}
											}
											$140 = (($i1$027) + 1)|0;
											$141 = (($142) + 1)|0;
											$143 = (($141) - ($144))|0;
											$145 = ($140|0)<($143|0);
											if ($145) {
												$170 = $142;$171 = $144;$i1$027 = $140;
											} else {
												$$lcssa = $143;
												break;
											}
										}
									} else {
										$$lcssa = $103;
									}
									$122 = (($$lcssa) + -2)|0;
									$123 = ($122|0)>(-1);
									if ($123) {
										$i2$031 = $122;
										while(1) {
											$146 = (($i2$031) + 1)|0;
											$147 = HEAP32[$array>>2]|0;
											$148 = (($147) + ($146)|0);
											$149 = HEAP8[$148>>0]|0;
											$150 = ($149<<24>>24)==(0);
											if (!($150)) {
												$151 = (($147) + ($i2$031)|0);
												$152 = HEAP8[$151>>0]|0;
												$153 = ($152<<24>>24)==(0);
												if ($153) {
													$154 = HEAP32[$3>>2]|0;
													$155 = (($96) - ($154))|0;
													$156 = HEAP32[$6>>2]|0;
													$157 = (($156) + (($155*12)|0)|0);
													$158 = HEAP32[$157>>2]|0;
													$159 = (($158) + ($i2$031)|0);
													$160 = HEAP8[$159>>0]|0;
													$161 = ($160<<24>>24)==(0);
													if (!($161)) {
														HEAP8[$151>>0] = 1;
													}
												}
											}
											$162 = (($i2$031) + -1)|0;
											$163 = ($i2$031|0)>(0);
											if ($163) {
												$i2$031 = $162;
											} else {
												break;
											}
										}
									}
									$95 = HEAP32[$3>>2]|0;
									$97 = ($96|0)>($95|0);
									if ($97) {
										$$in = $96;
									} else {
										$$03$lcssa = $96;
										break;
									}
								}
							} else {
								$$03$lcssa = $row;
							}
						} while(0);
						$164 = HEAP32[$array>>2]|0;
						$165 = ($164|0)==(0|0);
						if (!($165)) {
							$166 = HEAP32[$15>>2]|0;
							$167 = ($166|0)==($164|0);
							if (!($167)) {
								HEAP32[$15>>2] = $164;
							}
							__ZdlPv($164);
						}
						$$02 = $$03$lcssa;
						STACKTOP = sp;return ($$02|0);
					}
				} while(0);
				$38 = ___cxa_find_matching_catch_2()|0;
				$39 = tempRet0;
				$40 = HEAP32[$array>>2]|0;
				$41 = ($40|0)==(0|0);
				if ($41) {
					___resumeException($38|0);
					// unreachable;
				}
				$42 = HEAP32[$15>>2]|0;
				$43 = ($42|0)==($40|0);
				if (!($43)) {
					HEAP32[$15>>2] = $40;
				}
				__ZdlPv($40);
				___resumeException($38|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNK6Bitmap13follow_bottomEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$02 = 0, $$03$lcssa = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
				var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
				var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
				var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
				var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
				var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
				var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alive$0$off024 = 0, $alive$1$off0 = 0, $array = 0, $c$0 = 0, $c$0$lcssa77 = 0, $c$1 = 0, $c$1$lcssa = 0, $c$175 = 0, $i$025 = 0, $i1$027 = 0, $i2$031 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$array = sp;
				$0 = sp + 14|0;
				$1 = sp + 13|0;
				$2 = sp + 12|0;
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($row) - ($4))|0;
				$6 = ((($this)) + 16|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($col) - ($8))|0;
				$10 = (($7) + (($5*12)|0)|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = (($11) + ($9)|0);
				$13 = HEAP8[$12>>0]|0;
				$14 = ($13<<24>>24)==(0);
				if ($14) {
					$$02 = $row;
					STACKTOP = sp;return ($$02|0);
				}
				HEAP32[$array>>2] = 0;
				$15 = ((($array)) + 4|0);
				HEAP32[$15>>2] = 0;
				$16 = ((($array)) + 8|0);
				HEAP32[$16>>2] = 0;
				$17 = ((($this)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = (($18) + 1)|0;
				$20 = (($19) - ($8))|0;
				$21 = ((($array)) + 8|0);
				$22 = ($19|0)==($8|0);
				do {
					if ($22) {
						$c$0 = $col;
						label = 6;
					} else {
						$23 = ($19|0)==($8|0);
						if ($23) {
							$27 = 0;
						} else {
							__THREW__ = 0;
							$24 = (invoke_ii(29,($20|0))|0);
							$25 = __THREW__; __THREW__ = 0;
							$26 = $25&1;
							if ($26) {
								break;
							} else {
								$27 = $24;
							}
						}
						$28 = $27;
						$29 = (($27) + ($20)|0);
						$30 = $29;
						HEAP32[$array>>2] = $28;
						HEAP32[$15>>2] = $28;
						HEAP32[$21>>2] = $30;
						$c$0 = $col;
						label = 6;
					}
				} while(0);
				L9: do {
					if ((label|0) == 6) {
						while(1) {
							label = 0;
							$31 = ($c$0|0)>($8|0);
							if (!($31)) {
								$49 = $18;
								break;
							}
							$32 = (($c$0) + -1)|0;
							$33 = (($32) - ($8))|0;
							$34 = HEAP32[$10>>2]|0;
							$35 = (($34) + ($33)|0);
							$36 = HEAP8[$35>>0]|0;
							$37 = ($36<<24>>24)==(0);
							if ($37) {
								$c$0$lcssa77 = $c$0;
								label = 12;
								break;
							} else {
								$c$0 = $32;
								label = 6;
							}
						}
						if ((label|0) == 12) {
							HEAP8[$0>>0] = 0;
							$44 = ($c$0$lcssa77|0)==($8|0);
							if ($44) {
								$49 = $18;
							} else {
								$45 = (($c$0$lcssa77) - ($8))|0;
								__THREW__ = 0;
								invoke_viii(51,($array|0),($45|0),($0|0));
								$46 = __THREW__; __THREW__ = 0;
								$47 = $46&1;
								if ($47) {
									break;
								}
								$$pre = HEAP32[$17>>2]|0;
								$49 = $$pre;
							}
						}
						$c$1 = $col;
						while(1) {
							$48 = ($c$1|0)<($49|0);
							if (!($48)) {
								$c$1$lcssa = $c$1;
								label = 17;
								break;
							}
							$50 = (($c$1) + 1)|0;
							$51 = HEAP32[$3>>2]|0;
							$52 = (($row) - ($51))|0;
							$53 = HEAP32[$6>>2]|0;
							$54 = HEAP32[$this>>2]|0;
							$55 = (($50) - ($54))|0;
							$56 = (($53) + (($52*12)|0)|0);
							$57 = HEAP32[$56>>2]|0;
							$58 = (($57) + ($55)|0);
							$59 = HEAP8[$58>>0]|0;
							$60 = ($59<<24>>24)==(0);
							if ($60) {
								$62 = $54;$c$175 = $c$1;
								break;
							} else {
								$c$1 = $50;
							}
						}
						if ((label|0) == 17) {
							$$pre39 = HEAP32[$this>>2]|0;
							$62 = $$pre39;$c$175 = $c$1$lcssa;
						}
						$61 = (($c$175) - ($62))|0;
						$63 = (($61) + 1)|0;
						HEAP8[$1>>0] = 1;
						$64 = HEAP32[$15>>2]|0;
						$65 = HEAP32[$array>>2]|0;
						$66 = (($64) - ($65))|0;
						$67 = ($63>>>0)>($66>>>0);
						$68 = $65;
						$69 = $64;
						if ($67) {
							$70 = (($63) - ($66))|0;
							__THREW__ = 0;
							invoke_viii(51,($array|0),($70|0),($1|0));
							$71 = __THREW__; __THREW__ = 0;
							$72 = $71&1;
							if ($72) {
								break;
							}
							$$pre40 = HEAP32[$17>>2]|0;
							$77 = $$pre40;
						} else {
							$73 = ($63>>>0)<($66>>>0);
							if ($73) {
								$74 = (($68) + ($63)|0);
								$75 = ($69|0)==($74|0);
								if ($75) {
									$77 = $49;
								} else {
									HEAP32[$15>>2] = $74;
									$77 = $49;
								}
							} else {
								$77 = $49;
							}
						}
						$76 = ($c$175|0)<($77|0);
						do {
							if ($76) {
								$78 = HEAP32[$this>>2]|0;
								$79 = (($77) + 1)|0;
								$80 = (($79) - ($78))|0;
								HEAP8[$2>>0] = 0;
								$81 = HEAP32[$15>>2]|0;
								$82 = HEAP32[$array>>2]|0;
								$83 = (($81) - ($82))|0;
								$84 = ($80>>>0)>($83>>>0);
								$85 = $82;
								$86 = $81;
								if ($84) {
									$87 = (($80) - ($83))|0;
									__THREW__ = 0;
									invoke_viii(51,($array|0),($87|0),($2|0));
									$88 = __THREW__; __THREW__ = 0;
									$89 = $88&1;
									if ($89) {
										break L9;
									} else {
										break;
									}
								}
								$90 = ($80>>>0)<($83>>>0);
								if ($90) {
									$91 = (($85) + ($80)|0);
									$92 = ($86|0)==($91|0);
									if (!($92)) {
										HEAP32[$15>>2] = $91;
									}
								}
							}
						} while(0);
						$93 = ((($this)) + 12|0);
						$94 = HEAP32[$93>>2]|0;
						$95 = ($94|0)>($row|0);
						L39: do {
							if ($95) {
								$$in = $row;
								while(1) {
									$97 = (($$in) + 1)|0;
									$99 = HEAP32[$17>>2]|0;
									$100 = HEAP32[$this>>2]|0;
									$101 = (($99) + 1)|0;
									$102 = (($101) - ($100))|0;
									$103 = ($102|0)>(0);
									if ($103) {
										$169 = $99;$170 = $100;$alive$0$off024 = 0;$i$025 = 0;
									} else {
										$$03$lcssa = $$in;
										break L39;
									}
									while(1) {
										$106 = HEAP32[$array>>2]|0;
										$107 = (($106) + ($i$025)|0);
										$108 = HEAP8[$107>>0]|0;
										$109 = ($108<<24>>24)==(0);
										if ($109) {
											$120 = $169;$121 = $170;$alive$1$off0 = $alive$0$off024;
										} else {
											$110 = HEAP32[$3>>2]|0;
											$111 = (($97) - ($110))|0;
											$112 = HEAP32[$6>>2]|0;
											$113 = (($112) + (($111*12)|0)|0);
											$114 = HEAP32[$113>>2]|0;
											$115 = (($114) + ($i$025)|0);
											$116 = HEAP8[$115>>0]|0;
											$117 = ($116<<24>>24)==(0);
											if ($117) {
												HEAP8[$107>>0] = 0;
												$$pre41 = HEAP32[$17>>2]|0;
												$$pre42 = HEAP32[$this>>2]|0;
												$120 = $$pre41;$121 = $$pre42;$alive$1$off0 = $alive$0$off024;
											} else {
												$120 = $169;$121 = $170;$alive$1$off0 = 1;
											}
										}
										$118 = (($i$025) + 1)|0;
										$119 = (($120) + 1)|0;
										$104 = (($119) - ($121))|0;
										$122 = ($118|0)<($104|0);
										if ($122) {
											$169 = $120;$170 = $121;$alive$0$off024 = $alive$1$off0;$i$025 = $118;
										} else {
											break;
										}
									}
									if (!($alive$1$off0)) {
										$$03$lcssa = $$in;
										break L39;
									}
									$105 = ($104|0)>(1);
									if ($105) {
										$171 = $120;$172 = $121;$i1$027 = 1;
										while(1) {
											$125 = (($i1$027) + -1)|0;
											$126 = HEAP32[$array>>2]|0;
											$127 = (($126) + ($125)|0);
											$128 = HEAP8[$127>>0]|0;
											$129 = ($128<<24>>24)==(0);
											if ($129) {
												$143 = $171;$145 = $172;
											} else {
												$130 = (($126) + ($i1$027)|0);
												$131 = HEAP8[$130>>0]|0;
												$132 = ($131<<24>>24)==(0);
												if ($132) {
													$133 = HEAP32[$3>>2]|0;
													$134 = (($97) - ($133))|0;
													$135 = HEAP32[$6>>2]|0;
													$136 = (($135) + (($134*12)|0)|0);
													$137 = HEAP32[$136>>2]|0;
													$138 = (($137) + ($i1$027)|0);
													$139 = HEAP8[$138>>0]|0;
													$140 = ($139<<24>>24)==(0);
													if ($140) {
														$143 = $171;$145 = $172;
													} else {
														HEAP8[$130>>0] = 1;
														$$pre43 = HEAP32[$17>>2]|0;
														$$pre44 = HEAP32[$this>>2]|0;
														$143 = $$pre43;$145 = $$pre44;
													}
												} else {
													$143 = $171;$145 = $172;
												}
											}
											$141 = (($i1$027) + 1)|0;
											$142 = (($143) + 1)|0;
											$144 = (($142) - ($145))|0;
											$146 = ($141|0)<($144|0);
											if ($146) {
												$171 = $143;$172 = $145;$i1$027 = $141;
											} else {
												$$lcssa = $144;
												break;
											}
										}
									} else {
										$$lcssa = $104;
									}
									$123 = (($$lcssa) + -2)|0;
									$124 = ($123|0)>(-1);
									if ($124) {
										$i2$031 = $123;
										while(1) {
											$147 = (($i2$031) + 1)|0;
											$148 = HEAP32[$array>>2]|0;
											$149 = (($148) + ($147)|0);
											$150 = HEAP8[$149>>0]|0;
											$151 = ($150<<24>>24)==(0);
											if (!($151)) {
												$152 = (($148) + ($i2$031)|0);
												$153 = HEAP8[$152>>0]|0;
												$154 = ($153<<24>>24)==(0);
												if ($154) {
													$155 = HEAP32[$3>>2]|0;
													$156 = (($97) - ($155))|0;
													$157 = HEAP32[$6>>2]|0;
													$158 = (($157) + (($156*12)|0)|0);
													$159 = HEAP32[$158>>2]|0;
													$160 = (($159) + ($i2$031)|0);
													$161 = HEAP8[$160>>0]|0;
													$162 = ($161<<24>>24)==(0);
													if (!($162)) {
														HEAP8[$152>>0] = 1;
													}
												}
											}
											$163 = (($i2$031) + -1)|0;
											$164 = ($i2$031|0)>(0);
											if ($164) {
												$i2$031 = $163;
											} else {
												break;
											}
										}
									}
									$96 = HEAP32[$93>>2]|0;
									$98 = ($97|0)<($96|0);
									if ($98) {
										$$in = $97;
									} else {
										$$03$lcssa = $97;
										break;
									}
								}
							} else {
								$$03$lcssa = $row;
							}
						} while(0);
						$165 = HEAP32[$array>>2]|0;
						$166 = ($165|0)==(0|0);
						if (!($166)) {
							$167 = HEAP32[$15>>2]|0;
							$168 = ($167|0)==($165|0);
							if (!($168)) {
								HEAP32[$15>>2] = $165;
							}
							__ZdlPv($165);
						}
						$$02 = $$03$lcssa;
						STACKTOP = sp;return ($$02|0);
					}
				} while(0);
				$38 = ___cxa_find_matching_catch_2()|0;
				$39 = tempRet0;
				$40 = HEAP32[$array>>2]|0;
				$41 = ($40|0)==(0|0);
				if ($41) {
					___resumeException($38|0);
					// unreachable;
				}
				$42 = HEAP32[$15>>2]|0;
				$43 = ($42|0)==($40|0);
				if (!($43)) {
					HEAP32[$15>>2] = $40;
				}
				__ZdlPv($40);
				___resumeException($38|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNK6Bitmap8top_hookEPi($this,$hdiff) {
				$this = $this|0;
				$hdiff = $hdiff|0;
				var $$3 = 0, $$lcol$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $black_section$1$lcssa = 0, $black_section$1$lcssa$lcssa = 0, $black_section$16 = 0, $black_section$2 = 0, $black_section$3 = 0, $col$0$l$0 = 0, $col$0$rcol$1 = 0, $col$010 = 0, $l$0$lcssa = 0, $l$07 = 0, $l$1 = 0, $lcol$0 = 0, $lcol$1$lcssa = 0, $lcol$1$lcssa$lcssa = 0, $lcol$112 = 0;
				var $lcol$2 = 0, $or$cond = 0, $or$cond3 = 0, $prev_black$0$off09 = 0, $r$0$lcssa = 0, $r$08 = 0, $r$1 = 0, $rcol$0 = 0, $rcol$1$lcssa = 0, $rcol$1$lcssa$lcssa = 0, $rcol$15 = 0, $rcol$2 = 0, $rcol$3 = 0, $row$0 = 0, $row$0$in = 0, $row$0$lcssa22 = 0, $wmax$0 = 0, $wmax$0$ = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($3) + ($1))|0;
				$5 = (($4|0) / 2)&-1;
				$6 = ((($this)) + 8|0);
				$7 = ((($this)) + 16|0);
				$lcol$0 = 0;$rcol$0 = 0;$row$0$in = $1;$wmax$0 = 0;
				while(1) {
					$row$0 = (($row$0$in) + 1)|0;
					$8 = ($row$0|0)<($5|0);
					if (!($8)) {
						$$3 = 0;
						label = 18;
						break;
					}
					$9 = HEAP32[$this>>2]|0;
					$10 = HEAP32[$6>>2]|0;
					$11 = ($9|0)>($10|0);
					if ($11) {
						$black_section$1$lcssa = 0;$l$0$lcssa = -1;$lcol$1$lcssa = $lcol$0;$r$0$lcssa = -2;$rcol$1$lcssa = $rcol$0;
					} else {
						$12 = (($row$0) - ($1))|0;
						$13 = HEAP32[$7>>2]|0;
						$14 = (($13) + (($12*12)|0)|0);
						$15 = HEAP32[$14>>2]|0;
						$black_section$16 = 0;$col$010 = $9;$l$07 = -1;$lcol$112 = $lcol$0;$prev_black$0$off09 = 0;$r$08 = -2;$rcol$15 = $rcol$0;
						while(1) {
							$21 = (($col$010) - ($9))|0;
							$22 = (($15) + ($21)|0);
							$23 = HEAP8[$22>>0]|0;
							$24 = ($23<<24>>24)!=(0);
							if ($24) {
								if ($prev_black$0$off09) {
									$black_section$2 = $black_section$16;$rcol$2 = $rcol$15;
								} else {
									$25 = (($black_section$16) + 1)|0;
									$26 = ($25|0)==(2);
									$col$0$rcol$1 = $26 ? $col$010 : $rcol$15;
									$black_section$2 = $25;$rcol$2 = $col$0$rcol$1;
								}
								$27 = ($l$07|0)<(0);
								$col$0$l$0 = $27 ? $col$010 : $l$07;
								$black_section$3 = $black_section$2;$l$1 = $col$0$l$0;$lcol$2 = $lcol$112;$r$1 = $col$010;$rcol$3 = $rcol$2;
							} else {
								$28 = ($black_section$16|0)==(1);
								$or$cond = $28 & $prev_black$0$off09;
								$29 = (($col$010) + -1)|0;
								$$lcol$1 = $or$cond ? $29 : $lcol$112;
								$black_section$3 = $black_section$16;$l$1 = $l$07;$lcol$2 = $$lcol$1;$r$1 = $r$08;$rcol$3 = $rcol$15;
							}
							$30 = (($col$010) + 1)|0;
							$31 = ($col$010|0)<($10|0);
							if ($31) {
								$black_section$16 = $black_section$3;$col$010 = $30;$l$07 = $l$1;$lcol$112 = $lcol$2;$prev_black$0$off09 = $24;$r$08 = $r$1;$rcol$15 = $rcol$3;
							} else {
								$black_section$1$lcssa = $black_section$3;$l$0$lcssa = $l$1;$lcol$1$lcssa = $lcol$2;$r$0$lcssa = $r$1;$rcol$1$lcssa = $rcol$3;
								break;
							}
						}
					}
					$16 = (($r$0$lcssa) - ($l$0$lcssa))|0;
					$17 = (($16) + 1)|0;
					$18 = ($17*10)|0;
					$19 = ($wmax$0*9)|0;
					$20 = ($18|0)>($19|0);
					if (!($20)) {
						$$3 = 0;
						label = 18;
						break;
					}
					$32 = ($16|0)<($wmax$0|0);
					$wmax$0$ = $32 ? $wmax$0 : $17;
					$33 = ($black_section$1$lcssa|0)>(1);
					if ($33) {
						$black_section$1$lcssa$lcssa = $black_section$1$lcssa;$lcol$1$lcssa$lcssa = $lcol$1$lcssa;$rcol$1$lcssa$lcssa = $rcol$1$lcssa;$row$0$lcssa22 = $row$0;
						label = 13;
						break;
					} else {
						$lcol$0 = $lcol$1$lcssa;$rcol$0 = $rcol$1$lcssa;$row$0$in = $row$0;$wmax$0 = $wmax$0$;
					}
				}
				if ((label|0) == 13) {
					$34 = ($black_section$1$lcssa$lcssa|0)==(2);
					if (!($34)) {
						$$3 = 0;
						return ($$3|0);
					}
					$35 = (($lcol$1$lcssa$lcssa) + 1)|0;
					$36 = (__ZNK6Bitmap10escape_topEii($this,$row$0$lcssa22,$35)|0);
					if ($36) {
						$$3 = 0;
						return ($$3|0);
					}
					$37 = (__ZNK6Bitmap13follow_bottomEii($this,$row$0$lcssa22,$lcol$1$lcssa$lcssa)|0);
					$38 = (__ZNK6Bitmap13follow_bottomEii($this,$row$0$lcssa22,$rcol$1$lcssa$lcssa)|0);
					$39 = ($37|0)>($row$0$lcssa22|0);
					$40 = ($38|0)>($row$0$lcssa22|0);
					$or$cond3 = $39 & $40;
					if (!($or$cond3)) {
						$$3 = 0;
						return ($$3|0);
					}
					$41 = ($hdiff|0)==(0|0);
					if ($41) {
						$$3 = 1;
						return ($$3|0);
					}
					$42 = (($37) - ($38))|0;
					HEAP32[$hdiff>>2] = $42;
					$$3 = 1;
					return ($$3|0);
				}
				else if ((label|0) == 18) {
					return ($$3|0);
				}
				return (0)|0;
			}
			function __ZNK6Bitmap11bottom_hookEPi($this,$hdiff) {
				$this = $this|0;
				$hdiff = $hdiff|0;
				var $$2 = 0, $$lcol$1 = 0, $$lcssa98 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
				var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
				var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
				var $black_section$0$lcssa69 = 0, $black_section$024 = 0, $black_section$1 = 0, $black_section$2 = 0, $black_section$2$lcssa = 0, $col$0$l2$0 = 0, $col$0$rcol$1 = 0, $col$029 = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$us = 0, $i$0$us = 0, $l$0$lcssa = 0, $l$035 = 0, $l2$026 = 0, $l2$1 = 0, $l2$1$lcssa = 0, $lcol$0 = 0, $lcol$1$lcssa68 = 0, $lcol$1$lcssa68$lcssa = 0;
				var $lcol$125 = 0, $lcol$2 = 0, $lcol$2$lcssa = 0, $or$cond = 0, $or$cond6 = 0, $prev_black$0$off028 = 0, $r$0$lcssa = 0, $r$0$lcssa$us = 0, $r$044 = 0, $r$044$us = 0, $r3$027 = 0, $r3$1 = 0, $r3$1$lcssa = 0, $rcol$0 = 0, $rcol$1$lcssa70 = 0, $rcol$1$lcssa70$lcssa = 0, $rcol$123 = 0, $rcol$2 = 0, $rcol$3 = 0, $rcol$3$lcssa = 0;
				var $row$020 = 0, $row$052 = 0, $row$052$us = 0, $row$1 = 0, $wmax$0$ = 0, $wmax$0$$us = 0, $wmax$051 = 0, $wmax$051$us = 0, $wmax$2 = 0, $wmax$3 = 0, $wmax$3$ = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = ($4*80)|0;
				$6 = (($5|0) / 100)&-1;
				$7 = (($6) + ($3))|0;
				$8 = ($1|0)>($7|0);
				L1: do {
					if ($8) {
						$9 = HEAP32[$this>>2]|0;
						$10 = ((($this)) + 8|0);
						$11 = HEAP32[$10>>2]|0;
						$12 = ($9|0)>($11|0);
						$13 = ((($this)) + 16|0);
						if ($12) {
							$14 = ($11|0)>($9|0);
							$15 = (($11) + 1)|0;
							$16 = (($15) - ($9))|0;
							$row$052$us = $1;$wmax$051$us = 0;
							while(1) {
								L7: do {
									if ($14) {
										$42 = (($row$052$us) - ($3))|0;
										$43 = HEAP32[$13>>2]|0;
										$44 = (($43) + (($42*12)|0)|0);
										$21 = HEAP32[$44>>2]|0;
										$r$044$us = $11;
										while(1) {
											$19 = (($r$044$us) - ($9))|0;
											$20 = (($21) + ($19)|0);
											$22 = HEAP8[$20>>0]|0;
											$23 = ($22<<24>>24)==(0);
											if (!($23)) {
												$r$0$lcssa$us = $r$044$us;
												break L7;
											}
											$40 = (($r$044$us) + -1)|0;
											$41 = ($40|0)>($9|0);
											if ($41) {
												$r$044$us = $40;
											} else {
												$r$0$lcssa$us = $40;
												break;
											}
										}
									} else {
										$r$0$lcssa$us = $11;
									}
								} while(0);
								$24 = (($r$0$lcssa$us) - ($9))|0;
								$25 = (($24) + 1)|0;
								$26 = ($24|0)<($wmax$051$us|0);
								$wmax$0$$us = $26 ? $wmax$051$us : $25;
								$27 = $25 << 2;
								$28 = ($27|0)<($16|0);
								if (!($28)) {
									$29 = (($row$052$us) - ($3))|0;
									$i$0$in$us = $9;
									while(1) {
										$i$0$us = (($i$0$in$us) + 1)|0;
										$30 = ($i$0$us|0)<($r$0$lcssa$us|0);
										if (!($30)) {
											$row$020 = $row$052$us;$wmax$2 = $wmax$0$$us;
											break L1;
										}
										$31 = HEAP32[$13>>2]|0;
										$32 = (($i$0$us) - ($9))|0;
										$33 = (($31) + (($29*12)|0)|0);
										$34 = HEAP32[$33>>2]|0;
										$35 = (($34) + ($32)|0);
										$36 = HEAP8[$35>>0]|0;
										$37 = ($36<<24>>24)==(0);
										if ($37) {
											break;
										} else {
											$i$0$in$us = $i$0$us;
										}
									}
								}
								$38 = (($row$052$us) + -1)|0;
								$39 = ($38|0)>($7|0);
								if ($39) {
									$row$052$us = $38;$wmax$051$us = $wmax$0$$us;
								} else {
									$row$020 = $38;$wmax$2 = $wmax$0$$us;
									break L1;
								}
							}
						}
						$$pre = HEAP32[$13>>2]|0;
						$17 = (($11) + 1)|0;
						$18 = (($17) - ($9))|0;
						$row$052 = $1;$wmax$051 = 0;
						while(1) {
							$45 = (($row$052) - ($3))|0;
							$46 = (($$pre) + (($45*12)|0)|0);
							$47 = HEAP32[$46>>2]|0;
							$l$035 = $9;
							while(1) {
								$48 = (($l$035) - ($9))|0;
								$49 = (($47) + ($48)|0);
								$50 = HEAP8[$49>>0]|0;
								$51 = ($50<<24>>24)==(0);
								if (!($51)) {
									$l$0$lcssa = $l$035;
									break;
								}
								$52 = (($l$035) + 1)|0;
								$53 = ($l$035|0)<($11|0);
								if ($53) {
									$l$035 = $52;
								} else {
									$l$0$lcssa = $52;
									break;
								}
							}
							$54 = ($11|0)>($l$0$lcssa|0);
							L26: do {
								if ($54) {
									$r$044 = $11;
									while(1) {
										$55 = (($r$044) - ($9))|0;
										$56 = (($47) + ($55)|0);
										$57 = HEAP8[$56>>0]|0;
										$58 = ($57<<24>>24)==(0);
										if (!($58)) {
											$r$0$lcssa = $r$044;
											break L26;
										}
										$59 = (($r$044) + -1)|0;
										$60 = ($59|0)>($l$0$lcssa|0);
										if ($60) {
											$r$044 = $59;
										} else {
											$r$0$lcssa = $59;
											break;
										}
									}
								} else {
									$r$0$lcssa = $11;
								}
							} while(0);
							$61 = (($r$0$lcssa) - ($l$0$lcssa))|0;
							$62 = (($61) + 1)|0;
							$63 = ($61|0)<($wmax$051|0);
							$wmax$0$ = $63 ? $wmax$051 : $62;
							$64 = $62 << 2;
							$65 = ($64|0)<($18|0);
							if (!($65)) {
								$i$0$in = $l$0$lcssa;
								while(1) {
									$i$0 = (($i$0$in) + 1)|0;
									$66 = ($i$0|0)<($r$0$lcssa|0);
									if (!($66)) {
										$row$020 = $row$052;$wmax$2 = $wmax$0$;
										break L1;
									}
									$67 = (($i$0) - ($9))|0;
									$68 = (($47) + ($67)|0);
									$69 = HEAP8[$68>>0]|0;
									$70 = ($69<<24>>24)==(0);
									if ($70) {
										break;
									} else {
										$i$0$in = $i$0;
									}
								}
							}
							$71 = (($row$052) + -1)|0;
							$72 = ($71|0)>($7|0);
							if ($72) {
								$row$052 = $71;$wmax$051 = $wmax$0$;
							} else {
								$row$020 = $71;$wmax$2 = $wmax$0$;
								break;
							}
						}
					} else {
						$row$020 = $1;$wmax$2 = 0;
					}
				} while(0);
				$73 = ($row$020|0)>($7|0);
				if (!($73)) {
					$$2 = 0;
					return ($$2|0);
				}
				$74 = (($1) + ($3))|0;
				$75 = (($74|0) / 2)&-1;
				$76 = ((($this)) + 8|0);
				$77 = ((($this)) + 16|0);
				$lcol$0 = 0;$rcol$0 = 0;$row$1 = $row$020;$wmax$3 = $wmax$2;
				while(1) {
					$78 = (($row$1) + -1)|0;
					$79 = ($78|0)>($75|0);
					if (!($79)) {
						$$2 = 0;
						label = 41;
						break;
					}
					$80 = HEAP32[$this>>2]|0;
					$81 = HEAP32[$76>>2]|0;
					$82 = ($80|0)>($81|0);
					if ($82) {
						$102 = 0;$105 = -1;$black_section$0$lcssa69 = 0;$lcol$1$lcssa68 = $lcol$0;$rcol$1$lcssa70 = $rcol$0;
					} else {
						$83 = (($78) - ($3))|0;
						$84 = HEAP32[$77>>2]|0;
						$85 = (($84) + (($83*12)|0)|0);
						$86 = HEAP32[$85>>2]|0;
						$black_section$024 = 0;$col$029 = $80;$l2$026 = -1;$lcol$125 = $lcol$0;$prev_black$0$off028 = 0;$r3$027 = -2;$rcol$123 = $rcol$0;
						while(1) {
							$90 = (($col$029) - ($80))|0;
							$91 = (($86) + ($90)|0);
							$92 = HEAP8[$91>>0]|0;
							$93 = ($92<<24>>24)!=(0);
							if ($93) {
								if ($prev_black$0$off028) {
									$black_section$1 = $black_section$024;$rcol$2 = $rcol$123;
								} else {
									$94 = (($black_section$024) + 1)|0;
									$95 = ($94|0)==(2);
									$col$0$rcol$1 = $95 ? $col$029 : $rcol$123;
									$black_section$1 = $94;$rcol$2 = $col$0$rcol$1;
								}
								$96 = ($l2$026|0)<(0);
								$col$0$l2$0 = $96 ? $col$029 : $l2$026;
								$black_section$2 = $black_section$1;$l2$1 = $col$0$l2$0;$lcol$2 = $lcol$125;$r3$1 = $col$029;$rcol$3 = $rcol$2;
							} else {
								$97 = ($black_section$024|0)==(1);
								$or$cond = $97 & $prev_black$0$off028;
								$98 = (($col$029) + -1)|0;
								$$lcol$1 = $or$cond ? $98 : $lcol$125;
								$black_section$2 = $black_section$024;$l2$1 = $l2$026;$lcol$2 = $$lcol$1;$r3$1 = $r3$027;$rcol$3 = $rcol$123;
							}
							$99 = (($col$029) + 1)|0;
							$100 = ($col$029|0)<($81|0);
							if ($100) {
								$black_section$024 = $black_section$2;$col$029 = $99;$l2$026 = $l2$1;$lcol$125 = $lcol$2;$prev_black$0$off028 = $93;$r3$027 = $r3$1;$rcol$123 = $rcol$3;
							} else {
								$black_section$2$lcssa = $black_section$2;$l2$1$lcssa = $l2$1;$lcol$2$lcssa = $lcol$2;$r3$1$lcssa = $r3$1;$rcol$3$lcssa = $rcol$3;
								break;
							}
						}
						$87 = (($r3$1$lcssa) - ($l2$1$lcssa))|0;
						$88 = (($87) + 1)|0;
						$89 = ($black_section$2$lcssa|0)>(2);
						if ($89) {
							$$2 = 0;
							label = 41;
							break;
						} else {
							$102 = $88;$105 = $87;$black_section$0$lcssa69 = $black_section$2$lcssa;$lcol$1$lcssa68 = $lcol$2$lcssa;$rcol$1$lcssa70 = $rcol$3$lcssa;
						}
					}
					$101 = ($102*10)|0;
					$103 = $wmax$3 << 3;
					$104 = ($101|0)>($103|0);
					if (!($104)) {
						$$2 = 0;
						label = 41;
						break;
					}
					$106 = ($105|0)<($wmax$3|0);
					$wmax$3$ = $106 ? $wmax$3 : $102;
					$107 = ($black_section$0$lcssa69|0)==(2);
					$108 = (($rcol$1$lcssa70) - ($lcol$1$lcssa68))|0;
					$109 = ($108|0)>(1);
					$or$cond6 = $107 & $109;
					if ($or$cond6) {
						$$lcssa98 = $78;$lcol$1$lcssa68$lcssa = $lcol$1$lcssa68;$rcol$1$lcssa70$lcssa = $rcol$1$lcssa70;
						label = 38;
						break;
					} else {
						$lcol$0 = $lcol$1$lcssa68;$rcol$0 = $rcol$1$lcssa70;$row$1 = $78;$wmax$3 = $wmax$3$;
					}
				}
				if ((label|0) == 38) {
					$110 = (($lcol$1$lcssa68$lcssa) + 1)|0;
					$111 = (__ZNK6Bitmap13escape_bottomEii($this,$$lcssa98,$110)|0);
					if ($111) {
						$$2 = 0;
						return ($$2|0);
					}
					$112 = ($hdiff|0)==(0|0);
					if ($112) {
						$$2 = 1;
						return ($$2|0);
					}
					$113 = (__ZNK6Bitmap10follow_topEii($this,$$lcssa98,$lcol$1$lcssa68$lcssa)|0);
					$114 = (__ZNK6Bitmap10follow_topEii($this,$$lcssa98,$rcol$1$lcssa70$lcssa)|0);
					$115 = (($113) - ($114))|0;
					HEAP32[$hdiff>>2] = $115;
					$$2 = 1;
					return ($$2|0);
				}
				else if ((label|0) == 41) {
					return ($$2|0);
				}
				return (0)|0;
			}
			function __ZN4BlobC2ERKS_($this,$b) {
				$this = $this|0;
				$b = $b|0;
				var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$in = 0, $$in$lcssa = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
				var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				;HEAP32[$this>>2]=HEAP32[$b>>2]|0;HEAP32[$this+4>>2]=HEAP32[$b+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$b+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$b+12>>2]|0;
				$0 = ((($this)) + 16|0);
				$1 = ((($b)) + 16|0);
				__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_($0,$1);
				$2 = ((($this)) + 28|0);
				$3 = ((($b)) + 28|0);
				__THREW__ = 0;
				invoke_vii(98,($2|0),($3|0));
				$4 = __THREW__; __THREW__ = 0;
				$5 = $4&1;
				if ($5) {
					$10 = ___cxa_find_matching_catch_2()|0;
					$11 = tempRet0;
					$$1 = $11;$$12 = $10;
				} else {
					$6 = ((($this)) + 32|0);
					$7 = HEAP32[$6>>2]|0;
					$8 = HEAP32[$2>>2]|0;
					$9 = ($7|0)==($8|0);
					if ($9) {
						return;
					}
					$$in = $8;$i$03 = 0;
					while(1) {
						__THREW__ = 0;
						$12 = (invoke_ii(29,28)|0);
						$13 = __THREW__; __THREW__ = 0;
						$14 = $13&1;
						if ($14) {
							$$in$lcssa = $$in;
							label = 9;
							break;
						}
						$15 = HEAP32[$3>>2]|0;
						$16 = (($15) + ($i$03<<2)|0);
						$17 = HEAP32[$16>>2]|0;
						;HEAP32[$12>>2]=HEAP32[$17>>2]|0;HEAP32[$12+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$17+12>>2]|0;
						$18 = ((($12)) + 16|0);
						$19 = ((($17)) + 16|0);
						__THREW__ = 0;
						invoke_vii(62,($18|0),($19|0));
						$20 = __THREW__; __THREW__ = 0;
						$21 = $20&1;
						if ($21) {
							$$lcssa = $12;
							label = 10;
							break;
						}
						$22 = HEAP32[$2>>2]|0;
						$23 = (($22) + ($i$03<<2)|0);
						HEAP32[$23>>2] = $12;
						$24 = (($i$03) + 1)|0;
						$25 = HEAP32[$6>>2]|0;
						$26 = HEAP32[$2>>2]|0;
						$27 = (($25) - ($26))|0;
						$28 = $27 >> 2;
						$29 = ($24>>>0)<($28>>>0);
						if ($29) {
							$$in = $26;$i$03 = $24;
						} else {
							label = 4;
							break;
						}
					}
					if ((label|0) == 4) {
						return;
					}
					else if ((label|0) == 9) {
						$30 = ___cxa_find_matching_catch_2()|0;
						$31 = tempRet0;
						$32 = $$in$lcssa;
						$$0 = $31;$$01 = $30;$35 = $32;
					}
					else if ((label|0) == 10) {
						$33 = ___cxa_find_matching_catch_2()|0;
						$34 = tempRet0;
						__ZdlPv($$lcssa);
						$$pre = HEAP32[$2>>2]|0;
						$$0 = $34;$$01 = $33;$35 = $$pre;
					}
					$36 = ($35|0)==(0|0);
					$37 = $35;
					if ($36) {
						$$1 = $$0;$$12 = $$01;
					} else {
						$38 = HEAP32[$6>>2]|0;
						$39 = ($38|0)==($35|0);
						if (!($39)) {
							$scevgep$i$i$i = ((($38)) + -4|0);
							$40 = $scevgep$i$i$i;
							$41 = (($40) - ($37))|0;
							$42 = $41 >>> 2;
							$43 = $42 ^ -1;
							$scevgep4$i$i$i = (($38) + ($43<<2)|0);
							HEAP32[$6>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($35);
						$$1 = $$0;$$12 = $$01;
					}
				}
				$44 = ((($this)) + 16|0);
				$45 = HEAP32[$44>>2]|0;
				$46 = ($45|0)==(0|0);
				if ($46) {
					___resumeException($$12|0);
					// unreachable;
				}
				$47 = ((($this)) + 20|0);
				$48 = HEAP32[$47>>2]|0;
				$49 = ($48|0)==($45|0);
				if ($49) {
					$59 = $45;
				} else {
					$51 = $48;
					while(1) {
						$50 = ((($51)) + -12|0);
						HEAP32[$47>>2] = $50;
						$52 = HEAP32[$50>>2]|0;
						$53 = ($52|0)==(0|0);
						if ($53) {
							$54 = $50;
						} else {
							$56 = ((($51)) + -8|0);
							$57 = HEAP32[$56>>2]|0;
							$58 = ($57|0)==($52|0);
							if (!($58)) {
								HEAP32[$56>>2] = $52;
							}
							__ZdlPv($52);
							$$pre$i$i$i$i = HEAP32[$47>>2]|0;
							$54 = $$pre$i$i$i$i;
						}
						$55 = ($54|0)==($45|0);
						if ($55) {
							break;
						} else {
							$51 = $54;
						}
					}
					$$pre$i$i = HEAP32[$44>>2]|0;
					$59 = $$pre$i$i;
				}
				__ZdlPv($59);
				___resumeException($$12|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($__x)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$__x>>2]|0;
				$5 = (($3) - ($4))|0;
				$6 = $5 >> 2;
				$7 = ($6|0)==(0);
				if ($7) {
					return;
				}
				$8 = ($6>>>0)>(1073741823);
				if ($8) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$9 = __THREW__; __THREW__ = 0;
					$10 = $9&1;
					if (!($10)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					$11 = (invoke_ii(29,($5|0))|0);
					$12 = __THREW__; __THREW__ = 0;
					$13 = $12&1;
					if (!($13)) {
						HEAP32[$0>>2] = $11;
						HEAP32[$this>>2] = $11;
						$14 = (($11) + ($6<<2)|0);
						$15 = ((($this)) + 8|0);
						HEAP32[$15>>2] = $14;
						$16 = HEAP32[$__x>>2]|0;
						$17 = HEAP32[$2>>2]|0;
						$18 = ($16|0)==($17|0);
						if ($18) {
							return;
						}
						$$01$i = $16;$20 = $11;
						while(1) {
							$19 = HEAP32[$$01$i>>2]|0;
							HEAP32[$20>>2] = $19;
							$21 = HEAP32[$0>>2]|0;
							$22 = ((($21)) + 4|0);
							HEAP32[$0>>2] = $22;
							$23 = ((($$01$i)) + 4|0);
							$24 = ($23|0)==($17|0);
							if ($24) {
								break;
							} else {
								$$01$i = $23;$20 = $22;
							}
						}
						return;
					}
				}
				$25 = ___cxa_find_matching_catch_2()|0;
				$26 = tempRet0;
				$27 = HEAP32[$this>>2]|0;
				$28 = ($27|0)==(0|0);
				$29 = $27;
				if ($28) {
					___resumeException($25|0);
					// unreachable;
				}
				$30 = HEAP32[$0>>2]|0;
				$31 = ($30|0)==($27|0);
				if (!($31)) {
					$scevgep$i$i$i = ((($30)) + -4|0);
					$32 = $scevgep$i$i$i;
					$33 = (($32) - ($29))|0;
					$34 = $33 >>> 2;
					$35 = $34 ^ -1;
					$scevgep4$i$i$i = (($30) + ($35<<2)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($27);
				___resumeException($25|0);
				// unreachable;
			}
			function __ZN4BlobD2Ev($this) {
				$this = $this|0;
				var $$cast = 0, $$cast23 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i$i15 = 0, $$pre$i$i$i$i5 = 0, $$pre$i$i18 = 0, $$pre$i$i8 = 0, $$pre24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
				var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i$022 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				$$cast = $3;
				$5 = $2;
				if ($4) {
					$$lcssa = $$cast;$8 = $5;
				} else {
					$15 = $$cast;$57 = $5;$58 = $3;$59 = $2;$i$022 = 0;
					while(1) {
						$14 = (($15) + ($i$022<<2)|0);
						$16 = HEAP32[$14>>2]|0;
						$17 = ($16|0)==(0|0);
						if ($17) {
							$37 = $58;$38 = $59;$60 = $57;
						} else {
							$18 = ((($16)) + 16|0);
							$19 = HEAP32[$18>>2]|0;
							$20 = ($19|0)==(0|0);
							if (!($20)) {
								$21 = ((($16)) + 20|0);
								$22 = HEAP32[$21>>2]|0;
								$23 = ($22|0)==($19|0);
								if ($23) {
									$33 = $19;
								} else {
									$25 = $22;
									while(1) {
										$24 = ((($25)) + -12|0);
										HEAP32[$21>>2] = $24;
										$26 = HEAP32[$24>>2]|0;
										$27 = ($26|0)==(0|0);
										if ($27) {
											$28 = $24;
										} else {
											$30 = ((($25)) + -8|0);
											$31 = HEAP32[$30>>2]|0;
											$32 = ($31|0)==($26|0);
											if (!($32)) {
												HEAP32[$30>>2] = $26;
											}
											__ZdlPv($26);
											$$pre$i$i$i$i5 = HEAP32[$21>>2]|0;
											$28 = $$pre$i$i$i$i5;
										}
										$29 = ($28|0)==($19|0);
										if ($29) {
											break;
										} else {
											$25 = $28;
										}
									}
									$$pre$i$i8 = HEAP32[$18>>2]|0;
									$33 = $$pre$i$i8;
								}
								__ZdlPv($33);
							}
							__ZdlPv($16);
							$$pre = HEAP32[$1>>2]|0;
							$$pre24 = HEAP32[$0>>2]|0;
							$34 = $$pre;
							$37 = $$pre24;$38 = $$pre;$60 = $34;
						}
						$35 = (($i$022) + 1)|0;
						$36 = (($38) - ($37))|0;
						$39 = $36 >> 2;
						$40 = ($35>>>0)<($39>>>0);
						$$cast23 = $37;
						if ($40) {
							$15 = $$cast23;$57 = $60;$58 = $37;$59 = $38;$i$022 = $35;
						} else {
							$$lcssa = $$cast23;$8 = $60;
							break;
						}
					}
				}
				$6 = ($$lcssa|0)==(0|0);
				$7 = $$lcssa;
				if (!($6)) {
					$9 = ($8|0)==($$lcssa|0);
					if (!($9)) {
						$scevgep$i$i$i = ((($8)) + -4|0);
						$10 = $scevgep$i$i$i;
						$11 = (($10) - ($7))|0;
						$12 = $11 >>> 2;
						$13 = $12 ^ -1;
						$scevgep4$i$i$i = (($8) + ($13<<2)|0);
						HEAP32[$1>>2] = $scevgep4$i$i$i;
					}
					__ZdlPv($$lcssa);
				}
				$41 = ((($this)) + 16|0);
				$42 = HEAP32[$41>>2]|0;
				$43 = ($42|0)==(0|0);
				if ($43) {
					return;
				}
				$44 = ((($this)) + 20|0);
				$45 = HEAP32[$44>>2]|0;
				$46 = ($45|0)==($42|0);
				if ($46) {
					$56 = $42;
				} else {
					$48 = $45;
					while(1) {
						$47 = ((($48)) + -12|0);
						HEAP32[$44>>2] = $47;
						$49 = HEAP32[$47>>2]|0;
						$50 = ($49|0)==(0|0);
						if ($50) {
							$51 = $47;
						} else {
							$53 = ((($48)) + -8|0);
							$54 = HEAP32[$53>>2]|0;
							$55 = ($54|0)==($49|0);
							if (!($55)) {
								HEAP32[$53>>2] = $49;
							}
							__ZdlPv($49);
							$$pre$i$i$i$i15 = HEAP32[$44>>2]|0;
							$51 = $$pre$i$i$i$i15;
						}
						$52 = ($51|0)==($42|0);
						if ($52) {
							break;
						} else {
							$48 = $51;
						}
					}
					$$pre$i$i18 = HEAP32[$41>>2]|0;
					$56 = $$pre$i$i18;
				}
				__ZdlPv($56);
				return;
			}
			function __ZN4Blob4leftEi($this,$l) {
				$this = $this|0;
				$l = $l|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)==($l|0);
				if ($1) {
					return;
				}
				__ZN6Bitmap4leftEi($this,$l);
				$2 = ($0|0)<($l|0);
				if (!($2)) {
					return;
				}
				$3 = ((($this)) + 28|0);
				__ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$3);
				return;
			}
			function __ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($re,$holepv) {
				$re = $re|0;
				$holepv = $holepv|0;
				var $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $i$04 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($holepv)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$holepv>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = ($4|0)==(0);
				if ($5) {
					return;
				}
				$6 = $2;
				$9 = $6;$i$04 = $4;
				while(1) {
					$7 = (($i$04) + -1)|0;
					$8 = (($9) + ($7<<2)|0);
					$10 = HEAP32[$8>>2]|0;
					$11 = (__ZNK9Rectangle17strictly_includesERKS_($re,$10)|0);
					if (!($11)) {
						$13 = ($10|0)==(0|0);
						if (!($13)) {
							$14 = ((($10)) + 16|0);
							$15 = HEAP32[$14>>2]|0;
							$16 = ($15|0)==(0|0);
							if (!($16)) {
								$17 = ((($10)) + 20|0);
								$18 = HEAP32[$17>>2]|0;
								$19 = ($18|0)==($15|0);
								if ($19) {
									$29 = $15;
								} else {
									$21 = $18;
									while(1) {
										$20 = ((($21)) + -12|0);
										HEAP32[$17>>2] = $20;
										$22 = HEAP32[$20>>2]|0;
										$23 = ($22|0)==(0|0);
										if ($23) {
											$24 = $20;
										} else {
											$26 = ((($21)) + -8|0);
											$27 = HEAP32[$26>>2]|0;
											$28 = ($27|0)==($22|0);
											if (!($28)) {
												HEAP32[$26>>2] = $22;
											}
											__ZdlPv($22);
											$$pre$i$i$i$i = HEAP32[$17>>2]|0;
											$24 = $$pre$i$i$i$i;
										}
										$25 = ($24|0)==($15|0);
										if ($25) {
											break;
										} else {
											$21 = $24;
										}
									}
									$$pre$i$i = HEAP32[$14>>2]|0;
									$29 = $$pre$i$i;
								}
								__ZdlPv($29);
							}
							__ZdlPv($10);
						}
						$30 = HEAP32[$holepv>>2]|0;
						$31 = (($30) + ($7<<2)|0);
						$32 = ((($31)) + 4|0);
						$33 = HEAP32[$0>>2]|0;
						$34 = $32;
						$35 = (($33) - ($34))|0;
						$36 = $35 >> 2;
						_memmove(($31|0),($32|0),($35|0))|0;
						$37 = (($31) + ($36<<2)|0);
						$38 = HEAP32[$0>>2]|0;
						$39 = ($38|0)==($37|0);
						if (!($39)) {
							$__new_last2$i$i$i = $37;
							$scevgep$i$i$i = ((($38)) + -4|0);
							$40 = $scevgep$i$i$i;
							$41 = (($40) - ($__new_last2$i$i$i))|0;
							$42 = $41 >>> 2;
							$43 = $42 ^ -1;
							$scevgep4$i$i$i = (($38) + ($43<<2)|0);
							HEAP32[$0>>2] = $scevgep4$i$i$i;
						}
					}
					$12 = ($7|0)==(0);
					if ($12) {
						break;
					}
					$$pre = HEAP32[$holepv>>2]|0;
					$9 = $$pre;$i$04 = $7;
				}
				return;
			}
			function __ZN4Blob3topEi($this,$t) {
				$this = $this|0;
				$t = $t|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==($t|0);
				if ($2) {
					return;
				}
				__ZN6Bitmap3topEi($this,$t);
				$3 = ($1|0)<($t|0);
				if (!($3)) {
					return;
				}
				$4 = ((($this)) + 28|0);
				__ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
				return;
			}
			function __ZN4Blob5rightEi($this,$r) {
				$this = $this|0;
				$r = $r|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==($r|0);
				if ($2) {
					return;
				}
				__ZN6Bitmap5rightEi($this,$r);
				$3 = ($1|0)>($r|0);
				if (!($3)) {
					return;
				}
				$4 = ((($this)) + 28|0);
				__ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
				return;
			}
			function __ZN4Blob6bottomEi($this,$b) {
				$this = $this|0;
				$b = $b|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==($b|0);
				if ($2) {
					return;
				}
				__ZN6Bitmap6bottomEi($this,$b);
				$3 = ($1|0)>($b|0);
				if (!($3)) {
					return;
				}
				$4 = ((($this)) + 28|0);
				__ZN12_GLOBAL__N_118delete_outer_holesERK9RectangleRNSt3__16vectorIP6BitmapNS3_9allocatorIS6_EEEE($this,$4);
				return;
			}
			function __ZNK4Blob4holeEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 28|0);
					$2 = ((($this)) + 32|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2203);
				$$phi$trans$insert = ((($this)) + 28|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZNK4Blob2idEii($this,$row,$col) {
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$1 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZNK9Rectangle8includesEii($this,$row,$col)|0);
				if (!($0)) {
					$$1 = 0;
					return ($$1|0);
				}
				$1 = ((($this)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($row) - ($2))|0;
				$4 = ((($this)) + 16|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$this>>2]|0;
				$7 = (($col) - ($6))|0;
				$8 = (($5) + (($3*12)|0)|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = (($9) + ($7)|0);
				$11 = HEAP8[$10>>0]|0;
				$12 = ($11<<24>>24)==(0);
				if (!($12)) {
					$$1 = 1;
					return ($$1|0);
				}
				$13 = ((($this)) + 28|0);
				$14 = ((($this)) + 32|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = HEAP32[$13>>2]|0;
				$17 = (($15) - ($16))|0;
				$18 = ($17|0)>(0);
				if (!($18)) {
					$$1 = 0;
					return ($$1|0);
				}
				$$in = $16;$i$03 = 0;
				while(1) {
					$19 = $$in;
					$20 = (($19) + ($i$03<<2)|0);
					$21 = HEAP32[$20>>2]|0;
					$22 = (__ZNK9Rectangle8includesEii($21,$row,$col)|0);
					if ($22) {
						$23 = HEAP32[$13>>2]|0;
						$24 = (($23) + ($i$03<<2)|0);
						$25 = HEAP32[$24>>2]|0;
						$26 = ((($25)) + 4|0);
						$27 = HEAP32[$26>>2]|0;
						$28 = (($row) - ($27))|0;
						$29 = ((($25)) + 16|0);
						$30 = HEAP32[$29>>2]|0;
						$31 = HEAP32[$25>>2]|0;
						$32 = (($col) - ($31))|0;
						$33 = (($30) + (($28*12)|0)|0);
						$34 = HEAP32[$33>>2]|0;
						$35 = (($34) + ($32)|0);
						$36 = HEAP8[$35>>0]|0;
						$37 = ($36<<24>>24)==(0);
						$38 = $23;
						if ($37) {
							$42 = $38;
						} else {
							$i$03$lcssa = $i$03;
							break;
						}
					} else {
						$$pre = HEAP32[$13>>2]|0;
						$42 = $$pre;
					}
					$39 = (($i$03) + 1)|0;
					$40 = HEAP32[$14>>2]|0;
					$41 = (($40) - ($42))|0;
					$43 = $41 >> 2;
					$44 = ($39|0)<($43|0);
					if ($44) {
						$$in = $42;$i$03 = $39;
					} else {
						$$1 = 0;
						label = 10;
						break;
					}
				}
				if ((label|0) == 10) {
					return ($$1|0);
				}
				$45 = $i$03$lcssa ^ -1;
				$$1 = $45;
				return ($$1|0);
			}
			function __ZNK4Blob7test_BDEv($this) {
				$this = $this|0;
				var $$pre = 0, $$pre14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $i$0516 = 0, $i1$02 = 0, $lb$0 = 0, $lb$015 = 0, $rt$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($7) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($10|0)<($5|0);
				$12 = $11 ? $10 : $5;
				$13 = (($12|0) / 2)&-1;
				$14 = ($12|0)>(1);
				L1: do {
					if ($14) {
						$15 = (__ZNK4Blob2idEii($this,$1,$8)|0);
						$16 = ($15|0)==(0);
						L3: do {
							if ($16) {
								$i$0516 = 0;
								while(1) {
									$17 = HEAP32[$0>>2]|0;
									$18 = (($17) - ($i$0516))|0;
									$19 = HEAP32[$this>>2]|0;
									$20 = (($i$0516) + 1)|0;
									$21 = (($20) + ($19))|0;
									$22 = (__ZNK4Blob2idEii($this,$18,$21)|0);
									$23 = ($22|0)==(0);
									if (!($23)) {
										$lb$0 = $i$0516;
										break L3;
									}
									$24 = ($20|0)<($13|0);
									if (!($24)) {
										$lb$0 = $13;
										break L3;
									}
									$$pre = HEAP32[$0>>2]|0;
									$$pre14 = HEAP32[$this>>2]|0;
									$25 = (($$pre) - ($20))|0;
									$26 = (($$pre14) + ($20))|0;
									$27 = (__ZNK4Blob2idEii($this,$25,$26)|0);
									$28 = ($27|0)==(0);
									if ($28) {
										$i$0516 = $20;
									} else {
										$lb$0 = $20;
										break;
									}
								}
							} else {
								$lb$0 = 0;
							}
						} while(0);
						if ($14) {
							$i1$02 = 0;
							while(1) {
								$29 = HEAP32[$2>>2]|0;
								$30 = (($29) + ($i1$02))|0;
								$31 = HEAP32[$6>>2]|0;
								$32 = (($31) - ($i1$02))|0;
								$33 = (__ZNK4Blob2idEii($this,$30,$32)|0);
								$34 = ($33|0)==(0);
								if (!($34)) {
									$lb$015 = $lb$0;$rt$0 = $i1$02;
									break L1;
								}
								$35 = (($i1$02) + 1)|0;
								$36 = ($35|0)<($13|0);
								if ($36) {
									$i1$02 = $35;
								} else {
									$lb$015 = $lb$0;$rt$0 = $13;
									break;
								}
							}
						} else {
							$lb$015 = $lb$0;$rt$0 = $13;
						}
					} else {
						$lb$015 = $13;$rt$0 = $13;
					}
				} while(0);
				$37 = ($rt$0|0)>(1);
				$38 = ($lb$015*3)|0;
				$39 = ($38|0)<=($rt$0|0);
				$40 = $37 & $39;
				return ($40|0);
			}
			function __ZNK4Blob6test_QEv($this) {
				$this = $this|0;
				var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $disp$017 = 0, $disp$017$us = 0, $i$0$ltimin$1$us = 0, $i$0$rbimin$1$us = 0;
				var $i$08$us = 0, $ltimin$0$lcssa = 0, $ltimin$015$us = 0, $ltimin$14$us = 0, $ltimin$2$us = 0, $ltimin$2$us$lcssa = 0, $ltimin$2$us$lcssa$lcssa = 0, $ltw$0$ltwmax$0$us = 0, $ltw$0$ltwmax$0$us$lcssa = 0, $ltw$06$us = 0, $ltw$1$us = 0, $ltw$1$us$lcssa = 0, $ltwmax$0$lcssa = 0, $ltwmax$013$us = 0, $or$cond = 0, $phitmp = 0, $rbimin$0$lcssa = 0, $rbimin$016$us = 0, $rbimin$15$us = 0, $rbimin$2$us = 0;
				var $rbimin$2$us$lcssa = 0, $rbimin$2$us$lcssa$lcssa = 0, $rbw$07$us = 0, $rbw$1$us = 0, $rbw$1$us$lcssa = 0, $rbwmax$0$lcssa = 0, $rbwmax$014$us = 0, $rbwmax$1$us = 0, $rbwmax$1$us$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = (($7) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($10|0)<($5|0);
				$12 = $11 ? $10 : $5;
				$13 = (($12|0) / 2)&-1;
				$14 = ($10|0)>(3);
				L1: do {
					if ($14) {
						$15 = ($12|0)>(1);
						if ($15) {
							$54 = $8;$disp$017$us = 0;$ltimin$015$us = $13;$ltwmax$013$us = 0;$rbimin$016$us = $13;$rbwmax$014$us = 0;
						} else {
							$16 = (($10|0) / 4)&-1;
							$disp$017 = 0;
							while(1) {
								$47 = (($disp$017) + 1)|0;
								$48 = ($47|0)<($16|0);
								if ($48) {
									$disp$017 = $47;
								} else {
									$ltimin$0$lcssa = $13;$ltwmax$0$lcssa = 0;$rbimin$0$lcssa = $13;$rbwmax$0$lcssa = 0;
									break L1;
								}
							}
						}
						while(1) {
							$21 = $54;$i$08$us = 0;$ltimin$14$us = $ltimin$015$us;$ltw$06$us = 0;$rbimin$15$us = $rbimin$016$us;$rbw$07$us = 0;
							while(1) {
								$17 = HEAP32[$2>>2]|0;
								$18 = (($17) + ($i$08$us))|0;
								$19 = (($i$08$us) + ($disp$017$us))|0;
								$20 = (($19) + ($21))|0;
								$22 = (__ZNK4Blob2idEii($this,$18,$20)|0);
								$23 = ($22|0)==(1);
								if ($23) {
									$24 = (($ltw$06$us) + 1)|0;
									$25 = ($ltimin$14$us|0)>($i$08$us|0);
									$i$0$ltimin$1$us = $25 ? $i$08$us : $ltimin$14$us;
									$ltimin$2$us = $i$0$ltimin$1$us;$ltw$1$us = $24;
								} else {
									$ltimin$2$us = $ltimin$14$us;$ltw$1$us = $ltw$06$us;
								}
								$26 = HEAP32[$0>>2]|0;
								$27 = (($26) - ($i$08$us))|0;
								$28 = HEAP32[$6>>2]|0;
								$29 = (($28) - ($19))|0;
								$30 = (__ZNK4Blob2idEii($this,$27,$29)|0);
								$31 = ($30|0)==(1);
								if ($31) {
									$32 = (($rbw$07$us) + 1)|0;
									$33 = ($rbimin$15$us|0)>($i$08$us|0);
									$i$0$rbimin$1$us = $33 ? $i$08$us : $rbimin$15$us;
									$rbimin$2$us = $i$0$rbimin$1$us;$rbw$1$us = $32;
								} else {
									$rbimin$2$us = $rbimin$15$us;$rbw$1$us = $rbw$07$us;
								}
								$34 = (($i$08$us) + 1)|0;
								$35 = ($34|0)<($13|0);
								if (!($35)) {
									$ltimin$2$us$lcssa = $ltimin$2$us;$ltw$1$us$lcssa = $ltw$1$us;$rbimin$2$us$lcssa = $rbimin$2$us;$rbw$1$us$lcssa = $rbw$1$us;
									break;
								}
								$$pre = HEAP32[$this>>2]|0;
								$21 = $$pre;$i$08$us = $34;$ltimin$14$us = $ltimin$2$us;$ltw$06$us = $ltw$1$us;$rbimin$15$us = $rbimin$2$us;$rbw$07$us = $rbw$1$us;
							}
							$36 = ($ltwmax$013$us|0)<($ltw$1$us$lcssa|0);
							$ltw$0$ltwmax$0$us = $36 ? $ltw$1$us$lcssa : $ltwmax$013$us;
							$37 = ($rbwmax$014$us|0)<($rbw$1$us$lcssa|0);
							$rbwmax$1$us = $37 ? $rbw$1$us$lcssa : $rbwmax$014$us;
							$38 = (($disp$017$us) + 1)|0;
							$39 = HEAP32[$6>>2]|0;
							$40 = HEAP32[$this>>2]|0;
							$41 = (($39) + 1)|0;
							$42 = (($41) - ($40))|0;
							$43 = (($42|0) / 4)&-1;
							$44 = ($38|0)<($43|0);
							if ($44) {
								$54 = $40;$disp$017$us = $38;$ltimin$015$us = $ltimin$2$us$lcssa;$ltwmax$013$us = $ltw$0$ltwmax$0$us;$rbimin$016$us = $rbimin$2$us$lcssa;$rbwmax$014$us = $rbwmax$1$us;
							} else {
								$ltimin$2$us$lcssa$lcssa = $ltimin$2$us$lcssa;$ltw$0$ltwmax$0$us$lcssa = $ltw$0$ltwmax$0$us;$rbimin$2$us$lcssa$lcssa = $rbimin$2$us$lcssa;$rbwmax$1$us$lcssa = $rbwmax$1$us;
								break;
							}
						}
						$phitmp = $ltw$0$ltwmax$0$us$lcssa << 1;
						$ltimin$0$lcssa = $ltimin$2$us$lcssa$lcssa;$ltwmax$0$lcssa = $phitmp;$rbimin$0$lcssa = $rbimin$2$us$lcssa$lcssa;$rbwmax$0$lcssa = $rbwmax$1$us$lcssa;
					} else {
						$ltimin$0$lcssa = $13;$ltwmax$0$lcssa = 0;$rbimin$0$lcssa = $13;$rbwmax$0$lcssa = 0;
					}
				} while(0);
				$45 = ($ltimin$0$lcssa|0)>($rbimin$0$lcssa|0);
				$46 = ($rbimin$0$lcssa|0)==(0);
				$or$cond = $45 | $46;
				if (!($or$cond)) {
					$53 = 0;
					return ($53|0);
				}
				$49 = ($ltwmax$0$lcssa|0)<($rbwmax$0$lcssa|0);
				if ($49) {
					$53 = 1;
					return ($53|0);
				}
				$50 = ($ltwmax$0$lcssa|0)==($rbwmax$0$lcssa|0);
				$51 = ($rbwmax$0$lcssa|0)>(3);
				$52 = $50 & $51;
				$53 = $52;
				return ($53|0);
			}
			function __ZNK4Blob5printEP8_IO_FILE($this,$outfile) {
				$this = $this|0;
				$outfile = $outfile|0;
				var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$04 = 0, $row$05 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)>($3|0);
				if ($4) {
					(_fputc(10,$outfile)|0);
					return;
				}
				$5 = ((($this)) + 8|0);
				$6 = ((($this)) + 16|0);
				$row$05 = $1;
				while(1) {
					$7 = HEAP32[$this>>2]|0;
					$8 = HEAP32[$5>>2]|0;
					$9 = ($7|0)>($8|0);
					L6: do {
						if (!($9)) {
							$17 = $7;$col$04 = $7;
							while(1) {
								$13 = HEAP32[$0>>2]|0;
								$14 = (($row$05) - ($13))|0;
								$15 = HEAP32[$6>>2]|0;
								$16 = (($col$04) - ($17))|0;
								$18 = (($15) + (($14*12)|0)|0);
								$19 = HEAP32[$18>>2]|0;
								$20 = (($19) + ($16)|0);
								$21 = HEAP8[$20>>0]|0;
								$22 = ($21<<24>>24)==(0);
								if ($22) {
									(_fwrite(2233,2,1,$outfile)|0);
								} else {
									(_fwrite(2230,2,1,$outfile)|0);
								}
								$23 = HEAP32[$5>>2]|0;
								$24 = ($col$04|0)<($23|0);
								if (!($24)) {
									break L6;
								}
								$25 = (($col$04) + 1)|0;
								$$pre = HEAP32[$this>>2]|0;
								$17 = $$pre;$col$04 = $25;
							}
						}
					} while(0);
					(_fputc(10,$outfile)|0);
					$10 = (($row$05) + 1)|0;
					$11 = HEAP32[$2>>2]|0;
					$12 = ($row$05|0)<($11|0);
					if ($12) {
						$row$05 = $10;
					} else {
						break;
					}
				}
				(_fputc(10,$outfile)|0);
				return;
			}
			function __ZN4Blob9fill_holeEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if ($0) {
					label = 4;
				} else {
					$1 = ((($this)) + 28|0);
					$2 = ((($this)) + 32|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$$pre5 = ((($this)) + 28|0);
						$$pre$phiZ2D = $$pre5;$10 = $8;
					} else {
						label = 4;
					}
				}
				if ((label|0) == 4) {
					__ZN5Ocrad14internal_errorEPKc(2236);
					$$phi$trans$insert = ((($this)) + 28|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					$$pre$phiZ2D = $$phi$trans$insert;$10 = $$pre;
				}
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				__ZN6Bitmap10add_bitmapERKS_($this,$11);
				$12 = HEAP32[$$pre$phiZ2D>>2]|0;
				$13 = (($12) + ($i<<2)|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ($14|0)==(0|0);
				if ($15) {
					$33 = $12;
				} else {
					$16 = ((($14)) + 16|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = ($17|0)==(0|0);
					if (!($18)) {
						$19 = ((($14)) + 20|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = ($20|0)==($17|0);
						if ($21) {
							$31 = $17;
						} else {
							$23 = $20;
							while(1) {
								$22 = ((($23)) + -12|0);
								HEAP32[$19>>2] = $22;
								$24 = HEAP32[$22>>2]|0;
								$25 = ($24|0)==(0|0);
								if ($25) {
									$26 = $22;
								} else {
									$28 = ((($23)) + -8|0);
									$29 = HEAP32[$28>>2]|0;
									$30 = ($29|0)==($24|0);
									if (!($30)) {
										HEAP32[$28>>2] = $24;
									}
									__ZdlPv($24);
									$$pre$i$i$i$i = HEAP32[$19>>2]|0;
									$26 = $$pre$i$i$i$i;
								}
								$27 = ($26|0)==($17|0);
								if ($27) {
									break;
								} else {
									$23 = $26;
								}
							}
							$$pre$i$i = HEAP32[$16>>2]|0;
							$31 = $$pre$i$i;
						}
						__ZdlPv($31);
					}
					__ZdlPv($14);
					$$pre4 = HEAP32[$$pre$phiZ2D>>2]|0;
					$33 = $$pre4;
				}
				$32 = (($33) + ($i<<2)|0);
				$34 = ((($32)) + 4|0);
				$35 = ((($this)) + 32|0);
				$36 = HEAP32[$35>>2]|0;
				$37 = $34;
				$38 = (($36) - ($37))|0;
				$39 = $38 >> 2;
				_memmove(($32|0),($34|0),($38|0))|0;
				$40 = (($32) + ($39<<2)|0);
				$41 = HEAP32[$35>>2]|0;
				$42 = ($41|0)==($40|0);
				if ($42) {
					return;
				}
				$__new_last2$i$i$i = $40;
				$scevgep$i$i$i = ((($41)) + -4|0);
				$43 = $scevgep$i$i$i;
				$44 = (($43) - ($__new_last2$i$i$i))|0;
				$45 = $44 >>> 2;
				$46 = $45 ^ -1;
				$scevgep4$i$i$i = (($41) + ($46<<2)|0);
				HEAP32[$35>>2] = $scevgep4$i$i$i;
				return;
			}
			function __ZN4Blob10find_holesEv($this) {
				$this = $this|0;
				var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i47 = 0, $$02 = 0, $$1 = 0, $$13 = 0, $$cast = 0, $$cast$i = 0, $$cast$lcssa = 0, $$cast100 = 0, $$cast98 = 0, $$lcssa = 0, $$lcssa154 = 0, $$lcssa155 = 0, $$lcssa156 = 0, $$lcssa80 = 0, $$lcssa88 = 0, $$pre = 0;
				var $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i39 = 0, $$pre$i$i42 = 0, $$pre117 = 0, $$pre118 = 0, $$pre119 = 0, $$pre121 = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre127 = 0, $$pre128 = 0, $$pre20$i = 0, $$sroa$010$0$i = 0;
				var $$sroa$09$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
				var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
				var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
				var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
				var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
				var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
				var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
				var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
				var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
				var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
				var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
				var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
				var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
				var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
				var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
				var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
				var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
				var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
				var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
				var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
				var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i32 = 0, $col$0 = 0, $col$091 = 0, $col$092 = 0, $i$099 = 0, $i2$090 = 0, $lpad$phi$index = 0;
				var $lpad$phi$index3 = 0, $new_data = 0, $new_data$idx$val = 0, $old_data = 0, $old_data$idx$val = 0, $old_data$idx11$val = 0, $old_data$idx13$val = 0, $old_data$idx15$val = 0, $old_data$idx16$val = 0, $old_data$idx17$val = 0, $or$cond = 0, $or$cond10 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, $p = 0, $row$094 = 0;
				var $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i48 = 0, $scevgep$i$i$i$i59 = 0, $scevgep$i$i$i18 = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i33 = 0, $scevgep$i$i$i54 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i49 = 0, $scevgep4$i$i$i$i60 = 0, $scevgep4$i$i$i19 = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i34 = 0, $scevgep4$i$i$i55 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$old_data = sp + 16|0;
				$new_data = sp + 4|0;
				$p = sp;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				$$cast98 = $3;
				$5 = $2;
				if ($4) {
					$$cast$lcssa = $$cast98;$$lcssa88 = $2;$6 = $5;
				} else {
					$$cast100 = $$cast98;$405 = $5;$406 = $3;$407 = $2;$i$099 = 0;
					while(1) {
						$19 = (($$cast100) + ($i$099<<2)|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = ($20|0)==(0|0);
						if ($21) {
							$408 = $405;$41 = $406;$42 = $407;
						} else {
							$22 = ((($20)) + 16|0);
							$23 = HEAP32[$22>>2]|0;
							$24 = ($23|0)==(0|0);
							if (!($24)) {
								$25 = ((($20)) + 20|0);
								$26 = HEAP32[$25>>2]|0;
								$27 = ($26|0)==($23|0);
								if ($27) {
									$37 = $23;
								} else {
									$29 = $26;
									while(1) {
										$28 = ((($29)) + -12|0);
										HEAP32[$25>>2] = $28;
										$30 = HEAP32[$28>>2]|0;
										$31 = ($30|0)==(0|0);
										if ($31) {
											$32 = $28;
										} else {
											$34 = ((($29)) + -8|0);
											$35 = HEAP32[$34>>2]|0;
											$36 = ($35|0)==($30|0);
											if (!($36)) {
												HEAP32[$34>>2] = $30;
											}
											__ZdlPv($30);
											$$pre$i$i$i$i39 = HEAP32[$25>>2]|0;
											$32 = $$pre$i$i$i$i39;
										}
										$33 = ($32|0)==($23|0);
										if ($33) {
											break;
										} else {
											$29 = $32;
										}
									}
									$$pre$i$i42 = HEAP32[$22>>2]|0;
									$37 = $$pre$i$i42;
								}
								__ZdlPv($37);
							}
							__ZdlPv($20);
							$$pre = HEAP32[$1>>2]|0;
							$$pre117 = HEAP32[$0>>2]|0;
							$38 = $$pre;
							$408 = $38;$41 = $$pre117;$42 = $$pre;
						}
						$39 = (($i$099) + 1)|0;
						$40 = (($42) - ($41))|0;
						$43 = $40 >> 2;
						$44 = ($39>>>0)<($43>>>0);
						$$cast = $41;
						if ($44) {
							$$cast100 = $$cast;$405 = $408;$406 = $41;$407 = $42;$i$099 = $39;
						} else {
							$$cast$lcssa = $$cast;$$lcssa88 = $41;$6 = $408;
							break;
						}
					}
				}
				$7 = ($6|0)==($$cast$lcssa|0);
				if (!($7)) {
					$scevgep$i$i$i18 = ((($6)) + -4|0);
					$8 = $scevgep$i$i$i18;
					$9 = (($8) - ($$lcssa88))|0;
					$10 = $9 >>> 2;
					$11 = $10 ^ -1;
					$scevgep4$i$i$i19 = (($6) + ($11<<2)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i19;
				}
				$12 = ((($this)) + 12|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = ((($this)) + 4|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = (($13) + 1)|0;
				$17 = (($16) - ($15))|0;
				$18 = ($17|0)<(3);
				if ($18) {
					STACKTOP = sp;return;
				}
				$45 = ((($this)) + 8|0);
				$46 = HEAP32[$45>>2]|0;
				$47 = HEAP32[$this>>2]|0;
				$48 = (($46) + 1)|0;
				$49 = (($48) - ($47))|0;
				$50 = ($49|0)<(3);
				if ($50) {
					STACKTOP = sp;return;
				}
				HEAP32[$old_data>>2] = 0;
				$51 = ((($old_data)) + 4|0);
				HEAP32[$51>>2] = 0;
				$52 = ((($old_data)) + 8|0);
				HEAP32[$52>>2] = 0;
				$53 = ($48|0)==($47|0);
				do {
					if ($53) {
						$80 = $46;$82 = $47;
					} else {
						$54 = ($49>>>0)>(1073741823);
						if ($54) {
							__THREW__ = 0;
							invoke_vi(46,($old_data|0));
							$55 = __THREW__; __THREW__ = 0;
							$56 = $55&1;
							if (!($56)) {
								label = 21;
							}
						} else {
							label = 21;
						}
						if ((label|0) == 21) {
							$57 = $49 << 2;
							__THREW__ = 0;
							$58 = (invoke_ii(29,($57|0))|0);
							$59 = __THREW__; __THREW__ = 0;
							$60 = $59&1;
							if (!($60)) {
								HEAP32[$51>>2] = $58;
								HEAP32[$old_data>>2] = $58;
								$61 = (($58) + ($49<<2)|0);
								$62 = ((($old_data)) + 8|0);
								HEAP32[$62>>2] = $61;
								$$0$i$i = $49;$63 = $58;
								while(1) {
									HEAP32[$63>>2] = 0;
									$64 = HEAP32[$51>>2]|0;
									$65 = ((($64)) + 4|0);
									HEAP32[$51>>2] = $65;
									$66 = (($$0$i$i) + -1)|0;
									$67 = ($66|0)==(0);
									if ($67) {
										break;
									} else {
										$$0$i$i = $66;$63 = $65;
									}
								}
								$$pre118 = HEAP32[$45>>2]|0;
								$$pre119 = HEAP32[$this>>2]|0;
								$80 = $$pre118;$82 = $$pre119;
								break;
							}
						}
						$68 = ___cxa_find_matching_catch_2()|0;
						$69 = tempRet0;
						$70 = HEAP32[$old_data>>2]|0;
						$71 = ($70|0)==(0|0);
						$72 = $70;
						if ($71) {
							___resumeException($68|0);
							// unreachable;
						}
						$73 = HEAP32[$51>>2]|0;
						$74 = ($73|0)==($70|0);
						if (!($74)) {
							$scevgep$i$i$i$i = ((($73)) + -4|0);
							$75 = $scevgep$i$i$i$i;
							$76 = (($75) - ($72))|0;
							$77 = $76 >>> 2;
							$78 = $77 ^ -1;
							$scevgep4$i$i$i$i = (($73) + ($78<<2)|0);
							HEAP32[$51>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($70);
						___resumeException($68|0);
						// unreachable;
					}
				} while(0);
				$79 = (($80) + 1)|0;
				$81 = (($79) - ($82))|0;
				HEAP32[$new_data>>2] = 0;
				$83 = ((($new_data)) + 4|0);
				HEAP32[$83>>2] = 0;
				$84 = ((($new_data)) + 8|0);
				HEAP32[$84>>2] = 0;
				$85 = ($79|0)==($82|0);
				do {
					if ($85) {
						$409 = 0;
						label = 41;
					} else {
						$86 = ($81>>>0)>(1073741823);
						if ($86) {
							__THREW__ = 0;
							invoke_vi(46,($new_data|0));
							$87 = __THREW__; __THREW__ = 0;
							$88 = $87&1;
							if (!($88)) {
								label = 33;
							}
						} else {
							label = 33;
						}
						if ((label|0) == 33) {
							$89 = $81 << 2;
							__THREW__ = 0;
							$90 = (invoke_ii(29,($89|0))|0);
							$91 = __THREW__; __THREW__ = 0;
							$92 = $91&1;
							if (!($92)) {
								HEAP32[$83>>2] = $90;
								HEAP32[$new_data>>2] = $90;
								$93 = (($90) + ($81<<2)|0);
								$94 = ((($new_data)) + 8|0);
								HEAP32[$94>>2] = $93;
								$$0$i$i47 = $81;$95 = $90;
								while(1) {
									HEAP32[$95>>2] = 0;
									$96 = HEAP32[$83>>2]|0;
									$97 = ((($96)) + 4|0);
									HEAP32[$83>>2] = $97;
									$98 = (($$0$i$i47) + -1)|0;
									$99 = ($98|0)==(0);
									if ($99) {
										$$lcssa156 = $97;
										break;
									} else {
										$$0$i$i47 = $98;$95 = $97;
									}
								}
								$111 = $$lcssa156;
								$409 = $111;
								label = 41;
								break;
							}
						}
						$100 = ___cxa_find_matching_catch_2()|0;
						$101 = tempRet0;
						$102 = HEAP32[$new_data>>2]|0;
						$103 = ($102|0)==(0|0);
						$104 = $102;
						if (!($103)) {
							$105 = HEAP32[$83>>2]|0;
							$106 = ($105|0)==($102|0);
							if (!($106)) {
								$scevgep$i$i$i$i48 = ((($105)) + -4|0);
								$107 = $scevgep$i$i$i$i48;
								$108 = (($107) - ($104))|0;
								$109 = $108 >>> 2;
								$110 = $109 ^ -1;
								$scevgep4$i$i$i$i49 = (($105) + ($110<<2)|0);
								HEAP32[$83>>2] = $scevgep4$i$i$i$i49;
							}
							__ZdlPv($102);
						}
						$$1 = $100;$$13 = $101;
					}
				} while(0);
				if ((label|0) == 41) {
					$112 = HEAP32[$14>>2]|0;
					$113 = HEAP32[$12>>2]|0;
					$114 = ($112|0)>($113|0);
					L69: do {
						if ($114) {
							label = 43;
						} else {
							$115 = ((($old_data)) + 8|0);
							$116 = ((($new_data)) + 8|0);
							$117 = ((($this)) + 16|0);
							$118 = ((($this)) + 36|0);
							$134 = $409;$138 = $112;$row$094 = $112;
							L71: while(1) {
								$131 = HEAP32[$old_data>>2]|0;
								$132 = HEAP32[$new_data>>2]|0;
								HEAP32[$old_data>>2] = $132;
								HEAP32[$new_data>>2] = $131;
								$133 = HEAP32[$51>>2]|0;
								HEAP32[$51>>2] = $134;
								HEAP32[$83>>2] = $133;
								$135 = HEAP32[$115>>2]|0;
								$136 = HEAP32[$116>>2]|0;
								HEAP32[$115>>2] = $136;
								HEAP32[$116>>2] = $135;
								$137 = (($row$094) - ($138))|0;
								$139 = HEAP32[$117>>2]|0;
								$140 = (($139) + (($137*12)|0)|0);
								$141 = HEAP32[$140>>2]|0;
								$142 = HEAP8[$141>>0]|0;
								$143 = ($142<<24>>24)!=(0);
								$$ = $143 ? $this : 0;
								$144 = $131;
								HEAP32[$144>>2] = $$;
								$145 = HEAP32[$this>>2]|0;
								$col$091 = (($145) + 1)|0;
								$146 = HEAP32[$45>>2]|0;
								$147 = ($col$091|0)<($146|0);
								if ($147) {
									$149 = $145;$151 = $138;$410 = $146;$col$092 = $col$091;
									while(1) {
										$148 = (($col$092) - ($149))|0;
										$150 = (($row$094) - ($151))|0;
										$152 = HEAP32[$117>>2]|0;
										$153 = (($152) + (($150*12)|0)|0);
										$154 = HEAP32[$153>>2]|0;
										$155 = (($154) + ($148)|0);
										$156 = HEAP8[$155>>0]|0;
										$157 = ($156<<24>>24)==(0);
										if ($157) {
											$160 = (($148) + -1)|0;
											$161 = HEAP32[$new_data>>2]|0;
											$162 = (($161) + ($160<<2)|0);
											$163 = HEAP32[$162>>2]|0;
											$164 = HEAP32[$old_data>>2]|0;
											$165 = (($164) + ($148<<2)|0);
											$166 = HEAP32[$165>>2]|0;
											$167 = ($163|0)==(0|0);
											$168 = ($166|0)==(0|0);
											$or$cond = $167 | $168;
											do {
												if ($or$cond) {
													HEAP32[$p>>2] = 0;
													$169 = ($163|0)==($this|0);
													$or$cond5 = $167 | $169;
													if (!($or$cond5)) {
														$old_data$idx15$val = HEAP32[$51>>2]|0;
														__THREW__ = 0;
														invoke_viiiiii(99,($0|0),($164|0),($old_data$idx15$val|0),($new_data|0),($163|0),($148|0));
														$170 = __THREW__; __THREW__ = 0;
														$171 = $170&1;
														if ($171) {
															label = 47;
															break L71;
														} else {
															$210 = 0;
															break;
														}
													}
													$172 = ($166|0)==($this|0);
													$or$cond6 = $168 | $172;
													if ($or$cond6) {
														$210 = 0;
													} else {
														$old_data$idx13$val = HEAP32[$51>>2]|0;
														__THREW__ = 0;
														invoke_viiiiii(99,($0|0),($164|0),($old_data$idx13$val|0),($new_data|0),($166|0),($148|0));
														$173 = __THREW__; __THREW__ = 0;
														$174 = $173&1;
														if ($174) {
															label = 47;
															break L71;
														} else {
															$210 = 0;
														}
													}
												} else {
													$175 = ($163|0)==($this|0);
													if (!($175)) {
														HEAP32[$p>>2] = $163;
														$176 = $163;
														__THREW__ = 0;
														invoke_viii(68,($163|0),($row$094|0),($col$092|0));
														$177 = __THREW__; __THREW__ = 0;
														$178 = $177&1;
														if ($178) {
															label = 47;
															break L71;
														} else {
															$210 = $176;
															break;
														}
													}
													$179 = ($166|0)==($this|0);
													if (!($179)) {
														HEAP32[$p>>2] = $166;
														$180 = $166;
														__THREW__ = 0;
														invoke_viii(68,($166|0),($row$094|0),($col$092|0));
														$181 = __THREW__; __THREW__ = 0;
														$182 = $181&1;
														if ($182) {
															label = 47;
															break L71;
														} else {
															$210 = $180;
															break;
														}
													}
													__THREW__ = 0;
													$183 = (invoke_ii(29,28)|0);
													$184 = __THREW__; __THREW__ = 0;
													$185 = $184&1;
													if ($185) {
														label = 47;
														break L71;
													}
													__THREW__ = 0;
													invoke_viiiii(69,($183|0),($col$092|0),($row$094|0),($col$092|0),($row$094|0));
													$186 = __THREW__; __THREW__ = 0;
													$187 = $186&1;
													if ($187) {
														$$lcssa154 = $183;
														label = 67;
														break L71;
													}
													HEAP32[$p>>2] = $183;
													$188 = ((($183)) + 4|0);
													$189 = HEAP32[$188>>2]|0;
													$190 = (($row$094) - ($189))|0;
													$191 = ((($183)) + 16|0);
													$192 = HEAP32[$191>>2]|0;
													$193 = HEAP32[$183>>2]|0;
													$194 = (($col$092) - ($193))|0;
													$195 = (($192) + (($190*12)|0)|0);
													$196 = HEAP32[$195>>2]|0;
													$197 = (($196) + ($194)|0);
													HEAP8[$197>>0] = 1;
													$198 = HEAP32[$1>>2]|0;
													$199 = HEAP32[$118>>2]|0;
													$200 = ($198|0)==($199|0);
													$201 = $183;
													if ($200) {
														__THREW__ = 0;
														invoke_vii(100,($0|0),($p|0));
														$204 = __THREW__; __THREW__ = 0;
														$205 = $204&1;
														if ($205) {
															label = 47;
															break L71;
														} else {
															$210 = $201;
															break;
														}
													} else {
														HEAP32[$198>>2] = $201;
														$202 = HEAP32[$1>>2]|0;
														$203 = ((($202)) + 4|0);
														HEAP32[$1>>2] = $203;
														$210 = $201;
														break;
													}
												}
											} while(0);
											$208 = HEAP32[$new_data>>2]|0;
											$209 = (($208) + ($148<<2)|0);
											HEAP32[$209>>2] = $210;
											$211 = ($210|0)==(0);
											$212 = ($163|0)==($166|0);
											$or$cond7 = $212 | $211;
											$213 = ($163|0)==($this|0);
											$or$cond8 = $213 | $or$cond7;
											$214 = ($166|0)==($this|0);
											$or$cond9 = $214 | $or$cond8;
											do {
												if (!($or$cond9)) {
													$old_data$idx17$val = HEAP32[$51>>2]|0;
													$new_data$idx$val = HEAP32[$new_data>>2]|0;
													$215 = $163;
													$216 = $166;
													$217 = ((($163)) + 4|0);
													$218 = HEAP32[$217>>2]|0;
													$219 = ((($166)) + 4|0);
													$220 = HEAP32[$219>>2]|0;
													$221 = ($218|0)>($220|0);
													do {
														if ($221) {
															$222 = (($148) + 1)|0;
															$223 = (($new_data$idx$val) + ($222<<2)|0);
															$224 = ($222|0)==(0);
															if ($224) {
																$$sroa$010$0$i = $216;$$sroa$09$0$i = $215;
																break;
															} else {
																$226 = $new_data$idx$val;
															}
															while(1) {
																$225 = HEAP32[$226>>2]|0;
																$227 = ($225|0)==($163|0);
																if ($227) {
																	HEAP32[$226>>2] = $216;
																}
																$228 = ((($226)) + 4|0);
																$229 = ($228|0)==($223|0);
																if ($229) {
																	$$sroa$010$0$i = $216;$$sroa$09$0$i = $215;
																	break;
																} else {
																	$226 = $228;
																}
															}
														} else {
															$old_data$idx16$val = HEAP32[$old_data>>2]|0;
															$230 = (($old_data$idx16$val) + ($148<<2)|0);
															$231 = ($230|0)==($old_data$idx17$val|0);
															if ($231) {
																$$sroa$010$0$i = $215;$$sroa$09$0$i = $216;
																break;
															} else {
																$233 = $230;
															}
															while(1) {
																$232 = HEAP32[$233>>2]|0;
																$234 = ($232|0)==($166|0);
																if ($234) {
																	HEAP32[$233>>2] = $215;
																}
																$235 = ((($233)) + 4|0);
																$236 = ($235|0)==($old_data$idx17$val|0);
																if ($236) {
																	$$sroa$010$0$i = $215;$$sroa$09$0$i = $216;
																	break;
																} else {
																	$233 = $235;
																}
															}
														}
													} while(0);
													$237 = HEAP32[$1>>2]|0;
													$238 = HEAP32[$0>>2]|0;
													$239 = (($237) - ($238))|0;
													$240 = $239 >> 2;
													$$cast$i = $238;
													$241 = $$sroa$09$0$i;
													$$0$i = $240;
													while(1) {
														$242 = (($$0$i) + -1)|0;
														$243 = ($$0$i|0)>(0);
														if (!($243)) {
															$$lcssa = $242;
															label = 81;
															break;
														}
														$244 = (($$cast$i) + ($242<<2)|0);
														$245 = HEAP32[$244>>2]|0;
														$246 = ($245|0)==($241|0);
														if ($246) {
															$250 = $$cast$i;$251 = $242;$255 = $237;
															break;
														} else {
															$$0$i = $242;
														}
													}
													if ((label|0) == 81) {
														label = 0;
														__THREW__ = 0;
														invoke_vi(47,(2292|0));
														$247 = __THREW__; __THREW__ = 0;
														$248 = $247&1;
														if ($248) {
															label = 47;
															break L71;
														}
														$$pre$i = HEAP32[$0>>2]|0;
														$$pre20$i = HEAP32[$1>>2]|0;
														$250 = $$pre$i;$251 = $$lcssa;$255 = $$pre20$i;
													}
													$249 = (($250) + ($251<<2)|0);
													$252 = ((($249)) + 4|0);
													$253 = $252;
													$254 = (($255) - ($253))|0;
													$256 = $254 >> 2;
													_memmove(($249|0),($252|0),($254|0))|0;
													$257 = (($249) + ($256<<2)|0);
													$258 = HEAP32[$1>>2]|0;
													$259 = ($258|0)==($257|0);
													if (!($259)) {
														$__new_last2$i$i$i$i = $257;
														$scevgep$i$i$i$i59 = ((($258)) + -4|0);
														$260 = $scevgep$i$i$i$i59;
														$261 = (($260) - ($__new_last2$i$i$i$i))|0;
														$262 = $261 >>> 2;
														$263 = $262 ^ -1;
														$scevgep4$i$i$i$i60 = (($258) + ($263<<2)|0);
														HEAP32[$1>>2] = $scevgep4$i$i$i$i60;
													}
													$264 = $$sroa$010$0$i;
													__THREW__ = 0;
													invoke_vii(71,($264|0),($241|0));
													$265 = __THREW__; __THREW__ = 0;
													$266 = $265&1;
													if ($266) {
														label = 47;
														break L71;
													}
													$267 = ($$sroa$09$0$i|0)==(0);
													if ($267) {
														break;
													}
													$268 = ((($241)) + 16|0);
													$269 = HEAP32[$268>>2]|0;
													$270 = ($269|0)==(0|0);
													if (!($270)) {
														$271 = ((($241)) + 20|0);
														$272 = HEAP32[$271>>2]|0;
														$273 = ($272|0)==($269|0);
														if ($273) {
															$283 = $269;
														} else {
															$275 = $272;
															while(1) {
																$274 = ((($275)) + -12|0);
																HEAP32[$271>>2] = $274;
																$276 = HEAP32[$274>>2]|0;
																$277 = ($276|0)==(0|0);
																if ($277) {
																	$278 = $274;
																} else {
																	$280 = ((($275)) + -8|0);
																	$281 = HEAP32[$280>>2]|0;
																	$282 = ($281|0)==($276|0);
																	if (!($282)) {
																		HEAP32[$280>>2] = $276;
																	}
																	__ZdlPv($276);
																	$$pre$i$i$i$i$i = HEAP32[$271>>2]|0;
																	$278 = $$pre$i$i$i$i$i;
																}
																$279 = ($278|0)==($269|0);
																if ($279) {
																	break;
																} else {
																	$275 = $278;
																}
															}
															$$pre$i$i$i = HEAP32[$268>>2]|0;
															$283 = $$pre$i$i$i;
														}
														__ZdlPv($283);
													}
													$284 = $$sroa$09$0$i;
													__ZdlPv($284);
												}
											} while(0);
											$$pre125 = HEAP32[$45>>2]|0;
											$286 = $$pre125;
										} else {
											$158 = HEAP32[$new_data>>2]|0;
											$159 = (($158) + ($148<<2)|0);
											HEAP32[$159>>2] = $this;
											$286 = $410;
										}
										$col$0 = (($col$092) + 1)|0;
										$285 = ($col$0|0)<($286|0);
										if (!($285)) {
											$$lcssa155 = $286;
											break;
										}
										$$pre123 = HEAP32[$this>>2]|0;
										$$pre124 = HEAP32[$14>>2]|0;
										$149 = $$pre123;$151 = $$pre124;$410 = $286;$col$092 = $col$0;
									}
									$$pre126 = HEAP32[$14>>2]|0;
									$$pre127 = HEAP32[$this>>2]|0;
									$$lcssa80 = $$lcssa155;$288 = $$pre126;$291 = $$pre127;
								} else {
									$$lcssa80 = $146;$288 = $138;$291 = $145;
								}
								$287 = (($row$094) - ($288))|0;
								$289 = HEAP32[$117>>2]|0;
								$290 = (($$lcssa80) - ($291))|0;
								$292 = (($289) + (($287*12)|0)|0);
								$293 = HEAP32[$292>>2]|0;
								$294 = (($293) + ($290)|0);
								$295 = HEAP8[$294>>0]|0;
								$296 = ($295<<24>>24)==(0);
								if ($296) {
									$297 = (($$lcssa80) + 1)|0;
									$298 = (($297) - ($291))|0;
									$299 = (($298) + -2)|0;
									$300 = HEAP32[$new_data>>2]|0;
									$301 = (($300) + ($299<<2)|0);
									$302 = HEAP32[$301>>2]|0;
									$303 = ($302|0)==(0|0);
									$304 = ($302|0)==($this|0);
									$or$cond10 = $303 | $304;
									if (!($or$cond10)) {
										$305 = (($298) + -1)|0;
										$old_data$idx$val = HEAP32[$old_data>>2]|0;
										$old_data$idx11$val = HEAP32[$51>>2]|0;
										__THREW__ = 0;
										invoke_viiiiii(99,($0|0),($old_data$idx$val|0),($old_data$idx11$val|0),($new_data|0),($302|0),($305|0));
										$306 = __THREW__; __THREW__ = 0;
										$307 = $306&1;
										if ($307) {
											label = 48;
											break;
										}
									}
								}
								$308 = HEAP32[$12>>2]|0;
								$309 = ($row$094|0)<($308|0);
								if (!($309)) {
									label = 43;
									break L69;
								}
								$310 = (($row$094) + 1)|0;
								$$pre121 = HEAP32[$83>>2]|0;
								$$pre122 = HEAP32[$14>>2]|0;
								$134 = $$pre121;$138 = $$pre122;$row$094 = $310;
							}
							if ((label|0) == 47) {
								$127 = ___cxa_find_matching_catch_2()|0;
								$128 = tempRet0;
								$lpad$phi$index = $127;$lpad$phi$index3 = $128;
								label = 49;
								break;
							}
							else if ((label|0) == 48) {
								$129 = ___cxa_find_matching_catch_2()|0;
								$130 = tempRet0;
								$lpad$phi$index = $129;$lpad$phi$index3 = $130;
								label = 49;
								break;
							}
							else if ((label|0) == 67) {
								$206 = ___cxa_find_matching_catch_2()|0;
								$207 = tempRet0;
								__ZdlPv($$lcssa154);
								$$0 = $206;$$02 = $207;
								break;
							}
						}
					} while(0);
					L154: do {
						if ((label|0) == 43) {
							$119 = HEAP32[$1>>2]|0;
							$120 = HEAP32[$0>>2]|0;
							$121 = (($119) - ($120))|0;
							$122 = $121 >> 2;
							$123 = ($122|0)==(0);
							L156: do {
								if (!($123)) {
									$124 = $120;
									$322 = $124;$i2$090 = $122;
									while(1) {
										$320 = (($i2$090) + -1)|0;
										$321 = (($322) + ($320<<2)|0);
										$323 = HEAP32[$321>>2]|0;
										__THREW__ = 0;
										$324 = (invoke_iii(101,($this|0),($323|0))|0);
										$325 = __THREW__; __THREW__ = 0;
										$326 = $325&1;
										if ($326) {
											break;
										}
										if ($324) {
											$327 = ((($323)) + 12|0);
											$328 = HEAP32[$327>>2]|0;
											$329 = ((($323)) + 4|0);
											$330 = HEAP32[$329>>2]|0;
											$331 = (($328) + 1)|0;
											$332 = (($331) - ($330))|0;
											$333 = ($332|0)>(4);
											if (!($333)) {
												$335 = ((($323)) + 8|0);
												$336 = HEAP32[$335>>2]|0;
												$337 = HEAP32[$323>>2]|0;
												$338 = (($336) + 1)|0;
												$339 = (($338) - ($337))|0;
												$340 = ($339|0)>(4);
												if (!($340)) {
													$341 = ($332|0)>(2);
													$342 = ($339|0)>(2);
													$or$cond69 = $341 | $342;
													if ($or$cond69) {
														__THREW__ = 0;
														$343 = (invoke_ii(74,($323|0))|0);
														$344 = __THREW__; __THREW__ = 0;
														$345 = $344&1;
														if ($345) {
															break;
														}
														$346 = ($343|0)>(3);
														if (!($346)) {
															label = 120;
														}
													} else {
														label = 120;
													}
												}
											}
										} else {
											$347 = ($323|0)==(0|0);
											if ($347) {
												label = 130;
											} else {
												label = 120;
											}
										}
										if ((label|0) == 120) {
											label = 0;
											$348 = ((($323)) + 16|0);
											$349 = HEAP32[$348>>2]|0;
											$350 = ($349|0)==(0|0);
											if (!($350)) {
												$351 = ((($323)) + 20|0);
												$352 = HEAP32[$351>>2]|0;
												$353 = ($352|0)==($349|0);
												if ($353) {
													$363 = $349;
												} else {
													$355 = $352;
													while(1) {
														$354 = ((($355)) + -12|0);
														HEAP32[$351>>2] = $354;
														$356 = HEAP32[$354>>2]|0;
														$357 = ($356|0)==(0|0);
														if ($357) {
															$358 = $354;
														} else {
															$360 = ((($355)) + -8|0);
															$361 = HEAP32[$360>>2]|0;
															$362 = ($361|0)==($356|0);
															if (!($362)) {
																HEAP32[$360>>2] = $356;
															}
															__ZdlPv($356);
															$$pre$i$i$i$i = HEAP32[$351>>2]|0;
															$358 = $$pre$i$i$i$i;
														}
														$359 = ($358|0)==($349|0);
														if ($359) {
															break;
														} else {
															$355 = $358;
														}
													}
													$$pre$i$i = HEAP32[$348>>2]|0;
													$363 = $$pre$i$i;
												}
												__ZdlPv($363);
											}
											__ZdlPv($323);
											label = 130;
										}
										if ((label|0) == 130) {
											label = 0;
											$364 = HEAP32[$0>>2]|0;
											$365 = (($364) + ($320<<2)|0);
											$366 = ((($365)) + 4|0);
											$367 = HEAP32[$1>>2]|0;
											$368 = $366;
											$369 = (($367) - ($368))|0;
											$370 = $369 >> 2;
											_memmove(($365|0),($366|0),($369|0))|0;
											$371 = (($365) + ($370<<2)|0);
											$372 = HEAP32[$1>>2]|0;
											$373 = ($372|0)==($371|0);
											if (!($373)) {
												$__new_last2$i$i$i32 = $371;
												$scevgep$i$i$i33 = ((($372)) + -4|0);
												$374 = $scevgep$i$i$i33;
												$375 = (($374) - ($__new_last2$i$i$i32))|0;
												$376 = $375 >>> 2;
												$377 = $376 ^ -1;
												$scevgep4$i$i$i34 = (($372) + ($377<<2)|0);
												HEAP32[$1>>2] = $scevgep4$i$i$i34;
											}
										}
										$334 = ($320|0)==(0);
										if ($334) {
											break L156;
										}
										$$pre128 = HEAP32[$0>>2]|0;
										$322 = $$pre128;$i2$090 = $320;
									}
									$125 = ___cxa_find_matching_catch_2()|0;
									$126 = tempRet0;
									$lpad$phi$index = $125;$lpad$phi$index3 = $126;
									label = 49;
									break L154;
								}
							} while(0);
							$311 = HEAP32[$new_data>>2]|0;
							$312 = ($311|0)==(0|0);
							$313 = $311;
							if (!($312)) {
								$314 = HEAP32[$83>>2]|0;
								$315 = ($314|0)==($311|0);
								if (!($315)) {
									$scevgep$i$i$i54 = ((($314)) + -4|0);
									$316 = $scevgep$i$i$i54;
									$317 = (($316) - ($313))|0;
									$318 = $317 >>> 2;
									$319 = $318 ^ -1;
									$scevgep4$i$i$i55 = (($314) + ($319<<2)|0);
									HEAP32[$83>>2] = $scevgep4$i$i$i55;
								}
								__ZdlPv($311);
							}
							$378 = HEAP32[$old_data>>2]|0;
							$379 = ($378|0)==(0|0);
							$380 = $378;
							if (!($379)) {
								$381 = HEAP32[$51>>2]|0;
								$382 = ($381|0)==($378|0);
								if (!($382)) {
									$scevgep$i$i$i27 = ((($381)) + -4|0);
									$383 = $scevgep$i$i$i27;
									$384 = (($383) - ($380))|0;
									$385 = $384 >>> 2;
									$386 = $385 ^ -1;
									$scevgep4$i$i$i28 = (($381) + ($386<<2)|0);
									HEAP32[$51>>2] = $scevgep4$i$i$i28;
								}
								__ZdlPv($378);
							}
							STACKTOP = sp;return;
						}
					} while(0);
					if ((label|0) == 49) {
						$$0 = $lpad$phi$index;$$02 = $lpad$phi$index3;
					}
					$387 = HEAP32[$new_data>>2]|0;
					$388 = ($387|0)==(0|0);
					$389 = $387;
					if ($388) {
						$$1 = $$0;$$13 = $$02;
					} else {
						$390 = HEAP32[$83>>2]|0;
						$391 = ($390|0)==($387|0);
						if (!($391)) {
							$scevgep$i$i$i22 = ((($390)) + -4|0);
							$392 = $scevgep$i$i$i22;
							$393 = (($392) - ($389))|0;
							$394 = $393 >>> 2;
							$395 = $394 ^ -1;
							$scevgep4$i$i$i23 = (($390) + ($395<<2)|0);
							HEAP32[$83>>2] = $scevgep4$i$i$i23;
						}
						__ZdlPv($387);
						$$1 = $$0;$$13 = $$02;
					}
				}
				$396 = HEAP32[$old_data>>2]|0;
				$397 = ($396|0)==(0|0);
				$398 = $396;
				if ($397) {
					___resumeException($$1|0);
					// unreachable;
				}
				$399 = HEAP32[$51>>2]|0;
				$400 = ($399|0)==($396|0);
				if (!($400)) {
					$scevgep$i$i$i = ((($399)) + -4|0);
					$401 = $scevgep$i$i$i;
					$402 = (($401) - ($398))|0;
					$403 = $402 >>> 2;
					$404 = $403 ^ -1;
					$scevgep4$i$i$i = (($399) + ($404<<2)|0);
					HEAP32[$51>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($396);
				___resumeException($$1|0);
				// unreachable;
			}
			function __ZN12_GLOBAL__N_111delete_holeERNSt3__16vectorIP6BitmapNS0_9allocatorIS3_EEEES7_S7_S3_i($holep_vector,$v1$0$0$0$val,$v1$0$0$1$val,$v2,$p,$i) {
				$holep_vector = $holep_vector|0;
				$v1$0$0$0$val = $v1$0$0$0$val|0;
				$v1$0$0$1$val = $v1$0$0$1$val|0;
				$v2 = $v2|0;
				$p = $p|0;
				$i = $i|0;
				var $$0 = 0, $$cast = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (($v1$0$0$0$val) + ($i<<2)|0);
				$1 = ($0|0)==($v1$0$0$1$val|0);
				if (!($1)) {
					$3 = $0;
					while(1) {
						$2 = HEAP32[$3>>2]|0;
						$4 = ($2|0)==($p|0);
						if ($4) {
							HEAP32[$3>>2] = 0;
						}
						$5 = ((($3)) + 4|0);
						$6 = ($5|0)==($v1$0$0$1$val|0);
						if ($6) {
							break;
						} else {
							$3 = $5;
						}
					}
				}
				$7 = HEAP32[$v2>>2]|0;
				$8 = (($7) + ($i<<2)|0);
				$9 = ($i|0)==(0);
				if (!($9)) {
					$11 = $7;
					while(1) {
						$10 = HEAP32[$11>>2]|0;
						$12 = ($10|0)==($p|0);
						if ($12) {
							HEAP32[$11>>2] = 0;
						}
						$13 = ((($11)) + 4|0);
						$14 = ($13|0)==($8|0);
						if ($14) {
							break;
						} else {
							$11 = $13;
						}
					}
				}
				$15 = ((($holep_vector)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = HEAP32[$holep_vector>>2]|0;
				$18 = (($16) - ($17))|0;
				$19 = $18 >> 2;
				$$cast = $17;
				$$0 = $19;
				while(1) {
					$20 = (($$0) + -1)|0;
					$21 = ($$0|0)>(0);
					if (!($21)) {
						$$lcssa = $20;
						label = 12;
						break;
					}
					$22 = (($$cast) + ($20<<2)|0);
					$23 = HEAP32[$22>>2]|0;
					$24 = ($23|0)==($p|0);
					if ($24) {
						$26 = $$cast;$27 = $20;$31 = $16;
						break;
					} else {
						$$0 = $20;
					}
				}
				if ((label|0) == 12) {
					__ZN5Ocrad14internal_errorEPKc(2268);
					$$pre = HEAP32[$holep_vector>>2]|0;
					$$pre18 = HEAP32[$15>>2]|0;
					$26 = $$pre;$27 = $$lcssa;$31 = $$pre18;
				}
				$25 = (($26) + ($27<<2)|0);
				$28 = ((($25)) + 4|0);
				$29 = $28;
				$30 = (($31) - ($29))|0;
				$32 = $30 >> 2;
				_memmove(($25|0),($28|0),($30|0))|0;
				$33 = (($25) + ($32<<2)|0);
				$34 = HEAP32[$15>>2]|0;
				$35 = ($34|0)==($33|0);
				if (!($35)) {
					$__new_last2$i$i$i = $33;
					$scevgep$i$i$i = ((($34)) + -4|0);
					$36 = $scevgep$i$i$i;
					$37 = (($36) - ($__new_last2$i$i$i))|0;
					$38 = $37 >>> 2;
					$39 = $38 ^ -1;
					$scevgep4$i$i$i = (($34) + ($39<<2)|0);
					HEAP32[$15>>2] = $scevgep4$i$i$i;
				}
				$40 = ($p|0)==(0|0);
				if ($40) {
					return;
				}
				$41 = ((($p)) + 16|0);
				$42 = HEAP32[$41>>2]|0;
				$43 = ($42|0)==(0|0);
				if (!($43)) {
					$44 = ((($p)) + 20|0);
					$45 = HEAP32[$44>>2]|0;
					$46 = ($45|0)==($42|0);
					if ($46) {
						$56 = $42;
					} else {
						$48 = $45;
						while(1) {
							$47 = ((($48)) + -12|0);
							HEAP32[$44>>2] = $47;
							$49 = HEAP32[$47>>2]|0;
							$50 = ($49|0)==(0|0);
							if ($50) {
								$51 = $47;
							} else {
								$53 = ((($48)) + -8|0);
								$54 = HEAP32[$53>>2]|0;
								$55 = ($54|0)==($49|0);
								if (!($55)) {
									HEAP32[$53>>2] = $49;
								}
								__ZdlPv($49);
								$$pre$i$i$i$i = HEAP32[$44>>2]|0;
								$51 = $$pre$i$i$i$i;
							}
							$52 = ($51|0)==($42|0);
							if ($52) {
								break;
							} else {
								$48 = $51;
							}
						}
						$$pre$i$i = HEAP32[$41>>2]|0;
						$56 = $$pre$i$i;
					}
					__ZdlPv($56);
				}
				__ZdlPv($p);
				return;
			}
			function __ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(1073741823);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 2;
				$11 = ($10>>>0)<(536870911);
				if ($11) {
					$15 = $9 >> 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
					} else {
						$$0$i1 = $17;$41 = $18;$42 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 2;
					$$0$i1 = 1073741823;$41 = $12;$42 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 2;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
				}
				$24 = (($25) + ($26<<2)|0);
				$27 = (($25) + ($$0$i2<<2)|0);
				$28 = $27;
				$29 = HEAP32[$__x>>2]|0;
				HEAP32[$24>>2] = $29;
				$30 = ((($24)) + 4|0);
				$31 = $30;
				$32 = (($33) - ($$in))|0;
				$34 = $32 >> 2;
				$35 = (0 - ($34))|0;
				$36 = (($24) + ($35<<2)|0);
				$37 = $36;
				$38 = $$in;
				_memcpy(($36|0),($38|0),($32|0))|0;
				HEAP32[$this>>2] = $37;
				HEAP32[$0>>2] = $31;
				HEAP32[$7>>2] = $28;
				$39 = ($$in|0)==(0);
				if ($39) {
					return;
				}
				$40 = $$in;
				__ZdlPv($40);
				return;
			}
			function __ZN9Textblock13apply_filtersERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$in = 0, $$pre = 0, $$pre51 = 0, $$pre52 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
				var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
				var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
				var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
				var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
				var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
				var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
				var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
				var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
				var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0$lcssa = 0, $b$027 = 0, $b$120 = 0, $b$2 = 0, $b$3 = 0, $f$041 = 0, $first$0 = 0, $i1$016 = 0;
				var $i2$031 = 0, $i6$037 = 0, $j$018 = 0, $j$018$lcssa = 0, $j3$0 = 0, $j3$0$in = 0, $j3$0$lcssa117 = 0, $j4$024 = 0, $j5$021 = 0, $j8$0 = 0, $j8$0$in = 0, $j8$0$in$ph = 0, $j8$0$lcssa121 = 0, $l$0$lcssa = 0, $l$030 = 0, $l$1 = 0, $last$0 = 0, $modified$0$off0$ph = 0, $or$cond = 0, $or$cond45 = 0;
				var $r$0$lcssa = 0, $r$028 = 0, $r$1 = 0, $re = 0, $t$0$lcssa = 0, $t$029 = 0, $t$123 = 0, $t$2 = 0, $t$3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$re = sp;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)<(4);
				$6 = $3;
				if ($5) {
					STACKTOP = sp;return;
				}
				$7 = ((($control)) + 4|0);
				$8 = ((($control)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = ($9|0)==($10|0);
				if ($11) {
					STACKTOP = sp;return;
				}
				$12 = ((($this)) + 8|0);
				$13 = ((($this)) + 12|0);
				$14 = ((($this)) + 4|0);
				$$in = $10;$194 = $6;$195 = $6;$20 = $3;$21 = $2;$24 = $6;$f$041 = 0;
				while(1) {
					$15 = $$in;
					$16 = (($15) + ($f$041<<3)|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = ($17|0)==(0|0);
					L9: do {
						if ($18) {
							$45 = (((($15) + ($f$041<<3)|0)) + 4|0);
							$46 = HEAP32[$45>>2]|0;
							$47 = ($46|0)==(5);
							if (!($47)) {
								$48 = (($21) - ($20))|0;
								$49 = ($48|0)>(0);
								$50 = $20;
								if ($49) {
									$52 = $195;$i1$016 = 0;
								} else {
									$196 = $194;$197 = $195;$198 = $50;$199 = $20;$200 = $21;
									break;
								}
								while(1) {
									$51 = (($52) + ($i1$016<<2)|0);
									$53 = HEAP32[$51>>2]|0;
									__ZN8Textline12apply_filterEN6Filter4TypeE($53,$46);
									$54 = (($i1$016) + 1)|0;
									$55 = HEAP32[$1>>2]|0;
									$56 = HEAP32[$0>>2]|0;
									$57 = (($55) - ($56))|0;
									$58 = $57 >> 2;
									$59 = ($54|0)<($58|0);
									$60 = $56;
									if ($59) {
										$52 = $60;$i1$016 = $54;
									} else {
										$196 = $60;$197 = $60;$198 = $60;$199 = $56;$200 = $55;
										break L9;
									}
								}
							}
							$61 = HEAP32[$12>>2]|0;
							$62 = HEAP32[$13>>2]|0;
							$63 = HEAP32[$this>>2]|0;
							$64 = HEAP32[$14>>2]|0;
							$65 = (($21) - ($20))|0;
							$66 = ($65|0)>(0);
							$67 = $20;
							if ($66) {
								$71 = $194;$b$027 = $64;$i2$031 = 0;$l$030 = $61;$r$028 = $63;$t$029 = $62;
								while(1) {
									$70 = (($71) + ($i2$031<<2)|0);
									$72 = HEAP32[$70>>2]|0;
									$73 = ((($72)) + 16|0);
									$74 = ((($72)) + 20|0);
									$75 = HEAP32[$74>>2]|0;
									$76 = HEAP32[$73>>2]|0;
									$77 = (($75) - ($76))|0;
									$78 = $77 >> 2;
									$79 = ((($72)) + 12|0);
									$80 = HEAP32[$79>>2]|0;
									$81 = ($80|0)<($78|0);
									L19: do {
										if ($81) {
											$j$018 = $80;
											while(1) {
												$82 = (__ZNK8Textline16is_key_characterEi($72,$j$018)|0);
												if ($82) {
													$j$018$lcssa = $j$018;
													break;
												}
												$87 = (($j$018) + 1)|0;
												$88 = HEAP32[$74>>2]|0;
												$89 = HEAP32[$73>>2]|0;
												$90 = (($88) - ($89))|0;
												$91 = $90 >> 2;
												$92 = ($87|0)<($91|0);
												if ($92) {
													$j$018 = $87;
												} else {
													$94 = $89;$95 = $88;$first$0 = $78;$l$1 = $l$030;
													break L19;
												}
											}
											$83 = (__ZNK8Textline9characterEi($72,$j$018$lcssa)|0);
											$84 = HEAP32[$83>>2]|0;
											$85 = ($84|0)<($l$030|0);
											$86 = $85 ? $84 : $l$030;
											$$pre51 = HEAP32[$74>>2]|0;
											$$pre52 = HEAP32[$73>>2]|0;
											$94 = $$pre52;$95 = $$pre51;$first$0 = $j$018$lcssa;$l$1 = $86;
										} else {
											$94 = $76;$95 = $75;$first$0 = $78;$l$1 = $l$030;
										}
									} while(0);
									$93 = (($95) - ($94))|0;
									$96 = $93 >> 2;
									$j3$0$in = $96;
									while(1) {
										$j3$0 = (($j3$0$in) + -1)|0;
										$97 = ($j3$0$in|0)>($first$0|0);
										if (!($97)) {
											$last$0 = -1;$r$1 = $r$028;
											break;
										}
										$98 = (__ZNK8Textline16is_key_characterEi($72,$j3$0)|0);
										if ($98) {
											$j3$0$lcssa117 = $j3$0;
											label = 20;
											break;
										} else {
											$j3$0$in = $j3$0;
										}
									}
									if ((label|0) == 20) {
										label = 0;
										$99 = (__ZNK8Textline9characterEi($72,$j3$0$lcssa117)|0);
										$100 = ((($99)) + 8|0);
										$101 = HEAP32[$100>>2]|0;
										$102 = ($r$028|0)<($101|0);
										$103 = $102 ? $101 : $r$028;
										$last$0 = $j3$0$lcssa117;$r$1 = $103;
									}
									$104 = ($i2$031|0)==(0);
									if ($104) {
										$105 = ($first$0|0)>($last$0|0);
										if ($105) {
											$b$3 = $b$027;$t$3 = $t$029;
										} else {
											$j4$024 = $first$0;$t$123 = $t$029;
											while(1) {
												$106 = (__ZNK8Textline16is_key_characterEi($72,$j4$024)|0);
												if ($106) {
													$107 = (__ZNK8Textline9characterEi($72,$j4$024)|0);
													$108 = ((($107)) + 4|0);
													$109 = HEAP32[$108>>2]|0;
													$110 = ($109|0)<($t$123|0);
													$111 = $110 ? $109 : $t$123;
													$t$2 = $111;
												} else {
													$t$2 = $t$123;
												}
												$112 = (($j4$024) + 1)|0;
												$113 = ($j4$024|0)<($last$0|0);
												if ($113) {
													$j4$024 = $112;$t$123 = $t$2;
												} else {
													$b$3 = $b$027;$t$3 = $t$2;
													break;
												}
											}
										}
									} else {
										$114 = HEAP32[$1>>2]|0;
										$115 = HEAP32[$0>>2]|0;
										$116 = (($114) - ($115))|0;
										$117 = $116 >> 2;
										$118 = (($117) + -1)|0;
										$119 = ($i2$031|0)!=($118|0);
										$120 = ($first$0|0)>($last$0|0);
										$or$cond45 = $119 | $120;
										if ($or$cond45) {
											$b$3 = $b$027;$t$3 = $t$029;
										} else {
											$b$120 = $b$027;$j5$021 = $first$0;
											while(1) {
												$121 = (__ZNK8Textline16is_key_characterEi($72,$j5$021)|0);
												if ($121) {
													$122 = (__ZNK8Textline9characterEi($72,$j5$021)|0);
													$123 = ((($122)) + 12|0);
													$124 = HEAP32[$123>>2]|0;
													$125 = ($b$120|0)<($124|0);
													$126 = $125 ? $124 : $b$120;
													$b$2 = $126;
												} else {
													$b$2 = $b$120;
												}
												$127 = (($j5$021) + 1)|0;
												$128 = ($j5$021|0)<($last$0|0);
												if ($128) {
													$b$120 = $b$2;$j5$021 = $127;
												} else {
													$b$3 = $b$2;$t$3 = $t$029;
													break;
												}
											}
										}
									}
									$129 = (($i2$031) + 1)|0;
									$130 = HEAP32[$1>>2]|0;
									$131 = HEAP32[$0>>2]|0;
									$132 = (($130) - ($131))|0;
									$133 = $132 >> 2;
									$134 = ($129|0)<($133|0);
									$135 = $131;
									if ($134) {
										$71 = $135;$b$027 = $b$3;$i2$031 = $129;$l$030 = $l$1;$r$028 = $r$1;$t$029 = $t$3;
									} else {
										$201 = $135;$202 = $135;$203 = $131;$204 = $130;$b$0$lcssa = $b$3;$l$0$lcssa = $l$1;$r$0$lcssa = $r$1;$t$0$lcssa = $t$3;
										break;
									}
								}
							} else {
								$201 = $194;$202 = $67;$203 = $20;$204 = $21;$b$0$lcssa = $64;$l$0$lcssa = $61;$r$0$lcssa = $63;$t$0$lcssa = $62;
							}
							$68 = ($r$0$lcssa|0)<($l$0$lcssa|0);
							$69 = ($b$0$lcssa|0)<($t$0$lcssa|0);
							$or$cond = $69 | $68;
							if ($or$cond) {
								$196 = $201;$197 = $202;$198 = $202;$199 = $203;$200 = $204;
							} else {
								__ZN9RectangleC2Eiiii($re,$l$0$lcssa,$t$0$lcssa,$r$0$lcssa,$b$0$lcssa);
								$136 = HEAP32[$1>>2]|0;
								$137 = HEAP32[$0>>2]|0;
								$138 = (($136) - ($137))|0;
								$139 = ($138|0)>(0);
								$140 = $137;
								if ($139) {
									$142 = $140;$i6$037 = 0;
									while(1) {
										$141 = (($142) + ($i6$037<<2)|0);
										$143 = HEAP32[$141>>2]|0;
										$144 = ((($143)) + 16|0);
										$145 = ((($143)) + 20|0);
										$146 = HEAP32[$145>>2]|0;
										$147 = HEAP32[$144>>2]|0;
										$148 = (($146) - ($147))|0;
										$149 = $148 >> 2;
										$150 = ((($143)) + 4|0);
										$j8$0$in$ph = $149;$modified$0$off0$ph = 0;
										L50: while(1) {
											$j8$0$in = $j8$0$in$ph;
											while(1) {
												$j8$0 = (($j8$0$in) + -1)|0;
												$151 = ($j8$0$in|0)>(0);
												if (!($151)) {
													break L50;
												}
												$152 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
												$153 = ((($152)) + 12|0);
												$154 = HEAP32[$153>>2]|0;
												$155 = ((($152)) + 4|0);
												$156 = HEAP32[$155>>2]|0;
												$157 = (($154) + 1)|0;
												$158 = (($157) - ($156))|0;
												$159 = HEAP32[$143>>2]|0;
												$160 = HEAP32[$150>>2]|0;
												$161 = ($159|0)==($160|0);
												if ($161) {
													$165 = 0;
												} else {
													$162 = ((($159)) + 16|0);
													$163 = HEAP32[$162>>2]|0;
													$165 = $163;
												}
												$164 = $165 << 1;
												$166 = ($158|0)<($164|0);
												if (!($166)) {
													$j8$0$lcssa121 = $j8$0;
													break;
												}
												$167 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
												$168 = ((($167)) + 4|0);
												$169 = HEAP32[$168>>2]|0;
												$170 = ((($167)) + 12|0);
												$171 = HEAP32[$170>>2]|0;
												$172 = (($171) + ($169))|0;
												$173 = (($172|0) / 2)&-1;
												$174 = (__ZNK8Textline9characterEi($143,$j8$0)|0);
												$175 = HEAP32[$174>>2]|0;
												$176 = ((($174)) + 8|0);
												$177 = HEAP32[$176>>2]|0;
												$178 = (($177) + ($175))|0;
												$179 = (($178|0) / 2)&-1;
												$180 = (__ZNK9Rectangle8includesEii($re,$173,$179)|0);
												if ($180) {
													$j8$0$in = $j8$0;
												} else {
													$j8$0$lcssa121 = $j8$0;
													break;
												}
											}
											__ZN8Textline16delete_characterEi($143,$j8$0$lcssa121);
											$j8$0$in$ph = $j8$0$lcssa121;$modified$0$off0$ph = 1;
										}
										if ($modified$0$off0$ph) {
											__ZN8Textline40remove_leadind_trailing_duplicate_spacesEv($143);
										}
										$181 = (($i6$037) + 1)|0;
										$182 = HEAP32[$1>>2]|0;
										$183 = HEAP32[$0>>2]|0;
										$184 = (($182) - ($183))|0;
										$185 = $184 >> 2;
										$186 = ($181|0)<($185|0);
										$187 = $183;
										if ($186) {
											$142 = $187;$i6$037 = $181;
										} else {
											$205 = $187;$206 = $183;$207 = $182;
											break;
										}
									}
								} else {
									$205 = $140;$206 = $137;$207 = $136;
								}
								$196 = $205;$197 = $205;$198 = $205;$199 = $206;$200 = $207;
							}
						} else {
							$19 = (($21) - ($20))|0;
							$22 = ($19|0)>(0);
							if ($22) {
								$23 = HEAP32[$24>>2]|0;
								$25 = (($15) + ($f$041<<3)|0);
								$26 = HEAP32[$25>>2]|0;
								__ZN8Textline17apply_user_filterERK11User_filter($23,$26);
								$27 = HEAP32[$1>>2]|0;
								$28 = HEAP32[$0>>2]|0;
								$29 = (($27) - ($28))|0;
								$30 = ($29|0)>(4);
								$31 = $28;
								if ($30) {
									$33 = $31;$34 = 1;
									while(1) {
										$$pre = HEAP32[$7>>2]|0;
										$32 = (($33) + ($34<<2)|0);
										$35 = HEAP32[$32>>2]|0;
										$36 = (($$pre) + ($f$041<<3)|0);
										$37 = HEAP32[$36>>2]|0;
										__ZN8Textline17apply_user_filterERK11User_filter($35,$37);
										$38 = (($34) + 1)|0;
										$39 = HEAP32[$1>>2]|0;
										$40 = HEAP32[$0>>2]|0;
										$41 = (($39) - ($40))|0;
										$42 = $41 >> 2;
										$43 = ($38|0)<($42|0);
										$44 = $40;
										if ($43) {
											$33 = $44;$34 = $38;
										} else {
											$196 = $44;$197 = $44;$198 = $44;$199 = $40;$200 = $39;
											break;
										}
									}
								} else {
									$196 = $31;$197 = $31;$198 = $31;$199 = $28;$200 = $27;
								}
							} else {
								$196 = $194;$197 = $195;$198 = $24;$199 = $20;$200 = $21;
							}
						}
					} while(0);
					$188 = (($f$041) + 1)|0;
					$189 = HEAP32[$8>>2]|0;
					$190 = HEAP32[$7>>2]|0;
					$191 = (($189) - ($190))|0;
					$192 = $191 >> 3;
					$193 = ($188>>>0)<($192>>>0);
					if ($193) {
						$$in = $190;$194 = $196;$195 = $197;$20 = $199;$21 = $200;$24 = $198;$f$041 = $188;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN9TextblockC2ERK9RectangleS2_RNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE($this,$page,$block,$blobp_vector) {
				$this = $this|0;
				$page = $page|0;
				$block = $block|0;
				$blobp_vector = $blobp_vector|0;
				var $$0 = 0, $$09 = 0, $$byval_copy = 0, $$cast = 0, $$cast161 = 0, $$cast162 = 0, $$cast163 = 0, $$cast163$lcssa = 0, $$cast163322 = 0, $$cast163322537 = 0, $$cast163324 = 0, $$cast443 = 0, $$in = 0, $$in533 = 0, $$in534 = 0, $$in535 = 0, $$in536 = 0, $$lcssa = 0, $$lcssa307 = 0, $$lcssa787 = 0;
				var $$lcssa795 = 0, $$lcssa799 = 0, $$lcssa800 = 0, $$lcssa801 = 0, $$lcssa802 = 0, $$lcssa803 = 0, $$lcssa812 = 0, $$lcssa815 = 0, $$lcssa823 = 0, $$lcssa826 = 0, $$lcssa829 = 0, $$lcssa830 = 0, $$lcssa831 = 0, $$lcssa835 = 0, $$lcssa835$lcssa837 = 0, $$lcssa838 = 0, $$lcssa838$lcssa840 = 0, $$lcssa852 = 0, $$lcssa853 = 0, $$lcssa854 = 0;
				var $$lcssa855 = 0, $$lcssa856 = 0, $$lcssa857 = 0, $$lcssa858 = 0, $$lcssa859 = 0, $$lcssa860 = 0, $$lcssa861 = 0, $$lcssa862 = 0, $$lcssa863 = 0, $$lcssa864 = 0, $$lcssa865 = 0, $$pre = 0, $$pre$i = 0, $$pre$i55 = 0, $$pre$i63 = 0, $$pre$i71 = 0, $$pre$i91 = 0, $$pre$phi532Z2D = 0, $$pre$phiZ2D = 0, $$pre494 = 0;
				var $$pre495 = 0, $$pre496 = 0, $$pre497 = 0, $$pre498 = 0, $$pre499 = 0, $$pre500 = 0, $$pre501 = 0, $$pre502 = 0, $$pre503 = 0, $$pre504 = 0, $$pre505 = 0, $$pre506 = 0, $$pre507 = 0, $$pre507$pre = 0, $$pre508 = 0, $$pre508$pre = 0, $$pre509 = 0, $$pre509$pre = 0, $$pre510 = 0, $$pre510$pre = 0;
				var $$pre511 = 0, $$pre513 = 0, $$pre514 = 0, $$pre516 = 0, $$pre517 = 0, $$pre518 = 0, $$pre519 = 0, $$temp$1 = 0, $$temp$1$current_line$10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
				var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
				var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
				var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
				var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
				var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
				var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0;
				var $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0;
				var $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0;
				var $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0;
				var $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0;
				var $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0;
				var $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0;
				var $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0;
				var $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0;
				var $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0;
				var $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0;
				var $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0;
				var $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0;
				var $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0;
				var $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0;
				var $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0;
				var $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0;
				var $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0;
				var $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0;
				var $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0;
				var $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0;
				var $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0;
				var $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0;
				var $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0;
				var $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0;
				var $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
				var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
				var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
				var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
				var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
				var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
				var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
				var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
				var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
				var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
				var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
				var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
				var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
				var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
				var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
				var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
				var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
				var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
				var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
				var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
				var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
				var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
				var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
				var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
				var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
				var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
				var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
				var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
				var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
				var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
				var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
				var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
				var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
				var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
				var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
				var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
				var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
				var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
				var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
				var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
				var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
				var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
				var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
				var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
				var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
				var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
				var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
				var $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i$i56 = 0, $__new_last2$i$i$i$i64 = 0, $__new_last2$i$i$i$i72 = 0, $__new_last2$i$i$i$i92 = 0, $__new_last2$i$i$i99 = 0, $c$0353 = 0, $c$1 = 0, $c22$0349 = 0, $c22$1 = 0, $cl$2145 = 0, $count$0418 = 0, $cr$0$ph = 0, $cr$0$ph$lcssa843 = 0, $cr$0$ph845 = 0, $current_line$0398 = 0, $current_line$1 = 0, $current_line$1$lcssa848 = 0, $current_line$1$lcssa849 = 0;
				var $current_line$1$lcssa850 = 0, $current_line$10 = 0, $current_line$11 = 0, $current_line$12 = 0, $current_line$2$ph = 0, $current_line$3384 = 0, $current_line$4$lcssa = 0, $current_line$4373 = 0, $current_line$5$lcssa = 0, $current_line$5$lcssa$ph = 0, $current_line$5379 = 0, $current_line$5379$lcssa816 = 0, $current_line$6 = 0, $current_line$7370 = 0, $current_line$8$lcssa = 0, $current_line$8356 = 0, $current_line$9$lcssa = 0, $current_line$9$lcssa$ph = 0, $current_line$9363 = 0, $current_line$9363$lcssa804 = 0;
				var $current_line23$0$be = 0, $current_line23$0346 = 0, $eh$lpad$body$index27Z2D = 0, $eh$lpad$body$indexZ2D = 0, $end$0431 = 0, $height_distrib = 0, $i$0408 = 0, $i1$0414 = 0, $i10$0386 = 0, $i11$0383 = 0, $i124$0345 = 0, $i14$0369 = 0, $i2$0337 = 0, $i20$0352 = 0, $i21$0348 = 0, $i27$0332 = 0, $i28$0330 = 0, $i3$0419 = 0, $i32$0328 = 0, $i39$0326 = 0;
				var $i4$0427 = 0, $i6$0323 = 0, $i7$0397 = 0, $i9$0389 = 0, $i9$0389$in = 0, $j$0$in$ph = 0, $j$0393 = 0, $j$0393$in = 0, $j$0393$lcssa833 = 0, $lpad$phi252$index = 0, $lpad$phi252$index58 = 0, $mean_height$0421 = 0, $mean_height$1 = 0, $mean_height$1$lcssa = 0, $mean_height$2 = 0, $or$cond = 0, $or$cond156 = 0, $or$cond157 = 0, $or$cond158 = 0, $or$cond159 = 0;
				var $or$cond160 = 0, $or$cond439 = 0, $or$cond440 = 0, $or$cond626 = 0, $p = 0, $pending = 0, $pending_short = 0, $pending_tall = 0, $samples$0409 = 0, $samples$1 = 0, $samples$1$lcssa = 0, $samples$2415 = 0, $samples$3 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i57 = 0, $scevgep$i$i$i$i65 = 0, $scevgep$i$i$i$i73 = 0, $scevgep$i$i$i$i93 = 0, $scevgep$i$i$i100 = 0;
				var $scevgep$i$i$i107 = 0, $scevgep$i$i$i132 = 0, $scevgep$i$i$i137 = 0, $scevgep$i$i$i19 = 0, $scevgep$i$i$i22 = 0, $scevgep$i$i$i27 = 0, $scevgep$i$i$i32 = 0, $scevgep$i$i$i37 = 0, $scevgep$i$i$i42 = 0, $scevgep$i$i$i79 = 0, $scevgep$i$i$i82 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i58 = 0, $scevgep4$i$i$i$i66 = 0, $scevgep4$i$i$i$i74 = 0, $scevgep4$i$i$i$i94 = 0, $scevgep4$i$i$i101 = 0, $scevgep4$i$i$i108 = 0, $scevgep4$i$i$i133 = 0;
				var $scevgep4$i$i$i138 = 0, $scevgep4$i$i$i20 = 0, $scevgep4$i$i$i23 = 0, $scevgep4$i$i$i28 = 0, $scevgep4$i$i$i33 = 0, $scevgep4$i$i$i38 = 0, $scevgep4$i$i$i43 = 0, $scevgep4$i$i$i80 = 0, $scevgep4$i$i$i83 = 0, $storemerge401 = 0, $temp$1 = 0, $valid_samples$0420 = 0, $valid_samples$1 = 0, $valid_samples$1$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 68|0;
				$0 = sp + 64|0;
				$1 = sp + 60|0;
				$pending = sp + 48|0;
				$pending_tall = sp + 36|0;
				$pending_short = sp + 24|0;
				$height_distrib = sp + 12|0;
				$p = sp + 8|0;
				$2 = sp + 4|0;
				$3 = sp;
				;HEAP32[$this>>2]=HEAP32[$block>>2]|0;HEAP32[$this+4>>2]=HEAP32[$block+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$block+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$block+12>>2]|0;
				$4 = ((($this)) + 16|0);
				HEAP32[$4>>2] = 0;
				$5 = ((($this)) + 20|0);
				HEAP32[$5>>2] = 0;
				$6 = ((($this)) + 24|0);
				HEAP32[$6>>2] = 0;
				HEAP32[$pending>>2] = 0;
				$7 = ((($pending)) + 4|0);
				HEAP32[$7>>2] = 0;
				$8 = ((($pending)) + 8|0);
				HEAP32[$8>>2] = 0;
				HEAP32[$pending_tall>>2] = 0;
				$9 = ((($pending_tall)) + 4|0);
				HEAP32[$9>>2] = 0;
				$10 = ((($pending_tall)) + 8|0);
				HEAP32[$10>>2] = 0;
				HEAP32[$pending_short>>2] = 0;
				$11 = ((($pending_short)) + 4|0);
				HEAP32[$11>>2] = 0;
				$12 = ((($pending_short)) + 8|0);
				HEAP32[$12>>2] = 0;
				$13 = ((($blobp_vector)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = HEAP32[$blobp_vector>>2]|0;
				$16 = ($14|0)==($15|0);
				L1: do {
					if ($16) {
						$17 = $14;
						$$cast163322537 = $14;
						$$cast163$lcssa = $$cast163322537;$$lcssa = $14;$297 = $17;
						label = 94;
					} else {
						$18 = $15;
						$19 = ((($height_distrib)) + 4|0);
						$20 = ((($height_distrib)) + 8|0);
						$21 = ((($pending_tall)) + 8|0);
						$22 = ((($pending_short)) + 8|0);
						$23 = ((($pending)) + 8|0);
						$29 = $15;$30 = $14;$34 = $18;$end$0431 = 0;
						L4: while(1) {
							$27 = (($end$0431) + 1)|0;
							$28 = (($30) - ($29))|0;
							$31 = $28 >> 2;
							$32 = ($27>>>0)<($31>>>0);
							L6: do {
								if ($32) {
									$33 = (($34) + ($end$0431<<2)|0);
									$35 = HEAP32[$33>>2]|0;
									$36 = ((($35)) + 12|0);
									$37 = HEAP32[$36>>2]|0;
									$39 = $27;$storemerge401 = $37;
									while(1) {
										$38 = (($34) + ($39<<2)|0);
										$40 = HEAP32[$38>>2]|0;
										$41 = ((($40)) + 4|0);
										$42 = HEAP32[$41>>2]|0;
										$43 = ($42|0)>($storemerge401|0);
										if ($43) {
											$$lcssa307 = $39;
											break L6;
										}
										$88 = ((($40)) + 12|0);
										$89 = HEAP32[$88>>2]|0;
										$90 = ($storemerge401|0)<($89|0);
										$91 = $90 ? $89 : $storemerge401;
										$92 = (($39) + 1)|0;
										$93 = ($92>>>0)<($31>>>0);
										if ($93) {
											$39 = $92;$storemerge401 = $91;
										} else {
											$$lcssa307 = $92;
											break;
										}
									}
								} else {
									$$lcssa307 = $27;
								}
							} while(0);
							HEAP32[$height_distrib>>2] = 0;
							HEAP32[$19>>2] = 0;
							HEAP32[$20>>2] = 0;
							$94 = ($end$0431>>>0)<($$lcssa307>>>0);
							if ($94) {
								$141 = 0;$1531 = 0;$1532 = 0;$1533 = 0;$98 = $34;$i$0408 = $end$0431;$samples$0409 = 0;
								while(1) {
									$97 = (($98) + ($i$0408<<2)|0);
									$99 = HEAP32[$97>>2]|0;
									$100 = ((($99)) + 12|0);
									$101 = HEAP32[$100>>2]|0;
									$102 = ((($99)) + 4|0);
									$103 = HEAP32[$102>>2]|0;
									$104 = (($101) + 1)|0;
									$105 = (($104) - ($103))|0;
									$106 = ($105|0)<(10);
									if ($106) {
										$1537 = $1531;$1538 = $1532;$1539 = $1533;$1540 = $141;$samples$1 = $samples$0409;
									} else {
										$107 = ((($99)) + 8|0);
										$108 = HEAP32[$107>>2]|0;
										$109 = HEAP32[$99>>2]|0;
										$110 = (($108) + 1)|0;
										$111 = (($110) - ($109))|0;
										$112 = ($111*5)|0;
										$113 = ($105|0)>=($112|0);
										$114 = ($105*3)|0;
										$115 = ($111|0)>=($114|0);
										$or$cond = $115 | $113;
										if ($or$cond) {
											$1537 = $1531;$1538 = $1532;$1539 = $1533;$1540 = $141;$samples$1 = $samples$0409;
										} else {
											$131 = (($98) + ($i$0408<<2)|0);
											$132 = HEAP32[$131>>2]|0;
											$133 = ((($132)) + 12|0);
											$134 = HEAP32[$133>>2]|0;
											$135 = ((($132)) + 4|0);
											$136 = HEAP32[$135>>2]|0;
											$137 = (($134) + 1)|0;
											$138 = (($137) - ($136))|0;
											$139 = HEAP32[$19>>2]|0;
											$140 = (($139) - ($141))|0;
											$142 = $140 >> 2;
											$143 = ($138>>>0)<($142>>>0);
											$144 = $139;
											do {
												if ($143) {
													$1541 = $1531;$1542 = $1532;$160 = $1533;
												} else {
													$145 = (($138) + 1)|0;
													$146 = ($145>>>0)>($142>>>0);
													$147 = $141;
													if ($146) {
														$148 = (($145) - ($142))|0;
														__THREW__ = 0;
														invoke_vii(92,($height_distrib|0),($148|0));
														$149 = __THREW__; __THREW__ = 0;
														$150 = $149&1;
														if ($150) {
															label = 39;
															break L4;
														}
														$$pre494 = HEAP32[$height_distrib>>2]|0;
														$151 = $$pre494;
														$1541 = $151;$1542 = $151;$160 = $$pre494;
														break;
													}
													$152 = ($145>>>0)<($142>>>0);
													if ($152) {
														$153 = (($147) + ($145<<2)|0);
														$154 = ($144|0)==($153|0);
														if ($154) {
															$1541 = $1531;$1542 = $1532;$160 = $1533;
														} else {
															$__new_last2$i$i$i = $153;
															$scevgep$i$i$i82 = ((($144)) + -4|0);
															$155 = $scevgep$i$i$i82;
															$156 = (($155) - ($__new_last2$i$i$i))|0;
															$157 = $156 >>> 2;
															$158 = $157 ^ -1;
															$scevgep4$i$i$i83 = (($144) + ($158<<2)|0);
															HEAP32[$19>>2] = $scevgep4$i$i$i83;
															$1541 = $1531;$1542 = $1532;$160 = $1533;
														}
													} else {
														$1541 = $1531;$1542 = $1532;$160 = $1533;
													}
												}
											} while(0);
											$159 = (($160) + ($138<<2)|0);
											$161 = HEAP32[$159>>2]|0;
											$162 = (($161) + 1)|0;
											HEAP32[$159>>2] = $162;
											$163 = (($samples$0409) + 1)|0;
											$164 = $160;
											$1537 = $1541;$1538 = $1542;$1539 = $160;$1540 = $164;$samples$1 = $163;
										}
									}
									$165 = (($i$0408) + 1)|0;
									$166 = ($165>>>0)<($$lcssa307>>>0);
									if (!($166)) {
										$$lcssa857 = $1537;$$lcssa858 = $1538;$$lcssa859 = $1539;$samples$1$lcssa = $samples$1;
										break;
									}
									$$pre = HEAP32[$blobp_vector>>2]|0;
									$141 = $1540;$1531 = $1537;$1532 = $1538;$1533 = $1539;$98 = $$pre;$i$0408 = $165;$samples$0409 = $samples$1;
								}
								$$pre495 = HEAP32[$19>>2]|0;
								$95 = $$pre495;
								$96 = ($$lcssa859|0)==($$pre495|0);
								$or$cond440 = $96 & $94;
								if ($or$cond440) {
									$1534 = $$lcssa857;$1535 = $$pre495;$177 = $$lcssa858;$178 = $95;$i1$0414 = $end$0431;$samples$2415 = $samples$1$lcssa;
									while(1) {
										$167 = HEAP32[$blobp_vector>>2]|0;
										$168 = (($167) + ($i1$0414<<2)|0);
										$169 = HEAP32[$168>>2]|0;
										$170 = ((($169)) + 12|0);
										$171 = HEAP32[$170>>2]|0;
										$172 = ((($169)) + 4|0);
										$173 = HEAP32[$172>>2]|0;
										$174 = (($171) + 1)|0;
										$175 = (($174) - ($173))|0;
										$176 = (($178) - ($177))|0;
										$179 = $176 >> 2;
										$180 = ($175>>>0)<($179>>>0);
										do {
											if ($180) {
												$1543 = $1534;$197 = $1535;
											} else {
												$181 = (($175) + 1)|0;
												$182 = ($181>>>0)>($179>>>0);
												$183 = $177;
												$184 = $178;
												if ($182) {
													$185 = (($181) - ($179))|0;
													__THREW__ = 0;
													invoke_vii(92,($height_distrib|0),($185|0));
													$186 = __THREW__; __THREW__ = 0;
													$187 = $186&1;
													if ($187) {
														label = 38;
														break L4;
													}
													$$pre497 = HEAP32[$height_distrib>>2]|0;
													$188 = $$pre497;
													$1543 = $188;$197 = $$pre497;
													break;
												}
												$189 = ($181>>>0)<($179>>>0);
												if ($189) {
													$190 = (($183) + ($181<<2)|0);
													$191 = ($184|0)==($190|0);
													if ($191) {
														$1543 = $1534;$197 = $1535;
													} else {
														$__new_last2$i$i$i99 = $190;
														$scevgep$i$i$i100 = ((($184)) + -4|0);
														$192 = $scevgep$i$i$i100;
														$193 = (($192) - ($__new_last2$i$i$i99))|0;
														$194 = $193 >>> 2;
														$195 = $194 ^ -1;
														$scevgep4$i$i$i101 = (($184) + ($195<<2)|0);
														HEAP32[$19>>2] = $scevgep4$i$i$i101;
														$1543 = $1534;$197 = $1535;
													}
												} else {
													$1543 = $1534;$197 = $1535;
												}
											}
										} while(0);
										$196 = (($197) + ($175<<2)|0);
										$198 = HEAP32[$196>>2]|0;
										$199 = (($198) + 1)|0;
										HEAP32[$196>>2] = $199;
										$200 = (($samples$2415) + 1)|0;
										$201 = (($i1$0414) + 1)|0;
										$202 = ($201>>>0)<($$lcssa307>>>0);
										if (!($202)) {
											$$lcssa860 = $1543;$$lcssa861 = $197;$$lcssa862 = $200;
											break;
										}
										$203 = $197;
										$$pre496 = HEAP32[$19>>2]|0;
										$1534 = $1543;$1535 = $197;$177 = $203;$178 = $$pre496;$i1$0414 = $201;$samples$2415 = $200;
									}
									$$pre498 = HEAP32[$19>>2]|0;
									$1536 = $$lcssa861;$204 = $$pre498;$206 = $$lcssa860;$samples$3 = $$lcssa862;
								} else {
									$1536 = $$lcssa859;$204 = $95;$206 = $$lcssa857;$samples$3 = $samples$1$lcssa;
								}
								$205 = ($204|0)==($206|0);
								if ($205) {
									$1544 = $1536;$mean_height$2 = 0;
								} else {
									$207 = HEAP32[$height_distrib>>2]|0;
									$$cast443 = $207;
									$208 = (($204) - ($$cast443))|0;
									$209 = $208 >> 2;
									$210 = ($samples$3*9)|0;
									$count$0418 = 0;$i3$0419 = 0;$mean_height$0421 = 0;$valid_samples$0420 = 0;
									while(1) {
										$212 = (($207) + ($i3$0419<<2)|0);
										$213 = HEAP32[$212>>2]|0;
										$214 = (($213) + ($count$0418))|0;
										$215 = ($214*10)|0;
										$216 = ($215>>>0)>=($samples$3>>>0);
										$217 = ($count$0418*10)|0;
										$218 = ($217>>>0)<($210>>>0);
										$or$cond439 = $216 & $218;
										if ($or$cond439) {
											$219 = Math_imul($213, $i3$0419)|0;
											$220 = (($219) + ($mean_height$0421))|0;
											$221 = (($213) + ($valid_samples$0420))|0;
											$mean_height$1 = $220;$valid_samples$1 = $221;
										} else {
											$mean_height$1 = $mean_height$0421;$valid_samples$1 = $valid_samples$0420;
										}
										$222 = (($i3$0419) + 1)|0;
										$223 = ($222>>>0)<($209>>>0);
										if ($223) {
											$count$0418 = $214;$i3$0419 = $222;$mean_height$0421 = $mean_height$1;$valid_samples$0420 = $valid_samples$1;
										} else {
											$mean_height$1$lcssa = $mean_height$1;$valid_samples$1$lcssa = $valid_samples$1;
											break;
										}
									}
									$211 = ($valid_samples$1$lcssa|0)==(0);
									if ($211) {
										$1544 = $207;$mean_height$2 = $mean_height$1$lcssa;
									} else {
										$224 = (($mean_height$1$lcssa|0) / ($valid_samples$1$lcssa|0))&-1;
										$1544 = $207;$mean_height$2 = $224;
									}
								}
								if ($94) {
									$225 = $mean_height$2 << 1;
									$i4$0427 = $end$0431;
									while(1) {
										$235 = HEAP32[$blobp_vector>>2]|0;
										$236 = (($235) + ($i4$0427<<2)|0);
										$237 = HEAP32[$236>>2]|0;
										HEAP32[$p>>2] = $237;
										$238 = ((($237)) + 12|0);
										$239 = HEAP32[$238>>2]|0;
										$240 = ((($237)) + 4|0);
										$241 = HEAP32[$240>>2]|0;
										$242 = (($239) + 1)|0;
										$243 = (($242) - ($241))|0;
										$244 = ($243|0)<(10);
										$245 = $237;
										if ($244) {
											$263 = 1;
										} else {
											$246 = ((($237)) + 8|0);
											$247 = HEAP32[$246>>2]|0;
											$248 = HEAP32[$237>>2]|0;
											$249 = (($247) + 1)|0;
											$250 = (($249) - ($248))|0;
											$251 = ($250*5)|0;
											$252 = ($243|0)<($251|0);
											if ($252) {
												$253 = ($243*3)|0;
												$254 = ($250|0)>=($253|0);
												$263 = $254;
											} else {
												$263 = 1;
											}
										}
										$255 = ((($237)) + 12|0);
										$256 = HEAP32[$255>>2]|0;
										$257 = ((($237)) + 4|0);
										$258 = HEAP32[$257>>2]|0;
										$259 = (($256) + 1)|0;
										$260 = (($259) - ($258))|0;
										$261 = ($260|0)>=($225|0);
										$262 = ($260|0)>($mean_height$2|0);
										$or$cond156 = $263 & $262;
										$or$cond159 = $261 | $or$cond156;
										do {
											if ($or$cond159) {
												$264 = HEAP32[$9>>2]|0;
												$265 = HEAP32[$21>>2]|0;
												$266 = ($264|0)==($265|0);
												if ($266) {
													__THREW__ = 0;
													invoke_vii(70,($pending_tall|0),($p|0));
													$269 = __THREW__; __THREW__ = 0;
													$270 = $269&1;
													if ($270) {
														label = 37;
														break L4;
													} else {
														break;
													}
												} else {
													HEAP32[$264>>2] = $245;
													$267 = HEAP32[$9>>2]|0;
													$268 = ((($267)) + 4|0);
													HEAP32[$9>>2] = $268;
													break;
												}
											} else {
												$271 = $260 << 1;
												$272 = ($271|0)<=($mean_height$2|0);
												$273 = ($260|0)<(6);
												$or$cond157 = $273 | $272;
												$274 = ($260|0)<($mean_height$2|0);
												$or$cond158 = $263 & $274;
												$or$cond160 = $or$cond158 | $or$cond157;
												if ($or$cond160) {
													$275 = HEAP32[$11>>2]|0;
													$276 = HEAP32[$22>>2]|0;
													$277 = ($275|0)==($276|0);
													if ($277) {
														__THREW__ = 0;
														invoke_vii(70,($pending_short|0),($p|0));
														$280 = __THREW__; __THREW__ = 0;
														$281 = $280&1;
														if ($281) {
															label = 37;
															break L4;
														} else {
															break;
														}
													} else {
														HEAP32[$275>>2] = $245;
														$278 = HEAP32[$11>>2]|0;
														$279 = ((($278)) + 4|0);
														HEAP32[$11>>2] = $279;
														break;
													}
												} else {
													$282 = HEAP32[$7>>2]|0;
													$283 = HEAP32[$23>>2]|0;
													$284 = ($282|0)==($283|0);
													if ($284) {
														__THREW__ = 0;
														invoke_vii(70,($pending|0),($p|0));
														$287 = __THREW__; __THREW__ = 0;
														$288 = $287&1;
														if ($288) {
															label = 37;
															break L4;
														} else {
															break;
														}
													} else {
														HEAP32[$282>>2] = $245;
														$285 = HEAP32[$7>>2]|0;
														$286 = ((($285)) + 4|0);
														HEAP32[$7>>2] = $286;
														break;
													}
												}
											}
										} while(0);
										$289 = (($i4$0427) + 1)|0;
										$290 = ($289>>>0)<($$lcssa307>>>0);
										if ($290) {
											$i4$0427 = $289;
										} else {
											break;
										}
									}
									$$pre499 = HEAP32[$height_distrib>>2]|0;
									$226 = $$pre499;
								} else {
									$226 = $1544;
								}
								$227 = ($226|0)==(0|0);
								$228 = $226;
								if (!($227)) {
									$229 = HEAP32[$19>>2]|0;
									$230 = ($229|0)==($226|0);
									if (!($230)) {
										$scevgep$i$i$i107 = ((($229)) + -4|0);
										$231 = $scevgep$i$i$i107;
										$232 = (($231) - ($228))|0;
										$233 = $232 >>> 2;
										$234 = $233 ^ -1;
										$scevgep4$i$i$i108 = (($229) + ($234<<2)|0);
										HEAP32[$19>>2] = $scevgep4$i$i$i108;
									}
									__ZdlPv($226);
								}
							}
							$291 = HEAP32[$13>>2]|0;
							$292 = HEAP32[$blobp_vector>>2]|0;
							$293 = (($291) - ($292))|0;
							$294 = $293 >> 2;
							$295 = ($$lcssa307>>>0)<($294>>>0);
							$296 = $292;
							if ($295) {
								$29 = $292;$30 = $291;$34 = $296;$end$0431 = $$lcssa307;
							} else {
								$$lcssa863 = $291;$$lcssa864 = $292;$$lcssa865 = $296;
								label = 4;
								break;
							}
						}
						L86: do {
							if ((label|0) == 4) {
								$24 = $$lcssa863;
								$$pre500 = HEAP32[$pending>>2]|0;
								$$pre501 = HEAP32[$7>>2]|0;
								$25 = ($$pre500|0)==($$pre501|0);
								if ($25) {
									$26 = ($$lcssa863|0)==($$lcssa864|0);
									$$cast163322 = $$lcssa864;
									if ($26) {
										$$cast163$lcssa = $$cast163322;$$lcssa = $$lcssa864;$297 = $24;
										label = 94;
										break L1;
									} else {
										$$cast163324 = $$cast163322;$1528 = $24;$1529 = $$lcssa864;$1530 = $$lcssa863;$i6$0323 = 0;
									}
									while(1) {
										$303 = (($$cast163324) + ($i6$0323<<2)|0);
										$304 = HEAP32[$303>>2]|0;
										$305 = ($304|0)==(0|0);
										if ($305) {
											$1545 = $1528;$311 = $1529;$312 = $1530;
										} else {
											__THREW__ = 0;
											invoke_vi(72,($304|0));
											$306 = __THREW__; __THREW__ = 0;
											$307 = $306&1;
											if ($307) {
												$$lcssa787 = $304;
												break;
											}
											__ZdlPv($304);
											$$pre518 = HEAP32[$13>>2]|0;
											$$pre519 = HEAP32[$blobp_vector>>2]|0;
											$308 = $$pre518;
											$1545 = $308;$311 = $$pre519;$312 = $$pre518;
										}
										$309 = (($i6$0323) + 1)|0;
										$310 = (($312) - ($311))|0;
										$313 = $310 >> 2;
										$314 = ($309>>>0)<($313>>>0);
										$$cast163 = $311;
										if ($314) {
											$$cast163324 = $$cast163;$1528 = $1545;$1529 = $311;$1530 = $312;$i6$0323 = $309;
										} else {
											$$cast163$lcssa = $$cast163;$$lcssa = $311;$297 = $1545;
											label = 94;
											break L1;
										}
									}
									$315 = ___cxa_find_matching_catch_2()|0;
									$316 = tempRet0;
									__ZdlPv($$lcssa787);
									$$0 = $315;$$09 = $316;
									break;
								}
								$317 = ($24|0)==($$lcssa865|0);
								if (!($317)) {
									$scevgep$i$i$i137 = ((($24)) + -4|0);
									$318 = $scevgep$i$i$i137;
									$319 = (($318) - ($$lcssa864))|0;
									$320 = $319 >>> 2;
									$321 = $320 ^ -1;
									$scevgep4$i$i$i138 = (($24) + ($321<<2)|0);
									HEAP32[$13>>2] = $scevgep4$i$i$i138;
								}
								__THREW__ = 0;
								$322 = (invoke_ii(29,28)|0);
								$323 = __THREW__; __THREW__ = 0;
								$324 = $323&1;
								L101: do {
									if ($324) {
										label = 30;
									} else {
										;HEAP32[$322>>2]=0|0;HEAP32[$322+4>>2]=0|0;HEAP32[$322+8>>2]=0|0;HEAP32[$322+12>>2]=0|0;HEAP32[$322+16>>2]=0|0;HEAP32[$322+20>>2]=0|0;HEAP32[$322+24>>2]=0|0;
										HEAP32[$2>>2] = $322;
										$325 = HEAP32[$5>>2]|0;
										$326 = ((($this)) + 24|0);
										$327 = HEAP32[$326>>2]|0;
										$328 = ($325|0)==($327|0);
										if ($328) {
											__THREW__ = 0;
											invoke_vii(102,($4|0),($2|0));
											$333 = __THREW__; __THREW__ = 0;
											$334 = $333&1;
											if ($334) {
												label = 30;
												break;
											}
											$$pre502 = HEAP32[$5>>2]|0;
											$$pre$phiZ2D = $5;$337 = $$pre502;
										} else {
											$329 = $322;
											HEAP32[$325>>2] = $329;
											$330 = HEAP32[$5>>2]|0;
											$331 = ((($330)) + 4|0);
											HEAP32[$5>>2] = $331;
											$332 = $331;
											$$pre$phiZ2D = $5;$337 = $332;
										}
										$335 = HEAP32[$4>>2]|0;
										$336 = (($337) - ($335))|0;
										$338 = $336 >> 2;
										$339 = (($338) + -1)|0;
										$$cast = $335;
										$340 = (($$cast) + ($339<<2)|0);
										$341 = HEAP32[$340>>2]|0;
										__THREW__ = 0;
										$342 = (invoke_ii(29,40)|0);
										$343 = __THREW__; __THREW__ = 0;
										$344 = $343&1;
										if ($344) {
											label = 30;
										} else {
											$345 = HEAP32[$pending>>2]|0;
											$346 = HEAP32[$345>>2]|0;
											;HEAP32[$342>>2]=HEAP32[$346>>2]|0;HEAP32[$342+4>>2]=HEAP32[$346+4>>2]|0;HEAP32[$342+8>>2]=HEAP32[$346+8>>2]|0;HEAP32[$342+12>>2]=HEAP32[$346+12>>2]|0;
											$347 = ((($342)) + 16|0);
											HEAP32[$347>>2] = 0;
											$348 = ((($342)) + 20|0);
											HEAP32[$348>>2] = 0;
											$349 = ((($342)) + 24|0);
											HEAP32[$349>>2] = 0;
											__THREW__ = 0;
											$350 = (invoke_ii(29,4)|0);
											$351 = __THREW__; __THREW__ = 0;
											$352 = $351&1;
											if ($352) {
												$371 = ___cxa_find_matching_catch_2()|0;
												$372 = tempRet0;
												__ZdlPv($342);
												$$0 = $371;$$09 = $372;
												break L86;
											}
											$353 = $346;
											HEAP32[$347>>2] = $350;
											$354 = ((($350)) + 4|0);
											HEAP32[$349>>2] = $354;
											HEAP32[$350>>2] = $353;
											HEAP32[$348>>2] = $354;
											$355 = ((($342)) + 28|0);
											HEAP32[$355>>2] = 0;
											$356 = ((($342)) + 32|0);
											HEAP32[$356>>2] = 0;
											$357 = ((($342)) + 36|0);
											HEAP32[$357>>2] = 0;
											__THREW__ = 0;
											(invoke_iiii(103,($341|0),($342|0),0)|0);
											$358 = __THREW__; __THREW__ = 0;
											$359 = $358&1;
											if ($359) {
												label = 30;
											} else {
												$360 = HEAP32[$7>>2]|0;
												$361 = HEAP32[$pending>>2]|0;
												$362 = (($360) - ($361))|0;
												$363 = $362 >> 2;
												$364 = ($363>>>0)>(1);
												L113: do {
													if ($364) {
														$$in536 = $361;$current_line$0398 = $339;$i7$0397 = 1;
														L115: while(1) {
															$373 = $$in536;
															$374 = (($373) + ($i7$0397<<2)|0);
															$375 = HEAP32[$374>>2]|0;
															$376 = (($current_line$0398) + -2)|0;
															$377 = ($339|0)<($376|0);
															$378 = $377 ? $376 : $339;
															$379 = ((($375)) + 12|0);
															$$pre503 = HEAP32[$4>>2]|0;
															$381 = $$pre503;$current_line$1 = $378;
															while(1) {
																$380 = (($381) + ($current_line$1<<2)|0);
																$382 = HEAP32[$380>>2]|0;
																$383 = ((($382)) + 16|0);
																$384 = ((($382)) + 20|0);
																$385 = HEAP32[$384>>2]|0;
																$386 = HEAP32[$383>>2]|0;
																$387 = (($385) - ($386))|0;
																$388 = $387 >> 2;
																$cr$0$ph = 0;$j$0$in$ph = $388;
																L119: while(1) {
																	$389 = ($j$0$in$ph|0)>(0);
																	if ($389) {
																		$j$0393$in = $j$0$in$ph;
																	} else {
																		$1547 = 0;$cl$2145 = 0;$cr$0$ph845 = $cr$0$ph;
																		break;
																	}
																	while(1) {
																		$j$0393 = (($j$0393$in) + -1)|0;
																		$390 = HEAP32[$4>>2]|0;
																		$391 = (($390) + ($current_line$1<<2)|0);
																		$392 = HEAP32[$391>>2]|0;
																		__THREW__ = 0;
																		$393 = (invoke_iii(104,($392|0),($j$0393|0))|0);
																		$394 = __THREW__; __THREW__ = 0;
																		$395 = $394&1;
																		if ($395) {
																			label = 26;
																			break L115;
																		}
																		__THREW__ = 0;
																		$396 = (invoke_iii(105,($375|0),($393|0))|0);
																		$397 = __THREW__; __THREW__ = 0;
																		$398 = $397&1;
																		if ($398) {
																			label = 26;
																			break L115;
																		}
																		if (!($396)) {
																			__THREW__ = 0;
																			$400 = (invoke_iii(105,($393|0),($375|0))|0);
																			$401 = __THREW__; __THREW__ = 0;
																			$402 = $401&1;
																			if ($402) {
																				label = 26;
																				break L115;
																			}
																			if (!($400)) {
																				$$lcssa835 = $393;$$lcssa838 = $393;$j$0393$lcssa833 = $j$0393;
																				break;
																			}
																		}
																		$399 = ($j$0393$in|0)>(1);
																		if ($399) {
																			$j$0393$in = $j$0393;
																		} else {
																			$1547 = 0;$cl$2145 = 0;$cr$0$ph845 = $cr$0$ph;
																			break L119;
																		}
																	}
																	__THREW__ = 0;
																	$403 = (invoke_iii(106,($375|0),($$lcssa838|0))|0);
																	$404 = __THREW__; __THREW__ = 0;
																	$405 = $404&1;
																	if ($405) {
																		label = 27;
																		break L115;
																	}
																	if ($403) {
																		$cr$0$ph = $$lcssa835;$j$0$in$ph = $j$0393$lcssa833;
																	} else {
																		$$lcssa835$lcssa837 = $$lcssa835;$$lcssa838$lcssa840 = $$lcssa838;$cr$0$ph$lcssa843 = $cr$0$ph;
																		label = 127;
																		break;
																	}
																}
																if ((label|0) == 127) {
																	label = 0;
																	__THREW__ = 0;
																	$406 = (invoke_iii(107,($$lcssa838$lcssa840|0),($375|0))|0);
																	$407 = __THREW__; __THREW__ = 0;
																	$408 = $407&1;
																	if ($408) {
																		label = 28;
																		break L115;
																	}
																	if ($406) {
																		$current_line$1$lcssa848 = $current_line$1;
																		label = 136;
																		break;
																	}
																	__THREW__ = 0;
																	$409 = (invoke_iii(107,($375|0),($$lcssa838$lcssa840|0))|0);
																	$410 = __THREW__; __THREW__ = 0;
																	$411 = $410&1;
																	if ($411) {
																		label = 28;
																		break L115;
																	}
																	if ($409) {
																		$current_line$1$lcssa848 = $current_line$1;
																		label = 136;
																		break;
																	} else {
																		$1547 = 1;$cl$2145 = $$lcssa835$lcssa837;$cr$0$ph845 = $cr$0$ph$lcssa843;
																	}
																}
																$412 = ($cr$0$ph845|0)!=(0|0);
																if ($412) {
																	__THREW__ = 0;
																	$413 = (invoke_iii(107,($cr$0$ph845|0),($375|0))|0);
																	$414 = __THREW__; __THREW__ = 0;
																	$415 = $414&1;
																	if ($415) {
																		label = 28;
																		break L115;
																	}
																	if ($413) {
																		$current_line$1$lcssa848 = $current_line$1;
																		label = 136;
																		break;
																	}
																	__THREW__ = 0;
																	$416 = (invoke_iii(107,($375|0),($cr$0$ph845|0))|0);
																	$417 = __THREW__; __THREW__ = 0;
																	$418 = $417&1;
																	if ($418) {
																		label = 28;
																		break L115;
																	}
																	if ($416) {
																		$current_line$1$lcssa848 = $current_line$1;
																		label = 136;
																		break;
																	}
																}
																if ($1547) {
																	$440 = ((($cl$2145)) + 4|0);
																	$441 = HEAP32[$440>>2]|0;
																	$442 = HEAP32[$379>>2]|0;
																	$443 = ($441|0)>($442|0);
																	if ($443) {
																		$current_line$1$lcssa849 = $current_line$1;
																		label = 144;
																		break;
																	}
																}
																if ($412) {
																	$444 = ((($cr$0$ph845)) + 4|0);
																	$445 = HEAP32[$444>>2]|0;
																	$446 = HEAP32[$379>>2]|0;
																	$447 = ($445|0)>($446|0);
																	if ($447) {
																		$current_line$1$lcssa849 = $current_line$1;
																		label = 144;
																		break;
																	}
																}
																if ($1547) {
																	__THREW__ = 0;
																	$477 = (invoke_iii(109,($cl$2145|0),($375|0))|0);
																	$478 = __THREW__; __THREW__ = 0;
																	$479 = $478&1;
																	if ($479) {
																		label = 28;
																		break L115;
																	}
																	$480 = ($477|0)>(5);
																	if ($480) {
																		$current_line$1$lcssa850 = $current_line$1;
																		label = 156;
																		break;
																	}
																}
																if ($412) {
																	__THREW__ = 0;
																	$481 = (invoke_iii(109,($cr$0$ph845|0),($375|0))|0);
																	$482 = __THREW__; __THREW__ = 0;
																	$483 = $482&1;
																	if ($483) {
																		label = 28;
																		break L115;
																	}
																	$484 = ($481|0)>(5);
																	if ($484) {
																		$current_line$1$lcssa850 = $current_line$1;
																		label = 156;
																		break;
																	}
																}
																$506 = (($current_line$1) + 1)|0;
																$507 = HEAP32[$$pre$phiZ2D>>2]|0;
																$508 = HEAP32[$4>>2]|0;
																$509 = (($507) - ($508))|0;
																$510 = $509 >> 2;
																$511 = ($506|0)<($510|0);
																$512 = $508;
																if ($511) {
																	$381 = $512;$current_line$1 = $506;
																} else {
																	$$lcssa852 = $507;
																	label = 161;
																	break;
																}
															}
															if ((label|0) == 136) {
																label = 0;
																$419 = HEAP32[$4>>2]|0;
																$420 = (($419) + ($current_line$1$lcssa848<<2)|0);
																$421 = HEAP32[$420>>2]|0;
																__THREW__ = 0;
																$422 = (invoke_ii(29,40)|0);
																$423 = __THREW__; __THREW__ = 0;
																$424 = $423&1;
																if ($424) {
																	label = 29;
																	break;
																}
																;HEAP32[$422>>2]=HEAP32[$375>>2]|0;HEAP32[$422+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$422+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$422+12>>2]=HEAP32[$375+12>>2]|0;
																$425 = ((($422)) + 16|0);
																HEAP32[$425>>2] = 0;
																$426 = ((($422)) + 20|0);
																HEAP32[$426>>2] = 0;
																$427 = ((($422)) + 24|0);
																HEAP32[$427>>2] = 0;
																__THREW__ = 0;
																$428 = (invoke_ii(29,4)|0);
																$429 = __THREW__; __THREW__ = 0;
																$430 = $429&1;
																if ($430) {
																	$$lcssa856 = $422;
																	label = 139;
																	break;
																}
																$431 = $375;
																HEAP32[$425>>2] = $428;
																$432 = ((($428)) + 4|0);
																HEAP32[$427>>2] = $432;
																HEAP32[$428>>2] = $431;
																HEAP32[$426>>2] = $432;
																$433 = ((($422)) + 28|0);
																HEAP32[$433>>2] = 0;
																$434 = ((($422)) + 32|0);
																HEAP32[$434>>2] = 0;
																$435 = ((($422)) + 36|0);
																HEAP32[$435>>2] = 0;
																__THREW__ = 0;
																(invoke_iiii(103,($421|0),($422|0),0)|0);
																$436 = __THREW__; __THREW__ = 0;
																$437 = $436&1;
																if ($437) {
																	label = 29;
																	break;
																} else {
																	$current_line$2$ph = $current_line$1$lcssa848;
																}
															}
															else if ((label|0) == 144) {
																label = 0;
																$448 = HEAP32[$4>>2]|0;
																$449 = (($448) + ($current_line$1$lcssa849<<2)|0);
																$450 = $449;
																HEAP32[$0>>2] = $450;
																__THREW__ = 0;
																$451 = (invoke_ii(29,28)|0);
																$452 = __THREW__; __THREW__ = 0;
																$453 = $452&1;
																if ($453) {
																	label = 29;
																	break;
																}
																;HEAP32[$451>>2]=0|0;HEAP32[$451+4>>2]=0|0;HEAP32[$451+8>>2]=0|0;HEAP32[$451+12>>2]=0|0;HEAP32[$451+16>>2]=0|0;HEAP32[$451+20>>2]=0|0;HEAP32[$451+24>>2]=0|0;
																HEAP32[$1>>2] = $451;
																__THREW__ = 0;
																;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
																(invoke_iiii(108,($4|0),($$byval_copy|0),($1|0))|0);
																$454 = __THREW__; __THREW__ = 0;
																$455 = $454&1;
																if ($455) {
																	label = 29;
																	break;
																}
																$456 = HEAP32[$4>>2]|0;
																$457 = (($456) + ($current_line$1$lcssa849<<2)|0);
																$458 = HEAP32[$457>>2]|0;
																__THREW__ = 0;
																$459 = (invoke_ii(29,40)|0);
																$460 = __THREW__; __THREW__ = 0;
																$461 = $460&1;
																if ($461) {
																	label = 29;
																	break;
																}
																;HEAP32[$459>>2]=HEAP32[$375>>2]|0;HEAP32[$459+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$459+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$459+12>>2]=HEAP32[$375+12>>2]|0;
																$462 = ((($459)) + 16|0);
																HEAP32[$462>>2] = 0;
																$463 = ((($459)) + 20|0);
																HEAP32[$463>>2] = 0;
																$464 = ((($459)) + 24|0);
																HEAP32[$464>>2] = 0;
																__THREW__ = 0;
																$465 = (invoke_ii(29,4)|0);
																$466 = __THREW__; __THREW__ = 0;
																$467 = $466&1;
																if ($467) {
																	$$lcssa855 = $459;
																	label = 149;
																	break;
																}
																$468 = $375;
																HEAP32[$462>>2] = $465;
																$469 = ((($465)) + 4|0);
																HEAP32[$464>>2] = $469;
																HEAP32[$465>>2] = $468;
																HEAP32[$463>>2] = $469;
																$470 = ((($459)) + 28|0);
																HEAP32[$470>>2] = 0;
																$471 = ((($459)) + 32|0);
																HEAP32[$471>>2] = 0;
																$472 = ((($459)) + 36|0);
																HEAP32[$472>>2] = 0;
																__THREW__ = 0;
																(invoke_iiii(103,($458|0),($459|0),0)|0);
																$473 = __THREW__; __THREW__ = 0;
																$474 = $473&1;
																if ($474) {
																	label = 29;
																	break;
																} else {
																	$current_line$2$ph = $current_line$1$lcssa849;
																}
															}
															else if ((label|0) == 156) {
																label = 0;
																$485 = HEAP32[$4>>2]|0;
																$486 = (($485) + ($current_line$1$lcssa850<<2)|0);
																$487 = HEAP32[$486>>2]|0;
																__THREW__ = 0;
																$488 = (invoke_ii(29,40)|0);
																$489 = __THREW__; __THREW__ = 0;
																$490 = $489&1;
																if ($490) {
																	label = 29;
																	break;
																}
																;HEAP32[$488>>2]=HEAP32[$375>>2]|0;HEAP32[$488+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$488+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$488+12>>2]=HEAP32[$375+12>>2]|0;
																$491 = ((($488)) + 16|0);
																HEAP32[$491>>2] = 0;
																$492 = ((($488)) + 20|0);
																HEAP32[$492>>2] = 0;
																$493 = ((($488)) + 24|0);
																HEAP32[$493>>2] = 0;
																__THREW__ = 0;
																$494 = (invoke_ii(29,4)|0);
																$495 = __THREW__; __THREW__ = 0;
																$496 = $495&1;
																if ($496) {
																	$$lcssa854 = $488;
																	label = 159;
																	break;
																}
																$497 = $375;
																HEAP32[$491>>2] = $494;
																$498 = ((($494)) + 4|0);
																HEAP32[$493>>2] = $498;
																HEAP32[$494>>2] = $497;
																HEAP32[$492>>2] = $498;
																$499 = ((($488)) + 28|0);
																HEAP32[$499>>2] = 0;
																$500 = ((($488)) + 32|0);
																HEAP32[$500>>2] = 0;
																$501 = ((($488)) + 36|0);
																HEAP32[$501>>2] = 0;
																__THREW__ = 0;
																(invoke_iiii(103,($487|0),($488|0),0)|0);
																$502 = __THREW__; __THREW__ = 0;
																$503 = $502&1;
																if ($503) {
																	label = 29;
																	break;
																} else {
																	$current_line$2$ph = $current_line$1$lcssa850;
																}
															}
															else if ((label|0) == 161) {
																label = 0;
																__THREW__ = 0;
																$513 = (invoke_ii(29,28)|0);
																$514 = __THREW__; __THREW__ = 0;
																$515 = $514&1;
																if ($515) {
																	label = 29;
																	break;
																}
																$516 = $$lcssa852;
																;HEAP32[$513>>2]=0|0;HEAP32[$513+4>>2]=0|0;HEAP32[$513+8>>2]=0|0;HEAP32[$513+12>>2]=0|0;HEAP32[$513+16>>2]=0|0;HEAP32[$513+20>>2]=0|0;HEAP32[$513+24>>2]=0|0;
																HEAP32[$3>>2] = $513;
																$517 = HEAP32[$326>>2]|0;
																$518 = ($516|0)==($517|0);
																if ($518) {
																	__THREW__ = 0;
																	invoke_vii(102,($4|0),($3|0));
																	$524 = __THREW__; __THREW__ = 0;
																	$525 = $524&1;
																	if ($525) {
																		label = 29;
																		break;
																	}
																	$$pre504 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$528 = $$pre504;
																} else {
																	$519 = $513;
																	$520 = $$lcssa852;
																	HEAP32[$520>>2] = $519;
																	$521 = HEAP32[$5>>2]|0;
																	$522 = ((($521)) + 4|0);
																	HEAP32[$5>>2] = $522;
																	$523 = $522;
																	$528 = $523;
																}
																$526 = HEAP32[$4>>2]|0;
																$527 = (($528) - ($526))|0;
																$529 = $527 >> 2;
																$530 = (($529) + -1)|0;
																$$cast162 = $526;
																$531 = (($$cast162) + ($530<<2)|0);
																$532 = HEAP32[$531>>2]|0;
																__THREW__ = 0;
																$533 = (invoke_ii(29,40)|0);
																$534 = __THREW__; __THREW__ = 0;
																$535 = $534&1;
																if ($535) {
																	label = 29;
																	break;
																}
																;HEAP32[$533>>2]=HEAP32[$375>>2]|0;HEAP32[$533+4>>2]=HEAP32[$375+4>>2]|0;HEAP32[$533+8>>2]=HEAP32[$375+8>>2]|0;HEAP32[$533+12>>2]=HEAP32[$375+12>>2]|0;
																$536 = ((($533)) + 16|0);
																HEAP32[$536>>2] = 0;
																$537 = ((($533)) + 20|0);
																HEAP32[$537>>2] = 0;
																$538 = ((($533)) + 24|0);
																HEAP32[$538>>2] = 0;
																__THREW__ = 0;
																$539 = (invoke_ii(29,4)|0);
																$540 = __THREW__; __THREW__ = 0;
																$541 = $540&1;
																if ($541) {
																	$$lcssa853 = $533;
																	label = 169;
																	break;
																}
																$542 = $375;
																HEAP32[$536>>2] = $539;
																$543 = ((($539)) + 4|0);
																HEAP32[$538>>2] = $543;
																HEAP32[$539>>2] = $542;
																HEAP32[$537>>2] = $543;
																$544 = ((($533)) + 28|0);
																HEAP32[$544>>2] = 0;
																$545 = ((($533)) + 32|0);
																HEAP32[$545>>2] = 0;
																$546 = ((($533)) + 36|0);
																HEAP32[$546>>2] = 0;
																__THREW__ = 0;
																(invoke_iiii(103,($532|0),($533|0),0)|0);
																$547 = __THREW__; __THREW__ = 0;
																$548 = $547&1;
																if ($548) {
																	label = 29;
																	break;
																} else {
																	$current_line$2$ph = $530;
																}
															}
															$551 = (($i7$0397) + 1)|0;
															$552 = HEAP32[$7>>2]|0;
															$553 = HEAP32[$pending>>2]|0;
															$554 = (($552) - ($553))|0;
															$555 = $554 >> 2;
															$556 = ($551>>>0)<($555>>>0);
															if ($556) {
																$$in536 = $553;$current_line$0398 = $current_line$2$ph;$i7$0397 = $551;
															} else {
																break L113;
															}
														}
														if ((label|0) == 26) {
															$78 = ___cxa_find_matching_catch_2()|0;
															$79 = tempRet0;
															$eh$lpad$body$index27Z2D = $79;$eh$lpad$body$indexZ2D = $78;
															break L101;
														}
														else if ((label|0) == 27) {
															$80 = ___cxa_find_matching_catch_2()|0;
															$81 = tempRet0;
															$eh$lpad$body$index27Z2D = $81;$eh$lpad$body$indexZ2D = $80;
															break L101;
														}
														else if ((label|0) == 28) {
															$82 = ___cxa_find_matching_catch_2()|0;
															$83 = tempRet0;
															$eh$lpad$body$index27Z2D = $83;$eh$lpad$body$indexZ2D = $82;
															break L101;
														}
														else if ((label|0) == 29) {
															$84 = ___cxa_find_matching_catch_2()|0;
															$85 = tempRet0;
															$eh$lpad$body$index27Z2D = $85;$eh$lpad$body$indexZ2D = $84;
															break L101;
														}
														else if ((label|0) == 139) {
															$438 = ___cxa_find_matching_catch_2()|0;
															$439 = tempRet0;
															__ZdlPv($$lcssa856);
															$$0 = $438;$$09 = $439;
															break L86;
														}
														else if ((label|0) == 149) {
															$475 = ___cxa_find_matching_catch_2()|0;
															$476 = tempRet0;
															__ZdlPv($$lcssa855);
															$$0 = $475;$$09 = $476;
															break L86;
														}
														else if ((label|0) == 159) {
															$504 = ___cxa_find_matching_catch_2()|0;
															$505 = tempRet0;
															__ZdlPv($$lcssa854);
															$$0 = $504;$$09 = $505;
															break L86;
														}
														else if ((label|0) == 169) {
															$549 = ___cxa_find_matching_catch_2()|0;
															$550 = tempRet0;
															__ZdlPv($$lcssa853);
															$$0 = $549;$$09 = $550;
															break L86;
														}
													}
												} while(0);
												$365 = HEAP32[$$pre$phiZ2D>>2]|0;
												$366 = HEAP32[$4>>2]|0;
												$367 = (($365) - ($366))|0;
												$368 = ($367|0)>(0);
												L189: do {
													if ($368) {
														$369 = $366;
														$370 = $367 >> 2;
														$1546 = $365;$564 = $369;$i9$0389$in = $370;
														while(1) {
															$i9$0389 = (($i9$0389$in) + -1)|0;
															$563 = (($564) + ($i9$0389<<2)|0);
															$565 = HEAP32[$563>>2]|0;
															$566 = ((($565)) + 16|0);
															$567 = ((($565)) + 20|0);
															$568 = HEAP32[$567>>2]|0;
															$569 = HEAP32[$566>>2]|0;
															$570 = ($568|0)==($569|0);
															if ($570) {
																$572 = ($565|0)==(0|0);
																if ($572) {
																	$576 = $564;$580 = $1546;
																} else {
																	__THREW__ = 0;
																	invoke_vi(111,($565|0));
																	$573 = __THREW__; __THREW__ = 0;
																	$574 = $573&1;
																	if ($574) {
																		$$lcssa831 = $565;
																		break;
																	}
																	__ZdlPv($565);
																	$$pre$i91 = HEAP32[$4>>2]|0;
																	$$pre506 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$576 = $$pre$i91;$580 = $$pre506;
																}
																$575 = (($576) + ($i9$0389<<2)|0);
																$577 = ((($575)) + 4|0);
																$578 = $577;
																$579 = (($580) - ($578))|0;
																$581 = $579 >> 2;
																_memmove(($575|0),($577|0),($579|0))|0;
																$582 = (($575) + ($581<<2)|0);
																$583 = HEAP32[$5>>2]|0;
																$584 = ($583|0)==($582|0);
																$585 = $583;
																if ($584) {
																	$1548 = $585;
																} else {
																	$__new_last2$i$i$i$i92 = $582;
																	$scevgep$i$i$i$i93 = ((($583)) + -4|0);
																	$586 = $scevgep$i$i$i$i93;
																	$587 = (($586) - ($__new_last2$i$i$i$i92))|0;
																	$588 = $587 >>> 2;
																	$589 = $588 ^ -1;
																	$scevgep4$i$i$i$i94 = (($583) + ($589<<2)|0);
																	HEAP32[$5>>2] = $scevgep4$i$i$i$i94;
																	$590 = $scevgep4$i$i$i$i94;
																	$1548 = $590;
																}
															} else {
																$1548 = $1546;
															}
															$571 = ($i9$0389$in|0)>(1);
															if (!($571)) {
																break L189;
															}
															$$pre505 = HEAP32[$4>>2]|0;
															$1546 = $1548;$564 = $$pre505;$i9$0389$in = $i9$0389;
														}
														$591 = ___cxa_find_matching_catch_2()|0;
														$592 = tempRet0;
														__ZdlPv($$lcssa831);
														$eh$lpad$body$index27Z2D = $592;$eh$lpad$body$indexZ2D = $591;
														break L101;
													}
												} while(0);
												__THREW__ = 0;
												invoke_vi(110,($4|0));
												$557 = __THREW__; __THREW__ = 0;
												$558 = $557&1;
												if ($558) {
													label = 30;
												} else {
													$559 = HEAP32[$$pre$phiZ2D>>2]|0;
													$560 = HEAP32[$4>>2]|0;
													$561 = (($559) - ($560))|0;
													$562 = ($561|0)>(0);
													L205: do {
														if ($562) {
															$$in535 = $560;$i10$0386 = 0;
															while(1) {
																$596 = $$in535;
																$597 = (($596) + ($i10$0386<<2)|0);
																$598 = HEAP32[$597>>2]|0;
																__THREW__ = 0;
																invoke_vi(112,($598|0));
																$599 = __THREW__; __THREW__ = 0;
																$600 = $599&1;
																if ($600) {
																	break;
																}
																$601 = (($i10$0386) + 1)|0;
																$602 = HEAP32[$$pre$phiZ2D>>2]|0;
																$603 = HEAP32[$4>>2]|0;
																$604 = (($602) - ($603))|0;
																$605 = $604 >> 2;
																$606 = ($601|0)<($605|0);
																if ($606) {
																	$$in535 = $603;$i10$0386 = $601;
																} else {
																	break L205;
																}
															}
															$76 = ___cxa_find_matching_catch_2()|0;
															$77 = tempRet0;
															$eh$lpad$body$index27Z2D = $77;$eh$lpad$body$indexZ2D = $76;
															break L101;
														}
													} while(0);
													$593 = HEAP32[$9>>2]|0;
													$594 = HEAP32[$pending_tall>>2]|0;
													$595 = ($593|0)==($594|0);
													L211: do {
														if (!($595)) {
															$$in = $594;$current_line$3384 = 0;$i11$0383 = 0;
															L212: while(1) {
																$610 = $$in;
																$611 = (($610) + ($i11$0383<<2)|0);
																$612 = HEAP32[$611>>2]|0;
																$613 = ($current_line$3384|0)>(0);
																L214: do {
																	if ($613) {
																		$614 = ((($612)) + 12|0);
																		$615 = ((($612)) + 8|0);
																		$current_line$4373 = $current_line$3384;
																		while(1) {
																			$616 = HEAP32[$614>>2]|0;
																			$617 = HEAP32[$4>>2]|0;
																			$618 = (($617) + ($current_line$4373<<2)|0);
																			$619 = HEAP32[$618>>2]|0;
																			$620 = HEAP32[$612>>2]|0;
																			$621 = HEAP32[$615>>2]|0;
																			$622 = (($621) + ($620))|0;
																			$623 = (($622|0) / 2)&-1;
																			__THREW__ = 0;
																			$624 = (invoke_iii(113,($619|0),($623|0))|0);
																			$625 = __THREW__; __THREW__ = 0;
																			$626 = $625&1;
																			if ($626) {
																				label = 23;
																				break L212;
																			}
																			$627 = ($616|0)<($624|0);
																			if (!($627)) {
																				$current_line$4$lcssa = $current_line$4373;
																				break L214;
																			}
																			$636 = (($current_line$4373) + -1)|0;
																			$637 = ($current_line$4373|0)>(1);
																			if ($637) {
																				$current_line$4373 = $636;
																			} else {
																				$current_line$4$lcssa = $636;
																				break;
																			}
																		}
																	} else {
																		$current_line$4$lcssa = $current_line$3384;
																	}
																} while(0);
																$628 = HEAP32[$$pre$phiZ2D>>2]|0;
																$629 = HEAP32[$4>>2]|0;
																$630 = (($628) - ($629))|0;
																$631 = $630 >> 2;
																$632 = ($current_line$4$lcssa|0)<($631|0);
																$633 = $629;
																if ($632) {
																	$634 = ((($612)) + 4|0);
																	$635 = ((($612)) + 8|0);
																	$640 = $633;$current_line$5379 = $current_line$4$lcssa;
																	while(1) {
																		$638 = HEAP32[$634>>2]|0;
																		$639 = (($640) + ($current_line$5379<<2)|0);
																		$641 = HEAP32[$639>>2]|0;
																		$642 = HEAP32[$612>>2]|0;
																		$643 = HEAP32[$635>>2]|0;
																		$644 = (($643) + ($642))|0;
																		$645 = (($644|0) / 2)&-1;
																		__THREW__ = 0;
																		$646 = (invoke_iii(113,($641|0),($645|0))|0);
																		$647 = __THREW__; __THREW__ = 0;
																		$648 = $647&1;
																		if ($648) {
																			label = 22;
																			break L212;
																		}
																		$649 = ($638|0)>($646|0);
																		if (!($649)) {
																			$current_line$5379$lcssa816 = $current_line$5379;
																			label = 195;
																			break;
																		}
																		$650 = (($current_line$5379) + 1)|0;
																		$651 = HEAP32[$$pre$phiZ2D>>2]|0;
																		$652 = HEAP32[$4>>2]|0;
																		$653 = (($651) - ($652))|0;
																		$654 = $653 >> 2;
																		$655 = ($650|0)<($654|0);
																		$656 = $652;
																		if ($655) {
																			$640 = $656;$current_line$5379 = $650;
																		} else {
																			$$pre507 = $651;$$pre508 = $652;$current_line$5$lcssa$ph = $650;
																			break;
																		}
																	}
																	if ((label|0) == 195) {
																		label = 0;
																		$$pre507$pre = HEAP32[$$pre$phiZ2D>>2]|0;
																		$$pre508$pre = HEAP32[$4>>2]|0;
																		$$pre507 = $$pre507$pre;$$pre508 = $$pre508$pre;$current_line$5$lcssa$ph = $current_line$5379$lcssa816;
																	}
																	$657 = $$pre508;
																	$659 = $$pre508;$660 = $$pre507;$670 = $657;$current_line$5$lcssa = $current_line$5$lcssa$ph;
																} else {
																	$659 = $629;$660 = $628;$670 = $633;$current_line$5$lcssa = $current_line$4$lcssa;
																}
																$658 = (($660) - ($659))|0;
																$661 = $658 >> 2;
																$662 = ($current_line$5$lcssa|0)<($661|0);
																L231: do {
																	if ($662) {
																		$669 = (($670) + ($current_line$5$lcssa<<2)|0);
																		$671 = HEAP32[$669>>2]|0;
																		$672 = ((($671)) + 12|0);
																		$673 = HEAP32[$672>>2]|0;
																		__THREW__ = 0;
																		$674 = (invoke_ii(114,($671|0))|0);
																		$675 = __THREW__; __THREW__ = 0;
																		$676 = $675&1;
																		if ($676) {
																			label = 24;
																			break L212;
																		}
																		$677 = ((($612)) + 12|0);
																		$678 = HEAP32[$677>>2]|0;
																		$679 = ((($612)) + 4|0);
																		$680 = HEAP32[$679>>2]|0;
																		$681 = (($678) + 1)|0;
																		$682 = (($681) - ($680))|0;
																		$683 = ($674*3)|0;
																		$684 = ($682|0)>($683|0);
																		do {
																			if (!($684)) {
																				$685 = $674 << 1;
																				$686 = ($682|0)>($685|0);
																				if ($686) {
																					__THREW__ = 0;
																					$687 = (invoke_iii(104,($671|0),($673|0))|0);
																					$688 = __THREW__; __THREW__ = 0;
																					$689 = $688&1;
																					if ($689) {
																						label = 24;
																						break L212;
																					}
																					$690 = HEAP32[$687>>2]|0;
																					$691 = HEAP32[$612>>2]|0;
																					$692 = ($690|0)<($691|0);
																					if (!($692)) {
																						break;
																					}
																				}
																				__THREW__ = 0;
																				$693 = (invoke_ii(29,40)|0);
																				$694 = __THREW__; __THREW__ = 0;
																				$695 = $694&1;
																				if ($695) {
																					label = 24;
																					break L212;
																				}
																				;HEAP32[$693>>2]=HEAP32[$612>>2]|0;HEAP32[$693+4>>2]=HEAP32[$612+4>>2]|0;HEAP32[$693+8>>2]=HEAP32[$612+8>>2]|0;HEAP32[$693+12>>2]=HEAP32[$612+12>>2]|0;
																				$696 = ((($693)) + 16|0);
																				HEAP32[$696>>2] = 0;
																				$697 = ((($693)) + 20|0);
																				HEAP32[$697>>2] = 0;
																				$698 = ((($693)) + 24|0);
																				HEAP32[$698>>2] = 0;
																				__THREW__ = 0;
																				$699 = (invoke_ii(29,4)|0);
																				$700 = __THREW__; __THREW__ = 0;
																				$701 = $700&1;
																				if ($701) {
																					$$lcssa829 = $693;
																					label = 211;
																					break L212;
																				}
																				$702 = $612;
																				HEAP32[$696>>2] = $699;
																				$703 = ((($699)) + 4|0);
																				HEAP32[$698>>2] = $703;
																				HEAP32[$699>>2] = $702;
																				HEAP32[$697>>2] = $703;
																				$704 = ((($693)) + 28|0);
																				HEAP32[$704>>2] = 0;
																				$705 = ((($693)) + 32|0);
																				HEAP32[$705>>2] = 0;
																				$706 = ((($693)) + 36|0);
																				HEAP32[$706>>2] = 0;
																				__THREW__ = 0;
																				(invoke_iiii(103,($671|0),($693|0),0)|0);
																				$707 = __THREW__; __THREW__ = 0;
																				$708 = $707&1;
																				if ($708) {
																					label = 24;
																					break L212;
																				} else {
																					$current_line$6 = $current_line$5$lcssa;
																					break L231;
																				}
																			}
																		} while(0);
																		$711 = ((($671)) + 16|0);
																		$712 = ((($671)) + 20|0);
																		$713 = HEAP32[$712>>2]|0;
																		$714 = HEAP32[$711>>2]|0;
																		$715 = (($713) - ($714))|0;
																		$716 = $715 >> 2;
																		$717 = ($716|0)==(0);
																		do {
																			if (!($717)) {
																				$718 = (($673) + 1)|0;
																				$719 = (($716) + -1)|0;
																				$720 = ($719|0)<($718|0);
																				$721 = $720 ? $719 : $718;
																				__THREW__ = 0;
																				$722 = (invoke_iii(104,($671|0),($721|0))|0);
																				$723 = __THREW__; __THREW__ = 0;
																				$724 = $723&1;
																				if ($724) {
																					label = 24;
																					break L212;
																				}
																				$725 = HEAP32[$722>>2]|0;
																				$726 = HEAP32[$612>>2]|0;
																				$727 = ((($612)) + 8|0);
																				$728 = HEAP32[$727>>2]|0;
																				$729 = (($728) + ($726))|0;
																				$730 = (($729|0) / 2)&-1;
																				$731 = ($725|0)>($730|0);
																				if ($731) {
																					break;
																				}
																				__THREW__ = 0;
																				invoke_vi(72,($612|0));
																				$750 = __THREW__; __THREW__ = 0;
																				$751 = $750&1;
																				if ($751) {
																					$$lcssa826 = $612;
																					label = 221;
																					break L212;
																				}
																				__ZdlPv($612);
																				$current_line$6 = $current_line$5$lcssa;
																				break L231;
																			}
																		} while(0);
																		__THREW__ = 0;
																		$732 = (invoke_ii(29,40)|0);
																		$733 = __THREW__; __THREW__ = 0;
																		$734 = $733&1;
																		if ($734) {
																			label = 24;
																			break L212;
																		}
																		;HEAP32[$732>>2]=HEAP32[$612>>2]|0;HEAP32[$732+4>>2]=HEAP32[$612+4>>2]|0;HEAP32[$732+8>>2]=HEAP32[$612+8>>2]|0;HEAP32[$732+12>>2]=HEAP32[$612+12>>2]|0;
																		$735 = ((($732)) + 16|0);
																		HEAP32[$735>>2] = 0;
																		$736 = ((($732)) + 20|0);
																		HEAP32[$736>>2] = 0;
																		$737 = ((($732)) + 24|0);
																		HEAP32[$737>>2] = 0;
																		__THREW__ = 0;
																		$738 = (invoke_ii(29,4)|0);
																		$739 = __THREW__; __THREW__ = 0;
																		$740 = $739&1;
																		if ($740) {
																			$$lcssa830 = $732;
																			label = 218;
																			break L212;
																		}
																		$741 = $612;
																		HEAP32[$735>>2] = $738;
																		$742 = ((($738)) + 4|0);
																		HEAP32[$737>>2] = $742;
																		HEAP32[$738>>2] = $741;
																		HEAP32[$736>>2] = $742;
																		$743 = ((($732)) + 28|0);
																		HEAP32[$743>>2] = 0;
																		$744 = ((($732)) + 32|0);
																		HEAP32[$744>>2] = 0;
																		$745 = ((($732)) + 36|0);
																		HEAP32[$745>>2] = 0;
																		__THREW__ = 0;
																		(invoke_iiii(103,($671|0),($732|0),1)|0);
																		$746 = __THREW__; __THREW__ = 0;
																		$747 = $746&1;
																		if ($747) {
																			label = 24;
																			break L212;
																		} else {
																			$current_line$6 = $current_line$5$lcssa;
																		}
																	} else {
																		$663 = (($current_line$5$lcssa) + -1)|0;
																		$664 = ($612|0)==(0|0);
																		if ($664) {
																			$current_line$6 = $663;
																			break;
																		}
																		__THREW__ = 0;
																		invoke_vi(72,($612|0));
																		$665 = __THREW__; __THREW__ = 0;
																		$666 = $665&1;
																		if ($666) {
																			$$lcssa823 = $612;
																			label = 202;
																			break L212;
																		}
																		__ZdlPv($612);
																		$current_line$6 = $663;
																	}
																} while(0);
																$754 = (($i11$0383) + 1)|0;
																$755 = HEAP32[$9>>2]|0;
																$756 = HEAP32[$pending_tall>>2]|0;
																$757 = (($755) - ($756))|0;
																$758 = $757 >> 2;
																$759 = ($754>>>0)<($758>>>0);
																if ($759) {
																	$$in = $756;$current_line$3384 = $current_line$6;$i11$0383 = $754;
																} else {
																	break L211;
																}
															}
															if ((label|0) == 22) {
																$70 = ___cxa_find_matching_catch_2()|0;
																$71 = tempRet0;
																$eh$lpad$body$index27Z2D = $71;$eh$lpad$body$indexZ2D = $70;
																break L101;
															}
															else if ((label|0) == 23) {
																$72 = ___cxa_find_matching_catch_2()|0;
																$73 = tempRet0;
																$eh$lpad$body$index27Z2D = $73;$eh$lpad$body$indexZ2D = $72;
																break L101;
															}
															else if ((label|0) == 24) {
																$74 = ___cxa_find_matching_catch_2()|0;
																$75 = tempRet0;
																$eh$lpad$body$index27Z2D = $75;$eh$lpad$body$indexZ2D = $74;
																break L101;
															}
															else if ((label|0) == 202) {
																$667 = ___cxa_find_matching_catch_2()|0;
																$668 = tempRet0;
																__ZdlPv($$lcssa823);
																$$0 = $667;$$09 = $668;
																break L86;
															}
															else if ((label|0) == 211) {
																$709 = ___cxa_find_matching_catch_2()|0;
																$710 = tempRet0;
																__ZdlPv($$lcssa829);
																$$0 = $709;$$09 = $710;
																break L86;
															}
															else if ((label|0) == 218) {
																$748 = ___cxa_find_matching_catch_2()|0;
																$749 = tempRet0;
																__ZdlPv($$lcssa830);
																$$0 = $748;$$09 = $749;
																break L86;
															}
															else if ((label|0) == 221) {
																$752 = ___cxa_find_matching_catch_2()|0;
																$753 = tempRet0;
																__ZdlPv($$lcssa826);
																$$0 = $752;$$09 = $753;
																break L86;
															}
														}
													} while(0);
													$607 = HEAP32[$11>>2]|0;
													$608 = HEAP32[$pending_short>>2]|0;
													$609 = ($607|0)==($608|0);
													L264: do {
														if (!($609)) {
															$$in533 = $608;$current_line$7370 = 0;$i14$0369 = 0;
															L265: while(1) {
																$768 = $$in533;
																$769 = (($768) + ($i14$0369<<2)|0);
																$770 = HEAP32[$769>>2]|0;
																$771 = ($current_line$7370|0)>(0);
																L267: do {
																	if ($771) {
																		$772 = ((($770)) + 12|0);
																		$773 = ((($770)) + 8|0);
																		$current_line$8356 = $current_line$7370;
																		while(1) {
																			$774 = HEAP32[$772>>2]|0;
																			$775 = HEAP32[$4>>2]|0;
																			$776 = (($775) + ($current_line$8356<<2)|0);
																			$777 = HEAP32[$776>>2]|0;
																			$778 = HEAP32[$770>>2]|0;
																			$779 = HEAP32[$773>>2]|0;
																			$780 = (($779) + ($778))|0;
																			$781 = (($780|0) / 2)&-1;
																			__THREW__ = 0;
																			$782 = (invoke_iii(115,($777|0),($781|0))|0);
																			$783 = __THREW__; __THREW__ = 0;
																			$784 = $783&1;
																			if ($784) {
																				label = 20;
																				break L265;
																			}
																			$785 = ($774|0)<($782|0);
																			if (!($785)) {
																				$current_line$8$lcssa = $current_line$8356;
																				break L267;
																			}
																			$786 = (($current_line$8356) + -1)|0;
																			$787 = ($current_line$8356|0)>(1);
																			if ($787) {
																				$current_line$8356 = $786;
																			} else {
																				$current_line$8$lcssa = $786;
																				break;
																			}
																		}
																	} else {
																		$current_line$8$lcssa = $current_line$7370;
																	}
																} while(0);
																$788 = (($current_line$8$lcssa) + -1)|0;
																$789 = ($788|0)>(0);
																$790 = $789 ? $788 : 0;
																$791 = HEAP32[$$pre$phiZ2D>>2]|0;
																$792 = HEAP32[$4>>2]|0;
																$793 = (($791) - ($792))|0;
																$794 = $793 >> 2;
																$795 = ($current_line$8$lcssa|0)<($794|0);
																$796 = $792;
																if ($795) {
																	$797 = ((($770)) + 4|0);
																	$798 = ((($770)) + 8|0);
																	$801 = $796;$current_line$9363 = $current_line$8$lcssa;
																	while(1) {
																		$799 = HEAP32[$797>>2]|0;
																		$800 = (($801) + ($current_line$9363<<2)|0);
																		$802 = HEAP32[$800>>2]|0;
																		$803 = HEAP32[$770>>2]|0;
																		$804 = HEAP32[$798>>2]|0;
																		$805 = (($804) + ($803))|0;
																		$806 = (($805|0) / 2)&-1;
																		__THREW__ = 0;
																		$807 = (invoke_iii(116,($802|0),($806|0))|0);
																		$808 = __THREW__; __THREW__ = 0;
																		$809 = $808&1;
																		if ($809) {
																			label = 19;
																			break L265;
																		}
																		$810 = ($799|0)>($807|0);
																		if (!($810)) {
																			$current_line$9363$lcssa804 = $current_line$9363;
																			label = 234;
																			break;
																		}
																		$811 = (($current_line$9363) + 1)|0;
																		$812 = HEAP32[$$pre$phiZ2D>>2]|0;
																		$813 = HEAP32[$4>>2]|0;
																		$814 = (($812) - ($813))|0;
																		$815 = $814 >> 2;
																		$816 = ($811|0)<($815|0);
																		$817 = $813;
																		if ($816) {
																			$801 = $817;$current_line$9363 = $811;
																		} else {
																			$$pre509 = $812;$$pre510 = $813;$current_line$9$lcssa$ph = $811;
																			break;
																		}
																	}
																	if ((label|0) == 234) {
																		label = 0;
																		$$pre509$pre = HEAP32[$$pre$phiZ2D>>2]|0;
																		$$pre510$pre = HEAP32[$4>>2]|0;
																		$$pre509 = $$pre509$pre;$$pre510 = $$pre510$pre;$current_line$9$lcssa$ph = $current_line$9363$lcssa804;
																	}
																	$818 = $$pre510;
																	$820 = $$pre510;$821 = $$pre509;$826 = $818;$current_line$9$lcssa = $current_line$9$lcssa$ph;
																} else {
																	$820 = $792;$821 = $791;$826 = $796;$current_line$9$lcssa = $current_line$8$lcssa;
																}
																$819 = (($821) - ($820))|0;
																$822 = $819 >> 2;
																$823 = ($current_line$9$lcssa|0)<($822|0);
																do {
																	if ($823) {
																		$current_line$10 = $current_line$9$lcssa;$temp$1 = $790;
																		label = 250;
																	} else {
																		$824 = (($current_line$9$lcssa) + -1)|0;
																		$825 = (($826) + ($824<<2)|0);
																		$827 = HEAP32[$825>>2]|0;
																		$828 = HEAP32[$770>>2]|0;
																		$829 = ((($770)) + 8|0);
																		$830 = HEAP32[$829>>2]|0;
																		$831 = (($830) + ($828))|0;
																		$832 = (($831|0) / 2)&-1;
																		__THREW__ = 0;
																		$833 = (invoke_iii(117,($827|0),($832|0))|0);
																		$834 = __THREW__; __THREW__ = 0;
																		$835 = $834&1;
																		if ($835) {
																			label = 21;
																			break L265;
																		}
																		$836 = ((($770)) + 4|0);
																		$837 = HEAP32[$836>>2]|0;
																		$838 = HEAP32[$770>>2]|0;
																		$839 = HEAP32[$829>>2]|0;
																		$840 = (($839) + ($838))|0;
																		$841 = (($840|0) / 2)&-1;
																		__THREW__ = 0;
																		$842 = (invoke_iii(116,($827|0),($841|0))|0);
																		$843 = __THREW__; __THREW__ = 0;
																		$844 = $843&1;
																		if ($844) {
																			label = 21;
																			break L265;
																		}
																		$845 = HEAP32[$827>>2]|0;
																		$846 = ((($827)) + 4|0);
																		$847 = HEAP32[$846>>2]|0;
																		$848 = ($845|0)==($847|0);
																		if ($848) {
																			$852 = 0;
																		} else {
																			$849 = ((($845)) + 16|0);
																			$850 = HEAP32[$849>>2]|0;
																			$852 = $850;
																		}
																		$851 = (($852|0) / 2)&-1;
																		$853 = (($851) + ($842))|0;
																		$854 = ($837|0)>($853|0);
																		if (!($854)) {
																			$current_line$10 = $824;$temp$1 = $824;
																			label = 250;
																			break;
																		}
																		$855 = ($833|0)==(0|0);
																		if (!($855)) {
																			$856 = HEAP32[$836>>2]|0;
																			$857 = ((($833)) + 12|0);
																			$858 = HEAP32[$857>>2]|0;
																			if ($848) {
																				$862 = 0;
																			} else {
																				$859 = ((($845)) + 16|0);
																				$860 = HEAP32[$859>>2]|0;
																				$862 = $860;
																			}
																			$861 = (($862|0) / 2)&-1;
																			$863 = (($861) + ($858))|0;
																			$864 = ($856|0)>($863|0);
																			if (!($864)) {
																				$current_line$10 = $824;$temp$1 = $824;
																				label = 250;
																				break;
																			}
																		}
																		__THREW__ = 0;
																		invoke_vi(72,($770|0));
																		$865 = __THREW__; __THREW__ = 0;
																		$866 = $865&1;
																		if ($866) {
																			$$lcssa812 = $770;
																			label = 248;
																			break L265;
																		}
																		__ZdlPv($770);
																		$current_line$12 = $824;
																	}
																} while(0);
																if ((label|0) == 250) {
																	label = 0;
																	$869 = (($current_line$10) - ($temp$1))|0;
																	$870 = ($869|0)>(1);
																	$871 = (($current_line$10) + -1)|0;
																	$$temp$1 = $870 ? $871 : $temp$1;
																	$872 = ($current_line$10|0)==($$temp$1|0);
																	if ($872) {
																		$current_line$11 = $current_line$10;
																	} else {
																		$873 = ((($770)) + 4|0);
																		$874 = HEAP32[$873>>2]|0;
																		$875 = HEAP32[$4>>2]|0;
																		$876 = (($875) + ($$temp$1<<2)|0);
																		$877 = HEAP32[$876>>2]|0;
																		$878 = HEAP32[$770>>2]|0;
																		$879 = ((($770)) + 8|0);
																		$880 = HEAP32[$879>>2]|0;
																		$881 = (($880) + ($878))|0;
																		$882 = (($881|0) / 2)&-1;
																		__THREW__ = 0;
																		$883 = (invoke_iii(116,($877|0),($882|0))|0);
																		$884 = __THREW__; __THREW__ = 0;
																		$885 = $884&1;
																		if ($885) {
																			label = 21;
																			break;
																		}
																		$886 = HEAP32[$4>>2]|0;
																		$887 = (($886) + ($current_line$10<<2)|0);
																		$888 = HEAP32[$887>>2]|0;
																		$889 = HEAP32[$770>>2]|0;
																		$890 = HEAP32[$879>>2]|0;
																		$891 = (($890) + ($889))|0;
																		$892 = (($891|0) / 2)&-1;
																		__THREW__ = 0;
																		$893 = (invoke_iii(115,($888|0),($892|0))|0);
																		$894 = __THREW__; __THREW__ = 0;
																		$895 = $894&1;
																		if ($895) {
																			label = 21;
																			break;
																		}
																		$896 = (($874) - ($883))|0;
																		$897 = $896 << 1;
																		$898 = ((($770)) + 12|0);
																		$899 = HEAP32[$898>>2]|0;
																		$900 = (($893) - ($899))|0;
																		$901 = ($897|0)<($900|0);
																		$$temp$1$current_line$10 = $901 ? $$temp$1 : $current_line$10;
																		$current_line$11 = $$temp$1$current_line$10;
																	}
																	$902 = HEAP32[$4>>2]|0;
																	$903 = (($902) + ($current_line$11<<2)|0);
																	$904 = HEAP32[$903>>2]|0;
																	__THREW__ = 0;
																	$905 = (invoke_ii(29,40)|0);
																	$906 = __THREW__; __THREW__ = 0;
																	$907 = $906&1;
																	if ($907) {
																		label = 21;
																		break;
																	}
																	;HEAP32[$905>>2]=HEAP32[$770>>2]|0;HEAP32[$905+4>>2]=HEAP32[$770+4>>2]|0;HEAP32[$905+8>>2]=HEAP32[$770+8>>2]|0;HEAP32[$905+12>>2]=HEAP32[$770+12>>2]|0;
																	$908 = ((($905)) + 16|0);
																	HEAP32[$908>>2] = 0;
																	$909 = ((($905)) + 20|0);
																	HEAP32[$909>>2] = 0;
																	$910 = ((($905)) + 24|0);
																	HEAP32[$910>>2] = 0;
																	__THREW__ = 0;
																	$911 = (invoke_ii(29,4)|0);
																	$912 = __THREW__; __THREW__ = 0;
																	$913 = $912&1;
																	if ($913) {
																		$$lcssa815 = $905;
																		label = 258;
																		break;
																	}
																	$914 = $770;
																	HEAP32[$908>>2] = $911;
																	$915 = ((($911)) + 4|0);
																	HEAP32[$910>>2] = $915;
																	HEAP32[$911>>2] = $914;
																	HEAP32[$909>>2] = $915;
																	$916 = ((($905)) + 28|0);
																	HEAP32[$916>>2] = 0;
																	$917 = ((($905)) + 32|0);
																	HEAP32[$917>>2] = 0;
																	$918 = ((($905)) + 36|0);
																	HEAP32[$918>>2] = 0;
																	__THREW__ = 0;
																	(invoke_iiii(103,($904|0),($905|0),0)|0);
																	$919 = __THREW__; __THREW__ = 0;
																	$920 = $919&1;
																	if ($920) {
																		label = 21;
																		break;
																	} else {
																		$current_line$12 = $current_line$11;
																	}
																}
																$921 = (($i14$0369) + 1)|0;
																$922 = HEAP32[$11>>2]|0;
																$923 = HEAP32[$pending_short>>2]|0;
																$924 = (($922) - ($923))|0;
																$925 = $924 >> 2;
																$926 = ($921>>>0)<($925>>>0);
																if ($926) {
																	$$in533 = $923;$current_line$7370 = $current_line$12;$i14$0369 = $921;
																} else {
																	break L264;
																}
															}
															if ((label|0) == 19) {
																$64 = ___cxa_find_matching_catch_2()|0;
																$65 = tempRet0;
																$eh$lpad$body$index27Z2D = $65;$eh$lpad$body$indexZ2D = $64;
																break L101;
															}
															else if ((label|0) == 20) {
																$66 = ___cxa_find_matching_catch_2()|0;
																$67 = tempRet0;
																$eh$lpad$body$index27Z2D = $67;$eh$lpad$body$indexZ2D = $66;
																break L101;
															}
															else if ((label|0) == 21) {
																$68 = ___cxa_find_matching_catch_2()|0;
																$69 = tempRet0;
																$eh$lpad$body$index27Z2D = $69;$eh$lpad$body$indexZ2D = $68;
																break L101;
															}
															else if ((label|0) == 248) {
																$867 = ___cxa_find_matching_catch_2()|0;
																$868 = tempRet0;
																__ZdlPv($$lcssa812);
																$$0 = $867;$$09 = $868;
																break L86;
															}
															else if ((label|0) == 258) {
																$927 = ___cxa_find_matching_catch_2()|0;
																$928 = tempRet0;
																__ZdlPv($$lcssa815);
																$$0 = $927;$$09 = $928;
																break L86;
															}
														}
													} while(0);
													$760 = HEAP32[$$pre$phiZ2D>>2]|0;
													$761 = HEAP32[$4>>2]|0;
													$762 = (($760) - ($761))|0;
													$763 = ($762|0)>(8);
													L316: do {
														if ($763) {
															$929 = $761;
															$930 = $762 >> 2;
															$931 = (($930) + -1)|0;
															$932 = (($929) + ($931<<2)|0);
															$933 = HEAP32[$932>>2]|0;
															$934 = ((($933)) + 16|0);
															$935 = ((($933)) + 20|0);
															$936 = HEAP32[$935>>2]|0;
															$937 = HEAP32[$934>>2]|0;
															$938 = (($936) - ($937))|0;
															$939 = ($938|0)>(0);
															L318: do {
																if ($939) {
																	$940 = ((($page)) + 12|0);
																	$c$0353 = 0;$i20$0352 = 0;
																	while(1) {
																		__THREW__ = 0;
																		$941 = (invoke_iii(104,($933|0),($i20$0352|0))|0);
																		$942 = __THREW__; __THREW__ = 0;
																		$943 = $942&1;
																		if ($943) {
																			label = 18;
																			break;
																		}
																		$944 = ((($941)) + 12|0);
																		$945 = HEAP32[$944>>2]|0;
																		$946 = HEAP32[$940>>2]|0;
																		$947 = ($945|0)<($946|0);
																		if ($947) {
																			$$pre513 = HEAP32[$935>>2]|0;
																			$$pre514 = HEAP32[$934>>2]|0;
																			$983 = $$pre514;$984 = $$pre513;$c$1 = $c$0353;
																		} else {
																			$948 = (($c$0353) + 1)|0;
																			$949 = $948 << 1;
																			$950 = HEAP32[$935>>2]|0;
																			$951 = HEAP32[$934>>2]|0;
																			$952 = (($950) - ($951))|0;
																			$953 = $952 >> 2;
																			$954 = ($949|0)<($953|0);
																			if ($954) {
																				$983 = $951;$984 = $950;$c$1 = $948;
																			} else {
																				break;
																			}
																		}
																		$981 = (($i20$0352) + 1)|0;
																		$982 = (($984) - ($983))|0;
																		$985 = $982 >> 2;
																		$986 = ($981|0)<($985|0);
																		if ($986) {
																			$c$0353 = $c$1;$i20$0352 = $981;
																		} else {
																			break L318;
																		}
																	}
																	if ((label|0) == 18) {
																		$62 = ___cxa_find_matching_catch_2()|0;
																		$63 = tempRet0;
																		$eh$lpad$body$index27Z2D = $63;$eh$lpad$body$indexZ2D = $62;
																		break L101;
																	}
																	$955 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$956 = HEAP32[$4>>2]|0;
																	$957 = (($955) - ($956))|0;
																	$958 = $957 >> 2;
																	$959 = (($958) + -1)|0;
																	$$cast161 = $956;
																	$960 = (($$cast161) + ($959<<2)|0);
																	$961 = HEAP32[$960>>2]|0;
																	$962 = ($961|0)==(0|0);
																	do {
																		if ($962) {
																			$966 = $$cast161;$970 = $955;
																		} else {
																			__THREW__ = 0;
																			invoke_vi(111,($961|0));
																			$963 = __THREW__; __THREW__ = 0;
																			$964 = $963&1;
																			if ($964) {
																				$979 = ___cxa_find_matching_catch_2()|0;
																				$980 = tempRet0;
																				__ZdlPv($961);
																				$eh$lpad$body$index27Z2D = $980;$eh$lpad$body$indexZ2D = $979;
																				break L101;
																			} else {
																				__ZdlPv($961);
																				$$pre$i71 = HEAP32[$4>>2]|0;
																				$$pre511 = HEAP32[$$pre$phiZ2D>>2]|0;
																				$966 = $$pre$i71;$970 = $$pre511;
																				break;
																			}
																		}
																	} while(0);
																	$965 = (($966) + ($959<<2)|0);
																	$967 = ((($965)) + 4|0);
																	$968 = $967;
																	$969 = (($970) - ($968))|0;
																	$971 = $969 >> 2;
																	_memmove(($965|0),($967|0),($969|0))|0;
																	$972 = (($965) + ($971<<2)|0);
																	$973 = HEAP32[$5>>2]|0;
																	$974 = ($973|0)==($972|0);
																	if ($974) {
																		break;
																	}
																	$__new_last2$i$i$i$i72 = $972;
																	$scevgep$i$i$i$i73 = ((($973)) + -4|0);
																	$975 = $scevgep$i$i$i$i73;
																	$976 = (($975) - ($__new_last2$i$i$i$i72))|0;
																	$977 = $976 >>> 2;
																	$978 = $977 ^ -1;
																	$scevgep4$i$i$i$i74 = (($973) + ($978<<2)|0);
																	HEAP32[$5>>2] = $scevgep4$i$i$i$i74;
																}
															} while(0);
															$987 = HEAP32[$4>>2]|0;
															$988 = HEAP32[$987>>2]|0;
															$989 = ((($page)) + 4|0);
															$990 = HEAP32[$989>>2]|0;
															$991 = ($990|0)<(1);
															$992 = $991 ? 1 : $990;
															$993 = ((($988)) + 16|0);
															$994 = ((($988)) + 20|0);
															$995 = HEAP32[$994>>2]|0;
															$996 = HEAP32[$993>>2]|0;
															$997 = (($995) - ($996))|0;
															$998 = ($997|0)>(0);
															if ($998) {
																$c22$0349 = 0;$i21$0348 = 0;
															} else {
																break;
															}
															while(1) {
																__THREW__ = 0;
																$999 = (invoke_iii(104,($988|0),($i21$0348|0))|0);
																$1000 = __THREW__; __THREW__ = 0;
																$1001 = $1000&1;
																if ($1001) {
																	label = 17;
																	break;
																}
																$1002 = ((($999)) + 4|0);
																$1003 = HEAP32[$1002>>2]|0;
																$1004 = ($1003|0)>($992|0);
																if ($1004) {
																	$$pre516 = HEAP32[$994>>2]|0;
																	$$pre517 = HEAP32[$993>>2]|0;
																	$1034 = $$pre517;$1035 = $$pre516;$c22$1 = $c22$0349;
																} else {
																	$1005 = (($c22$0349) + 1)|0;
																	$1006 = $1005 << 1;
																	$1007 = HEAP32[$994>>2]|0;
																	$1008 = HEAP32[$993>>2]|0;
																	$1009 = (($1007) - ($1008))|0;
																	$1010 = $1009 >> 2;
																	$1011 = ($1006|0)<($1010|0);
																	if ($1011) {
																		$1034 = $1008;$1035 = $1007;$c22$1 = $1005;
																	} else {
																		break;
																	}
																}
																$1032 = (($i21$0348) + 1)|0;
																$1033 = (($1035) - ($1034))|0;
																$1036 = $1033 >> 2;
																$1037 = ($1032|0)<($1036|0);
																if ($1037) {
																	$c22$0349 = $c22$1;$i21$0348 = $1032;
																} else {
																	break L316;
																}
															}
															if ((label|0) == 17) {
																$60 = ___cxa_find_matching_catch_2()|0;
																$61 = tempRet0;
																$eh$lpad$body$index27Z2D = $61;$eh$lpad$body$indexZ2D = $60;
																break L101;
															}
															$1012 = HEAP32[$4>>2]|0;
															$1013 = HEAP32[$1012>>2]|0;
															$1014 = ($1013|0)==(0|0);
															do {
																if ($1014) {
																	$1018 = $1012;
																} else {
																	__THREW__ = 0;
																	invoke_vi(111,($1013|0));
																	$1015 = __THREW__; __THREW__ = 0;
																	$1016 = $1015&1;
																	if ($1016) {
																		$1030 = ___cxa_find_matching_catch_2()|0;
																		$1031 = tempRet0;
																		__ZdlPv($1013);
																		$eh$lpad$body$index27Z2D = $1031;$eh$lpad$body$indexZ2D = $1030;
																		break L101;
																	} else {
																		__ZdlPv($1013);
																		$$pre$i63 = HEAP32[$4>>2]|0;
																		$1018 = $$pre$i63;
																		break;
																	}
																}
															} while(0);
															$1017 = ((($1018)) + 4|0);
															$1019 = HEAP32[$$pre$phiZ2D>>2]|0;
															$1020 = $1017;
															$1021 = (($1019) - ($1020))|0;
															$1022 = $1021 >> 2;
															_memmove(($1018|0),($1017|0),($1021|0))|0;
															$1023 = (($1018) + ($1022<<2)|0);
															$1024 = HEAP32[$5>>2]|0;
															$1025 = ($1024|0)==($1023|0);
															if ($1025) {
																break;
															}
															$__new_last2$i$i$i$i64 = $1023;
															$scevgep$i$i$i$i65 = ((($1024)) + -4|0);
															$1026 = $scevgep$i$i$i$i65;
															$1027 = (($1026) - ($__new_last2$i$i$i$i64))|0;
															$1028 = $1027 >>> 2;
															$1029 = $1028 ^ -1;
															$scevgep4$i$i$i$i66 = (($1024) + ($1029<<2)|0);
															HEAP32[$5>>2] = $scevgep4$i$i$i$i66;
														}
													} while(0);
													$764 = HEAP32[$$pre$phiZ2D>>2]|0;
													$765 = HEAP32[$4>>2]|0;
													$766 = (($764) - ($765))|0;
													$767 = ($766|0)>(4);
													L356: do {
														if ($767) {
															$$in534 = $765;$current_line23$0346 = 0;
															L357: while(1) {
																$1045 = $$in534;
																$1046 = (($1045) + ($current_line23$0346<<2)|0);
																$1047 = HEAP32[$1046>>2]|0;
																$1048 = (($current_line23$0346) + 1)|0;
																$1049 = (($1045) + ($1048<<2)|0);
																$1050 = HEAP32[$1049>>2]|0;
																$1051 = ((($1047)) + 16|0);
																$1052 = ((($1047)) + 20|0);
																$1053 = HEAP32[$1052>>2]|0;
																$1054 = HEAP32[$1051>>2]|0;
																$1055 = (($1053) - ($1054))|0;
																$1056 = $1055 >> 2;
																$1057 = ((($1050)) + 16|0);
																$1058 = ((($1050)) + 20|0);
																$1059 = HEAP32[$1058>>2]|0;
																$1060 = HEAP32[$1057>>2]|0;
																$1061 = (($1059) - ($1060))|0;
																$1062 = $1061 >> 1;
																$1063 = ($1056|0)>($1062|0);
																L359: do {
																	if ($1063) {
																		$current_line23$0$be = $1048;
																	} else {
																		__THREW__ = 0;
																		$1064 = (invoke_ii(114,($1047|0))|0);
																		$1065 = __THREW__; __THREW__ = 0;
																		$1066 = $1065&1;
																		if ($1066) {
																			label = 16;
																			break L357;
																		}
																		__THREW__ = 0;
																		$1067 = (invoke_ii(114,($1050|0))|0);
																		$1068 = __THREW__; __THREW__ = 0;
																		$1069 = $1068&1;
																		if ($1069) {
																			label = 16;
																			break L357;
																		}
																		$1070 = $1064 << 1;
																		$1071 = ($1070|0)<($1067|0);
																		if ($1071) {
																			$i124$0345 = 0;
																		} else {
																			$current_line23$0$be = $1048;
																			break;
																		}
																		L363: while(1) {
																			$1078 = HEAP32[$1052>>2]|0;
																			$1079 = HEAP32[$1051>>2]|0;
																			$1080 = (($1078) - ($1079))|0;
																			$1081 = $1080 >> 2;
																			$1082 = ($i124$0345|0)<($1081|0);
																			if (!($1082)) {
																				$current_line23$0$be = $1048;
																				break L359;
																			}
																			__THREW__ = 0;
																			$1083 = (invoke_iii(104,($1047|0),($i124$0345|0))|0);
																			$1084 = __THREW__; __THREW__ = 0;
																			$1085 = $1084&1;
																			if ($1085) {
																				label = 15;
																				break L357;
																			}
																			$1086 = ((($1083)) + 12|0);
																			$1087 = HEAP32[$1086>>2]|0;
																			$1088 = ((($1083)) + 4|0);
																			$1089 = HEAP32[$1088>>2]|0;
																			__THREW__ = 0;
																			$1090 = (invoke_ii(114,($1050|0))|0);
																			$1091 = __THREW__; __THREW__ = 0;
																			$1092 = $1091&1;
																			if ($1092) {
																				label = 15;
																				break L357;
																			}
																			$1093 = (($1087) + 1)|0;
																			$1094 = (($1093) - ($1089))|0;
																			$1095 = $1094 << 1;
																			$1096 = ($1095|0)<($1090|0);
																			L368: do {
																				if ($1096) {
																					$1097 = ((($1083)) + 8|0);
																					$i2$0337 = 0;
																					while(1) {
																						$1098 = HEAP32[$1058>>2]|0;
																						$1099 = HEAP32[$1057>>2]|0;
																						$1100 = (($1098) - ($1099))|0;
																						$1101 = $1100 >> 2;
																						$1102 = ($i2$0337|0)<($1101|0);
																						if (!($1102)) {
																							break L368;
																						}
																						__THREW__ = 0;
																						$1103 = (invoke_iii(104,($1050|0),($i2$0337|0))|0);
																						$1104 = __THREW__; __THREW__ = 0;
																						$1105 = $1104&1;
																						if ($1105) {
																							label = 13;
																							break L357;
																						}
																						$1106 = ((($1103)) + 8|0);
																						$1107 = HEAP32[$1106>>2]|0;
																						$1108 = HEAP32[$1083>>2]|0;
																						$1109 = ($1107|0)<($1108|0);
																						do {
																							if (!($1109)) {
																								$1110 = HEAP32[$1103>>2]|0;
																								$1111 = HEAP32[$1097>>2]|0;
																								$1112 = ($1110|0)>($1111|0);
																								if ($1112) {
																									break L368;
																								}
																								__THREW__ = 0;
																								$1113 = (invoke_iii(105,($1103|0),($1083|0))|0);
																								$1114 = __THREW__; __THREW__ = 0;
																								$1115 = $1114&1;
																								if ($1115) {
																									label = 13;
																									break L357;
																								}
																								if (!($1113)) {
																									__THREW__ = 0;
																									$1116 = (invoke_iii(105,($1083|0),($1103|0))|0);
																									$1117 = __THREW__; __THREW__ = 0;
																									$1118 = $1117&1;
																									if ($1118) {
																										label = 13;
																										break L357;
																									}
																									if (!($1116)) {
																										break;
																									}
																								}
																								$1119 = ((($1103)) + 4|0);
																								$1120 = HEAP32[$1119>>2]|0;
																								$1121 = HEAP32[$1086>>2]|0;
																								__THREW__ = 0;
																								$1122 = (invoke_ii(114,($1050|0))|0);
																								$1123 = __THREW__; __THREW__ = 0;
																								$1124 = $1123&1;
																								if ($1124) {
																									label = 13;
																									break L357;
																								}
																								$1125 = (($1120) - ($1121))|0;
																								$1126 = ($1125|0)<($1122|0);
																								if ($1126) {
																									break L363;
																								}
																							}
																						} while(0);
																						$1151 = (($i2$0337) + 1)|0;
																						$i2$0337 = $1151;
																					}
																				}
																			} while(0);
																			$1152 = (($i124$0345) + 1)|0;
																			$i124$0345 = $1152;
																		}
																		__THREW__ = 0;
																		invoke_vii(118,($1050|0),($1047|0));
																		$1127 = __THREW__; __THREW__ = 0;
																		$1128 = $1127&1;
																		if ($1128) {
																			label = 14;
																			break L357;
																		}
																		$1129 = HEAP32[$4>>2]|0;
																		$1130 = (($1129) + ($current_line23$0346<<2)|0);
																		$1131 = HEAP32[$1130>>2]|0;
																		$1132 = ($1131|0)==(0|0);
																		if ($1132) {
																			$1136 = $1129;
																		} else {
																			__THREW__ = 0;
																			invoke_vi(111,($1131|0));
																			$1133 = __THREW__; __THREW__ = 0;
																			$1134 = $1133&1;
																			if ($1134) {
																				$$lcssa803 = $1131;
																				label = 312;
																				break L357;
																			}
																			__ZdlPv($1131);
																			$$pre$i55 = HEAP32[$4>>2]|0;
																			$1136 = $$pre$i55;
																		}
																		$1135 = (($1136) + ($current_line23$0346<<2)|0);
																		$1137 = ((($1135)) + 4|0);
																		$1138 = HEAP32[$$pre$phiZ2D>>2]|0;
																		$1139 = $1137;
																		$1140 = (($1138) - ($1139))|0;
																		$1141 = $1140 >> 2;
																		_memmove(($1135|0),($1137|0),($1140|0))|0;
																		$1142 = (($1135) + ($1141<<2)|0);
																		$1143 = HEAP32[$5>>2]|0;
																		$1144 = ($1143|0)==($1142|0);
																		if ($1144) {
																			$current_line23$0$be = $current_line23$0346;
																			break;
																		}
																		$__new_last2$i$i$i$i56 = $1142;
																		$scevgep$i$i$i$i57 = ((($1143)) + -4|0);
																		$1145 = $scevgep$i$i$i$i57;
																		$1146 = (($1145) - ($__new_last2$i$i$i$i56))|0;
																		$1147 = $1146 >>> 2;
																		$1148 = $1147 ^ -1;
																		$scevgep4$i$i$i$i58 = (($1143) + ($1148<<2)|0);
																		HEAP32[$5>>2] = $scevgep4$i$i$i$i58;
																		$current_line23$0$be = $current_line23$0346;
																	}
																} while(0);
																$1072 = HEAP32[$$pre$phiZ2D>>2]|0;
																$1073 = HEAP32[$4>>2]|0;
																$1074 = (($1072) - ($1073))|0;
																$1075 = $1074 >> 2;
																$1076 = (($1075) + -1)|0;
																$1077 = ($current_line23$0$be|0)<($1076|0);
																if ($1077) {
																	$$in534 = $1073;$current_line23$0346 = $current_line23$0$be;
																} else {
																	break L356;
																}
															}
															if ((label|0) == 13) {
																$52 = ___cxa_find_matching_catch_2()|0;
																$53 = tempRet0;
																$eh$lpad$body$index27Z2D = $53;$eh$lpad$body$indexZ2D = $52;
																break L101;
															}
															else if ((label|0) == 14) {
																$54 = ___cxa_find_matching_catch_2()|0;
																$55 = tempRet0;
																$eh$lpad$body$index27Z2D = $55;$eh$lpad$body$indexZ2D = $54;
																break L101;
															}
															else if ((label|0) == 15) {
																$56 = ___cxa_find_matching_catch_2()|0;
																$57 = tempRet0;
																$eh$lpad$body$index27Z2D = $57;$eh$lpad$body$indexZ2D = $56;
																break L101;
															}
															else if ((label|0) == 16) {
																$58 = ___cxa_find_matching_catch_2()|0;
																$59 = tempRet0;
																$eh$lpad$body$index27Z2D = $59;$eh$lpad$body$indexZ2D = $58;
																break L101;
															}
															else if ((label|0) == 312) {
																$1149 = ___cxa_find_matching_catch_2()|0;
																$1150 = tempRet0;
																__ZdlPv($$lcssa803);
																$eh$lpad$body$index27Z2D = $1150;$eh$lpad$body$indexZ2D = $1149;
																break L101;
															}
														}
													} while(0);
													__THREW__ = 0;
													invoke_vi(110,($4|0));
													$1038 = __THREW__; __THREW__ = 0;
													$1039 = $1038&1;
													if ($1039) {
														label = 30;
													} else {
														$1040 = HEAP32[$$pre$phiZ2D>>2]|0;
														$1041 = HEAP32[$4>>2]|0;
														$1042 = (($1040) - ($1041))|0;
														$1043 = ($1042|0)>(0);
														$1044 = $1041;
														L401: do {
															if ($1043) {
																$1161 = $1044;$i27$0332 = 0;
																while(1) {
																	$1160 = (($1161) + ($i27$0332<<2)|0);
																	$1162 = HEAP32[$1160>>2]|0;
																	__THREW__ = 0;
																	invoke_vi(119,($1162|0));
																	$1163 = __THREW__; __THREW__ = 0;
																	$1164 = $1163&1;
																	if ($1164) {
																		label = 12;
																		break;
																	}
																	$1165 = (($i27$0332) + 1)|0;
																	$1166 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$1167 = HEAP32[$4>>2]|0;
																	$1168 = (($1166) - ($1167))|0;
																	$1169 = $1168 >> 2;
																	$1170 = ($1165|0)<($1169|0);
																	$1171 = $1167;
																	if ($1170) {
																		$1161 = $1171;$i27$0332 = $1165;
																	} else {
																		$$lcssa799 = $1166;$$lcssa800 = $1167;$$lcssa801 = $1168;$$lcssa802 = $1171;
																		break;
																	}
																}
																if ((label|0) == 12) {
																	$50 = ___cxa_find_matching_catch_2()|0;
																	$51 = tempRet0;
																	$eh$lpad$body$index27Z2D = $51;$eh$lpad$body$indexZ2D = $50;
																	break L101;
																}
																$1153 = ($$lcssa801|0)>(8);
																$1154 = (($$lcssa799) - ($$lcssa800))|0;
																$1155 = ($1154|0)>(8);
																$or$cond626 = $1153 & $1155;
																if ($or$cond626) {
																	$1173 = $$lcssa802;$1179 = 2;$i28$0330 = 0;
																} else {
																	$1157 = $$lcssa800;$1158 = $$lcssa799;$1549 = $$lcssa802;
																	break;
																}
																L408: while(1) {
																	$1172 = (($1173) + ($i28$0330<<2)|0);
																	$1174 = HEAP32[$1172>>2]|0;
																	$1175 = (($i28$0330) + 1)|0;
																	$1176 = (($1173) + ($1175<<2)|0);
																	$1177 = HEAP32[$1176>>2]|0;
																	$1178 = (($1173) + ($1179<<2)|0);
																	$1180 = HEAP32[$1178>>2]|0;
																	$1181 = ((($1177)) + 16|0);
																	$1182 = ((($1177)) + 20|0);
																	$1183 = HEAP32[$1182>>2]|0;
																	$1184 = HEAP32[$1181>>2]|0;
																	$1185 = (($1183) - ($1184))|0;
																	$1186 = ($1185|0)>(8);
																	do {
																		if (!($1186)) {
																			$1187 = ((($1174)) + 16|0);
																			$1188 = ((($1174)) + 20|0);
																			$1189 = HEAP32[$1188>>2]|0;
																			$1190 = HEAP32[$1187>>2]|0;
																			$1191 = (($1189) - ($1190))|0;
																			$1192 = ($1191|0)<(16);
																			if ($1192) {
																				break;
																			}
																			$1193 = ((($1180)) + 16|0);
																			$1194 = ((($1180)) + 20|0);
																			$1195 = HEAP32[$1194>>2]|0;
																			$1196 = HEAP32[$1193>>2]|0;
																			$1197 = (($1195) - ($1196))|0;
																			$1198 = ($1197|0)<(16);
																			if ($1198) {
																				break;
																			}
																			$1199 = HEAP32[$1174>>2]|0;
																			$1200 = ((($1174)) + 4|0);
																			$1201 = HEAP32[$1200>>2]|0;
																			$1202 = ($1199|0)==($1201|0);
																			if ($1202) {
																				$1211 = 0;
																			} else {
																				$1203 = ((($1199)) + 16|0);
																				$1204 = HEAP32[$1203>>2]|0;
																				$1211 = $1204;
																			}
																			$1205 = HEAP32[$1180>>2]|0;
																			$1206 = ((($1180)) + 4|0);
																			$1207 = HEAP32[$1206>>2]|0;
																			$1208 = ($1205|0)==($1207|0);
																			if ($1208) {
																				$1212 = 0;
																			} else {
																				$1209 = ((($1205)) + 16|0);
																				$1210 = HEAP32[$1209>>2]|0;
																				$1212 = $1210;
																			}
																			__THREW__ = 0;
																			$1213 = (invoke_iiiii(120,($1211|0),($1212|0),10,1)|0);
																			$1214 = __THREW__; __THREW__ = 0;
																			$1215 = $1214&1;
																			if ($1215) {
																				label = 11;
																				break L408;
																			}
																			if (!($1213)) {
																				break;
																			}
																			$1216 = HEAP32[$1177>>2]|0;
																			$1217 = ((($1177)) + 4|0);
																			$1218 = HEAP32[$1217>>2]|0;
																			$1219 = ($1216|0)==($1218|0);
																			if ($1219) {
																				$1223 = 0;
																			} else {
																				$1220 = ((($1216)) + 16|0);
																				$1221 = HEAP32[$1220>>2]|0;
																				$1223 = $1221;
																			}
																			$1222 = $1223 << 3;
																			$1224 = HEAP32[$1174>>2]|0;
																			$1225 = HEAP32[$1200>>2]|0;
																			$1226 = ($1224|0)==($1225|0);
																			if ($1226) {
																				$1235 = 0;
																			} else {
																				$1227 = ((($1224)) + 16|0);
																				$1228 = HEAP32[$1227>>2]|0;
																				$1235 = $1228;
																			}
																			$1229 = HEAP32[$1180>>2]|0;
																			$1230 = HEAP32[$1206>>2]|0;
																			$1231 = ($1229|0)==($1230|0);
																			if ($1231) {
																				$1236 = 0;
																			} else {
																				$1232 = ((($1229)) + 16|0);
																				$1233 = HEAP32[$1232>>2]|0;
																				$1236 = $1233;
																			}
																			$1234 = (($1236) + ($1235))|0;
																			$1237 = ($1222|0)>($1234|0);
																			if ($1237) {
																				break;
																			}
																			$1245 = HEAP32[$4>>2]|0;
																			$1246 = (($1245) + ($1175<<2)|0);
																			$1247 = HEAP32[$1246>>2]|0;
																			$1248 = ($1247|0)==(0|0);
																			if ($1248) {
																				$1252 = $1245;
																			} else {
																				__THREW__ = 0;
																				invoke_vi(111,($1247|0));
																				$1249 = __THREW__; __THREW__ = 0;
																				$1250 = $1249&1;
																				if ($1250) {
																					$$lcssa795 = $1247;
																					label = 341;
																					break L408;
																				}
																				__ZdlPv($1247);
																				$$pre$i = HEAP32[$4>>2]|0;
																				$1252 = $$pre$i;
																			}
																			$1251 = (($1252) + ($1175<<2)|0);
																			$1253 = ((($1251)) + 4|0);
																			$1254 = HEAP32[$$pre$phiZ2D>>2]|0;
																			$1255 = $1253;
																			$1256 = (($1254) - ($1255))|0;
																			$1257 = $1256 >> 2;
																			_memmove(($1251|0),($1253|0),($1256|0))|0;
																			$1258 = (($1251) + ($1257<<2)|0);
																			$1259 = HEAP32[$5>>2]|0;
																			$1260 = ($1259|0)==($1258|0);
																			if ($1260) {
																				break;
																			}
																			$__new_last2$i$i$i$i = $1258;
																			$scevgep$i$i$i$i = ((($1259)) + -4|0);
																			$1261 = $scevgep$i$i$i$i;
																			$1262 = (($1261) - ($__new_last2$i$i$i$i))|0;
																			$1263 = $1262 >>> 2;
																			$1264 = $1263 ^ -1;
																			$scevgep4$i$i$i$i = (($1259) + ($1264<<2)|0);
																			HEAP32[$5>>2] = $scevgep4$i$i$i$i;
																		}
																	} while(0);
																	$1238 = (($i28$0330) + 3)|0;
																	$1239 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$1240 = HEAP32[$4>>2]|0;
																	$1241 = (($1239) - ($1240))|0;
																	$1242 = $1241 >> 2;
																	$1243 = ($1238|0)<($1242|0);
																	$1244 = $1240;
																	if ($1243) {
																		$1173 = $1244;$1179 = $1238;$i28$0330 = $1175;
																	} else {
																		$1157 = $1240;$1158 = $1239;$1549 = $1244;
																		break L401;
																	}
																}
																if ((label|0) == 11) {
																	$48 = ___cxa_find_matching_catch_2()|0;
																	$49 = tempRet0;
																	$eh$lpad$body$index27Z2D = $49;$eh$lpad$body$indexZ2D = $48;
																	break L101;
																}
																else if ((label|0) == 341) {
																	$1265 = ___cxa_find_matching_catch_2()|0;
																	$1266 = tempRet0;
																	__ZdlPv($$lcssa795);
																	$eh$lpad$body$index27Z2D = $1266;$eh$lpad$body$indexZ2D = $1265;
																	break L101;
																}
															} else {
																$1157 = $1041;$1158 = $1040;$1549 = $1044;
															}
														} while(0);
														$1156 = (($1158) - ($1157))|0;
														$1159 = ($1156|0)>(0);
														L442: do {
															if ($1159) {
																$1272 = $1549;$i32$0328 = 0;
																L443: while(1) {
																	$1271 = (($1272) + ($i32$0328<<2)|0);
																	$1273 = HEAP32[$1271>>2]|0;
																	$1274 = ((($1273)) + 12|0);
																	$1275 = HEAP32[$1274>>2]|0;
																	$1276 = ($1275|0)==(0);
																	$1277 = ((($1273)) + 16|0);
																	$1278 = ((($1273)) + 20|0);
																	do {
																		if ($1276) {
																			$1279 = HEAP32[$1278>>2]|0;
																			$1280 = HEAP32[$1277>>2]|0;
																			$1281 = (($1279) - ($1280))|0;
																			$1282 = ($1281|0)>(8);
																			if (!($1282)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			__THREW__ = 0;
																			$1283 = (invoke_iii(104,($1273|0),0)|0);
																			$1284 = __THREW__; __THREW__ = 0;
																			$1285 = $1284&1;
																			if ($1285) {
																				break L443;
																			}
																			__THREW__ = 0;
																			$1286 = (invoke_iii(104,($1273|0),1)|0);
																			$1287 = __THREW__; __THREW__ = 0;
																			$1288 = $1287&1;
																			if ($1288) {
																				break L443;
																			}
																			__THREW__ = 0;
																			$1289 = (invoke_iii(104,($1273|0),2)|0);
																			$1290 = __THREW__; __THREW__ = 0;
																			$1291 = $1290&1;
																			if ($1291) {
																				break L443;
																			}
																			$1292 = ((($1283)) + 16|0);
																			$1293 = ((($1283)) + 20|0);
																			$1294 = HEAP32[$1293>>2]|0;
																			$1295 = HEAP32[$1292>>2]|0;
																			$1296 = (($1294) - ($1295))|0;
																			$1297 = ($1296|0)==(4);
																			if (!($1297)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			$1298 = ((($1283)) + 12|0);
																			$1299 = HEAP32[$1298>>2]|0;
																			$1300 = ((($1283)) + 4|0);
																			$1301 = HEAP32[$1300>>2]|0;
																			$1302 = (($1299) + 1)|0;
																			$1303 = (($1302) - ($1301))|0;
																			$1304 = ((($1283)) + 8|0);
																			$1305 = HEAP32[$1304>>2]|0;
																			$1306 = HEAP32[$1283>>2]|0;
																			$1307 = (($1305) + 1)|0;
																			$1308 = (($1307) - ($1306))|0;
																			$1309 = $1303 << 2;
																			$1310 = Math_imul($1309, $1308)|0;
																			$1311 = ((($1286)) + 12|0);
																			$1312 = HEAP32[$1311>>2]|0;
																			$1313 = ((($1286)) + 4|0);
																			$1314 = HEAP32[$1313>>2]|0;
																			$1315 = (($1312) + 1)|0;
																			$1316 = (($1315) - ($1314))|0;
																			$1317 = ((($1286)) + 8|0);
																			$1318 = HEAP32[$1317>>2]|0;
																			$1319 = HEAP32[$1286>>2]|0;
																			$1320 = (($1318) + 1)|0;
																			$1321 = (($1320) - ($1319))|0;
																			$1322 = Math_imul($1321, $1316)|0;
																			$1323 = ($1310|0)<($1322|0);
																			if (!($1323)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			$1324 = HEAP32[$1273>>2]|0;
																			$1325 = ((($1273)) + 4|0);
																			$1326 = HEAP32[$1325>>2]|0;
																			$1327 = ($1324|0)==($1326|0);
																			if ($1327) {
																				$1332 = 0;
																			} else {
																				$1328 = ((($1324)) + 16|0);
																				$1329 = HEAP32[$1328>>2]|0;
																				$1332 = $1329;
																			}
																			$1330 = (($1319) - ($1305))|0;
																			$1331 = $1332 << 1;
																			$1333 = ($1330|0)>($1331|0);
																			if (!($1333)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			$1334 = ((($1289)) + 12|0);
																			$1335 = HEAP32[$1334>>2]|0;
																			$1336 = ((($1289)) + 4|0);
																			$1337 = HEAP32[$1336>>2]|0;
																			$1338 = (($1335) + 1)|0;
																			$1339 = (($1338) - ($1337))|0;
																			$1340 = ((($1289)) + 8|0);
																			$1341 = HEAP32[$1340>>2]|0;
																			$1342 = HEAP32[$1289>>2]|0;
																			$1343 = (($1341) + 1)|0;
																			$1344 = (($1343) - ($1342))|0;
																			$1345 = Math_imul($1344, $1339)|0;
																			$1346 = ($1310|0)<($1345|0);
																			if (!($1346)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			if ($1327) {
																				$1351 = 0;
																			} else {
																				$1347 = ((($1324)) + 16|0);
																				$1348 = HEAP32[$1347>>2]|0;
																				$1351 = $1348;
																			}
																			$1349 = (($1342) - ($1318))|0;
																			$1350 = ($1349|0)<($1351|0);
																			if (!($1350)) {
																				$$pre$phi532Z2D = $1277;
																				break;
																			}
																			__THREW__ = 0;
																			invoke_vii(121,($1273|0),0);
																			$1352 = __THREW__; __THREW__ = 0;
																			$1353 = $1352&1;
																			if ($1353) {
																				break L443;
																			} else {
																				$$pre$phi532Z2D = $1277;
																			}
																		} else {
																			$$pre$phi532Z2D = $1277;
																		}
																	} while(0);
																	$1354 = HEAP32[$1278>>2]|0;
																	$1355 = HEAP32[$$pre$phi532Z2D>>2]|0;
																	$1356 = (($1354) - ($1355))|0;
																	$1357 = ($1356|0)>(8);
																	do {
																		if ($1357) {
																			$1358 = $1356 >> 2;
																			$1359 = (($1358) + -1)|0;
																			__THREW__ = 0;
																			$1360 = (invoke_iii(104,($1273|0),($1359|0))|0);
																			$1361 = __THREW__; __THREW__ = 0;
																			$1362 = $1361&1;
																			if ($1362) {
																				break L443;
																			}
																			$1363 = HEAP32[$1278>>2]|0;
																			$1364 = HEAP32[$$pre$phi532Z2D>>2]|0;
																			$1365 = (($1363) - ($1364))|0;
																			$1366 = $1365 >> 2;
																			$1367 = (($1366) + -2)|0;
																			__THREW__ = 0;
																			$1368 = (invoke_iii(104,($1273|0),($1367|0))|0);
																			$1369 = __THREW__; __THREW__ = 0;
																			$1370 = $1369&1;
																			if ($1370) {
																				break L443;
																			}
																			$1371 = HEAP32[$1278>>2]|0;
																			$1372 = HEAP32[$$pre$phi532Z2D>>2]|0;
																			$1373 = (($1371) - ($1372))|0;
																			$1374 = $1373 >> 2;
																			$1375 = (($1374) + -3)|0;
																			__THREW__ = 0;
																			$1376 = (invoke_iii(104,($1273|0),($1375|0))|0);
																			$1377 = __THREW__; __THREW__ = 0;
																			$1378 = $1377&1;
																			if ($1378) {
																				break L443;
																			}
																			$1379 = ((($1360)) + 16|0);
																			$1380 = ((($1360)) + 20|0);
																			$1381 = HEAP32[$1380>>2]|0;
																			$1382 = HEAP32[$1379>>2]|0;
																			$1383 = (($1381) - ($1382))|0;
																			$1384 = ($1383|0)==(4);
																			if (!($1384)) {
																				break;
																			}
																			$1385 = ((($1360)) + 12|0);
																			$1386 = HEAP32[$1385>>2]|0;
																			$1387 = ((($1360)) + 4|0);
																			$1388 = HEAP32[$1387>>2]|0;
																			$1389 = (($1386) + 1)|0;
																			$1390 = (($1389) - ($1388))|0;
																			$1391 = ((($1360)) + 8|0);
																			$1392 = HEAP32[$1391>>2]|0;
																			$1393 = HEAP32[$1360>>2]|0;
																			$1394 = (($1392) + 1)|0;
																			$1395 = (($1394) - ($1393))|0;
																			$1396 = $1390 << 2;
																			$1397 = Math_imul($1396, $1395)|0;
																			$1398 = ((($1368)) + 12|0);
																			$1399 = HEAP32[$1398>>2]|0;
																			$1400 = ((($1368)) + 4|0);
																			$1401 = HEAP32[$1400>>2]|0;
																			$1402 = (($1399) + 1)|0;
																			$1403 = (($1402) - ($1401))|0;
																			$1404 = ((($1368)) + 8|0);
																			$1405 = HEAP32[$1404>>2]|0;
																			$1406 = HEAP32[$1368>>2]|0;
																			$1407 = (($1405) + 1)|0;
																			$1408 = (($1407) - ($1406))|0;
																			$1409 = Math_imul($1408, $1403)|0;
																			$1410 = ($1397|0)<($1409|0);
																			if (!($1410)) {
																				break;
																			}
																			$1411 = HEAP32[$1273>>2]|0;
																			$1412 = ((($1273)) + 4|0);
																			$1413 = HEAP32[$1412>>2]|0;
																			$1414 = ($1411|0)==($1413|0);
																			if ($1414) {
																				$1419 = 0;
																			} else {
																				$1415 = ((($1411)) + 16|0);
																				$1416 = HEAP32[$1415>>2]|0;
																				$1419 = $1416;
																			}
																			$1417 = (($1393) - ($1405))|0;
																			$1418 = $1419 << 1;
																			$1420 = ($1417|0)>($1418|0);
																			if (!($1420)) {
																				break;
																			}
																			$1421 = ((($1376)) + 12|0);
																			$1422 = HEAP32[$1421>>2]|0;
																			$1423 = ((($1376)) + 4|0);
																			$1424 = HEAP32[$1423>>2]|0;
																			$1425 = (($1422) + 1)|0;
																			$1426 = (($1425) - ($1424))|0;
																			$1427 = ((($1376)) + 8|0);
																			$1428 = HEAP32[$1427>>2]|0;
																			$1429 = HEAP32[$1376>>2]|0;
																			$1430 = (($1428) + 1)|0;
																			$1431 = (($1430) - ($1429))|0;
																			$1432 = Math_imul($1431, $1426)|0;
																			$1433 = ($1397|0)<($1432|0);
																			if (!($1433)) {
																				break;
																			}
																			if ($1414) {
																				$1438 = 0;
																			} else {
																				$1434 = ((($1411)) + 16|0);
																				$1435 = HEAP32[$1434>>2]|0;
																				$1438 = $1435;
																			}
																			$1436 = (($1406) - ($1428))|0;
																			$1437 = ($1436|0)<($1438|0);
																			if (!($1437)) {
																				break;
																			}
																			$1439 = HEAP32[$1278>>2]|0;
																			$1440 = HEAP32[$$pre$phi532Z2D>>2]|0;
																			$1441 = (($1439) - ($1440))|0;
																			$1442 = $1441 >> 2;
																			$1443 = (($1442) + -1)|0;
																			__THREW__ = 0;
																			invoke_vii(121,($1273|0),($1443|0));
																			$1444 = __THREW__; __THREW__ = 0;
																			$1445 = $1444&1;
																			if ($1445) {
																				break L443;
																			}
																		}
																	} while(0);
																	$1446 = (($i32$0328) + 1)|0;
																	$1447 = HEAP32[$$pre$phiZ2D>>2]|0;
																	$1448 = HEAP32[$4>>2]|0;
																	$1449 = (($1447) - ($1448))|0;
																	$1450 = $1449 >> 2;
																	$1451 = ($1446|0)<($1450|0);
																	$1452 = $1448;
																	if ($1451) {
																		$1272 = $1452;$i32$0328 = $1446;
																	} else {
																		$1268 = $1448;$1269 = $1447;$1550 = $1452;
																		break L442;
																	}
																}
																$46 = ___cxa_find_matching_catch_2()|0;
																$47 = tempRet0;
																$eh$lpad$body$index27Z2D = $47;$eh$lpad$body$indexZ2D = $46;
																break L101;
															} else {
																$1268 = $1157;$1269 = $1158;$1550 = $1549;
															}
														} while(0);
														$1267 = (($1269) - ($1268))|0;
														$1270 = ($1267|0)>(0);
														if ($1270) {
															$1454 = $1550;$i39$0326 = 0;
														} else {
															break L1;
														}
														while(1) {
															$1453 = (($1454) + ($i39$0326<<2)|0);
															$1455 = HEAP32[$1453>>2]|0;
															__THREW__ = 0;
															invoke_vi(122,($1455|0));
															$1456 = __THREW__; __THREW__ = 0;
															$1457 = $1456&1;
															if ($1457) {
																break;
															}
															$1458 = (($i39$0326) + 1)|0;
															$1459 = HEAP32[$$pre$phiZ2D>>2]|0;
															$1460 = HEAP32[$4>>2]|0;
															$1461 = (($1459) - ($1460))|0;
															$1462 = $1461 >> 2;
															$1463 = ($1458|0)<($1462|0);
															$1464 = $1460;
															if ($1463) {
																$1454 = $1464;$i39$0326 = $1458;
															} else {
																break L1;
															}
														}
														$44 = ___cxa_find_matching_catch_2()|0;
														$45 = tempRet0;
														$eh$lpad$body$index27Z2D = $45;$eh$lpad$body$indexZ2D = $44;
													}
												}
											}
										}
									}
								} while(0);
								if ((label|0) == 30) {
									$86 = ___cxa_find_matching_catch_2()|0;
									$87 = tempRet0;
									$eh$lpad$body$index27Z2D = $87;$eh$lpad$body$indexZ2D = $86;
								}
								$$0 = $eh$lpad$body$indexZ2D;$$09 = $eh$lpad$body$index27Z2D;
							}
							else if ((label|0) == 37) {
								$116 = ___cxa_find_matching_catch_2()|0;
								$117 = tempRet0;
								$lpad$phi252$index = $116;$lpad$phi252$index58 = $117;
								label = 40;
							}
							else if ((label|0) == 38) {
								$118 = ___cxa_find_matching_catch_2()|0;
								$119 = tempRet0;
								$lpad$phi252$index = $118;$lpad$phi252$index58 = $119;
								label = 40;
							}
							else if ((label|0) == 39) {
								$120 = ___cxa_find_matching_catch_2()|0;
								$121 = tempRet0;
								$lpad$phi252$index = $120;$lpad$phi252$index58 = $121;
								label = 40;
							}
						} while(0);
						if ((label|0) == 40) {
							$122 = HEAP32[$height_distrib>>2]|0;
							$123 = ($122|0)==(0|0);
							$124 = $122;
							if ($123) {
								$$0 = $lpad$phi252$index;$$09 = $lpad$phi252$index58;
							} else {
								$125 = HEAP32[$19>>2]|0;
								$126 = ($125|0)==($122|0);
								if (!($126)) {
									$scevgep$i$i$i79 = ((($125)) + -4|0);
									$127 = $scevgep$i$i$i79;
									$128 = (($127) - ($124))|0;
									$129 = $128 >>> 2;
									$130 = $129 ^ -1;
									$scevgep4$i$i$i80 = (($125) + ($130<<2)|0);
									HEAP32[$19>>2] = $scevgep4$i$i$i80;
								}
								__ZdlPv($122);
								$$0 = $lpad$phi252$index;$$09 = $lpad$phi252$index58;
							}
						}
						$1492 = HEAP32[$pending_short>>2]|0;
						$1493 = ($1492|0)==(0|0);
						$1494 = $1492;
						if (!($1493)) {
							$1495 = HEAP32[$11>>2]|0;
							$1496 = ($1495|0)==($1492|0);
							if (!($1496)) {
								$scevgep$i$i$i27 = ((($1495)) + -4|0);
								$1497 = $scevgep$i$i$i27;
								$1498 = (($1497) - ($1494))|0;
								$1499 = $1498 >>> 2;
								$1500 = $1499 ^ -1;
								$scevgep4$i$i$i28 = (($1495) + ($1500<<2)|0);
								HEAP32[$11>>2] = $scevgep4$i$i$i28;
							}
							__ZdlPv($1492);
						}
						$1501 = HEAP32[$pending_tall>>2]|0;
						$1502 = ($1501|0)==(0|0);
						$1503 = $1501;
						if (!($1502)) {
							$1504 = HEAP32[$9>>2]|0;
							$1505 = ($1504|0)==($1501|0);
							if (!($1505)) {
								$scevgep$i$i$i22 = ((($1504)) + -4|0);
								$1506 = $scevgep$i$i$i22;
								$1507 = (($1506) - ($1503))|0;
								$1508 = $1507 >>> 2;
								$1509 = $1508 ^ -1;
								$scevgep4$i$i$i23 = (($1504) + ($1509<<2)|0);
								HEAP32[$9>>2] = $scevgep4$i$i$i23;
							}
							__ZdlPv($1501);
						}
						$1510 = HEAP32[$pending>>2]|0;
						$1511 = ($1510|0)==(0|0);
						$1512 = $1510;
						if (!($1511)) {
							$1513 = HEAP32[$7>>2]|0;
							$1514 = ($1513|0)==($1510|0);
							if (!($1514)) {
								$scevgep$i$i$i19 = ((($1513)) + -4|0);
								$1515 = $scevgep$i$i$i19;
								$1516 = (($1515) - ($1512))|0;
								$1517 = $1516 >>> 2;
								$1518 = $1517 ^ -1;
								$scevgep4$i$i$i20 = (($1513) + ($1518<<2)|0);
								HEAP32[$7>>2] = $scevgep4$i$i$i20;
							}
							__ZdlPv($1510);
						}
						$1519 = HEAP32[$4>>2]|0;
						$1520 = ($1519|0)==(0|0);
						$1521 = $1519;
						if ($1520) {
							___resumeException($$0|0);
							// unreachable;
						}
						$1522 = HEAP32[$5>>2]|0;
						$1523 = ($1522|0)==($1519|0);
						if (!($1523)) {
							$scevgep$i$i$i = ((($1522)) + -4|0);
							$1524 = $scevgep$i$i$i;
							$1525 = (($1524) - ($1521))|0;
							$1526 = $1525 >>> 2;
							$1527 = $1526 ^ -1;
							$scevgep4$i$i$i = (($1522) + ($1527<<2)|0);
							HEAP32[$5>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($1519);
						___resumeException($$0|0);
						// unreachable;
					}
				} while(0);
				if ((label|0) == 94) {
					$298 = ($297|0)==($$cast163$lcssa|0);
					if (!($298)) {
						$scevgep$i$i$i132 = ((($297)) + -4|0);
						$299 = $scevgep$i$i$i132;
						$300 = (($299) - ($$lcssa))|0;
						$301 = $300 >>> 2;
						$302 = $301 ^ -1;
						$scevgep4$i$i$i133 = (($297) + ($302<<2)|0);
						HEAP32[$13>>2] = $scevgep4$i$i$i133;
					}
				}
				$1465 = HEAP32[$pending_short>>2]|0;
				$1466 = ($1465|0)==(0|0);
				$1467 = $1465;
				if (!($1466)) {
					$1468 = HEAP32[$11>>2]|0;
					$1469 = ($1468|0)==($1465|0);
					if (!($1469)) {
						$scevgep$i$i$i42 = ((($1468)) + -4|0);
						$1470 = $scevgep$i$i$i42;
						$1471 = (($1470) - ($1467))|0;
						$1472 = $1471 >>> 2;
						$1473 = $1472 ^ -1;
						$scevgep4$i$i$i43 = (($1468) + ($1473<<2)|0);
						HEAP32[$11>>2] = $scevgep4$i$i$i43;
					}
					__ZdlPv($1465);
				}
				$1474 = HEAP32[$pending_tall>>2]|0;
				$1475 = ($1474|0)==(0|0);
				$1476 = $1474;
				if (!($1475)) {
					$1477 = HEAP32[$9>>2]|0;
					$1478 = ($1477|0)==($1474|0);
					if (!($1478)) {
						$scevgep$i$i$i37 = ((($1477)) + -4|0);
						$1479 = $scevgep$i$i$i37;
						$1480 = (($1479) - ($1476))|0;
						$1481 = $1480 >>> 2;
						$1482 = $1481 ^ -1;
						$scevgep4$i$i$i38 = (($1477) + ($1482<<2)|0);
						HEAP32[$9>>2] = $scevgep4$i$i$i38;
					}
					__ZdlPv($1474);
				}
				$1483 = HEAP32[$pending>>2]|0;
				$1484 = ($1483|0)==(0|0);
				$1485 = $1483;
				if ($1484) {
					STACKTOP = sp;return;
				}
				$1486 = HEAP32[$7>>2]|0;
				$1487 = ($1486|0)==($1483|0);
				if (!($1487)) {
					$scevgep$i$i$i32 = ((($1486)) + -4|0);
					$1488 = $scevgep$i$i$i32;
					$1489 = (($1488) - ($1485))|0;
					$1490 = $1489 >>> 2;
					$1491 = $1490 ^ -1;
					$scevgep4$i$i$i33 = (($1486) + ($1491<<2)|0);
					HEAP32[$7>>2] = $scevgep4$i$i$i33;
				}
				__ZdlPv($1483);
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 2;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(1073741823);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 2;
				$11 = ($10>>>0)<(536870911);
				if ($11) {
					$15 = $9 >> 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 2;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$33 = $18;
					} else {
						$$0$i1 = $17;$41 = $18;$42 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 2;
					$$0$i1 = 1073741823;$41 = $12;$42 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 2;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $42;$33 = $41;
				}
				$24 = (($25) + ($26<<2)|0);
				$27 = (($25) + ($$0$i2<<2)|0);
				$28 = $27;
				$29 = HEAP32[$__x>>2]|0;
				HEAP32[$24>>2] = $29;
				$30 = ((($24)) + 4|0);
				$31 = $30;
				$32 = (($33) - ($$in))|0;
				$34 = $32 >> 2;
				$35 = (0 - ($34))|0;
				$36 = (($24) + ($35<<2)|0);
				$37 = $36;
				$38 = $$in;
				_memcpy(($36|0),($38|0),($32|0))|0;
				HEAP32[$this>>2] = $37;
				HEAP32[$0>>2] = $31;
				HEAP32[$7>>2] = $28;
				$39 = ($$in|0)==(0);
				if ($39) {
					return;
				}
				$40 = $$in;
				__ZdlPv($40);
				return;
			}
			function __ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($this,$__position,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 2;
				$5 = (($0) + ($4<<2)|0);
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)<($9>>>0);
				$11 = $7;
				$12 = $9;
				if ($10) {
					$13 = ($5|0)==($7|0);
					if ($13) {
						$14 = HEAP32[$__x>>2]|0;
						HEAP32[$5>>2] = $14;
						$15 = HEAP32[$6>>2]|0;
						$16 = ((($15)) + 4|0);
						HEAP32[$6>>2] = $16;
						$__p$0 = $5;
						return ($__p$0|0);
					}
					$17 = ((($5)) + 4|0);
					$18 = $17;
					$19 = (($11) - ($18))|0;
					$20 = $19 >> 2;
					$21 = (($5) + ($20<<2)|0);
					$22 = ($21>>>0)<($7>>>0);
					if ($22) {
						$$in$i7 = $7;$__i$01$i = $21;
						while(1) {
							$23 = HEAP32[$__i$01$i>>2]|0;
							HEAP32[$$in$i7>>2] = $23;
							$24 = ((($__i$01$i)) + 4|0);
							$25 = HEAP32[$6>>2]|0;
							$26 = ((($25)) + 4|0);
							HEAP32[$6>>2] = $26;
							$27 = ($24>>>0)<($7>>>0);
							if ($27) {
								$$in$i7 = $26;$__i$01$i = $24;
							} else {
								break;
							}
						}
					}
					$28 = (0 - ($20))|0;
					$29 = (($7) + ($28<<2)|0);
					_memmove(($29|0),($5|0),($19|0))|0;
					$30 = ($5>>>0)>($__x>>>0);
					if ($30) {
						$__xr$0 = $__x;
					} else {
						$31 = HEAP32[$6>>2]|0;
						$32 = ($31>>>0)>($__x>>>0);
						$33 = ((($__x)) + 4|0);
						$$ = $32 ? $33 : $__x;
						$__xr$0 = $$;
					}
					$34 = HEAP32[$__xr$0>>2]|0;
					HEAP32[$5>>2] = $34;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$35 = (($11) - ($1))|0;
				$36 = $35 >> 2;
				$37 = (($36) + 1)|0;
				$38 = ($37>>>0)>(1073741823);
				if ($38) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre11 = HEAP32[$this>>2]|0;
					$39 = $$pre11;
					$$pre$phiZ2D = $8;$104 = $39;$41 = $$pre11;$42 = $$pre;
				} else {
					$$pre$phiZ2D = $8;$104 = $0;$41 = $1;$42 = $12;
				}
				$40 = (($42) - ($41))|0;
				$43 = $40 >> 2;
				$44 = ($43>>>0)<(536870911);
				if ($44) {
					$48 = $40 >> 1;
					$49 = ($48>>>0)<($37>>>0);
					$50 = $49 ? $37 : $48;
					$51 = $5;
					$52 = (($51) - ($41))|0;
					$53 = $52 >> 2;
					$54 = ($50|0)==(0);
					if ($54) {
						$$0$i9 = 0;$58 = 0;$59 = $53;$89 = $51;
					} else {
						$$0$i8 = $50;$105 = $53;$106 = $51;
						label = 15;
					}
				} else {
					$45 = $5;
					$46 = (($45) - ($41))|0;
					$47 = $46 >> 2;
					$$0$i8 = 1073741823;$105 = $47;$106 = $45;
					label = 15;
				}
				if ((label|0) == 15) {
					$55 = $$0$i8 << 2;
					$56 = (__Znwj($55)|0);
					$$0$i9 = $$0$i8;$58 = $56;$59 = $105;$89 = $106;
				}
				$57 = (($58) + ($59<<2)|0);
				$60 = $57;
				$61 = (($58) + ($$0$i9<<2)|0);
				$62 = $61;
				$63 = ($59|0)==($$0$i9|0);
				do {
					if ($63) {
						$64 = ($59|0)>(0);
						if ($64) {
							$65 = (($59) + 1)|0;
							$66 = (($65|0) / -2)&-1;
							$67 = (($57) + ($66<<2)|0);
							$68 = $67;
							$83 = $67;$86 = $104;$__v$sroa$21$0 = $68;$__v$sroa$37$0 = $62;
							break;
						}
						$69 = $59 << 1;
						$70 = ($59|0)==(0);
						$71 = $70 ? 1 : $69;
						$72 = $71 << 2;
						__THREW__ = 0;
						$73 = (invoke_ii(29,($72|0))|0);
						$74 = __THREW__; __THREW__ = 0;
						$75 = $74&1;
						if (!($75)) {
							$76 = $71 >>> 2;
							$77 = (($73) + ($76<<2)|0);
							$78 = $77;
							$79 = (($73) + ($71<<2)|0);
							$80 = $79;
							$81 = ($58|0)==(0|0);
							if ($81) {
								$83 = $77;$86 = $104;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
								break;
							}
							__ZdlPv($58);
							$$pre12 = HEAP32[$this>>2]|0;
							$83 = $77;$86 = $$pre12;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
							break;
						}
						$101 = ___cxa_find_matching_catch_2()|0;
						$102 = tempRet0;
						$103 = ($58|0)==(0|0);
						if ($103) {
							___resumeException($101|0);
							// unreachable;
						}
						__ZdlPv($58);
						___resumeException($101|0);
						// unreachable;
					} else {
						$83 = $57;$86 = $104;$__v$sroa$21$0 = $60;$__v$sroa$37$0 = $62;
					}
				} while(0);
				$82 = HEAP32[$__x>>2]|0;
				HEAP32[$83>>2] = $82;
				$84 = $__v$sroa$21$0;
				$85 = ((($84)) + 4|0);
				$87 = $86;
				$88 = (($89) - ($87))|0;
				$90 = $88 >> 2;
				$91 = (0 - ($90))|0;
				$92 = (($84) + ($91<<2)|0);
				$93 = $92;
				_memcpy(($92|0),($86|0),($88|0))|0;
				$94 = HEAP32[$6>>2]|0;
				$95 = (($94) - ($89))|0;
				$96 = $95 >> 2;
				_memcpy(($85|0),($5|0),($95|0))|0;
				$97 = (($85) + ($96<<2)|0);
				$98 = $97;
				$99 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $93;
				HEAP32[$6>>2] = $98;
				HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
				$100 = ($99|0)==(0|0);
				if ($100) {
					$__p$0 = $84;
					return ($__p$0|0);
				}
				__ZdlPv($99);
				$__p$0 = $84;
				return ($__p$0|0);
			}
			function __ZN12_GLOBAL__N_115join_charactersERNSt3__16vectorIP8TextlineNS0_9allocatorIS3_EEEE($tlpv) {
				$tlpv = $tlpv|0;
				var $$ = 0, $$6 = 0, $$6$lcssa = 0, $$in = 0, $$lcssa = 0, $$lcssa85 = 0, $$lcssa86 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
				var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
				var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
				var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $current_line$031 = 0, $i$0$ph30 = 0, $j$025 = 0, $j$025$lcssa = 0, $k$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($tlpv)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$tlpv>>2]|0;
				$3 = ($1|0)==($2|0);
				if ($3) {
					return;
				} else {
					$$in = $2;$current_line$031 = 0;
				}
				while(1) {
					$4 = $$in;
					$5 = (($4) + ($current_line$031<<2)|0);
					$6 = HEAP32[$5>>2]|0;
					$7 = ((($6)) + 16|0);
					$8 = ((($6)) + 20|0);
					$9 = HEAP32[$8>>2]|0;
					$10 = HEAP32[$7>>2]|0;
					$11 = (($9) - ($10))|0;
					$12 = ($11|0)>(4);
					L5: do {
						if ($12) {
							$i$0$ph30 = 0;
							while(1) {
								$18 = (($i$0$ph30) + 1)|0;
								L8: while(1) {
									$26 = (__ZNK8Textline9characterEi($6,$i$0$ph30)|0);
									$27 = HEAP32[$8>>2]|0;
									$28 = HEAP32[$7>>2]|0;
									$29 = (($27) - ($28))|0;
									$30 = $29 >> 2;
									$31 = ($18|0)<($30|0);
									if (!($31)) {
										$14 = $28;$15 = $27;
										break;
									}
									$32 = ((($26)) + 4|0);
									$33 = ((($26)) + 12|0);
									$j$025 = $18;
									while(1) {
										$34 = (__ZNK8Textline9characterEi($6,$j$025)|0);
										$35 = (__ZNK9Rectangle10h_overlapsERKS_($26,$34)|0);
										if ($35) {
											$36 = HEAP32[$32>>2]|0;
											$37 = HEAP32[$33>>2]|0;
											$38 = (($37) + ($36))|0;
											$39 = (($38|0) / 2)&-1;
											$40 = ((($34)) + 4|0);
											$41 = HEAP32[$40>>2]|0;
											$42 = ((($34)) + 12|0);
											$43 = HEAP32[$42>>2]|0;
											$44 = (($43) + ($41))|0;
											$45 = (($44|0) / 2)&-1;
											$46 = ($39|0)<($45|0);
											$$ = $46 ? $26 : $34;
											$$6 = $46 ? $34 : $26;
											$47 = (__ZNK9Rectangle16includes_hcenterERKS_($$6,$$)|0);
											if ($47) {
												$$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
												break;
											}
											$48 = (__ZNK9Rectangle16includes_hcenterERKS_($$,$$6)|0);
											if ($48) {
												$$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
												break;
											}
											$49 = ((($$6)) + 4|0);
											$50 = HEAP32[$49>>2]|0;
											$51 = ((($$)) + 12|0);
											$52 = HEAP32[$51>>2]|0;
											$53 = ($50|0)>($52|0);
											if ($53) {
												$54 = HEAP32[$$6>>2]|0;
												$55 = ((($$6)) + 8|0);
												$56 = HEAP32[$55>>2]|0;
												$57 = (($56) + ($54))|0;
												$58 = (($57|0) / 2)&-1;
												$59 = HEAP32[$$>>2]|0;
												$60 = ((($$)) + 8|0);
												$61 = HEAP32[$60>>2]|0;
												$62 = (($61) + ($59))|0;
												$63 = (($62|0) / 2)&-1;
												$64 = ($58|0)<($63|0);
												if ($64) {
													$$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
													break;
												}
											}
											$65 = ((($$6)) + 16|0);
											$66 = ((($$6)) + 20|0);
											$67 = HEAP32[$66>>2]|0;
											$68 = HEAP32[$65>>2]|0;
											$69 = (($67) - ($68))|0;
											$70 = ($69|0)==(8);
											if ($70) {
												$71 = (__ZN9Character4blobEi($$6,0)|0);
												$72 = ((($71)) + 12|0);
												$73 = HEAP32[$72>>2]|0;
												$74 = ((($71)) + 4|0);
												$75 = HEAP32[$74>>2]|0;
												$76 = (($73) + 1)|0;
												$77 = (($76) - ($75))|0;
												$78 = ((($71)) + 8|0);
												$79 = HEAP32[$78>>2]|0;
												$80 = HEAP32[$71>>2]|0;
												$81 = (($79) + 1)|0;
												$82 = (($81) - ($80))|0;
												$83 = $77 << 1;
												$84 = Math_imul($83, $82)|0;
												$85 = (__ZN9Character4blobEi($$6,1)|0);
												$86 = ((($85)) + 12|0);
												$87 = HEAP32[$86>>2]|0;
												$88 = ((($85)) + 4|0);
												$89 = HEAP32[$88>>2]|0;
												$90 = (($87) + 1)|0;
												$91 = (($90) - ($89))|0;
												$92 = ((($85)) + 8|0);
												$93 = HEAP32[$92>>2]|0;
												$94 = HEAP32[$85>>2]|0;
												$95 = (($93) + 1)|0;
												$96 = (($95) - ($94))|0;
												$97 = Math_imul($96, $91)|0;
												$98 = ($84|0)<($97|0);
												if ($98) {
													$99 = (__ZN9Character4blobEi($$6,0)|0);
													$100 = (__ZNK9Rectangle16includes_vcenterERKS_($99,$$)|0);
													if ($100) {
														$$6$lcssa = $$6;$$lcssa = $34;$$lcssa85 = $40;$$lcssa86 = $42;$j$025$lcssa = $j$025;
														break;
													}
												}
											}
										}
										$158 = (($j$025) + 1)|0;
										$159 = HEAP32[$8>>2]|0;
										$160 = HEAP32[$7>>2]|0;
										$161 = (($159) - ($160))|0;
										$162 = $161 >> 2;
										$163 = ($158|0)<($162|0);
										if ($163) {
											$j$025 = $158;
										} else {
											$14 = $160;$15 = $159;
											break L8;
										}
									}
									$101 = HEAP32[$33>>2]|0;
									$102 = HEAP32[$32>>2]|0;
									$103 = (($101) + 1)|0;
									$104 = (($103) - ($102))|0;
									$105 = ((($26)) + 8|0);
									$106 = HEAP32[$105>>2]|0;
									$107 = HEAP32[$26>>2]|0;
									$108 = (($106) + 1)|0;
									$109 = (($108) - ($107))|0;
									$110 = $104 << 6;
									$111 = Math_imul($110, $109)|0;
									$112 = (__ZN9Character9main_blobEv($$lcssa)|0);
									$113 = ((($112)) + 12|0);
									$114 = HEAP32[$113>>2]|0;
									$115 = ((($112)) + 4|0);
									$116 = HEAP32[$115>>2]|0;
									$117 = (($114) + 1)|0;
									$118 = (($117) - ($116))|0;
									$119 = ((($112)) + 8|0);
									$120 = HEAP32[$119>>2]|0;
									$121 = HEAP32[$112>>2]|0;
									$122 = (($120) + 1)|0;
									$123 = (($122) - ($121))|0;
									$124 = Math_imul($123, $118)|0;
									$125 = ($111|0)<($124|0);
									do {
										if ($125) {
											$k$0 = $i$0$ph30;
										} else {
											$126 = HEAP32[$$lcssa86>>2]|0;
											$127 = HEAP32[$$lcssa85>>2]|0;
											$128 = (($126) + 1)|0;
											$129 = (($128) - ($127))|0;
											$130 = ((($$lcssa)) + 8|0);
											$131 = HEAP32[$130>>2]|0;
											$132 = HEAP32[$$lcssa>>2]|0;
											$133 = (($131) + 1)|0;
											$134 = (($133) - ($132))|0;
											$135 = $129 << 6;
											$136 = Math_imul($135, $134)|0;
											$137 = (__ZN9Character9main_blobEv($26)|0);
											$138 = ((($137)) + 12|0);
											$139 = HEAP32[$138>>2]|0;
											$140 = ((($137)) + 4|0);
											$141 = HEAP32[$140>>2]|0;
											$142 = (($139) + 1)|0;
											$143 = (($142) - ($141))|0;
											$144 = ((($137)) + 8|0);
											$145 = HEAP32[$144>>2]|0;
											$146 = HEAP32[$137>>2]|0;
											$147 = (($145) + 1)|0;
											$148 = (($147) - ($146))|0;
											$149 = Math_imul($148, $143)|0;
											$150 = ($136|0)<($149|0);
											if ($150) {
												$k$0 = $j$025$lcssa;
											} else {
												$151 = ($$6$lcssa|0)==($$lcssa|0);
												if ($151) {
													__ZN9Character4joinERS_($$lcssa,$26);
													$k$0 = $i$0$ph30;
													break;
												} else {
													__ZN9Character4joinERS_($26,$$lcssa);
													$k$0 = $j$025$lcssa;
													break;
												}
											}
										}
									} while(0);
									__ZN8Textline16delete_characterEi($6,$k$0);
									$152 = HEAP32[$8>>2]|0;
									$153 = HEAP32[$7>>2]|0;
									$154 = (($152) - ($153))|0;
									$155 = $154 >> 2;
									$156 = (($155) + -1)|0;
									$157 = ($i$0$ph30|0)<($156|0);
									if (!($157)) {
										break L5;
									}
								}
								$13 = (($15) - ($14))|0;
								$16 = $13 >> 2;
								$17 = (($16) + -1)|0;
								$19 = ($18|0)<($17|0);
								if ($19) {
									$i$0$ph30 = $18;
								} else {
									break;
								}
							}
						}
					} while(0);
					$20 = (($current_line$031) + 1)|0;
					$21 = HEAP32[$0>>2]|0;
					$22 = HEAP32[$tlpv>>2]|0;
					$23 = (($21) - ($22))|0;
					$24 = $23 >> 2;
					$25 = ($20>>>0)<($24>>>0);
					if ($25) {
						$$in = $22;$current_line$031 = $20;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN9TextblockD2Ev($this) {
				$this = $this|0;
				var $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0;
				var $i$07$in = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				$6 = $3;
				do {
					if ($5) {
						$7 = $4 >> 2;
						$18 = $6;$i$07$in = $7;
						while(1) {
							$i$07 = (($i$07$in) + -1)|0;
							$17 = (($18) + ($i$07<<2)|0);
							$19 = HEAP32[$17>>2]|0;
							$20 = ($19|0)==(0|0);
							if (!($20)) {
								__THREW__ = 0;
								invoke_vi(111,($19|0));
								$22 = __THREW__; __THREW__ = 0;
								$23 = $22&1;
								if ($23) {
									$$lcssa = $19;
									break;
								}
								__ZdlPv($19);
							}
							$21 = ($i$07$in|0)>(1);
							if (!($21)) {
								label = 3;
								break;
							}
							$$pre = HEAP32[$0>>2]|0;
							$18 = $$pre;$i$07$in = $i$07;
						}
						if ((label|0) == 3) {
							$$phi$trans$insert = ((($this)) + 16|0);
							$$pre9 = HEAP32[$$phi$trans$insert>>2]|0;
							$8 = $$pre9;
							break;
						}
						$24 = ___cxa_find_matching_catch_2()|0;
						$25 = tempRet0;
						__ZdlPv($$lcssa);
						$26 = HEAP32[$0>>2]|0;
						$27 = ($26|0)==(0|0);
						$28 = $26;
						if ($27) {
							___resumeException($24|0);
							// unreachable;
						}
						$29 = HEAP32[$1>>2]|0;
						$30 = ($29|0)==($26|0);
						if (!($30)) {
							$scevgep$i$i$i = ((($29)) + -4|0);
							$31 = $scevgep$i$i$i;
							$32 = (($31) - ($28))|0;
							$33 = $32 >>> 2;
							$34 = $33 ^ -1;
							$scevgep4$i$i$i = (($29) + ($34<<2)|0);
							HEAP32[$1>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($26);
						___resumeException($24|0);
						// unreachable;
					} else {
						$8 = $6;
					}
				} while(0);
				$9 = ($8|0)==(0|0);
				$10 = $8;
				if ($9) {
					return;
				}
				$11 = HEAP32[$1>>2]|0;
				$12 = ($11|0)==($8|0);
				if (!($12)) {
					$scevgep$i$i$i1 = ((($11)) + -4|0);
					$13 = $scevgep$i$i$i1;
					$14 = (($13) - ($10))|0;
					$15 = $14 >>> 2;
					$16 = $15 ^ -1;
					$scevgep4$i$i$i2 = (($11) + ($16<<2)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i2;
				}
				__ZdlPv($8);
				return;
			}
			function __ZN9Textblock9recognizeERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$byval_copy = 0, $$in = 0, $$in50 = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa103 = 0, $$lcssa111 = 0, $$lcssa99 = 0, $$min_vdistance$0 = 0, $$pre = 0, $$pre$i = 0, $$pre47 = 0, $$pre48 = 0, $$pre49 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
				var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
				var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
				var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
				var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
				var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
				var $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
				var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
				var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $i$031 = 0, $i1$028 = 0, $i1$028$in = 0, $i2$0$ph21 = 0, $i2$017 = 0, $i2$017$phi = 0, $i4$015 = 0, $j$024 = 0, $min_vdistance$0$ph$lcssa = 0, $min_vdistance$0$ph22 = 0;
				var $or$cond = 0, $or$cond67 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, $vdistance7$0 = 0, $vdistance7$013 = 0, $vdistance7$014 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 8|0;
				$0 = sp + 4|0;
				$1 = sp;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = ($6|0)>(0);
				if ($7) {
					$$in50 = $5;$i$031 = 0;
					while(1) {
						$14 = $$in50;
						$15 = (($14) + ($i$031<<2)|0);
						$16 = HEAP32[$15>>2]|0;
						__ZNK8Textline10recognize1ERK7Charset($16,$control);
						$17 = HEAP32[$2>>2]|0;
						$18 = (($17) + ($i$031<<2)|0);
						$19 = HEAP32[$18>>2]|0;
						__ZN8Textline10recognize2ERK7Charset($19,$control);
						$20 = (($i$031) + 1)|0;
						$21 = HEAP32[$3>>2]|0;
						$22 = HEAP32[$2>>2]|0;
						$23 = (($21) - ($22))|0;
						$24 = $23 >> 2;
						$25 = ($20|0)<($24|0);
						if ($25) {
							$$in50 = $22;$i$031 = $20;
						} else {
							break;
						}
					}
				}
				__ZN9Textblock13apply_filtersERK7Control($this,$control);
				$8 = HEAP32[$3>>2]|0;
				$9 = HEAP32[$2>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = ($10|0)>(0);
				do {
					if ($11) {
						$12 = $9;
						$13 = $10 >> 2;
						$30 = $12;$i1$028$in = $13;
						while(1) {
							$i1$028 = (($i1$028$in) + -1)|0;
							$29 = (($30) + ($i1$028<<2)|0);
							$31 = HEAP32[$29>>2]|0;
							$32 = ((($31)) + 16|0);
							$33 = ((($31)) + 20|0);
							$34 = HEAP32[$33>>2]|0;
							$35 = HEAP32[$32>>2]|0;
							$36 = (($34) - ($35))|0;
							$37 = ($36|0)>(0);
							L10: do {
								if ($37) {
									$j$024 = 0;
									while(1) {
										$44 = (__ZNK8Textline9characterEi($31,$j$024)|0);
										$45 = ((($44)) + 28|0);
										$46 = ((($44)) + 32|0);
										$47 = HEAP32[$46>>2]|0;
										$48 = HEAP32[$45>>2]|0;
										$49 = ($47|0)==($48|0);
										$42 = (($j$024) + 1)|0;
										if (!($49)) {
											break L10;
										}
										$38 = HEAP32[$33>>2]|0;
										$39 = HEAP32[$32>>2]|0;
										$40 = (($38) - ($39))|0;
										$41 = $40 >> 2;
										$43 = ($42|0)<($41|0);
										if ($43) {
											$j$024 = $42;
										} else {
											break;
										}
									}
									$$pre47 = HEAP32[$2>>2]|0;
									$51 = $$pre47;
									label = 12;
								} else {
									$51 = $30;
									label = 12;
								}
							} while(0);
							if ((label|0) == 12) {
								label = 0;
								$50 = (($51) + ($i1$028<<2)|0);
								$52 = HEAP32[$50>>2]|0;
								$53 = ($52|0)==(0|0);
								if ($53) {
									$57 = $51;
								} else {
									__THREW__ = 0;
									invoke_vi(111,($52|0));
									$54 = __THREW__; __THREW__ = 0;
									$55 = $54&1;
									if ($55) {
										$$lcssa111 = $52;
										label = 19;
										break;
									}
									__ZdlPv($52);
									$$pre$i = HEAP32[$2>>2]|0;
									$57 = $$pre$i;
								}
								$56 = (($57) + ($i1$028<<2)|0);
								$58 = ((($56)) + 4|0);
								$59 = HEAP32[$3>>2]|0;
								$60 = $58;
								$61 = (($59) - ($60))|0;
								$62 = $61 >> 2;
								_memmove(($56|0),($58|0),($61|0))|0;
								$63 = (($56) + ($62<<2)|0);
								$64 = HEAP32[$3>>2]|0;
								$65 = ($64|0)==($63|0);
								if (!($65)) {
									$__new_last2$i$i$i$i = $63;
									$scevgep$i$i$i$i = ((($64)) + -4|0);
									$67 = $scevgep$i$i$i$i;
									$68 = (($67) - ($__new_last2$i$i$i$i))|0;
									$69 = $68 >>> 2;
									$70 = $69 ^ -1;
									$scevgep4$i$i$i$i = (($64) + ($70<<2)|0);
									HEAP32[$3>>2] = $scevgep4$i$i$i$i;
								}
							}
							$66 = ($i1$028$in|0)>(1);
							if (!($66)) {
								label = 6;
								break;
							}
							$$pre = HEAP32[$2>>2]|0;
							$30 = $$pre;$i1$028$in = $i1$028;
						}
						if ((label|0) == 6) {
							$$pre48 = HEAP32[$3>>2]|0;
							$$pre49 = HEAP32[$2>>2]|0;
							$$in = $$pre48;$27 = $$pre49;
							break;
						}
						else if ((label|0) == 19) {
							$71 = ___cxa_find_matching_catch_2()|0;
							$72 = tempRet0;
							__ZdlPv($$lcssa111);
							___resumeException($71|0);
							// unreachable;
						}
					} else {
						$$in = $8;$27 = $9;
					}
				} while(0);
				$26 = (($$in) - ($27))|0;
				$28 = ($26|0)>(8);
				if (!($28)) {
					STACKTOP = sp;return;
				}
				$73 = $$in;
				$74 = ((($73)) + -4|0);
				$75 = HEAP32[$74>>2]|0;
				$76 = (__ZNK8Textline12mean_vcenterEv($75)|0);
				$77 = HEAP32[$2>>2]|0;
				$78 = HEAP32[$77>>2]|0;
				$79 = (__ZNK8Textline12mean_vcenterEv($78)|0);
				$80 = (($76) - ($79))|0;
				$81 = HEAP32[$3>>2]|0;
				$82 = HEAP32[$2>>2]|0;
				$83 = (($81) - ($82))|0;
				$84 = $83 >> 2;
				$85 = (($84) + -1)|0;
				$86 = (($80|0) / ($85|0))&-1;
				$87 = ($83|0)>(4);
				$88 = $82;
				L31: do {
					if ($87) {
						$191 = $88;$192 = 1;$i2$0$ph21 = 0;$min_vdistance$0$ph22 = $86;
						while(1) {
							$95 = $191;$98 = $192;$i2$017 = $i2$0$ph21;
							while(1) {
								$94 = (($95) + ($i2$017<<2)|0);
								$96 = HEAP32[$94>>2]|0;
								$97 = (($95) + ($98<<2)|0);
								$99 = HEAP32[$97>>2]|0;
								$100 = ((($96)) + 16|0);
								$101 = ((($96)) + 20|0);
								$102 = HEAP32[$101>>2]|0;
								$103 = HEAP32[$100>>2]|0;
								$104 = (($102) - ($103))|0;
								$105 = $104 >> 2;
								$106 = ((($99)) + 16|0);
								$107 = ((($99)) + 20|0);
								$108 = HEAP32[$107>>2]|0;
								$109 = HEAP32[$106>>2]|0;
								$110 = (($108) - ($109))|0;
								$111 = $110 >> 2;
								$112 = (__ZN5Ocrad7similarEiiii($105,$111,50,1)|0);
								if ($112) {
									$113 = ((($96)) + 16|0);
									$114 = HEAP32[$113>>2]|0;
									$115 = HEAP32[$101>>2]|0;
									$116 = ($114|0)==($115|0);
									if ($116) {
										$135 = 0;
									} else {
										$117 = ((($115)) + -4|0);
										$118 = HEAP32[$117>>2]|0;
										$119 = ((($118)) + 8|0);
										$120 = HEAP32[$119>>2]|0;
										$121 = HEAP32[$114>>2]|0;
										$122 = HEAP32[$121>>2]|0;
										$123 = (($120) - ($122))|0;
										$135 = $123;
									}
									$124 = ((($99)) + 16|0);
									$125 = HEAP32[$124>>2]|0;
									$126 = HEAP32[$107>>2]|0;
									$127 = ($125|0)==($126|0);
									if ($127) {
										$136 = 0;
									} else {
										$128 = ((($126)) + -4|0);
										$129 = HEAP32[$128>>2]|0;
										$130 = ((($129)) + 8|0);
										$131 = HEAP32[$130>>2]|0;
										$132 = HEAP32[$125>>2]|0;
										$133 = HEAP32[$132>>2]|0;
										$134 = (($131) - ($133))|0;
										$136 = $134;
									}
									$137 = (__ZN5Ocrad7similarEiiii($135,$136,30,1)|0);
									if ($137) {
										$138 = (__ZNK8Textline12mean_vcenterEv($99)|0);
										$139 = (__ZNK8Textline12mean_vcenterEv($96)|0);
										$140 = (($138) - ($139))|0;
										$141 = ($140|0)<($min_vdistance$0$ph22|0);
										if ($141) {
											$149 = (__ZNK8Textline11mean_heightEv($96)|0);
											$150 = (__ZNK8Textline11mean_heightEv($99)|0);
											$151 = ($149|0)<(10);
											$152 = ($150|0)<(10);
											$or$cond = $151 | $152;
											if (!($or$cond)) {
												$153 = (__ZN5Ocrad7similarEiiii($149,$150,20,1)|0);
												if ($153) {
													$$lcssa101 = $140;$$lcssa102 = $149;$$lcssa103 = $150;$$lcssa99 = $98;
													break;
												}
											}
										}
									}
								}
								$142 = (($98) + 1)|0;
								$143 = HEAP32[$3>>2]|0;
								$144 = HEAP32[$2>>2]|0;
								$145 = (($143) - ($144))|0;
								$146 = $145 >> 2;
								$147 = ($142|0)<($146|0);
								$148 = $144;
								if ($147) {
									$i2$017$phi = $98;$95 = $148;$98 = $142;$i2$017 = $i2$017$phi;
								} else {
									$193 = $148;$91 = $144;$92 = $143;$min_vdistance$0$ph$lcssa = $min_vdistance$0$ph22;
									break L31;
								}
							}
							$154 = $$lcssa101 << 1;
							$155 = (($$lcssa103) + ($$lcssa102))|0;
							$156 = ($154|0)>($155|0);
							$$min_vdistance$0 = $156 ? $$lcssa101 : $min_vdistance$0$ph22;
							$157 = (($$lcssa99) + 1)|0;
							$158 = HEAP32[$3>>2]|0;
							$159 = HEAP32[$2>>2]|0;
							$160 = (($158) - ($159))|0;
							$161 = $160 >> 2;
							$162 = ($157|0)<($161|0);
							$163 = $159;
							if ($162) {
								$191 = $163;$192 = $157;$i2$0$ph21 = $$lcssa99;$min_vdistance$0$ph22 = $$min_vdistance$0;
							} else {
								$193 = $163;$91 = $159;$92 = $158;$min_vdistance$0$ph$lcssa = $$min_vdistance$0;
								break;
							}
						}
					} else {
						$193 = $88;$91 = $82;$92 = $81;$min_vdistance$0$ph$lcssa = $86;
					}
				} while(0);
				$89 = ($min_vdistance$0$ph$lcssa|0)>(0);
				$90 = (($92) - ($91))|0;
				$93 = ($90|0)>(4);
				$or$cond67 = $89 & $93;
				if (!($or$cond67)) {
					STACKTOP = sp;return;
				}
				$172 = $193;$175 = 1;$i4$015 = 0;
				while(1) {
					$171 = (($172) + ($i4$015<<2)|0);
					$173 = HEAP32[$171>>2]|0;
					$174 = (($172) + ($175<<2)|0);
					$176 = HEAP32[$174>>2]|0;
					$177 = (__ZNK8Textline12mean_vcenterEv($176)|0);
					$178 = (__ZNK8Textline12mean_vcenterEv($173)|0);
					$179 = (($177) - ($178))|0;
					$vdistance7$013 = (($179) - ($min_vdistance$0$ph$lcssa))|0;
					$180 = $vdistance7$013 << 1;
					$181 = ($180|0)>($min_vdistance$0$ph$lcssa|0);
					$182 = (($i4$015) + 1)|0;
					if ($181) {
						$185 = $182;$vdistance7$014 = $vdistance7$013;
						while(1) {
							$183 = HEAP32[$2>>2]|0;
							$184 = (($183) + ($185<<2)|0);
							$186 = $184;
							HEAP32[$0>>2] = $186;
							$187 = (__Znwj(28)|0);
							;HEAP32[$187>>2]=0|0;HEAP32[$187+4>>2]=0|0;HEAP32[$187+8>>2]=0|0;HEAP32[$187+12>>2]=0|0;HEAP32[$187+16>>2]=0|0;HEAP32[$187+20>>2]=0|0;HEAP32[$187+24>>2]=0|0;
							HEAP32[$1>>2] = $187;
							;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
							(__ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($2,$$byval_copy,$1)|0);
							$vdistance7$0 = (($vdistance7$014) - ($min_vdistance$0$ph$lcssa))|0;
							$188 = $vdistance7$0 << 1;
							$189 = ($188|0)>($min_vdistance$0$ph$lcssa|0);
							$190 = (($185) + 1)|0;
							if ($189) {
								$185 = $190;$vdistance7$014 = $vdistance7$0;
							} else {
								$$lcssa = $190;
								break;
							}
						}
					} else {
						$$lcssa = $182;
					}
					$164 = (($$lcssa) + 1)|0;
					$165 = HEAP32[$3>>2]|0;
					$166 = HEAP32[$2>>2]|0;
					$167 = (($165) - ($166))|0;
					$168 = $167 >> 2;
					$169 = ($164|0)<($168|0);
					$170 = $166;
					if ($169) {
						$172 = $170;$175 = $164;$i4$015 = $$lcssa;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZNK9Textblock8textlineEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 16|0);
					$2 = ((($this)) + 20|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2315);
				$$phi$trans$insert = ((($this)) + 16|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZNK9Textblock6dprintERK7Controlbb($this,$control,$graph,$recursive) {
				$this = $this|0;
				$control = $control|0;
				$graph = $graph|0;
				$recursive = $recursive|0;
				var $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				$0 = ((($control)) + 16|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				HEAP32[$vararg_buffer>>2] = $7;
				(_fprintf($1,2342,$vararg_buffer)|0);
				$8 = HEAP32[$3>>2]|0;
				$9 = HEAP32[$2>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = ($10|0)>(0);
				$12 = HEAP32[$0>>2]|0;
				if (!($11)) {
					$$lcssa = $12;
					(_fputc(10,$$lcssa)|0);
					STACKTOP = sp;return;
				}
				$$in = $9;$23 = $12;$i$01 = 0;
				while(1) {
					$13 = $$in;
					$14 = (($13) + ($i$01<<2)|0);
					$15 = HEAP32[$14>>2]|0;
					$16 = ((($15)) + 16|0);
					$17 = ((($15)) + 20|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = HEAP32[$16>>2]|0;
					$20 = (($18) - ($19))|0;
					$21 = $20 >> 2;
					$22 = (($i$01) + 1)|0;
					HEAP32[$vararg_buffer1>>2] = $21;
					$vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
					HEAP32[$vararg_ptr4>>2] = $22;
					(_fprintf($23,2353,$vararg_buffer1)|0);
					$24 = HEAP32[$2>>2]|0;
					$25 = (($24) + ($i$01<<2)|0);
					$26 = HEAP32[$25>>2]|0;
					__ZNK8Textline6dprintERK7Controlbb($26,$control,$graph,$recursive);
					$27 = HEAP32[$3>>2]|0;
					$28 = HEAP32[$2>>2]|0;
					$29 = (($27) - ($28))|0;
					$30 = $29 >> 2;
					$31 = ($22|0)<($30|0);
					$32 = HEAP32[$0>>2]|0;
					if ($31) {
						$$in = $28;$23 = $32;$i$01 = $22;
					} else {
						$$lcssa = $32;
						break;
					}
				}
				(_fputc(10,$$lcssa)|0);
				STACKTOP = sp;return;
			}
			function __ZNK9Textblock6xprintERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				$0 = ((($control)) + 20|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				HEAP32[$vararg_buffer>>2] = $7;
				(_fprintf($1,2379,$vararg_buffer)|0);
				$8 = HEAP32[$3>>2]|0;
				$9 = HEAP32[$2>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = ($10|0)>(0);
				if (!($11)) {
					STACKTOP = sp;return;
				}
				$$in = $9;$i$01 = 0;
				while(1) {
					$12 = $$in;
					$13 = HEAP32[$0>>2]|0;
					$14 = (($i$01) + 1)|0;
					$15 = (($12) + ($i$01<<2)|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = ((($16)) + 16|0);
					$18 = ((($16)) + 20|0);
					$19 = HEAP32[$18>>2]|0;
					$20 = HEAP32[$17>>2]|0;
					$21 = (($19) - ($20))|0;
					$22 = $21 >> 2;
					$23 = (__ZNK8Textline11mean_heightEv($16)|0);
					HEAP32[$vararg_buffer1>>2] = $14;
					$vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
					HEAP32[$vararg_ptr4>>2] = $22;
					$vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
					HEAP32[$vararg_ptr5>>2] = $23;
					(_fprintf($13,2389,$vararg_buffer1)|0);
					$24 = HEAP32[$2>>2]|0;
					$25 = (($24) + ($i$01<<2)|0);
					$26 = HEAP32[$25>>2]|0;
					__ZNK8Textline6xprintERK7Control($26,$control);
					$27 = HEAP32[$3>>2]|0;
					$28 = HEAP32[$2>>2]|0;
					$29 = (($27) - ($28))|0;
					$30 = $29 >> 2;
					$31 = ($14|0)<($30|0);
					if ($31) {
						$$in = $28;$i$01 = $14;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZNK9Textblock5cmarkER10Page_image($this,$page_image) {
				$this = $this|0;
				$page_image = $page_image|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if ($5) {
					$$in = $3;$i$01 = 0;
				} else {
					return;
				}
				while(1) {
					$6 = $$in;
					$7 = (($6) + ($i$01<<2)|0);
					$8 = HEAP32[$7>>2]|0;
					__ZNK8Textline5cmarkER10Page_image($8,$page_image);
					$9 = (($i$01) + 1)|0;
					$10 = HEAP32[$1>>2]|0;
					$11 = HEAP32[$0>>2]|0;
					$12 = (($10) - ($11))|0;
					$13 = $12 >> 2;
					$14 = ($9|0)<($13|0);
					if ($14) {
						$$in = $11;$i$01 = $9;
					} else {
						break;
					}
				}
				return;
			}
			function __ZNK9Textblock5lmarkER10Page_image($this,$page_image) {
				$this = $this|0;
				$page_image = $page_image|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if ($5) {
					$$in = $3;$i$01 = 0;
				} else {
					return;
				}
				while(1) {
					$6 = $$in;
					$7 = (($6) + ($i$01<<2)|0);
					$8 = HEAP32[$7>>2]|0;
					__ZN10Page_image10draw_trackERK5Track($page_image,$8);
					$9 = (($i$01) + 1)|0;
					$10 = HEAP32[$1>>2]|0;
					$11 = HEAP32[$0>>2]|0;
					$12 = (($10) - ($11))|0;
					$13 = $12 >> 2;
					$14 = ($9|0)<($13|0);
					if ($14) {
						$$in = $11;$i$01 = $9;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN9Character10recognize1ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = $4 >> 2;
				switch ($5|0) {
					case 1:  {
						$6 = (__ZN9Character4blobEi($this,0)|0);
						$7 = ((($6)) + 28|0);
						$8 = ((($6)) + 32|0);
						$9 = HEAP32[$8>>2]|0;
						$10 = HEAP32[$7>>2]|0;
						$11 = (($9) - ($10))|0;
						$12 = $11 >> 2;
						switch ($12|0) {
							case 0:  {
								__ZN9Character12recognize110ERK7CharsetRK9Rectangle($this,$charset,$charbox);
								return;
								break;
							}
							case 1:  {
								__ZN9Character12recognize111ERK7CharsetRK9Rectangle($this,$charset,$charbox);
								return;
								break;
							}
							case 2:  {
								__ZN9Character12recognize112ERK9Rectangle($this,$charbox);
								return;
								break;
							}
							default: {
								return;
							}
						}
						break;
					}
					case 2:  {
						__ZN9Character11recognize12ERK7CharsetRK9Rectangle($this,$charset,$charbox);
						return;
						break;
					}
					case 3:  {
						__ZN9Character11recognize13ERK7CharsetRK9Rectangle($this,$charset,$charbox);
						return;
						break;
					}
					default: {
						return;
					}
				}
			}
			function __ZN9Character12recognize110ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$bar$0$off0 = 0, $$lcssa = 0, $$lcssa165 = 0, $$lcssa168 = 0, $$lcssa254 = 0, $$phi$trans$insert210 = 0, $$pre = 0, $$pre$i = 0, $$pre$i36 = 0, $$pre$i39 = 0, $$pre200 = 0, $$pre201$pre = 0, $$pre202$pre = 0, $$pre204 = 0, $$pre205 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre211 = 0;
				var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
				var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
				var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
				var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
				var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
				var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
				var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
				var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
				var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
				var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
				var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
				var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
				var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
				var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
				var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
				var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
				var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
				var $1303 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
				var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
				var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
				var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
				var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
				var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
				var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
				var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
				var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
				var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
				var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
				var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
				var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
				var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
				var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
				var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
				var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
				var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
				var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
				var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
				var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
				var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
				var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
				var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
				var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
				var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
				var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
				var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
				var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
				var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
				var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
				var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
				var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
				var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
				var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
				var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
				var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
				var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
				var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
				var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
				var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
				var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
				var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
				var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
				var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
				var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
				var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
				var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
				var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bar$0$off0173 = 0, $bar$1$off0102$ph = 0, $col$0$lcssa = 0, $col$0187 = 0, $col$0187$lcssa256 = 0, $col$0187$phi = 0, $col11$0$lcssa = 0, $col11$0178 = 0, $col11$1 = 0, $col6$0$lcssa = 0, $col6$0$lcssa$ph = 0, $col6$0170 = 0, $dmax$0175 = 0, $dmax$1105 = 0, $dmax$1106$ph = 0, $f = 0;
				var $hdiff = 0, $hmin$0179 = 0, $hmin$1 = 0, $i$0180 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $or$cond118 = 0, $or$cond119 = 0, $or$cond121 = 0, $or$cond122 = 0, $or$cond124 = 0, $or$cond126 = 0, $row$0174 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 128|0;
				$1 = sp + 120|0;
				$2 = sp + 112|0;
				$3 = sp + 104|0;
				$4 = sp + 96|0;
				$5 = sp + 88|0;
				$6 = sp + 80|0;
				$7 = sp + 72|0;
				$8 = sp + 64|0;
				$9 = sp + 56|0;
				$10 = sp + 48|0;
				$11 = sp + 40|0;
				$12 = sp + 32|0;
				$13 = sp + 24|0;
				$14 = sp + 16|0;
				$15 = sp + 8|0;
				$16 = sp;
				$f = sp + 144|0;
				$hdiff = sp + 136|0;
				$17 = (__ZN9Character4blobEi($this,0)|0);
				__ZN8FeaturesC2ERK4Blob($f,$17);
				__THREW__ = 0;
				$18 = (invoke_iii(123,($f|0),($charbox|0))|0);
				$19 = __THREW__; __THREW__ = 0;
				$20 = $19&1;
				L1: do {
					if ($20) {
						label = 18;
					} else {
						switch ($18|0) {
							case 0:  {
								$115 = ((($17)) + 12|0);
								$116 = HEAP32[$115>>2]|0;
								$117 = ((($17)) + 4|0);
								$118 = HEAP32[$117>>2]|0;
								$119 = (($116) + 1)|0;
								$120 = (($119) - ($118))|0;
								$121 = ($120|0)<(5);
								if ($121) {
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								$122 = ($120|0)<(8);
								$123 = ((($17)) + 8|0);
								$124 = HEAP32[$123>>2]|0;
								$125 = HEAP32[$17>>2]|0;
								if ($122) {
									$126 = (($124) + 1)|0;
									$127 = (($126) - ($125))|0;
									$128 = ($127|0)<(6);
									if ($128) {
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								}
								$129 = (($124) + 1)|0;
								$130 = (($129) - ($125))|0;
								$131 = ($130*10)|0;
								$132 = ($120|0)>($131|0);
								$133 = ($120*5)|0;
								$134 = ($133|0)<($130|0);
								$or$cond118 = $134 | $132;
								if ($or$cond118) {
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$135 = (invoke_iiii(127,($f|0),($charset|0),($charbox|0))|0);
								$136 = __THREW__; __THREW__ = 0;
								$137 = $136&1;
								if ($137) {
									label = 18;
									break L1;
								}
								$138 = ($135|0)==(0);
								if (!($138)) {
									HEAP32[$8>>2] = $135;
									$139 = ((($8)) + 4|0);
									HEAP32[$139>>2] = 0;
									$140 = ((($this)) + 32|0);
									$141 = HEAP32[$140>>2]|0;
									$142 = ((($this)) + 36|0);
									$143 = HEAP32[$142>>2]|0;
									$144 = ($141|0)==($143|0);
									if ($144) {
										$157 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($157|0),($8|0));
										$158 = __THREW__; __THREW__ = 0;
										$159 = $158&1;
										if ($159) {
											label = 18;
											break L1;
										}
									} else {
										$145 = $8;
										$146 = $145;
										$147 = HEAP32[$146>>2]|0;
										$148 = (($145) + 4)|0;
										$149 = $148;
										$150 = HEAP32[$149>>2]|0;
										$151 = $141;
										$152 = $151;
										HEAP32[$152>>2] = $147;
										$153 = (($151) + 4)|0;
										$154 = $153;
										HEAP32[$154>>2] = $150;
										$155 = HEAP32[$140>>2]|0;
										$156 = ((($155)) + 8|0);
										HEAP32[$140>>2] = $156;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$160 = (invoke_iii(128,($f|0),($charbox|0))|0);
								$161 = __THREW__; __THREW__ = 0;
								$162 = $161&1;
								if ($162) {
									label = 18;
									break L1;
								}
								$163 = ($160|0)==(0);
								if (!($163)) {
									HEAP32[$7>>2] = $160;
									$164 = ((($7)) + 4|0);
									HEAP32[$164>>2] = 0;
									$165 = ((($this)) + 32|0);
									$166 = HEAP32[$165>>2]|0;
									$167 = ((($this)) + 36|0);
									$168 = HEAP32[$167>>2]|0;
									$169 = ($166|0)==($168|0);
									if ($169) {
										$182 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($182|0),($7|0));
										$183 = __THREW__; __THREW__ = 0;
										$184 = $183&1;
										if ($184) {
											label = 18;
											break L1;
										}
									} else {
										$170 = $7;
										$171 = $170;
										$172 = HEAP32[$171>>2]|0;
										$173 = (($170) + 4)|0;
										$174 = $173;
										$175 = HEAP32[$174>>2]|0;
										$176 = $166;
										$177 = $176;
										HEAP32[$177>>2] = $172;
										$178 = (($176) + 4)|0;
										$179 = $178;
										HEAP32[$179>>2] = $175;
										$180 = HEAP32[$165>>2]|0;
										$181 = ((($180)) + 8|0);
										HEAP32[$165>>2] = $181;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$185 = (invoke_ii(129,($f|0))|0);
								$186 = __THREW__; __THREW__ = 0;
								$187 = $186&1;
								if ($187) {
									label = 18;
									break L1;
								}
								$188 = ($185|0)==(0);
								if (!($188)) {
									HEAP32[$6>>2] = $185;
									$189 = ((($6)) + 4|0);
									HEAP32[$189>>2] = 0;
									$190 = ((($this)) + 32|0);
									$191 = HEAP32[$190>>2]|0;
									$192 = ((($this)) + 36|0);
									$193 = HEAP32[$192>>2]|0;
									$194 = ($191|0)==($193|0);
									if ($194) {
										$207 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($207|0),($6|0));
										$208 = __THREW__; __THREW__ = 0;
										$209 = $208&1;
										if ($209) {
											label = 18;
											break L1;
										}
									} else {
										$195 = $6;
										$196 = $195;
										$197 = HEAP32[$196>>2]|0;
										$198 = (($195) + 4)|0;
										$199 = $198;
										$200 = HEAP32[$199>>2]|0;
										$201 = $191;
										$202 = $201;
										HEAP32[$202>>2] = $197;
										$203 = (($201) + 4)|0;
										$204 = $203;
										HEAP32[$204>>2] = $200;
										$205 = HEAP32[$190>>2]|0;
										$206 = ((($205)) + 8|0);
										HEAP32[$190>>2] = $206;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$210 = (invoke_ii(130,($f|0))|0);
								$211 = __THREW__; __THREW__ = 0;
								$212 = $211&1;
								if ($212) {
									label = 18;
									break L1;
								}
								$213 = ($210|0)==(0);
								if (!($213)) {
									HEAP32[$5>>2] = $210;
									$214 = ((($5)) + 4|0);
									HEAP32[$214>>2] = 0;
									$215 = ((($this)) + 32|0);
									$216 = HEAP32[$215>>2]|0;
									$217 = ((($this)) + 36|0);
									$218 = HEAP32[$217>>2]|0;
									$219 = ($216|0)==($218|0);
									if ($219) {
										$232 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($232|0),($5|0));
										$233 = __THREW__; __THREW__ = 0;
										$234 = $233&1;
										if ($234) {
											label = 18;
											break L1;
										}
									} else {
										$220 = $5;
										$221 = $220;
										$222 = HEAP32[$221>>2]|0;
										$223 = (($220) + 4)|0;
										$224 = $223;
										$225 = HEAP32[$224>>2]|0;
										$226 = $216;
										$227 = $226;
										HEAP32[$227>>2] = $222;
										$228 = (($226) + 4)|0;
										$229 = $228;
										HEAP32[$229>>2] = $225;
										$230 = HEAP32[$215>>2]|0;
										$231 = ((($230)) + 8|0);
										HEAP32[$215>>2] = $231;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$235 = (invoke_iii(131,($charset|0),2)|0);
								$236 = __THREW__; __THREW__ = 0;
								$237 = $236&1;
								if ($237) {
									label = 18;
									break L1;
								}
								if ($235) {
									__THREW__ = 0;
									$238 = (invoke_ii(132,($f|0))|0);
									$239 = __THREW__; __THREW__ = 0;
									$240 = $239&1;
									if ($240) {
										label = 18;
										break L1;
									}
									$241 = ($238|0)==(0);
									if (!($241)) {
										HEAP32[$4>>2] = $238;
										$242 = ((($4)) + 4|0);
										HEAP32[$242>>2] = 0;
										$243 = ((($this)) + 32|0);
										$244 = HEAP32[$243>>2]|0;
										$245 = ((($this)) + 36|0);
										$246 = HEAP32[$245>>2]|0;
										$247 = ($244|0)==($246|0);
										if ($247) {
											$260 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($260|0),($4|0));
											$261 = __THREW__; __THREW__ = 0;
											$262 = $261&1;
											if ($262) {
												label = 18;
												break L1;
											}
										} else {
											$248 = $4;
											$249 = $248;
											$250 = HEAP32[$249>>2]|0;
											$251 = (($248) + 4)|0;
											$252 = $251;
											$253 = HEAP32[$252>>2]|0;
											$254 = $244;
											$255 = $254;
											HEAP32[$255>>2] = $250;
											$256 = (($254) + 4)|0;
											$257 = $256;
											HEAP32[$257>>2] = $253;
											$258 = HEAP32[$243>>2]|0;
											$259 = ((($258)) + 8|0);
											HEAP32[$243>>2] = $259;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								}
								__THREW__ = 0;
								$263 = (invoke_iii(133,($f|0),($charset|0))|0);
								$264 = __THREW__; __THREW__ = 0;
								$265 = $264&1;
								if ($265) {
									label = 18;
									break L1;
								}
								$266 = ($263|0)==(0);
								if (!($266)) {
									HEAP32[$3>>2] = $263;
									$267 = ((($3)) + 4|0);
									HEAP32[$267>>2] = 0;
									$268 = ((($this)) + 32|0);
									$269 = HEAP32[$268>>2]|0;
									$270 = ((($this)) + 36|0);
									$271 = HEAP32[$270>>2]|0;
									$272 = ($269|0)==($271|0);
									if ($272) {
										$285 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($285|0),($3|0));
										$286 = __THREW__; __THREW__ = 0;
										$287 = $286&1;
										if ($287) {
											label = 18;
											break L1;
										}
									} else {
										$273 = $3;
										$274 = $273;
										$275 = HEAP32[$274>>2]|0;
										$276 = (($273) + 4)|0;
										$277 = $276;
										$278 = HEAP32[$277>>2]|0;
										$279 = $269;
										$280 = $279;
										HEAP32[$280>>2] = $275;
										$281 = (($279) + 4)|0;
										$282 = $281;
										HEAP32[$282>>2] = $278;
										$283 = HEAP32[$268>>2]|0;
										$284 = ((($283)) + 8|0);
										HEAP32[$268>>2] = $284;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$288 = (invoke_iii(134,($f|0),($charbox|0))|0);
								$289 = __THREW__; __THREW__ = 0;
								$290 = $289&1;
								if ($290) {
									label = 18;
									break L1;
								}
								L72: do {
									switch ($288|0) {
										case 117:  {
											$291 = ((($f)) + 56|0);
											__THREW__ = 0;
											$292 = (invoke_ii(135,($291|0))|0);
											$293 = __THREW__; __THREW__ = 0;
											$294 = $293&1;
											if ($294) {
												label = 18;
												break L1;
											}
											if (!($292)) {
												label = 103;
												break L72;
											}
											$295 = HEAP32[$117>>2]|0;
											$296 = HEAP32[$115>>2]|0;
											$297 = (($296) + ($295))|0;
											$298 = (($297|0) / 2)&-1;
											$299 = HEAP32[$123>>2]|0;
											__THREW__ = 0;
											$300 = (invoke_iiiii(136,($17|0),($298|0),($299|0),1)|0);
											$301 = __THREW__; __THREW__ = 0;
											$302 = $301&1;
											if ($302) {
												label = 18;
												break L1;
											}
											$303 = HEAP32[$17>>2]|0;
											$304 = HEAP32[$123>>2]|0;
											$305 = (($304) - ($303))|0;
											$306 = ($305*90)|0;
											$307 = (($306|0) / 100)&-1;
											$308 = (($307) + ($303))|0;
											$309 = ($300|0)<($308|0);
											if (!($309)) {
												label = 103;
												break L72;
											}
											$310 = HEAP32[$117>>2]|0;
											$311 = HEAP32[$115>>2]|0;
											$312 = (($311) + ($310))|0;
											$313 = (($312|0) / 2)&-1;
											__THREW__ = 0;
											$314 = (invoke_iiii(137,($17|0),($313|0),($300|0))|0);
											$315 = __THREW__; __THREW__ = 0;
											$316 = $315&1;
											if ($316) {
												label = 18;
												break L1;
											}
											if ($314) {
												label = 103;
												break L72;
											}
											$317 = HEAP32[$117>>2]|0;
											$318 = HEAP32[$115>>2]|0;
											$319 = (($318) + ($317))|0;
											$320 = (($319|0) / 2)&-1;
											$321 = (($300) + -1)|0;
											__THREW__ = 0;
											$322 = (invoke_iiiii(136,($17|0),($320|0),($321|0),0)|0);
											$323 = __THREW__; __THREW__ = 0;
											$324 = $323&1;
											if ($324) {
												label = 18;
												break L1;
											}
											$325 = (($322) + -1)|0;
											$326 = HEAP32[$17>>2]|0;
											$327 = HEAP32[$123>>2]|0;
											$328 = (($327) - ($326))|0;
											$329 = ($328*40)|0;
											$330 = (($329|0) / 100)&-1;
											$331 = (($330) + ($326))|0;
											$332 = ($325|0)>($331|0);
											L81: do {
												if ($332) {
													$333 = ((($f)) + 248|0);
													$$pre200 = HEAP32[$117>>2]|0;
													$336 = $$pre200;$338 = $325;$col$0187 = $322;
													while(1) {
														$334 = HEAP32[$115>>2]|0;
														$335 = (($334) + ($336))|0;
														$337 = (($335|0) / 2)&-1;
														__THREW__ = 0;
														$339 = (invoke_iiiii(138,($17|0),($337|0),($338|0),1)|0);
														$340 = __THREW__; __THREW__ = 0;
														$341 = $340&1;
														if ($341) {
															label = 17;
															break;
														}
														$342 = HEAP32[$117>>2]|0;
														$343 = ($339|0)>($342|0);
														if ($343) {
															$1303 = $342;
														} else {
															$344 = HEAP32[$17>>2]|0;
															$345 = (($338) - ($344))|0;
															__THREW__ = 0;
															$346 = (invoke_iii(139,($333|0),($345|0))|0);
															$347 = __THREW__; __THREW__ = 0;
															$348 = $347&1;
															if ($348) {
																label = 17;
																break;
															}
															$349 = HEAP32[$115>>2]|0;
															$350 = HEAP32[$117>>2]|0;
															$351 = (($349) + 1)|0;
															$352 = (($351) - ($350))|0;
															$353 = (($352|0) / 10)&-1;
															$354 = ($346|0)>($353|0);
															if ($354) {
																$1303 = $350;
															} else {
																$$lcssa254 = $338;$col$0187$lcssa256 = $col$0187;
																label = 81;
																break;
															}
														}
														$355 = (($338) + -1)|0;
														$356 = HEAP32[$17>>2]|0;
														$357 = HEAP32[$123>>2]|0;
														$358 = (($357) - ($356))|0;
														$359 = ($358*40)|0;
														$360 = (($359|0) / 100)&-1;
														$361 = (($360) + ($356))|0;
														$362 = ($355|0)>($361|0);
														if ($362) {
															$col$0187$phi = $338;$336 = $1303;$338 = $355;$col$0187 = $col$0187$phi;
														} else {
															$$lcssa168 = $355;$364 = $356;$365 = $357;$col$0$lcssa = $338;
															break L81;
														}
													}
													if ((label|0) == 17) {
														$88 = ___cxa_find_matching_catch_2()|0;
														$89 = tempRet0;
														$lpad$phi$index = $88;$lpad$phi$index5 = $89;
														break L1;
													}
													else if ((label|0) == 81) {
														$$pre201$pre = HEAP32[$17>>2]|0;
														$$pre202$pre = HEAP32[$123>>2]|0;
														$$lcssa168 = $$lcssa254;$364 = $$pre201$pre;$365 = $$pre202$pre;$col$0$lcssa = $col$0187$lcssa256;
														break;
													}
												} else {
													$$lcssa168 = $325;$364 = $326;$365 = $327;$col$0$lcssa = $322;
												}
											} while(0);
											$363 = (($365) - ($364))|0;
											$366 = ($363*40)|0;
											$367 = (($366|0) / 100)&-1;
											$368 = (($367) + ($364))|0;
											$369 = ($$lcssa168|0)<=($368|0);
											$370 = ($col$0$lcssa|0)>($365|0);
											$or$cond119 = $370 | $369;
											if ($or$cond119) {
												label = 103;
												break L72;
											}
											__THREW__ = 0;
											$371 = (invoke_iiiiii(140,($this|0),116,($$lcssa168|0),114,0)|0);
											$372 = __THREW__; __THREW__ = 0;
											$373 = $372&1;
											if ($373) {
												label = 18;
												break L1;
											}
											if (!($371)) {
												label = 103;
												break L72;
											}
											__ZN8FeaturesD2Ev($f);
											STACKTOP = sp;return;
											break;
										}
										case 78:  {
											$374 = HEAP32[$123>>2]|0;
											$375 = HEAP32[$17>>2]|0;
											$376 = (($374) + 1)|0;
											$377 = (($376) - ($375))|0;
											$378 = HEAP32[$115>>2]|0;
											$379 = HEAP32[$117>>2]|0;
											$380 = (($378) + 1)|0;
											$381 = (($380) - ($379))|0;
											$382 = ($377|0)>($381|0);
											if (!($382)) {
												label = 103;
												break L72;
											}
											$383 = ((($charbox)) + 4|0);
											$384 = HEAP32[$383>>2]|0;
											$385 = ($379|0)<($384|0);
											if ($385) {
												label = 103;
												break L72;
											}
											$386 = ((($f)) + 104|0);
											$387 = ((($f)) + 112|0);
											$388 = HEAP32[$387>>2]|0;
											$389 = ($388|0)<(0);
											if ($389) {
												__THREW__ = 0;
												invoke_vi(141,($386|0));
												$390 = __THREW__; __THREW__ = 0;
												$391 = $390&1;
												if ($391) {
													label = 18;
													break L1;
												}
											}
											$392 = ((($f)) + 140|0);
											$393 = ((($f)) + 144|0);
											$394 = HEAP32[$393>>2]|0;
											$395 = HEAP32[$392>>2]|0;
											$396 = (($394) - ($395))|0;
											$397 = $396 >> 2;
											$398 = ($397*50)|0;
											$399 = (($398) + -50)|0;
											$400 = (($399|0) / 100)&-1;
											__THREW__ = 0;
											$401 = (invoke_iii(139,($386|0),($400|0))|0);
											$402 = __THREW__; __THREW__ = 0;
											$403 = $402&1;
											if ($403) {
												label = 18;
												break L1;
											}
											$404 = $401 << 2;
											$405 = HEAP32[$115>>2]|0;
											$406 = HEAP32[$117>>2]|0;
											$407 = (($405) + 1)|0;
											$408 = (($407) - ($406))|0;
											$409 = ($404|0)<($408|0);
											do {
												if ($409) {
													$410 = ((($f)) + 248|0);
													__THREW__ = 0;
													$411 = (invoke_iiii(142,($410|0),0,-1)|0);
													$412 = __THREW__; __THREW__ = 0;
													$413 = $412&1;
													if ($413) {
														label = 18;
														break L1;
													}
													$414 = ((($f)) + 256|0);
													$415 = HEAP32[$414>>2]|0;
													$416 = ($415|0)<(0);
													if ($416) {
														__THREW__ = 0;
														invoke_vi(141,($410|0));
														$417 = __THREW__; __THREW__ = 0;
														$418 = $417&1;
														if ($418) {
															label = 18;
															break L1;
														}
													}
													$419 = ((($f)) + 284|0);
													$420 = ((($f)) + 288|0);
													$421 = HEAP32[$420>>2]|0;
													$422 = HEAP32[$419>>2]|0;
													$423 = (($421) - ($422))|0;
													$424 = $423 >> 2;
													$425 = ($424*40)|0;
													$426 = (($425) + -40)|0;
													$427 = (($426|0) / 100)&-1;
													$428 = ($411|0)<($427|0);
													if ($428) {
														break;
													}
													$429 = HEAP32[$414>>2]|0;
													$430 = ($429|0)<(0);
													if ($430) {
														__THREW__ = 0;
														invoke_vi(141,($410|0));
														$431 = __THREW__; __THREW__ = 0;
														$432 = $431&1;
														if ($432) {
															label = 18;
															break L1;
														}
														$$pre204 = HEAP32[$420>>2]|0;
														$$pre205 = HEAP32[$419>>2]|0;
														$434 = $$pre205;$435 = $$pre204;
													} else {
														$434 = $422;$435 = $421;
													}
													$433 = (($435) - ($434))|0;
													$436 = $433 >> 2;
													$437 = ($436*50)|0;
													$438 = (($437) + -50)|0;
													$439 = (($438|0) / 100)&-1;
													$440 = ($411|0)<($439|0);
													if (!($440)) {
														break;
													}
													$441 = HEAP32[$17>>2]|0;
													$442 = (($441) + ($411))|0;
													__THREW__ = 0;
													$443 = (invoke_iiiiii(140,($this|0),114,($442|0),118,0)|0);
													$444 = __THREW__; __THREW__ = 0;
													$445 = $444&1;
													if ($445) {
														label = 18;
														break L1;
													}
													if (!($443)) {
														break;
													}
													__ZN8FeaturesD2Ev($f);
													STACKTOP = sp;return;
												}
											} while(0);
											$446 = ($288|0)==(0);
											if (!($446)) {
												label = 103;
											}
											break;
										}
										case 0:  {
											break;
										}
										default: {
											label = 103;
										}
									}
								} while(0);
								if ((label|0) == 103) {
									HEAP32[$0>>2] = $288;
									$447 = ((($0)) + 4|0);
									HEAP32[$447>>2] = 0;
									$448 = ((($this)) + 32|0);
									$449 = HEAP32[$448>>2]|0;
									$450 = ((($this)) + 36|0);
									$451 = HEAP32[$450>>2]|0;
									$452 = ($449|0)==($451|0);
									if ($452) {
										$465 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($465|0),($0|0));
										$466 = __THREW__; __THREW__ = 0;
										$467 = $466&1;
										if ($467) {
											label = 18;
											break L1;
										}
									} else {
										$453 = $0;
										$454 = $453;
										$455 = HEAP32[$454>>2]|0;
										$456 = (($453) + 4)|0;
										$457 = $456;
										$458 = HEAP32[$457>>2]|0;
										$459 = $449;
										$460 = $459;
										HEAP32[$460>>2] = $455;
										$461 = (($459) + 4)|0;
										$462 = $461;
										HEAP32[$462>>2] = $458;
										$463 = HEAP32[$448>>2]|0;
										$464 = ((($463)) + 8|0);
										HEAP32[$448>>2] = $464;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								$468 = HEAP32[$115>>2]|0;
								$469 = HEAP32[$117>>2]|0;
								$470 = (($468) + 1)|0;
								$471 = (($470) - ($469))|0;
								$472 = HEAP32[$123>>2]|0;
								$473 = HEAP32[$17>>2]|0;
								$474 = (($472) + 1)|0;
								$475 = (($474) - ($473))|0;
								$476 = ($475|0)<($471|0);
								$477 = $476 ? $475 : $471;
								$478 = (($477|0) / 30)&-1;
								$479 = (($478) + 1)|0;
								$480 = ((($f)) + 200|0);
								__THREW__ = 0;
								$481 = (invoke_iii(143,($480|0),-1)|0);
								$482 = __THREW__; __THREW__ = 0;
								$483 = $482&1;
								if ($483) {
									label = 18;
									break L1;
								}
								$484 = ($481|0)<(3);
								L128: do {
									if ($484) {
										$485 = HEAP32[$115>>2]|0;
										$486 = HEAP32[$117>>2]|0;
										$487 = (($485) + 1)|0;
										$488 = (($487) - ($486))|0;
										$489 = (($488|0) / 8)&-1;
										$490 = (($479) + ($489))|0;
										__THREW__ = 0;
										$491 = (invoke_iii(143,($480|0),($490|0))|0);
										$492 = __THREW__; __THREW__ = 0;
										$493 = $492&1;
										if ($493) {
											label = 18;
											break L1;
										}
										$494 = ($491|0)==(2);
										if (!($494)) {
											$495 = HEAP32[$115>>2]|0;
											$496 = HEAP32[$117>>2]|0;
											$497 = (($495) + 1)|0;
											$498 = (($497) - ($496))|0;
											$499 = ($498|0)>(15);
											if (!($499)) {
												break;
											}
											$500 = (($498|0) / 8)&-1;
											__THREW__ = 0;
											$501 = (invoke_iii(143,($480|0),($500|0))|0);
											$502 = __THREW__; __THREW__ = 0;
											$503 = $502&1;
											if ($503) {
												label = 18;
												break L1;
											}
											$504 = ($501|0)==(2);
											if (!($504)) {
												break;
											}
										}
										__THREW__ = 0;
										$505 = (invoke_iii(144,($f|0),($charbox|0))|0);
										$506 = __THREW__; __THREW__ = 0;
										$507 = $506&1;
										if ($507) {
											label = 18;
											break L1;
										}
										L137: do {
											switch ($505|0) {
												case 0:  {
													break L128;
													break;
												}
												case 110:  {
													$508 = HEAP32[$115>>2]|0;
													$509 = ((($charbox)) + 4|0);
													$510 = HEAP32[$509>>2]|0;
													$511 = ((($charbox)) + 12|0);
													$512 = HEAP32[$511>>2]|0;
													$513 = (($512) + ($510))|0;
													$514 = (($513|0) / 2)&-1;
													$515 = ($508|0)>($514|0);
													if (!($515)) {
														HEAP32[$1>>2] = 34;
														$516 = ((($1)) + 4|0);
														HEAP32[$516>>2] = 0;
														$517 = ((($this)) + 32|0);
														$518 = HEAP32[$517>>2]|0;
														$519 = ((($this)) + 36|0);
														$520 = HEAP32[$519>>2]|0;
														$521 = ($518|0)==($520|0);
														if ($521) {
															$534 = ((($this)) + 28|0);
															__THREW__ = 0;
															invoke_vii(125,($534|0),($1|0));
															$535 = __THREW__; __THREW__ = 0;
															$536 = $535&1;
															if ($536) {
																label = 18;
																break L1;
															}
														} else {
															$522 = $1;
															$523 = $522;
															$524 = HEAP32[$523>>2]|0;
															$525 = (($522) + 4)|0;
															$526 = $525;
															$527 = HEAP32[$526>>2]|0;
															$528 = $518;
															$529 = $528;
															HEAP32[$529>>2] = $524;
															$530 = (($528) + 4)|0;
															$531 = $530;
															HEAP32[$531>>2] = $527;
															$532 = HEAP32[$517>>2]|0;
															$533 = ((($532)) + 8|0);
															HEAP32[$517>>2] = $533;
														}
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													$537 = HEAP32[$123>>2]|0;
													$538 = HEAP32[$17>>2]|0;
													$539 = (($537) + 1)|0;
													$540 = (($539) - ($538))|0;
													$541 = HEAP32[$117>>2]|0;
													$542 = (($508) + 1)|0;
													$543 = (($542) - ($541))|0;
													$544 = ($540|0)>($543|0);
													$545 = ((($f)) + 56|0);
													$546 = ((($f)) + 64|0);
													do {
														if ($544) {
															$547 = HEAP32[$546>>2]|0;
															$548 = ($547|0)<(0);
															if ($548) {
																__THREW__ = 0;
																invoke_vi(141,($545|0));
																$549 = __THREW__; __THREW__ = 0;
																$550 = $549&1;
																if ($550) {
																	label = 18;
																	break L1;
																}
															}
															$551 = ((($f)) + 92|0);
															$552 = ((($f)) + 96|0);
															$553 = HEAP32[$552>>2]|0;
															$554 = HEAP32[$551>>2]|0;
															$555 = (($553) - ($554))|0;
															$556 = $555 >> 2;
															$557 = ($556*10)|0;
															$558 = (($557) + -10)|0;
															$559 = (($558|0) / 100)&-1;
															__THREW__ = 0;
															$560 = (invoke_iii(139,($545|0),($559|0))|0);
															$561 = __THREW__; __THREW__ = 0;
															$562 = $561&1;
															if ($562) {
																label = 18;
																break L1;
															}
															$563 = ($560*10)|0;
															$564 = HEAP32[$123>>2]|0;
															$565 = HEAP32[$17>>2]|0;
															$566 = (($564) + 1)|0;
															$567 = (($566) - ($565))|0;
															$568 = ($563|0)<($567|0);
															if (!($568)) {
																break;
															}
															$569 = ((($f)) + 152|0);
															$570 = ((($f)) + 160|0);
															$571 = HEAP32[$570>>2]|0;
															$572 = ($571|0)<(0);
															if ($572) {
																__THREW__ = 0;
																invoke_vi(141,($569|0));
																$573 = __THREW__; __THREW__ = 0;
																$574 = $573&1;
																if ($574) {
																	label = 18;
																	break L1;
																}
															}
															$575 = ((($f)) + 188|0);
															$576 = ((($f)) + 192|0);
															$577 = HEAP32[$576>>2]|0;
															$578 = HEAP32[$575>>2]|0;
															$579 = (($577) - ($578))|0;
															$580 = $579 >> 2;
															$581 = ($580*75)|0;
															$582 = (($581) + -75)|0;
															$583 = (($582|0) / 100)&-1;
															__THREW__ = 0;
															$584 = (invoke_iiii(145,($569|0),($583|0),2)|0);
															$585 = __THREW__; __THREW__ = 0;
															$586 = $585&1;
															if ($586) {
																label = 18;
																break L1;
															}
															if ($584) {
																break;
															}
															$587 = HEAP32[$570>>2]|0;
															$588 = ($587|0)<(0);
															if ($588) {
																__THREW__ = 0;
																invoke_vi(141,($569|0));
																$589 = __THREW__; __THREW__ = 0;
																$590 = $589&1;
																if ($590) {
																	label = 18;
																	break L1;
																}
															}
															$591 = HEAP32[$576>>2]|0;
															$592 = HEAP32[$575>>2]|0;
															$593 = (($591) - ($592))|0;
															$594 = $593 >> 2;
															$595 = ($594*50)|0;
															$596 = (($595) + -50)|0;
															$597 = (($596|0) / 100)&-1;
															__THREW__ = 0;
															$598 = (invoke_iii(139,($569|0),($597|0))|0);
															$599 = __THREW__; __THREW__ = 0;
															$600 = $599&1;
															if ($600) {
																label = 18;
																break L1;
															}
															$601 = ($598*10)|0;
															$602 = HEAP32[$123>>2]|0;
															$603 = HEAP32[$17>>2]|0;
															$604 = (($602) + 1)|0;
															$605 = (($604) - ($603))|0;
															$606 = ($601|0)>($605|0);
															if (!($606)) {
																break;
															}
															$607 = HEAP32[$117>>2]|0;
															$608 = HEAP32[$115>>2]|0;
															$609 = (($608) + ($607))|0;
															$610 = (($609|0) / 2)&-1;
															__THREW__ = 0;
															$611 = (invoke_iiii(137,($17|0),($610|0),($602|0))|0);
															$612 = __THREW__; __THREW__ = 0;
															$613 = $612&1;
															if ($613) {
																label = 18;
																break L1;
															}
															if ($611) {
																break;
															}
															__ZN8FeaturesD2Ev($f);
															STACKTOP = sp;return;
														}
													} while(0);
													$614 = HEAP32[$546>>2]|0;
													$615 = ($614|0)<(0);
													if ($615) {
														__THREW__ = 0;
														invoke_vi(141,($545|0));
														$616 = __THREW__; __THREW__ = 0;
														$617 = $616&1;
														if ($617) {
															label = 18;
															break L1;
														}
													}
													$618 = ((($f)) + 92|0);
													$619 = ((($f)) + 96|0);
													$620 = HEAP32[$619>>2]|0;
													$621 = HEAP32[$618>>2]|0;
													$622 = (($620) - ($621))|0;
													$623 = $622 >> 2;
													$624 = ($623*10)|0;
													$625 = (($624) + -10)|0;
													$626 = (($625|0) / 100)&-1;
													__THREW__ = 0;
													$627 = (invoke_iii(139,($545|0),($626|0))|0);
													$628 = __THREW__; __THREW__ = 0;
													$629 = $628&1;
													if ($629) {
														label = 18;
														break L1;
													}
													$630 = $627 << 1;
													$631 = HEAP32[$123>>2]|0;
													$632 = HEAP32[$17>>2]|0;
													$633 = (($631) + 1)|0;
													$634 = (($633) - ($632))|0;
													$635 = ($630|0)>($634|0);
													$636 = ((($f)) + 152|0);
													do {
														if ($635) {
															$637 = ((($f)) + 160|0);
															$638 = HEAP32[$637>>2]|0;
															$639 = ($638|0)<(0);
															if ($639) {
																__THREW__ = 0;
																invoke_vi(141,($636|0));
																$640 = __THREW__; __THREW__ = 0;
																$641 = $640&1;
																if ($641) {
																	label = 18;
																	break L1;
																}
															}
															$642 = ((($f)) + 188|0);
															$643 = ((($f)) + 192|0);
															$644 = HEAP32[$643>>2]|0;
															$645 = HEAP32[$642>>2]|0;
															$646 = (($644) - ($645))|0;
															$647 = $646 >> 2;
															$648 = ($647*75)|0;
															$649 = (($648) + -75)|0;
															$650 = (($649|0) / 100)&-1;
															__THREW__ = 0;
															$651 = (invoke_iiii(145,($636|0),($650|0),2)|0);
															$652 = __THREW__; __THREW__ = 0;
															$653 = $652&1;
															if ($653) {
																label = 18;
																break L1;
															}
															if ($651) {
																break;
															}
															$654 = HEAP32[$117>>2]|0;
															$655 = HEAP32[$115>>2]|0;
															$656 = (($655) + ($654))|0;
															$657 = (($656|0) / 2)&-1;
															$658 = HEAP32[$123>>2]|0;
															__THREW__ = 0;
															$659 = (invoke_iiiii(136,($17|0),($657|0),($658|0),1)|0);
															$660 = __THREW__; __THREW__ = 0;
															$661 = $660&1;
															if ($661) {
																label = 18;
																break L1;
															}
															$662 = HEAP32[$17>>2]|0;
															$663 = HEAP32[$123>>2]|0;
															$664 = (($663) - ($662))|0;
															$665 = ($664*95)|0;
															$666 = (($665|0) / 100)&-1;
															$667 = (($666) + ($662))|0;
															$668 = ($659|0)>($667|0);
															if ($668) {
																break;
															}
															$669 = HEAP32[$117>>2]|0;
															$670 = HEAP32[$115>>2]|0;
															$671 = (($670) + ($669))|0;
															$672 = (($671|0) / 2)&-1;
															__THREW__ = 0;
															$673 = (invoke_iiii(137,($17|0),($672|0),($659|0))|0);
															$674 = __THREW__; __THREW__ = 0;
															$675 = $674&1;
															if ($675) {
																label = 18;
																break L1;
															}
															if ($673) {
																break;
															}
															$676 = HEAP32[$17>>2]|0;
															$677 = HEAP32[$123>>2]|0;
															$678 = (($677) + ($676))|0;
															$679 = (($678|0) / 2)&-1;
															__THREW__ = 0;
															$680 = (invoke_iiiiii(140,($this|0),114,($679|0),116,0)|0);
															$681 = __THREW__; __THREW__ = 0;
															$682 = $681&1;
															if ($682) {
																label = 18;
																break L1;
															}
															if (!($680)) {
																break;
															}
															__ZN8FeaturesD2Ev($f);
															STACKTOP = sp;return;
														}
													} while(0);
													__THREW__ = 0;
													$683 = (invoke_iii(143,($636|0),-1)|0);
													$684 = __THREW__; __THREW__ = 0;
													$685 = $684&1;
													if ($685) {
														label = 18;
														break L1;
													}
													$686 = ($683|0)==(1);
													if (!($686)) {
														label = 208;
														break L137;
													}
													$687 = ((($f)) + 160|0);
													$688 = HEAP32[$687>>2]|0;
													$689 = ($688|0)<(0);
													if ($689) {
														__THREW__ = 0;
														invoke_vi(141,($636|0));
														$690 = __THREW__; __THREW__ = 0;
														$691 = $690&1;
														if ($691) {
															label = 18;
															break L1;
														}
													}
													$692 = ((($f)) + 188|0);
													$693 = ((($f)) + 192|0);
													$694 = HEAP32[$693>>2]|0;
													$695 = HEAP32[$692>>2]|0;
													$696 = (($694) - ($695))|0;
													$697 = $696 >> 2;
													$698 = ($697*75)|0;
													$699 = (($698) + -75)|0;
													$700 = (($699|0) / 100)&-1;
													__THREW__ = 0;
													$701 = (invoke_iiii(145,($636|0),($700|0),2)|0);
													$702 = __THREW__; __THREW__ = 0;
													$703 = $702&1;
													if ($703) {
														label = 18;
														break L1;
													}
													if ($701) {
														label = 208;
														break L137;
													}
													$704 = HEAP32[$117>>2]|0;
													$705 = HEAP32[$115>>2]|0;
													$706 = (($705) - ($704))|0;
													$707 = ($706*60)|0;
													$708 = (($707|0) / 100)&-1;
													$709 = (($708) + ($704))|0;
													$710 = (($706|0) / 4)&-1;
													$711 = (($710) + ($704))|0;
													$712 = ($709|0)>($711|0);
													if (!($712)) {
														label = 208;
														break L137;
													}
													$bar$0$off0173 = 0;$dmax$0175 = 0;$row$0174 = $709;
													L193: while(1) {
														$713 = HEAP32[$17>>2]|0;
														$714 = HEAP32[$123>>2]|0;
														$715 = (($714) + ($713))|0;
														$716 = (($715|0) / 2)&-1;
														__THREW__ = 0;
														$717 = (invoke_iiiii(136,($17|0),($row$0174|0),($716|0),1)|0);
														$718 = __THREW__; __THREW__ = 0;
														$719 = $718&1;
														if ($719) {
															label = 15;
															break;
														}
														$720 = (($716) - ($717))|0;
														$721 = ($720|0)>($dmax$0175|0);
														if ($721) {
															if ($bar$0$off0173) {
																$dmax$1105 = $720;
																label = 162;
															} else {
																$bar$1$off0102$ph = 0;$dmax$1106$ph = $720;
															}
														} else {
															$722 = $720 << 1;
															$723 = ($722|0)<($dmax$0175|0);
															$724 = ($dmax$0175|0)>(2);
															$or$cond = $724 & $723;
															$$bar$0$off0 = $bar$0$off0173 | $or$cond;
															if ($$bar$0$off0) {
																$dmax$1105 = $dmax$0175;
																label = 162;
															} else {
																$bar$1$off0102$ph = 0;$dmax$1106$ph = $dmax$0175;
															}
														}
														do {
															if ((label|0) == 162) {
																label = 0;
																__THREW__ = 0;
																$725 = (invoke_iiiii(120,($720|0),($dmax$1105|0),25,1)|0);
																$726 = __THREW__; __THREW__ = 0;
																$727 = $726&1;
																if ($727) {
																	label = 15;
																	break L193;
																}
																if (!($725)) {
																	$bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
																	break;
																}
																$728 = HEAP32[$117>>2]|0;
																$729 = HEAP32[$115>>2]|0;
																$730 = (($729) + ($728))|0;
																$731 = (($730|0) / 2)&-1;
																$732 = HEAP32[$17>>2]|0;
																$733 = HEAP32[$123>>2]|0;
																$734 = (($733) + ($732))|0;
																$735 = (($734|0) / 2)&-1;
																__THREW__ = 0;
																$736 = (invoke_iiiii(146,($17|0),($731|0),($735|0),1)|0);
																$737 = __THREW__; __THREW__ = 0;
																$738 = $737&1;
																if ($738) {
																	label = 15;
																	break L193;
																}
																$739 = HEAP32[$17>>2]|0;
																$740 = HEAP32[$123>>2]|0;
																$741 = (($740) + ($739))|0;
																$742 = (($741|0) / 2)&-1;
																$743 = ($742|0)>($736|0);
																if ($743) {
																	$756 = $739;$758 = $740;$col6$0$lcssa = $742;
																} else {
																	$$pre206 = HEAP32[$115>>2]|0;
																	$746 = $$pre206;$col6$0170 = $742;
																	while(1) {
																		$744 = HEAP32[$117>>2]|0;
																		$745 = (($746) + ($744))|0;
																		$747 = (($745|0) / 2)&-1;
																		__THREW__ = 0;
																		$748 = (invoke_iiiii(147,($17|0),($747|0),($col6$0170|0),1)|0);
																		$749 = __THREW__; __THREW__ = 0;
																		$750 = $749&1;
																		if ($750) {
																			label = 14;
																			break L193;
																		}
																		$751 = HEAP32[$115>>2]|0;
																		$752 = ($748|0)<($751|0);
																		if ($752) {
																			$col6$0$lcssa$ph = $col6$0170;
																			break;
																		}
																		$753 = (($col6$0170) + 1)|0;
																		$754 = ($col6$0170|0)<($736|0);
																		if ($754) {
																			$746 = $751;$col6$0170 = $753;
																		} else {
																			$col6$0$lcssa$ph = $753;
																			break;
																		}
																	}
																	$$pre207 = HEAP32[$17>>2]|0;
																	$$pre208 = HEAP32[$123>>2]|0;
																	$756 = $$pre207;$758 = $$pre208;$col6$0$lcssa = $col6$0$lcssa$ph;
																}
																$755 = ($col6$0$lcssa|0)>($756|0);
																$757 = ($col6$0$lcssa|0)<($758|0);
																$or$cond121 = $755 & $757;
																if (!($or$cond121)) {
																	$bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
																	break;
																}
																$759 = (($col6$0$lcssa) + -1)|0;
																__THREW__ = 0;
																$760 = (invoke_iiiiii(140,($this|0),102,($759|0),108,0)|0);
																$761 = __THREW__; __THREW__ = 0;
																$762 = $761&1;
																if ($762) {
																	label = 15;
																	break L193;
																}
																if ($760) {
																	label = 292;
																	break L193;
																} else {
																	$bar$1$off0102$ph = 1;$dmax$1106$ph = $dmax$1105;
																}
															}
														} while(0);
														$763 = (($row$0174) + -1)|0;
														$764 = HEAP32[$117>>2]|0;
														$765 = HEAP32[$115>>2]|0;
														$766 = (($765) - ($764))|0;
														$767 = (($766|0) / 4)&-1;
														$768 = (($767) + ($764))|0;
														$769 = ($763|0)>($768|0);
														if ($769) {
															$bar$0$off0173 = $bar$1$off0102$ph;$dmax$0175 = $dmax$1106$ph;$row$0174 = $763;
														} else {
															label = 208;
															break L137;
														}
													}
													if ((label|0) == 14) {
														$82 = ___cxa_find_matching_catch_2()|0;
														$83 = tempRet0;
														$lpad$phi$index = $82;$lpad$phi$index5 = $83;
														break L1;
													}
													else if ((label|0) == 15) {
														$84 = ___cxa_find_matching_catch_2()|0;
														$85 = tempRet0;
														$lpad$phi$index = $84;$lpad$phi$index5 = $85;
														break L1;
													}
													else if ((label|0) == 292) {
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													break;
												}
												case 104:  {
													$770 = ((($f)) + 56|0);
													$771 = ((($f)) + 64|0);
													$772 = HEAP32[$771>>2]|0;
													$773 = ($772|0)<(0);
													if ($773) {
														__THREW__ = 0;
														invoke_vi(141,($770|0));
														$774 = __THREW__; __THREW__ = 0;
														$775 = $774&1;
														if ($775) {
															label = 18;
															break L1;
														}
													}
													$776 = ((($f)) + 92|0);
													$777 = ((($f)) + 96|0);
													$778 = HEAP32[$777>>2]|0;
													$779 = HEAP32[$776>>2]|0;
													$780 = (($778) - ($779))|0;
													$781 = $780 >> 2;
													$782 = ($781*10)|0;
													$783 = (($782) + -10)|0;
													$784 = (($783|0) / 100)&-1;
													__THREW__ = 0;
													$785 = (invoke_iii(139,($770|0),($784|0))|0);
													$786 = __THREW__; __THREW__ = 0;
													$787 = $786&1;
													if ($787) {
														label = 18;
														break L1;
													}
													$788 = $785 << 1;
													$789 = HEAP32[$123>>2]|0;
													$790 = HEAP32[$17>>2]|0;
													$791 = (($789) + 1)|0;
													$792 = (($791) - ($790))|0;
													$793 = ($788|0)>($792|0);
													$794 = ((($f)) + 152|0);
													if (!($793)) {
														__THREW__ = 0;
														$868 = (invoke_iii(150,($794|0),30)|0);
														$869 = __THREW__; __THREW__ = 0;
														$870 = $869&1;
														if ($870) {
															label = 18;
															break L1;
														}
														if (!($868)) {
															label = 208;
															break L137;
														}
														$871 = HEAP32[$17>>2]|0;
														$872 = HEAP32[$123>>2]|0;
														$873 = (($872) + ($871))|0;
														$874 = (($873|0) / 2)&-1;
														__THREW__ = 0;
														(invoke_iiiiii(140,($this|0),102,($874|0),105,0)|0);
														$875 = __THREW__; __THREW__ = 0;
														$876 = $875&1;
														if ($876) {
															label = 18;
															break L1;
														}
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													$795 = ((($f)) + 160|0);
													$796 = HEAP32[$795>>2]|0;
													$797 = ($796|0)<(0);
													if ($797) {
														__THREW__ = 0;
														invoke_vi(141,($794|0));
														$798 = __THREW__; __THREW__ = 0;
														$799 = $798&1;
														if ($799) {
															label = 18;
															break L1;
														}
													}
													$800 = ((($f)) + 188|0);
													$801 = ((($f)) + 192|0);
													$802 = HEAP32[$801>>2]|0;
													$803 = HEAP32[$800>>2]|0;
													$804 = (($802) - ($803))|0;
													$805 = $804 >> 2;
													$806 = ($805*70)|0;
													$807 = (($806) + -70)|0;
													$808 = (($807|0) / 100)&-1;
													__THREW__ = 0;
													$809 = (invoke_iii(139,($794|0),($808|0))|0);
													$810 = __THREW__; __THREW__ = 0;
													$811 = $810&1;
													if ($811) {
														label = 18;
														break L1;
													}
													$812 = ($809|0)>(1);
													if (!($812)) {
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													$813 = HEAP32[$117>>2]|0;
													$814 = HEAP32[$115>>2]|0;
													$815 = (($814) - ($813))|0;
													$816 = ($815*70)|0;
													$817 = (($816|0) / 100)&-1;
													$818 = (($817) + ($813))|0;
													$819 = HEAP32[$123>>2]|0;
													__THREW__ = 0;
													$820 = (invoke_iiiii(138,($17|0),($818|0),($819|0),1)|0);
													$821 = __THREW__; __THREW__ = 0;
													$822 = $821&1;
													if ($822) {
														label = 18;
														break L1;
													}
													$823 = HEAP32[$117>>2]|0;
													$824 = ($820|0)>($823|0);
													if (!($824)) {
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													$825 = ((($f)) + 248|0);
													__THREW__ = 0;
													$826 = (invoke_ii(148,($825|0))|0);
													$827 = __THREW__; __THREW__ = 0;
													$828 = $827&1;
													if ($828) {
														label = 18;
														break L1;
													}
													__THREW__ = 0;
													$829 = (invoke_ii(149,($825|0))|0);
													$830 = __THREW__; __THREW__ = 0;
													$831 = $830&1;
													if ($831) {
														label = 18;
														break L1;
													}
													$832 = HEAP32[$17>>2]|0;
													$833 = HEAP32[$123>>2]|0;
													$834 = (($833) - ($832))|0;
													$835 = ($834*40)|0;
													$836 = (($835|0) / 100)&-1;
													$837 = (($836) + ($832))|0;
													$838 = ($834*60)|0;
													$839 = (($838|0) / 100)&-1;
													$840 = (($839) + ($832))|0;
													$841 = ($837|0)>($840|0);
													L243: do {
														if ($841) {
															$$lcssa = $832;$$lcssa165 = $833;$col11$0$lcssa = 0;
														} else {
															$842 = (($826) + 1)|0;
															$843 = (($842) - ($829))|0;
															$847 = $832;$col11$0178 = 0;$hmin$0179 = $843;$i$0180 = $837;
															while(1) {
																$846 = (($i$0180) - ($847))|0;
																__THREW__ = 0;
																$848 = (invoke_iii(139,($825|0),($846|0))|0);
																$849 = __THREW__; __THREW__ = 0;
																$850 = $849&1;
																if ($850) {
																	break;
																}
																$851 = ($848|0)<($hmin$0179|0);
																if ($851) {
																	$852 = HEAP32[$17>>2]|0;
																	$853 = (($i$0180) - ($852))|0;
																	__THREW__ = 0;
																	$854 = (invoke_iii(139,($825|0),($853|0))|0);
																	$855 = __THREW__; __THREW__ = 0;
																	$856 = $855&1;
																	if ($856) {
																		break;
																	} else {
																		$col11$1 = $i$0180;$hmin$1 = $854;
																	}
																} else {
																	$col11$1 = $col11$0178;$hmin$1 = $hmin$0179;
																}
																$857 = (($i$0180) + 1)|0;
																$858 = HEAP32[$17>>2]|0;
																$859 = HEAP32[$123>>2]|0;
																$860 = (($859) - ($858))|0;
																$861 = ($860*60)|0;
																$862 = (($861|0) / 100)&-1;
																$863 = (($862) + ($858))|0;
																$864 = ($i$0180|0)<($863|0);
																if ($864) {
																	$847 = $858;$col11$0178 = $col11$1;$hmin$0179 = $hmin$1;$i$0180 = $857;
																} else {
																	$$lcssa = $858;$$lcssa165 = $859;$col11$0$lcssa = $col11$1;
																	break L243;
																}
															}
															$86 = ___cxa_find_matching_catch_2()|0;
															$87 = tempRet0;
															$lpad$phi$index = $86;$lpad$phi$index5 = $87;
															break L1;
														}
													} while(0);
													$844 = ($col11$0$lcssa|0)>($$lcssa|0);
													$845 = ($col11$0$lcssa|0)<($$lcssa165|0);
													$or$cond122 = $844 & $845;
													if (!($or$cond122)) {
														__ZN8FeaturesD2Ev($f);
														STACKTOP = sp;return;
													}
													$865 = (($col11$0$lcssa) + -1)|0;
													__THREW__ = 0;
													(invoke_iiiiii(140,($this|0),114,($865|0),102,0)|0);
													$866 = __THREW__; __THREW__ = 0;
													$867 = $866&1;
													if ($867) {
														label = 18;
														break L1;
													}
													__ZN8FeaturesD2Ev($f);
													STACKTOP = sp;return;
													break;
												}
												case 107:  {
													$877 = ((($f)) + 56|0);
													$878 = ((($f)) + 64|0);
													$879 = HEAP32[$878>>2]|0;
													$880 = ($879|0)<(0);
													if ($880) {
														__THREW__ = 0;
														invoke_vi(141,($877|0));
														$881 = __THREW__; __THREW__ = 0;
														$882 = $881&1;
														if ($882) {
															label = 18;
															break L1;
														}
													}
													$883 = ((($f)) + 92|0);
													$884 = ((($f)) + 96|0);
													$885 = HEAP32[$884>>2]|0;
													$886 = HEAP32[$883>>2]|0;
													$887 = (($885) - ($886))|0;
													$888 = $887 >> 2;
													$889 = ($888*10)|0;
													$890 = (($889) + -10)|0;
													$891 = (($890|0) / 100)&-1;
													__THREW__ = 0;
													$892 = (invoke_iii(139,($877|0),($891|0))|0);
													$893 = __THREW__; __THREW__ = 0;
													$894 = $893&1;
													if ($894) {
														label = 18;
														break L1;
													}
													$895 = $892 << 1;
													$896 = HEAP32[$123>>2]|0;
													$897 = HEAP32[$17>>2]|0;
													$898 = (($896) + 1)|0;
													$899 = (($898) - ($897))|0;
													$900 = ($895|0)>($899|0);
													if (!($900)) {
														label = 208;
														break L137;
													}
													$901 = ((($f)) + 152|0);
													$902 = ((($f)) + 160|0);
													$903 = HEAP32[$902>>2]|0;
													$904 = ($903|0)<(0);
													if ($904) {
														__THREW__ = 0;
														invoke_vi(141,($901|0));
														$905 = __THREW__; __THREW__ = 0;
														$906 = $905&1;
														if ($906) {
															label = 18;
															break L1;
														}
													}
													$907 = ((($f)) + 188|0);
													$908 = ((($f)) + 192|0);
													$909 = HEAP32[$908>>2]|0;
													$910 = HEAP32[$907>>2]|0;
													$911 = (($909) - ($910))|0;
													$912 = $911 >> 2;
													$913 = ($912*75)|0;
													$914 = (($913) + -75)|0;
													$915 = (($914|0) / 100)&-1;
													__THREW__ = 0;
													$916 = (invoke_iiii(145,($901|0),($915|0),2)|0);
													$917 = __THREW__; __THREW__ = 0;
													$918 = $917&1;
													if ($918) {
														label = 18;
														break L1;
													}
													if ($916) {
														label = 208;
														break L137;
													}
													$919 = HEAP32[$17>>2]|0;
													$920 = HEAP32[$123>>2]|0;
													$921 = (($920) + ($919))|0;
													$922 = (($921|0) / 2)&-1;
													__THREW__ = 0;
													$923 = (invoke_iiiiii(140,($this|0),114,($922|0),116,0)|0);
													$924 = __THREW__; __THREW__ = 0;
													$925 = $924&1;
													if ($925) {
														label = 18;
														break L1;
													}
													if (!($923)) {
														label = 208;
														break L137;
													}
													__ZN8FeaturesD2Ev($f);
													STACKTOP = sp;return;
													break;
												}
												default: {
												}
											}
										} while(0);
										if ((label|0) == 208) {
											$926 = ($505|0)==(0);
											if ($926) {
												break;
											}
										}
										HEAP32[$2>>2] = $505;
										$927 = ((($2)) + 4|0);
										HEAP32[$927>>2] = 0;
										$928 = ((($this)) + 32|0);
										$929 = HEAP32[$928>>2]|0;
										$930 = ((($this)) + 36|0);
										$931 = HEAP32[$930>>2]|0;
										$932 = ($929|0)==($931|0);
										if ($932) {
											$945 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($945|0),($2|0));
											$946 = __THREW__; __THREW__ = 0;
											$947 = $946&1;
											if ($947) {
												label = 18;
												break L1;
											}
										} else {
											$933 = $2;
											$934 = $933;
											$935 = HEAP32[$934>>2]|0;
											$936 = (($933) + 4)|0;
											$937 = $936;
											$938 = HEAP32[$937>>2]|0;
											$939 = $929;
											$940 = $939;
											HEAP32[$940>>2] = $935;
											$941 = (($939) + 4)|0;
											$942 = $941;
											HEAP32[$942>>2] = $938;
											$943 = HEAP32[$928>>2]|0;
											$944 = ((($943)) + 8|0);
											HEAP32[$928>>2] = $944;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								} while(0);
								__THREW__ = 0;
								$948 = (invoke_iii(143,($480|0),-1)|0);
								$949 = __THREW__; __THREW__ = 0;
								$950 = $949&1;
								if ($950) {
									label = 18;
									break L1;
								}
								$951 = ($948|0)==(3);
								if ($951) {
									$952 = HEAP32[$115>>2]|0;
									$953 = HEAP32[$117>>2]|0;
									$954 = (($952) + 1)|0;
									$955 = (($954) - ($953))|0;
									$956 = (($955|0) / 2)&-1;
									__THREW__ = 0;
									$957 = (invoke_iii(143,($480|0),($956|0))|0);
									$958 = __THREW__; __THREW__ = 0;
									$959 = $958&1;
									if ($959) {
										label = 18;
										break L1;
									}
									$960 = ($957|0)==(1);
									do {
										if ($960) {
											$961 = ((($f)) + 104|0);
											__THREW__ = 0;
											$962 = (invoke_iii(143,($961|0),-1)|0);
											$963 = __THREW__; __THREW__ = 0;
											$964 = $963&1;
											if ($964) {
												label = 18;
												break L1;
											}
											$965 = ($962|0)==(3);
											if (!($965)) {
												break;
											}
											$966 = ((($f)) + 56|0);
											__THREW__ = 0;
											$967 = (invoke_iii(143,($966|0),-1)|0);
											$968 = __THREW__; __THREW__ = 0;
											$969 = $968&1;
											if ($969) {
												label = 18;
												break L1;
											}
											$970 = ($967|0)==(2);
											if (!($970)) {
												break;
											}
											$971 = ((($f)) + 152|0);
											__THREW__ = 0;
											$972 = (invoke_iii(143,($971|0),-1)|0);
											$973 = __THREW__; __THREW__ = 0;
											$974 = $973&1;
											if ($974) {
												label = 18;
												break L1;
											}
											$975 = ($972|0)==(2);
											if (!($975)) {
												break;
											}
											HEAP32[$9>>2] = 42;
											$976 = ((($9)) + 4|0);
											HEAP32[$976>>2] = 0;
											$977 = ((($this)) + 32|0);
											$978 = HEAP32[$977>>2]|0;
											$979 = ((($this)) + 36|0);
											$980 = HEAP32[$979>>2]|0;
											$981 = ($978|0)==($980|0);
											if ($981) {
												$994 = ((($this)) + 28|0);
												__THREW__ = 0;
												invoke_vii(125,($994|0),($9|0));
												$995 = __THREW__; __THREW__ = 0;
												$996 = $995&1;
												if ($996) {
													label = 18;
													break L1;
												}
											} else {
												$982 = $9;
												$983 = $982;
												$984 = HEAP32[$983>>2]|0;
												$985 = (($982) + 4)|0;
												$986 = $985;
												$987 = HEAP32[$986>>2]|0;
												$988 = $978;
												$989 = $988;
												HEAP32[$989>>2] = $984;
												$990 = (($988) + 4)|0;
												$991 = $990;
												HEAP32[$991>>2] = $987;
												$992 = HEAP32[$977>>2]|0;
												$993 = ((($992)) + 8|0);
												HEAP32[$977>>2] = $993;
											}
											__ZN8FeaturesD2Ev($f);
											STACKTOP = sp;return;
										}
									} while(0);
									$997 = HEAP32[$117>>2]|0;
									$998 = HEAP32[$115>>2]|0;
									$999 = (($998) + ($997))|0;
									$1000 = (($999|0) / 2)&-1;
									$1001 = HEAP32[$17>>2]|0;
									$1002 = HEAP32[$123>>2]|0;
									$1003 = (($1002) + ($1001))|0;
									$1004 = (($1003|0) / 2)&-1;
									__THREW__ = 0;
									$1005 = (invoke_iiii(151,($17|0),($1000|0),($1004|0))|0);
									$1006 = __THREW__; __THREW__ = 0;
									$1007 = $1006&1;
									if ($1007) {
										label = 18;
										break L1;
									}
									$1008 = ($1005|0)==(0);
									do {
										if ($1008) {
											$1009 = HEAP32[$117>>2]|0;
											$1010 = HEAP32[$115>>2]|0;
											$1011 = (($1010) + ($1009))|0;
											$1012 = (($1011|0) / 2)&-1;
											$1013 = (($1012) + -1)|0;
											$1014 = HEAP32[$17>>2]|0;
											$1015 = HEAP32[$123>>2]|0;
											$1016 = (($1015) + ($1014))|0;
											$1017 = (($1016|0) / 2)&-1;
											__THREW__ = 0;
											$1018 = (invoke_iiii(151,($17|0),($1013|0),($1017|0))|0);
											$1019 = __THREW__; __THREW__ = 0;
											$1020 = $1019&1;
											if ($1020) {
												label = 18;
												break L1;
											}
											$1021 = ($1018|0)==(0);
											if (!($1021)) {
												break;
											}
											$1022 = HEAP32[$117>>2]|0;
											$1023 = HEAP32[$115>>2]|0;
											$1024 = (($1023) + ($1022))|0;
											$1025 = (($1024|0) / 2)&-1;
											$1026 = (($1025) + 1)|0;
											$1027 = HEAP32[$17>>2]|0;
											$1028 = HEAP32[$123>>2]|0;
											$1029 = (($1028) + ($1027))|0;
											$1030 = (($1029|0) / 2)&-1;
											__THREW__ = 0;
											$1031 = (invoke_iiii(151,($17|0),($1026|0),($1030|0))|0);
											$1032 = __THREW__; __THREW__ = 0;
											$1033 = $1032&1;
											if ($1033) {
												label = 18;
												break L1;
											}
											$1034 = ($1031|0)==(0);
											if (!($1034)) {
												break;
											}
											$1035 = HEAP32[$117>>2]|0;
											$1036 = HEAP32[$115>>2]|0;
											$1037 = (($1036) + ($1035))|0;
											$1038 = (($1037|0) / 2)&-1;
											$1039 = HEAP32[$17>>2]|0;
											$1040 = HEAP32[$123>>2]|0;
											$1041 = (($1040) + ($1039))|0;
											$1042 = (($1041|0) / 2)&-1;
											__THREW__ = 0;
											$1043 = (invoke_iiiii(136,($17|0),($1038|0),($1042|0),1)|0);
											$1044 = __THREW__; __THREW__ = 0;
											$1045 = $1044&1;
											if ($1045) {
												label = 18;
												break L1;
											}
											$1046 = HEAP32[$17>>2]|0;
											$1047 = HEAP32[$123>>2]|0;
											$1048 = (($1047) - ($1046))|0;
											$1049 = (($1048|0) / 4)&-1;
											$1050 = (($1049) + ($1046))|0;
											$1051 = ($1043|0)>($1050|0);
											if ($1051) {
												break;
											}
											$1052 = HEAP32[$117>>2]|0;
											$1053 = HEAP32[$115>>2]|0;
											$1054 = (($1053) - ($1052))|0;
											$1055 = ($1054*95)|0;
											$1056 = (($1055|0) / 100)&-1;
											$1057 = (($1056) + ($1052))|0;
											__THREW__ = 0;
											$1058 = (invoke_iiiii(146,($17|0),($1057|0),($1046|0),1)|0);
											$1059 = __THREW__; __THREW__ = 0;
											$1060 = $1059&1;
											if ($1060) {
												label = 18;
												break L1;
											}
											$1061 = (($1058) + 1)|0;
											__THREW__ = 0;
											$1062 = (invoke_iiiii(146,($17|0),($1057|0),($1061|0),0)|0);
											$1063 = __THREW__; __THREW__ = 0;
											$1064 = $1063&1;
											if ($1064) {
												label = 18;
												break L1;
											}
											$1065 = (($1062) + 1)|0;
											__THREW__ = 0;
											$1066 = (invoke_iiiii(146,($17|0),($1057|0),($1065|0),1)|0);
											$1067 = __THREW__; __THREW__ = 0;
											$1068 = $1067&1;
											if ($1068) {
												label = 18;
												break L1;
											}
											$1069 = HEAP32[$17>>2]|0;
											$1070 = ($1066|0)>($1069|0);
											$1071 = HEAP32[$123>>2]|0;
											$1072 = ($1066|0)<($1071|0);
											$or$cond124 = $1070 & $1072;
											if (!($or$cond124)) {
												break;
											}
											__THREW__ = 0;
											$1073 = (invoke_iiiiii(140,($this|0),114,($1066|0),110,0)|0);
											$1074 = __THREW__; __THREW__ = 0;
											$1075 = $1074&1;
											if ($1075) {
												label = 18;
												break L1;
											}
											if (!($1073)) {
												break;
											}
											__ZN8FeaturesD2Ev($f);
											STACKTOP = sp;return;
										}
									} while(0);
									$1076 = ((($f)) + 104|0);
									$1077 = HEAP32[$115>>2]|0;
									$1078 = HEAP32[$117>>2]|0;
									$1079 = (($1077) + 1)|0;
									$1080 = (($1079) - ($1078))|0;
									$1081 = (($1080|0) / 3)&-1;
									__THREW__ = 0;
									$1082 = (invoke_iii(143,($1076|0),($1081|0))|0);
									$1083 = __THREW__; __THREW__ = 0;
									$1084 = $1083&1;
									if ($1084) {
										label = 18;
										break L1;
									}
									$1085 = ($1082|0)==(1);
									if (!($1085)) {
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
									HEAP32[$10>>2] = 109;
									$1086 = ((($10)) + 4|0);
									HEAP32[$1086>>2] = 0;
									$1087 = ((($this)) + 32|0);
									$1088 = HEAP32[$1087>>2]|0;
									$1089 = ((($this)) + 36|0);
									$1090 = HEAP32[$1089>>2]|0;
									$1091 = ($1088|0)==($1090|0);
									if ($1091) {
										$1104 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($1104|0),($10|0));
										$1105 = __THREW__; __THREW__ = 0;
										$1106 = $1105&1;
										if ($1106) {
											label = 18;
											break L1;
										}
									} else {
										$1092 = $10;
										$1093 = $1092;
										$1094 = HEAP32[$1093>>2]|0;
										$1095 = (($1092) + 4)|0;
										$1096 = $1095;
										$1097 = HEAP32[$1096>>2]|0;
										$1098 = $1088;
										$1099 = $1098;
										HEAP32[$1099>>2] = $1094;
										$1100 = (($1098) + 4)|0;
										$1101 = $1100;
										HEAP32[$1101>>2] = $1097;
										$1102 = HEAP32[$1087>>2]|0;
										$1103 = ((($1102)) + 8|0);
										HEAP32[$1087>>2] = $1103;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								__THREW__ = 0;
								$1107 = (invoke_iii(143,($480|0),-1)|0);
								$1108 = __THREW__; __THREW__ = 0;
								$1109 = $1108&1;
								if ($1109) {
									label = 18;
									break L1;
								}
								$1110 = ($1107|0)==(4);
								$1111 = ((($f)) + 104|0);
								do {
									if ($1110) {
										$1112 = HEAP32[$115>>2]|0;
										$1113 = HEAP32[$117>>2]|0;
										$1114 = (($1112) + 1)|0;
										$1115 = (($1114) - ($1113))|0;
										$1116 = (($1115|0) / 3)&-1;
										__THREW__ = 0;
										$1117 = (invoke_iii(143,($1111|0),($1116|0))|0);
										$1118 = __THREW__; __THREW__ = 0;
										$1119 = $1118&1;
										if ($1119) {
											label = 18;
											break L1;
										}
										$1120 = ($1117|0)==(1);
										if (!($1120)) {
											break;
										}
										$1121 = HEAP32[$117>>2]|0;
										$1122 = HEAP32[$115>>2]|0;
										$1123 = (($1122) - ($1121))|0;
										$1124 = ($1123*95)|0;
										$1125 = (($1124|0) / 100)&-1;
										$1126 = (($1125) + ($1121))|0;
										$1127 = HEAP32[$17>>2]|0;
										__THREW__ = 0;
										$1128 = (invoke_iiiii(146,($17|0),($1126|0),($1127|0),1)|0);
										$1129 = __THREW__; __THREW__ = 0;
										$1130 = $1129&1;
										if ($1130) {
											label = 18;
											break L1;
										}
										$1131 = (($1128) + 1)|0;
										__THREW__ = 0;
										$1132 = (invoke_iiiii(146,($17|0),($1126|0),($1131|0),0)|0);
										$1133 = __THREW__; __THREW__ = 0;
										$1134 = $1133&1;
										if ($1134) {
											label = 18;
											break L1;
										}
										$1135 = (($1132) + 1)|0;
										__THREW__ = 0;
										$1136 = (invoke_iiiii(146,($17|0),($1126|0),($1135|0),1)|0);
										$1137 = __THREW__; __THREW__ = 0;
										$1138 = $1137&1;
										if ($1138) {
											label = 18;
											break L1;
										}
										$1139 = HEAP32[$17>>2]|0;
										$1140 = ($1136|0)>($1139|0);
										$1141 = HEAP32[$123>>2]|0;
										$1142 = ($1136|0)<($1141|0);
										$or$cond126 = $1140 & $1142;
										if (!($or$cond126)) {
											break;
										}
										__THREW__ = 0;
										$1143 = (invoke_iiiiii(140,($this|0),114,($1136|0),109,0)|0);
										$1144 = __THREW__; __THREW__ = 0;
										$1145 = $1144&1;
										if ($1145) {
											label = 18;
											break L1;
										}
										if (!($1143)) {
											break;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								} while(0);
								$1146 = HEAP32[$115>>2]|0;
								$1147 = HEAP32[$117>>2]|0;
								$1148 = (($1146) + 1)|0;
								$1149 = (($1148) - ($1147))|0;
								$1150 = (($1149|0) / 4)&-1;
								__THREW__ = 0;
								$1151 = (invoke_iii(143,($1111|0),($1150|0))|0);
								$1152 = __THREW__; __THREW__ = 0;
								$1153 = $1152&1;
								if ($1153) {
									label = 18;
									break L1;
								}
								$1154 = ($1151|0)==(3);
								if (!($1154)) {
									__THREW__ = 0;
									$1251 = (invoke_iii(154,($f|0),($charbox|0))|0);
									$1252 = __THREW__; __THREW__ = 0;
									$1253 = $1252&1;
									if ($1253) {
										label = 18;
										break L1;
									}
									$1254 = ($1251|0)==(0);
									if (!($1254)) {
										HEAP32[$12>>2] = $1251;
										$1255 = ((($12)) + 4|0);
										HEAP32[$1255>>2] = 0;
										$1256 = ((($this)) + 32|0);
										$1257 = HEAP32[$1256>>2]|0;
										$1258 = ((($this)) + 36|0);
										$1259 = HEAP32[$1258>>2]|0;
										$1260 = ($1257|0)==($1259|0);
										if ($1260) {
											$1273 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($1273|0),($12|0));
											$1274 = __THREW__; __THREW__ = 0;
											$1275 = $1274&1;
											if ($1275) {
												label = 18;
												break L1;
											}
										} else {
											$1261 = $12;
											$1262 = $1261;
											$1263 = HEAP32[$1262>>2]|0;
											$1264 = (($1261) + 4)|0;
											$1265 = $1264;
											$1266 = HEAP32[$1265>>2]|0;
											$1267 = $1257;
											$1268 = $1267;
											HEAP32[$1268>>2] = $1263;
											$1269 = (($1267) + 4)|0;
											$1270 = $1269;
											HEAP32[$1270>>2] = $1266;
											$1271 = HEAP32[$1256>>2]|0;
											$1272 = ((($1271)) + 8|0);
											HEAP32[$1256>>2] = $1272;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
									__THREW__ = 0;
									$1276 = (invoke_iii(155,($f|0),($charbox|0))|0);
									$1277 = __THREW__; __THREW__ = 0;
									$1278 = $1277&1;
									if ($1278) {
										label = 18;
										break L1;
									}
									$1279 = ($1276|0)==(0);
									if ($1279) {
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
									HEAP32[$16>>2] = $1276;
									$1280 = ((($16)) + 4|0);
									HEAP32[$1280>>2] = 0;
									$1281 = ((($this)) + 32|0);
									$1282 = HEAP32[$1281>>2]|0;
									$1283 = ((($this)) + 36|0);
									$1284 = HEAP32[$1283>>2]|0;
									$1285 = ($1282|0)==($1284|0);
									if ($1285) {
										$1298 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($1298|0),($16|0));
										$1299 = __THREW__; __THREW__ = 0;
										$1300 = $1299&1;
										if ($1300) {
											label = 18;
											break L1;
										}
									} else {
										$1286 = $16;
										$1287 = $1286;
										$1288 = HEAP32[$1287>>2]|0;
										$1289 = (($1286) + 4)|0;
										$1290 = $1289;
										$1291 = HEAP32[$1290>>2]|0;
										$1292 = $1282;
										$1293 = $1292;
										HEAP32[$1293>>2] = $1288;
										$1294 = (($1292) + 4)|0;
										$1295 = $1294;
										HEAP32[$1295>>2] = $1291;
										$1296 = HEAP32[$1281>>2]|0;
										$1297 = ((($1296)) + 8|0);
										HEAP32[$1281>>2] = $1297;
									}
									__ZN8FeaturesD2Ev($f);
									STACKTOP = sp;return;
								}
								$1155 = HEAP32[$117>>2]|0;
								$1156 = HEAP32[$115>>2]|0;
								$1157 = (($1156) + ($1155))|0;
								$1158 = (($1157|0) / 2)&-1;
								$1159 = ((($f)) + 32|0);
								$1160 = HEAP32[$1159>>2]|0;
								$1161 = ((($f)) + 36|0);
								$1162 = HEAP32[$1161>>2]|0;
								$1163 = ($1160|0)==($1162|0);
								if ($1163) {
									__THREW__ = 0;
									invoke_vi(152,($f|0));
									$1164 = __THREW__; __THREW__ = 0;
									$1165 = $1164&1;
									if ($1165) {
										label = 18;
										break L1;
									}
									$$pre$i39 = HEAP32[$1159>>2]|0;
									$1171 = $$pre$i39;
								} else {
									$1171 = $1160;
								}
								$1166 = HEAP32[$f>>2]|0;
								$1167 = ((($1166)) + 4|0);
								$1168 = HEAP32[$1167>>2]|0;
								$1169 = (($1158) - ($1168))|0;
								$1170 = (($1171) + (($1169*12)|0)|0);
								$1172 = (((($1171) + (($1169*12)|0)|0)) + 4|0);
								$1173 = HEAP32[$1172>>2]|0;
								$1174 = HEAP32[$1170>>2]|0;
								$1175 = (($1173) - ($1174))|0;
								$1176 = ($1175|0)==(16);
								do {
									if ($1176) {
										$1177 = HEAP32[$117>>2]|0;
										$1178 = HEAP32[$115>>2]|0;
										$1179 = (($1178) - ($1177))|0;
										$1180 = ($1179*80)|0;
										$1181 = (($1180|0) / 100)&-1;
										$1182 = (($1181) + ($1177))|0;
										$1183 = HEAP32[$1161>>2]|0;
										$1184 = ($1171|0)==($1183|0);
										if ($1184) {
											__THREW__ = 0;
											invoke_vi(152,($f|0));
											$1185 = __THREW__; __THREW__ = 0;
											$1186 = $1185&1;
											if ($1186) {
												label = 18;
												break L1;
											}
											$$pre$i36 = HEAP32[$1159>>2]|0;
											$$pre209 = HEAP32[$f>>2]|0;
											$$phi$trans$insert210 = ((($$pre209)) + 4|0);
											$$pre211 = HEAP32[$$phi$trans$insert210>>2]|0;
											$1188 = $$pre211;$1190 = $$pre$i36;
										} else {
											$1188 = $1168;$1190 = $1171;
										}
										$1187 = (($1182) - ($1188))|0;
										$1189 = (($1190) + (($1187*12)|0)|0);
										$1191 = (((($1190) + (($1187*12)|0)|0)) + 4|0);
										$1192 = HEAP32[$1191>>2]|0;
										$1193 = HEAP32[$1189>>2]|0;
										$1194 = (($1192) - ($1193))|0;
										$1195 = ($1194|0)==(24);
										if (!($1195)) {
											break;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								} while(0);
								__THREW__ = 0;
								$1196 = (invoke_iii(153,($17|0),($hdiff|0))|0);
								$1197 = __THREW__; __THREW__ = 0;
								$1198 = $1197&1;
								if ($1198) {
									label = 18;
									break L1;
								}
								do {
									if (!($1196)) {
										$1199 = HEAP32[$117>>2]|0;
										$1200 = HEAP32[$115>>2]|0;
										$1201 = (($1200) + ($1199))|0;
										$1202 = (($1201|0) / 2)&-1;
										$1203 = HEAP32[$1159>>2]|0;
										$1204 = HEAP32[$1161>>2]|0;
										$1205 = ($1203|0)==($1204|0);
										if ($1205) {
											__THREW__ = 0;
											invoke_vi(152,($f|0));
											$1206 = __THREW__; __THREW__ = 0;
											$1207 = $1206&1;
											if ($1207) {
												label = 18;
												break L1;
											}
											$$pre$i = HEAP32[$1159>>2]|0;
											$1213 = $$pre$i;
										} else {
											$1213 = $1203;
										}
										$1208 = HEAP32[$f>>2]|0;
										$1209 = ((($1208)) + 4|0);
										$1210 = HEAP32[$1209>>2]|0;
										$1211 = (($1202) - ($1210))|0;
										$1212 = (($1213) + (($1211*12)|0)|0);
										$1214 = (((($1213) + (($1211*12)|0)|0)) + 4|0);
										$1215 = HEAP32[$1214>>2]|0;
										$1216 = HEAP32[$1212>>2]|0;
										$1217 = (($1215) - ($1216))|0;
										$1218 = ($1217|0)<(32);
										if (!($1218)) {
											$1219 = HEAP32[$117>>2]|0;
											$1220 = HEAP32[$115>>2]|0;
											$1221 = (($1220) + ($1219))|0;
											$1222 = (($1221|0) / 2)&-1;
											$1223 = HEAP32[$17>>2]|0;
											$1224 = HEAP32[$123>>2]|0;
											$1225 = (($1224) + ($1223))|0;
											$1226 = (($1225|0) / 2)&-1;
											__THREW__ = 0;
											$1227 = (invoke_iiii(137,($17|0),($1222|0),($1226|0))|0);
											$1228 = __THREW__; __THREW__ = 0;
											$1229 = $1228&1;
											if ($1229) {
												label = 18;
												break L1;
											}
											if ($1227) {
												break;
											}
										}
										HEAP32[$11>>2] = 119;
										$1230 = ((($11)) + 4|0);
										HEAP32[$1230>>2] = 0;
										$1231 = ((($this)) + 32|0);
										$1232 = HEAP32[$1231>>2]|0;
										$1233 = ((($this)) + 36|0);
										$1234 = HEAP32[$1233>>2]|0;
										$1235 = ($1232|0)==($1234|0);
										if ($1235) {
											$1248 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($1248|0),($11|0));
											$1249 = __THREW__; __THREW__ = 0;
											$1250 = $1249&1;
											if ($1250) {
												label = 18;
												break L1;
											}
										} else {
											$1236 = $11;
											$1237 = $1236;
											$1238 = HEAP32[$1237>>2]|0;
											$1239 = (($1236) + 4)|0;
											$1240 = $1239;
											$1241 = HEAP32[$1240>>2]|0;
											$1242 = $1232;
											$1243 = $1242;
											HEAP32[$1243>>2] = $1238;
											$1244 = (($1242) + 4)|0;
											$1245 = $1244;
											HEAP32[$1245>>2] = $1241;
											$1246 = HEAP32[$1231>>2]|0;
											$1247 = ((($1246)) + 8|0);
											HEAP32[$1231>>2] = $1247;
										}
									}
								} while(0);
								__ZN8FeaturesD2Ev($f);
								STACKTOP = sp;return;
								break;
							}
							case 46:  {
								$21 = ((($17)) + 8|0);
								$22 = HEAP32[$21>>2]|0;
								$23 = HEAP32[$17>>2]|0;
								$24 = (($22) + 1)|0;
								$25 = (($24) - ($23))|0;
								$26 = ((($17)) + 12|0);
								$27 = HEAP32[$26>>2]|0;
								$28 = ((($17)) + 4|0);
								$29 = HEAP32[$28>>2]|0;
								$30 = (($27) + 1)|0;
								$31 = (($30) - ($29))|0;
								$32 = ($25|0)>($31|0);
								if ($32) {
									$33 = ((($charbox)) + 4|0);
									$34 = HEAP32[$33>>2]|0;
									$35 = ((($charbox)) + 12|0);
									$36 = HEAP32[$35>>2]|0;
									$37 = (($36) + ($34))|0;
									$38 = (($37|0) / 2)&-1;
									__THREW__ = 0;
									$39 = (invoke_iii(124,($17|0),($38|0))|0);
									$40 = __THREW__; __THREW__ = 0;
									$41 = $40&1;
									if ($41) {
										label = 18;
										break L1;
									}
									if ($39) {
										HEAP32[$15>>2] = 46;
										$42 = ((($15)) + 4|0);
										HEAP32[$42>>2] = 1;
										$43 = ((($this)) + 32|0);
										$44 = HEAP32[$43>>2]|0;
										$45 = ((($this)) + 36|0);
										$46 = HEAP32[$45>>2]|0;
										$47 = ($44|0)==($46|0);
										if ($47) {
											$60 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($60|0),($15|0));
											$61 = __THREW__; __THREW__ = 0;
											$62 = $61&1;
											if ($62) {
												label = 18;
												break L1;
											}
											$$pre = HEAP32[$43>>2]|0;
											$65 = $$pre;
										} else {
											$48 = $15;
											$49 = $48;
											$50 = HEAP32[$49>>2]|0;
											$51 = (($48) + 4)|0;
											$52 = $51;
											$53 = HEAP32[$52>>2]|0;
											$54 = $44;
											$55 = $54;
											HEAP32[$55>>2] = $50;
											$56 = (($54) + 4)|0;
											$57 = $56;
											HEAP32[$57>>2] = $53;
											$58 = HEAP32[$43>>2]|0;
											$59 = ((($58)) + 8|0);
											HEAP32[$43>>2] = $59;
											$65 = $59;
										}
										HEAP32[$14>>2] = 45;
										$63 = ((($14)) + 4|0);
										HEAP32[$63>>2] = 0;
										$64 = HEAP32[$45>>2]|0;
										$66 = ($65|0)==($64|0);
										if ($66) {
											$79 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($79|0),($14|0));
											$80 = __THREW__; __THREW__ = 0;
											$81 = $80&1;
											if ($81) {
												label = 18;
												break L1;
											}
										} else {
											$67 = $14;
											$68 = $67;
											$69 = HEAP32[$68>>2]|0;
											$70 = (($67) + 4)|0;
											$71 = $70;
											$72 = HEAP32[$71>>2]|0;
											$73 = $65;
											$74 = $73;
											HEAP32[$74>>2] = $69;
											$75 = (($73) + 4)|0;
											$76 = $75;
											HEAP32[$76>>2] = $72;
											$77 = HEAP32[$43>>2]|0;
											$78 = ((($77)) + 8|0);
											HEAP32[$43>>2] = $78;
										}
										__ZN8FeaturesD2Ev($f);
										STACKTOP = sp;return;
									}
								}
								break;
							}
							default: {
							}
						}
						HEAP32[$13>>2] = $18;
						$94 = ((($13)) + 4|0);
						HEAP32[$94>>2] = 0;
						$95 = ((($this)) + 32|0);
						$96 = HEAP32[$95>>2]|0;
						$97 = ((($this)) + 36|0);
						$98 = HEAP32[$97>>2]|0;
						$99 = ($96|0)==($98|0);
						if ($99) {
							$112 = ((($this)) + 28|0);
							__THREW__ = 0;
							invoke_vii(125,($112|0),($13|0));
							$113 = __THREW__; __THREW__ = 0;
							$114 = $113&1;
							if ($114) {
								label = 18;
								break;
							}
						} else {
							$100 = $13;
							$101 = $100;
							$102 = HEAP32[$101>>2]|0;
							$103 = (($100) + 4)|0;
							$104 = $103;
							$105 = HEAP32[$104>>2]|0;
							$106 = $96;
							$107 = $106;
							HEAP32[$107>>2] = $102;
							$108 = (($106) + 4)|0;
							$109 = $108;
							HEAP32[$109>>2] = $105;
							$110 = HEAP32[$95>>2]|0;
							$111 = ((($110)) + 8|0);
							HEAP32[$95>>2] = $111;
						}
						__ZN8FeaturesD2Ev($f);
						STACKTOP = sp;return;
					}
				} while(0);
				if ((label|0) == 18) {
					$90 = ___cxa_find_matching_catch_2()|0;
					$91 = tempRet0;
					$lpad$phi$index = $90;$lpad$phi$index5 = $91;
				}
				__THREW__ = 0;
				invoke_vi(126,($f|0));
				$92 = __THREW__; __THREW__ = 0;
				$93 = $92&1;
				if ($93) {
					$1301 = ___cxa_find_matching_catch_3(0|0)|0;
					$1302 = tempRet0;
					___clang_call_terminate($1301);
					// unreachable;
				} else {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
			}
			function __ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 3;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(536870911);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 3;
				$11 = ($10>>>0)<(268435455);
				if ($11) {
					$15 = $9 >> 2;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 3;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$42 = $18;
					} else {
						$$0$i1 = $17;$50 = $18;$51 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 3;
					$$0$i1 = 536870911;$50 = $12;$51 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 3;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $51;$42 = $50;
				}
				$24 = (($25) + ($26<<3)|0);
				$27 = (($25) + ($$0$i2<<3)|0);
				$28 = $27;
				$29 = $__x;
				$30 = $29;
				$31 = HEAP32[$30>>2]|0;
				$32 = (($29) + 4)|0;
				$33 = $32;
				$34 = HEAP32[$33>>2]|0;
				$35 = $24;
				$36 = $35;
				HEAP32[$36>>2] = $31;
				$37 = (($35) + 4)|0;
				$38 = $37;
				HEAP32[$38>>2] = $34;
				$39 = ((($24)) + 8|0);
				$40 = $39;
				$41 = (($42) - ($$in))|0;
				$43 = $41 >> 3;
				$44 = (0 - ($43))|0;
				$45 = (($24) + ($44<<3)|0);
				$46 = $45;
				$47 = $$in;
				_memcpy(($45|0),($47|0),($41|0))|0;
				HEAP32[$this>>2] = $46;
				HEAP32[$0>>2] = $40;
				HEAP32[$7>>2] = $28;
				$48 = ($$in|0)==(0);
				if ($48) {
					return;
				}
				$49 = $$in;
				__ZdlPv($49);
				return;
			}
			function __ZN8FeaturesD2Ev($this) {
				$this = $this|0;
				var $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i39 = 0, $$pre$i42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
				var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
				var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
				var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
				var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
				var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i36 = 0, $scevgep$i$i$i$i14 = 0, $scevgep$i$i$i$i19 = 0;
				var $scevgep$i$i$i$i24 = 0, $scevgep$i$i$i$i29 = 0, $scevgep$i$i$i$i9 = 0, $scevgep$i$i$i46 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i37 = 0, $scevgep4$i$i$i$i10 = 0, $scevgep4$i$i$i$i15 = 0, $scevgep4$i$i$i$i20 = 0, $scevgep4$i$i$i$i25 = 0, $scevgep4$i$i$i$i30 = 0, $scevgep4$i$i$i47 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 332|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0|0);
				$3 = $1;
				if (!($2)) {
					$4 = ((($this)) + 336|0);
					$5 = HEAP32[$4>>2]|0;
					$6 = ($5|0)==($1|0);
					if (!($6)) {
						$scevgep$i$i$i$i = ((($5)) + -4|0);
						$7 = $scevgep$i$i$i$i;
						$8 = (($7) - ($3))|0;
						$9 = $8 >>> 2;
						$10 = $9 ^ -1;
						$scevgep4$i$i$i$i = (($5) + ($10<<2)|0);
						HEAP32[$4>>2] = $scevgep4$i$i$i$i;
					}
					__ZdlPv($1);
				}
				$11 = ((($this)) + 284|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ($12|0)==(0|0);
				$14 = $12;
				if (!($13)) {
					$15 = ((($this)) + 288|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = ($16|0)==($12|0);
					if (!($17)) {
						$scevgep$i$i$i$i9 = ((($16)) + -4|0);
						$18 = $scevgep$i$i$i$i9;
						$19 = (($18) - ($14))|0;
						$20 = $19 >>> 2;
						$21 = $20 ^ -1;
						$scevgep4$i$i$i$i10 = (($16) + ($21<<2)|0);
						HEAP32[$15>>2] = $scevgep4$i$i$i$i10;
					}
					__ZdlPv($12);
				}
				$22 = ((($this)) + 236|0);
				$23 = HEAP32[$22>>2]|0;
				$24 = ($23|0)==(0|0);
				$25 = $23;
				if (!($24)) {
					$26 = ((($this)) + 240|0);
					$27 = HEAP32[$26>>2]|0;
					$28 = ($27|0)==($23|0);
					if (!($28)) {
						$scevgep$i$i$i$i14 = ((($27)) + -4|0);
						$29 = $scevgep$i$i$i$i14;
						$30 = (($29) - ($25))|0;
						$31 = $30 >>> 2;
						$32 = $31 ^ -1;
						$scevgep4$i$i$i$i15 = (($27) + ($32<<2)|0);
						HEAP32[$26>>2] = $scevgep4$i$i$i$i15;
					}
					__ZdlPv($23);
				}
				$33 = ((($this)) + 188|0);
				$34 = HEAP32[$33>>2]|0;
				$35 = ($34|0)==(0|0);
				$36 = $34;
				if (!($35)) {
					$37 = ((($this)) + 192|0);
					$38 = HEAP32[$37>>2]|0;
					$39 = ($38|0)==($34|0);
					if (!($39)) {
						$scevgep$i$i$i$i19 = ((($38)) + -4|0);
						$40 = $scevgep$i$i$i$i19;
						$41 = (($40) - ($36))|0;
						$42 = $41 >>> 2;
						$43 = $42 ^ -1;
						$scevgep4$i$i$i$i20 = (($38) + ($43<<2)|0);
						HEAP32[$37>>2] = $scevgep4$i$i$i$i20;
					}
					__ZdlPv($34);
				}
				$44 = ((($this)) + 140|0);
				$45 = HEAP32[$44>>2]|0;
				$46 = ($45|0)==(0|0);
				$47 = $45;
				if (!($46)) {
					$48 = ((($this)) + 144|0);
					$49 = HEAP32[$48>>2]|0;
					$50 = ($49|0)==($45|0);
					if (!($50)) {
						$scevgep$i$i$i$i24 = ((($49)) + -4|0);
						$51 = $scevgep$i$i$i$i24;
						$52 = (($51) - ($47))|0;
						$53 = $52 >>> 2;
						$54 = $53 ^ -1;
						$scevgep4$i$i$i$i25 = (($49) + ($54<<2)|0);
						HEAP32[$48>>2] = $scevgep4$i$i$i$i25;
					}
					__ZdlPv($45);
				}
				$55 = ((($this)) + 92|0);
				$56 = HEAP32[$55>>2]|0;
				$57 = ($56|0)==(0|0);
				$58 = $56;
				if (!($57)) {
					$59 = ((($this)) + 96|0);
					$60 = HEAP32[$59>>2]|0;
					$61 = ($60|0)==($56|0);
					if (!($61)) {
						$scevgep$i$i$i$i29 = ((($60)) + -4|0);
						$62 = $scevgep$i$i$i$i29;
						$63 = (($62) - ($58))|0;
						$64 = $63 >>> 2;
						$65 = $64 ^ -1;
						$scevgep4$i$i$i$i30 = (($60) + ($65<<2)|0);
						HEAP32[$59>>2] = $scevgep4$i$i$i$i30;
					}
					__ZdlPv($56);
				}
				$66 = ((($this)) + 44|0);
				$67 = HEAP32[$66>>2]|0;
				$68 = ($67|0)==(0|0);
				if (!($68)) {
					$69 = ((($this)) + 48|0);
					$70 = HEAP32[$69>>2]|0;
					$71 = ($70|0)==($67|0);
					if ($71) {
						$86 = $67;
					} else {
						$73 = $70;
						while(1) {
							$72 = ((($73)) + -12|0);
							HEAP32[$69>>2] = $72;
							$74 = HEAP32[$72>>2]|0;
							$75 = ($74|0)==(0|0);
							$76 = $74;
							if ($75) {
								$77 = $72;
							} else {
								$79 = ((($73)) + -8|0);
								$80 = HEAP32[$79>>2]|0;
								$81 = ($80|0)==($74|0);
								if (!($81)) {
									$scevgep$i$i$i$i$i$i$i$i = ((($80)) + -8|0);
									$82 = $scevgep$i$i$i$i$i$i$i$i;
									$83 = (($82) - ($76))|0;
									$84 = $83 >>> 3;
									$85 = $84 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i = (($80) + ($85<<3)|0);
									HEAP32[$79>>2] = $scevgep4$i$i$i$i$i$i$i$i;
								}
								__ZdlPv($74);
								$$pre$i$i$i = HEAP32[$69>>2]|0;
								$77 = $$pre$i$i$i;
							}
							$78 = ($77|0)==($67|0);
							if ($78) {
								break;
							} else {
								$73 = $77;
							}
						}
						$$pre$i = HEAP32[$66>>2]|0;
						$86 = $$pre$i;
					}
					__ZdlPv($86);
				}
				$87 = ((($this)) + 32|0);
				$88 = HEAP32[$87>>2]|0;
				$89 = ($88|0)==(0|0);
				if (!($89)) {
					$90 = ((($this)) + 36|0);
					$91 = HEAP32[$90>>2]|0;
					$92 = ($91|0)==($88|0);
					if ($92) {
						$107 = $88;
					} else {
						$94 = $91;
						while(1) {
							$93 = ((($94)) + -12|0);
							HEAP32[$90>>2] = $93;
							$95 = HEAP32[$93>>2]|0;
							$96 = ($95|0)==(0|0);
							$97 = $95;
							if ($96) {
								$98 = $93;
							} else {
								$100 = ((($94)) + -8|0);
								$101 = HEAP32[$100>>2]|0;
								$102 = ($101|0)==($95|0);
								if (!($102)) {
									$scevgep$i$i$i$i$i$i$i$i36 = ((($101)) + -8|0);
									$103 = $scevgep$i$i$i$i$i$i$i$i36;
									$104 = (($103) - ($97))|0;
									$105 = $104 >>> 3;
									$106 = $105 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i37 = (($101) + ($106<<3)|0);
									HEAP32[$100>>2] = $scevgep4$i$i$i$i$i$i$i$i37;
								}
								__ZdlPv($95);
								$$pre$i$i$i39 = HEAP32[$90>>2]|0;
								$98 = $$pre$i$i$i39;
							}
							$99 = ($98|0)==($88|0);
							if ($99) {
								break;
							} else {
								$94 = $98;
							}
						}
						$$pre$i42 = HEAP32[$87>>2]|0;
						$107 = $$pre$i42;
					}
					__ZdlPv($107);
				}
				$108 = ((($this)) + 20|0);
				$109 = HEAP32[$108>>2]|0;
				$110 = ($109|0)==(0|0);
				$111 = $109;
				if (!($110)) {
					$112 = ((($this)) + 24|0);
					$113 = HEAP32[$112>>2]|0;
					$114 = ($113|0)==($109|0);
					if (!($114)) {
						$scevgep$i$i$i = ((($113)) + -16|0);
						$115 = $scevgep$i$i$i;
						$116 = (($115) - ($111))|0;
						$117 = $116 >>> 4;
						$118 = $117 ^ -1;
						$scevgep4$i$i$i = (($113) + ($118<<4)|0);
						HEAP32[$112>>2] = $scevgep4$i$i$i;
					}
					__ZdlPv($109);
				}
				$119 = ((($this)) + 8|0);
				$120 = HEAP32[$119>>2]|0;
				$121 = ($120|0)==(0|0);
				$122 = $120;
				if ($121) {
					return;
				}
				$123 = ((($this)) + 12|0);
				$124 = HEAP32[$123>>2]|0;
				$125 = ($124|0)==($120|0);
				if (!($125)) {
					$scevgep$i$i$i46 = ((($124)) + -16|0);
					$126 = $scevgep$i$i$i46;
					$127 = (($126) - ($122))|0;
					$128 = $127 >>> 4;
					$129 = $128 ^ -1;
					$scevgep4$i$i$i47 = (($124) + ($129<<4)|0);
					HEAP32[$123>>2] = $scevgep4$i$i$i47;
				}
				__ZdlPv($120);
				return;
			}
			function __ZN9Character12recognize111ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$02 = 0, $$04 = 0, $$13 = 0, $$15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
				var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
				var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
				var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
				var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b2 = 0;
				var $f = 0, $ispos = 0, $neg = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 24|0;
				$1 = sp + 16|0;
				$2 = sp + 8|0;
				$3 = sp;
				$f = sp + 80|0;
				$b2 = sp + 40|0;
				$4 = sp + 32|0;
				$5 = (__ZN9Character4blobEi($this,0)|0);
				$6 = (__ZNK4Blob4holeEi($5,0)|0);
				$7 = (__ZNK9Rectangle14is_hcentred_inERKS_($6,$5)|0);
				if (!($7)) {
					STACKTOP = sp;return;
				}
				__ZN8FeaturesC2ERK4Blob($f,$5);
				$8 = ((($6)) + 4|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ((($5)) + 4|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = (($9) - ($11))|0;
				$13 = ((($5)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($6)) + 12|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = (($14) - ($16))|0;
				$18 = (($12) - ($17))|0;
				$19 = (1 - ($9))|0;
				$20 = (($19) + ($16))|0;
				$21 = (($20|0) / 4)&-1;
				$22 = ($21|0)>(2);
				$ispos = ($18|0)>(-1);
				$neg = (0 - ($18))|0;
				$23 = $ispos ? $18 : $neg;
				$24 = $22 ? $21 : 2;
				$25 = ($23|0)>($24|0);
				L4: do {
					if ($25) {
						__THREW__ = 0;
						$26 = (invoke_iiiii(120,($12|0),($17|0),40,2)|0);
						$27 = __THREW__; __THREW__ = 0;
						$28 = $27&1;
						if ($28) {
							label = 13;
						} else {
							if ($26) {
								label = 5;
							} else {
								$79 = ($12|0)<($17|0);
								if ($79) {
									__THREW__ = 0;
									$80 = (invoke_iii(157,($f|0),($charbox|0))|0);
									$81 = __THREW__; __THREW__ = 0;
									$82 = $81&1;
									if ($82) {
										label = 13;
										break;
									}
									$83 = ($80|0)==(0);
									if ($83) {
										label = 46;
										break;
									}
									HEAP32[$2>>2] = $80;
									$84 = ((($2)) + 4|0);
									HEAP32[$84>>2] = 0;
									$85 = ((($this)) + 32|0);
									$86 = HEAP32[$85>>2]|0;
									$87 = ((($this)) + 36|0);
									$88 = HEAP32[$87>>2]|0;
									$89 = ($86|0)==($88|0);
									if ($89) {
										$102 = ((($this)) + 28|0);
										__THREW__ = 0;
										invoke_vii(125,($102|0),($2|0));
										$103 = __THREW__; __THREW__ = 0;
										$104 = $103&1;
										if ($104) {
											label = 13;
											break;
										}
									} else {
										$90 = $2;
										$91 = $90;
										$92 = HEAP32[$91>>2]|0;
										$93 = (($90) + 4)|0;
										$94 = $93;
										$95 = HEAP32[$94>>2]|0;
										$96 = $86;
										$97 = $96;
										HEAP32[$97>>2] = $92;
										$98 = (($96) + 4)|0;
										$99 = $98;
										HEAP32[$99>>2] = $95;
										$100 = HEAP32[$85>>2]|0;
										$101 = ((($100)) + 8|0);
										HEAP32[$85>>2] = $101;
									}
									label = 46;
									break;
								}
								$105 = ($12|0)>($17|0);
								if ($105) {
									__THREW__ = 0;
									$106 = (invoke_iii(158,($f|0),($charset|0))|0);
									$107 = __THREW__; __THREW__ = 0;
									$108 = $107&1;
									if ($108) {
										label = 13;
									} else {
										$109 = ($106|0)==(0);
										if ($109) {
											label = 46;
										} else {
											HEAP32[$3>>2] = $106;
											$110 = ((($3)) + 4|0);
											HEAP32[$110>>2] = 0;
											$111 = ((($this)) + 32|0);
											$112 = HEAP32[$111>>2]|0;
											$113 = ((($this)) + 36|0);
											$114 = HEAP32[$113>>2]|0;
											$115 = ($112|0)==($114|0);
											if ($115) {
												$128 = ((($this)) + 28|0);
												__THREW__ = 0;
												invoke_vii(125,($128|0),($3|0));
												$129 = __THREW__; __THREW__ = 0;
												$130 = $129&1;
												if ($130) {
													label = 13;
													break;
												}
											} else {
												$116 = $3;
												$117 = $116;
												$118 = HEAP32[$117>>2]|0;
												$119 = (($116) + 4)|0;
												$120 = $119;
												$121 = HEAP32[$120>>2]|0;
												$122 = $112;
												$123 = $122;
												HEAP32[$123>>2] = $118;
												$124 = (($122) + 4)|0;
												$125 = $124;
												HEAP32[$125>>2] = $121;
												$126 = HEAP32[$111>>2]|0;
												$127 = ((($126)) + 8|0);
												HEAP32[$111>>2] = $127;
											}
											$131 = ($106|0)==(243);
											if ($131) {
												$132 = HEAP32[$8>>2]|0;
												$133 = HEAP32[$13>>2]|0;
												$134 = HEAP32[$15>>2]|0;
												$135 = (($134) - ($133))|0;
												$136 = (($135) + ($132))|0;
												$137 = (($136) + -1)|0;
												$138 = HEAP32[$10>>2]|0;
												$139 = ($137|0)>($138|0);
												$140 = ($136|0)<($132|0);
												$or$cond = $140 & $139;
												if ($or$cond) {
													__THREW__ = 0;
													invoke_vii(159,($b2|0),($5|0));
													$141 = __THREW__; __THREW__ = 0;
													$142 = $141&1;
													if ($142) {
														label = 13;
													} else {
														__THREW__ = 0;
														invoke_vii(76,($5|0),($137|0));
														$143 = __THREW__; __THREW__ = 0;
														$144 = $143&1;
														do {
															if ($144) {
																label = 43;
															} else {
																__THREW__ = 0;
																invoke_vii(75,($b2|0),($136|0));
																$145 = __THREW__; __THREW__ = 0;
																$146 = $145&1;
																if ($146) {
																	label = 43;
																} else {
																	$147 = ((($this)) + 16|0);
																	__THREW__ = 0;
																	$148 = (invoke_ii(29,40)|0);
																	$149 = __THREW__; __THREW__ = 0;
																	$150 = $149&1;
																	if ($150) {
																		label = 43;
																	} else {
																		__THREW__ = 0;
																		invoke_vii(159,($148|0),($b2|0));
																		$151 = __THREW__; __THREW__ = 0;
																		$152 = $151&1;
																		if ($152) {
																			$167 = ___cxa_find_matching_catch_2()|0;
																			$168 = tempRet0;
																			__ZdlPv($148);
																			$$02 = $167;$$04 = $168;
																			break;
																		}
																		HEAP32[$4>>2] = $148;
																		$153 = ((($this)) + 20|0);
																		$154 = HEAP32[$153>>2]|0;
																		$155 = ((($this)) + 24|0);
																		$156 = HEAP32[$155>>2]|0;
																		$157 = ($154|0)==($156|0);
																		if ($157) {
																			__THREW__ = 0;
																			invoke_vii(70,($147|0),($4|0));
																			$161 = __THREW__; __THREW__ = 0;
																			$162 = $161&1;
																			if ($162) {
																				label = 43;
																				break;
																			}
																		} else {
																			$158 = $148;
																			HEAP32[$154>>2] = $158;
																			$159 = HEAP32[$153>>2]|0;
																			$160 = ((($159)) + 4|0);
																			HEAP32[$153>>2] = $160;
																		}
																		__THREW__ = 0;
																		invoke_vi(72,($b2|0));
																		$163 = __THREW__; __THREW__ = 0;
																		$164 = $163&1;
																		if ($164) {
																			label = 13;
																			break L4;
																		}
																		label = 46;
																		break L4;
																	}
																}
															}
														} while(0);
														if ((label|0) == 43) {
															$165 = ___cxa_find_matching_catch_2()|0;
															$166 = tempRet0;
															$$02 = $165;$$04 = $166;
														}
														__THREW__ = 0;
														invoke_vi(72,($b2|0));
														$169 = __THREW__; __THREW__ = 0;
														$170 = $169&1;
														if ($170) {
															$173 = ___cxa_find_matching_catch_3(0|0)|0;
															$174 = tempRet0;
															___clang_call_terminate($173);
															// unreachable;
														} else {
															$$13 = $$02;$$15 = $$04;
														}
													}
												} else {
													label = 46;
												}
											} else {
												label = 46;
											}
										}
									}
								} else {
									label = 46;
								}
							}
						}
					} else {
						label = 5;
					}
				} while(0);
				L43: do {
					if ((label|0) == 5) {
						__THREW__ = 0;
						$29 = (invoke_iiii(156,($f|0),($charset|0),($charbox|0))|0);
						$30 = __THREW__; __THREW__ = 0;
						$31 = $30&1;
						if ($31) {
							label = 13;
						} else {
							switch ($29|0) {
								case 0:  {
									label = 46;
									break L43;
									break;
								}
								case 81:  {
									__THREW__ = 0;
									$32 = (invoke_iiiii(120,($12|0),($17|0),40,2)|0);
									$33 = __THREW__; __THREW__ = 0;
									$34 = $33&1;
									if ($34) {
										label = 13;
										break L43;
									}
									if ($32) {
										HEAP32[$1>>2] = 97;
										$35 = ((($1)) + 4|0);
										HEAP32[$35>>2] = 1;
										$36 = ((($this)) + 32|0);
										$37 = HEAP32[$36>>2]|0;
										$38 = ((($this)) + 36|0);
										$39 = HEAP32[$38>>2]|0;
										$40 = ($37|0)==($39|0);
										if ($40) {
											$53 = ((($this)) + 28|0);
											__THREW__ = 0;
											invoke_vii(125,($53|0),($1|0));
											$54 = __THREW__; __THREW__ = 0;
											$55 = $54&1;
											if ($55) {
												label = 13;
												break L43;
											}
										} else {
											$41 = $1;
											$42 = $41;
											$43 = HEAP32[$42>>2]|0;
											$44 = (($41) + 4)|0;
											$45 = $44;
											$46 = HEAP32[$45>>2]|0;
											$47 = $37;
											$48 = $47;
											HEAP32[$48>>2] = $43;
											$49 = (($47) + 4)|0;
											$50 = $49;
											HEAP32[$50>>2] = $46;
											$51 = HEAP32[$36>>2]|0;
											$52 = ((($51)) + 8|0);
											HEAP32[$36>>2] = $52;
										}
									}
									break;
								}
								default: {
								}
							}
							HEAP32[$0>>2] = $29;
							$58 = ((($0)) + 4|0);
							HEAP32[$58>>2] = 0;
							$59 = ((($this)) + 32|0);
							$60 = HEAP32[$59>>2]|0;
							$61 = ((($this)) + 36|0);
							$62 = HEAP32[$61>>2]|0;
							$63 = ($60|0)==($62|0);
							if ($63) {
								$76 = ((($this)) + 28|0);
								__THREW__ = 0;
								invoke_vii(125,($76|0),($0|0));
								$77 = __THREW__; __THREW__ = 0;
								$78 = $77&1;
								if ($78) {
									label = 13;
									break;
								}
							} else {
								$64 = $0;
								$65 = $64;
								$66 = HEAP32[$65>>2]|0;
								$67 = (($64) + 4)|0;
								$68 = $67;
								$69 = HEAP32[$68>>2]|0;
								$70 = $60;
								$71 = $70;
								HEAP32[$71>>2] = $66;
								$72 = (($70) + 4)|0;
								$73 = $72;
								HEAP32[$73>>2] = $69;
								$74 = HEAP32[$59>>2]|0;
								$75 = ((($74)) + 8|0);
								HEAP32[$59>>2] = $75;
							}
							label = 46;
						}
					}
				} while(0);
				if ((label|0) == 13) {
					$56 = ___cxa_find_matching_catch_2()|0;
					$57 = tempRet0;
					$$13 = $56;$$15 = $57;
				}
				else if ((label|0) == 46) {
					__ZN8FeaturesD2Ev($f);
					STACKTOP = sp;return;
				}
				__THREW__ = 0;
				invoke_vi(126,($f|0));
				$171 = __THREW__; __THREW__ = 0;
				$172 = $171&1;
				if ($172) {
					$173 = ___cxa_find_matching_catch_3(0|0)|0;
					$174 = tempRet0;
					___clang_call_terminate($173);
					// unreachable;
				} else {
					___resumeException($$13|0);
					// unreachable;
				}
			}
			function __ZN9Character12recognize112ERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$neg149 = 0, $$pre = 0, $$pre157 = 0, $$pre158 = 0, $$pre160 = 0, $$pre162 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
				var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
				var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
				var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
				var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
				var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
				var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
				var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
				var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
				var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
				var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
				var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
				var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
				var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
				var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
				var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
				var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
				var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
				var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
				var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
				var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
				var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
				var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
				var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
				var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
				var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
				var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
				var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
				var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
				var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
				var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
				var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
				var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
				var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
				var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
				var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
				var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
				var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
				var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
				var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
				var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
				var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
				var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
				var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
				var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
				var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
				var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
				var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
				var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
				var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
				var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
				var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
				var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
				var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
				var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
				var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
				var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
				var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
				var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
				var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bp = 0, $hdiff = 0, $i$0 = 0, $i$0163 = 0, $i$0164 = 0, $ispos = 0, $ispos11 = 0, $ispos9 = 0, $lp = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $neg = 0;
				var $neg10 = 0, $neg12 = 0, $or$cond = 0, $or$cond137 = 0, $or$cond138 = 0, $or$cond140 = 0, $row$0 = 0, $row$0$in = 0, $rp = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i13 = 0, $scevgep$i$i$i$i18 = 0, $scevgep$i$i$i$i23 = 0, $scevgep$i$i$i$i28 = 0, $scevgep$i$i$i$i33 = 0, $scevgep$i$i$i$i38 = 0, $scevgep$i$i$i$i55 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i14 = 0, $scevgep4$i$i$i$i19 = 0;
				var $scevgep4$i$i$i$i24 = 0, $scevgep4$i$i$i$i29 = 0, $scevgep4$i$i$i$i34 = 0, $scevgep4$i$i$i$i39 = 0, $scevgep4$i$i$i$i56 = 0, $tp = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 224|0;
				$1 = sp + 216|0;
				$2 = sp + 208|0;
				$3 = sp + 200|0;
				$4 = sp + 192|0;
				$5 = sp + 184|0;
				$6 = sp + 176|0;
				$7 = sp + 168|0;
				$8 = sp + 160|0;
				$9 = sp + 152|0;
				$10 = sp + 144|0;
				$11 = sp + 136|0;
				$12 = sp + 128|0;
				$13 = sp + 120|0;
				$14 = sp + 112|0;
				$15 = sp + 104|0;
				$16 = sp + 96|0;
				$17 = sp + 88|0;
				$18 = sp + 80|0;
				$19 = sp + 72|0;
				$20 = sp + 64|0;
				$21 = sp + 56|0;
				$22 = sp + 48|0;
				$23 = sp + 40|0;
				$24 = sp + 32|0;
				$25 = sp + 24|0;
				$26 = sp + 16|0;
				$27 = sp + 8|0;
				$28 = sp;
				$lp = sp + 384|0;
				$tp = sp + 336|0;
				$rp = sp + 288|0;
				$bp = sp + 240|0;
				$hdiff = sp + 232|0;
				$29 = (__ZN9Character4blobEi($this,0)|0);
				$30 = (__ZNK4Blob4holeEi($29,0)|0);
				$31 = (__ZNK4Blob4holeEi($29,1)|0);
				__ZN7ProfileC2ERK6BitmapNS_4TypeE($lp,$29,0);
				__THREW__ = 0;
				invoke_viii(160,($tp|0),($29|0),1);
				$32 = __THREW__; __THREW__ = 0;
				$33 = $32&1;
				if ($33) {
					$102 = ___cxa_find_matching_catch_2()|0;
					$103 = tempRet0;
					$$2 = $102;$$25 = $103;
				} else {
					__THREW__ = 0;
					invoke_viii(160,($rp|0),($29|0),2);
					$34 = __THREW__; __THREW__ = 0;
					$35 = $34&1;
					if ($35) {
						$104 = ___cxa_find_matching_catch_2()|0;
						$105 = tempRet0;
						$$1 = $104;$$14 = $105;
					} else {
						__THREW__ = 0;
						invoke_viii(160,($bp|0),($29|0),3);
						$36 = __THREW__; __THREW__ = 0;
						$37 = $36&1;
						if ($37) {
							$106 = ___cxa_find_matching_catch_2()|0;
							$107 = tempRet0;
							$$0 = $106;$$03 = $107;
						} else {
							$38 = ((($31)) + 4|0);
							$39 = HEAP32[$38>>2]|0;
							$40 = ((($31)) + 12|0);
							$41 = HEAP32[$40>>2]|0;
							$42 = (($41) + ($39))|0;
							$43 = (($42|0) / 2)&-1;
							$44 = ((($30)) + 4|0);
							$45 = HEAP32[$44>>2]|0;
							$46 = ((($30)) + 12|0);
							$47 = HEAP32[$46>>2]|0;
							$48 = (($47) + ($45))|0;
							$49 = (($48|0) / 2)&-1;
							$50 = (($43) - ($49))|0;
							$ispos = ($50|0)>(-1);
							$neg = (0 - ($50))|0;
							$51 = $ispos ? $50 : $neg;
							$52 = ($51*10)|0;
							$53 = ((($29)) + 12|0);
							$54 = HEAP32[$53>>2]|0;
							$55 = ((($29)) + 4|0);
							$56 = HEAP32[$55>>2]|0;
							$57 = (($54) + 1)|0;
							$58 = (($57) - ($56))|0;
							$59 = ($52|0)>($58|0);
							L10: do {
								if ($59) {
									label = 37;
								} else {
									__THREW__ = 0;
									$60 = (invoke_iii(161,($30|0),($29|0))|0);
									$61 = __THREW__; __THREW__ = 0;
									$62 = $61&1;
									if ($62) {
										label = 22;
									} else {
										if ($60) {
											__THREW__ = 0;
											$63 = (invoke_iii(161,($31|0),($29|0))|0);
											$64 = __THREW__; __THREW__ = 0;
											$65 = $64&1;
											if ($65) {
												label = 22;
											} else {
												if ($63) {
													$66 = HEAP32[$53>>2]|0;
													$67 = HEAP32[$46>>2]|0;
													$68 = (($66) - ($67))|0;
													$69 = HEAP32[$44>>2]|0;
													$70 = HEAP32[$55>>2]|0;
													$71 = (($69) - ($70))|0;
													$72 = ($68|0)>($71|0);
													do {
														if ($72) {
															$124 = $70;$125 = $66;$128 = $67;
														} else {
															$73 = HEAP32[$40>>2]|0;
															$74 = (($66) - ($73))|0;
															$75 = HEAP32[$38>>2]|0;
															$76 = (($75) - ($70))|0;
															$77 = ($74|0)>($76|0);
															if ($77) {
																$124 = $70;$125 = $66;$128 = $67;
															} else {
																__THREW__ = 0;
																$78 = (invoke_ii(162,($bp|0))|0);
																$79 = __THREW__; __THREW__ = 0;
																$80 = $79&1;
																if ($80) {
																	label = 22;
																	break L10;
																}
																if (!($78)) {
																	$$pre = HEAP32[$46>>2]|0;
																	$$pre157 = HEAP32[$55>>2]|0;
																	$$pre158 = HEAP32[$53>>2]|0;
																	$124 = $$pre157;$125 = $$pre158;$128 = $$pre;
																	break;
																}
																HEAP32[$24>>2] = 109;
																$81 = ((($24)) + 4|0);
																HEAP32[$81>>2] = 0;
																$82 = ((($this)) + 32|0);
																$83 = HEAP32[$82>>2]|0;
																$84 = ((($this)) + 36|0);
																$85 = HEAP32[$84>>2]|0;
																$86 = ($83|0)==($85|0);
																if ($86) {
																	$99 = ((($this)) + 28|0);
																	__THREW__ = 0;
																	invoke_vii(125,($99|0),($24|0));
																	$100 = __THREW__; __THREW__ = 0;
																	$101 = $100&1;
																	if ($101) {
																		label = 22;
																		break L10;
																	}
																} else {
																	$87 = $24;
																	$88 = $87;
																	$89 = HEAP32[$88>>2]|0;
																	$90 = (($87) + 4)|0;
																	$91 = $90;
																	$92 = HEAP32[$91>>2]|0;
																	$93 = $83;
																	$94 = $93;
																	HEAP32[$94>>2] = $89;
																	$95 = (($93) + 4)|0;
																	$96 = $95;
																	HEAP32[$96>>2] = $92;
																	$97 = HEAP32[$82>>2]|0;
																	$98 = ((($97)) + 8|0);
																	HEAP32[$82>>2] = $98;
																}
																label = 265;
																break L10;
															}
														}
													} while(0);
													$123 = (($125) + ($124))|0;
													$126 = (($123|0) / 2)&-1;
													$127 = (($128) - ($126))|0;
													$ispos9 = ($127|0)>(-1);
													$neg10 = (0 - ($127))|0;
													$129 = $ispos9 ? $127 : $neg10;
													$130 = ($129*5)|0;
													$131 = (1 - ($124))|0;
													$132 = (($131) + ($125))|0;
													$133 = ($130|0)>($132|0);
													if ($133) {
														label = 265;
													} else {
														$134 = HEAP32[$40>>2]|0;
														$135 = (($134) - ($126))|0;
														$ispos11 = ($135|0)>(-1);
														$neg12 = (0 - ($135))|0;
														$136 = $ispos11 ? $135 : $neg12;
														$137 = ($136*5)|0;
														$138 = ($137|0)>($132|0);
														if ($138) {
															label = 265;
														} else {
															__THREW__ = 0;
															$139 = (invoke_ii(162,($tp|0))|0);
															$140 = __THREW__; __THREW__ = 0;
															$141 = $140&1;
															if ($141) {
																label = 22;
															} else {
																if ($139) {
																	__THREW__ = 0;
																	$142 = (invoke_iii(143,($bp|0),-1)|0);
																	$143 = __THREW__; __THREW__ = 0;
																	$144 = $143&1;
																	if ($144) {
																		label = 22;
																	} else {
																		$145 = ($142|0)==(2);
																		if ($145) {
																			HEAP32[$17>>2] = 119;
																			$146 = ((($17)) + 4|0);
																			HEAP32[$146>>2] = 0;
																			$147 = ((($this)) + 32|0);
																			$148 = HEAP32[$147>>2]|0;
																			$149 = ((($this)) + 36|0);
																			$150 = HEAP32[$149>>2]|0;
																			$151 = ($148|0)==($150|0);
																			if ($151) {
																				$164 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($164|0),($17|0));
																				$165 = __THREW__; __THREW__ = 0;
																				$166 = $165&1;
																				if ($166) {
																					label = 22;
																					break;
																				}
																			} else {
																				$152 = $17;
																				$153 = $152;
																				$154 = HEAP32[$153>>2]|0;
																				$155 = (($152) + 4)|0;
																				$156 = $155;
																				$157 = HEAP32[$156>>2]|0;
																				$158 = $148;
																				$159 = $158;
																				HEAP32[$159>>2] = $154;
																				$160 = (($158) + 4)|0;
																				$161 = $160;
																				HEAP32[$161>>2] = $157;
																				$162 = HEAP32[$147>>2]|0;
																				$163 = ((($162)) + 8|0);
																				HEAP32[$147>>2] = $163;
																			}
																			label = 265;
																		} else {
																			label = 265;
																		}
																	}
																} else {
																	label = 265;
																}
															}
														}
													}
												} else {
													label = 37;
												}
											}
										} else {
											label = 37;
										}
									}
								}
							} while(0);
							L38: do {
								if ((label|0) == 37) {
									__THREW__ = 0;
									$167 = (invoke_iii(163,($30|0),($29|0))|0);
									$168 = __THREW__; __THREW__ = 0;
									$169 = $168&1;
									if ($169) {
										label = 22;
									} else {
										if ($167) {
											__THREW__ = 0;
											$170 = (invoke_iii(163,($31|0),($29|0))|0);
											$171 = __THREW__; __THREW__ = 0;
											$172 = $171&1;
											if ($172) {
												label = 22;
											} else {
												if ($170) {
													$173 = HEAP32[$30>>2]|0;
													$174 = HEAP32[$29>>2]|0;
													$175 = ((($29)) + 8|0);
													$176 = HEAP32[$175>>2]|0;
													$177 = (($176) + ($174))|0;
													$178 = (($177|0) / 2)&-1;
													$179 = ($173|0)>($178|0);
													if ($179) {
														$180 = HEAP32[$31>>2]|0;
														$181 = ($180|0)>($178|0);
														if ($181) {
															label = 265;
															break;
														}
													}
													$182 = ((($30)) + 8|0);
													$183 = HEAP32[$182>>2]|0;
													$184 = (($176) - ($174))|0;
													$185 = ($184*40)|0;
													$186 = (($185|0) / 100)&-1;
													$187 = (($186) + ($174))|0;
													$188 = ($183|0)<($187|0);
													if ($188) {
														$189 = ((($31)) + 8|0);
														$190 = HEAP32[$189>>2]|0;
														$191 = ($190|0)<($187|0);
														if ($191) {
															label = 265;
															break;
														}
													}
													$192 = HEAP32[$44>>2]|0;
													$193 = HEAP32[$55>>2]|0;
													$194 = HEAP32[$53>>2]|0;
													$195 = (($194) + ($193))|0;
													$196 = (($195|0) / 2)&-1;
													$197 = ($192|0)>($196|0);
													$198 = HEAP32[$40>>2]|0;
													$199 = ($198|0)<($196|0);
													$or$cond = $197 | $199;
													if ($or$cond) {
														label = 265;
													} else {
														__THREW__ = 0;
														$200 = (invoke_ii(74,($30|0))|0);
														$201 = __THREW__; __THREW__ = 0;
														$202 = $201&1;
														if ($202) {
															label = 22;
														} else {
															__THREW__ = 0;
															$203 = (invoke_ii(74,($31|0))|0);
															$204 = __THREW__; __THREW__ = 0;
															$205 = $204&1;
															if ($205) {
																label = 22;
															} else {
																$206 = HEAP32[$175>>2]|0;
																$207 = HEAP32[$29>>2]|0;
																$208 = (($207) + ($206))|0;
																$209 = (($208|0) / 2)&-1;
																$210 = HEAP32[$30>>2]|0;
																$211 = HEAP32[$182>>2]|0;
																$212 = (($211) + ($210))|0;
																$213 = (($212|0) / 2)&-1;
																$214 = HEAP32[$31>>2]|0;
																$215 = ((($31)) + 8|0);
																$216 = HEAP32[$215>>2]|0;
																$217 = (($216) + ($214))|0;
																$218 = (($217|0) / 2)&-1;
																$219 = ($218|0)<($213|0);
																$220 = $219 ? $218 : $213;
																$221 = ($220|0)<($209|0);
																$222 = $221 ? $220 : $209;
																$223 = (($206) - ($222))|0;
																$224 = HEAP32[$46>>2]|0;
																$225 = HEAP32[$55>>2]|0;
																$226 = (($224) - ($225))|0;
																$i$0163 = (($226) + 1)|0;
																$227 = HEAP32[$38>>2]|0;
																$228 = (($227) - ($225))|0;
																$229 = ($i$0163|0)<($228|0);
																L53: do {
																	if ($229) {
																		$i$0164 = $i$0163;
																		while(1) {
																			__THREW__ = 0;
																			$230 = (invoke_iii(139,($rp|0),($i$0164|0))|0);
																			$231 = __THREW__; __THREW__ = 0;
																			$232 = $231&1;
																			if ($232) {
																				label = 21;
																				break;
																			}
																			$233 = ($230|0)>($223|0);
																			if ($233) {
																				break;
																			}
																			$$pre160 = HEAP32[$55>>2]|0;
																			$i$0 = (($i$0164) + 1)|0;
																			$234 = HEAP32[$38>>2]|0;
																			$235 = (($234) - ($$pre160))|0;
																			$236 = ($i$0|0)<($235|0);
																			if ($236) {
																				$i$0164 = $i$0;
																			} else {
																				break L53;
																			}
																		}
																		if ((label|0) == 21) {
																			$108 = ___cxa_find_matching_catch_2()|0;
																			$109 = tempRet0;
																			$lpad$phi$index = $108;$lpad$phi$index2 = $109;
																			break L38;
																		}
																		HEAP32[$0>>2] = 103;
																		$237 = ((($0)) + 4|0);
																		HEAP32[$237>>2] = 2;
																		$238 = ((($this)) + 32|0);
																		$239 = HEAP32[$238>>2]|0;
																		$240 = ((($this)) + 36|0);
																		$241 = HEAP32[$240>>2]|0;
																		$242 = ($239|0)==($241|0);
																		if ($242) {
																			$255 = ((($this)) + 28|0);
																			__THREW__ = 0;
																			invoke_vii(125,($255|0),($0|0));
																			$256 = __THREW__; __THREW__ = 0;
																			$257 = $256&1;
																			if ($257) {
																				label = 22;
																				break L38;
																			}
																		} else {
																			$243 = $0;
																			$244 = $243;
																			$245 = HEAP32[$244>>2]|0;
																			$246 = (($243) + 4)|0;
																			$247 = $246;
																			$248 = HEAP32[$247>>2]|0;
																			$249 = $239;
																			$250 = $249;
																			HEAP32[$250>>2] = $245;
																			$251 = (($249) + 4)|0;
																			$252 = $251;
																			HEAP32[$252>>2] = $248;
																			$253 = HEAP32[$238>>2]|0;
																			$254 = ((($253)) + 8|0);
																			HEAP32[$238>>2] = $254;
																		}
																		label = 265;
																		break L38;
																	}
																} while(0);
																__THREW__ = 0;
																$258 = (invoke_iiiii(120,($200|0),($203|0),50,1)|0);
																$259 = __THREW__; __THREW__ = 0;
																$260 = $259&1;
																if ($260) {
																	label = 22;
																} else {
																	do {
																		if ($258) {
																			$261 = HEAP32[$46>>2]|0;
																			$262 = HEAP32[$55>>2]|0;
																			$263 = HEAP32[$53>>2]|0;
																			$264 = (($263) + ($262))|0;
																			$265 = (($264|0) / 2)&-1;
																			$266 = ($261|0)>($265|0);
																			$267 = HEAP32[$38>>2]|0;
																			$268 = ($267|0)<($265|0);
																			$or$cond137 = $266 & $268;
																			do {
																				if ($or$cond137) {
																					__THREW__ = 0;
																					$269 = (invoke_iii(164,($30|0),($31|0))|0);
																					$270 = __THREW__; __THREW__ = 0;
																					$271 = $270&1;
																					if ($271) {
																						label = 22;
																						break L38;
																					}
																					if (!($269)) {
																						break;
																					}
																					__THREW__ = 0;
																					$272 = (invoke_iii(165,($30|0),($31|0))|0);
																					$273 = __THREW__; __THREW__ = 0;
																					$274 = $273&1;
																					if ($274) {
																						label = 22;
																						break L38;
																					}
																					if ($272) {
																						break;
																					}
																					HEAP32[$1>>2] = 48;
																					$275 = ((($1)) + 4|0);
																					HEAP32[$275>>2] = 0;
																					$276 = ((($this)) + 32|0);
																					$277 = HEAP32[$276>>2]|0;
																					$278 = ((($this)) + 36|0);
																					$279 = HEAP32[$278>>2]|0;
																					$280 = ($277|0)==($279|0);
																					if ($280) {
																						$293 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($293|0),($1|0));
																						$294 = __THREW__; __THREW__ = 0;
																						$295 = $294&1;
																						if ($295) {
																							label = 22;
																							break L38;
																						}
																					} else {
																						$281 = $1;
																						$282 = $281;
																						$283 = HEAP32[$282>>2]|0;
																						$284 = (($281) + 4)|0;
																						$285 = $284;
																						$286 = HEAP32[$285>>2]|0;
																						$287 = $277;
																						$288 = $287;
																						HEAP32[$288>>2] = $283;
																						$289 = (($287) + 4)|0;
																						$290 = $289;
																						HEAP32[$290>>2] = $286;
																						$291 = HEAP32[$276>>2]|0;
																						$292 = ((($291)) + 8|0);
																						HEAP32[$276>>2] = $292;
																					}
																					label = 265;
																					break L38;
																				}
																			} while(0);
																			$296 = HEAP32[$46>>2]|0;
																			$297 = HEAP32[$38>>2]|0;
																			$298 = ($296|0)>($297|0);
																			if ($298) {
																				break;
																			}
																			__THREW__ = 0;
																			$299 = (invoke_iii(153,($29|0),($hdiff|0))|0);
																			$300 = __THREW__; __THREW__ = 0;
																			$301 = $300&1;
																			if ($301) {
																				label = 22;
																				break L38;
																			}
																			do {
																				if ($299) {
																					$302 = HEAP32[$hdiff>>2]|0;
																					$303 = HEAP32[$53>>2]|0;
																					$304 = HEAP32[$55>>2]|0;
																					$305 = (($303) + 1)|0;
																					$306 = (($305) - ($304))|0;
																					$307 = (($306|0) / 2)&-1;
																					$308 = ($302|0)>($307|0);
																					if (!($308)) {
																						label = 78;
																						break;
																					}
																					__THREW__ = 0;
																					$309 = (invoke_iii(166,($29|0),($hdiff|0))|0);
																					$310 = __THREW__; __THREW__ = 0;
																					$311 = $310&1;
																					if ($311) {
																						label = 22;
																						break L38;
																					}
																					if (!($309)) {
																						label = 78;
																						break;
																					}
																					$312 = HEAP32[$hdiff>>2]|0;
																					$313 = HEAP32[$53>>2]|0;
																					$314 = HEAP32[$55>>2]|0;
																					$315 = (($313) + 1)|0;
																					$316 = (($315) - ($314))|0;
																					$317 = (($316|0) / 2)&-1;
																					$318 = ($312|0)>($317|0);
																					if (!($318)) {
																						label = 78;
																						break;
																					}
																					HEAP32[$2>>2] = 115;
																					$319 = ((($2)) + 4|0);
																					HEAP32[$319>>2] = 0;
																					$320 = ((($this)) + 32|0);
																					$321 = HEAP32[$320>>2]|0;
																					$322 = ((($this)) + 36|0);
																					$323 = HEAP32[$322>>2]|0;
																					$324 = ($321|0)==($323|0);
																					if ($324) {
																						$337 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($337|0),($2|0));
																						$338 = __THREW__; __THREW__ = 0;
																						$339 = $338&1;
																						if ($339) {
																							label = 22;
																							break L38;
																						}
																					} else {
																						$325 = $2;
																						$326 = $325;
																						$327 = HEAP32[$326>>2]|0;
																						$328 = (($325) + 4)|0;
																						$329 = $328;
																						$330 = HEAP32[$329>>2]|0;
																						$331 = $321;
																						$332 = $331;
																						HEAP32[$332>>2] = $327;
																						$333 = (($331) + 4)|0;
																						$334 = $333;
																						HEAP32[$334>>2] = $330;
																						$335 = HEAP32[$320>>2]|0;
																						$336 = ((($335)) + 8|0);
																						HEAP32[$320>>2] = $336;
																					}
																				} else {
																					label = 78;
																				}
																			} while(0);
																			L92: do {
																				if ((label|0) == 78) {
																					__THREW__ = 0;
																					$340 = (invoke_ii(162,($lp|0))|0);
																					$341 = __THREW__; __THREW__ = 0;
																					$342 = $341&1;
																					if ($342) {
																						label = 22;
																						break L38;
																					}
																					do {
																						if ($340) {
																							__THREW__ = 0;
																							$343 = (invoke_ii(167,($lp|0))|0);
																							$344 = __THREW__; __THREW__ = 0;
																							$345 = $344&1;
																							if ($345) {
																								label = 22;
																								break L38;
																							}
																							if (!($343)) {
																								__THREW__ = 0;
																								$346 = (invoke_ii(168,($lp|0))|0);
																								$347 = __THREW__; __THREW__ = 0;
																								$348 = $347&1;
																								if ($348) {
																									label = 22;
																									break L38;
																								}
																								if (!($346)) {
																									break;
																								}
																								__THREW__ = 0;
																								$349 = (invoke_ii(169,($29|0))|0);
																								$350 = __THREW__; __THREW__ = 0;
																								$351 = $350&1;
																								if ($351) {
																									label = 22;
																									break L38;
																								}
																								if (!($349)) {
																									break;
																								}
																							}
																							HEAP32[$3>>2] = 66;
																							$352 = ((($3)) + 4|0);
																							HEAP32[$352>>2] = 0;
																							$353 = ((($this)) + 32|0);
																							$354 = HEAP32[$353>>2]|0;
																							$355 = ((($this)) + 36|0);
																							$356 = HEAP32[$355>>2]|0;
																							$357 = ($354|0)==($356|0);
																							if ($357) {
																								$370 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($370|0),($3|0));
																								$371 = __THREW__; __THREW__ = 0;
																								$372 = $371&1;
																								if ($372) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$358 = $3;
																								$359 = $358;
																								$360 = HEAP32[$359>>2]|0;
																								$361 = (($358) + 4)|0;
																								$362 = $361;
																								$363 = HEAP32[$362>>2]|0;
																								$364 = $354;
																								$365 = $364;
																								HEAP32[$365>>2] = $360;
																								$366 = (($364) + 4)|0;
																								$367 = $366;
																								HEAP32[$367>>2] = $363;
																								$368 = HEAP32[$353>>2]|0;
																								$369 = ((($368)) + 8|0);
																								HEAP32[$353>>2] = $369;
																							}
																							break L92;
																						}
																					} while(0);
																					$373 = HEAP32[$46>>2]|0;
																					$374 = HEAP32[$182>>2]|0;
																					$375 = (($374) + 1)|0;
																					__THREW__ = 0;
																					$376 = (invoke_iiiii(136,($30|0),($373|0),($375|0),1)|0);
																					$377 = __THREW__; __THREW__ = 0;
																					$378 = $377&1;
																					if ($378) {
																						label = 22;
																						break L38;
																					}
																					$379 = HEAP32[$38>>2]|0;
																					$380 = HEAP32[$31>>2]|0;
																					$381 = (($380) + -1)|0;
																					__THREW__ = 0;
																					$382 = (invoke_iiiii(146,($31|0),($379|0),($381|0),1)|0);
																					$383 = __THREW__; __THREW__ = 0;
																					$384 = $383&1;
																					if ($384) {
																						label = 22;
																						break L38;
																					}
																					$385 = (($376) + -1)|0;
																					$386 = (($382) + 1)|0;
																					$387 = ($385|0)>($386|0);
																					do {
																						if (!($387)) {
																							__THREW__ = 0;
																							$388 = (invoke_ii(170,($lp|0))|0);
																							$389 = __THREW__; __THREW__ = 0;
																							$390 = $389&1;
																							if ($390) {
																								label = 22;
																								break L38;
																							}
																							do {
																								if ($388) {
																									label = 97;
																								} else {
																									__THREW__ = 0;
																									$391 = (invoke_ii(171,($lp|0))|0);
																									$392 = __THREW__; __THREW__ = 0;
																									$393 = $392&1;
																									if ($393) {
																										label = 22;
																										break L38;
																									}
																									if ($391) {
																										label = 97;
																										break;
																									}
																									__THREW__ = 0;
																									$415 = (invoke_iii(150,($rp|0),50)|0);
																									$416 = __THREW__; __THREW__ = 0;
																									$417 = $416&1;
																									if ($417) {
																										label = 22;
																										break L38;
																									}
																									if ($415) {
																										break;
																									}
																									__THREW__ = 0;
																									$418 = (invoke_iii(143,($tp|0),-1)|0);
																									$419 = __THREW__; __THREW__ = 0;
																									$420 = $419&1;
																									if ($420) {
																										label = 22;
																										break L38;
																									}
																									$421 = ($418|0)==(1);
																									if (!($421)) {
																										break;
																									}
																									HEAP32[$5>>2] = 97;
																									$422 = ((($5)) + 4|0);
																									HEAP32[$422>>2] = 1;
																									$423 = ((($this)) + 32|0);
																									$424 = HEAP32[$423>>2]|0;
																									$425 = ((($this)) + 36|0);
																									$426 = HEAP32[$425>>2]|0;
																									$427 = ($424|0)==($426|0);
																									if ($427) {
																										$440 = ((($this)) + 28|0);
																										__THREW__ = 0;
																										invoke_vii(125,($440|0),($5|0));
																										$441 = __THREW__; __THREW__ = 0;
																										$442 = $441&1;
																										if ($442) {
																											label = 22;
																											break L38;
																										}
																									} else {
																										$428 = $5;
																										$429 = $428;
																										$430 = HEAP32[$429>>2]|0;
																										$431 = (($428) + 4)|0;
																										$432 = $431;
																										$433 = HEAP32[$432>>2]|0;
																										$434 = $424;
																										$435 = $434;
																										HEAP32[$435>>2] = $430;
																										$436 = (($434) + 4)|0;
																										$437 = $436;
																										HEAP32[$437>>2] = $433;
																										$438 = HEAP32[$423>>2]|0;
																										$439 = ((($438)) + 8|0);
																										HEAP32[$423>>2] = $439;
																									}
																								}
																							} while(0);
																							if ((label|0) == 97) {
																								HEAP32[$4>>2] = 101;
																								$394 = ((($4)) + 4|0);
																								HEAP32[$394>>2] = 1;
																								$395 = ((($this)) + 32|0);
																								$396 = HEAP32[$395>>2]|0;
																								$397 = ((($this)) + 36|0);
																								$398 = HEAP32[$397>>2]|0;
																								$399 = ($396|0)==($398|0);
																								if ($399) {
																									$412 = ((($this)) + 28|0);
																									__THREW__ = 0;
																									invoke_vii(125,($412|0),($4|0));
																									$413 = __THREW__; __THREW__ = 0;
																									$414 = $413&1;
																									if ($414) {
																										label = 22;
																										break L38;
																									}
																								} else {
																									$400 = $4;
																									$401 = $400;
																									$402 = HEAP32[$401>>2]|0;
																									$403 = (($400) + 4)|0;
																									$404 = $403;
																									$405 = HEAP32[$404>>2]|0;
																									$406 = $396;
																									$407 = $406;
																									HEAP32[$407>>2] = $402;
																									$408 = (($406) + 4)|0;
																									$409 = $408;
																									HEAP32[$409>>2] = $405;
																									$410 = HEAP32[$395>>2]|0;
																									$411 = ((($410)) + 8|0);
																									HEAP32[$395>>2] = $411;
																								}
																							}
																							__THREW__ = 0;
																							$443 = (invoke_ii(135,($bp|0))|0);
																							$444 = __THREW__; __THREW__ = 0;
																							$445 = $444&1;
																							if ($445) {
																								label = 22;
																								break L38;
																							}
																							if (!($443)) {
																								break;
																							}
																							HEAP32[$6>>2] = 36;
																							$446 = ((($6)) + 4|0);
																							HEAP32[$446>>2] = 0;
																							$447 = ((($this)) + 32|0);
																							$448 = HEAP32[$447>>2]|0;
																							$449 = ((($this)) + 36|0);
																							$450 = HEAP32[$449>>2]|0;
																							$451 = ($448|0)==($450|0);
																							if ($451) {
																								$464 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($464|0),($6|0));
																								$465 = __THREW__; __THREW__ = 0;
																								$466 = $465&1;
																								if ($466) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$452 = $6;
																								$453 = $452;
																								$454 = HEAP32[$453>>2]|0;
																								$455 = (($452) + 4)|0;
																								$456 = $455;
																								$457 = HEAP32[$456>>2]|0;
																								$458 = $448;
																								$459 = $458;
																								HEAP32[$459>>2] = $454;
																								$460 = (($458) + 4)|0;
																								$461 = $460;
																								HEAP32[$461>>2] = $457;
																								$462 = HEAP32[$447>>2]|0;
																								$463 = ((($462)) + 8|0);
																								HEAP32[$447>>2] = $463;
																							}
																							break L92;
																						}
																					} while(0);
																					$467 = HEAP32[$29>>2]|0;
																					$468 = HEAP32[$175>>2]|0;
																					$469 = (($468) + ($467))|0;
																					$470 = (($469|0) / 2)&-1;
																					$471 = HEAP32[$30>>2]|0;
																					$472 = HEAP32[$182>>2]|0;
																					$473 = (($472) + ($471))|0;
																					$474 = (($473|0) / 2)&-1;
																					$475 = ($470|0)>($474|0);
																					do {
																						if ($475) {
																							$476 = HEAP32[$31>>2]|0;
																							$477 = HEAP32[$215>>2]|0;
																							$478 = (($477) + ($476))|0;
																							$479 = (($478|0) / 2)&-1;
																							$480 = ($470|0)>($479|0);
																							if (!($480)) {
																								break;
																							}
																							$481 = ($470|0)<($472|0);
																							$482 = ($470|0)<($477|0);
																							$or$cond138 = $481 & $482;
																							if ($or$cond138) {
																								break;
																							}
																							HEAP32[$7>>2] = 38;
																							$483 = ((($7)) + 4|0);
																							HEAP32[$483>>2] = 0;
																							$484 = ((($this)) + 32|0);
																							$485 = HEAP32[$484>>2]|0;
																							$486 = ((($this)) + 36|0);
																							$487 = HEAP32[$486>>2]|0;
																							$488 = ($485|0)==($487|0);
																							if ($488) {
																								$501 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($501|0),($7|0));
																								$502 = __THREW__; __THREW__ = 0;
																								$503 = $502&1;
																								if ($503) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$489 = $7;
																								$490 = $489;
																								$491 = HEAP32[$490>>2]|0;
																								$492 = (($489) + 4)|0;
																								$493 = $492;
																								$494 = HEAP32[$493>>2]|0;
																								$495 = $485;
																								$496 = $495;
																								HEAP32[$496>>2] = $491;
																								$497 = (($495) + 4)|0;
																								$498 = $497;
																								HEAP32[$498>>2] = $494;
																								$499 = HEAP32[$484>>2]|0;
																								$500 = ((($499)) + 8|0);
																								HEAP32[$484>>2] = $500;
																							}
																							break L92;
																						}
																					} while(0);
																					$504 = HEAP32[$46>>2]|0;
																					$505 = HEAP32[$38>>2]|0;
																					$506 = ((($this)) + 8|0);
																					$507 = HEAP32[$55>>2]|0;
																					$508 = ((($29)) + 16|0);
																					$509 = HEAP32[$508>>2]|0;
																					$row$0$in = $504;
																					while(1) {
																						$row$0 = (($row$0$in) + 1)|0;
																						$510 = ($row$0|0)<($505|0);
																						if (!($510)) {
																							break;
																						}
																						$511 = HEAP32[$this>>2]|0;
																						$512 = HEAP32[$506>>2]|0;
																						$513 = (($512) + ($511))|0;
																						$514 = (($513|0) / 2)&-1;
																						$515 = (($row$0) - ($507))|0;
																						$516 = (($514) - ($467))|0;
																						$517 = (($509) + (($515*12)|0)|0);
																						$518 = HEAP32[$517>>2]|0;
																						$519 = (($518) + ($516)|0);
																						$520 = HEAP8[$519>>0]|0;
																						$521 = ($520<<24>>24)==(0);
																						if ($521) {
																							label = 125;
																							break;
																						} else {
																							$row$0$in = $row$0;
																						}
																					}
																					if ((label|0) == 125) {
																						HEAP32[$8>>2] = 103;
																						$522 = ((($8)) + 4|0);
																						HEAP32[$522>>2] = 0;
																						$523 = ((($this)) + 32|0);
																						$524 = HEAP32[$523>>2]|0;
																						$525 = ((($this)) + 36|0);
																						$526 = HEAP32[$525>>2]|0;
																						$527 = ($524|0)==($526|0);
																						if ($527) {
																							$540 = ((($this)) + 28|0);
																							__THREW__ = 0;
																							invoke_vii(125,($540|0),($8|0));
																							$541 = __THREW__; __THREW__ = 0;
																							$542 = $541&1;
																							if ($542) {
																								label = 22;
																								break L38;
																							}
																						} else {
																							$528 = $8;
																							$529 = $528;
																							$530 = HEAP32[$529>>2]|0;
																							$531 = (($528) + 4)|0;
																							$532 = $531;
																							$533 = HEAP32[$532>>2]|0;
																							$534 = $524;
																							$535 = $534;
																							HEAP32[$535>>2] = $530;
																							$536 = (($534) + 4)|0;
																							$537 = $536;
																							HEAP32[$537>>2] = $533;
																							$538 = HEAP32[$523>>2]|0;
																							$539 = ((($538)) + 8|0);
																							HEAP32[$523>>2] = $539;
																						}
																						break;
																					}
																					$543 = ((($charbox)) + 12|0);
																					$544 = HEAP32[$543>>2]|0;
																					$545 = HEAP32[$40>>2]|0;
																					$546 = (($545) + ($505))|0;
																					$547 = (($546|0) / 2)&-1;
																					$548 = ($544|0)>($547|0);
																					do {
																						if ($548) {
																							__THREW__ = 0;
																							$549 = (invoke_ii(170,($bp|0))|0);
																							$550 = __THREW__; __THREW__ = 0;
																							$551 = $550&1;
																							if ($551) {
																								label = 22;
																								break L38;
																							}
																							if (!($549)) {
																								__THREW__ = 0;
																								$552 = (invoke_ii(171,($bp|0))|0);
																								$553 = __THREW__; __THREW__ = 0;
																								$554 = $553&1;
																								if ($554) {
																									label = 22;
																									break L38;
																								}
																								if (!($552)) {
																									break;
																								}
																								__THREW__ = 0;
																								$555 = (invoke_ii(171,($tp|0))|0);
																								$556 = __THREW__; __THREW__ = 0;
																								$557 = $556&1;
																								if ($557) {
																									label = 22;
																									break L38;
																								}
																								if (!($555)) {
																									break;
																								}
																							}
																							$558 = HEAP32[$55>>2]|0;
																							$559 = ((($charbox)) + 4|0);
																							$560 = HEAP32[$559>>2]|0;
																							$561 = ($558|0)<($560|0);
																							L168: do {
																								if (!($561)) {
																									$562 = HEAP32[$53>>2]|0;
																									$563 = (1 - ($558))|0;
																									$564 = (($563) + ($562))|0;
																									$565 = HEAP32[$543>>2]|0;
																									$566 = (1 - ($560))|0;
																									$567 = (($566) + ($565))|0;
																									$568 = ($564|0)>($567|0);
																									if ($568) {
																										break;
																									}
																									__THREW__ = 0;
																									$569 = (invoke_ii(171,($lp|0))|0);
																									$570 = __THREW__; __THREW__ = 0;
																									$571 = $570&1;
																									if ($571) {
																										label = 22;
																										break L38;
																									}
																									if ($569) {
																										label = 142;
																									} else {
																										__THREW__ = 0;
																										$572 = (invoke_ii(170,($lp|0))|0);
																										$573 = __THREW__; __THREW__ = 0;
																										$574 = $573&1;
																										if ($574) {
																											label = 22;
																											break L38;
																										}
																										if ($572) {
																											label = 142;
																										}
																									}
																									do {
																										if ((label|0) == 142) {
																											__THREW__ = 0;
																											$575 = (invoke_ii(171,($rp|0))|0);
																											$576 = __THREW__; __THREW__ = 0;
																											$577 = $576&1;
																											if ($577) {
																												label = 22;
																												break L38;
																											}
																											if ($575) {
																												$578 = HEAP32[$215>>2]|0;
																												$579 = HEAP32[$182>>2]|0;
																												$580 = ($578|0)>($579|0);
																												if (!($580)) {
																													break;
																												}
																											}
																											HEAP32[$9>>2] = 101;
																											$581 = ((($9)) + 4|0);
																											HEAP32[$581>>2] = 1;
																											$582 = ((($this)) + 32|0);
																											$583 = HEAP32[$582>>2]|0;
																											$584 = ((($this)) + 36|0);
																											$585 = HEAP32[$584>>2]|0;
																											$586 = ($583|0)==($585|0);
																											if ($586) {
																												$599 = ((($this)) + 28|0);
																												__THREW__ = 0;
																												invoke_vii(125,($599|0),($9|0));
																												$600 = __THREW__; __THREW__ = 0;
																												$601 = $600&1;
																												if ($601) {
																													label = 22;
																													break L38;
																												}
																											} else {
																												$587 = $9;
																												$588 = $587;
																												$589 = HEAP32[$588>>2]|0;
																												$590 = (($587) + 4)|0;
																												$591 = $590;
																												$592 = HEAP32[$591>>2]|0;
																												$593 = $583;
																												$594 = $593;
																												HEAP32[$594>>2] = $589;
																												$595 = (($593) + 4)|0;
																												$596 = $595;
																												HEAP32[$596>>2] = $592;
																												$597 = HEAP32[$582>>2]|0;
																												$598 = ((($597)) + 8|0);
																												HEAP32[$582>>2] = $598;
																											}
																											break L168;
																										}
																									} while(0);
																									$602 = HEAP32[$175>>2]|0;
																									$603 = ((($rp)) + 8|0);
																									$604 = HEAP32[$603>>2]|0;
																									$605 = ($604|0)<(0);
																									if ($605) {
																										__THREW__ = 0;
																										invoke_vi(141,($rp|0));
																										$606 = __THREW__; __THREW__ = 0;
																										$607 = $606&1;
																										if ($607) {
																											label = 22;
																											break L38;
																										}
																									}
																									$608 = ((($rp)) + 36|0);
																									$609 = ((($rp)) + 40|0);
																									$610 = HEAP32[$609>>2]|0;
																									$611 = HEAP32[$608>>2]|0;
																									$612 = (($610) - ($611))|0;
																									$613 = $612 >> 2;
																									$614 = ($613*50)|0;
																									$615 = (($614) + -50)|0;
																									$616 = (($615|0) / 100)&-1;
																									__THREW__ = 0;
																									$617 = (invoke_iii(139,($rp|0),($616|0))|0);
																									$618 = __THREW__; __THREW__ = 0;
																									$619 = $618&1;
																									if ($619) {
																										label = 22;
																										break L38;
																									}
																									$620 = (($602) - ($617))|0;
																									$621 = HEAP32[$182>>2]|0;
																									$622 = ($620|0)>($621|0);
																									if (!($622)) {
																										break;
																									}
																									__THREW__ = 0;
																									$623 = (invoke_iii(150,($rp|0),50)|0);
																									$624 = __THREW__; __THREW__ = 0;
																									$625 = $624&1;
																									if ($625) {
																										label = 22;
																										break L38;
																									}
																									if ($623) {
																										break;
																									}
																									HEAP32[$10>>2] = 97;
																									$626 = ((($10)) + 4|0);
																									HEAP32[$626>>2] = 1;
																									$627 = ((($this)) + 32|0);
																									$628 = HEAP32[$627>>2]|0;
																									$629 = ((($this)) + 36|0);
																									$630 = HEAP32[$629>>2]|0;
																									$631 = ($628|0)==($630|0);
																									if ($631) {
																										$644 = ((($this)) + 28|0);
																										__THREW__ = 0;
																										invoke_vii(125,($644|0),($10|0));
																										$645 = __THREW__; __THREW__ = 0;
																										$646 = $645&1;
																										if ($646) {
																											label = 22;
																											break L38;
																										}
																									} else {
																										$632 = $10;
																										$633 = $632;
																										$634 = HEAP32[$633>>2]|0;
																										$635 = (($632) + 4)|0;
																										$636 = $635;
																										$637 = HEAP32[$636>>2]|0;
																										$638 = $628;
																										$639 = $638;
																										HEAP32[$639>>2] = $634;
																										$640 = (($638) + 4)|0;
																										$641 = $640;
																										HEAP32[$641>>2] = $637;
																										$642 = HEAP32[$627>>2]|0;
																										$643 = ((($642)) + 8|0);
																										HEAP32[$627>>2] = $643;
																									}
																								}
																							} while(0);
																							$647 = HEAP32[$46>>2]|0;
																							$648 = HEAP32[$55>>2]|0;
																							$649 = HEAP32[$53>>2]|0;
																							$650 = (($649) + ($648))|0;
																							$651 = (($650|0) / 2)&-1;
																							$652 = ($647|0)>($651|0);
																							do {
																								if ($652) {
																									$653 = HEAP32[$44>>2]|0;
																									$654 = (($649) - ($648))|0;
																									$655 = ($654*30)|0;
																									$656 = (($655|0) / 100)&-1;
																									$657 = (($656) + ($648))|0;
																									$658 = ($653|0)>($657|0);
																									if (!($658)) {
																										break;
																									}
																									HEAP32[$11>>2] = 233;
																									$659 = ((($11)) + 4|0);
																									HEAP32[$659>>2] = 0;
																									$660 = ((($this)) + 32|0);
																									$661 = HEAP32[$660>>2]|0;
																									$662 = ((($this)) + 36|0);
																									$663 = HEAP32[$662>>2]|0;
																									$664 = ($661|0)==($663|0);
																									if ($664) {
																										$677 = ((($this)) + 28|0);
																										__THREW__ = 0;
																										invoke_vii(125,($677|0),($11|0));
																										$678 = __THREW__; __THREW__ = 0;
																										$679 = $678&1;
																										if ($679) {
																											label = 22;
																											break L38;
																										}
																									} else {
																										$665 = $11;
																										$666 = $665;
																										$667 = HEAP32[$666>>2]|0;
																										$668 = (($665) + 4)|0;
																										$669 = $668;
																										$670 = HEAP32[$669>>2]|0;
																										$671 = $661;
																										$672 = $671;
																										HEAP32[$672>>2] = $667;
																										$673 = (($671) + 4)|0;
																										$674 = $673;
																										HEAP32[$674>>2] = $670;
																										$675 = HEAP32[$660>>2]|0;
																										$676 = ((($675)) + 8|0);
																										HEAP32[$660>>2] = $676;
																									}
																									break L92;
																								}
																							} while(0);
																							HEAP32[$12>>2] = 56;
																							$680 = ((($12)) + 4|0);
																							HEAP32[$680>>2] = 0;
																							$681 = ((($this)) + 32|0);
																							$682 = HEAP32[$681>>2]|0;
																							$683 = ((($this)) + 36|0);
																							$684 = HEAP32[$683>>2]|0;
																							$685 = ($682|0)==($684|0);
																							if ($685) {
																								$698 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($698|0),($12|0));
																								$699 = __THREW__; __THREW__ = 0;
																								$700 = $699&1;
																								if ($700) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$686 = $12;
																								$687 = $686;
																								$688 = HEAP32[$687>>2]|0;
																								$689 = (($686) + 4)|0;
																								$690 = $689;
																								$691 = HEAP32[$690>>2]|0;
																								$692 = $682;
																								$693 = $692;
																								HEAP32[$693>>2] = $688;
																								$694 = (($692) + 4)|0;
																								$695 = $694;
																								HEAP32[$695>>2] = $691;
																								$696 = HEAP32[$681>>2]|0;
																								$697 = ((($696)) + 8|0);
																								HEAP32[$681>>2] = $697;
																							}
																							break L92;
																						}
																					} while(0);
																					__THREW__ = 0;
																					$701 = (invoke_iii(143,($lp|0),-1)|0);
																					$702 = __THREW__; __THREW__ = 0;
																					$703 = $702&1;
																					if ($703) {
																						label = 22;
																						break L38;
																					}
																					$704 = ($701|0)==(2);
																					do {
																						if ($704) {
																							__THREW__ = 0;
																							$705 = (invoke_iii(143,($rp|0),-1)|0);
																							$706 = __THREW__; __THREW__ = 0;
																							$707 = $706&1;
																							if ($707) {
																								label = 22;
																								break L38;
																							}
																							$708 = ($705|0)==(1);
																							if (!($708)) {
																								break;
																							}
																							$709 = ((($charbox)) + 4|0);
																							$710 = HEAP32[$709>>2]|0;
																							$711 = HEAP32[$543>>2]|0;
																							$712 = (($711) + ($710))|0;
																							$713 = (($712|0) / 2)&-1;
																							$714 = HEAP32[$46>>2]|0;
																							$715 = ($713|0)<($714|0);
																							$716 = HEAP32[$40>>2]|0;
																							$717 = ($711|0)<($716|0);
																							$or$cond140 = $715 & $717;
																							if ($or$cond140) {
																								HEAP32[$13>>2] = 103;
																								$718 = ((($13)) + 4|0);
																								HEAP32[$718>>2] = 0;
																								$719 = ((($this)) + 32|0);
																								$720 = HEAP32[$719>>2]|0;
																								$721 = ((($this)) + 36|0);
																								$722 = HEAP32[$721>>2]|0;
																								$723 = ($720|0)==($722|0);
																								if ($723) {
																									$736 = ((($this)) + 28|0);
																									__THREW__ = 0;
																									invoke_vii(125,($736|0),($13|0));
																									$737 = __THREW__; __THREW__ = 0;
																									$738 = $737&1;
																									if ($738) {
																										label = 22;
																										break L38;
																									}
																								} else {
																									$724 = $13;
																									$725 = $724;
																									$726 = HEAP32[$725>>2]|0;
																									$727 = (($724) + 4)|0;
																									$728 = $727;
																									$729 = HEAP32[$728>>2]|0;
																									$730 = $720;
																									$731 = $730;
																									HEAP32[$731>>2] = $726;
																									$732 = (($730) + 4)|0;
																									$733 = $732;
																									HEAP32[$733>>2] = $729;
																									$734 = HEAP32[$719>>2]|0;
																									$735 = ((($734)) + 8|0);
																									HEAP32[$719>>2] = $735;
																								}
																								break L92;
																							} else {
																								HEAP32[$14>>2] = 97;
																								$739 = ((($14)) + 4|0);
																								HEAP32[$739>>2] = 0;
																								$740 = ((($this)) + 32|0);
																								$741 = HEAP32[$740>>2]|0;
																								$742 = ((($this)) + 36|0);
																								$743 = HEAP32[$742>>2]|0;
																								$744 = ($741|0)==($743|0);
																								if ($744) {
																									$757 = ((($this)) + 28|0);
																									__THREW__ = 0;
																									invoke_vii(125,($757|0),($14|0));
																									$758 = __THREW__; __THREW__ = 0;
																									$759 = $758&1;
																									if ($759) {
																										label = 22;
																										break L38;
																									}
																								} else {
																									$745 = $14;
																									$746 = $745;
																									$747 = HEAP32[$746>>2]|0;
																									$748 = (($745) + 4)|0;
																									$749 = $748;
																									$750 = HEAP32[$749>>2]|0;
																									$751 = $741;
																									$752 = $751;
																									HEAP32[$752>>2] = $747;
																									$753 = (($751) + 4)|0;
																									$754 = $753;
																									HEAP32[$754>>2] = $750;
																									$755 = HEAP32[$740>>2]|0;
																									$756 = ((($755)) + 8|0);
																									HEAP32[$740>>2] = $756;
																								}
																								break L92;
																							}
																						}
																					} while(0);
																					$760 = ((($charbox)) + 4|0);
																					$761 = HEAP32[$760>>2]|0;
																					$762 = HEAP32[$543>>2]|0;
																					$763 = (($762) + ($761))|0;
																					$764 = (($763|0) / 2)&-1;
																					$765 = HEAP32[$44>>2]|0;
																					$766 = ($764|0)>($765|0);
																					do {
																						if ($766) {
																							$767 = HEAP32[$46>>2]|0;
																							$768 = ($764|0)<($767|0);
																							if (!($768)) {
																								$769 = HEAP32[$38>>2]|0;
																								$770 = HEAP32[$40>>2]|0;
																								$771 = (($770) + ($769))|0;
																								$772 = (($771|0) / 2)&-1;
																								$773 = ($762|0)<($772|0);
																								if (!($773)) {
																									break;
																								}
																							}
																							HEAP32[$15>>2] = 103;
																							$774 = ((($15)) + 4|0);
																							HEAP32[$774>>2] = 2;
																							$775 = ((($this)) + 32|0);
																							$776 = HEAP32[$775>>2]|0;
																							$777 = ((($this)) + 36|0);
																							$778 = HEAP32[$777>>2]|0;
																							$779 = ($776|0)==($778|0);
																							if ($779) {
																								$792 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($792|0),($15|0));
																								$793 = __THREW__; __THREW__ = 0;
																								$794 = $793&1;
																								if ($794) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$780 = $15;
																								$781 = $780;
																								$782 = HEAP32[$781>>2]|0;
																								$783 = (($780) + 4)|0;
																								$784 = $783;
																								$785 = HEAP32[$784>>2]|0;
																								$786 = $776;
																								$787 = $786;
																								HEAP32[$787>>2] = $782;
																								$788 = (($786) + 4)|0;
																								$789 = $788;
																								HEAP32[$789>>2] = $785;
																								$790 = HEAP32[$775>>2]|0;
																								$791 = ((($790)) + 8|0);
																								HEAP32[$775>>2] = $791;
																							}
																						}
																					} while(0);
																					HEAP32[$16>>2] = 66;
																					$795 = ((($16)) + 4|0);
																					HEAP32[$795>>2] = 1;
																					$796 = ((($this)) + 32|0);
																					$797 = HEAP32[$796>>2]|0;
																					$798 = ((($this)) + 36|0);
																					$799 = HEAP32[$798>>2]|0;
																					$800 = ($797|0)==($799|0);
																					if ($800) {
																						$813 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($813|0),($16|0));
																						$814 = __THREW__; __THREW__ = 0;
																						$815 = $814&1;
																						if ($815) {
																							label = 22;
																							break L38;
																						}
																						$$pre162 = HEAP32[$796>>2]|0;
																						$818 = $$pre162;
																					} else {
																						$801 = $16;
																						$802 = $801;
																						$803 = HEAP32[$802>>2]|0;
																						$804 = (($801) + 4)|0;
																						$805 = $804;
																						$806 = HEAP32[$805>>2]|0;
																						$807 = $797;
																						$808 = $807;
																						HEAP32[$808>>2] = $803;
																						$809 = (($807) + 4)|0;
																						$810 = $809;
																						HEAP32[$810>>2] = $806;
																						$811 = HEAP32[$796>>2]|0;
																						$812 = ((($811)) + 8|0);
																						HEAP32[$796>>2] = $812;
																						$818 = $812;
																					}
																					HEAP32[$18>>2] = 97;
																					$816 = ((($18)) + 4|0);
																					HEAP32[$816>>2] = 0;
																					$817 = HEAP32[$798>>2]|0;
																					$819 = ($818|0)==($817|0);
																					if ($819) {
																						$832 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($832|0),($18|0));
																						$833 = __THREW__; __THREW__ = 0;
																						$834 = $833&1;
																						if ($834) {
																							label = 22;
																							break L38;
																						}
																					} else {
																						$820 = $18;
																						$821 = $820;
																						$822 = HEAP32[$821>>2]|0;
																						$823 = (($820) + 4)|0;
																						$824 = $823;
																						$825 = HEAP32[$824>>2]|0;
																						$826 = $818;
																						$827 = $826;
																						HEAP32[$827>>2] = $822;
																						$828 = (($826) + 4)|0;
																						$829 = $828;
																						HEAP32[$829>>2] = $825;
																						$830 = HEAP32[$796>>2]|0;
																						$831 = ((($830)) + 8|0);
																						HEAP32[$796>>2] = $831;
																					}
																				}
																			} while(0);
																			label = 265;
																			break L38;
																		}
																	} while(0);
																	$835 = ($200|0)>($203|0);
																	do {
																		if ($835) {
																			__THREW__ = 0;
																			$836 = (invoke_iii(164,($30|0),($31|0))|0);
																			$837 = __THREW__; __THREW__ = 0;
																			$838 = $837&1;
																			if ($838) {
																				label = 22;
																				break L38;
																			}
																			if (!($836)) {
																				break;
																			}
																			__THREW__ = 0;
																			$839 = (invoke_iii(172,($30|0),($31|0))|0);
																			$840 = __THREW__; __THREW__ = 0;
																			$841 = $840&1;
																			if ($841) {
																				label = 22;
																				break L38;
																			}
																			if ($839) {
																				__THREW__ = 0;
																				$897 = (invoke_iii(165,($30|0),($31|0))|0);
																				$898 = __THREW__; __THREW__ = 0;
																				$899 = $898&1;
																				if ($899) {
																					label = 22;
																					break L38;
																				}
																				if (!($897)) {
																					label = 265;
																					break L38;
																				}
																				HEAP32[$21>>2] = 81;
																				$900 = ((($21)) + 4|0);
																				HEAP32[$900>>2] = 0;
																				$901 = ((($this)) + 32|0);
																				$902 = HEAP32[$901>>2]|0;
																				$903 = ((($this)) + 36|0);
																				$904 = HEAP32[$903>>2]|0;
																				$905 = ($902|0)==($904|0);
																				if ($905) {
																					$918 = ((($this)) + 28|0);
																					__THREW__ = 0;
																					invoke_vii(125,($918|0),($21|0));
																					$919 = __THREW__; __THREW__ = 0;
																					$920 = $919&1;
																					if ($920) {
																						label = 22;
																						break L38;
																					}
																				} else {
																					$906 = $21;
																					$907 = $906;
																					$908 = HEAP32[$907>>2]|0;
																					$909 = (($906) + 4)|0;
																					$910 = $909;
																					$911 = HEAP32[$910>>2]|0;
																					$912 = $902;
																					$913 = $912;
																					HEAP32[$913>>2] = $908;
																					$914 = (($912) + 4)|0;
																					$915 = $914;
																					HEAP32[$915>>2] = $911;
																					$916 = HEAP32[$901>>2]|0;
																					$917 = ((($916)) + 8|0);
																					HEAP32[$901>>2] = $917;
																				}
																				label = 265;
																				break L38;
																			}
																			$842 = HEAP32[$31>>2]|0;
																			$843 = HEAP32[$29>>2]|0;
																			$844 = HEAP32[$175>>2]|0;
																			$845 = (($844) + ($843))|0;
																			$846 = (($845|0) / 2)&-1;
																			$847 = ($842|0)>($846|0);
																			do {
																				if ($847) {
																					$848 = HEAP32[$40>>2]|0;
																					$849 = HEAP32[$53>>2]|0;
																					$850 = HEAP32[$46>>2]|0;
																					$851 = HEAP32[$44>>2]|0;
																					$$neg149 = (($849) + -1)|0;
																					$852 = (($$neg149) - ($850))|0;
																					$853 = (($852) + ($851))|0;
																					$854 = ($848|0)<($853|0);
																					if (!($854)) {
																						break;
																					}
																					HEAP32[$19>>2] = 57;
																					$855 = ((($19)) + 4|0);
																					HEAP32[$855>>2] = 0;
																					$856 = ((($this)) + 32|0);
																					$857 = HEAP32[$856>>2]|0;
																					$858 = ((($this)) + 36|0);
																					$859 = HEAP32[$858>>2]|0;
																					$860 = ($857|0)==($859|0);
																					if ($860) {
																						$873 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($873|0),($19|0));
																						$874 = __THREW__; __THREW__ = 0;
																						$875 = $874&1;
																						if ($875) {
																							label = 22;
																							break L38;
																						}
																					} else {
																						$861 = $19;
																						$862 = $861;
																						$863 = HEAP32[$862>>2]|0;
																						$864 = (($861) + 4)|0;
																						$865 = $864;
																						$866 = HEAP32[$865>>2]|0;
																						$867 = $857;
																						$868 = $867;
																						HEAP32[$868>>2] = $863;
																						$869 = (($867) + 4)|0;
																						$870 = $869;
																						HEAP32[$870>>2] = $866;
																						$871 = HEAP32[$856>>2]|0;
																						$872 = ((($871)) + 8|0);
																						HEAP32[$856>>2] = $872;
																					}
																					label = 265;
																					break L38;
																				}
																			} while(0);
																			HEAP32[$20>>2] = 103;
																			$876 = ((($20)) + 4|0);
																			HEAP32[$876>>2] = 0;
																			$877 = ((($this)) + 32|0);
																			$878 = HEAP32[$877>>2]|0;
																			$879 = ((($this)) + 36|0);
																			$880 = HEAP32[$879>>2]|0;
																			$881 = ($878|0)==($880|0);
																			if ($881) {
																				$894 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($894|0),($20|0));
																				$895 = __THREW__; __THREW__ = 0;
																				$896 = $895&1;
																				if ($896) {
																					label = 22;
																					break L38;
																				}
																			} else {
																				$882 = $20;
																				$883 = $882;
																				$884 = HEAP32[$883>>2]|0;
																				$885 = (($882) + 4)|0;
																				$886 = $885;
																				$887 = HEAP32[$886>>2]|0;
																				$888 = $878;
																				$889 = $888;
																				HEAP32[$889>>2] = $884;
																				$890 = (($888) + 4)|0;
																				$891 = $890;
																				HEAP32[$891>>2] = $887;
																				$892 = HEAP32[$877>>2]|0;
																				$893 = ((($892)) + 8|0);
																				HEAP32[$877>>2] = $893;
																			}
																			label = 265;
																			break L38;
																		}
																	} while(0);
																	$921 = ($200|0)<($203|0);
																	if (!($921)) {
																		label = 265;
																		break;
																	}
																	__THREW__ = 0;
																	$922 = (invoke_iii(143,($tp|0),-1)|0);
																	$923 = __THREW__; __THREW__ = 0;
																	$924 = $923&1;
																	if ($924) {
																		label = 22;
																		break;
																	}
																	$925 = ($922|0)==(1);
																	if (!($925)) {
																		label = 265;
																		break;
																	}
																	__THREW__ = 0;
																	$926 = (invoke_iii(164,($30|0),($31|0))|0);
																	$927 = __THREW__; __THREW__ = 0;
																	$928 = $927&1;
																	if ($928) {
																		label = 22;
																		break;
																	}
																	do {
																		if ($926) {
																			__THREW__ = 0;
																			$929 = (invoke_iii(143,($rp|0),-1)|0);
																			$930 = __THREW__; __THREW__ = 0;
																			$931 = $930&1;
																			if ($931) {
																				label = 22;
																				break L38;
																			}
																			$932 = ($929|0)==(1);
																			if (!($932)) {
																				__THREW__ = 0;
																				$1058 = (invoke_iii(172,($30|0),($31|0))|0);
																				$1059 = __THREW__; __THREW__ = 0;
																				$1060 = $1059&1;
																				if ($1060) {
																					label = 22;
																					break L38;
																				}
																				if ($1058) {
																					break;
																				}
																				$1061 = HEAP32[$182>>2]|0;
																				$1062 = HEAP32[$29>>2]|0;
																				$1063 = HEAP32[$175>>2]|0;
																				$1064 = (($1063) + ($1062))|0;
																				$1065 = (($1064|0) / 2)&-1;
																				$1066 = ($1061|0)<($1065|0);
																				if (!($1066)) {
																					break;
																				}
																				$1067 = HEAP32[$44>>2]|0;
																				$1068 = HEAP32[$55>>2]|0;
																				$1069 = HEAP32[$46>>2]|0;
																				$1070 = (1 - ($1067))|0;
																				$1071 = (($1070) + ($1068))|0;
																				$1072 = (($1071) + ($1069))|0;
																				$1073 = ($1067|0)>($1072|0);
																				if (!($1073)) {
																					break;
																				}
																				HEAP32[$27>>2] = 54;
																				$1074 = ((($27)) + 4|0);
																				HEAP32[$1074>>2] = 0;
																				$1075 = ((($this)) + 32|0);
																				$1076 = HEAP32[$1075>>2]|0;
																				$1077 = ((($this)) + 36|0);
																				$1078 = HEAP32[$1077>>2]|0;
																				$1079 = ($1076|0)==($1078|0);
																				if ($1079) {
																					$1092 = ((($this)) + 28|0);
																					__THREW__ = 0;
																					invoke_vii(125,($1092|0),($27|0));
																					$1093 = __THREW__; __THREW__ = 0;
																					$1094 = $1093&1;
																					if ($1094) {
																						label = 22;
																						break L38;
																					}
																				} else {
																					$1080 = $27;
																					$1081 = $1080;
																					$1082 = HEAP32[$1081>>2]|0;
																					$1083 = (($1080) + 4)|0;
																					$1084 = $1083;
																					$1085 = HEAP32[$1084>>2]|0;
																					$1086 = $1076;
																					$1087 = $1086;
																					HEAP32[$1087>>2] = $1082;
																					$1088 = (($1086) + 4)|0;
																					$1089 = $1088;
																					HEAP32[$1089>>2] = $1085;
																					$1090 = HEAP32[$1075>>2]|0;
																					$1091 = ((($1090)) + 8|0);
																					HEAP32[$1075>>2] = $1091;
																				}
																				label = 265;
																				break L38;
																			}
																			$933 = HEAP32[$46>>2]|0;
																			$934 = HEAP32[$44>>2]|0;
																			$935 = (($933) + 1)|0;
																			$936 = (($935) - ($934))|0;
																			$937 = $936 << 1;
																			$938 = HEAP32[$40>>2]|0;
																			$939 = HEAP32[$38>>2]|0;
																			$940 = (($938) + 1)|0;
																			$941 = (($940) - ($939))|0;
																			$942 = ($937|0)>($941|0);
																			do {
																				if ($942) {
																					$943 = HEAP32[$182>>2]|0;
																					$944 = HEAP32[$30>>2]|0;
																					$945 = (($943) + 1)|0;
																					$946 = (($945) - ($944))|0;
																					$947 = $946 << 1;
																					$948 = HEAP32[$215>>2]|0;
																					$949 = HEAP32[$31>>2]|0;
																					$950 = (($948) + 1)|0;
																					$951 = (($950) - ($949))|0;
																					$952 = ($947|0)>($951|0);
																					if (!($952)) {
																						break;
																					}
																					$953 = ($951*3)|0;
																					$954 = HEAP32[$175>>2]|0;
																					$955 = HEAP32[$29>>2]|0;
																					$956 = (($954) + 1)|0;
																					$957 = (($956) - ($955))|0;
																					$958 = ($953|0)<($957|0);
																					if ($958) {
																						break;
																					}
																					__THREW__ = 0;
																					$959 = (invoke_iii(150,($lp|0),50)|0);
																					$960 = __THREW__; __THREW__ = 0;
																					$961 = $960&1;
																					if ($961) {
																						label = 22;
																						break L38;
																					}
																					if ($959) {
																						break;
																					}
																					__THREW__ = 0;
																					$962 = (invoke_ii(171,($lp|0))|0);
																					$963 = __THREW__; __THREW__ = 0;
																					$964 = $963&1;
																					if ($964) {
																						label = 22;
																						break L38;
																					}
																					do {
																						if ($962) {
																							__THREW__ = 0;
																							$965 = (invoke_ii(170,($lp|0))|0);
																							$966 = __THREW__; __THREW__ = 0;
																							$967 = $966&1;
																							if ($967) {
																								label = 22;
																								break L38;
																							}
																							if (!($965)) {
																								break;
																							}
																							HEAP32[$22>>2] = 54;
																							$968 = ((($22)) + 4|0);
																							HEAP32[$968>>2] = 0;
																							$969 = ((($this)) + 32|0);
																							$970 = HEAP32[$969>>2]|0;
																							$971 = ((($this)) + 36|0);
																							$972 = HEAP32[$971>>2]|0;
																							$973 = ($970|0)==($972|0);
																							if ($973) {
																								$986 = ((($this)) + 28|0);
																								__THREW__ = 0;
																								invoke_vii(125,($986|0),($22|0));
																								$987 = __THREW__; __THREW__ = 0;
																								$988 = $987&1;
																								if ($988) {
																									label = 22;
																									break L38;
																								}
																							} else {
																								$974 = $22;
																								$975 = $974;
																								$976 = HEAP32[$975>>2]|0;
																								$977 = (($974) + 4)|0;
																								$978 = $977;
																								$979 = HEAP32[$978>>2]|0;
																								$980 = $970;
																								$981 = $980;
																								HEAP32[$981>>2] = $976;
																								$982 = (($980) + 4)|0;
																								$983 = $982;
																								HEAP32[$983>>2] = $979;
																								$984 = HEAP32[$969>>2]|0;
																								$985 = ((($984)) + 8|0);
																								HEAP32[$969>>2] = $985;
																							}
																							label = 265;
																							break L38;
																						}
																					} while(0);
																					HEAP32[$23>>2] = 66;
																					$989 = ((($23)) + 4|0);
																					HEAP32[$989>>2] = 0;
																					$990 = ((($this)) + 32|0);
																					$991 = HEAP32[$990>>2]|0;
																					$992 = ((($this)) + 36|0);
																					$993 = HEAP32[$992>>2]|0;
																					$994 = ($991|0)==($993|0);
																					if ($994) {
																						$1007 = ((($this)) + 28|0);
																						__THREW__ = 0;
																						invoke_vii(125,($1007|0),($23|0));
																						$1008 = __THREW__; __THREW__ = 0;
																						$1009 = $1008&1;
																						if ($1009) {
																							label = 22;
																							break L38;
																						}
																					} else {
																						$995 = $23;
																						$996 = $995;
																						$997 = HEAP32[$996>>2]|0;
																						$998 = (($995) + 4)|0;
																						$999 = $998;
																						$1000 = HEAP32[$999>>2]|0;
																						$1001 = $991;
																						$1002 = $1001;
																						HEAP32[$1002>>2] = $997;
																						$1003 = (($1001) + 4)|0;
																						$1004 = $1003;
																						HEAP32[$1004>>2] = $1000;
																						$1005 = HEAP32[$990>>2]|0;
																						$1006 = ((($1005)) + 8|0);
																						HEAP32[$990>>2] = $1006;
																					}
																					label = 265;
																					break L38;
																				}
																			} while(0);
																			$1010 = HEAP32[$215>>2]|0;
																			$1011 = HEAP32[$29>>2]|0;
																			$1012 = HEAP32[$175>>2]|0;
																			$1013 = (($1012) + ($1011))|0;
																			$1014 = (($1013|0) / 2)&-1;
																			$1015 = ($1010|0)<($1014|0);
																			if ($1015) {
																				HEAP32[$25>>2] = 38;
																				$1016 = ((($25)) + 4|0);
																				HEAP32[$1016>>2] = 0;
																				$1017 = ((($this)) + 32|0);
																				$1018 = HEAP32[$1017>>2]|0;
																				$1019 = ((($this)) + 36|0);
																				$1020 = HEAP32[$1019>>2]|0;
																				$1021 = ($1018|0)==($1020|0);
																				if ($1021) {
																					$1034 = ((($this)) + 28|0);
																					__THREW__ = 0;
																					invoke_vii(125,($1034|0),($25|0));
																					$1035 = __THREW__; __THREW__ = 0;
																					$1036 = $1035&1;
																					if ($1036) {
																						label = 22;
																						break L38;
																					}
																				} else {
																					$1022 = $25;
																					$1023 = $1022;
																					$1024 = HEAP32[$1023>>2]|0;
																					$1025 = (($1022) + 4)|0;
																					$1026 = $1025;
																					$1027 = HEAP32[$1026>>2]|0;
																					$1028 = $1018;
																					$1029 = $1028;
																					HEAP32[$1029>>2] = $1024;
																					$1030 = (($1028) + 4)|0;
																					$1031 = $1030;
																					HEAP32[$1031>>2] = $1027;
																					$1032 = HEAP32[$1017>>2]|0;
																					$1033 = ((($1032)) + 8|0);
																					HEAP32[$1017>>2] = $1033;
																				}
																				label = 265;
																				break L38;
																			} else {
																				HEAP32[$26>>2] = 97;
																				$1037 = ((($26)) + 4|0);
																				HEAP32[$1037>>2] = 0;
																				$1038 = ((($this)) + 32|0);
																				$1039 = HEAP32[$1038>>2]|0;
																				$1040 = ((($this)) + 36|0);
																				$1041 = HEAP32[$1040>>2]|0;
																				$1042 = ($1039|0)==($1041|0);
																				if ($1042) {
																					$1055 = ((($this)) + 28|0);
																					__THREW__ = 0;
																					invoke_vii(125,($1055|0),($26|0));
																					$1056 = __THREW__; __THREW__ = 0;
																					$1057 = $1056&1;
																					if ($1057) {
																						label = 22;
																						break L38;
																					}
																				} else {
																					$1043 = $26;
																					$1044 = $1043;
																					$1045 = HEAP32[$1044>>2]|0;
																					$1046 = (($1043) + 4)|0;
																					$1047 = $1046;
																					$1048 = HEAP32[$1047>>2]|0;
																					$1049 = $1039;
																					$1050 = $1049;
																					HEAP32[$1050>>2] = $1045;
																					$1051 = (($1049) + 4)|0;
																					$1052 = $1051;
																					HEAP32[$1052>>2] = $1048;
																					$1053 = HEAP32[$1038>>2]|0;
																					$1054 = ((($1053)) + 8|0);
																					HEAP32[$1038>>2] = $1054;
																				}
																				label = 265;
																				break L38;
																			}
																		}
																	} while(0);
																	$1095 = HEAP32[$46>>2]|0;
																	$1096 = HEAP32[$38>>2]|0;
																	$1097 = ($1095|0)<($1096|0);
																	if (!($1097)) {
																		label = 265;
																		break;
																	}
																	HEAP32[$28>>2] = 38;
																	$1098 = ((($28)) + 4|0);
																	HEAP32[$1098>>2] = 0;
																	$1099 = ((($this)) + 32|0);
																	$1100 = HEAP32[$1099>>2]|0;
																	$1101 = ((($this)) + 36|0);
																	$1102 = HEAP32[$1101>>2]|0;
																	$1103 = ($1100|0)==($1102|0);
																	if ($1103) {
																		$1116 = ((($this)) + 28|0);
																		__THREW__ = 0;
																		invoke_vii(125,($1116|0),($28|0));
																		$1117 = __THREW__; __THREW__ = 0;
																		$1118 = $1117&1;
																		if ($1118) {
																			label = 22;
																			break;
																		}
																	} else {
																		$1104 = $28;
																		$1105 = $1104;
																		$1106 = HEAP32[$1105>>2]|0;
																		$1107 = (($1104) + 4)|0;
																		$1108 = $1107;
																		$1109 = HEAP32[$1108>>2]|0;
																		$1110 = $1100;
																		$1111 = $1110;
																		HEAP32[$1111>>2] = $1106;
																		$1112 = (($1110) + 4)|0;
																		$1113 = $1112;
																		HEAP32[$1113>>2] = $1109;
																		$1114 = HEAP32[$1099>>2]|0;
																		$1115 = ((($1114)) + 8|0);
																		HEAP32[$1099>>2] = $1115;
																	}
																	label = 265;
																}
															}
														}
													}
												} else {
													label = 265;
												}
											}
										} else {
											label = 265;
										}
									}
								}
							} while(0);
							if ((label|0) == 22) {
								$110 = ___cxa_find_matching_catch_2()|0;
								$111 = tempRet0;
								$lpad$phi$index = $110;$lpad$phi$index2 = $111;
							}
							else if ((label|0) == 265) {
								$1119 = ((($bp)) + 36|0);
								$1120 = HEAP32[$1119>>2]|0;
								$1121 = ($1120|0)==(0|0);
								$1122 = $1120;
								if (!($1121)) {
									$1123 = ((($bp)) + 40|0);
									$1124 = HEAP32[$1123>>2]|0;
									$1125 = ($1124|0)==($1120|0);
									if (!($1125)) {
										$scevgep$i$i$i$i38 = ((($1124)) + -4|0);
										$1126 = $scevgep$i$i$i$i38;
										$1127 = (($1126) - ($1122))|0;
										$1128 = $1127 >>> 2;
										$1129 = $1128 ^ -1;
										$scevgep4$i$i$i$i39 = (($1124) + ($1129<<2)|0);
										HEAP32[$1123>>2] = $scevgep4$i$i$i$i39;
									}
									__ZdlPv($1120);
								}
								$1130 = ((($rp)) + 36|0);
								$1131 = HEAP32[$1130>>2]|0;
								$1132 = ($1131|0)==(0|0);
								$1133 = $1131;
								if (!($1132)) {
									$1134 = ((($rp)) + 40|0);
									$1135 = HEAP32[$1134>>2]|0;
									$1136 = ($1135|0)==($1131|0);
									if (!($1136)) {
										$scevgep$i$i$i$i33 = ((($1135)) + -4|0);
										$1137 = $scevgep$i$i$i$i33;
										$1138 = (($1137) - ($1133))|0;
										$1139 = $1138 >>> 2;
										$1140 = $1139 ^ -1;
										$scevgep4$i$i$i$i34 = (($1135) + ($1140<<2)|0);
										HEAP32[$1134>>2] = $scevgep4$i$i$i$i34;
									}
									__ZdlPv($1131);
								}
								$1141 = ((($tp)) + 36|0);
								$1142 = HEAP32[$1141>>2]|0;
								$1143 = ($1142|0)==(0|0);
								$1144 = $1142;
								if (!($1143)) {
									$1145 = ((($tp)) + 40|0);
									$1146 = HEAP32[$1145>>2]|0;
									$1147 = ($1146|0)==($1142|0);
									if (!($1147)) {
										$scevgep$i$i$i$i28 = ((($1146)) + -4|0);
										$1148 = $scevgep$i$i$i$i28;
										$1149 = (($1148) - ($1144))|0;
										$1150 = $1149 >>> 2;
										$1151 = $1150 ^ -1;
										$scevgep4$i$i$i$i29 = (($1146) + ($1151<<2)|0);
										HEAP32[$1145>>2] = $scevgep4$i$i$i$i29;
									}
									__ZdlPv($1142);
								}
								$1152 = ((($lp)) + 36|0);
								$1153 = HEAP32[$1152>>2]|0;
								$1154 = ($1153|0)==(0|0);
								$1155 = $1153;
								if ($1154) {
									STACKTOP = sp;return;
								}
								$1156 = ((($lp)) + 40|0);
								$1157 = HEAP32[$1156>>2]|0;
								$1158 = ($1157|0)==($1153|0);
								if (!($1158)) {
									$scevgep$i$i$i$i23 = ((($1157)) + -4|0);
									$1159 = $scevgep$i$i$i$i23;
									$1160 = (($1159) - ($1155))|0;
									$1161 = $1160 >>> 2;
									$1162 = $1161 ^ -1;
									$scevgep4$i$i$i$i24 = (($1157) + ($1162<<2)|0);
									HEAP32[$1156>>2] = $scevgep4$i$i$i$i24;
								}
								__ZdlPv($1153);
								STACKTOP = sp;return;
							}
							$112 = ((($bp)) + 36|0);
							$113 = HEAP32[$112>>2]|0;
							$114 = ($113|0)==(0|0);
							$115 = $113;
							if ($114) {
								$$0 = $lpad$phi$index;$$03 = $lpad$phi$index2;
							} else {
								$116 = ((($bp)) + 40|0);
								$117 = HEAP32[$116>>2]|0;
								$118 = ($117|0)==($113|0);
								if (!($118)) {
									$scevgep$i$i$i$i55 = ((($117)) + -4|0);
									$119 = $scevgep$i$i$i$i55;
									$120 = (($119) - ($115))|0;
									$121 = $120 >>> 2;
									$122 = $121 ^ -1;
									$scevgep4$i$i$i$i56 = (($117) + ($122<<2)|0);
									HEAP32[$116>>2] = $scevgep4$i$i$i$i56;
								}
								__ZdlPv($113);
								$$0 = $lpad$phi$index;$$03 = $lpad$phi$index2;
							}
						}
						$1163 = ((($rp)) + 36|0);
						$1164 = HEAP32[$1163>>2]|0;
						$1165 = ($1164|0)==(0|0);
						$1166 = $1164;
						if ($1165) {
							$$1 = $$0;$$14 = $$03;
						} else {
							$1167 = ((($rp)) + 40|0);
							$1168 = HEAP32[$1167>>2]|0;
							$1169 = ($1168|0)==($1164|0);
							if (!($1169)) {
								$scevgep$i$i$i$i18 = ((($1168)) + -4|0);
								$1170 = $scevgep$i$i$i$i18;
								$1171 = (($1170) - ($1166))|0;
								$1172 = $1171 >>> 2;
								$1173 = $1172 ^ -1;
								$scevgep4$i$i$i$i19 = (($1168) + ($1173<<2)|0);
								HEAP32[$1167>>2] = $scevgep4$i$i$i$i19;
							}
							__ZdlPv($1164);
							$$1 = $$0;$$14 = $$03;
						}
					}
					$1174 = ((($tp)) + 36|0);
					$1175 = HEAP32[$1174>>2]|0;
					$1176 = ($1175|0)==(0|0);
					$1177 = $1175;
					if ($1176) {
						$$2 = $$1;$$25 = $$14;
					} else {
						$1178 = ((($tp)) + 40|0);
						$1179 = HEAP32[$1178>>2]|0;
						$1180 = ($1179|0)==($1175|0);
						if (!($1180)) {
							$scevgep$i$i$i$i13 = ((($1179)) + -4|0);
							$1181 = $scevgep$i$i$i$i13;
							$1182 = (($1181) - ($1177))|0;
							$1183 = $1182 >>> 2;
							$1184 = $1183 ^ -1;
							$scevgep4$i$i$i$i14 = (($1179) + ($1184<<2)|0);
							HEAP32[$1178>>2] = $scevgep4$i$i$i$i14;
						}
						__ZdlPv($1175);
						$$2 = $$1;$$25 = $$14;
					}
				}
				$1185 = ((($lp)) + 36|0);
				$1186 = HEAP32[$1185>>2]|0;
				$1187 = ($1186|0)==(0|0);
				$1188 = $1186;
				if ($1187) {
					___resumeException($$2|0);
					// unreachable;
				}
				$1189 = ((($lp)) + 40|0);
				$1190 = HEAP32[$1189>>2]|0;
				$1191 = ($1190|0)==($1186|0);
				if (!($1191)) {
					$scevgep$i$i$i$i = ((($1190)) + -4|0);
					$1192 = $scevgep$i$i$i$i;
					$1193 = (($1192) - ($1188))|0;
					$1194 = $1193 >>> 2;
					$1195 = $1194 ^ -1;
					$scevgep4$i$i$i$i = (($1190) + ($1195<<2)|0);
					HEAP32[$1189>>2] = $scevgep4$i$i$i$i;
				}
				__ZdlPv($1186);
				___resumeException($$2|0);
				// unreachable;
			}
			function __ZN3UCS11base_letterEi($code) {
				$code = $code|0;
				var $$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				do {
					switch ($code|0) {
						case 197: case 196: case 195: case 194: case 193: case 192:  {
							$$0 = 65;
							break;
						}
						case 199:  {
							$$0 = 67;
							break;
						}
						case 203: case 202: case 201: case 200:  {
							$$0 = 69;
							break;
						}
						case 286:  {
							$$0 = 71;
							break;
						}
						case 304: case 207: case 206: case 205: case 204:  {
							$$0 = 73;
							break;
						}
						case 209:  {
							$$0 = 78;
							break;
						}
						case 214: case 213: case 212: case 211: case 210:  {
							$$0 = 79;
							break;
						}
						case 352: case 350:  {
							$$0 = 83;
							break;
						}
						case 220: case 219: case 218: case 217:  {
							$$0 = 85;
							break;
						}
						case 376: case 221:  {
							$$0 = 89;
							break;
						}
						case 381:  {
							$$0 = 90;
							break;
						}
						case 229: case 228: case 227: case 226: case 225: case 224:  {
							$$0 = 97;
							break;
						}
						case 231:  {
							$$0 = 99;
							break;
						}
						case 235: case 234: case 233: case 232:  {
							$$0 = 101;
							break;
						}
						case 287:  {
							$$0 = 103;
							break;
						}
						case 305: case 239: case 238: case 237: case 236:  {
							$$0 = 105;
							break;
						}
						case 241:  {
							$$0 = 110;
							break;
						}
						case 246: case 245: case 244: case 243: case 242:  {
							$$0 = 111;
							break;
						}
						case 353: case 351:  {
							$$0 = 115;
							break;
						}
						case 252: case 251: case 250: case 249:  {
							$$0 = 117;
							break;
						}
						case 255: case 253:  {
							$$0 = 121;
							break;
						}
						case 382:  {
							$$0 = 122;
							break;
						}
						default: {
							$$0 = 0;
						}
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN3UCS7composeEii($letter,$accent) {
				$letter = $letter|0;
				$accent = $accent|0;
				var $$0 = 0, $0 = 0, $1 = 0, $switch$select = 0, $switch$select2 = 0, $switch$select4 = 0, $switch$select6 = 0, $switch$selectcmp = 0, $switch$selectcmp1 = 0, $switch$selectcmp3 = 0, $switch$selectcmp5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				L1: do {
					switch ($letter|0) {
						case 65:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 193;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 192;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 194;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 196;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 69:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 201;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 200;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 202;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 203;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 71:  {
							$$0 = 286;
							break;
						}
						case 73: case 91:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 205;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 204;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 206;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 207;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 78:  {
							$0 = ($accent|0)==(58);
							if ($0) {
								label = 51;
							} else {
								$$0 = 209;
							}
							break;
						}
						case 79:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 211;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 210;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 212;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 214;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 83:  {
							$$0 = 352;
							break;
						}
						case 86: case 85:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 218;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 217;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 219;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 220;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 89:  {
							$switch$selectcmp = ($accent|0)==(58);
							$switch$select = $switch$selectcmp ? 376 : 0;
							$switch$selectcmp1 = ($accent|0)==(39);
							$switch$select2 = $switch$selectcmp1 ? 221 : $switch$select;
							$$0 = $switch$select2;
							break;
						}
						case 90:  {
							$$0 = 381;
							break;
						}
						case 97:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 225;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 224;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 226;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 228;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 101:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 233;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 232;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 234;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 235;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 103: case 57:  {
							$$0 = 287;
							break;
						}
						case 108: case 105: case 93: case 124:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 237;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 236;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 238;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 239;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 110:  {
							$1 = ($accent|0)==(58);
							if ($1) {
								label = 51;
							} else {
								$$0 = 241;
							}
							break;
						}
						case 111:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 243;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 242;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 244;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 246;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 115:  {
							$$0 = 353;
							break;
						}
						case 118: case 117:  {
							switch ($accent|0) {
								case 39:  {
									$$0 = 250;
									break L1;
									break;
								}
								case 96:  {
									$$0 = 249;
									break L1;
									break;
								}
								case 94:  {
									$$0 = 251;
									break L1;
									break;
								}
								case 58:  {
									$$0 = 252;
									break L1;
									break;
								}
								default: {
									label = 51;
									break L1;
								}
							}
							break;
						}
						case 121:  {
							$switch$selectcmp3 = ($accent|0)==(58);
							$switch$select4 = $switch$selectcmp3 ? 255 : 0;
							$switch$selectcmp5 = ($accent|0)==(39);
							$switch$select6 = $switch$selectcmp5 ? 253 : $switch$select4;
							$$0 = $switch$select6;
							break;
						}
						case 122:  {
							$$0 = 382;
							break;
						}
						default: {
							label = 51;
						}
					}
				} while(0);
				if ((label|0) == 51) {
					$$0 = 0;
				}
				return ($$0|0);
			}
			function __ZN3UCS7isalnumEi($code) {
				$code = $code|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $code$off$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_isalpha($code)|0);
					$2 = ($1|0)==(0);
					if ($2) {
						label = 3;
					} else {
						$4 = 1;
					}
				} else {
					label = 3;
				}
				L3: do {
					if ((label|0) == 3) {
						switch ($code|0) {
							case 382: case 255: case 253: case 252: case 251: case 250: case 249: case 353: case 351: case 246: case 245: case 244: case 243: case 242: case 241: case 305: case 239: case 238: case 237: case 236: case 287: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 381: case 376: case 221: case 220: case 219: case 218: case 217: case 352: case 350: case 214: case 213: case 212: case 211: case 210: case 209: case 304: case 207: case 206: case 205: case 204: case 286: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
								$4 = 1;
								break L3;
								break;
							}
							default: {
							}
						}
						$code$off$i = (($code) + -48)|0;
						$3 = ($code$off$i>>>0)<(10);
						$4 = $3;
					}
				} while(0);
				return ($4|0);
			}
			function __ZN3UCS7isalphaEi($code) {
				$code = $code|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_isalpha($code)|0);
					$2 = ($1|0)==(0);
					if ($2) {
						label = 3;
					} else {
						$3 = 1;
					}
				} else {
					label = 3;
				}
				L3: do {
					if ((label|0) == 3) {
						switch ($code|0) {
							case 382: case 255: case 253: case 252: case 251: case 250: case 249: case 353: case 351: case 246: case 245: case 244: case 243: case 242: case 241: case 305: case 239: case 238: case 237: case 236: case 287: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 381: case 376: case 221: case 220: case 219: case 218: case 217: case 352: case 350: case 214: case 213: case 212: case 211: case 210: case 209: case 304: case 207: case 206: case 205: case 204: case 286: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
								$3 = 1;
								break L3;
								break;
							}
							default: {
							}
						}
						$3 = 0;
					}
				} while(0);
				return ($3|0);
			}
			function __ZN3UCS6ishighEi($code) {
				$code = $code|0;
				var $$0 = 0, $$0$i$ph$i = 0, $$clear = 0, $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $code$off$i = 0, $or$cond = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_isupper($code)|0);
					$2 = ($1|0)==(0);
					if (!($2)) {
						$$0 = 1;
						return ($$0|0);
					}
				}
				do {
					switch ($code|0) {
						case 197: case 196: case 195: case 194: case 193: case 192:  {
							$$0$i$ph$i = 65;
							label = 25;
							break;
						}
						case 199:  {
							$$0$i$ph$i = 67;
							label = 25;
							break;
						}
						case 203: case 202: case 201: case 200:  {
							$$0$i$ph$i = 69;
							label = 25;
							break;
						}
						case 286:  {
							$$0$i$ph$i = 71;
							label = 25;
							break;
						}
						case 304: case 207: case 206: case 205: case 204:  {
							$$0$i$ph$i = 73;
							label = 25;
							break;
						}
						case 209:  {
							$$0$i$ph$i = 78;
							label = 25;
							break;
						}
						case 214: case 213: case 212: case 211: case 210:  {
							$$0$i$ph$i = 79;
							label = 25;
							break;
						}
						case 352: case 350:  {
							$$0$i$ph$i = 83;
							label = 25;
							break;
						}
						case 220: case 219: case 218: case 217:  {
							$$0$i$ph$i = 85;
							label = 25;
							break;
						}
						case 376: case 221:  {
							$$0$i$ph$i = 89;
							label = 25;
							break;
						}
						case 381:  {
							$$0$i$ph$i = 90;
							label = 25;
							break;
						}
						case 229: case 228: case 227: case 226: case 225: case 224:  {
							$$0$i$ph$i = 97;
							label = 25;
							break;
						}
						case 231:  {
							$$0$i$ph$i = 99;
							label = 25;
							break;
						}
						case 235: case 234: case 233: case 232:  {
							$$0$i$ph$i = 101;
							label = 25;
							break;
						}
						case 287:  {
							$$0$i$ph$i = 103;
							label = 25;
							break;
						}
						case 305: case 239: case 238: case 237: case 236:  {
							$$0$i$ph$i = 105;
							label = 25;
							break;
						}
						case 241:  {
							$$0$i$ph$i = 110;
							label = 25;
							break;
						}
						case 246: case 245: case 244: case 243: case 242:  {
							$$0$i$ph$i = 111;
							label = 25;
							break;
						}
						case 353: case 351:  {
							$$0$i$ph$i = 115;
							label = 25;
							break;
						}
						case 252: case 251: case 250: case 249:  {
							$$0$i$ph$i = 117;
							label = 25;
							break;
						}
						case 255: case 253:  {
							$$0$i$ph$i = 121;
							label = 25;
							break;
						}
						case 382:  {
							$$0$i$ph$i = 122;
							label = 25;
							break;
						}
						default: {
							$$old = (($code) + -48)|0;
							$$old2 = ($$old>>>0)<(10);
							if ($$old2) {
								$$0 = 1;
								return ($$0|0);
							}
						}
					}
				} while(0);
				if ((label|0) == 25) {
					$3 = (_isupper($$0$i$ph$i)|0);
					$4 = ($3|0)!=(0);
					$code$off$i = (($code) + -48)|0;
					$5 = ($code$off$i>>>0)<(10);
					$or$cond = $5 | $4;
					if ($or$cond) {
						$$0 = 1;
						return ($$0|0);
					}
				}
				$switch$cast = (($code) + -98)|0;
				$6 = ($switch$cast>>>0)<(27);
				if ($6) {
					$switch$cast$clear = $switch$cast & 134217727;
					$switch$downshift = 75810805 >>> $switch$cast$clear;
					$7 = $switch$downshift & 1;
					$$clear = $7 & 134217727;
					$switch$masked = ($$clear|0)!=(0);
					return ($switch$masked|0);
				} else {
					$$0 = 0;
					return ($$0|0);
				}
				return (0)|0;
			}
			function __ZN3UCS7isupperEi($code) {
				$code = $code|0;
				var $$0 = 0, $$0$i$ph = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_isupper($code)|0);
					$2 = ($1|0)==(0);
					if ($2) {
						label = 3;
					} else {
						$$0 = 1;
					}
				} else {
					label = 3;
				}
				L3: do {
					if ((label|0) == 3) {
						do {
							switch ($code|0) {
								case 197: case 196: case 195: case 194: case 193: case 192:  {
									$$0$i$ph = 65;
									break;
								}
								case 199:  {
									$$0$i$ph = 67;
									break;
								}
								case 203: case 202: case 201: case 200:  {
									$$0$i$ph = 69;
									break;
								}
								case 286:  {
									$$0$i$ph = 71;
									break;
								}
								case 304: case 207: case 206: case 205: case 204:  {
									$$0$i$ph = 73;
									break;
								}
								case 209:  {
									$$0$i$ph = 78;
									break;
								}
								case 214: case 213: case 212: case 211: case 210:  {
									$$0$i$ph = 79;
									break;
								}
								case 352: case 350:  {
									$$0$i$ph = 83;
									break;
								}
								case 220: case 219: case 218: case 217:  {
									$$0$i$ph = 85;
									break;
								}
								case 376: case 221:  {
									$$0$i$ph = 89;
									break;
								}
								case 381:  {
									$$0$i$ph = 90;
									break;
								}
								case 229: case 228: case 227: case 226: case 225: case 224:  {
									$$0$i$ph = 97;
									break;
								}
								case 231:  {
									$$0$i$ph = 99;
									break;
								}
								case 235: case 234: case 233: case 232:  {
									$$0$i$ph = 101;
									break;
								}
								case 287:  {
									$$0$i$ph = 103;
									break;
								}
								case 305: case 239: case 238: case 237: case 236:  {
									$$0$i$ph = 105;
									break;
								}
								case 241:  {
									$$0$i$ph = 110;
									break;
								}
								case 246: case 245: case 244: case 243: case 242:  {
									$$0$i$ph = 111;
									break;
								}
								case 353: case 351:  {
									$$0$i$ph = 115;
									break;
								}
								case 252: case 251: case 250: case 249:  {
									$$0$i$ph = 117;
									break;
								}
								case 255: case 253:  {
									$$0$i$ph = 121;
									break;
								}
								case 382:  {
									$$0$i$ph = 122;
									break;
								}
								default: {
									$$0 = 0;
									break L3;
								}
							}
						} while(0);
						$3 = (_isupper($$0$i$ph)|0);
						$4 = ($3|0)!=(0);
						$$0 = $4;
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN3UCS7islowerEi($code) {
				$code = $code|0;
				var $$0 = 0, $$0$i$ph = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_islower($code)|0);
					$2 = ($1|0)==(0);
					if ($2) {
						label = 3;
					} else {
						$$0 = 1;
					}
				} else {
					label = 3;
				}
				L3: do {
					if ((label|0) == 3) {
						do {
							switch ($code|0) {
								case 197: case 196: case 195: case 194: case 193: case 192:  {
									$$0$i$ph = 65;
									break;
								}
								case 199:  {
									$$0$i$ph = 67;
									break;
								}
								case 203: case 202: case 201: case 200:  {
									$$0$i$ph = 69;
									break;
								}
								case 286:  {
									$$0$i$ph = 71;
									break;
								}
								case 304: case 207: case 206: case 205: case 204:  {
									$$0$i$ph = 73;
									break;
								}
								case 209:  {
									$$0$i$ph = 78;
									break;
								}
								case 214: case 213: case 212: case 211: case 210:  {
									$$0$i$ph = 79;
									break;
								}
								case 352: case 350:  {
									$$0$i$ph = 83;
									break;
								}
								case 220: case 219: case 218: case 217:  {
									$$0$i$ph = 85;
									break;
								}
								case 376: case 221:  {
									$$0$i$ph = 89;
									break;
								}
								case 381:  {
									$$0$i$ph = 90;
									break;
								}
								case 229: case 228: case 227: case 226: case 225: case 224:  {
									$$0$i$ph = 97;
									break;
								}
								case 231:  {
									$$0$i$ph = 99;
									break;
								}
								case 235: case 234: case 233: case 232:  {
									$$0$i$ph = 101;
									break;
								}
								case 287:  {
									$$0$i$ph = 103;
									break;
								}
								case 305: case 239: case 238: case 237: case 236:  {
									$$0$i$ph = 105;
									break;
								}
								case 241:  {
									$$0$i$ph = 110;
									break;
								}
								case 246: case 245: case 244: case 243: case 242:  {
									$$0$i$ph = 111;
									break;
								}
								case 353: case 351:  {
									$$0$i$ph = 115;
									break;
								}
								case 252: case 251: case 250: case 249:  {
									$$0$i$ph = 117;
									break;
								}
								case 255: case 253:  {
									$$0$i$ph = 121;
									break;
								}
								case 382:  {
									$$0$i$ph = 122;
									break;
								}
								default: {
									$$0 = 0;
									break L3;
								}
							}
						} while(0);
						$3 = (_islower($$0$i$ph)|0);
						$4 = ($3|0)!=(0);
						$$0 = $4;
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN3UCS17islower_ambiguousEi($code) {
				$code = $code|0;
				var $$0 = 0, $$clear = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$cast$i = 0, $switch$cast$i$clear = 0, $switch$downshift$i = 0, $switch$masked$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(127);
				if (!($0)) {
					$1 = (_islower($code)|0);
					$2 = ($1|0)==(0);
					if (!($2)) {
						$switch$cast$i = (($code) + -99)|0;
						$3 = ($switch$cast$i>>>0)<(24);
						if ($3) {
							$switch$cast$i$clear = $switch$cast$i & 16777215;
							$switch$downshift$i = 12390401 >>> $switch$cast$i$clear;
							$4 = $switch$downshift$i & 1;
							$$clear = $4 & 16777215;
							$switch$masked$i = ($$clear|0)==(0);
							if (!($switch$masked$i)) {
								$$0 = 1;
								return ($$0|0);
							}
						}
					}
				}
				switch ($code|0) {
					case 382: case 353: case 351: case 252: case 251: case 250: case 249: case 246: case 245: case 244: case 243: case 242: case 239: case 238: case 237: case 236: case 231: case 112: case 107:  {
						$$0 = 1;
						return ($$0|0);
						break;
					}
					default: {
					}
				}
				$$0 = 0;
				return ($$0|0);
			}
			function __ZN3UCS23islower_small_ambiguousEi($code) {
				$code = $code|0;
				var $$clear = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(127);
				if ($0) {
					return 0;
				}
				$1 = (_islower($code)|0);
				$2 = ($1|0)==(0);
				if ($2) {
					return 0;
				}
				$switch$cast = (($code) + -99)|0;
				$3 = ($switch$cast>>>0)<(24);
				if ($3) {
					$switch$cast$clear = $switch$cast & 16777215;
					$switch$downshift = 12390401 >>> $switch$cast$clear;
					$4 = $switch$downshift & 1;
					$$clear = $4 & 16777215;
					$switch$masked = ($$clear|0)!=(0);
					return ($switch$masked|0);
				} else {
					return 0;
				}
				return (0)|0;
			}
			function __ZN3UCS13islower_smallEi($code) {
				$code = $code|0;
				var $$clear = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(127);
				if ($0) {
					return 0;
				}
				$1 = (_islower($code)|0);
				$2 = ($1|0)==(0);
				if ($2) {
					return 0;
				}
				$switch$cast = (($code) + -97)|0;
				$3 = ($switch$cast>>>0)<(26);
				if ($3) {
					$switch$cast$clear = $switch$cast & 67108863;
					$switch$downshift = 49704981 >>> $switch$cast$clear;
					$4 = $switch$downshift & 1;
					$$clear = $4 & 67108863;
					$switch$masked = ($$clear|0)!=(0);
					return ($switch$masked|0);
				} else {
					return 0;
				}
				return (0)|0;
			}
			function __ZN3UCS7isspaceEi($code) {
				$code = $code|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				if ($0) {
					$1 = (_isspace($code)|0);
					$2 = ($1|0)==(0);
					if (!($2)) {
						$4 = 1;
						return ($4|0);
					}
				}
				$3 = ($code|0)==(160);
				$4 = $3;
				return ($4|0);
			}
			function __ZN3UCS20isupper_normal_widthEi($code) {
				$code = $code|0;
				var $$0 = 0, $$clear = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(127);
				if ($0) {
					$$0 = 0;
					return ($$0|0);
				}
				$1 = (_isupper($code)|0);
				$2 = ($1|0)==(0);
				if ($2) {
					$$0 = 0;
					return ($$0|0);
				}
				$switch$tableidx = (($code) + -73)|0;
				$3 = ($switch$tableidx>>>0)<(15);
				if ($3) {
					$switch$cast = $switch$tableidx&65535;
					$switch$cast$clear = $switch$cast & 32767;
					$switch$downshift = (16100&65535) >>> $switch$cast$clear;
					$4 = $switch$downshift & 1;
					$$clear = $4 & 32767;
					$switch$masked = ($$clear<<16>>16)!=(0);
					return ($switch$masked|0);
				} else {
					$$0 = 1;
					return ($$0|0);
				}
				return (0)|0;
			}
			function __ZN3UCS7isvowelEi($code) {
				$code = $code|0;
				var $$ = 0, $$06 = 0, $$07 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(127);
				L1: do {
					if ($0) {
						do {
							switch ($code|0) {
								case 197: case 196: case 195: case 194: case 193: case 192:  {
									$$07 = 65;
									break L1;
									break;
								}
								case 199:  {
									$$07 = 67;
									break L1;
									break;
								}
								case 203: case 202: case 201: case 200:  {
									$$07 = 69;
									break L1;
									break;
								}
								case 286:  {
									$$07 = 71;
									break L1;
									break;
								}
								case 304: case 207: case 206: case 205: case 204:  {
									$$07 = 73;
									break L1;
									break;
								}
								case 209:  {
									$$07 = 78;
									break L1;
									break;
								}
								case 214: case 213: case 212: case 211: case 210:  {
									$$07 = 79;
									break L1;
									break;
								}
								case 352: case 350:  {
									$$07 = 83;
									break L1;
									break;
								}
								case 220: case 219: case 218: case 217:  {
									$$07 = 85;
									break L1;
									break;
								}
								case 376: case 221:  {
									$$07 = 89;
									break L1;
									break;
								}
								case 381:  {
									$$07 = 90;
									break L1;
									break;
								}
								case 229: case 228: case 227: case 226: case 225: case 224:  {
									$$07 = 97;
									break L1;
									break;
								}
								case 231:  {
									$$07 = 99;
									break L1;
									break;
								}
								case 235: case 234: case 233: case 232:  {
									$$07 = 101;
									break L1;
									break;
								}
								case 287:  {
									$$07 = 103;
									break L1;
									break;
								}
								case 305: case 239: case 238: case 237: case 236:  {
									$$07 = 105;
									break L1;
									break;
								}
								case 241:  {
									$$07 = 110;
									break L1;
									break;
								}
								case 246: case 245: case 244: case 243: case 242:  {
									$$07 = 111;
									break L1;
									break;
								}
								case 353: case 351:  {
									$$07 = 115;
									break L1;
									break;
								}
								case 252: case 251: case 250: case 249:  {
									$$07 = 117;
									break L1;
									break;
								}
								case 255: case 253:  {
									$$07 = 121;
									break L1;
									break;
								}
								case 382:  {
									$$07 = 122;
									break L1;
									break;
								}
								default: {
									$$06 = 0;
									return ($$06|0);
								}
							}
						} while(0);
					} else {
						$1 = ($code|0)==(0);
						if ($1) {
							$$06 = 0;
							return ($$06|0);
						} else {
							$$07 = $code;
						}
					}
				} while(0);
				$2 = (_isalpha($$07)|0);
				$3 = ($2|0)==(0);
				if ($3) {
					$$06 = 0;
					return ($$06|0);
				}
				$4 = (_tolower($$07)|0);
				$5 = $4 | 4;
				$6 = ($5|0)==(101);
				$7 = ($4|0)==(105);
				$or$cond3 = $7 | $6;
				$8 = ($4|0)==(111);
				$or$cond5 = $8 | $or$cond3;
				$9 = ($4|0)==(117);
				$$ = $9 | $or$cond5;
				$$06 = $$;
				return ($$06|0);
			}
			function __ZN3UCS11map_to_byteEi($code) {
				$code = $code|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(0);
				L1: do {
					if ($0) {
						$$0 = 0;
					} else {
						$1 = ($code|0)<(256);
						if ($1) {
							$2 = $code&255;
							$$0 = $2;
							break;
						}
						do {
							switch ($code|0) {
								case 286:  {
									$$0 = -48;
									break L1;
									break;
								}
								case 287:  {
									$$0 = -16;
									break L1;
									break;
								}
								case 304:  {
									$$0 = -35;
									break L1;
									break;
								}
								case 305:  {
									$$0 = -3;
									break L1;
									break;
								}
								case 350:  {
									$$0 = -34;
									break L1;
									break;
								}
								case 351:  {
									$$0 = -2;
									break L1;
									break;
								}
								case 352:  {
									$$0 = -90;
									break L1;
									break;
								}
								case 353:  {
									$$0 = -88;
									break L1;
									break;
								}
								case 376:  {
									$$0 = -66;
									break L1;
									break;
								}
								case 381:  {
									$$0 = -76;
									break L1;
									break;
								}
								case 382:  {
									$$0 = -72;
									break L1;
									break;
								}
								case 8364:  {
									$$0 = -92;
									break L1;
									break;
								}
								default: {
									$$0 = 0;
									break L1;
								}
							}
						} while(0);
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN3UCS11ucs_to_utf8Ei($code) {
				$code = $code|0;
				var $$ = 0, $$2 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, $d$04 = 0, $i$0 = 0, $i$15 = 0, $i$15$in = 0, $mask$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(0);
				if ($0) {
					HEAP8[7361] = 0;
					return (7361|0);
				}
				$1 = ($code|0)<(128);
				if ($1) {
					$2 = $code&255;
					HEAP8[7361] = $2;
					HEAP8[(7362)>>0] = 0;
					return (7361|0);
				}
				$3 = ($code|0)<(2048);
				if ($3) {
					$i$0 = 2;$mask$0 = 192;
				} else {
					$4 = ($code|0)<(65536);
					if ($4) {
						$i$0 = 3;$mask$0 = 224;
					} else {
						$5 = ($code|0)<(2097152);
						if ($5) {
							$i$0 = 4;$mask$0 = 240;
						} else {
							$6 = ($code|0)<(67108864);
							$$ = $6 ? 5 : 6;
							$$2 = $6 ? 248 : 252;
							$i$0 = $$;$mask$0 = $$2;
						}
					}
				}
				$7 = (7361 + ($i$0)|0);
				HEAP8[$7>>0] = 0;
				$9 = $code;$d$04 = 0;$i$15$in = $i$0;
				while(1) {
					$i$15 = (($i$15$in) + -1)|0;
					$8 = $9 & 63;
					$10 = $8 | 128;
					$11 = $10&255;
					$12 = (7361 + ($i$15)|0);
					HEAP8[$12>>0] = $11;
					$13 = (($d$04) + 6)|0;
					$14 = ($i$15|0)>(1);
					$15 = $code >> $13;
					if ($14) {
						$9 = $15;$d$04 = $13;$i$15$in = $i$15;
					} else {
						$$lcssa = $15;
						break;
					}
				}
				$16 = $$lcssa | $mask$0;
				$17 = $16&255;
				HEAP8[7361] = $17;
				return (7361|0);
			}
			function __ZN3UCS16to_nearest_digitEi($code) {
				$code = $code|0;
				var $$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				switch ($code|0) {
					case 111: case 81: case 79: case 68:  {
						$$0 = 48;
						break;
					}
					case 305: case 124: case 108: case 76: case 73:  {
						$$0 = 49;
						break;
					}
					case 122: case 90:  {
						$$0 = 50;
						break;
					}
					case 113: case 65:  {
						$$0 = 52;
						break;
					}
					case 115: case 83:  {
						$$0 = 53;
						break;
					}
					case 243: case 98: case 71:  {
						$$0 = 54;
						break;
					}
					case 84: case 74:  {
						$$0 = 55;
						break;
					}
					case 66: case 38:  {
						$$0 = 56;
						break;
					}
					case 103:  {
						$$0 = 57;
						break;
					}
					default: {
						$$0 = $code;
					}
				}
				return ($$0|0);
			}
			function __ZN3UCS17to_nearest_letterEi($code) {
				$code = $code|0;
				var $$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				switch ($code|0) {
					case 48:  {
						$$0 = 79;
						break;
					}
					case 49:  {
						$$0 = 108;
						break;
					}
					case 50:  {
						$$0 = 90;
						break;
					}
					case 52:  {
						$$0 = 113;
						break;
					}
					case 53:  {
						$$0 = 83;
						break;
					}
					case 54:  {
						$$0 = 243;
						break;
					}
					case 55:  {
						$$0 = 73;
						break;
					}
					case 56:  {
						$$0 = 66;
						break;
					}
					case 57:  {
						$$0 = 103;
						break;
					}
					default: {
						$$0 = $code;
					}
				}
				return ($$0|0);
			}
			function __ZN3UCS20to_nearest_upper_numEi($code) {
				$code = $code|0;
				var $$0 = 0, $$clear = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $switch$cast$i$i = 0, $switch$cast$i$i$clear = 0, $switch$downshift$i$i = 0, $switch$masked$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				L1: do {
					switch ($code|0) {
						case 91: case 40:  {
							$$0 = 67;
							break;
						}
						case 124: case 108:  {
							$$0 = 73;
							break;
						}
						case 176:  {
							$$0 = 79;
							break;
						}
						case 181:  {
							$$0 = 85;
							break;
						}
						case 305: case 185:  {
							$$0 = 49;
							break;
						}
						case 178:  {
							$$0 = 50;
							break;
						}
						case 179:  {
							$$0 = 51;
							break;
						}
						case 113:  {
							$$0 = 52;
							break;
						}
						case 243: case 98:  {
							$$0 = 54;
							break;
						}
						case 38:  {
							$$0 = 56;
							break;
						}
						case 186: case 103:  {
							$$0 = 57;
							break;
						}
						default: {
							$0 = ($code|0)>(127);
							if ($0) {
								label = 16;
							} else {
								$1 = (_islower($code)|0);
								$2 = ($1|0)==(0);
								if ($2) {
									label = 16;
								} else {
									$switch$cast$i$i = (($code) + -99)|0;
									$3 = ($switch$cast$i$i>>>0)<(24);
									if ($3) {
										$switch$cast$i$i$clear = $switch$cast$i$i & 16777215;
										$switch$downshift$i$i = 12390401 >>> $switch$cast$i$i$clear;
										$4 = $switch$downshift$i$i & 1;
										$$clear = $4 & 16777215;
										$switch$masked$i$i = ($$clear|0)==(0);
										if ($switch$masked$i$i) {
											label = 16;
										}
									} else {
										label = 16;
									}
								}
							}
							if ((label|0) == 16) {
								switch ($code|0) {
									case 382: case 353: case 351: case 252: case 251: case 250: case 249: case 246: case 245: case 244: case 243: case 242: case 239: case 238: case 237: case 236: case 231: case 112: case 107:  {
										break;
									}
									default: {
										$$0 = $code;
										break L1;
									}
								}
								$5 = ($code|0)<(128);
								if (!($5)) {
									do {
										switch ($code|0) {
											case 224:  {
												$$0 = 192;
												break L1;
												break;
											}
											case 225:  {
												$$0 = 193;
												break L1;
												break;
											}
											case 226:  {
												$$0 = 194;
												break L1;
												break;
											}
											case 227:  {
												$$0 = 195;
												break L1;
												break;
											}
											case 228:  {
												$$0 = 196;
												break L1;
												break;
											}
											case 229:  {
												$$0 = 197;
												break L1;
												break;
											}
											case 231:  {
												$$0 = 199;
												break L1;
												break;
											}
											case 232:  {
												$$0 = 200;
												break L1;
												break;
											}
											case 233:  {
												$$0 = 201;
												break L1;
												break;
											}
											case 234:  {
												$$0 = 202;
												break L1;
												break;
											}
											case 235:  {
												$$0 = 203;
												break L1;
												break;
											}
											case 287:  {
												$$0 = 286;
												break L1;
												break;
											}
											case 236:  {
												$$0 = 204;
												break L1;
												break;
											}
											case 237:  {
												$$0 = 205;
												break L1;
												break;
											}
											case 238:  {
												$$0 = 206;
												break L1;
												break;
											}
											case 239:  {
												$$0 = 207;
												break L1;
												break;
											}
											case 241:  {
												$$0 = 209;
												break L1;
												break;
											}
											case 242:  {
												$$0 = 210;
												break L1;
												break;
											}
											case 243:  {
												$$0 = 211;
												break L1;
												break;
											}
											case 244:  {
												$$0 = 212;
												break L1;
												break;
											}
											case 245:  {
												$$0 = 213;
												break L1;
												break;
											}
											case 246:  {
												$$0 = 214;
												break L1;
												break;
											}
											case 351:  {
												$$0 = 350;
												break L1;
												break;
											}
											case 353:  {
												$$0 = 352;
												break L1;
												break;
											}
											case 249:  {
												$$0 = 217;
												break L1;
												break;
											}
											case 250:  {
												$$0 = 218;
												break L1;
												break;
											}
											case 251:  {
												$$0 = 219;
												break L1;
												break;
											}
											case 252:  {
												$$0 = 220;
												break L1;
												break;
											}
											case 253:  {
												$$0 = 221;
												break L1;
												break;
											}
											case 255:  {
												$$0 = 376;
												break L1;
												break;
											}
											case 382:  {
												$$0 = 381;
												break L1;
												break;
											}
											default: {
												$$0 = $code;
												break L1;
											}
										}
									} while(0);
								}
							}
							$6 = (_toupper($code)|0);
							$$0 = $6;
						}
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN3UCS7toupperEi($code) {
				$code = $code|0;
				var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)<(128);
				L1: do {
					if ($0) {
						$1 = (_toupper($code)|0);
						$$0 = $1;
					} else {
						do {
							switch ($code|0) {
								case 224:  {
									$$0 = 192;
									break L1;
									break;
								}
								case 225:  {
									$$0 = 193;
									break L1;
									break;
								}
								case 226:  {
									$$0 = 194;
									break L1;
									break;
								}
								case 227:  {
									$$0 = 195;
									break L1;
									break;
								}
								case 228:  {
									$$0 = 196;
									break L1;
									break;
								}
								case 229:  {
									$$0 = 197;
									break L1;
									break;
								}
								case 231:  {
									$$0 = 199;
									break L1;
									break;
								}
								case 232:  {
									$$0 = 200;
									break L1;
									break;
								}
								case 233:  {
									$$0 = 201;
									break L1;
									break;
								}
								case 234:  {
									$$0 = 202;
									break L1;
									break;
								}
								case 235:  {
									$$0 = 203;
									break L1;
									break;
								}
								case 287:  {
									$$0 = 286;
									break L1;
									break;
								}
								case 236:  {
									$$0 = 204;
									break L1;
									break;
								}
								case 237:  {
									$$0 = 205;
									break L1;
									break;
								}
								case 238:  {
									$$0 = 206;
									break L1;
									break;
								}
								case 239:  {
									$$0 = 207;
									break L1;
									break;
								}
								case 241:  {
									$$0 = 209;
									break L1;
									break;
								}
								case 242:  {
									$$0 = 210;
									break L1;
									break;
								}
								case 243:  {
									$$0 = 211;
									break L1;
									break;
								}
								case 244:  {
									$$0 = 212;
									break L1;
									break;
								}
								case 245:  {
									$$0 = 213;
									break L1;
									break;
								}
								case 246:  {
									$$0 = 214;
									break L1;
									break;
								}
								case 351:  {
									$$0 = 350;
									break L1;
									break;
								}
								case 353:  {
									$$0 = 352;
									break L1;
									break;
								}
								case 249:  {
									$$0 = 217;
									break L1;
									break;
								}
								case 250:  {
									$$0 = 218;
									break L1;
									break;
								}
								case 251:  {
									$$0 = 219;
									break L1;
									break;
								}
								case 252:  {
									$$0 = 220;
									break L1;
									break;
								}
								case 253:  {
									$$0 = 221;
									break L1;
									break;
								}
								case 255:  {
									$$0 = 376;
									break L1;
									break;
								}
								case 382:  {
									$$0 = 381;
									break L1;
									break;
								}
								default: {
									$$0 = $code;
									break L1;
								}
							}
						} while(0);
					}
				} while(0);
				return ($$0|0);
			}
			function __ZN9CharacterC2ERKS_($this,$c) {
				$this = $this|0;
				$c = $c|0;
				var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $scevgep$i$i$i = 0;
				var $scevgep$i$i$i3 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				;HEAP32[$this>>2]=HEAP32[$c>>2]|0;HEAP32[$this+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$c+12>>2]|0;
				$0 = ((($this)) + 16|0);
				$1 = ((($c)) + 16|0);
				__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEEC2ERKS5_($0,$1);
				$2 = ((($this)) + 28|0);
				$3 = ((($c)) + 28|0);
				__THREW__ = 0;
				invoke_vii(173,($2|0),($3|0));
				$4 = __THREW__; __THREW__ = 0;
				$5 = $4&1;
				if ($5) {
					$10 = ___cxa_find_matching_catch_2()|0;
					$11 = tempRet0;
					$$1 = $11;$$12 = $10;$$pre$phiZ2D = $0;
				} else {
					$6 = ((($this)) + 20|0);
					$7 = HEAP32[$6>>2]|0;
					$8 = HEAP32[$0>>2]|0;
					$9 = ($7|0)==($8|0);
					if ($9) {
						return;
					}
					$i$06 = 0;
					while(1) {
						__THREW__ = 0;
						$12 = (invoke_ii(29,40)|0);
						$13 = __THREW__; __THREW__ = 0;
						$14 = $13&1;
						if ($14) {
							label = 9;
							break;
						}
						$15 = HEAP32[$1>>2]|0;
						$16 = (($15) + ($i$06<<2)|0);
						$17 = HEAP32[$16>>2]|0;
						__THREW__ = 0;
						invoke_vii(159,($12|0),($17|0));
						$18 = __THREW__; __THREW__ = 0;
						$19 = $18&1;
						if ($19) {
							$$lcssa = $12;
							label = 10;
							break;
						}
						$20 = HEAP32[$0>>2]|0;
						$21 = (($20) + ($i$06<<2)|0);
						HEAP32[$21>>2] = $12;
						$22 = (($i$06) + 1)|0;
						$23 = HEAP32[$6>>2]|0;
						$24 = HEAP32[$0>>2]|0;
						$25 = (($23) - ($24))|0;
						$26 = $25 >> 2;
						$27 = ($22>>>0)<($26>>>0);
						if ($27) {
							$i$06 = $22;
						} else {
							label = 4;
							break;
						}
					}
					if ((label|0) == 4) {
						return;
					}
					else if ((label|0) == 9) {
						$28 = ___cxa_find_matching_catch_2()|0;
						$29 = tempRet0;
						$$0 = $29;$$01 = $28;
					}
					else if ((label|0) == 10) {
						$30 = ___cxa_find_matching_catch_2()|0;
						$31 = tempRet0;
						__ZdlPv($$lcssa);
						$$0 = $31;$$01 = $30;
					}
					$32 = HEAP32[$2>>2]|0;
					$33 = ($32|0)==(0|0);
					$34 = $32;
					if ($33) {
						$$1 = $$0;$$12 = $$01;$$pre$phiZ2D = $0;
					} else {
						$35 = ((($this)) + 32|0);
						$36 = HEAP32[$35>>2]|0;
						$37 = ($36|0)==($32|0);
						if (!($37)) {
							$scevgep$i$i$i3 = ((($36)) + -8|0);
							$38 = $scevgep$i$i$i3;
							$39 = (($38) - ($34))|0;
							$40 = $39 >>> 3;
							$41 = $40 ^ -1;
							$scevgep4$i$i$i4 = (($36) + ($41<<3)|0);
							HEAP32[$35>>2] = $scevgep4$i$i$i4;
						}
						__ZdlPv($32);
						$$1 = $$0;$$12 = $$01;$$pre$phiZ2D = $0;
					}
				}
				$42 = HEAP32[$$pre$phiZ2D>>2]|0;
				$43 = ($42|0)==(0|0);
				$44 = $42;
				if ($43) {
					___resumeException($$12|0);
					// unreachable;
				}
				$45 = ((($this)) + 20|0);
				$46 = HEAP32[$45>>2]|0;
				$47 = ($46|0)==($42|0);
				if (!($47)) {
					$scevgep$i$i$i = ((($46)) + -4|0);
					$48 = $scevgep$i$i$i;
					$49 = (($48) - ($44))|0;
					$50 = $49 >>> 2;
					$51 = $50 ^ -1;
					$scevgep4$i$i$i = (($46) + ($51<<2)|0);
					HEAP32[$45>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($42);
				___resumeException($$12|0);
				// unreachable;
			}
			function __ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = 0;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($this)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($__x)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$__x>>2]|0;
				$5 = (($3) - ($4))|0;
				$6 = $5 >> 3;
				$7 = ($6|0)==(0);
				if ($7) {
					return;
				}
				$8 = ($6>>>0)>(536870911);
				if ($8) {
					__THREW__ = 0;
					invoke_vi(46,($this|0));
					$9 = __THREW__; __THREW__ = 0;
					$10 = $9&1;
					if (!($10)) {
						label = 4;
					}
				} else {
					label = 4;
				}
				if ((label|0) == 4) {
					__THREW__ = 0;
					$11 = (invoke_ii(29,($5|0))|0);
					$12 = __THREW__; __THREW__ = 0;
					$13 = $12&1;
					if (!($13)) {
						HEAP32[$0>>2] = $11;
						HEAP32[$this>>2] = $11;
						$14 = (($11) + ($6<<3)|0);
						$15 = ((($this)) + 8|0);
						HEAP32[$15>>2] = $14;
						$16 = HEAP32[$__x>>2]|0;
						$17 = HEAP32[$2>>2]|0;
						$18 = ($16|0)==($17|0);
						if ($18) {
							return;
						}
						$$01$i = $16;$25 = $11;
						while(1) {
							$19 = $$01$i;
							$20 = $19;
							$21 = HEAP32[$20>>2]|0;
							$22 = (($19) + 4)|0;
							$23 = $22;
							$24 = HEAP32[$23>>2]|0;
							$26 = $25;
							$27 = $26;
							HEAP32[$27>>2] = $21;
							$28 = (($26) + 4)|0;
							$29 = $28;
							HEAP32[$29>>2] = $24;
							$30 = HEAP32[$0>>2]|0;
							$31 = ((($30)) + 8|0);
							HEAP32[$0>>2] = $31;
							$32 = ((($$01$i)) + 8|0);
							$33 = ($32|0)==($17|0);
							if ($33) {
								break;
							} else {
								$$01$i = $32;$25 = $31;
							}
						}
						return;
					}
				}
				$34 = ___cxa_find_matching_catch_2()|0;
				$35 = tempRet0;
				$36 = HEAP32[$this>>2]|0;
				$37 = ($36|0)==(0|0);
				$38 = $36;
				if ($37) {
					___resumeException($34|0);
					// unreachable;
				}
				$39 = HEAP32[$0>>2]|0;
				$40 = ($39|0)==($36|0);
				if (!($40)) {
					$scevgep$i$i$i = ((($39)) + -8|0);
					$41 = $scevgep$i$i$i;
					$42 = (($41) - ($38))|0;
					$43 = $42 >>> 3;
					$44 = $43 ^ -1;
					$scevgep4$i$i$i = (($39) + ($44<<3)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($36);
				___resumeException($34|0);
				// unreachable;
			}
			function __ZN9CharacteraSERKS_($this,$c) {
				$this = $this|0;
				$c = $c|0;
				var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa32 = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
				var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
				var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$010 = 0, $i1$09 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($this|0)==($c|0);
				if ($0) {
					return ($this|0);
				}
				;HEAP32[$this>>2]=HEAP32[$c>>2]|0;HEAP32[$this+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$c+8>>2]|0;HEAP32[$this+12>>2]=HEAP32[$c+12>>2]|0;
				$1 = ((($this)) + 16|0);
				$2 = ((($this)) + 20|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$1>>2]|0;
				$5 = ($3|0)==($4|0);
				L4: do {
					if (!($5)) {
						$11 = $4;$47 = $3;$i$010 = 0;
						while(1) {
							$12 = $11;
							$13 = (($12) + ($i$010<<2)|0);
							$14 = HEAP32[$13>>2]|0;
							$15 = ($14|0)==(0|0);
							if ($15) {
								$20 = $11;$21 = $47;
							} else {
								__THREW__ = 0;
								invoke_vi(72,($14|0));
								$16 = __THREW__; __THREW__ = 0;
								$17 = $16&1;
								if ($17) {
									$$lcssa32 = $14;
									break;
								}
								__ZdlPv($14);
								$$pre = HEAP32[$2>>2]|0;
								$$pre17 = HEAP32[$1>>2]|0;
								$20 = $$pre17;$21 = $$pre;
							}
							$18 = (($i$010) + 1)|0;
							$19 = (($21) - ($20))|0;
							$22 = $19 >> 2;
							$23 = ($18>>>0)<($22>>>0);
							if ($23) {
								$11 = $20;$47 = $21;$i$010 = $18;
							} else {
								break L4;
							}
						}
						$24 = ___cxa_find_matching_catch_2()|0;
						$25 = tempRet0;
						__ZdlPv($$lcssa32);
						$$0 = $25;$$01 = $24;
						___resumeException($$01|0);
						// unreachable;
					}
				} while(0);
				$6 = ((($c)) + 16|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($c)) + 20|0);
				$9 = HEAP32[$8>>2]|0;
				__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($1,$7,$9);
				$$pre18 = HEAP32[$2>>2]|0;
				$$pre19 = HEAP32[$1>>2]|0;
				$10 = ($$pre18|0)==($$pre19|0);
				L14: do {
					if (!($10)) {
						$i1$09 = 0;
						while(1) {
							$31 = (__Znwj(40)|0);
							$32 = HEAP32[$6>>2]|0;
							$33 = (($32) + ($i1$09<<2)|0);
							$34 = HEAP32[$33>>2]|0;
							__THREW__ = 0;
							invoke_vii(159,($31|0),($34|0));
							$35 = __THREW__; __THREW__ = 0;
							$36 = $35&1;
							if ($36) {
								$$lcssa = $31;
								break;
							}
							$37 = HEAP32[$1>>2]|0;
							$38 = (($37) + ($i1$09<<2)|0);
							HEAP32[$38>>2] = $31;
							$39 = (($i1$09) + 1)|0;
							$40 = HEAP32[$2>>2]|0;
							$41 = HEAP32[$1>>2]|0;
							$42 = (($40) - ($41))|0;
							$43 = $42 >> 2;
							$44 = ($39>>>0)<($43>>>0);
							if ($44) {
								$i1$09 = $39;
							} else {
								break L14;
							}
						}
						$45 = ___cxa_find_matching_catch_2()|0;
						$46 = tempRet0;
						__ZdlPv($$lcssa);
						$$0 = $46;$$01 = $45;
						___resumeException($$01|0);
						// unreachable;
					}
				} while(0);
				$26 = ((($this)) + 28|0);
				$27 = ((($c)) + 28|0);
				$28 = HEAP32[$27>>2]|0;
				$29 = ((($c)) + 32|0);
				$30 = HEAP32[$29>>2]|0;
				__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($26,$28,$30);
				return ($this|0);
			}
			function __ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
				$this = $this|0;
				$__first = $__first|0;
				$__last = $__last|0;
				var $$0$i5 = 0, $$01$i = 0, $$01$i3 = 0, $$__last = 0, $$pre = 0, $$pre$i1 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
				var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $__last;
				$1 = $__first;
				$2 = (($0) - ($1))|0;
				$3 = $2 >> 3;
				$4 = ((($this)) + 8|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = HEAP32[$this>>2]|0;
				$7 = (($5) - ($6))|0;
				$8 = $7 >> 3;
				$9 = ($3>>>0)>($8>>>0);
				$10 = $6;
				if (!($9)) {
					$11 = ((($this)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (($12) - ($6))|0;
					$14 = $13 >> 3;
					$15 = ($3>>>0)>($14>>>0);
					$16 = (($__first) + ($14<<3)|0);
					$$__last = $15 ? $16 : $__last;
					$17 = $$__last;
					$18 = (($17) - ($1))|0;
					$19 = $18 >> 3;
					$20 = $6;
					_memmove(($20|0),($__first|0),($18|0))|0;
					$21 = (($10) + ($19<<3)|0);
					if (!($15)) {
						$38 = HEAP32[$11>>2]|0;
						$39 = ($38|0)==($21|0);
						if ($39) {
							return;
						}
						$__new_last2$i$i = $21;
						$scevgep$i$i = ((($38)) + -8|0);
						$40 = $scevgep$i$i;
						$41 = (($40) - ($__new_last2$i$i))|0;
						$42 = $41 >>> 3;
						$43 = $42 ^ -1;
						$scevgep4$i$i = (($38) + ($43<<3)|0);
						HEAP32[$11>>2] = $scevgep4$i$i;
						return;
					}
					$22 = ($$__last|0)==($__last|0);
					if ($22) {
						return;
					}
					$$pre$i1 = HEAP32[$11>>2]|0;
					$$01$i3 = $16;$29 = $$pre$i1;
					while(1) {
						$23 = $$01$i3;
						$24 = $23;
						$25 = HEAP32[$24>>2]|0;
						$26 = (($23) + 4)|0;
						$27 = $26;
						$28 = HEAP32[$27>>2]|0;
						$30 = $29;
						$31 = $30;
						HEAP32[$31>>2] = $25;
						$32 = (($30) + 4)|0;
						$33 = $32;
						HEAP32[$33>>2] = $28;
						$34 = HEAP32[$11>>2]|0;
						$35 = ((($34)) + 8|0);
						HEAP32[$11>>2] = $35;
						$36 = ((($$01$i3)) + 8|0);
						$37 = ($36|0)==($__last|0);
						if ($37) {
							break;
						} else {
							$$01$i3 = $36;$29 = $35;
						}
					}
					return;
				}
				$44 = ($6|0)==(0);
				$45 = $6;
				if ($44) {
					$83 = $5;
				} else {
					$46 = ((($this)) + 4|0);
					$47 = HEAP32[$46>>2]|0;
					$48 = ($47|0)==($10|0);
					if (!($48)) {
						$scevgep$i$i$i$i = ((($47)) + -8|0);
						$49 = $scevgep$i$i$i$i;
						$50 = (($49) - ($6))|0;
						$51 = $50 >>> 3;
						$52 = $51 ^ -1;
						$scevgep4$i$i$i$i = (($47) + ($52<<3)|0);
						HEAP32[$46>>2] = $scevgep4$i$i$i$i;
					}
					__ZdlPv($45);
					HEAP32[$4>>2] = 0;
					HEAP32[$46>>2] = 0;
					HEAP32[$this>>2] = 0;
					$83 = 0;
				}
				$53 = ($3>>>0)>(536870911);
				if ($53) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$4>>2]|0;
					$$pre8 = HEAP32[$this>>2]|0;
					$55 = $$pre8;$56 = $$pre;
				} else {
					$55 = 0;$56 = $83;
				}
				$54 = (($56) - ($55))|0;
				$57 = $54 >> 3;
				$58 = ($57>>>0)<(268435455);
				if ($58) {
					$59 = $54 >> 2;
					$60 = ($59>>>0)<($3>>>0);
					$61 = $60 ? $3 : $59;
					$62 = ($61>>>0)>(536870911);
					if ($62) {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$0$i5 = $61;
					} else {
						$$0$i5 = $61;
					}
				} else {
					$$0$i5 = 536870911;
				}
				$63 = $$0$i5 << 3;
				$64 = (__Znwj($63)|0);
				$65 = ((($this)) + 4|0);
				HEAP32[$65>>2] = $64;
				HEAP32[$this>>2] = $64;
				$66 = (($64) + ($$0$i5<<3)|0);
				HEAP32[$4>>2] = $66;
				$67 = ($__first|0)==($__last|0);
				if ($67) {
					return;
				}
				$$01$i = $__first;$74 = $64;
				while(1) {
					$68 = $$01$i;
					$69 = $68;
					$70 = HEAP32[$69>>2]|0;
					$71 = (($68) + 4)|0;
					$72 = $71;
					$73 = HEAP32[$72>>2]|0;
					$75 = $74;
					$76 = $75;
					HEAP32[$76>>2] = $70;
					$77 = (($75) + 4)|0;
					$78 = $77;
					HEAP32[$78>>2] = $73;
					$79 = HEAP32[$65>>2]|0;
					$80 = ((($79)) + 8|0);
					HEAP32[$65>>2] = $80;
					$81 = ((($$01$i)) + 8|0);
					$82 = ($81|0)==($__last|0);
					if ($82) {
						break;
					} else {
						$$01$i = $81;$74 = $80;
					}
				}
				return;
			}
			function __ZN9CharacterD2Ev($this) {
				$this = $this|0;
				var $$lcssa = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $i$017 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i10 = 0, $scevgep$i$i$i2 = 0, $scevgep$i$i$i5 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i11 = 0, $scevgep4$i$i$i3 = 0, $scevgep4$i$i$i6 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				$5 = $3;
				L1: do {
					if ($4) {
						$62 = $5;
					} else {
						$18 = $5;$63 = $5;$64 = $3;$65 = $2;$i$017 = 0;
						while(1) {
							$17 = (($18) + ($i$017<<2)|0);
							$19 = HEAP32[$17>>2]|0;
							$20 = ($19|0)==(0|0);
							if ($20) {
								$26 = $64;$27 = $65;$66 = $63;
							} else {
								__THREW__ = 0;
								invoke_vi(72,($19|0));
								$21 = __THREW__; __THREW__ = 0;
								$22 = $21&1;
								if ($22) {
									$$lcssa = $19;
									break;
								}
								__ZdlPv($19);
								$$pre = HEAP32[$1>>2]|0;
								$$pre19 = HEAP32[$0>>2]|0;
								$23 = $$pre19;
								$26 = $$pre19;$27 = $$pre;$66 = $23;
							}
							$24 = (($i$017) + 1)|0;
							$25 = (($27) - ($26))|0;
							$28 = $25 >> 2;
							$29 = ($24>>>0)<($28>>>0);
							$30 = $26;
							if ($29) {
								$18 = $30;$63 = $66;$64 = $26;$65 = $27;$i$017 = $24;
							} else {
								$62 = $66;
								break L1;
							}
						}
						$31 = ___cxa_find_matching_catch_2()|0;
						$32 = tempRet0;
						__ZdlPv($$lcssa);
						$33 = ((($this)) + 28|0);
						$34 = HEAP32[$33>>2]|0;
						$35 = ($34|0)==(0|0);
						$36 = $34;
						if (!($35)) {
							$37 = ((($this)) + 32|0);
							$38 = HEAP32[$37>>2]|0;
							$39 = ($38|0)==($34|0);
							if (!($39)) {
								$scevgep$i$i$i10 = ((($38)) + -8|0);
								$40 = $scevgep$i$i$i10;
								$41 = (($40) - ($36))|0;
								$42 = $41 >>> 3;
								$43 = $42 ^ -1;
								$scevgep4$i$i$i11 = (($38) + ($43<<3)|0);
								HEAP32[$37>>2] = $scevgep4$i$i$i11;
							}
							__ZdlPv($34);
						}
						$53 = HEAP32[$0>>2]|0;
						$54 = ($53|0)==(0|0);
						$55 = $53;
						if ($54) {
							___resumeException($31|0);
							// unreachable;
						}
						$56 = HEAP32[$1>>2]|0;
						$57 = ($56|0)==($53|0);
						if (!($57)) {
							$scevgep$i$i$i = ((($56)) + -4|0);
							$58 = $scevgep$i$i$i;
							$59 = (($58) - ($55))|0;
							$60 = $59 >>> 2;
							$61 = $60 ^ -1;
							$scevgep4$i$i$i = (($56) + ($61<<2)|0);
							HEAP32[$1>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($53);
						___resumeException($31|0);
						// unreachable;
					}
				} while(0);
				$6 = ((($this)) + 28|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ($7|0)==(0|0);
				$9 = $7;
				if ($8) {
					$44 = $62;
				} else {
					$10 = ((($this)) + 32|0);
					$11 = HEAP32[$10>>2]|0;
					$12 = ($11|0)==($7|0);
					if (!($12)) {
						$scevgep$i$i$i2 = ((($11)) + -8|0);
						$13 = $scevgep$i$i$i2;
						$14 = (($13) - ($9))|0;
						$15 = $14 >>> 3;
						$16 = $15 ^ -1;
						$scevgep4$i$i$i3 = (($11) + ($16<<3)|0);
						HEAP32[$10>>2] = $scevgep4$i$i$i3;
					}
					__ZdlPv($7);
					$$pre20 = HEAP32[$0>>2]|0;
					$44 = $$pre20;
				}
				$45 = ($44|0)==(0|0);
				$46 = $44;
				if ($45) {
					return;
				}
				$47 = HEAP32[$1>>2]|0;
				$48 = ($47|0)==($44|0);
				if (!($48)) {
					$scevgep$i$i$i5 = ((($47)) + -4|0);
					$49 = $scevgep$i$i$i5;
					$50 = (($49) - ($46))|0;
					$51 = $50 >>> 2;
					$52 = $51 ^ -1;
					$scevgep4$i$i$i6 = (($47) + ($52<<2)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i6;
				}
				__ZdlPv($44);
				return;
			}
			function __ZNK9Character4blobEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 16|0);
					$2 = ((($this)) + 20|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2417);
				$$phi$trans$insert = ((($this)) + 16|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZN9Character4blobEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 16|0);
					$2 = ((($this)) + 20|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2449);
				$$phi$trans$insert = ((($this)) + 16|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZN9Character9main_blobEv($this) {
				$this = $this|0;
				var $$cast4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, $i$0$imax$0 = 0, $i$06 = 0, $imax$0$lcssa = 0, $imax$05 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(4);
				$$cast4 = $3;
				if (!($5)) {
					$imax$0$lcssa = 0;
					$7 = (($$cast4) + ($imax$0$lcssa<<2)|0);
					$8 = HEAP32[$7>>2]|0;
					return ($8|0);
				}
				$6 = $4 >> 2;
				$i$06 = 1;$imax$05 = 0;
				while(1) {
					$9 = (($$cast4) + ($i$06<<2)|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = ((($10)) + 12|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = ((($10)) + 4|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = (($12) + 1)|0;
					$16 = (($15) - ($14))|0;
					$17 = ((($10)) + 8|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = HEAP32[$10>>2]|0;
					$20 = (($18) + 1)|0;
					$21 = (($20) - ($19))|0;
					$22 = Math_imul($21, $16)|0;
					$23 = (($$cast4) + ($imax$05<<2)|0);
					$24 = HEAP32[$23>>2]|0;
					$25 = ((($24)) + 12|0);
					$26 = HEAP32[$25>>2]|0;
					$27 = ((($24)) + 4|0);
					$28 = HEAP32[$27>>2]|0;
					$29 = (($26) + 1)|0;
					$30 = (($29) - ($28))|0;
					$31 = ((($24)) + 8|0);
					$32 = HEAP32[$31>>2]|0;
					$33 = HEAP32[$24>>2]|0;
					$34 = (($32) + 1)|0;
					$35 = (($34) - ($33))|0;
					$36 = Math_imul($35, $30)|0;
					$37 = ($22|0)>($36|0);
					$i$0$imax$0 = $37 ? $i$06 : $imax$05;
					$38 = (($i$06) + 1)|0;
					$39 = ($38|0)<($6|0);
					if ($39) {
						$i$06 = $38;$imax$05 = $i$0$imax$0;
					} else {
						$imax$0$lcssa = $i$0$imax$0;
						break;
					}
				}
				$7 = (($$cast4) + ($imax$0$lcssa<<2)|0);
				$8 = HEAP32[$7>>2]|0;
				return ($8|0);
			}
			function __ZN9Character11shift_blobpEP4Blob($this,$p) {
				$this = $this|0;
				$p = $p|0;
				var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, $i$0$in$lcssa = 0, $i$04 = 0, $i$04$in = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 8|0;
				$0 = sp + 4|0;
				$1 = sp;
				HEAP32[$0>>2] = $p;
				__ZN9Rectangle13add_rectangleERKS_($this,$p);
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				$8 = ($6|0)>(0);
				$9 = $5;
				L1: do {
					if ($8) {
						$10 = ((($p)) + 4|0);
						$11 = HEAP32[$10>>2]|0;
						$12 = ((($p)) + 12|0);
						$13 = HEAP32[$12>>2]|0;
						$14 = (($13) + ($11))|0;
						$15 = (($14|0) / 2)&-1;
						$16 = ((($p)) + 8|0);
						$i$04$in = $7;
						while(1) {
							$i$04 = (($i$04$in) + -1)|0;
							$17 = (($9) + ($i$04<<2)|0);
							$18 = HEAP32[$17>>2]|0;
							$19 = ((($18)) + 4|0);
							$20 = HEAP32[$19>>2]|0;
							$21 = ((($18)) + 12|0);
							$22 = HEAP32[$21>>2]|0;
							$23 = (($22) + ($20))|0;
							$24 = (($23|0) / 2)&-1;
							$25 = ($15|0)>($24|0);
							if ($25) {
								$i$0$in$lcssa = $i$04$in;
								break L1;
							}
							$26 = ($15|0)==($24|0);
							if ($26) {
								$28 = HEAP32[$p>>2]|0;
								$29 = HEAP32[$16>>2]|0;
								$30 = (($29) + ($28))|0;
								$31 = (($30|0) / 2)&-1;
								$32 = HEAP32[$18>>2]|0;
								$33 = ((($18)) + 8|0);
								$34 = HEAP32[$33>>2]|0;
								$35 = (($34) + ($32))|0;
								$36 = (($35|0) / 2)&-1;
								$37 = ($31|0)<($36|0);
								if (!($37)) {
									$i$0$in$lcssa = $i$04$in;
									break L1;
								}
							}
							$27 = ($i$04$in|0)>(1);
							if ($27) {
								$i$04$in = $i$04;
							} else {
								$i$0$in$lcssa = $i$04;
								break;
							}
						}
					} else {
						$i$0$in$lcssa = $7;
					}
				} while(0);
				$38 = (($9) + ($i$0$in$lcssa<<2)|0);
				$39 = $38;
				HEAP32[$1>>2] = $39;
				;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
				(__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($2,$$byval_copy,$0)|0);
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($this,$__position,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 2;
				$5 = (($0) + ($4<<2)|0);
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)<($9>>>0);
				$11 = $7;
				$12 = $9;
				if ($10) {
					$13 = ($5|0)==($7|0);
					if ($13) {
						$14 = HEAP32[$__x>>2]|0;
						HEAP32[$5>>2] = $14;
						$15 = HEAP32[$6>>2]|0;
						$16 = ((($15)) + 4|0);
						HEAP32[$6>>2] = $16;
						$__p$0 = $5;
						return ($__p$0|0);
					}
					$17 = ((($5)) + 4|0);
					$18 = $17;
					$19 = (($11) - ($18))|0;
					$20 = $19 >> 2;
					$21 = (($5) + ($20<<2)|0);
					$22 = ($21>>>0)<($7>>>0);
					if ($22) {
						$$in$i7 = $7;$__i$01$i = $21;
						while(1) {
							$23 = HEAP32[$__i$01$i>>2]|0;
							HEAP32[$$in$i7>>2] = $23;
							$24 = ((($__i$01$i)) + 4|0);
							$25 = HEAP32[$6>>2]|0;
							$26 = ((($25)) + 4|0);
							HEAP32[$6>>2] = $26;
							$27 = ($24>>>0)<($7>>>0);
							if ($27) {
								$$in$i7 = $26;$__i$01$i = $24;
							} else {
								break;
							}
						}
					}
					$28 = (0 - ($20))|0;
					$29 = (($7) + ($28<<2)|0);
					_memmove(($29|0),($5|0),($19|0))|0;
					$30 = ($5>>>0)>($__x>>>0);
					if ($30) {
						$__xr$0 = $__x;
					} else {
						$31 = HEAP32[$6>>2]|0;
						$32 = ($31>>>0)>($__x>>>0);
						$33 = ((($__x)) + 4|0);
						$$ = $32 ? $33 : $__x;
						$__xr$0 = $$;
					}
					$34 = HEAP32[$__xr$0>>2]|0;
					HEAP32[$5>>2] = $34;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$35 = (($11) - ($1))|0;
				$36 = $35 >> 2;
				$37 = (($36) + 1)|0;
				$38 = ($37>>>0)>(1073741823);
				if ($38) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre11 = HEAP32[$this>>2]|0;
					$39 = $$pre11;
					$$pre$phiZ2D = $8;$104 = $39;$41 = $$pre11;$42 = $$pre;
				} else {
					$$pre$phiZ2D = $8;$104 = $0;$41 = $1;$42 = $12;
				}
				$40 = (($42) - ($41))|0;
				$43 = $40 >> 2;
				$44 = ($43>>>0)<(536870911);
				if ($44) {
					$48 = $40 >> 1;
					$49 = ($48>>>0)<($37>>>0);
					$50 = $49 ? $37 : $48;
					$51 = $5;
					$52 = (($51) - ($41))|0;
					$53 = $52 >> 2;
					$54 = ($50|0)==(0);
					if ($54) {
						$$0$i9 = 0;$58 = 0;$59 = $53;$89 = $51;
					} else {
						$$0$i8 = $50;$105 = $53;$106 = $51;
						label = 15;
					}
				} else {
					$45 = $5;
					$46 = (($45) - ($41))|0;
					$47 = $46 >> 2;
					$$0$i8 = 1073741823;$105 = $47;$106 = $45;
					label = 15;
				}
				if ((label|0) == 15) {
					$55 = $$0$i8 << 2;
					$56 = (__Znwj($55)|0);
					$$0$i9 = $$0$i8;$58 = $56;$59 = $105;$89 = $106;
				}
				$57 = (($58) + ($59<<2)|0);
				$60 = $57;
				$61 = (($58) + ($$0$i9<<2)|0);
				$62 = $61;
				$63 = ($59|0)==($$0$i9|0);
				do {
					if ($63) {
						$64 = ($59|0)>(0);
						if ($64) {
							$65 = (($59) + 1)|0;
							$66 = (($65|0) / -2)&-1;
							$67 = (($57) + ($66<<2)|0);
							$68 = $67;
							$83 = $67;$86 = $104;$__v$sroa$21$0 = $68;$__v$sroa$37$0 = $62;
							break;
						}
						$69 = $59 << 1;
						$70 = ($59|0)==(0);
						$71 = $70 ? 1 : $69;
						$72 = $71 << 2;
						__THREW__ = 0;
						$73 = (invoke_ii(29,($72|0))|0);
						$74 = __THREW__; __THREW__ = 0;
						$75 = $74&1;
						if (!($75)) {
							$76 = $71 >>> 2;
							$77 = (($73) + ($76<<2)|0);
							$78 = $77;
							$79 = (($73) + ($71<<2)|0);
							$80 = $79;
							$81 = ($58|0)==(0|0);
							if ($81) {
								$83 = $77;$86 = $104;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
								break;
							}
							__ZdlPv($58);
							$$pre12 = HEAP32[$this>>2]|0;
							$83 = $77;$86 = $$pre12;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
							break;
						}
						$101 = ___cxa_find_matching_catch_2()|0;
						$102 = tempRet0;
						$103 = ($58|0)==(0|0);
						if ($103) {
							___resumeException($101|0);
							// unreachable;
						}
						__ZdlPv($58);
						___resumeException($101|0);
						// unreachable;
					} else {
						$83 = $57;$86 = $104;$__v$sroa$21$0 = $60;$__v$sroa$37$0 = $62;
					}
				} while(0);
				$82 = HEAP32[$__x>>2]|0;
				HEAP32[$83>>2] = $82;
				$84 = $__v$sroa$21$0;
				$85 = ((($84)) + 4|0);
				$87 = $86;
				$88 = (($89) - ($87))|0;
				$90 = $88 >> 2;
				$91 = (0 - ($90))|0;
				$92 = (($84) + ($91<<2)|0);
				$93 = $92;
				_memcpy(($92|0),($86|0),($88|0))|0;
				$94 = HEAP32[$6>>2]|0;
				$95 = (($94) - ($89))|0;
				$96 = $95 >> 2;
				_memcpy(($85|0),($5|0),($95|0))|0;
				$97 = (($85) + ($96<<2)|0);
				$98 = $97;
				$99 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $93;
				HEAP32[$6>>2] = $98;
				HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
				$100 = ($99|0)==(0|0);
				if ($100) {
					$__p$0 = $84;
					return ($__p$0|0);
				}
				__ZdlPv($99);
				$__p$0 = $84;
				return ($__p$0|0);
			}
			function __ZN9Character12insert_guessEiii($this,$i,$code,$value) {
				$this = $this|0;
				$i = $i|0;
				$code = $code|0;
				$value = $value|0;
				var $$byval_copy = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 12|0;
				$0 = sp + 8|0;
				$1 = sp;
				$2 = ($i|0)<(0);
				$$pre4 = ((($this)) + 28|0);
				if ($2) {
					label = 4;
				} else {
					$3 = ((($this)) + 32|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = HEAP32[$$pre4>>2]|0;
					$6 = (($4) - ($5))|0;
					$7 = $6 >> 3;
					$8 = ($7|0)<($i|0);
					if ($8) {
						label = 4;
					} else {
						$9 = $5;
						$11 = $9;
					}
				}
				if ((label|0) == 4) {
					__ZN5Ocrad14internal_errorEPKc(2475);
					$$phi$trans$insert2 = ((($this)) + 28|0);
					$$pre = HEAP32[$$phi$trans$insert2>>2]|0;
					$11 = $$pre;
				}
				$10 = (($11) + ($i<<3)|0);
				$12 = $10;
				HEAP32[$0>>2] = $12;
				HEAP32[$1>>2] = $code;
				$13 = ((($1)) + 4|0);
				HEAP32[$13>>2] = $value;
				;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
				(__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($$pre4,$$byval_copy,$1)|0);
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($this,$__position,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
				var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 3;
				$5 = (($0) + ($4<<3)|0);
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)<($9>>>0);
				$11 = $7;
				$12 = $9;
				if ($10) {
					$13 = ($5|0)==($7|0);
					if ($13) {
						$14 = $__x;
						$15 = $14;
						$16 = HEAP32[$15>>2]|0;
						$17 = (($14) + 4)|0;
						$18 = $17;
						$19 = HEAP32[$18>>2]|0;
						$20 = $5;
						$21 = $20;
						HEAP32[$21>>2] = $16;
						$22 = (($20) + 4)|0;
						$23 = $22;
						HEAP32[$23>>2] = $19;
						$24 = HEAP32[$6>>2]|0;
						$25 = ((($24)) + 8|0);
						HEAP32[$6>>2] = $25;
						$__p$0 = $5;
						return ($__p$0|0);
					}
					$26 = ((($5)) + 8|0);
					$27 = $26;
					$28 = (($11) - ($27))|0;
					$29 = $28 >> 3;
					$30 = (($5) + ($29<<3)|0);
					$31 = ($30>>>0)<($7>>>0);
					if ($31) {
						$$in$i7 = $7;$__i$01$i = $30;
						while(1) {
							$32 = $__i$01$i;
							$33 = $32;
							$34 = HEAP32[$33>>2]|0;
							$35 = (($32) + 4)|0;
							$36 = $35;
							$37 = HEAP32[$36>>2]|0;
							$38 = $$in$i7;
							$39 = $38;
							HEAP32[$39>>2] = $34;
							$40 = (($38) + 4)|0;
							$41 = $40;
							HEAP32[$41>>2] = $37;
							$42 = ((($__i$01$i)) + 8|0);
							$43 = HEAP32[$6>>2]|0;
							$44 = ((($43)) + 8|0);
							HEAP32[$6>>2] = $44;
							$45 = ($42>>>0)<($7>>>0);
							if ($45) {
								$$in$i7 = $44;$__i$01$i = $42;
							} else {
								break;
							}
						}
					}
					$46 = (0 - ($29))|0;
					$47 = (($7) + ($46<<3)|0);
					_memmove(($47|0),($5|0),($28|0))|0;
					$48 = ($5>>>0)>($__x>>>0);
					if ($48) {
						$__xr$0 = $__x;
					} else {
						$49 = HEAP32[$6>>2]|0;
						$50 = ($49>>>0)>($__x>>>0);
						$51 = ((($__x)) + 8|0);
						$$ = $50 ? $51 : $__x;
						$__xr$0 = $$;
					}
					$52 = $__xr$0;
					$53 = $52;
					$54 = HEAP32[$53>>2]|0;
					$55 = (($52) + 4)|0;
					$56 = $55;
					$57 = HEAP32[$56>>2]|0;
					$58 = $5;
					$59 = $58;
					HEAP32[$59>>2] = $54;
					$60 = (($58) + 4)|0;
					$61 = $60;
					HEAP32[$61>>2] = $57;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$62 = (($11) - ($1))|0;
				$63 = $62 >> 3;
				$64 = (($63) + 1)|0;
				$65 = ($64>>>0)>(536870911);
				if ($65) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre11 = HEAP32[$this>>2]|0;
					$66 = $$pre11;
					$$pre$phiZ2D = $8;$140 = $66;$68 = $$pre11;$69 = $$pre;
				} else {
					$$pre$phiZ2D = $8;$140 = $0;$68 = $1;$69 = $12;
				}
				$67 = (($69) - ($68))|0;
				$70 = $67 >> 3;
				$71 = ($70>>>0)<(268435455);
				if ($71) {
					$75 = $67 >> 2;
					$76 = ($75>>>0)<($64>>>0);
					$77 = $76 ? $64 : $75;
					$78 = $5;
					$79 = (($78) - ($68))|0;
					$80 = $79 >> 3;
					$81 = ($77|0)==(0);
					if ($81) {
						$$0$i9 = 0;$125 = $78;$85 = 0;$86 = $80;
					} else {
						$$0$i8 = $77;$141 = $80;$142 = $78;
						label = 15;
					}
				} else {
					$72 = $5;
					$73 = (($72) - ($68))|0;
					$74 = $73 >> 3;
					$$0$i8 = 536870911;$141 = $74;$142 = $72;
					label = 15;
				}
				if ((label|0) == 15) {
					$82 = $$0$i8 << 3;
					$83 = (__Znwj($82)|0);
					$$0$i9 = $$0$i8;$125 = $142;$85 = $83;$86 = $141;
				}
				$84 = (($85) + ($86<<3)|0);
				$87 = $84;
				$88 = (($85) + ($$0$i9<<3)|0);
				$89 = $88;
				$90 = ($86|0)==($$0$i9|0);
				do {
					if ($90) {
						$91 = ($86|0)>(0);
						if ($91) {
							$92 = (($86) + 1)|0;
							$93 = (($92|0) / -2)&-1;
							$94 = (($84) + ($93<<3)|0);
							$95 = $94;
							$115 = $94;$122 = $140;$__v$sroa$21$0 = $95;$__v$sroa$37$0 = $89;
							break;
						}
						$96 = $86 << 1;
						$97 = ($86|0)==(0);
						$98 = $97 ? 1 : $96;
						$99 = $98 << 3;
						__THREW__ = 0;
						$100 = (invoke_ii(29,($99|0))|0);
						$101 = __THREW__; __THREW__ = 0;
						$102 = $101&1;
						if (!($102)) {
							$103 = $98 >>> 2;
							$104 = (($100) + ($103<<3)|0);
							$105 = $104;
							$106 = (($100) + ($98<<3)|0);
							$107 = $106;
							$108 = ($85|0)==(0|0);
							if ($108) {
								$115 = $104;$122 = $140;$__v$sroa$21$0 = $105;$__v$sroa$37$0 = $107;
								break;
							}
							__ZdlPv($85);
							$$pre12 = HEAP32[$this>>2]|0;
							$115 = $104;$122 = $$pre12;$__v$sroa$21$0 = $105;$__v$sroa$37$0 = $107;
							break;
						}
						$137 = ___cxa_find_matching_catch_2()|0;
						$138 = tempRet0;
						$139 = ($85|0)==(0|0);
						if ($139) {
							___resumeException($137|0);
							// unreachable;
						}
						__ZdlPv($85);
						___resumeException($137|0);
						// unreachable;
					} else {
						$115 = $84;$122 = $140;$__v$sroa$21$0 = $87;$__v$sroa$37$0 = $89;
					}
				} while(0);
				$109 = $__x;
				$110 = $109;
				$111 = HEAP32[$110>>2]|0;
				$112 = (($109) + 4)|0;
				$113 = $112;
				$114 = HEAP32[$113>>2]|0;
				$116 = $115;
				$117 = $116;
				HEAP32[$117>>2] = $111;
				$118 = (($116) + 4)|0;
				$119 = $118;
				HEAP32[$119>>2] = $114;
				$120 = $__v$sroa$21$0;
				$121 = ((($120)) + 8|0);
				$123 = $122;
				$124 = (($125) - ($123))|0;
				$126 = $124 >> 3;
				$127 = (0 - ($126))|0;
				$128 = (($120) + ($127<<3)|0);
				$129 = $128;
				_memcpy(($128|0),($122|0),($124|0))|0;
				$130 = HEAP32[$6>>2]|0;
				$131 = (($130) - ($125))|0;
				$132 = $131 >> 3;
				_memcpy(($121|0),($5|0),($131|0))|0;
				$133 = (($121) + ($132<<3)|0);
				$134 = $133;
				$135 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $129;
				HEAP32[$6>>2] = $134;
				HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
				$136 = ($135|0)==(0|0);
				if ($136) {
					$__p$0 = $120;
					return ($__p$0|0);
				}
				__ZdlPv($135);
				$__p$0 = $120;
				return ($__p$0|0);
			}
			function __ZN9Character16set_merged_guessEiiii($this,$code1,$right1,$code2,$blob_index) {
				$this = $this|0;
				$code1 = $code1|0;
				$right1 = $right1|0;
				$code2 = $code2|0;
				$blob_index = $blob_index|0;
				var $$1 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 16|0;
				$1 = sp + 8|0;
				$2 = sp;
				$3 = ($blob_index|0)<(0);
				if ($3) {
					$$1 = 0;
					STACKTOP = sp;return ($$1|0);
				}
				$4 = ((($this)) + 16|0);
				$5 = ((($this)) + 20|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = $8 >> 2;
				$10 = ($9|0)>($blob_index|0);
				if (!($10)) {
					$$1 = 0;
					STACKTOP = sp;return ($$1|0);
				}
				$11 = $7;
				$12 = (($11) + ($blob_index<<2)|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = HEAP32[$13>>2]|0;
				$15 = ($14|0)>($right1|0);
				if ($15) {
					$$1 = 0;
					STACKTOP = sp;return ($$1|0);
				}
				$16 = ((($13)) + 8|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ($17|0)>($right1|0);
				if (!($18)) {
					$$1 = 0;
					STACKTOP = sp;return ($$1|0);
				}
				$19 = $blob_index ^ -1;
				$20 = HEAP32[$this>>2]|0;
				$21 = ((($this)) + 28|0);
				$22 = HEAP32[$21>>2]|0;
				$23 = ((($this)) + 32|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = ($24|0)==($22|0);
				if ($25) {
					$33 = $22;
				} else {
					$__new_last2$i$i$i$i = $22;
					$scevgep$i$i$i$i = ((($24)) + -8|0);
					$26 = $scevgep$i$i$i$i;
					$27 = (($26) - ($__new_last2$i$i$i$i))|0;
					$28 = $27 >>> 3;
					$29 = $28 ^ -1;
					$scevgep4$i$i$i$i = (($24) + ($29<<3)|0);
					HEAP32[$23>>2] = $scevgep4$i$i$i$i;
					$33 = $scevgep4$i$i$i$i;
				}
				HEAP32[$0>>2] = $19;
				$30 = ((($0)) + 4|0);
				HEAP32[$30>>2] = $20;
				$31 = ((($this)) + 36|0);
				$32 = HEAP32[$31>>2]|0;
				$34 = ($33|0)==($32|0);
				if ($34) {
					__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($21,$0);
					$$pre = HEAP32[$23>>2]|0;
					$49 = $$pre;
				} else {
					$35 = $0;
					$36 = $35;
					$37 = HEAP32[$36>>2]|0;
					$38 = (($35) + 4)|0;
					$39 = $38;
					$40 = HEAP32[$39>>2]|0;
					$41 = $33;
					$42 = $41;
					HEAP32[$42>>2] = $37;
					$43 = (($41) + 4)|0;
					$44 = $43;
					HEAP32[$44>>2] = $40;
					$45 = HEAP32[$23>>2]|0;
					$46 = ((($45)) + 8|0);
					HEAP32[$23>>2] = $46;
					$49 = $46;
				}
				HEAP32[$1>>2] = $code1;
				$47 = ((($1)) + 4|0);
				HEAP32[$47>>2] = $right1;
				$48 = HEAP32[$31>>2]|0;
				$50 = ($49|0)==($48|0);
				if ($50) {
					__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($21,$1);
					$$pre4 = HEAP32[$23>>2]|0;
					$67 = $$pre4;
				} else {
					$51 = $1;
					$52 = $51;
					$53 = HEAP32[$52>>2]|0;
					$54 = (($51) + 4)|0;
					$55 = $54;
					$56 = HEAP32[$55>>2]|0;
					$57 = $49;
					$58 = $57;
					HEAP32[$58>>2] = $53;
					$59 = (($57) + 4)|0;
					$60 = $59;
					HEAP32[$60>>2] = $56;
					$61 = HEAP32[$23>>2]|0;
					$62 = ((($61)) + 8|0);
					HEAP32[$23>>2] = $62;
					$67 = $62;
				}
				$63 = ((($this)) + 8|0);
				$64 = HEAP32[$63>>2]|0;
				HEAP32[$2>>2] = $code2;
				$65 = ((($2)) + 4|0);
				HEAP32[$65>>2] = $64;
				$66 = HEAP32[$31>>2]|0;
				$68 = ($67|0)==($66|0);
				if ($68) {
					__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($21,$2);
				} else {
					$69 = $2;
					$70 = $69;
					$71 = HEAP32[$70>>2]|0;
					$72 = (($69) + 4)|0;
					$73 = $72;
					$74 = HEAP32[$73>>2]|0;
					$75 = $67;
					$76 = $75;
					HEAP32[$76>>2] = $71;
					$77 = (($75) + 4)|0;
					$78 = $77;
					HEAP32[$78>>2] = $74;
					$79 = HEAP32[$23>>2]|0;
					$80 = ((($79)) + 8|0);
					HEAP32[$23>>2] = $80;
				}
				$$1 = 1;
				STACKTOP = sp;return ($$1|0);
			}
			function __ZN9Character12swap_guessesEii($this,$i,$j) {
				$this = $this|0;
				$i = $i|0;
				$j = $j|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
				var $or$cond2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if ($0) {
					label = 3;
				} else {
					$1 = ((($this)) + 28|0);
					$2 = ((($this)) + 32|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 3;
					$notlhs = ($6|0)>($i|0);
					$notrhs = ($j|0)>(-1);
					$or$cond$not = $notrhs & $notlhs;
					$7 = ($6|0)>($j|0);
					$or$cond2 = $7 & $or$cond$not;
					$8 = $4;
					if ($or$cond2) {
						$10 = $8;
					} else {
						label = 3;
					}
				}
				if ((label|0) == 3) {
					__ZN5Ocrad14internal_errorEPKc(2509);
					$$phi$trans$insert = ((($this)) + 28|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					$10 = $$pre;
				}
				$9 = (($10) + ($i<<3)|0);
				$11 = HEAP32[$9>>2]|0;
				$12 = (($10) + ($j<<3)|0);
				$13 = HEAP32[$12>>2]|0;
				HEAP32[$9>>2] = $13;
				$14 = (($10) + ($j<<3)|0);
				HEAP32[$14>>2] = $11;
				return;
			}
			function __ZNK9Character5guessEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 28|0);
					$2 = ((($this)) + 32|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 3;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<3)|0);
						return ($9|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(2543);
				$$phi$trans$insert = ((($this)) + 28|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<3)|0);
				return ($9|0);
			}
			function __ZNK9Character5maybeEi($this,$code) {
				$this = $this|0;
				$code = $code|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				$6 = $3;
				if (!($5)) {
					$13 = 0;
					return ($13|0);
				}
				$7 = $4 >> 3;
				$i$02 = 0;
				while(1) {
					$10 = (($6) + ($i$02<<3)|0);
					$11 = HEAP32[$10>>2]|0;
					$12 = ($11|0)==($code|0);
					$8 = (($i$02) + 1)|0;
					if ($12) {
						$13 = 1;
						label = 5;
						break;
					}
					$9 = ($8|0)<($7|0);
					if ($9) {
						$i$02 = $8;
					} else {
						$13 = 0;
						label = 5;
						break;
					}
				}
				if ((label|0) == 5) {
					return ($13|0);
				}
				return (0)|0;
			}
			function __ZN9Character4joinERS_($this,$c) {
				$this = $this|0;
				$c = $c|0;
				var $$byval_copy = 0, $$cast = 0, $$cast$lcssa = 0, $$cast1 = 0, $$cast3 = 0, $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$in$lcssa$i = 0, $i$02 = 0, $i$04$i = 0, $i$04$in$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 8|0;
				$0 = sp + 4|0;
				$1 = sp;
				$2 = ((($c)) + 16|0);
				$3 = ((($c)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = ($6|0)>(0);
				$$cast1 = $5;
				if ($7) {
					$8 = ((($this)) + 16|0);
					$9 = ((($this)) + 20|0);
					$$cast3 = $$cast1;$i$02 = 0;
					while(1) {
						$16 = (($$cast3) + ($i$02<<2)|0);
						$17 = HEAP32[$16>>2]|0;
						HEAP32[$0>>2] = $17;
						__ZN9Rectangle13add_rectangleERKS_($this,$17);
						$18 = HEAP32[$9>>2]|0;
						$19 = HEAP32[$8>>2]|0;
						$20 = (($18) - ($19))|0;
						$21 = $20 >> 2;
						$22 = ($20|0)>(0);
						$23 = $19;
						L5: do {
							if ($22) {
								$24 = ((($17)) + 4|0);
								$25 = HEAP32[$24>>2]|0;
								$26 = ((($17)) + 12|0);
								$27 = HEAP32[$26>>2]|0;
								$28 = (($27) + ($25))|0;
								$29 = (($28|0) / 2)&-1;
								$30 = ((($17)) + 8|0);
								$i$04$in$i = $21;
								while(1) {
									$i$04$i = (($i$04$in$i) + -1)|0;
									$31 = (($23) + ($i$04$i<<2)|0);
									$32 = HEAP32[$31>>2]|0;
									$33 = ((($32)) + 4|0);
									$34 = HEAP32[$33>>2]|0;
									$35 = ((($32)) + 12|0);
									$36 = HEAP32[$35>>2]|0;
									$37 = (($36) + ($34))|0;
									$38 = (($37|0) / 2)&-1;
									$39 = ($29|0)>($38|0);
									if ($39) {
										$i$0$in$lcssa$i = $i$04$in$i;
										break L5;
									}
									$40 = ($29|0)==($38|0);
									if ($40) {
										$42 = HEAP32[$17>>2]|0;
										$43 = HEAP32[$30>>2]|0;
										$44 = (($43) + ($42))|0;
										$45 = (($44|0) / 2)&-1;
										$46 = HEAP32[$32>>2]|0;
										$47 = ((($32)) + 8|0);
										$48 = HEAP32[$47>>2]|0;
										$49 = (($48) + ($46))|0;
										$50 = (($49|0) / 2)&-1;
										$51 = ($45|0)<($50|0);
										if (!($51)) {
											$i$0$in$lcssa$i = $i$04$in$i;
											break L5;
										}
									}
									$41 = ($i$04$in$i|0)>(1);
									if ($41) {
										$i$04$in$i = $i$04$i;
									} else {
										$i$0$in$lcssa$i = $i$04$i;
										break;
									}
								}
							} else {
								$i$0$in$lcssa$i = $21;
							}
						} while(0);
						$52 = (($23) + ($i$0$in$lcssa$i<<2)|0);
						$53 = $52;
						HEAP32[$1>>2] = $53;
						;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
						(__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($8,$$byval_copy,$0)|0);
						$54 = (($i$02) + 1)|0;
						$55 = HEAP32[$3>>2]|0;
						$56 = HEAP32[$2>>2]|0;
						$57 = (($55) - ($56))|0;
						$58 = $57 >> 2;
						$59 = ($54|0)<($58|0);
						$$cast = $56;
						if ($59) {
							$$cast3 = $$cast;$i$02 = $54;
						} else {
							$$cast$lcssa = $$cast;$$in = $55;$$lcssa = $56;
							break;
						}
					}
				} else {
					$$cast$lcssa = $$cast1;$$in = $4;$$lcssa = $5;
				}
				$10 = $$in;
				$11 = ($10|0)==($$cast$lcssa|0);
				if ($11) {
					STACKTOP = sp;return;
				}
				$scevgep$i$i$i = ((($10)) + -4|0);
				$12 = $scevgep$i$i$i;
				$13 = (($12) - ($$lcssa))|0;
				$14 = $13 >>> 2;
				$15 = $14 ^ -1;
				$scevgep4$i$i$i = (($10) + ($15<<2)|0);
				HEAP32[$3>>2] = $scevgep4$i$i$i;
				STACKTOP = sp;return;
			}
			function __ZNK9Character11byte_resultEv($this) {
				$this = $this|0;
				var $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				if (!($4)) {
					$5 = $3;
					$6 = HEAP32[$5>>2]|0;
					$7 = (__ZN3UCS11map_to_byteEi($6)|0);
					$8 = ($7<<24>>24)==(0);
					if (!($8)) {
						$$1 = $7;
						return ($$1|0);
					}
				}
				$$1 = 95;
				return ($$1|0);
			}
			function __ZNK9Character11utf8_resultEv($this) {
				$this = $this|0;
				var $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				if (!($4)) {
					$5 = $3;
					$6 = HEAP32[$5>>2]|0;
					$7 = (__ZN3UCS11ucs_to_utf8Ei($6)|0);
					$8 = HEAP8[$7>>0]|0;
					$9 = ($8<<24>>24)==(0);
					if (!($9)) {
						$$1 = $7;
						return ($$1|0);
					}
				}
				$$1 = 2570;
				return ($$1|0);
			}
			function __ZNK9Character6dprintERK7ControlRK9Rectanglebb($this,$control,$charbox,$graph,$recursive) {
				$this = $this|0;
				$control = $control|0;
				$charbox = $charbox|0;
				$graph = $graph|0;
				$recursive = $recursive|0;
				var $$$us = 0, $$in = 0, $$in$i = 0, $$in49 = 0, $$lcssa = 0, $$lcssa66 = 0, $$lcssa68 = 0, $$off = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi44Z2D = 0, $$pre$phi46Z2D = 0, $$pre$phi48Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0;
				var $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
				var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
				var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
				var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
				var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
				var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
				var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
				var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
				var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
				var $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa$i = 0, $a$01$i = 0, $brmerge = 0, $ch2$1 = 0, $ch2$1$us = 0, $ch2$3 = 0, $ch2$3$us = 0, $col$016 = 0, $col$016$us = 0, $f = 0, $i$02$i = 0, $i$022$us = 0, $i3$015 = 0, $i3$015$us = 0, $ish1bot$0$off0 = 0, $ish1top$0$off0 = 0, $ish2bot$1$off0 = 0;
				var $ish2top$1$off0 = 0, $phitmp = 0, $row$018 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer29 = 0, $vararg_buffer36 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0;
				var $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer9 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer73 = sp + 192|0;
				$vararg_buffer70 = sp + 184|0;
				$vararg_buffer67 = sp + 176|0;
				$vararg_buffer64 = sp + 168|0;
				$vararg_buffer61 = sp + 160|0;
				$vararg_buffer58 = sp + 152|0;
				$vararg_buffer55 = sp + 144|0;
				$vararg_buffer52 = sp + 136|0;
				$vararg_buffer49 = sp + 128|0;
				$vararg_buffer46 = sp + 120|0;
				$vararg_buffer43 = sp + 112|0;
				$vararg_buffer40 = sp + 104|0;
				$vararg_buffer36 = sp + 96|0;
				$vararg_buffer29 = sp + 72|0;
				$vararg_buffer23 = sp + 56|0;
				$vararg_buffer19 = sp + 48|0;
				$vararg_buffer15 = sp + 40|0;
				$vararg_buffer12 = sp + 32|0;
				$vararg_buffer9 = sp + 24|0;
				$vararg_buffer5 = sp + 16|0;
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				$f = sp + 200|0;
				$brmerge = $graph | $recursive;
				if ($brmerge) {
					$0 = ((($control)) + 16|0);
					$1 = HEAP32[$0>>2]|0;
					$2 = ((($this)) + 28|0);
					$3 = ((($this)) + 32|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = HEAP32[$2>>2]|0;
					$6 = (($4) - ($5))|0;
					$7 = $6 >> 3;
					HEAP32[$vararg_buffer>>2] = $7;
					(_fprintf($1,2572,$vararg_buffer)|0);
					$$pre$phi44Z2D = $3;$$pre$phi46Z2D = $2;
				} else {
					$$pre40 = ((($this)) + 28|0);
					$$pre41 = ((($this)) + 32|0);
					$$pre$phi44Z2D = $$pre41;$$pre$phi46Z2D = $$pre40;
				}
				$8 = HEAP32[$$pre$phi44Z2D>>2]|0;
				$9 = HEAP32[$$pre$phi46Z2D>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = ($10|0)>(0);
				$12 = $9;
				do {
					if ($11) {
						$13 = ((($this)) + 28|0);
						$14 = ((($control)) + 16|0);
						$15 = ((($control)) + 29|0);
						if ($brmerge) {
							$17 = $12;$i$022$us = 0;
						} else {
							$44 = HEAP32[$12>>2]|0;
							$45 = ($44|0)==(9);
							if ($45) {
								$46 = HEAP32[$14>>2]|0;
								$47 = ((($12)) + 4|0);
								$48 = HEAP32[$47>>2]|0;
								HEAP32[$vararg_buffer12>>2] = $48;
								(_fprintf($46,2647,$vararg_buffer12)|0);
								$$pre$phi48Z2D = $14;
								break;
							}
							$49 = HEAP8[$15>>0]|0;
							$50 = ($49<<24>>24)==(0);
							if (!($50)) {
								$58 = HEAP32[$14>>2]|0;
								$59 = (__ZN3UCS11ucs_to_utf8Ei($44)|0);
								$60 = HEAP32[$13>>2]|0;
								$61 = ((($60)) + 4|0);
								$62 = HEAP32[$61>>2]|0;
								HEAP32[$vararg_buffer19>>2] = $59;
								$vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
								HEAP32[$vararg_ptr22>>2] = $62;
								(_fprintf($58,2587,$vararg_buffer19)|0);
								$$pre$phi48Z2D = $14;
								break;
							}
							$51 = (__ZN3UCS11map_to_byteEi($44)|0);
							$52 = ($51<<24>>24)==(0);
							if ($52) {
								$$pre$phi48Z2D = $14;
								break;
							}
							$53 = HEAP32[$14>>2]|0;
							$54 = $51&255;
							$55 = HEAP32[$13>>2]|0;
							$56 = ((($55)) + 4|0);
							$57 = HEAP32[$56>>2]|0;
							HEAP32[$vararg_buffer15>>2] = $54;
							$vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
							HEAP32[$vararg_ptr18>>2] = $57;
							(_fprintf($53,2617,$vararg_buffer15)|0);
							$$pre$phi48Z2D = $14;
							break;
						}
						while(1) {
							$16 = (($17) + ($i$022$us<<3)|0);
							$18 = HEAP32[$16>>2]|0;
							$19 = ($18|0)==(9);
							do {
								if ($19) {
									$34 = HEAP32[$14>>2]|0;
									$35 = (((($17) + ($i$022$us<<3)|0)) + 4|0);
									$36 = HEAP32[$35>>2]|0;
									HEAP32[$vararg_buffer9>>2] = $36;
									(_fprintf($34,2647,$vararg_buffer9)|0);
								} else {
									$20 = HEAP8[$15>>0]|0;
									$21 = ($20<<24>>24)==(0);
									if (!($21)) {
										$22 = HEAP32[$14>>2]|0;
										$23 = (__ZN3UCS11ucs_to_utf8Ei($18)|0);
										$24 = HEAP32[$13>>2]|0;
										$25 = (((($24) + ($i$022$us<<3)|0)) + 4|0);
										$26 = HEAP32[$25>>2]|0;
										HEAP32[$vararg_buffer1>>2] = $23;
										$vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
										HEAP32[$vararg_ptr4>>2] = $26;
										(_fprintf($22,2587,$vararg_buffer1)|0);
										break;
									}
									$27 = (__ZN3UCS11map_to_byteEi($18)|0);
									$28 = ($27<<24>>24)==(0);
									if (!($28)) {
										$29 = HEAP32[$14>>2]|0;
										$30 = $27&255;
										$31 = HEAP32[$13>>2]|0;
										$32 = (((($31) + ($i$022$us<<3)|0)) + 4|0);
										$33 = HEAP32[$32>>2]|0;
										HEAP32[$vararg_buffer5>>2] = $30;
										$vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
										HEAP32[$vararg_ptr8>>2] = $33;
										(_fprintf($29,2617,$vararg_buffer5)|0);
									}
								}
							} while(0);
							$37 = (($i$022$us) + 1)|0;
							$38 = HEAP32[$$pre$phi44Z2D>>2]|0;
							$39 = HEAP32[$$pre$phi46Z2D>>2]|0;
							$40 = (($38) - ($39))|0;
							$41 = $40 >> 3;
							$42 = ($37|0)<($41|0);
							$43 = $39;
							if ($42) {
								$17 = $43;$i$022$us = $37;
							} else {
								$$pre$phi48Z2D = $14;
								break;
							}
						}
					} else {
						$$pre47 = ((($control)) + 16|0);
						$$pre$phi48Z2D = $$pre47;
					}
				} while(0);
				$63 = HEAP32[$$pre$phi48Z2D>>2]|0;
				(_fputc(10,$63)|0);
				if (!($graph)) {
					STACKTOP = sp;return;
				}
				$64 = HEAP32[$$pre$phi48Z2D>>2]|0;
				$65 = HEAP32[$this>>2]|0;
				$66 = ((($this)) + 4|0);
				$67 = HEAP32[$66>>2]|0;
				$68 = ((($this)) + 8|0);
				$69 = HEAP32[$68>>2]|0;
				$70 = ((($this)) + 12|0);
				$71 = HEAP32[$70>>2]|0;
				HEAP32[$vararg_buffer23>>2] = $65;
				$vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
				HEAP32[$vararg_ptr26>>2] = $67;
				$vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
				HEAP32[$vararg_ptr27>>2] = $69;
				$vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
				HEAP32[$vararg_ptr28>>2] = $71;
				(_fprintf($64,2677,$vararg_buffer23)|0);
				$72 = HEAP32[$$pre$phi48Z2D>>2]|0;
				$73 = HEAP32[$68>>2]|0;
				$74 = HEAP32[$this>>2]|0;
				$75 = (($73) + 1)|0;
				$76 = (($75) - ($74))|0;
				$77 = HEAP32[$70>>2]|0;
				$78 = HEAP32[$66>>2]|0;
				$79 = (($77) + 1)|0;
				$80 = (($79) - ($78))|0;
				$81 = (($74) + ($73))|0;
				$82 = (($81|0) / 2)&-1;
				$83 = (($78) + ($77))|0;
				$84 = (($83|0) / 2)&-1;
				$85 = ((($this)) + 16|0);
				$86 = ((($this)) + 20|0);
				$87 = HEAP32[$86>>2]|0;
				$88 = HEAP32[$85>>2]|0;
				$89 = (($87) - ($88))|0;
				$90 = ($89|0)>(0);
				if ($90) {
					$$in$i = $88;$a$01$i = 0;$i$02$i = 0;
					while(1) {
						$91 = $$in$i;
						$92 = (($91) + ($i$02$i<<2)|0);
						$93 = HEAP32[$92>>2]|0;
						$94 = (__ZNK6Bitmap4areaEv($93)|0);
						$95 = (($94) + ($a$01$i))|0;
						$96 = (($i$02$i) + 1)|0;
						$97 = HEAP32[$86>>2]|0;
						$98 = HEAP32[$85>>2]|0;
						$99 = (($97) - ($98))|0;
						$100 = $99 >> 2;
						$101 = ($96|0)<($100|0);
						if ($101) {
							$$in$i = $98;$a$01$i = $95;$i$02$i = $96;
						} else {
							$$lcssa68 = $95;
							break;
						}
					}
					$$pre = HEAP32[$70>>2]|0;
					$$pre31 = HEAP32[$66>>2]|0;
					$$pre32 = HEAP32[$68>>2]|0;
					$$pre33 = HEAP32[$this>>2]|0;
					$phitmp = ($$lcssa68*100)|0;
					$103 = $$pre;$105 = $$pre31;$107 = $$pre32;$109 = $$pre33;$a$0$lcssa$i = $phitmp;
				} else {
					$103 = $77;$105 = $78;$107 = $73;$109 = $74;$a$0$lcssa$i = 0;
				}
				$102 = (($103) + 1)|0;
				$104 = (($102) - ($105))|0;
				$106 = (($107) + 1)|0;
				$108 = (($106) - ($109))|0;
				$110 = Math_imul($108, $104)|0;
				$111 = (($a$0$lcssa$i|0) / ($110|0))&-1;
				HEAP32[$vararg_buffer29>>2] = $76;
				$vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
				HEAP32[$vararg_ptr32>>2] = $80;
				$vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
				HEAP32[$vararg_ptr33>>2] = $82;
				$vararg_ptr34 = ((($vararg_buffer29)) + 12|0);
				HEAP32[$vararg_ptr34>>2] = $84;
				$vararg_ptr35 = ((($vararg_buffer29)) + 16|0);
				HEAP32[$vararg_ptr35>>2] = $111;
				(_fprintf($72,2723,$vararg_buffer29)|0);
				$112 = HEAP32[$86>>2]|0;
				$113 = HEAP32[$85>>2]|0;
				$114 = (($112) - ($113))|0;
				$$off = (($114) + -1)|0;
				$115 = ($$off>>>0)<(15);
				do {
					if ($115) {
						$116 = $114 >> 2;
						$117 = (($116) + -1)|0;
						$118 = ($114|0)<(4);
						if ($118) {
							__ZN5Ocrad14internal_errorEPKc(2417);
							$$phi$trans$insert$i = ((($this)) + 16|0);
							$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
							$121 = $$pre$i;
						} else {
							$119 = $113;
							$121 = $119;
						}
						$120 = (($121) + ($117<<2)|0);
						$122 = HEAP32[$120>>2]|0;
						__ZN8FeaturesC2ERK4Blob($f,$122);
						$123 = HEAP32[$$pre$phi48Z2D>>2]|0;
						__THREW__ = 0;
						$124 = (invoke_ii(174,($f|0))|0);
						$125 = __THREW__; __THREW__ = 0;
						$126 = $125&1;
						if (!($126)) {
							__THREW__ = 0;
							$127 = (invoke_ii(175,($f|0))|0);
							$128 = __THREW__; __THREW__ = 0;
							$129 = $128&1;
							if (!($129)) {
								HEAP32[$vararg_buffer36>>2] = $124;
								$vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
								HEAP32[$vararg_ptr39>>2] = $127;
								(_fprintf($123,2795,$vararg_buffer36)|0);
								__ZN8FeaturesD2Ev($f);
								break;
							}
						}
						$130 = ___cxa_find_matching_catch_2()|0;
						$131 = tempRet0;
						__THREW__ = 0;
						invoke_vi(126,($f|0));
						$132 = __THREW__; __THREW__ = 0;
						$133 = $132&1;
						if ($133) {
							$256 = ___cxa_find_matching_catch_3(0|0)|0;
							$257 = tempRet0;
							___clang_call_terminate($256);
							// unreachable;
						} else {
							___resumeException($130|0);
							// unreachable;
						}
					}
				} while(0);
				$134 = HEAP32[$$pre$phi48Z2D>>2]|0;
				(_fputc(10,$134)|0);
				$135 = HEAP32[$66>>2]|0;
				$136 = ((($charbox)) + 4|0);
				$137 = HEAP32[$136>>2]|0;
				$138 = ($137|0)<($135|0);
				$139 = $138 ? $137 : $135;
				$140 = HEAP32[$70>>2]|0;
				$141 = ((($charbox)) + 12|0);
				$142 = HEAP32[$141>>2]|0;
				$143 = ($140|0)<($142|0);
				$144 = $143 ? $142 : $140;
				$145 = ($139|0)>($144|0);
				L50: do {
					if (!($145)) {
						$148 = $135;$150 = $140;$155 = $137;$157 = $142;$row$018 = $139;
						while(1) {
							$147 = ($row$018|0)==($148|0);
							$149 = (($150) + ($148))|0;
							$151 = (($149|0) / 2)&-1;
							$152 = ($row$018|0)==($151|0);
							$153 = ($row$018|0)==($150|0);
							$154 = ($row$018|0)==($155|0);
							$156 = (($157) + ($155))|0;
							$158 = (($156|0) / 2)&-1;
							$159 = ($row$018|0)==($158|0);
							$160 = ($row$018|0)==($157|0);
							$161 = HEAP32[$86>>2]|0;
							$162 = HEAP32[$85>>2]|0;
							$163 = (($161) - ($162))|0;
							$164 = ($163|0)==(4);
							if ($164) {
								$165 = $162;
								$166 = HEAP32[$165>>2]|0;
								$167 = ((($166)) + 28|0);
								$168 = ((($166)) + 32|0);
								$169 = HEAP32[$168>>2]|0;
								$170 = HEAP32[$167>>2]|0;
								$171 = ($169|0)==($170|0);
								if ($171) {
									$ish1bot$0$off0 = 0;$ish1top$0$off0 = 0;$ish2bot$1$off0 = 0;$ish2top$1$off0 = 0;
								} else {
									$172 = (__ZNK4Blob4holeEi($166,0)|0);
									$173 = ((($172)) + 4|0);
									$174 = HEAP32[$173>>2]|0;
									$175 = ($row$018|0)==($174|0);
									$176 = (__ZNK4Blob4holeEi($166,0)|0);
									$177 = ((($176)) + 12|0);
									$178 = HEAP32[$177>>2]|0;
									$179 = ($row$018|0)==($178|0);
									$180 = HEAP32[$168>>2]|0;
									$181 = HEAP32[$167>>2]|0;
									$182 = (($180) - ($181))|0;
									$183 = ($182|0)>(4);
									if ($183) {
										$184 = (__ZNK4Blob4holeEi($166,1)|0);
										$185 = ((($184)) + 4|0);
										$186 = HEAP32[$185>>2]|0;
										$187 = ($row$018|0)==($186|0);
										$188 = (__ZNK4Blob4holeEi($166,1)|0);
										$189 = ((($188)) + 12|0);
										$190 = HEAP32[$189>>2]|0;
										$191 = ($row$018|0)==($190|0);
										$ish1bot$0$off0 = $179;$ish1top$0$off0 = $175;$ish2bot$1$off0 = $191;$ish2top$1$off0 = $187;
									} else {
										$ish1bot$0$off0 = $179;$ish1top$0$off0 = $175;$ish2bot$1$off0 = 0;$ish2top$1$off0 = 0;
									}
								}
							} else {
								$ish1bot$0$off0 = 0;$ish1top$0$off0 = 0;$ish2bot$1$off0 = 0;$ish2top$1$off0 = 0;
							}
							$192 = HEAP32[$this>>2]|0;
							$193 = HEAP32[$68>>2]|0;
							$194 = ($192|0)>($193|0);
							L58: do {
								if (!($194)) {
									if ($152) {
										$196 = $193;$197 = $192;$col$016$us = $192;
									} else {
										$col$016 = $192;
										while(1) {
											$223 = HEAP32[$86>>2]|0;
											$224 = HEAP32[$85>>2]|0;
											$225 = (($223) - ($224))|0;
											$226 = ($225|0)>(0);
											L63: do {
												if ($226) {
													$$in = $224;$i3$015 = 0;
													while(1) {
														$233 = $$in;
														$234 = (($233) + ($i3$015<<2)|0);
														$235 = HEAP32[$234>>2]|0;
														$236 = (__ZNK4Blob2idEii($235,$row$018,$col$016)|0);
														$237 = ($236|0)==(0);
														$231 = (($i3$015) + 1)|0;
														if (!($237)) {
															$$lcssa = $236;
															break;
														}
														$227 = HEAP32[$86>>2]|0;
														$228 = HEAP32[$85>>2]|0;
														$229 = (($227) - ($228))|0;
														$230 = $229 >> 2;
														$232 = ($231|0)<($230|0);
														if ($232) {
															$$in = $228;$i3$015 = $231;
														} else {
															$ch2$3 = 46;
															break L63;
														}
													}
													$238 = ($$lcssa|0)>(0);
													$ch2$1 = $238 ? 79 : 45;
													$ch2$3 = $ch2$1;
												} else {
													$ch2$3 = 46;
												}
											} while(0);
											$239 = HEAP32[$$pre$phi48Z2D>>2]|0;
											HEAP32[$vararg_buffer43>>2] = $ch2$3;
											(_fprintf($239,2822,$vararg_buffer43)|0);
											$240 = (($col$016) + 1)|0;
											$241 = HEAP32[$68>>2]|0;
											$242 = ($col$016|0)<($241|0);
											if ($242) {
												$col$016 = $240;
											} else {
												break L58;
											}
										}
									}
									while(1) {
										$195 = (($197) + ($196))|0;
										$198 = (($195|0) / 2)&-1;
										$199 = ($col$016$us|0)==($198|0);
										$$$us = $199 ? 43 : 46;
										$200 = HEAP32[$86>>2]|0;
										$201 = HEAP32[$85>>2]|0;
										$202 = (($200) - ($201))|0;
										$203 = ($202|0)>(0);
										L71: do {
											if ($203) {
												$$in49 = $201;$i3$015$us = 0;
												while(1) {
													$210 = $$in49;
													$211 = (($210) + ($i3$015$us<<2)|0);
													$212 = HEAP32[$211>>2]|0;
													$213 = (__ZNK4Blob2idEii($212,$row$018,$col$016$us)|0);
													$214 = ($213|0)==(0);
													$208 = (($i3$015$us) + 1)|0;
													if (!($214)) {
														$$lcssa66 = $213;
														break;
													}
													$204 = HEAP32[$86>>2]|0;
													$205 = HEAP32[$85>>2]|0;
													$206 = (($204) - ($205))|0;
													$207 = $206 >> 2;
													$209 = ($208|0)<($207|0);
													if ($209) {
														$$in49 = $205;$i3$015$us = $208;
													} else {
														$ch2$3$us = $$$us;
														break L71;
													}
												}
												$215 = ($$lcssa66|0)>(0);
												$216 = $199 ? 67 : 79;
												$217 = $199 ? 61 : 45;
												$ch2$1$us = $215 ? $216 : $217;
												$ch2$3$us = $ch2$1$us;
											} else {
												$ch2$3$us = $$$us;
											}
										} while(0);
										$218 = HEAP32[$$pre$phi48Z2D>>2]|0;
										$219 = $ch2$3$us << 24 >> 24;
										HEAP32[$vararg_buffer40>>2] = $219;
										(_fprintf($218,2822,$vararg_buffer40)|0);
										$220 = HEAP32[$68>>2]|0;
										$221 = ($col$016$us|0)<($220|0);
										if (!($221)) {
											break L58;
										}
										$222 = (($col$016$us) + 1)|0;
										$$pre39 = HEAP32[$this>>2]|0;
										$196 = $220;$197 = $$pre39;$col$016$us = $222;
									}
								}
							} while(0);
							if ($147) {
								$243 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer46>>2] = $148;
								(_fprintf($243,2826,$vararg_buffer46)|0);
							}
							if ($152) {
								$244 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer49>>2] = $row$018;
								(_fprintf($244,2836,$vararg_buffer49)|0);
							}
							if ($153) {
								$245 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer52>>2] = $150;
								(_fprintf($245,2850,$vararg_buffer52)|0);
							}
							if ($154) {
								$246 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer55>>2] = $155;
								(_fprintf($246,2863,$vararg_buffer55)|0);
							}
							if ($159) {
								$247 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer58>>2] = $row$018;
								(_fprintf($247,2877,$vararg_buffer58)|0);
							}
							if ($160) {
								$248 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer61>>2] = $157;
								(_fprintf($248,2895,$vararg_buffer61)|0);
							}
							if ($ish1top$0$off0) {
								$249 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer64>>2] = $row$018;
								(_fprintf($249,2912,$vararg_buffer64)|0);
							}
							if ($ish1bot$0$off0) {
								$250 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer67>>2] = $row$018;
								(_fprintf($250,2925,$vararg_buffer67)|0);
							}
							if ($ish2top$1$off0) {
								$251 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer70>>2] = $row$018;
								(_fprintf($251,2941,$vararg_buffer70)|0);
							}
							if ($ish2bot$1$off0) {
								$252 = HEAP32[$$pre$phi48Z2D>>2]|0;
								HEAP32[$vararg_buffer73>>2] = $row$018;
								(_fprintf($252,2954,$vararg_buffer73)|0);
							}
							$253 = HEAP32[$$pre$phi48Z2D>>2]|0;
							(_fputc(10,$253)|0);
							$254 = ($row$018|0)<($144|0);
							if (!($254)) {
								break L50;
							}
							$255 = (($row$018) + 1)|0;
							$$pre35 = HEAP32[$66>>2]|0;
							$$pre36 = HEAP32[$70>>2]|0;
							$$pre37 = HEAP32[$136>>2]|0;
							$$pre38 = HEAP32[$141>>2]|0;
							$148 = $$pre35;$150 = $$pre36;$155 = $$pre37;$157 = $$pre38;$row$018 = $255;
						}
					}
				} while(0);
				$146 = HEAP32[$$pre$phi48Z2D>>2]|0;
				(_fwrite(2819,2,1,$146)|0);
				STACKTOP = sp;return;
			}
			function __ZNK9Character6xprintERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0;
				var $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer9 = sp + 32|0;
				$vararg_buffer5 = sp + 24|0;
				$vararg_buffer = sp;
				$0 = ((($control)) + 20|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($this)) + 8|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = (1 - ($2))|0;
				$8 = (($7) + ($6))|0;
				$9 = ((($this)) + 12|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = (1 - ($4))|0;
				$12 = (($11) + ($10))|0;
				$13 = ((($this)) + 28|0);
				$14 = ((($this)) + 32|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = HEAP32[$13>>2]|0;
				$17 = (($15) - ($16))|0;
				$18 = $17 >> 3;
				HEAP32[$vararg_buffer>>2] = $2;
				$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
				HEAP32[$vararg_ptr1>>2] = $4;
				$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
				HEAP32[$vararg_ptr2>>2] = $8;
				$vararg_ptr3 = ((($vararg_buffer)) + 12|0);
				HEAP32[$vararg_ptr3>>2] = $12;
				$vararg_ptr4 = ((($vararg_buffer)) + 16|0);
				HEAP32[$vararg_ptr4>>2] = $18;
				(_fprintf($1,2970,$vararg_buffer)|0);
				$19 = HEAP32[$14>>2]|0;
				$20 = HEAP32[$13>>2]|0;
				$21 = (($19) - ($20))|0;
				$22 = ($21|0)>(0);
				if (!($22)) {
					$24 = HEAP32[$0>>2]|0;
					(_fputc(10,$24)|0);
					STACKTOP = sp;return;
				}
				$23 = ((($control)) + 29|0);
				$$in = $20;$i$02 = 0;
				while(1) {
					$25 = $$in;
					$26 = HEAP8[$23>>0]|0;
					$27 = ($26<<24>>24)==(0);
					if ($27) {
						$28 = (($25) + ($i$02<<3)|0);
						$29 = HEAP32[$28>>2]|0;
						$30 = (__ZN3UCS11map_to_byteEi($29)|0);
						$31 = ($30<<24>>24)!=(0);
						$32 = HEAP32[$0>>2]|0;
						$33 = $30&255;
						$34 = $31 ? $33 : 95;
						$35 = HEAP32[$13>>2]|0;
						$36 = (((($35) + ($i$02<<3)|0)) + 4|0);
						$37 = HEAP32[$36>>2]|0;
						HEAP32[$vararg_buffer5>>2] = $34;
						$vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
						HEAP32[$vararg_ptr8>>2] = $37;
						(_fprintf($32,2990,$vararg_buffer5)|0);
					} else {
						$38 = HEAP32[$0>>2]|0;
						$39 = (($25) + ($i$02<<3)|0);
						$40 = HEAP32[$39>>2]|0;
						$41 = (__ZN3UCS11ucs_to_utf8Ei($40)|0);
						$42 = HEAP32[$13>>2]|0;
						$43 = (((($42) + ($i$02<<3)|0)) + 4|0);
						$44 = HEAP32[$43>>2]|0;
						HEAP32[$vararg_buffer9>>2] = $41;
						$vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
						HEAP32[$vararg_ptr12>>2] = $44;
						(_fprintf($38,2999,$vararg_buffer9)|0);
					}
					$45 = (($i$02) + 1)|0;
					$46 = HEAP32[$14>>2]|0;
					$47 = HEAP32[$13>>2]|0;
					$48 = (($46) - ($47))|0;
					$49 = $48 >> 3;
					$50 = ($45|0)<($49|0);
					if ($50) {
						$$in = $47;$i$02 = $45;
					} else {
						break;
					}
				}
				$24 = HEAP32[$0>>2]|0;
				(_fputc(10,$24)|0);
				STACKTOP = sp;return;
			}
			function __ZN9Character12apply_filterEN6Filter4TypeE($this,$filter) {
				$this = $this|0;
				$filter = $filter|0;
				var $$lcssa93 = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert$i15 = 0, $$phi$trans$insert$i29 = 0, $$pre = 0, $$pre$i = 0, $$pre$i16 = 0, $$pre$i30 = 0, $$pre54 = 0, $$pre55 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
				var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
				var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
				var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i$i20 = 0, $__new_last2$i$i$i$i4 = 0, $code$off$i = 0, $code$off$i1 = 0, $code$off$i10 = 0, $code$off$i18 = 0, $code$off$i19 = 0, $code$off$i2 = 0, $code$off$i3 = 0, $code$off$i9 = 0, $i$043 = 0, $i$043$lcssa = 0, $i1$044 = 0, $i1$044$lcssa = 0;
				var $i2$046 = 0, $i2$046$lcssa = 0, $i2$04697 = 0, $notlhs$i = 0, $notlhs$i11 = 0, $notlhs$i25 = 0, $notrhs$i = 0, $notrhs$i12 = 0, $notrhs$i26 = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond$not$i13 = 0, $or$cond$not$i27 = 0, $or$cond2$i = 0, $or$cond2$i28 = 0, $remove$0$off0 = 0, $remove$1$off0 = 0, $remove$2$off0 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i21 = 0;
				var $scevgep$i$i$i$i5 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i22 = 0, $scevgep4$i$i$i$i6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				if ($4) {
					return;
				}
				$5 = $3;
				$6 = HEAP32[$5>>2]|0;
				switch ($filter|0) {
					case 1:  {
						$remove$0$off0 = 1;
						label = 4;
						break;
					}
					case 0:  {
						$remove$0$off0 = 0;
						label = 4;
						break;
					}
					case 3:  {
						$remove$1$off0 = 1;
						label = 22;
						break;
					}
					case 2:  {
						$remove$1$off0 = 0;
						label = 22;
						break;
					}
					case 6:  {
						$remove$2$off0 = 0;
						label = 38;
						break;
					}
					case 7: case 8:  {
						$remove$2$off0 = 1;
						label = 38;
						break;
					}
					default: {
						return;
					}
				}
				if ((label|0) == 4) {
					$7 = (__ZN3UCS7isalphaEi($6)|0);
					if ($7) {
						return;
					}
					$8 = (__ZN3UCS7isspaceEi($6)|0);
					if ($8) {
						return;
					}
					$9 = HEAP32[$1>>2]|0;
					$10 = HEAP32[$0>>2]|0;
					$11 = (($9) - ($10))|0;
					$12 = ($11|0)>(8);
					$13 = $10;
					L17: do {
						if ($12) {
							$15 = $13;$i$043 = 1;
							while(1) {
								$14 = (($15) + ($i$043<<3)|0);
								$16 = HEAP32[$14>>2]|0;
								$17 = (__ZN3UCS7isalphaEi($16)|0);
								if ($17) {
									$i$043$lcssa = $i$043;
									break;
								}
								$28 = (($i$043) + 1)|0;
								$29 = HEAP32[$1>>2]|0;
								$30 = HEAP32[$0>>2]|0;
								$31 = (($29) - ($30))|0;
								$32 = $31 >> 3;
								$33 = ($28|0)<($32|0);
								$34 = $30;
								if ($33) {
									$15 = $34;$i$043 = $28;
								} else {
									$36 = $34;
									break L17;
								}
							}
							$18 = HEAP32[$1>>2]|0;
							$19 = HEAP32[$0>>2]|0;
							$20 = (($18) - ($19))|0;
							$21 = $20 >> 3;
							$notlhs$i25 = ($20|0)>(0);
							$notrhs$i26 = ($i$043$lcssa|0)>(-1);
							$or$cond$not$i27 = $notrhs$i26 & $notlhs$i25;
							$22 = ($21|0)>($i$043$lcssa|0);
							$or$cond2$i28 = $22 & $or$cond$not$i27;
							$23 = $19;
							if ($or$cond2$i28) {
								$25 = $23;
							} else {
								__ZN5Ocrad14internal_errorEPKc(2509);
								$$phi$trans$insert$i29 = ((($this)) + 28|0);
								$$pre$i30 = HEAP32[$$phi$trans$insert$i29>>2]|0;
								$25 = $$pre$i30;
							}
							$24 = HEAP32[$25>>2]|0;
							$26 = (($25) + ($i$043$lcssa<<3)|0);
							$27 = HEAP32[$26>>2]|0;
							HEAP32[$25>>2] = $27;
							HEAP32[$26>>2] = $24;
							$36 = $25;
						} else {
							$36 = $13;
						}
					} while(0);
					$35 = HEAP32[$36>>2]|0;
					$37 = ($35|0)==(43);
					if ($37) {
						$38 = ((($this)) + 12|0);
						$39 = HEAP32[$38>>2]|0;
						$40 = ((($this)) + 4|0);
						$41 = HEAP32[$40>>2]|0;
						$42 = (($39) + 1)|0;
						$43 = (($42) - ($41))|0;
						$44 = $43 << 1;
						$45 = ((($this)) + 8|0);
						$46 = HEAP32[$45>>2]|0;
						$47 = HEAP32[$this>>2]|0;
						$48 = (($46) + 1)|0;
						$49 = (($48) - ($47))|0;
						$50 = ($49*3)|0;
						$51 = ($44|0)>($50|0);
						if ($51) {
							HEAP32[$36>>2] = 116;
							return;
						}
					}
					$52 = HEAP32[$36>>2]|0;
					$53 = (__ZN3UCS7isalphaEi($52)|0);
					if (!($53)) {
						$54 = HEAP32[$0>>2]|0;
						$55 = HEAP32[$54>>2]|0;
						$56 = (__ZN3UCS17to_nearest_letterEi($55)|0);
						$57 = HEAP32[$0>>2]|0;
						HEAP32[$57>>2] = $56;
					}
					if (!($remove$0$off0)) {
						return;
					}
					$58 = HEAP32[$0>>2]|0;
					$59 = HEAP32[$58>>2]|0;
					$60 = (__ZN3UCS7isalphaEi($59)|0);
					if ($60) {
						return;
					}
					$61 = ((($this)) + 28|0);
					$62 = HEAP32[$61>>2]|0;
					$63 = HEAP32[$1>>2]|0;
					$64 = ($63|0)==($62|0);
					if ($64) {
						return;
					}
					$__new_last2$i$i$i$i20 = $62;
					$scevgep$i$i$i$i21 = ((($63)) + -8|0);
					$65 = $scevgep$i$i$i$i21;
					$66 = (($65) - ($__new_last2$i$i$i$i20))|0;
					$67 = $66 >>> 3;
					$68 = $67 ^ -1;
					$scevgep4$i$i$i$i22 = (($63) + ($68<<3)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i$i22;
					return;
				}
				else if ((label|0) == 22) {
					$code$off$i19 = (($6) + -48)|0;
					$69 = ($code$off$i19>>>0)<(10);
					if ($69) {
						return;
					}
					$70 = (__ZN3UCS7isspaceEi($6)|0);
					if ($70) {
						return;
					}
					$71 = HEAP32[$1>>2]|0;
					$72 = HEAP32[$0>>2]|0;
					$73 = (($71) - ($72))|0;
					$74 = ($73|0)>(8);
					$75 = $72;
					L51: do {
						if ($74) {
							$76 = $73 >> 3;
							$i1$044 = 1;
							while(1) {
								$77 = (($75) + ($i1$044<<3)|0);
								$78 = HEAP32[$77>>2]|0;
								$code$off$i18 = (($78) + -48)|0;
								$79 = ($code$off$i18>>>0)<(10);
								if ($79) {
									$$lcssa93 = $78;$i1$044$lcssa = $i1$044;
									break;
								}
								$83 = (($i1$044) + 1)|0;
								$84 = ($83|0)<($76|0);
								if ($84) {
									$i1$044 = $83;
								} else {
									$86 = $75;
									break L51;
								}
							}
							$notlhs$i11 = ($73|0)>(0);
							$notrhs$i12 = ($i1$044$lcssa|0)>(-1);
							$or$cond$not$i13 = $notrhs$i12 & $notlhs$i11;
							if ($or$cond$not$i13) {
								$$pre54 = $75;$82 = $$lcssa93;
							} else {
								__ZN5Ocrad14internal_errorEPKc(2509);
								$$phi$trans$insert$i15 = ((($this)) + 28|0);
								$$pre$i16 = HEAP32[$$phi$trans$insert$i15>>2]|0;
								$$phi$trans$insert = (($$pre$i16) + ($i1$044$lcssa<<3)|0);
								$$pre55 = HEAP32[$$phi$trans$insert>>2]|0;
								$$pre54 = $$pre$i16;$82 = $$pre55;
							}
							$80 = HEAP32[$$pre54>>2]|0;
							$81 = (($$pre54) + ($i1$044$lcssa<<3)|0);
							HEAP32[$$pre54>>2] = $82;
							HEAP32[$81>>2] = $80;
							$86 = $$pre54;
						} else {
							$86 = $75;
						}
					} while(0);
					$85 = HEAP32[$86>>2]|0;
					$code$off$i10 = (($85) + -48)|0;
					$87 = ($code$off$i10>>>0)<(10);
					if ($87) {
						$91 = $86;
					} else {
						$88 = (__ZN3UCS16to_nearest_digitEi($85)|0);
						$89 = HEAP32[$0>>2]|0;
						HEAP32[$89>>2] = $88;
						$91 = $89;
					}
					if (!($remove$1$off0)) {
						return;
					}
					$90 = HEAP32[$91>>2]|0;
					$code$off$i9 = (($90) + -48)|0;
					$92 = ($code$off$i9>>>0)<(10);
					if ($92) {
						return;
					}
					$93 = HEAP32[$1>>2]|0;
					$94 = ($93|0)==($91|0);
					if ($94) {
						return;
					}
					$__new_last2$i$i$i$i4 = $91;
					$scevgep$i$i$i$i5 = ((($93)) + -8|0);
					$95 = $scevgep$i$i$i$i5;
					$96 = (($95) - ($__new_last2$i$i$i$i4))|0;
					$97 = $96 >>> 3;
					$98 = $97 ^ -1;
					$scevgep4$i$i$i$i6 = (($93) + ($98<<3)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i$i6;
					return;
				}
				else if ((label|0) == 38) {
					$99 = (__ZN3UCS7isupperEi($6)|0);
					$code$off$i3 = (($6) + -48)|0;
					$100 = ($code$off$i3>>>0)<(10);
					$or$cond = $100 | $99;
					if ($or$cond) {
						return;
					}
					$101 = (__ZN3UCS7isspaceEi($6)|0);
					if ($101) {
						return;
					}
					$102 = HEAP32[$1>>2]|0;
					$103 = HEAP32[$0>>2]|0;
					$104 = (($102) - ($103))|0;
					$105 = ($104|0)>(8);
					$106 = $103;
					L81: do {
						if ($105) {
							$108 = $106;$i2$046 = 1;
							while(1) {
								$107 = (($108) + ($i2$046<<3)|0);
								$109 = HEAP32[$107>>2]|0;
								$110 = (__ZN3UCS7isupperEi($109)|0);
								if ($110) {
									$i2$046$lcssa = $i2$046;
									label = 42;
									break;
								}
								$112 = HEAP32[$0>>2]|0;
								$113 = (($112) + ($i2$046<<3)|0);
								$114 = HEAP32[$113>>2]|0;
								$code$off$i2 = (($114) + -48)|0;
								$115 = ($code$off$i2>>>0)<(10);
								$116 = $112;
								if ($115) {
									$119 = $116;$152 = $112;$i2$04697 = $i2$046;
									break;
								}
								$127 = (($i2$046) + 1)|0;
								$128 = HEAP32[$1>>2]|0;
								$129 = (($128) - ($116))|0;
								$130 = $129 >> 3;
								$131 = ($127|0)<($130|0);
								if ($131) {
									$108 = $112;$i2$046 = $127;
								} else {
									$133 = $112;
									break L81;
								}
							}
							if ((label|0) == 42) {
								$$pre = HEAP32[$0>>2]|0;
								$111 = $$pre;
								$119 = $$pre;$152 = $111;$i2$04697 = $i2$046$lcssa;
							}
							$117 = HEAP32[$1>>2]|0;
							$118 = (($117) - ($119))|0;
							$120 = $118 >> 3;
							$notlhs$i = ($118|0)>(0);
							$notrhs$i = ($i2$04697|0)>(-1);
							$or$cond$not$i = $notrhs$i & $notlhs$i;
							$121 = ($120|0)>($i2$04697|0);
							$or$cond2$i = $121 & $or$cond$not$i;
							$122 = $119;
							if ($or$cond2$i) {
								$124 = $122;$153 = $152;
							} else {
								__ZN5Ocrad14internal_errorEPKc(2509);
								$$phi$trans$insert$i = ((($this)) + 28|0);
								$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
								$124 = $$pre$i;$153 = $$pre$i;
							}
							$123 = HEAP32[$124>>2]|0;
							$125 = (($124) + ($i2$04697<<3)|0);
							$126 = HEAP32[$125>>2]|0;
							HEAP32[$124>>2] = $126;
							HEAP32[$125>>2] = $123;
							$133 = $153;
						} else {
							$133 = $106;
						}
					} while(0);
					$132 = HEAP32[$133>>2]|0;
					$134 = (__ZN3UCS7isupperEi($132)|0);
					if (!($134)) {
						$135 = HEAP32[$0>>2]|0;
						$136 = HEAP32[$135>>2]|0;
						$code$off$i1 = (($136) + -48)|0;
						$137 = ($code$off$i1>>>0)<(10);
						if (!($137)) {
							$138 = (__ZN3UCS20to_nearest_upper_numEi($136)|0);
							$139 = HEAP32[$0>>2]|0;
							HEAP32[$139>>2] = $138;
						}
					}
					if (!($remove$2$off0)) {
						return;
					}
					$140 = HEAP32[$0>>2]|0;
					$141 = HEAP32[$140>>2]|0;
					$142 = (__ZN3UCS7isupperEi($141)|0);
					if ($142) {
						return;
					}
					$143 = HEAP32[$0>>2]|0;
					$144 = HEAP32[$143>>2]|0;
					$code$off$i = (($144) + -48)|0;
					$145 = ($code$off$i>>>0)<(10);
					if ($145) {
						return;
					}
					$146 = HEAP32[$1>>2]|0;
					$147 = ($146|0)==($143|0);
					if ($147) {
						return;
					}
					$__new_last2$i$i$i$i = $143;
					$scevgep$i$i$i$i = ((($146)) + -8|0);
					$148 = $scevgep$i$i$i$i;
					$149 = (($148) - ($__new_last2$i$i$i$i))|0;
					$150 = $149 >>> 3;
					$151 = $150 ^ -1;
					$scevgep4$i$i$i$i = (($146) + ($151<<3)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i$i;
					return;
				}
			}
			function __ZN9Character17apply_user_filterERK11User_filter($this,$user_filter) {
				$this = $this|0;
				$user_filter = $user_filter|0;
				var $$in = 0, $$lcssa = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $i$02 = 0, $i$02$lcssa = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond$not$i = 0, $or$cond2$i = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				if ($4) {
					return;
				}
				$5 = $3;
				$6 = HEAP32[$5>>2]|0;
				$7 = (__ZN3UCS7isspaceEi($6)|0);
				if ($7) {
					return;
				}
				$8 = HEAP32[$0>>2]|0;
				$9 = HEAP32[$8>>2]|0;
				$10 = (__ZNK11User_filter12get_new_codeEi($user_filter,$9)|0);
				$11 = ($10|0)>(-1);
				if ($11) {
					$17 = HEAP32[$0>>2]|0;
					HEAP32[$17>>2] = $10;
					return;
				}
				$12 = HEAP32[$1>>2]|0;
				$13 = HEAP32[$0>>2]|0;
				$14 = (($12) - ($13))|0;
				$15 = ($14|0)>(8);
				$16 = $13;
				L11: do {
					if ($15) {
						$19 = $16;$i$02 = 1;
						while(1) {
							$18 = (($19) + ($i$02<<3)|0);
							$20 = HEAP32[$18>>2]|0;
							$21 = (__ZNK11User_filter12get_new_codeEi($user_filter,$20)|0);
							$22 = ($21|0)>(-1);
							if ($22) {
								$$lcssa = $21;$i$02$lcssa = $i$02;
								break;
							}
							$29 = (($i$02) + 1)|0;
							$30 = HEAP32[$1>>2]|0;
							$31 = HEAP32[$0>>2]|0;
							$32 = (($30) - ($31))|0;
							$33 = $32 >> 3;
							$34 = ($29|0)<($33|0);
							$35 = $31;
							if ($34) {
								$19 = $35;$i$02 = $29;
							} else {
								$$in = $30;$42 = $35;
								break L11;
							}
						}
						$23 = HEAP32[$1>>2]|0;
						$24 = HEAP32[$0>>2]|0;
						$25 = (($23) - ($24))|0;
						$26 = $25 >> 3;
						$notlhs$i = ($25|0)>(0);
						$notrhs$i = ($i$02$lcssa|0)>(-1);
						$or$cond$not$i = $notrhs$i & $notlhs$i;
						$27 = ($26|0)>($i$02$lcssa|0);
						$or$cond2$i = $27 & $or$cond$not$i;
						$28 = $24;
						if ($or$cond2$i) {
							$37 = $28;
						} else {
							__ZN5Ocrad14internal_errorEPKc(2509);
							$$phi$trans$insert$i = ((($this)) + 28|0);
							$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
							$37 = $$pre$i;
						}
						$36 = HEAP32[$37>>2]|0;
						$38 = (($37) + ($i$02$lcssa<<3)|0);
						$39 = HEAP32[$38>>2]|0;
						HEAP32[$37>>2] = $39;
						HEAP32[$38>>2] = $36;
						HEAP32[$37>>2] = $$lcssa;
						return;
					} else {
						$$in = $12;$42 = $16;
					}
				} while(0);
				$40 = $$in;
				$41 = ($40|0)==($42|0);
				if ($41) {
					return;
				}
				$__new_last2$i$i$i$i = $42;
				$scevgep$i$i$i$i = ((($40)) + -8|0);
				$43 = $scevgep$i$i$i$i;
				$44 = (($43) - ($__new_last2$i$i$i$i))|0;
				$45 = $44 >>> 3;
				$46 = $45 ^ -1;
				$scevgep4$i$i$i$i = (($40) + ($46<<3)|0);
				HEAP32[$1>>2] = $scevgep4$i$i$i$i;
				return;
			}
			function __ZN8TextlineD2Ev($this) {
				$this = $this|0;
				var $$cast = 0, $$cast16 = 0, $$lcssa = 0, $$lcssa29 = 0, $$pre = 0, $$pre19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
				var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $i$015 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i2 = 0, $scevgep$i$i$i7 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i3 = 0, $scevgep4$i$i$i8 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = ($2|0)==($3|0);
				$$cast = $3;
				$5 = $2;
				L1: do {
					if ($4) {
						$$lcssa = $$cast;$8 = $5;
					} else {
						$15 = $$cast;$58 = $5;$59 = $3;$60 = $2;$i$015 = 0;
						while(1) {
							$14 = (($15) + ($i$015<<2)|0);
							$16 = HEAP32[$14>>2]|0;
							$17 = ($16|0)==(0|0);
							if ($17) {
								$23 = $59;$24 = $60;$61 = $58;
							} else {
								__THREW__ = 0;
								invoke_vi(176,($16|0));
								$18 = __THREW__; __THREW__ = 0;
								$19 = $18&1;
								if ($19) {
									$$lcssa29 = $16;
									break;
								}
								__ZdlPv($16);
								$$pre = HEAP32[$1>>2]|0;
								$$pre19 = HEAP32[$0>>2]|0;
								$20 = $$pre;
								$23 = $$pre19;$24 = $$pre;$61 = $20;
							}
							$21 = (($i$015) + 1)|0;
							$22 = (($24) - ($23))|0;
							$25 = $22 >> 2;
							$26 = ($21>>>0)<($25>>>0);
							$$cast16 = $23;
							if ($26) {
								$15 = $$cast16;$58 = $61;$59 = $23;$60 = $24;$i$015 = $21;
							} else {
								$$lcssa = $$cast16;$8 = $61;
								break L1;
							}
						}
						$27 = ___cxa_find_matching_catch_2()|0;
						$28 = tempRet0;
						__ZdlPv($$lcssa29);
						$29 = HEAP32[$0>>2]|0;
						$30 = ($29|0)==(0|0);
						$31 = $29;
						if (!($30)) {
							$32 = HEAP32[$1>>2]|0;
							$33 = ($32|0)==($29|0);
							if (!($33)) {
								$scevgep$i$i$i7 = ((($32)) + -4|0);
								$34 = $scevgep$i$i$i7;
								$35 = (($34) - ($31))|0;
								$36 = $35 >>> 2;
								$37 = $36 ^ -1;
								$scevgep4$i$i$i8 = (($32) + ($37<<2)|0);
								HEAP32[$1>>2] = $scevgep4$i$i$i8;
							}
							__ZdlPv($29);
						}
						$48 = HEAP32[$this>>2]|0;
						$49 = ($48|0)==(0|0);
						$50 = $48;
						if ($49) {
							___resumeException($27|0);
							// unreachable;
						}
						$51 = ((($this)) + 4|0);
						$52 = HEAP32[$51>>2]|0;
						$53 = ($52|0)==($48|0);
						if (!($53)) {
							$scevgep$i$i$i$i = ((($52)) + -20|0);
							$54 = $scevgep$i$i$i$i;
							$55 = (($54) - ($50))|0;
							$56 = (($55>>>0) / 20)&-1;
							$57 = $56 ^ -1;
							$scevgep4$i$i$i$i = (($52) + (($57*20)|0)|0);
							HEAP32[$51>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($48);
						___resumeException($27|0);
						// unreachable;
					}
				} while(0);
				$6 = ($$lcssa|0)==(0|0);
				$7 = $$lcssa;
				if (!($6)) {
					$9 = ($8|0)==($$lcssa|0);
					if (!($9)) {
						$scevgep$i$i$i = ((($8)) + -4|0);
						$10 = $scevgep$i$i$i;
						$11 = (($10) - ($7))|0;
						$12 = $11 >>> 2;
						$13 = $12 ^ -1;
						$scevgep4$i$i$i = (($8) + ($13<<2)|0);
						HEAP32[$1>>2] = $scevgep4$i$i$i;
					}
					__ZdlPv($$lcssa);
				}
				$38 = HEAP32[$this>>2]|0;
				$39 = ($38|0)==(0|0);
				$40 = $38;
				if ($39) {
					return;
				}
				$41 = ((($this)) + 4|0);
				$42 = HEAP32[$41>>2]|0;
				$43 = ($42|0)==($38|0);
				if (!($43)) {
					$scevgep$i$i$i$i2 = ((($42)) + -20|0);
					$44 = $scevgep$i$i$i$i2;
					$45 = (($44) - ($40))|0;
					$46 = (($45>>>0) / 20)&-1;
					$47 = $46 ^ -1;
					$scevgep4$i$i$i$i3 = (($42) + (($47*20)|0)|0);
					HEAP32[$41>>2] = $scevgep4$i$i$i$i3;
				}
				__ZdlPv($38);
				return;
			}
			function __ZN8Textline9set_trackEv($this) {
				$this = $this|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $lpad$phi$index = 0;
				var $lpad$phi$index2 = 0, $rv = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$rv = sp;
				HEAP32[$rv>>2] = 0;
				$0 = ((($rv)) + 4|0);
				HEAP32[$0>>2] = 0;
				$1 = ((($rv)) + 8|0);
				HEAP32[$1>>2] = 0;
				$2 = ((($this)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 16|0);
				$5 = ((($this)) + 20|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = $8 >> 2;
				$10 = ($3>>>0)<($9>>>0);
				L1: do {
					if ($10) {
						$11 = ((($rv)) + 8|0);
						$$in = $7;$i$06 = $3;
						L3: while(1) {
							$14 = $$in;
							$15 = (($14) + ($i$06<<2)|0);
							$16 = HEAP32[$15>>2]|0;
							__THREW__ = 0;
							$17 = (invoke_iii(178,($16|0),32)|0);
							$18 = __THREW__; __THREW__ = 0;
							$19 = $18&1;
							if ($19) {
								break;
							}
							do {
								if (!($17)) {
									$20 = HEAP32[$4>>2]|0;
									$21 = (($20) + ($i$06<<2)|0);
									$22 = HEAP32[$21>>2]|0;
									$23 = HEAP32[$0>>2]|0;
									$24 = HEAP32[$11>>2]|0;
									$25 = ($23|0)==($24|0);
									if ($25) {
										__THREW__ = 0;
										invoke_vii(179,($rv|0),($22|0));
										$27 = __THREW__; __THREW__ = 0;
										$28 = $27&1;
										if ($28) {
											break L3;
										} else {
											break;
										}
									} else {
										;HEAP32[$23>>2]=HEAP32[$22>>2]|0;HEAP32[$23+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$22+12>>2]|0;
										$26 = ((($23)) + 16|0);
										HEAP32[$0>>2] = $26;
										break;
									}
								}
							} while(0);
							$42 = (($i$06) + 1)|0;
							$43 = HEAP32[$5>>2]|0;
							$44 = HEAP32[$4>>2]|0;
							$45 = (($43) - ($44))|0;
							$46 = $45 >> 2;
							$47 = ($42>>>0)<($46>>>0);
							if ($47) {
								$$in = $44;$i$06 = $42;
							} else {
								label = 3;
								break L1;
							}
						}
						$29 = ___cxa_find_matching_catch_2()|0;
						$30 = tempRet0;
						$lpad$phi$index = $29;$lpad$phi$index2 = $30;
					} else {
						label = 3;
					}
				} while(0);
				do {
					if ((label|0) == 3) {
						__THREW__ = 0;
						invoke_vii(177,($this|0),($rv|0));
						$12 = __THREW__; __THREW__ = 0;
						$13 = $12&1;
						if ($13) {
							$31 = ___cxa_find_matching_catch_2()|0;
							$32 = tempRet0;
							$lpad$phi$index = $31;$lpad$phi$index2 = $32;
							break;
						}
						$48 = HEAP32[$rv>>2]|0;
						$49 = ($48|0)==(0|0);
						$50 = $48;
						if ($49) {
							STACKTOP = sp;return;
						}
						$51 = HEAP32[$0>>2]|0;
						$52 = ($51|0)==($48|0);
						if (!($52)) {
							$scevgep$i$i$i = ((($51)) + -16|0);
							$53 = $scevgep$i$i$i;
							$54 = (($53) - ($50))|0;
							$55 = $54 >>> 4;
							$56 = $55 ^ -1;
							$scevgep4$i$i$i = (($51) + ($56<<4)|0);
							HEAP32[$0>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($48);
						STACKTOP = sp;return;
					}
				} while(0);
				$33 = HEAP32[$rv>>2]|0;
				$34 = ($33|0)==(0|0);
				$35 = $33;
				if ($34) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$36 = HEAP32[$0>>2]|0;
				$37 = ($36|0)==($33|0);
				if (!($37)) {
					$scevgep$i$i$i1 = ((($36)) + -16|0);
					$38 = $scevgep$i$i$i1;
					$39 = (($38) - ($35))|0;
					$40 = $39 >>> 4;
					$41 = $40 ^ -1;
					$scevgep4$i$i$i2 = (($36) + ($41<<4)|0);
					HEAP32[$0>>2] = $scevgep4$i$i$i2;
				}
				__ZdlPv($33);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZNSt3__16vectorI9RectangleNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 4;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(268435455);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 4;
				$11 = ($10>>>0)<(134217727);
				if ($11) {
					$15 = $9 >> 3;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 4;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$32 = $18;
					} else {
						$$0$i1 = $17;$40 = $18;$41 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 4;
					$$0$i1 = 268435455;$40 = $12;$41 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 4;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $41;$32 = $40;
				}
				$24 = (($25) + ($26<<4)|0);
				$27 = (($25) + ($$0$i2<<4)|0);
				$28 = $27;
				;HEAP32[$24>>2]=HEAP32[$__x>>2]|0;HEAP32[$24+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$__x+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$__x+12>>2]|0;
				$29 = ((($24)) + 16|0);
				$30 = $29;
				$31 = (($32) - ($$in))|0;
				$33 = $31 >> 4;
				$34 = (0 - ($33))|0;
				$35 = (($24) + ($34<<4)|0);
				$36 = $35;
				$37 = $$in;
				_memcpy(($35|0),($37|0),($31|0))|0;
				HEAP32[$this>>2] = $36;
				HEAP32[$0>>2] = $30;
				HEAP32[$7>>2] = $28;
				$38 = ($$in|0)==(0);
				if ($38) {
					return;
				}
				$39 = $$in;
				__ZdlPv($39);
				return;
			}
			function __ZN8Textline19verify_big_initialsEv($this) {
				$this = $this|0;
				var $$in$i = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa9 = 0, $$pre = 0, $$pre$i = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01$i = 0, $c$1$i = 0, $c$1$i$lcssa = 0, $i$03$i = 0, $sum$02$i = 0, $sum$1$i = 0, $sum$1$i$lcssa = 0, $sum$2$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>(0);
				if (!($2)) {
					return;
				}
				$3 = ((($this)) + 16|0);
				$4 = ((($this)) + 20|0);
				$$pre = HEAP32[$3>>2]|0;
				$$pre2 = HEAP32[$4>>2]|0;
				$5 = $$pre;
				$18 = $5;$19 = $$pre2;$7 = $1;$9 = $$pre;
				while(1) {
					$6 = (($7) + -1)|0;
					$8 = (($9) + ($6<<2)|0);
					$10 = HEAP32[$8>>2]|0;
					$11 = ((($10)) + 12|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = ((($10)) + 4|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = (($12) + 1)|0;
					$16 = (($15) - ($14))|0;
					$17 = (($19) - ($18))|0;
					$20 = $17 >> 2;
					$21 = ($7|0)<($20|0);
					$22 = $18;
					if ($21) {
						$$in$i = $18;$c$01$i = 0;$i$03$i = $7;$sum$02$i = 0;
						while(1) {
							$24 = $$in$i;
							$25 = (($24) + ($i$03$i<<2)|0);
							$26 = HEAP32[$25>>2]|0;
							$27 = (__ZNK9Character5maybeEi($26,32)|0);
							if ($27) {
								$$pre$i = HEAP32[$3>>2]|0;
								$28 = $$pre$i;
								$44 = $$pre$i;$56 = $28;$c$1$i = $c$01$i;$sum$1$i = $sum$02$i;
							} else {
								$29 = (($c$01$i) + 1)|0;
								$30 = HEAP32[$3>>2]|0;
								$31 = (($30) + ($i$03$i<<2)|0);
								$32 = HEAP32[$31>>2]|0;
								$33 = ((($32)) + 12|0);
								$34 = HEAP32[$33>>2]|0;
								$35 = ((($32)) + 4|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = (($sum$02$i) + 1)|0;
								$38 = (($37) + ($34))|0;
								$39 = (($38) - ($36))|0;
								$40 = $30;
								$44 = $40;$56 = $30;$c$1$i = $29;$sum$1$i = $39;
							}
							$41 = (($i$03$i) + 1)|0;
							$42 = HEAP32[$4>>2]|0;
							$43 = (($42) - ($44))|0;
							$45 = $43 >> 2;
							$46 = ($41|0)<($45|0);
							if ($46) {
								$$in$i = $44;$c$01$i = $c$1$i;$i$03$i = $41;$sum$02$i = $sum$1$i;
							} else {
								$$lcssa = $44;$$lcssa10 = $42;$$lcssa9 = $56;$c$1$i$lcssa = $c$1$i;$sum$1$i$lcssa = $sum$1$i;
								break;
							}
						}
						$23 = ($c$1$i$lcssa|0)==(0);
						if ($23) {
							$53 = $$lcssa;$54 = $$lcssa10;$55 = $$lcssa9;$sum$2$i = $sum$1$i$lcssa;
						} else {
							$47 = (($sum$1$i$lcssa|0) / ($c$1$i$lcssa|0))&-1;
							$53 = $$lcssa;$54 = $$lcssa10;$55 = $$lcssa9;$sum$2$i = $47;
						}
					} else {
						$53 = $18;$54 = $19;$55 = $22;$sum$2$i = 0;
					}
					$48 = $sum$2$i << 1;
					$49 = ($16|0)>($48|0);
					if ($49) {
						label = 12;
						break;
					}
					$50 = HEAP32[$0>>2]|0;
					$51 = (($50) + -1)|0;
					HEAP32[$0>>2] = $51;
					$52 = ($50|0)>(1);
					if ($52) {
						$18 = $53;$19 = $54;$7 = $51;$9 = $55;
					} else {
						label = 12;
						break;
					}
				}
				if ((label|0) == 12) {
					return;
				}
			}
			function __ZNK8Textline11mean_heightEv($this) {
				$this = $this|0;
				var $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $c$1 = 0, $c$1$lcssa = 0, $i$03 = 0, $sum$02 = 0;
				var $sum$1 = 0, $sum$1$lcssa = 0, $sum$2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				$8 = ($1|0)<($7|0);
				if (!($8)) {
					$sum$2 = 0;
					return ($sum$2|0);
				}
				$$in = $5;$c$01 = 0;$i$03 = $1;$sum$02 = 0;
				while(1) {
					$10 = $$in;
					$11 = (($10) + ($i$03<<2)|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (__ZNK9Character5maybeEi($12,32)|0);
					if ($13) {
						$$pre = HEAP32[$2>>2]|0;
						$29 = $$pre;$c$1 = $c$01;$sum$1 = $sum$02;
					} else {
						$14 = (($c$01) + 1)|0;
						$15 = HEAP32[$2>>2]|0;
						$16 = (($15) + ($i$03<<2)|0);
						$17 = HEAP32[$16>>2]|0;
						$18 = ((($17)) + 12|0);
						$19 = HEAP32[$18>>2]|0;
						$20 = ((($17)) + 4|0);
						$21 = HEAP32[$20>>2]|0;
						$22 = (($sum$02) + 1)|0;
						$23 = (($22) + ($19))|0;
						$24 = (($23) - ($21))|0;
						$25 = $15;
						$29 = $25;$c$1 = $14;$sum$1 = $24;
					}
					$26 = (($i$03) + 1)|0;
					$27 = HEAP32[$3>>2]|0;
					$28 = (($27) - ($29))|0;
					$30 = $28 >> 2;
					$31 = ($26|0)<($30|0);
					if ($31) {
						$$in = $29;$c$01 = $c$1;$i$03 = $26;$sum$02 = $sum$1;
					} else {
						$c$1$lcssa = $c$1;$sum$1$lcssa = $sum$1;
						break;
					}
				}
				$9 = ($c$1$lcssa|0)==(0);
				if ($9) {
					$sum$2 = $sum$1$lcssa;
					return ($sum$2|0);
				}
				$32 = (($sum$1$lcssa|0) / ($c$1$lcssa|0))&-1;
				$sum$2 = $32;
				return ($sum$2|0);
			}
			function __ZNK8Textline9characterEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if (!($0)) {
					$1 = ((($this)) + 16|0);
					$2 = ((($this)) + 20|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if ($7) {
						$8 = $4;
						$10 = $8;
						$9 = (($10) + ($i<<2)|0);
						$11 = HEAP32[$9>>2]|0;
						return ($11|0);
					}
				}
				__ZN5Ocrad14internal_errorEPKc(3008);
				$$phi$trans$insert = ((($this)) + 16|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$10 = $$pre;
				$9 = (($10) + ($i<<2)|0);
				$11 = HEAP32[$9>>2]|0;
				return ($11|0);
			}
			function __ZNK8Textline12character_atEi($this,$col) {
				$this = $this|0;
				$col = $col|0;
				var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, $i$03 = 0, $i$03$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if (!($5)) {
					$19 = 0;
					return ($19|0);
				}
				$$in = $3;$i$03 = 0;
				while(1) {
					$6 = $$in;
					$7 = (($6) + ($i$03<<2)|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = (__ZNK9Rectangle10h_includesEi($8,$col)|0);
					if ($9) {
						$i$03$lcssa = $i$03;
						break;
					}
					$10 = (($i$03) + 1)|0;
					$11 = HEAP32[$1>>2]|0;
					$12 = HEAP32[$0>>2]|0;
					$13 = (($11) - ($12))|0;
					$14 = $13 >> 2;
					$15 = ($10|0)<($14|0);
					if ($15) {
						$$in = $12;$i$03 = $10;
					} else {
						$19 = 0;
						label = 6;
						break;
					}
				}
				if ((label|0) == 6) {
					return ($19|0);
				}
				$16 = HEAP32[$0>>2]|0;
				$17 = (($16) + ($i$03$lcssa<<2)|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = $18;
				return ($19|0);
			}
			function __ZNK8Textline7charboxERK9Character($agg$result,$this,$c) {
				$agg$result = $agg$result|0;
				$this = $this|0;
				$c = $c|0;
				var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$c>>2]|0;
				$1 = ((($c)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($2) + ($0))|0;
				$4 = (($3|0) / 2)&-1;
				$5 = (__ZNK5Track3topEi($this,$4)|0);
				$6 = HEAP32[$1>>2]|0;
				$7 = HEAP32[$c>>2]|0;
				$8 = (($7) + ($6))|0;
				$9 = (($8|0) / 2)&-1;
				$10 = (__ZNK5Track6bottomEi($this,$9)|0);
				__ZN9RectangleC2Eiiii($agg$result,$0,$5,$6,$10);
				return;
			}
			function __ZNK8Textline16is_key_characterEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>($i|0);
				if ($2) {
					label = 4;
				} else {
					$3 = ((($this)) + 16|0);
					$4 = ((($this)) + 20|0);
					$5 = HEAP32[$4>>2]|0;
					$6 = HEAP32[$3>>2]|0;
					$7 = (($5) - ($6))|0;
					$8 = $7 >> 2;
					$9 = ($8|0)>($i|0);
					if ($9) {
						$10 = $6;
						$$pre3 = ((($this)) + 16|0);
						$$pre$phiZ2D = $$pre3;$12 = $10;
					} else {
						label = 4;
					}
				}
				if ((label|0) == 4) {
					__ZN5Ocrad14internal_errorEPKc(3040);
					$$phi$trans$insert = ((($this)) + 16|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					$$pre$phiZ2D = $$phi$trans$insert;$12 = $$pre;
				}
				$11 = (($12) + ($i<<2)|0);
				$13 = HEAP32[$11>>2]|0;
				$14 = ((($13)) + 28|0);
				$15 = ((($13)) + 32|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = HEAP32[$14>>2]|0;
				$18 = ($16|0)==($17|0);
				if ($18) {
					$50 = 0;
					return ($50|0);
				}
				$19 = $17;
				$20 = HEAP32[$19>>2]|0;
				$21 = (__ZN3UCS7isalnumEi($20)|0);
				if (!($21)) {
					$50 = 0;
					return ($50|0);
				}
				$22 = HEAP32[$$pre$phiZ2D>>2]|0;
				$23 = (($22) + ($i<<2)|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = (__ZNK9Character5guessEi($24,0)|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = ($26|0)==(74);
				if ($27) {
					$50 = 0;
					return ($50|0);
				}
				$28 = HEAP32[$$pre$phiZ2D>>2]|0;
				$29 = (($28) + ($i<<2)|0);
				$30 = HEAP32[$29>>2]|0;
				$31 = ((($30)) + 12|0);
				$32 = HEAP32[$31>>2]|0;
				$33 = ((($30)) + 4|0);
				$34 = HEAP32[$33>>2]|0;
				$35 = (($32) + 1)|0;
				$36 = (($35) - ($34))|0;
				$37 = HEAP32[$this>>2]|0;
				$38 = ((($this)) + 4|0);
				$39 = HEAP32[$38>>2]|0;
				$40 = ($37|0)==($39|0);
				if ($40) {
					$44 = 0;
				} else {
					$41 = ((($37)) + 16|0);
					$42 = HEAP32[$41>>2]|0;
					$phitmp = $42 << 1;
					$44 = $phitmp;
				}
				$43 = ($36|0)<($44|0);
				if (!($43)) {
					$50 = 0;
					return ($50|0);
				}
				$45 = $36 << 1;
				if ($40) {
					$49 = 0;
				} else {
					$46 = ((($37)) + 16|0);
					$47 = HEAP32[$46>>2]|0;
					$49 = $47;
				}
				$48 = ($45|0)>($49|0);
				$50 = $48;
				return ($50|0);
			}
			function __ZN8Textline16delete_characterEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($i|0)<(0);
				if ($0) {
					label = 3;
				} else {
					$1 = ((($this)) + 16|0);
					$2 = ((($this)) + 20|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = HEAP32[$1>>2]|0;
					$5 = (($3) - ($4))|0;
					$6 = $5 >> 2;
					$7 = ($6|0)>($i|0);
					if (!($7)) {
						label = 3;
					}
				}
				if ((label|0) == 3) {
					__ZN5Ocrad14internal_errorEPKc(3079);
				}
				$8 = ((($this)) + 12|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($9|0)>($i|0);
				if ($10) {
					$11 = (($9) + -1)|0;
					HEAP32[$8>>2] = $11;
				}
				$12 = ((($this)) + 16|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = (($13) + ($i<<2)|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = ($15|0)==(0|0);
				do {
					if ($16) {
						$20 = $13;
					} else {
						__THREW__ = 0;
						invoke_vi(176,($15|0));
						$17 = __THREW__; __THREW__ = 0;
						$18 = $17&1;
						if ($18) {
							$34 = ___cxa_find_matching_catch_2()|0;
							$35 = tempRet0;
							__ZdlPv($15);
							___resumeException($34|0);
							// unreachable;
						} else {
							__ZdlPv($15);
							$$pre = HEAP32[$12>>2]|0;
							$20 = $$pre;
							break;
						}
					}
				} while(0);
				$19 = (($20) + ($i<<2)|0);
				$21 = ((($19)) + 4|0);
				$22 = ((($this)) + 20|0);
				$23 = HEAP32[$22>>2]|0;
				$24 = $21;
				$25 = (($23) - ($24))|0;
				$26 = $25 >> 2;
				_memmove(($19|0),($21|0),($25|0))|0;
				$27 = (($19) + ($26<<2)|0);
				$28 = HEAP32[$22>>2]|0;
				$29 = ($28|0)==($27|0);
				if ($29) {
					return;
				}
				$__new_last2$i$i$i = $27;
				$scevgep$i$i$i = ((($28)) + -4|0);
				$30 = $scevgep$i$i$i;
				$31 = (($30) - ($__new_last2$i$i$i))|0;
				$32 = $31 >>> 2;
				$33 = $32 ^ -1;
				$scevgep4$i$i$i = (($28) + ($33<<2)|0);
				HEAP32[$22>>2] = $scevgep4$i$i$i;
				return;
			}
			function __ZN8Textline16shift_characterpEP9Characterb($this,$p,$big) {
				$this = $this|0;
				$p = $p|0;
				$big = $big|0;
				var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 8|0;
				$0 = sp + 4|0;
				$1 = sp;
				HEAP32[$0>>2] = $p;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				$i$0 = $7;
				while(1) {
					$8 = ($i$0|0)>(0);
					if (!($8)) {
						$i$0$lcssa = $i$0;
						break;
					}
					$9 = (($i$0) + -1)|0;
					$10 = HEAP32[$2>>2]|0;
					$11 = (($10) + ($9<<2)|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = (__ZNK9Rectangle10h_precedesERKS_($p,$12)|0);
					if ($13) {
						$i$0 = $9;
					} else {
						$i$0$lcssa = $i$0;
						break;
					}
				}
				$14 = HEAP32[$2>>2]|0;
				$15 = (($14) + ($i$0$lcssa<<2)|0);
				$16 = $15;
				HEAP32[$1>>2] = $16;
				;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
				(__ZNSt3__16vectorIP9CharacterNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($2,$$byval_copy,$0)|0);
				$17 = ((($this)) + 12|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = ($i$0$lcssa|0)<($18|0);
				if ($19) {
					$20 = (($18) + 1)|0;
					HEAP32[$17>>2] = $20;
					STACKTOP = sp;return ($i$0$lcssa|0);
				}
				if (!($big)) {
					STACKTOP = sp;return ($i$0$lcssa|0);
				}
				$21 = (($i$0$lcssa) + 1)|0;
				HEAP32[$17>>2] = $21;
				STACKTOP = sp;return ($i$0$lcssa|0);
			}
			function __ZNSt3__16vectorIP9CharacterNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($this,$__position,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 2;
				$5 = (($0) + ($4<<2)|0);
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)<($9>>>0);
				$11 = $7;
				$12 = $9;
				if ($10) {
					$13 = ($5|0)==($7|0);
					if ($13) {
						$14 = HEAP32[$__x>>2]|0;
						HEAP32[$5>>2] = $14;
						$15 = HEAP32[$6>>2]|0;
						$16 = ((($15)) + 4|0);
						HEAP32[$6>>2] = $16;
						$__p$0 = $5;
						return ($__p$0|0);
					}
					$17 = ((($5)) + 4|0);
					$18 = $17;
					$19 = (($11) - ($18))|0;
					$20 = $19 >> 2;
					$21 = (($5) + ($20<<2)|0);
					$22 = ($21>>>0)<($7>>>0);
					if ($22) {
						$$in$i7 = $7;$__i$01$i = $21;
						while(1) {
							$23 = HEAP32[$__i$01$i>>2]|0;
							HEAP32[$$in$i7>>2] = $23;
							$24 = ((($__i$01$i)) + 4|0);
							$25 = HEAP32[$6>>2]|0;
							$26 = ((($25)) + 4|0);
							HEAP32[$6>>2] = $26;
							$27 = ($24>>>0)<($7>>>0);
							if ($27) {
								$$in$i7 = $26;$__i$01$i = $24;
							} else {
								break;
							}
						}
					}
					$28 = (0 - ($20))|0;
					$29 = (($7) + ($28<<2)|0);
					_memmove(($29|0),($5|0),($19|0))|0;
					$30 = ($5>>>0)>($__x>>>0);
					if ($30) {
						$__xr$0 = $__x;
					} else {
						$31 = HEAP32[$6>>2]|0;
						$32 = ($31>>>0)>($__x>>>0);
						$33 = ((($__x)) + 4|0);
						$$ = $32 ? $33 : $__x;
						$__xr$0 = $$;
					}
					$34 = HEAP32[$__xr$0>>2]|0;
					HEAP32[$5>>2] = $34;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$35 = (($11) - ($1))|0;
				$36 = $35 >> 2;
				$37 = (($36) + 1)|0;
				$38 = ($37>>>0)>(1073741823);
				if ($38) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre11 = HEAP32[$this>>2]|0;
					$39 = $$pre11;
					$$pre$phiZ2D = $8;$104 = $39;$41 = $$pre11;$42 = $$pre;
				} else {
					$$pre$phiZ2D = $8;$104 = $0;$41 = $1;$42 = $12;
				}
				$40 = (($42) - ($41))|0;
				$43 = $40 >> 2;
				$44 = ($43>>>0)<(536870911);
				if ($44) {
					$48 = $40 >> 1;
					$49 = ($48>>>0)<($37>>>0);
					$50 = $49 ? $37 : $48;
					$51 = $5;
					$52 = (($51) - ($41))|0;
					$53 = $52 >> 2;
					$54 = ($50|0)==(0);
					if ($54) {
						$$0$i9 = 0;$58 = 0;$59 = $53;$89 = $51;
					} else {
						$$0$i8 = $50;$105 = $53;$106 = $51;
						label = 15;
					}
				} else {
					$45 = $5;
					$46 = (($45) - ($41))|0;
					$47 = $46 >> 2;
					$$0$i8 = 1073741823;$105 = $47;$106 = $45;
					label = 15;
				}
				if ((label|0) == 15) {
					$55 = $$0$i8 << 2;
					$56 = (__Znwj($55)|0);
					$$0$i9 = $$0$i8;$58 = $56;$59 = $105;$89 = $106;
				}
				$57 = (($58) + ($59<<2)|0);
				$60 = $57;
				$61 = (($58) + ($$0$i9<<2)|0);
				$62 = $61;
				$63 = ($59|0)==($$0$i9|0);
				do {
					if ($63) {
						$64 = ($59|0)>(0);
						if ($64) {
							$65 = (($59) + 1)|0;
							$66 = (($65|0) / -2)&-1;
							$67 = (($57) + ($66<<2)|0);
							$68 = $67;
							$83 = $67;$86 = $104;$__v$sroa$21$0 = $68;$__v$sroa$37$0 = $62;
							break;
						}
						$69 = $59 << 1;
						$70 = ($59|0)==(0);
						$71 = $70 ? 1 : $69;
						$72 = $71 << 2;
						__THREW__ = 0;
						$73 = (invoke_ii(29,($72|0))|0);
						$74 = __THREW__; __THREW__ = 0;
						$75 = $74&1;
						if (!($75)) {
							$76 = $71 >>> 2;
							$77 = (($73) + ($76<<2)|0);
							$78 = $77;
							$79 = (($73) + ($71<<2)|0);
							$80 = $79;
							$81 = ($58|0)==(0|0);
							if ($81) {
								$83 = $77;$86 = $104;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
								break;
							}
							__ZdlPv($58);
							$$pre12 = HEAP32[$this>>2]|0;
							$83 = $77;$86 = $$pre12;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
							break;
						}
						$101 = ___cxa_find_matching_catch_2()|0;
						$102 = tempRet0;
						$103 = ($58|0)==(0|0);
						if ($103) {
							___resumeException($101|0);
							// unreachable;
						}
						__ZdlPv($58);
						___resumeException($101|0);
						// unreachable;
					} else {
						$83 = $57;$86 = $104;$__v$sroa$21$0 = $60;$__v$sroa$37$0 = $62;
					}
				} while(0);
				$82 = HEAP32[$__x>>2]|0;
				HEAP32[$83>>2] = $82;
				$84 = $__v$sroa$21$0;
				$85 = ((($84)) + 4|0);
				$87 = $86;
				$88 = (($89) - ($87))|0;
				$90 = $88 >> 2;
				$91 = (0 - ($90))|0;
				$92 = (($84) + ($91<<2)|0);
				$93 = $92;
				_memcpy(($92|0),($86|0),($88|0))|0;
				$94 = HEAP32[$6>>2]|0;
				$95 = (($94) - ($89))|0;
				$96 = $95 >> 2;
				_memcpy(($85|0),($5|0),($95|0))|0;
				$97 = (($85) + ($96<<2)|0);
				$98 = $97;
				$99 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $93;
				HEAP32[$6>>2] = $98;
				HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
				$100 = ($99|0)==(0|0);
				if ($100) {
					$__p$0 = $84;
					return ($__p$0|0);
				}
				__ZdlPv($99);
				$__p$0 = $84;
				return ($__p$0|0);
			}
			function __ZN8Textline12insert_spaceEib($this,$i,$tab) {
				$this = $this|0;
				$i = $i|0;
				$tab = $tab|0;
				var $$0 = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $re = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 32|0;
				$0 = sp;
				$re = sp + 16|0;
				$p = sp + 12|0;
				$1 = sp + 8|0;
				$2 = ($i|0)<(1);
				if ($2) {
					label = 3;
				} else {
					$3 = ((($this)) + 16|0);
					$4 = ((($this)) + 20|0);
					$5 = HEAP32[$4>>2]|0;
					$6 = HEAP32[$3>>2]|0;
					$7 = (($5) - ($6))|0;
					$8 = $7 >> 2;
					$9 = ($8|0)>($i|0);
					if (!($9)) {
						label = 3;
					}
				}
				if ((label|0) == 3) {
					__ZN5Ocrad14internal_errorEPKc(3118);
				}
				$10 = HEAP32[$this>>2]|0;
				$11 = ((($this)) + 4|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ($10|0)==($12|0);
				if ($13) {
					label = 6;
				} else {
					$14 = ((($10)) + 16|0);
					$15 = HEAP32[$14>>2]|0;
					$16 = ($15|0)==(0);
					if ($16) {
						label = 6;
					}
				}
				if ((label|0) == 6) {
					__ZN5Ocrad14internal_errorEPKc(3153);
				}
				$17 = ((($this)) + 16|0);
				$18 = (($i) + -1)|0;
				$19 = HEAP32[$17>>2]|0;
				$20 = (($19) + ($18<<2)|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = (($19) + ($i<<2)|0);
				$23 = HEAP32[$22>>2]|0;
				$24 = ((($21)) + 8|0);
				$25 = HEAP32[$24>>2]|0;
				$26 = HEAP32[$23>>2]|0;
				$27 = (($26) + -1)|0;
				$28 = ($25|0)<($27|0);
				if (!($28)) {
					$$0 = 0;
					STACKTOP = sp;return ($$0|0);
				}
				$29 = (($25) + 1)|0;
				$30 = (($26) + ($25))|0;
				$31 = (($30|0) / 2)&-1;
				$32 = (__ZNK5Track3topEi($this,$31)|0);
				$33 = (__ZNK5Track6bottomEi($this,$31)|0);
				__ZN9RectangleC2Eiiii($re,$29,$32,$27,$33);
				$34 = (__Znwj(40)|0);
				;HEAP32[$34>>2]=HEAP32[$re>>2]|0;HEAP32[$34+4>>2]=HEAP32[$re+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$re+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$re+12>>2]|0;
				$35 = ((($34)) + 16|0);
				$36 = ((($34)) + 28|0);
				;HEAP32[$35>>2]=0|0;HEAP32[$35+4>>2]=0|0;HEAP32[$35+8>>2]=0|0;HEAP32[$35+12>>2]=0|0;HEAP32[$35+16>>2]=0|0;HEAP32[$35+20>>2]=0|0;
				__THREW__ = 0;
				$37 = (invoke_ii(29,8)|0);
				$38 = __THREW__; __THREW__ = 0;
				$39 = $38&1;
				if ($39) {
					$50 = ___cxa_find_matching_catch_2()|0;
					$51 = tempRet0;
					__ZdlPv($34);
					___resumeException($50|0);
					// unreachable;
				}
				$40 = ((($34)) + 32|0);
				$41 = ((($34)) + 36|0);
				HEAP32[$36>>2] = $37;
				$42 = ((($37)) + 8|0);
				HEAP32[$41>>2] = $42;
				$43 = $tab&1;
				$44 = $37;
				$45 = $44;
				HEAP32[$45>>2] = 32;
				$46 = (($44) + 4)|0;
				$47 = $46;
				HEAP32[$47>>2] = $43;
				$48 = ((($37)) + 8|0);
				HEAP32[$40>>2] = $48;
				HEAP32[$p>>2] = $34;
				if ($tab) {
					HEAP32[$0>>2] = 9;
					$49 = ((($0)) + 4|0);
					HEAP32[$49>>2] = 0;
					__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($36,$0);
				}
				$52 = HEAP32[$17>>2]|0;
				$53 = (($52) + ($i<<2)|0);
				$54 = $53;
				HEAP32[$1>>2] = $54;
				;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
				(__ZNSt3__16vectorIP9CharacterNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($17,$$byval_copy,$p)|0);
				$$0 = 1;
				STACKTOP = sp;return ($$0|0);
			}
			function __ZN8Textline13insert_spacesEv($this) {
				$this = $this|0;
				var $$ = 0, $$$i$i15 = 0, $$$i$i31 = 0, $$$i$i36 = 0, $$$i$i43 = 0, $$$i$i48 = 0, $$$i$i51 = 0, $$$i$i58 = 0, $$$i$i61 = 0, $$0$i = 0, $$0$i2 = 0, $$0$i7 = 0, $$i$0 = 0, $$i1$0$us = 0, $$in = 0, $$in$i = 0, $$last$0 = 0, $$last$2$us = 0, $$lcssa136 = 0, $$phi$trans$insert$i$i = 0;
				var $$phi$trans$insert$i8 = 0, $$pr = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i14 = 0, $$pre$i18 = 0, $$pre$i22 = 0, $$pre$i26$us = 0, $$pre$i3$i = 0, $$pre$i5$us = 0, $$pre$i9 = 0, $$pre$phi114118Z2D = 0, $$pre$phi114119Z2D = 0, $$pre$phi116Z2D = 0, $$pre$phi120Z2D = 0, $$pre$phi121Z2D = 0, $$pre109 = 0, $$pre110 = 0, $$pre111 = 0;
				var $$pre112 = 0, $$pre113$pre$phiZZ2D = 0, $$pre115$pre$phiZZ2D = 0, $$pre117 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
				var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
				var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
				var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
				var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
				var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
				var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
				var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
				var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
				var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
				var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
				var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
				var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
				var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
				var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
				var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
				var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
				var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
				var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
				var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
				var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
				var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
				var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
				var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
				var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
				var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
				var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $99 = 0, $c$01$i = 0, $c$1$i = 0, $c$1$i$lcssa = 0, $exitcond = 0, $exitcond$i = 0, $first$0105 = 0, $i$0$i$lcssa = 0, $i$0$i125 = 0, $i$0$i125$phi = 0, $i$02$i = 0, $i$03$i = 0, $i$090 = 0, $i$1 = 0, $i1$0101 = 0, $i1$0101$us = 0, $i1$1$us = 0, $last$096 = 0;
				var $last$1 = 0, $last$1$lcssa = 0, $last$2102$us = 0, $last$3$us = 0, $last$5 = 0, $last$6 = 0, $mg = 0, $mw = 0, $nospaces$093 = 0, $nospaces$1 = 0, $nospaces$1$lcssa = 0, $nospsum$088 = 0, $nospsum$1 = 0, $nospsum$1$lcssa = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i30 = 0, $or$cond$i$i35 = 0, $or$cond$i$i42 = 0, $or$cond$i$i47 = 0;
				var $or$cond$i$i50 = 0, $or$cond$i$i57 = 0, $or$cond$i$i60 = 0, $spaces$094 = 0, $spaces$1 = 0, $spaces$1$lcssa = 0, $spsum$092 = 0, $spsum$1 = 0, $spsum$1$lcssa = 0, $sum$01$i = 0, $sum$02$i = 0, $sum$1$i = 0, $sum$1$i$lcssa = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i28 = 0, $tmp$i$i33 = 0, $tmp$i$i40 = 0, $tmp$i$i45 = 0, $tmp$i$i53 = 0;
				var $tmp$i$i55 = 0, $tmp$i38 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 168|0;
				$tmp$i$i55 = sp + 88|0;
				$1 = sp + 160|0;
				$tmp$i$i53 = sp + 80|0;
				$2 = sp + 152|0;
				$tmp$i$i45 = sp + 72|0;
				$3 = sp + 144|0;
				$tmp$i$i40 = sp + 64|0;
				$tmp$i38 = sp + 56|0;
				$4 = sp + 136|0;
				$tmp$i$i33 = sp + 48|0;
				$5 = sp + 128|0;
				$tmp$i$i28 = sp + 40|0;
				$6 = sp + 120|0;
				$7 = sp + 112|0;
				$tmp$i = sp + 32|0;
				$8 = sp + 104|0;
				$tmp$i$i = sp + 24|0;
				$mw = sp + 16|0;
				$mg = sp + 8|0;
				$9 = sp;
				$10 = sp + 96|0;
				$11 = ((($this)) + 12|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = ((($this)) + 16|0);
				$14 = ((($this)) + 20|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = HEAP32[$13>>2]|0;
				$17 = (($15) - ($16))|0;
				$18 = $17 >> 2;
				$19 = ($12|0)<($18|0);
				if ($19) {
					$$in$i = $16;$c$01$i = 0;$i$03$i = $12;$sum$02$i = 0;
					while(1) {
						$21 = $$in$i;
						$22 = (($21) + ($i$03$i<<2)|0);
						$23 = HEAP32[$22>>2]|0;
						$24 = (__ZNK9Character5maybeEi($23,32)|0);
						if ($24) {
							$$pre$i = HEAP32[$13>>2]|0;
							$39 = $$pre$i;$c$1$i = $c$01$i;$sum$1$i = $sum$02$i;
						} else {
							$25 = (($c$01$i) + 1)|0;
							$26 = HEAP32[$13>>2]|0;
							$27 = (($26) + ($i$03$i<<2)|0);
							$28 = HEAP32[$27>>2]|0;
							$29 = ((($28)) + 8|0);
							$30 = HEAP32[$29>>2]|0;
							$31 = HEAP32[$28>>2]|0;
							$32 = (($sum$02$i) + 1)|0;
							$33 = (($32) + ($30))|0;
							$34 = (($33) - ($31))|0;
							$35 = $26;
							$39 = $35;$c$1$i = $25;$sum$1$i = $34;
						}
						$36 = (($i$03$i) + 1)|0;
						$37 = HEAP32[$14>>2]|0;
						$38 = (($37) - ($39))|0;
						$40 = $38 >> 2;
						$41 = ($36|0)<($40|0);
						if ($41) {
							$$in$i = $39;$c$01$i = $c$1$i;$i$03$i = $36;$sum$02$i = $sum$1$i;
						} else {
							$c$1$i$lcssa = $c$1$i;$sum$1$i$lcssa = $sum$1$i;
							break;
						}
					}
					$20 = ($c$1$i$lcssa|0)==(0);
					if ($20) {
						$$pre113$pre$phiZZ2D = $mw;
						label = 9;
					} else {
						HEAP32[$mw>>2] = $sum$1$i$lcssa;
						$43 = ((($mw)) + 4|0);
						HEAP32[$43>>2] = $c$1$i$lcssa;
						__ZN8Rational9normalizeEv($mw);
						$$pre = HEAP32[$43>>2]|0;
						$$pre109 = HEAP32[$mw>>2]|0;
						$44 = ($$pre|0)>(0);
						if ($44) {
							$$pre$phi114119Z2D = $mw;$$pre$phi120Z2D = $43;$45 = $$pre109;$48 = $$pre;
							label = 11;
						} else {
							$$0$i = $$pre109;$$pre$phi114118Z2D = $mw;$$pre$phi121Z2D = $43;
						}
					}
				} else {
					$$pre113$pre$phiZZ2D = $mw;
					label = 9;
				}
				if ((label|0) == 9) {
					HEAP32[$$pre113$pre$phiZZ2D>>2] = 0;
					$42 = ((($mw)) + 4|0);
					HEAP32[$42>>2] = 1;
					$$pre$phi114119Z2D = $$pre113$pre$phiZZ2D;$$pre$phi120Z2D = $42;$45 = 0;$48 = 1;
					label = 11;
				}
				if ((label|0) == 11) {
					$46 = ($45|0)<(0);
					$47 = $46 << 31 >> 31;
					$49 = ($48|0)<(0);
					$50 = $49 << 31 >> 31;
					$51 = (_bitshift64Shl(($48|0),($50|0),1)|0);
					$52 = tempRet0;
					$53 = ($47|0)<($52|0);
					$54 = ($45>>>0)<($51>>>0);
					$55 = ($47|0)==($52|0);
					$56 = $55 & $54;
					$57 = $53 | $56;
					if ($57) {
						STACKTOP = sp;return;
					}
					$$pr = HEAP32[$$pre$phi120Z2D>>2]|0;
					$58 = ($$pr|0)>(0);
					if ($58) {
						$59 = (($45|0) / ($$pr|0))&-1;
						$$0$i = $59;$$pre$phi114118Z2D = $$pre$phi114119Z2D;$$pre$phi121Z2D = $$pre$phi120Z2D;
					} else {
						$$0$i = $45;$$pre$phi114118Z2D = $$pre$phi114119Z2D;$$pre$phi121Z2D = $$pre$phi120Z2D;
					}
				}
				$60 = $mw;
				$61 = $60;
				$62 = HEAP32[$61>>2]|0;
				$63 = (($60) + 4)|0;
				$64 = $63;
				$65 = HEAP32[$64>>2]|0;
				$66 = $tmp$i$i;
				$67 = $66;
				HEAP32[$67>>2] = $62;
				$68 = (($66) + 4)|0;
				$69 = $68;
				HEAP32[$69>>2] = $65;
				HEAP32[$8>>2] = 3;
				$70 = ((($8)) + 4|0);
				HEAP32[$70>>2] = 1;
				$71 = (__ZN8RationalmLERKS_($tmp$i$i,$8)|0);
				$72 = $71;
				$73 = $72;
				$74 = HEAP32[$73>>2]|0;
				$75 = (($72) + 4)|0;
				$76 = $75;
				$77 = HEAP32[$76>>2]|0;
				$78 = ($77|0)>(0);
				if ($78) {
					$79 = (($74|0) / ($77|0))&-1;
					$$0$i2 = $79;
				} else {
					$$0$i2 = $74;
				}
				$80 = HEAP32[$11>>2]|0;
				$81 = (($80) + 1)|0;
				$82 = HEAP32[$14>>2]|0;
				$83 = HEAP32[$13>>2]|0;
				$84 = (($82) - ($83))|0;
				$85 = $84 >> 2;
				$86 = ($81|0)<($85|0);
				if (!($86)) {
					STACKTOP = sp;return;
				}
				$$phi$trans$insert$i$i = ((($this)) + 16|0);
				$87 = ((($mg)) + 4|0);
				$88 = ((($9)) + 4|0);
				$89 = ((($10)) + 4|0);
				$90 = ((($7)) + 4|0);
				$91 = ((($5)) + 4|0);
				$92 = ((($4)) + 4|0);
				$93 = ((($3)) + 4|0);
				$94 = ((($2)) + 4|0);
				$95 = ((($0)) + 4|0);
				$96 = ((($1)) + 4|0);
				$$in = $83;$100 = $82;$first$0105 = $80;
				while(1) {
					$97 = $$in;
					$98 = (($first$0105) + 1)|0;
					$99 = (($100) - ($$in))|0;
					$101 = $99 >> 2;
					$102 = ($98|0)<($101|0);
					L29: do {
						if ($102) {
							$104 = $101;$106 = $$in;$118 = $98;$587 = $$in;$588 = $97;$i$0$i125 = $first$0105;
							while(1) {
								$103 = ($i$0$i125|0)>(-1);
								$105 = ($104|0)>($i$0$i125|0);
								$or$cond$i = $103 & $105;
								if ($or$cond$i) {
									$107 = $106;
									$110 = $107;$115 = $106;$589 = $588;$590 = $587;
								} else {
									__ZN5Ocrad14internal_errorEPKc(3008);
									$$pre$i3$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
									$108 = $$pre$i3$i;
									$110 = $$pre$i3$i;$115 = $108;$589 = $$pre$i3$i;$590 = $108;
								}
								$109 = (($110) + ($i$0$i125<<2)|0);
								$111 = HEAP32[$109>>2]|0;
								$112 = ($i$0$i125|0)<(-1);
								if ($112) {
									label = 25;
								} else {
									$113 = HEAP32[$14>>2]|0;
									$114 = (($113) - ($115))|0;
									$116 = $114 >> 2;
									$117 = ($116|0)>($118|0);
									if ($117) {
										$119 = $115;
										$122 = $119;$132 = $115;$591 = $589;$592 = $590;
									} else {
										label = 25;
									}
								}
								if ((label|0) == 25) {
									label = 0;
									__ZN5Ocrad14internal_errorEPKc(3008);
									$$pre$i$i = HEAP32[$$phi$trans$insert$i$i>>2]|0;
									$120 = $$pre$i$i;
									$122 = $$pre$i$i;$132 = $120;$591 = $$pre$i$i;$592 = $120;
								}
								$121 = (($122) + ($118<<2)|0);
								$123 = HEAP32[$121>>2]|0;
								$124 = HEAP32[$123>>2]|0;
								$125 = ((($111)) + 8|0);
								$126 = HEAP32[$125>>2]|0;
								$127 = (($124) + -1)|0;
								$128 = (($127) - ($126))|0;
								$129 = ($128|0)>($$0$i2|0);
								if ($129) {
									$138 = $592;$142 = $591;$i$0$i$lcssa = $i$0$i125;
									break L29;
								}
								$$pre110 = HEAP32[$14>>2]|0;
								$130 = (($118) + 1)|0;
								$131 = (($$pre110) - ($132))|0;
								$133 = $131 >> 2;
								$134 = ($130|0)<($133|0);
								if ($134) {
									$i$0$i125$phi = $118;$104 = $133;$106 = $132;$118 = $130;$587 = $592;$588 = $591;$i$0$i125 = $i$0$i125$phi;
								} else {
									$138 = $592;$142 = $591;$i$0$i$lcssa = $118;
									break;
								}
							}
						} else {
							$138 = $$in;$142 = $97;$i$0$i$lcssa = $first$0105;
						}
					} while(0);
					$135 = ($i$0$i$lcssa|0)<(0);
					if ($135) {
						$136 = HEAP32[$14>>2]|0;
						$137 = (($136) - ($138))|0;
						$139 = $137 >> 2;
						$140 = (($139) + -1)|0;
						$$0$i7 = $140;
					} else {
						$$0$i7 = $i$0$i$lcssa;
					}
					$141 = ($$0$i7|0)>($first$0105|0);
					if ($141) {
						$$phi$trans$insert$i8 = (($142) + ($first$0105<<2)|0);
						$$pre$i9 = HEAP32[$$phi$trans$insert$i8>>2]|0;
						$148 = $$pre$i9;$i$02$i = $first$0105;$sum$01$i = 0;
						while(1) {
							$143 = (($i$02$i) + 1)|0;
							$144 = (($142) + ($143<<2)|0);
							$145 = HEAP32[$144>>2]|0;
							$146 = HEAP32[$145>>2]|0;
							$147 = ((($148)) + 8|0);
							$149 = HEAP32[$147>>2]|0;
							$150 = (($146) - ($149))|0;
							$151 = (($150) + -1)|0;
							$152 = ($151|0)>(0);
							$153 = $152 ? $151 : 0;
							$154 = (($153) + ($sum$01$i))|0;
							$exitcond$i = ($143|0)==($$0$i7|0);
							if ($exitcond$i) {
								$$lcssa136 = $154;
								break;
							} else {
								$148 = $145;$i$02$i = $143;$sum$01$i = $154;
							}
						}
						$155 = (($$0$i7) - ($first$0105))|0;
						HEAP32[$mg>>2] = $$lcssa136;
						HEAP32[$87>>2] = $155;
						__ZN8Rational9normalizeEv($mg);
					} else {
						HEAP32[$mg>>2] = 0;
						HEAP32[$87>>2] = 1;
					}
					$156 = ($first$0105|0)<($i$0$i$lcssa|0);
					L54: do {
						if ($156) {
							$157 = HEAP32[$87>>2]|0;
							$158 = ($157|0)>(0);
							if ($158) {
								$$pre$i14 = HEAP32[$mg>>2]|0;
								$159 = ($$pre$i14|0)>(0);
								if ($159) {
									$i$090 = $first$0105;$last$096 = $i$0$i$lcssa;$nospaces$093 = 0;$nospsum$088 = 0;$spaces$094 = 0;$spsum$092 = 0;
								} else {
									$160 = ($$pre$i14|0)==(0);
									$161 = ($157|0)==(1);
									$$$i$i15 = $161 & $160;
									if ($$$i$i15) {
										$i$090 = $first$0105;$last$096 = $i$0$i$lcssa;$nospaces$093 = 0;$nospsum$088 = 0;$spaces$094 = 0;$spsum$092 = 0;
									} else {
										$last$5 = $i$0$i$lcssa;
										break;
									}
								}
								while(1) {
									$164 = ($i$090|0)<(0);
									if ($164) {
										label = 43;
									} else {
										$165 = HEAP32[$14>>2]|0;
										$166 = HEAP32[$13>>2]|0;
										$167 = (($165) - ($166))|0;
										$168 = $167 >> 2;
										$169 = ($168|0)>($i$090|0);
										if ($169) {
											$170 = $166;
											$171 = (($170) + ($i$090<<2)|0);
											$172 = HEAP32[$171>>2]|0;
											$173 = (($i$090) + 1)|0;
											$181 = $166;$184 = $173;$593 = $172;
											label = 44;
										} else {
											label = 43;
										}
									}
									if ((label|0) == 43) {
										label = 0;
										__ZN5Ocrad14internal_errorEPKc(3008);
										$$pre$i18 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
										$174 = $$pre$i18;
										$175 = (($$pre$i18) + ($i$090<<2)|0);
										$176 = HEAP32[$175>>2]|0;
										$177 = (($i$090) + 1)|0;
										$178 = ($i$090|0)<(-1);
										if ($178) {
											$594 = $177;$595 = $176;
											label = 46;
										} else {
											$181 = $174;$184 = $177;$593 = $176;
											label = 44;
										}
									}
									if ((label|0) == 44) {
										label = 0;
										$179 = HEAP32[$14>>2]|0;
										$180 = (($179) - ($181))|0;
										$182 = $180 >> 2;
										$183 = ($182|0)>($184|0);
										if ($183) {
											$185 = $181;
											$187 = $185;$188 = $184;$192 = $593;
										} else {
											$594 = $184;$595 = $593;
											label = 46;
										}
									}
									if ((label|0) == 46) {
										label = 0;
										__ZN5Ocrad14internal_errorEPKc(3008);
										$$pre$i22 = HEAP32[$$phi$trans$insert$i$i>>2]|0;
										$187 = $$pre$i22;$188 = $594;$192 = $595;
									}
									$186 = (($187) + ($188<<2)|0);
									$189 = HEAP32[$186>>2]|0;
									$190 = HEAP32[$189>>2]|0;
									$191 = ((($192)) + 8|0);
									$193 = HEAP32[$191>>2]|0;
									$194 = (($190) - ($193))|0;
									$195 = (($194) + -1)|0;
									$196 = ($194|0)>($$0$i|0);
									L72: do {
										if ($196) {
											label = 62;
										} else {
											$197 = $mg;
											$198 = $197;
											$199 = HEAP32[$198>>2]|0;
											$200 = (($197) + 4)|0;
											$201 = $200;
											$202 = HEAP32[$201>>2]|0;
											$203 = $tmp$i$i28;
											$204 = $203;
											HEAP32[$204>>2] = $199;
											$205 = (($203) + 4)|0;
											$206 = $205;
											HEAP32[$206>>2] = $202;
											HEAP32[$5>>2] = 3;
											HEAP32[$91>>2] = 1;
											$207 = (__ZN8RationalmLERKS_($tmp$i$i28,$5)|0);
											$208 = $207;
											$209 = $208;
											$210 = HEAP32[$209>>2]|0;
											$211 = (($208) + 4)|0;
											$212 = $211;
											$213 = HEAP32[$212>>2]|0;
											$214 = ($195|0)==(-2147483648);
											$215 = ($213|0)>(0);
											$216 = $214 ^ 1;
											$or$cond$i$i30 = $215 & $216;
											if ($or$cond$i$i30) {
												$217 = $214&1;
												$$$i$i31 = $217 ^ 1;
												$218 = (_bitshift64Ashr(0,($210|0),32)|0);
												$219 = tempRet0;
												$220 = (_i64Subtract(0,0,($$$i$i31|0),0)|0);
												$221 = tempRet0;
												$222 = $218 & $220;
												$223 = $219 & $221;
												$224 = ($195|0)<(0);
												$225 = $224 << 31 >> 31;
												$226 = $214 ? -2147483647 : $195;
												$227 = $214 ? -1 : $225;
												$228 = ($213|0)<(0);
												$229 = $228 << 31 >> 31;
												$230 = (___muldi3(($213|0),($229|0),($226|0),($227|0))|0);
												$231 = tempRet0;
												$232 = ($223|0)<($231|0);
												$233 = ($222>>>0)<($230>>>0);
												$234 = ($223|0)==($231|0);
												$235 = $234 & $233;
												$236 = $232 | $235;
												if ($236) {
													label = 62;
													break;
												}
											}
											$237 = ($195*5)|0;
											$238 = $mw;
											$239 = $238;
											$240 = HEAP32[$239>>2]|0;
											$241 = (($238) + 4)|0;
											$242 = $241;
											$243 = HEAP32[$242>>2]|0;
											$244 = $tmp$i$i33;
											$245 = $244;
											HEAP32[$245>>2] = $240;
											$246 = (($244) + 4)|0;
											$247 = $246;
											HEAP32[$247>>2] = $243;
											HEAP32[$4>>2] = 2;
											HEAP32[$92>>2] = 1;
											$248 = (__ZN8RationalmLERKS_($tmp$i$i33,$4)|0);
											$249 = $248;
											$250 = $249;
											$251 = HEAP32[$250>>2]|0;
											$252 = (($249) + 4)|0;
											$253 = $252;
											$254 = HEAP32[$253>>2]|0;
											$255 = ($237|0)==(-2147483648);
											$256 = ($254|0)>(0);
											$257 = $255 ^ 1;
											$or$cond$i$i35 = $256 & $257;
											if ($or$cond$i$i35) {
												$258 = $255&1;
												$$$i$i36 = $258 ^ 1;
												$259 = (_bitshift64Ashr(0,($251|0),32)|0);
												$260 = tempRet0;
												$261 = (_i64Subtract(0,0,($$$i$i36|0),0)|0);
												$262 = tempRet0;
												$263 = $259 & $261;
												$264 = $260 & $262;
												$265 = ($237|0)<(0);
												$266 = $265 << 31 >> 31;
												$267 = $255 ? -2147483647 : $237;
												$268 = $255 ? -1 : $266;
												$269 = ($254|0)<(0);
												$270 = $269 << 31 >> 31;
												$271 = (___muldi3(($254|0),($270|0),($267|0),($268|0))|0);
												$272 = tempRet0;
												$273 = ($264|0)<($272|0);
												$274 = ($263>>>0)<($271>>>0);
												$275 = ($264|0)==($272|0);
												$276 = $275 & $274;
												$277 = $273 | $276;
												if ($277) {
													$278 = $mg;
													$279 = $278;
													$280 = HEAP32[$279>>2]|0;
													$281 = (($278) + 4)|0;
													$282 = $281;
													$283 = HEAP32[$282>>2]|0;
													$284 = $tmp$i$i40;
													$285 = $284;
													HEAP32[$285>>2] = $280;
													$286 = (($284) + 4)|0;
													$287 = $286;
													HEAP32[$287>>2] = $283;
													HEAP32[$3>>2] = 2;
													HEAP32[$93>>2] = 1;
													$288 = (__ZN8RationalmLERKS_($tmp$i$i40,$3)|0);
													$289 = $288;
													$290 = $289;
													$291 = HEAP32[$290>>2]|0;
													$292 = (($289) + 4)|0;
													$293 = $292;
													$294 = HEAP32[$293>>2]|0;
													$295 = ($294|0)>(0);
													$or$cond$i$i42 = $295 & $216;
													if ($or$cond$i$i42) {
														$296 = $214&1;
														$$$i$i43 = $296 ^ 1;
														$297 = (_bitshift64Ashr(0,($291|0),32)|0);
														$298 = tempRet0;
														$299 = (_i64Subtract(0,0,($$$i$i43|0),0)|0);
														$300 = tempRet0;
														$301 = $297 & $299;
														$302 = $298 & $300;
														$303 = ($195|0)<(0);
														$304 = $303 << 31 >> 31;
														$305 = $214 ? -2147483647 : $195;
														$306 = $214 ? -1 : $304;
														$307 = ($294|0)<(0);
														$308 = $307 << 31 >> 31;
														$309 = (___muldi3(($294|0),($308|0),($305|0),($306|0))|0);
														$310 = tempRet0;
														$311 = ($302|0)<($310|0);
														$312 = ($301>>>0)<($309>>>0);
														$313 = ($302|0)==($310|0);
														$314 = $313 & $312;
														$315 = $311 | $314;
														if ($315) {
															label = 62;
															break;
														}
													}
												}
											}
											$316 = HEAP32[$191>>2]|0;
											$317 = HEAP32[$192>>2]|0;
											$318 = (($316) + 1)|0;
											$319 = (($318) - ($317))|0;
											$320 = ($319*3)|0;
											$321 = $mw;
											$322 = $321;
											$323 = HEAP32[$322>>2]|0;
											$324 = (($321) + 4)|0;
											$325 = $324;
											$326 = HEAP32[$325>>2]|0;
											$327 = $tmp$i$i45;
											$328 = $327;
											HEAP32[$328>>2] = $323;
											$329 = (($327) + 4)|0;
											$330 = $329;
											HEAP32[$330>>2] = $326;
											HEAP32[$2>>2] = 2;
											HEAP32[$94>>2] = 1;
											$331 = (__ZN8RationalmLERKS_($tmp$i$i45,$2)|0);
											$332 = $331;
											$333 = $332;
											$334 = HEAP32[$333>>2]|0;
											$335 = (($332) + 4)|0;
											$336 = $335;
											$337 = HEAP32[$336>>2]|0;
											$338 = ($320|0)==(-2147483648);
											$339 = ($337|0)>(0);
											$340 = $338 ^ 1;
											$or$cond$i$i47 = $339 & $340;
											do {
												if ($or$cond$i$i47) {
													$341 = $338&1;
													$$$i$i48 = $341 ^ 1;
													$342 = (_bitshift64Ashr(0,($334|0),32)|0);
													$343 = tempRet0;
													$344 = (_i64Subtract(0,0,($$$i$i48|0),0)|0);
													$345 = tempRet0;
													$346 = $342 & $344;
													$347 = $343 & $345;
													$348 = ($320|0)<(0);
													$349 = $348 << 31 >> 31;
													$350 = $338 ? -2147483647 : $320;
													$351 = $338 ? -1 : $349;
													$352 = ($337|0)<(0);
													$353 = $352 << 31 >> 31;
													$354 = (___muldi3(($337|0),($353|0),($350|0),($351|0))|0);
													$355 = tempRet0;
													$356 = ($347|0)<($355|0);
													$357 = ($346>>>0)<($354>>>0);
													$358 = ($347|0)==($355|0);
													$359 = $358 & $357;
													$360 = $356 | $359;
													if ($360) {
														$361 = ((($189)) + 8|0);
														$362 = HEAP32[$361>>2]|0;
														$363 = HEAP32[$189>>2]|0;
														$364 = (($362) + 1)|0;
														$365 = (($364) - ($363))|0;
														$366 = ($365*3)|0;
														$367 = $mw;
														$368 = $367;
														$369 = HEAP32[$368>>2]|0;
														$370 = (($367) + 4)|0;
														$371 = $370;
														$372 = HEAP32[$371>>2]|0;
														$373 = $tmp$i$i55;
														$374 = $373;
														HEAP32[$374>>2] = $369;
														$375 = (($373) + 4)|0;
														$376 = $375;
														HEAP32[$376>>2] = $372;
														HEAP32[$0>>2] = 2;
														HEAP32[$95>>2] = 1;
														$377 = (__ZN8RationalmLERKS_($tmp$i$i55,$0)|0);
														$378 = $377;
														$379 = $378;
														$380 = HEAP32[$379>>2]|0;
														$381 = (($378) + 4)|0;
														$382 = $381;
														$383 = HEAP32[$382>>2]|0;
														$384 = ($366|0)==(-2147483648);
														$385 = ($383|0)>(0);
														$386 = $384 ^ 1;
														$or$cond$i$i57 = $385 & $386;
														if (!($or$cond$i$i57)) {
															break;
														}
														$387 = $384&1;
														$$$i$i58 = $387 ^ 1;
														$388 = (_bitshift64Ashr(0,($380|0),32)|0);
														$389 = tempRet0;
														$390 = (_i64Subtract(0,0,($$$i$i58|0),0)|0);
														$391 = tempRet0;
														$392 = $388 & $390;
														$393 = $389 & $391;
														$394 = ($366|0)<(0);
														$395 = $394 << 31 >> 31;
														$396 = $384 ? -2147483647 : $366;
														$397 = $384 ? -1 : $395;
														$398 = ($383|0)<(0);
														$399 = $398 << 31 >> 31;
														$400 = (___muldi3(($383|0),($399|0),($396|0),($397|0))|0);
														$401 = tempRet0;
														$402 = ($393|0)<($401|0);
														$403 = ($392>>>0)<($400>>>0);
														$404 = ($393|0)==($401|0);
														$405 = $404 & $403;
														$406 = $402 | $405;
														if (!($406)) {
															break;
														}
														$407 = $195 << 1;
														$408 = ($407|0)==(-2147483648);
														$409 = HEAP32[$$pre$phi121Z2D>>2]|0;
														$410 = ($409|0)>(0);
														$411 = $408 ^ 1;
														$or$cond$i$i60 = $410 & $411;
														if (!($or$cond$i$i60)) {
															break;
														}
														$412 = $408&1;
														$$$i$i61 = $412 ^ 1;
														$413 = HEAP32[$$pre$phi114118Z2D>>2]|0;
														$414 = ($413|0)<(0);
														$415 = $414 << 31 >> 31;
														$416 = (_i64Subtract(0,0,($$$i$i61|0),0)|0);
														$417 = tempRet0;
														$418 = $413 & $416;
														$419 = $415 & $417;
														$420 = ($407|0)<(0);
														$421 = $420 << 31 >> 31;
														$422 = $408 ? -2147483647 : $407;
														$423 = $408 ? -1 : $421;
														$424 = ($409|0)<(0);
														$425 = $424 << 31 >> 31;
														$426 = (___muldi3(($409|0),($425|0),($422|0),($423|0))|0);
														$427 = tempRet0;
														$428 = ($419|0)<($427|0);
														$429 = ($418>>>0)<($426>>>0);
														$430 = ($419|0)==($427|0);
														$431 = $430 & $429;
														$432 = $428 | $431;
														if (!($432)) {
															break;
														}
														$433 = $mg;
														$434 = $433;
														$435 = HEAP32[$434>>2]|0;
														$436 = (($433) + 4)|0;
														$437 = $436;
														$438 = HEAP32[$437>>2]|0;
														$439 = $tmp$i$i53;
														$440 = $439;
														HEAP32[$440>>2] = $435;
														$441 = (($439) + 4)|0;
														$442 = $441;
														HEAP32[$442>>2] = $438;
														HEAP32[$1>>2] = 8;
														HEAP32[$96>>2] = 1;
														$443 = (__ZN8RationalmLERKS_($tmp$i$i53,$1)|0);
														$444 = $443;
														$445 = $444;
														$446 = HEAP32[$445>>2]|0;
														$447 = (($444) + 4)|0;
														$448 = $447;
														$449 = HEAP32[$448>>2]|0;
														$450 = ($449|0)>(0);
														$or$cond$i$i50 = $450 & $257;
														if (!($or$cond$i$i50)) {
															break;
														}
														$451 = $255&1;
														$$$i$i51 = $451 ^ 1;
														$452 = (_bitshift64Ashr(0,($446|0),32)|0);
														$453 = tempRet0;
														$454 = (_i64Subtract(0,0,($$$i$i51|0),0)|0);
														$455 = tempRet0;
														$456 = $452 & $454;
														$457 = $453 & $455;
														$458 = ($237|0)<(0);
														$459 = $458 << 31 >> 31;
														$460 = $255 ? -2147483647 : $237;
														$461 = $255 ? -1 : $459;
														$462 = ($449|0)<(0);
														$463 = $462 << 31 >> 31;
														$464 = (___muldi3(($449|0),($463|0),($460|0),($461|0))|0);
														$465 = tempRet0;
														$466 = ($457|0)<($465|0);
														$467 = ($456>>>0)<($464>>>0);
														$468 = ($457|0)==($465|0);
														$469 = $468 & $467;
														$470 = $466 | $469;
														if ($470) {
															label = 62;
															break L72;
														}
													}
												}
											} while(0);
											$475 = (($nospaces$093) + 1)|0;
											$476 = (($195) + ($nospsum$088))|0;
											$i$1 = $i$090;$last$1 = $last$096;$nospaces$1 = $475;$nospsum$1 = $476;$spaces$1 = $spaces$094;$spsum$1 = $spsum$092;
										}
									} while(0);
									if ((label|0) == 62) {
										label = 0;
										$471 = (($spaces$094) + 1)|0;
										$472 = (($195) + ($spsum$092))|0;
										$473 = (__ZN8Textline12insert_spaceEib($this,$188,0)|0);
										$$i$0 = $473 ? $188 : $i$090;
										$474 = $473&1;
										$$last$0 = (($474) + ($last$096))|0;
										$i$1 = $$i$0;$last$1 = $$last$0;$nospaces$1 = $nospaces$093;$nospsum$1 = $nospsum$088;$spaces$1 = $471;$spsum$1 = $472;
									}
									$477 = (($i$1) + 1)|0;
									$478 = ($477|0)<($last$1|0);
									if ($478) {
										$i$090 = $477;$last$096 = $last$1;$nospaces$093 = $nospaces$1;$nospsum$088 = $nospsum$1;$spaces$094 = $spaces$1;$spsum$092 = $spsum$1;
									} else {
										$last$1$lcssa = $last$1;$nospaces$1$lcssa = $nospaces$1;$nospsum$1$lcssa = $nospsum$1;$spaces$1$lcssa = $spaces$1;$spsum$1$lcssa = $spsum$1;
										break;
									}
								}
								$162 = ($spaces$1$lcssa|0)!=(0);
								$163 = ($nospaces$1$lcssa|0)!=(0);
								$or$cond = $163 & $162;
								if ($or$cond) {
									$479 = ($spsum$1$lcssa*3)|0;
									HEAP32[$9>>2] = $479;
									HEAP32[$88>>2] = $spaces$1$lcssa;
									__ZN8Rational9normalizeEv($9);
									HEAP32[$10>>2] = $nospsum$1$lcssa;
									HEAP32[$89>>2] = $nospaces$1$lcssa;
									__ZN8Rational9normalizeEv($10);
									$480 = $9;
									$481 = $480;
									$482 = HEAP32[$481>>2]|0;
									$483 = (($480) + 4)|0;
									$484 = $483;
									$485 = HEAP32[$484>>2]|0;
									$486 = $tmp$i38;
									$487 = $486;
									HEAP32[$487>>2] = $482;
									$488 = (($486) + 4)|0;
									$489 = $488;
									HEAP32[$489>>2] = $485;
									$490 = (__ZN8RationalpLERKS_($tmp$i38,$10)|0);
									$491 = $490;
									$492 = $491;
									$493 = HEAP32[$492>>2]|0;
									$494 = (($491) + 4)|0;
									$495 = $494;
									$496 = HEAP32[$495>>2]|0;
									$497 = $tmp$i;
									$498 = $497;
									HEAP32[$498>>2] = $493;
									$499 = (($497) + 4)|0;
									$500 = $499;
									HEAP32[$500>>2] = $496;
									HEAP32[$7>>2] = 4;
									HEAP32[$90>>2] = 1;
									__ZNK8Rational7inverseEv($6,$7);
									$501 = (__ZN8RationalmLERKS_($tmp$i,$6)|0);
									$502 = $501;
									$503 = $502;
									$504 = HEAP32[$503>>2]|0;
									$505 = (($502) + 4)|0;
									$506 = $505;
									$507 = HEAP32[$506>>2]|0;
									$508 = ($first$0105|0)<($last$1$lcssa|0);
									if ($508) {
										$509 = ($507|0)>(0);
										$510 = (_bitshift64Ashr(0,($504|0),32)|0);
										$511 = tempRet0;
										$512 = ($507|0)<(0);
										$513 = $512 << 31 >> 31;
										if ($509) {
											$i1$0101$us = $first$0105;$last$2102$us = $last$1$lcssa;
										} else {
											$i1$0101 = $first$0105;
											while(1) {
												$560 = ($i1$0101|0)<(0);
												if ($560) {
													__ZN5Ocrad14internal_errorEPKc(3008);
													$566 = ($i1$0101|0)<(-1);
													if ($566) {
														$$pre117 = (($i1$0101) + 1)|0;
														$$pre115$pre$phiZZ2D = $$pre117;
														label = 84;
													} else {
														label = 83;
													}
												} else {
													$561 = HEAP32[$14>>2]|0;
													$562 = HEAP32[$13>>2]|0;
													$563 = (($561) - ($562))|0;
													$564 = $563 >> 2;
													$565 = ($564|0)>($i1$0101|0);
													if ($565) {
														label = 83;
													} else {
														__ZN5Ocrad14internal_errorEPKc(3008);
														label = 83;
													}
												}
												if ((label|0) == 83) {
													label = 0;
													$567 = (($i1$0101) + 1)|0;
													$568 = HEAP32[$14>>2]|0;
													$569 = HEAP32[$13>>2]|0;
													$570 = (($568) - ($569))|0;
													$571 = $570 >> 2;
													$572 = ($571|0)>($567|0);
													if ($572) {
														$$pre$phi116Z2D = $567;
													} else {
														$$pre115$pre$phiZZ2D = $567;
														label = 84;
													}
												}
												if ((label|0) == 84) {
													label = 0;
													__ZN5Ocrad14internal_errorEPKc(3008);
													$$pre$phi116Z2D = $$pre115$pre$phiZZ2D;
												}
												$exitcond = ($$pre$phi116Z2D|0)==($last$1$lcssa|0);
												if ($exitcond) {
													$last$5 = $last$1$lcssa;
													break L54;
												} else {
													$i1$0101 = $$pre$phi116Z2D;
												}
											}
										}
										while(1) {
											$514 = ($i1$0101$us|0)<(0);
											if ($514) {
												label = 70;
											} else {
												$515 = HEAP32[$14>>2]|0;
												$516 = HEAP32[$13>>2]|0;
												$517 = (($515) - ($516))|0;
												$518 = $517 >> 2;
												$519 = ($518|0)>($i1$0101$us|0);
												if ($519) {
													$520 = $516;
													$521 = (($520) + ($i1$0101$us<<2)|0);
													$522 = HEAP32[$521>>2]|0;
													$523 = (($i1$0101$us) + 1)|0;
													$531 = $516;$534 = $523;$596 = $522;
													label = 71;
												} else {
													label = 70;
												}
											}
											if ((label|0) == 70) {
												label = 0;
												__ZN5Ocrad14internal_errorEPKc(3008);
												$$pre$i26$us = HEAP32[$$phi$trans$insert$i$i>>2]|0;
												$524 = $$pre$i26$us;
												$525 = (($$pre$i26$us) + ($i1$0101$us<<2)|0);
												$526 = HEAP32[$525>>2]|0;
												$527 = (($i1$0101$us) + 1)|0;
												$528 = ($i1$0101$us|0)<(-1);
												if ($528) {
													$597 = $527;$598 = $526;
													label = 73;
												} else {
													$531 = $524;$534 = $527;$596 = $526;
													label = 71;
												}
											}
											if ((label|0) == 71) {
												label = 0;
												$529 = HEAP32[$14>>2]|0;
												$530 = (($529) - ($531))|0;
												$532 = $530 >> 2;
												$533 = ($532|0)>($534|0);
												if ($533) {
													$535 = $531;
													$537 = $535;$538 = $534;$542 = $596;
												} else {
													$597 = $534;$598 = $596;
													label = 73;
												}
											}
											if ((label|0) == 73) {
												label = 0;
												__ZN5Ocrad14internal_errorEPKc(3008);
												$$pre$i5$us = HEAP32[$$phi$trans$insert$i$i>>2]|0;
												$537 = $$pre$i5$us;$538 = $597;$542 = $598;
											}
											$536 = (($537) + ($538<<2)|0);
											$539 = HEAP32[$536>>2]|0;
											$540 = HEAP32[$539>>2]|0;
											$541 = ((($542)) + 8|0);
											$543 = HEAP32[$541>>2]|0;
											$544 = (($540) - ($543))|0;
											$545 = (($544) + -1)|0;
											$546 = ($545|0)==(-2147483648);
											if ($546) {
												$i1$1$us = $i1$0101$us;$last$3$us = $last$2102$us;
											} else {
												$547 = ($545|0)<(0);
												$548 = $547 << 31 >> 31;
												$549 = (___muldi3(($545|0),($548|0),($507|0),($513|0))|0);
												$550 = tempRet0;
												$551 = ($511|0)<($550|0);
												$552 = ($510>>>0)<($549>>>0);
												$553 = ($511|0)==($550|0);
												$554 = $553 & $552;
												$555 = $551 | $554;
												if ($555) {
													$556 = (__ZN8Textline12insert_spaceEib($this,$538,0)|0);
													$$i1$0$us = $556 ? $538 : $i1$0101$us;
													$557 = $556&1;
													$$last$2$us = (($557) + ($last$2102$us))|0;
													$i1$1$us = $$i1$0$us;$last$3$us = $$last$2$us;
												} else {
													$i1$1$us = $i1$0101$us;$last$3$us = $last$2102$us;
												}
											}
											$558 = (($i1$1$us) + 1)|0;
											$559 = ($558|0)<($last$3$us|0);
											if ($559) {
												$i1$0101$us = $558;$last$2102$us = $last$3$us;
											} else {
												$last$5 = $last$3$us;
												break;
											}
										}
									} else {
										$last$5 = $last$1$lcssa;
									}
								} else {
									$last$5 = $last$1$lcssa;
								}
							} else {
								$last$5 = $i$0$i$lcssa;
							}
						} else {
							$last$5 = $i$0$i$lcssa;
						}
					} while(0);
					$573 = (($last$5) + 1)|0;
					$574 = HEAP32[$14>>2]|0;
					$575 = HEAP32[$13>>2]|0;
					$576 = (($574) - ($575))|0;
					$577 = $576 >> 2;
					$578 = ($573|0)<($577|0);
					if ($578) {
						$579 = (__ZN8Textline12insert_spaceEib($this,$573,1)|0);
						$580 = (($last$5) + 2)|0;
						$$ = $579 ? $580 : $573;
						$$pre111 = HEAP32[$14>>2]|0;
						$$pre112 = HEAP32[$13>>2]|0;
						$583 = $$pre112;$584 = $$pre111;$last$6 = $$;
					} else {
						$583 = $575;$584 = $574;$last$6 = $573;
					}
					$581 = (($last$6) + 1)|0;
					$582 = (($584) - ($583))|0;
					$585 = $582 >> 2;
					$586 = ($581|0)<($585|0);
					if ($586) {
						$$in = $583;$100 = $584;$first$0105 = $last$6;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN8Textline4joinERS_($this,$tl) {
				$this = $this|0;
				$tl = $tl|0;
				var $$byval_copy = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $i$0$i = 0, $i$0$i$lcssa = 0, $i$01 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 8|0;
				$0 = sp + 4|0;
				$1 = sp;
				$2 = ((($tl)) + 16|0);
				$3 = ((($tl)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = ($6|0)>(0);
				$8 = $5;
				$9 = ((($tl)) + 12|0);
				if ($7) {
					$10 = ((($this)) + 16|0);
					$11 = ((($this)) + 20|0);
					$12 = ((($this)) + 12|0);
					$21 = $8;$i$01 = 0;
					while(1) {
						$20 = (($21) + ($i$01<<2)|0);
						$22 = HEAP32[$20>>2]|0;
						$23 = HEAP32[$9>>2]|0;
						$24 = ($i$01|0)<($23|0);
						HEAP32[$0>>2] = $22;
						$25 = HEAP32[$11>>2]|0;
						$26 = HEAP32[$10>>2]|0;
						$27 = (($25) - ($26))|0;
						$28 = $27 >> 2;
						$i$0$i = $28;
						while(1) {
							$29 = ($i$0$i|0)>(0);
							if (!($29)) {
								$i$0$i$lcssa = $i$0$i;
								break;
							}
							$30 = (($i$0$i) + -1)|0;
							$31 = HEAP32[$10>>2]|0;
							$32 = (($31) + ($30<<2)|0);
							$33 = HEAP32[$32>>2]|0;
							$34 = (__ZNK9Rectangle10h_precedesERKS_($22,$33)|0);
							if ($34) {
								$i$0$i = $30;
							} else {
								$i$0$i$lcssa = $i$0$i;
								break;
							}
						}
						$35 = HEAP32[$10>>2]|0;
						$36 = (($35) + ($i$0$i$lcssa<<2)|0);
						$37 = $36;
						HEAP32[$1>>2] = $37;
						;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
						(__ZNSt3__16vectorIP9CharacterNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_($10,$$byval_copy,$0)|0);
						$38 = HEAP32[$12>>2]|0;
						$39 = ($i$0$i$lcssa|0)<($38|0);
						if ($39) {
							$40 = (($38) + 1)|0;
							HEAP32[$12>>2] = $40;
						} else {
							if ($24) {
								$41 = (($i$0$i$lcssa) + 1)|0;
								HEAP32[$12>>2] = $41;
							}
						}
						$42 = (($i$01) + 1)|0;
						$43 = HEAP32[$3>>2]|0;
						$44 = HEAP32[$2>>2]|0;
						$45 = (($43) - ($44))|0;
						$46 = $45 >> 2;
						$47 = ($42|0)<($46|0);
						$48 = $44;
						if ($47) {
							$21 = $48;$i$01 = $42;
						} else {
							$$in = $43;$15 = $48;
							break;
						}
					}
				} else {
					$$in = $4;$15 = $8;
				}
				$13 = $$in;
				HEAP32[$9>>2] = 0;
				$14 = ($13|0)==($15|0);
				if ($14) {
					STACKTOP = sp;return;
				}
				$__new_last2$i$i$i = $15;
				$scevgep$i$i$i = ((($13)) + -4|0);
				$16 = $scevgep$i$i$i;
				$17 = (($16) - ($__new_last2$i$i$i))|0;
				$18 = $17 >>> 2;
				$19 = $18 ^ -1;
				$scevgep4$i$i$i = (($13) + ($19<<2)|0);
				HEAP32[$3>>2] = $scevgep4$i$i$i;
				STACKTOP = sp;return;
			}
			function __ZNK8Textline12mean_vcenterEv($this) {
				$this = $this|0;
				var $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $i$03 = 0, $sum$02 = 0, $sum$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				$8 = ($1|0)<($7|0);
				$9 = $5;
				if (!($8)) {
					$sum$1 = 0;
					return ($sum$1|0);
				}
				$10 = (($4) - ($5))|0;
				$11 = $10 >> 2;
				$c$01 = 0;$i$03 = $1;$sum$02 = 0;
				while(1) {
					$12 = (($c$01) + 1)|0;
					$13 = (($9) + ($i$03<<2)|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = ((($14)) + 4|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = ((($14)) + 12|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = (($18) + ($16))|0;
					$20 = (($19|0) / 2)&-1;
					$21 = (($20) + ($sum$02))|0;
					$22 = (($i$03) + 1)|0;
					$23 = ($22|0)<($11|0);
					if ($23) {
						$c$01 = $12;$i$03 = $22;$sum$02 = $21;
					} else {
						$$lcssa = $12;$$lcssa12 = $21;
						break;
					}
				}
				$24 = (($$lcssa12|0) / ($$lcssa|0))&-1;
				$sum$1 = $24;
				return ($sum$1|0);
			}
			function __ZNK8Textline6dprintERK7Controlbb($this,$control,$graph,$recursive) {
				$this = $this|0;
				$control = $control|0;
				$graph = $graph|0;
				$recursive = $recursive|0;
				var $$in$i = 0, $$lcssa36 = 0, $$lcssa38 = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert54 = 0, $$pre = 0, $$pre$i = 0, $$pre$i10 = 0, $$pre$i16 = 0, $$pre$i6 = 0, $$pre$phi61Z2D = 0, $$pre$phi63Z2D = 0, $$pre55 = 0, $$pre56 = 0, $$pre57 = 0, $$pre58 = 0, $0 = 0, $1 = 0, $10 = 0;
				var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
				var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
				var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
				var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
				var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
				var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
				var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
				var $__new_last2$i$i$i$i = 0, $brmerge = 0, $c$01$i = 0, $c$1$i = 0, $c$1$i$lcssa = 0, $cum$07$i = 0, $cum$2$ph$i = 0, $cum$22$i = 0, $hist = 0, $i$03$i = 0, $i$041 = 0, $i1$040 = 0, $l$0$lcssa$i = 0, $l$06$i = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $or$cond = 0, $r$0$lcssa$i = 0, $r$03$i = 0, $scevgep$i$i$i$i = 0;
				var $scevgep$i$i$i$i11 = 0, $scevgep$i$i$i$i23 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i12 = 0, $scevgep4$i$i$i$i24 = 0, $sum$02$i = 0, $sum$1$i = 0, $sum$1$i$lcssa = 0, $sum$2$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$hist = sp + 32|0;
				$0 = sp + 16|0;
				$brmerge = $graph | $recursive;
				L1: do {
					if ($brmerge) {
						;HEAP32[$hist>>2]=0|0;HEAP32[$hist+4>>2]=0|0;HEAP32[$hist+8>>2]=0|0;HEAP32[$hist+12>>2]=0|0;
						$1 = ((($this)) + 16|0);
						$2 = ((($this)) + 20|0);
						$3 = HEAP32[$2>>2]|0;
						$4 = HEAP32[$1>>2]|0;
						$5 = (($3) - ($4))|0;
						$6 = $5 >> 2;
						$7 = ($5|0)>(0);
						L3: do {
							if ($7) {
								$$phi$trans$insert$i = ((($this)) + 16|0);
								$8 = ((($hist)) + 4|0);
								$9 = ((($hist)) + 8|0);
								$56 = $4;$i$041 = 0;
								L5: while(1) {
									$57 = $56;
									$$phi$trans$insert = (($57) + ($i$041<<2)|0);
									$$pre = HEAP32[$$phi$trans$insert>>2]|0;
									__THREW__ = 0;
									$58 = (invoke_iii(178,($$pre|0),32)|0);
									$59 = __THREW__; __THREW__ = 0;
									$60 = $59&1;
									if ($60) {
										break;
									}
									if (!($58)) {
										$61 = HEAP32[$2>>2]|0;
										$62 = HEAP32[$1>>2]|0;
										$63 = (($61) - ($62))|0;
										$64 = $63 >> 2;
										$65 = ($64|0)>($i$041|0);
										if ($65) {
											$66 = $62;
											$70 = $66;
										} else {
											__THREW__ = 0;
											invoke_vi(47,(3008|0));
											$67 = __THREW__; __THREW__ = 0;
											$68 = $67&1;
											if ($68) {
												break;
											}
											$$pre$i6 = HEAP32[$$phi$trans$insert$i>>2]|0;
											$70 = $$pre$i6;
										}
										$69 = (($70) + ($i$041<<2)|0);
										$71 = HEAP32[$69>>2]|0;
										$72 = ((($71)) + 12|0);
										$73 = HEAP32[$72>>2]|0;
										$74 = ((($71)) + 4|0);
										$75 = HEAP32[$74>>2]|0;
										$76 = (($73) + 1)|0;
										$77 = (($76) - ($75))|0;
										$78 = ($77>>>0)<(2147483647);
										$79 = HEAP32[$hist>>2]|0;
										$80 = ($79>>>0)<(2147483647);
										$or$cond = $78 & $80;
										if ($or$cond) {
											$81 = HEAP32[$9>>2]|0;
											$82 = HEAP32[$8>>2]|0;
											$83 = (($81) - ($82))|0;
											$84 = $83 >> 2;
											$85 = ($84>>>0)>($77>>>0);
											$86 = $82;
											do {
												if ($85) {
													$101 = $86;
												} else {
													$87 = (($77) + 1)|0;
													$88 = ($87>>>0)>($84>>>0);
													$89 = $81;
													if ($88) {
														$90 = (($87) - ($84))|0;
														__THREW__ = 0;
														invoke_vii(92,($8|0),($90|0));
														$91 = __THREW__; __THREW__ = 0;
														$92 = $91&1;
														if ($92) {
															break L5;
														}
														$$pre$i10 = HEAP32[$8>>2]|0;
														$101 = $$pre$i10;
														break;
													}
													$93 = ($87>>>0)<($84>>>0);
													if ($93) {
														$94 = (($86) + ($87<<2)|0);
														$95 = ($89|0)==($94|0);
														if ($95) {
															$101 = $86;
														} else {
															$__new_last2$i$i$i$i = $94;
															$scevgep$i$i$i$i11 = ((($89)) + -4|0);
															$96 = $scevgep$i$i$i$i11;
															$97 = (($96) - ($__new_last2$i$i$i$i))|0;
															$98 = $97 >>> 2;
															$99 = $98 ^ -1;
															$scevgep4$i$i$i$i12 = (($89) + ($99<<2)|0);
															HEAP32[$9>>2] = $scevgep4$i$i$i$i12;
															$101 = $86;
														}
													} else {
														$101 = $86;
													}
												}
											} while(0);
											$100 = (($101) + ($77<<2)|0);
											$102 = HEAP32[$100>>2]|0;
											$103 = (($102) + 1)|0;
											HEAP32[$100>>2] = $103;
											$104 = HEAP32[$hist>>2]|0;
											$105 = (($104) + 1)|0;
											HEAP32[$hist>>2] = $105;
										}
									}
									$106 = (($i$041) + 1)|0;
									$107 = HEAP32[$2>>2]|0;
									$108 = HEAP32[$1>>2]|0;
									$109 = (($107) - ($108))|0;
									$110 = $109 >> 2;
									$111 = ($106|0)<($110|0);
									if ($111) {
										$56 = $108;$i$041 = $106;
									} else {
										$$lcssa36 = $108;$$lcssa38 = $110;
										label = 5;
										break L3;
									}
								}
								$43 = ___cxa_find_matching_catch_2()|0;
								$44 = tempRet0;
								$lpad$phi$index = $43;$lpad$phi$index5 = $44;
							} else {
								$$lcssa36 = $4;$$lcssa38 = $6;
								label = 5;
							}
						} while(0);
						do {
							if ((label|0) == 5) {
								$10 = ((($control)) + 16|0);
								$11 = HEAP32[$10>>2]|0;
								$12 = ((($this)) + 12|0);
								$13 = HEAP32[$12>>2]|0;
								$14 = ($13|0)<($$lcssa38|0);
								if ($14) {
									$$in$i = $$lcssa36;$c$01$i = 0;$i$03$i = $13;$sum$02$i = 0;
									while(1) {
										$16 = $$in$i;
										$17 = (($16) + ($i$03$i<<2)|0);
										$18 = HEAP32[$17>>2]|0;
										__THREW__ = 0;
										$19 = (invoke_iii(178,($18|0),32)|0);
										$20 = __THREW__; __THREW__ = 0;
										$21 = $20&1;
										if ($21) {
											label = 14;
											break;
										}
										if ($19) {
											$$pre$i = HEAP32[$1>>2]|0;
											$37 = $$pre$i;$c$1$i = $c$01$i;$sum$1$i = $sum$02$i;
										} else {
											$22 = (($c$01$i) + 1)|0;
											$23 = HEAP32[$1>>2]|0;
											$24 = (($23) + ($i$03$i<<2)|0);
											$25 = HEAP32[$24>>2]|0;
											$26 = ((($25)) + 12|0);
											$27 = HEAP32[$26>>2]|0;
											$28 = ((($25)) + 4|0);
											$29 = HEAP32[$28>>2]|0;
											$30 = (($sum$02$i) + 1)|0;
											$31 = (($30) + ($27))|0;
											$32 = (($31) - ($29))|0;
											$33 = $23;
											$37 = $33;$c$1$i = $22;$sum$1$i = $32;
										}
										$34 = (($i$03$i) + 1)|0;
										$35 = HEAP32[$2>>2]|0;
										$36 = (($35) - ($37))|0;
										$38 = $36 >> 2;
										$39 = ($34|0)<($38|0);
										if ($39) {
											$$in$i = $37;$c$01$i = $c$1$i;$i$03$i = $34;$sum$02$i = $sum$1$i;
										} else {
											$c$1$i$lcssa = $c$1$i;$sum$1$i$lcssa = $sum$1$i;
											break;
										}
									}
									if ((label|0) == 14) {
										$41 = ___cxa_find_matching_catch_2()|0;
										$42 = tempRet0;
										$lpad$phi$index = $41;$lpad$phi$index5 = $42;
										break;
									}
									$15 = ($c$1$i$lcssa|0)==(0);
									if ($15) {
										$sum$2$i = $sum$1$i$lcssa;
									} else {
										$40 = (($sum$1$i$lcssa|0) / ($c$1$i$lcssa|0))&-1;
										$sum$2$i = $40;
									}
								} else {
									$sum$2$i = 0;
								}
								$112 = ((($hist)) + 4|0);
								$113 = ((($hist)) + 8|0);
								$114 = HEAP32[$113>>2]|0;
								$115 = HEAP32[$112>>2]|0;
								$116 = ($114|0)==($115|0);
								$117 = $115;
								$$pre$i16 = HEAP32[$hist>>2]|0;
								L43: do {
									if ($116) {
										$cum$2$ph$i = 0;$l$0$lcssa$i = 0;
									} else {
										$118 = (($114) - ($115))|0;
										$119 = $118 >> 2;
										$cum$07$i = 0;$l$06$i = 0;
										while(1) {
											$124 = (($117) + ($l$06$i<<2)|0);
											$125 = HEAP32[$124>>2]|0;
											$126 = (($125) + ($cum$07$i))|0;
											$127 = $126 << 1;
											$128 = ($127>>>0)<($$pre$i16>>>0);
											if (!($128)) {
												$cum$2$ph$i = $126;$l$0$lcssa$i = $l$06$i;
												break L43;
											}
											$129 = (($l$06$i) + 1)|0;
											$130 = ($129>>>0)<($119>>>0);
											if ($130) {
												$cum$07$i = $126;$l$06$i = $129;
											} else {
												$cum$2$ph$i = $126;$l$0$lcssa$i = $129;
												break;
											}
										}
									}
								} while(0);
								$120 = $cum$2$ph$i << 1;
								$121 = ($120>>>0)>($$pre$i16>>>0);
								L49: do {
									if ($121) {
										$r$0$lcssa$i = $l$0$lcssa$i;
									} else {
										$122 = (($114) - ($115))|0;
										$123 = $122 >> 2;
										$cum$22$i = $cum$2$ph$i;$r$03$i = $l$0$lcssa$i;
										while(1) {
											$131 = ($r$03$i>>>0)<($123>>>0);
											if (!($131)) {
												$r$0$lcssa$i = $r$03$i;
												break L49;
											}
											$132 = (($117) + ($r$03$i<<2)|0);
											$133 = HEAP32[$132>>2]|0;
											$134 = (($133) + ($cum$22$i))|0;
											$135 = (($r$03$i) + 1)|0;
											$136 = $134 << 1;
											$137 = ($136>>>0)>($$pre$i16>>>0);
											if ($137) {
												$r$0$lcssa$i = $135;
												break;
											} else {
												$cum$22$i = $134;$r$03$i = $135;
											}
										}
									}
								} while(0);
								$138 = (($r$0$lcssa$i) + ($l$0$lcssa$i))|0;
								$139 = $138 >>> 1;
								$140 = ((($this)) + 4|0);
								$141 = HEAP32[$140>>2]|0;
								$142 = HEAP32[$this>>2]|0;
								$143 = (($141) - ($142))|0;
								$144 = (($143|0) / 20)&-1;
								$145 = HEAP32[$12>>2]|0;
								HEAP32[$vararg_buffer>>2] = $sum$2$i;
								$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
								HEAP32[$vararg_ptr1>>2] = $139;
								$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
								HEAP32[$vararg_ptr2>>2] = $144;
								$vararg_ptr3 = ((($vararg_buffer)) + 12|0);
								HEAP32[$vararg_ptr3>>2] = $145;
								(_fprintf($11,3186,$vararg_buffer)|0);
								$146 = ((($hist)) + 4|0);
								$147 = HEAP32[$146>>2]|0;
								$148 = ($147|0)==(0|0);
								$149 = $147;
								if (!($148)) {
									$150 = HEAP32[$113>>2]|0;
									$151 = ($150|0)==($147|0);
									if (!($151)) {
										$scevgep$i$i$i$i23 = ((($150)) + -4|0);
										$152 = $scevgep$i$i$i$i23;
										$153 = (($152) - ($149))|0;
										$154 = $153 >>> 2;
										$155 = $154 ^ -1;
										$scevgep4$i$i$i$i24 = (($150) + ($155<<2)|0);
										HEAP32[$113>>2] = $scevgep4$i$i$i$i24;
									}
									__ZdlPv($147);
								}
								$$pre$phi61Z2D = $2;$$pre$phi63Z2D = $1;
								break L1;
							}
						} while(0);
						$45 = ((($hist)) + 4|0);
						$46 = HEAP32[$45>>2]|0;
						$47 = ($46|0)==(0|0);
						$48 = $46;
						if ($47) {
							___resumeException($lpad$phi$index|0);
							// unreachable;
						}
						$49 = ((($hist)) + 8|0);
						$50 = HEAP32[$49>>2]|0;
						$51 = ($50|0)==($46|0);
						if (!($51)) {
							$scevgep$i$i$i$i = ((($50)) + -4|0);
							$52 = $scevgep$i$i$i$i;
							$53 = (($52) - ($48))|0;
							$54 = $53 >>> 2;
							$55 = $54 ^ -1;
							$scevgep4$i$i$i$i = (($50) + ($55<<2)|0);
							HEAP32[$49>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($46);
						___resumeException($lpad$phi$index|0);
						// unreachable;
					} else {
						$$pre57 = ((($this)) + 16|0);
						$$pre58 = ((($this)) + 20|0);
						$$pre$phi61Z2D = $$pre58;$$pre$phi63Z2D = $$pre57;
					}
				} while(0);
				$156 = HEAP32[$$pre$phi61Z2D>>2]|0;
				$157 = HEAP32[$$pre$phi63Z2D>>2]|0;
				$158 = (($156) - ($157))|0;
				$159 = ($158|0)>(0);
				if (!($159)) {
					$161 = ((($control)) + 16|0);
					$162 = HEAP32[$161>>2]|0;
					(_fputc(10,$162)|0);
					STACKTOP = sp;return;
				}
				$160 = ((($this)) + 12|0);
				$163 = $157;$i1$040 = 0;
				while(1) {
					$164 = $163;
					$$phi$trans$insert54 = (($164) + ($i1$040<<2)|0);
					$$pre55 = HEAP32[$$phi$trans$insert54>>2]|0;
					$$pre56 = HEAP32[$160>>2]|0;
					$165 = ($i1$040|0)<($$pre56|0);
					if ($165) {
						__ZNK9Character6dprintERK7ControlRK9Rectanglebb($$pre55,$control,$$pre55,$graph,$recursive);
					} else {
						$166 = HEAP32[$$pre55>>2]|0;
						$167 = ((($$pre55)) + 8|0);
						$168 = HEAP32[$167>>2]|0;
						$169 = (($168) + ($166))|0;
						$170 = (($169|0) / 2)&-1;
						$171 = (__ZNK5Track3topEi($this,$170)|0);
						$172 = HEAP32[$167>>2]|0;
						$173 = HEAP32[$$pre55>>2]|0;
						$174 = (($173) + ($172))|0;
						$175 = (($174|0) / 2)&-1;
						$176 = (__ZNK5Track6bottomEi($this,$175)|0);
						__ZN9RectangleC2Eiiii($0,$166,$171,$172,$176);
						__ZNK9Character6dprintERK7ControlRK9Rectanglebb($$pre55,$control,$0,$graph,$recursive);
					}
					$177 = (($i1$040) + 1)|0;
					$178 = HEAP32[$$pre$phi61Z2D>>2]|0;
					$179 = HEAP32[$$pre$phi63Z2D>>2]|0;
					$180 = (($178) - ($179))|0;
					$181 = $180 >> 2;
					$182 = ($177|0)<($181|0);
					if ($182) {
						$163 = $179;$i1$040 = $177;
					} else {
						break;
					}
				}
				$161 = ((($control)) + 16|0);
				$162 = HEAP32[$161>>2]|0;
				(_fputc(10,$162)|0);
				STACKTOP = sp;return;
			}
			function __ZNK8Textline6xprintERK7Control($this,$control) {
				$this = $this|0;
				$control = $control|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if ($5) {
					$6 = $3;$i$01 = 0;
				} else {
					return;
				}
				while(1) {
					$7 = $6;
					$$phi$trans$insert = (($7) + ($i$01<<2)|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					__ZNK9Character6xprintERK7Control($$pre,$control);
					$8 = (($i$01) + 1)|0;
					$9 = HEAP32[$1>>2]|0;
					$10 = HEAP32[$0>>2]|0;
					$11 = (($9) - ($10))|0;
					$12 = $11 >> 2;
					$13 = ($8|0)<($12|0);
					if ($13) {
						$6 = $10;$i$01 = $8;
					} else {
						break;
					}
				}
				return;
			}
			function __ZNK8Textline5cmarkER10Page_image($this,$page_image) {
				$this = $this|0;
				$page_image = $page_image|0;
				var $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if ($5) {
					$6 = $3;$i$01 = 0;
				} else {
					return;
				}
				while(1) {
					$7 = $6;
					$$phi$trans$insert = (($7) + ($i$01<<2)|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					__ZN10Page_image14draw_rectangleERK9Rectangle($page_image,$$pre);
					$8 = (($i$01) + 1)|0;
					$9 = HEAP32[$1>>2]|0;
					$10 = HEAP32[$0>>2]|0;
					$11 = (($9) - ($10))|0;
					$12 = $11 >> 2;
					$13 = ($8|0)<($12|0);
					if ($13) {
						$6 = $10;$i$01 = $8;
					} else {
						break;
					}
				}
				return;
			}
			function __ZNK8Textline10recognize1ERK7Charset($this,$charset) {
				$this = $this|0;
				$charset = $charset|0;
				var $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $i$01 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = sp + 8|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = ($6|0)>(0);
				if (!($7)) {
					STACKTOP = sp;return;
				}
				$8 = ((($this)) + 12|0);
				$9 = ((($0)) + 4|0);
				$10 = $5;$i$01 = 0;
				while(1) {
					$11 = $10;
					$$phi$trans$insert = (($11) + ($i$01<<2)|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					$$pre2 = HEAP32[$8>>2]|0;
					$12 = ($i$01|0)<($$pre2|0);
					if ($12) {
						__ZN9Character10recognize1ERK7CharsetRK9Rectangle($$pre,$charset,$$pre);
						$13 = ((($$pre)) + 28|0);
						$14 = ((($$pre)) + 32|0);
						$15 = HEAP32[$14>>2]|0;
						$16 = HEAP32[$13>>2]|0;
						$17 = ($15|0)==($16|0);
						if (!($17)) {
							$18 = (__ZNK9Character5guessEi($$pre,0)|0);
							$19 = HEAP32[$18>>2]|0;
							$20 = (__ZN3UCS17islower_ambiguousEi($19)|0);
							if ($20) {
								$21 = (__ZN3UCS7toupperEi($19)|0);
								$22 = HEAP32[$13>>2]|0;
								$23 = HEAP32[$14>>2]|0;
								$24 = ($23|0)==($22|0);
								if ($24) {
									$31 = $22;
								} else {
									$__new_last2$i$i$i$i = $22;
									$scevgep$i$i$i$i = ((($23)) + -8|0);
									$25 = $scevgep$i$i$i$i;
									$26 = (($25) - ($__new_last2$i$i$i$i))|0;
									$27 = $26 >>> 3;
									$28 = $27 ^ -1;
									$scevgep4$i$i$i$i = (($23) + ($28<<3)|0);
									HEAP32[$14>>2] = $scevgep4$i$i$i$i;
									$31 = $scevgep4$i$i$i$i;
								}
								HEAP32[$0>>2] = $21;
								HEAP32[$9>>2] = 0;
								$29 = ((($$pre)) + 36|0);
								$30 = HEAP32[$29>>2]|0;
								$32 = ($31|0)==($30|0);
								if ($32) {
									__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($13,$0);
								} else {
									$33 = $0;
									$34 = $33;
									$35 = HEAP32[$34>>2]|0;
									$36 = (($33) + 4)|0;
									$37 = $36;
									$38 = HEAP32[$37>>2]|0;
									$39 = $31;
									$40 = $39;
									HEAP32[$40>>2] = $35;
									$41 = (($39) + 4)|0;
									$42 = $41;
									HEAP32[$42>>2] = $38;
									$43 = HEAP32[$14>>2]|0;
									$44 = ((($43)) + 8|0);
									HEAP32[$14>>2] = $44;
								}
							}
						}
					} else {
						$45 = HEAP32[$$pre>>2]|0;
						$46 = ((($$pre)) + 8|0);
						$47 = HEAP32[$46>>2]|0;
						$48 = (($47) + ($45))|0;
						$49 = (($48|0) / 2)&-1;
						$50 = (__ZNK5Track3topEi($this,$49)|0);
						$51 = HEAP32[$46>>2]|0;
						$52 = HEAP32[$$pre>>2]|0;
						$53 = (($52) + ($51))|0;
						$54 = (($53|0) / 2)&-1;
						$55 = (__ZNK5Track6bottomEi($this,$54)|0);
						__ZN9RectangleC2Eiiii($1,$45,$50,$51,$55);
						__ZN9Character10recognize1ERK7CharsetRK9Rectangle($$pre,$charset,$1);
					}
					$56 = (($i$01) + 1)|0;
					$57 = HEAP32[$3>>2]|0;
					$58 = HEAP32[$2>>2]|0;
					$59 = (($57) - ($58))|0;
					$60 = $59 >> 2;
					$61 = ($56|0)<($60|0);
					if ($61) {
						$10 = $58;$i$01 = $56;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZN8Textline12apply_filterEN6Filter4TypeE($this,$filter) {
				$this = $this|0;
				$filter = $filter|0;
				var $$lcssa163 = 0, $$lcssa164 = 0, $$phi$trans$insert = 0, $$phi$trans$insert$i16 = 0, $$phi$trans$insert$i31 = 0, $$phi$trans$insert$i8 = 0, $$pre = 0, $$pre$i$pre = 0, $$pre$i117 = 0, $$pre$i12 = 0, $$pre$i17 = 0, $$pre$i17$us$us = 0, $$pre$i20 = 0, $$pre$i32 = 0, $$pre$i37 = 0, $$pre$phi110116Z2D = 0, $$pre103 = 0, $$pre106 = 0, $$pre109 = 0, $0 = 0;
				var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
				var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
				var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
				var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
				var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
				var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
				var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
				var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
				var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i$i = 0, $cum$07$i = 0, $cum$2$ph$i = 0, $cum$22$i = 0, $extract$t = 0, $hist = 0, $i$060 = 0, $i1$0$in$ph = 0, $i1$058 = 0, $i1$058$in = 0, $i1$058$lcssa157 = 0, $i2$0 = 0, $i2$0$in$ph75$us = 0, $i2$0$in68 = 0;
				var $i2$0$in68$phi = 0, $i2$0$in68$us$us = 0, $i2$0$in68$us$us$phi = 0, $i2$0$us$us = 0, $i2$067$us = 0, $i2$06774 = 0, $i2$06777$us = 0, $i2$069 = 0, $i2$069$us$us = 0, $i2$069$us$us$lcssa = 0, $l$0$lcssa$i = 0, $l$06$i = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $modified$0$ph = 0, $modified$0$ph162 = 0, $modified$2$off0$ph$lcssa = 0, $modified$2$off0$ph76$us = 0, $or$cond = 0, $r$0$lcssa$i = 0;
				var $r$03$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i21 = 0, $scevgep$i$i$i$i25 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i22 = 0, $scevgep4$i$i$i$i26 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hist = sp;
				$0 = ($filter|0)==(4);
				L1: do {
					if ($0) {
						;HEAP32[$hist>>2]=0|0;HEAP32[$hist+4>>2]=0|0;HEAP32[$hist+8>>2]=0|0;HEAP32[$hist+12>>2]=0|0;
						$1 = ((($this)) + 16|0);
						$2 = ((($this)) + 20|0);
						$3 = HEAP32[$2>>2]|0;
						$4 = HEAP32[$1>>2]|0;
						$5 = (($3) - ($4))|0;
						$6 = ($5|0)>(0);
						L3: do {
							if ($6) {
								$$phi$trans$insert$i8 = ((($this)) + 16|0);
								$7 = ((($hist)) + 4|0);
								$8 = ((($hist)) + 8|0);
								$51 = $4;$i$060 = 0;
								L5: while(1) {
									$52 = $51;
									$$phi$trans$insert = (($52) + ($i$060<<2)|0);
									$$pre = HEAP32[$$phi$trans$insert>>2]|0;
									__THREW__ = 0;
									$53 = (invoke_iii(178,($$pre|0),32)|0);
									$54 = __THREW__; __THREW__ = 0;
									$55 = $54&1;
									if ($55) {
										label = 15;
										break;
									}
									if (!($53)) {
										$56 = HEAP32[$2>>2]|0;
										$57 = HEAP32[$1>>2]|0;
										$58 = (($56) - ($57))|0;
										$59 = $58 >> 2;
										$60 = ($59|0)>($i$060|0);
										if ($60) {
											$61 = $57;
											$65 = $61;
										} else {
											__THREW__ = 0;
											invoke_vi(47,(3008|0));
											$62 = __THREW__; __THREW__ = 0;
											$63 = $62&1;
											if ($63) {
												label = 15;
												break;
											}
											$$pre$i12 = HEAP32[$$phi$trans$insert$i8>>2]|0;
											$65 = $$pre$i12;
										}
										$64 = (($65) + ($i$060<<2)|0);
										$66 = HEAP32[$64>>2]|0;
										$67 = ((($66)) + 12|0);
										$68 = HEAP32[$67>>2]|0;
										$69 = ((($66)) + 4|0);
										$70 = HEAP32[$69>>2]|0;
										$71 = (($68) + 1)|0;
										$72 = (($71) - ($70))|0;
										$73 = ($72>>>0)<(2147483647);
										$74 = HEAP32[$hist>>2]|0;
										$75 = ($74>>>0)<(2147483647);
										$or$cond = $73 & $75;
										if ($or$cond) {
											$76 = HEAP32[$8>>2]|0;
											$77 = HEAP32[$7>>2]|0;
											$78 = (($76) - ($77))|0;
											$79 = $78 >> 2;
											$80 = ($79>>>0)>($72>>>0);
											$81 = $77;
											do {
												if ($80) {
													$96 = $81;
												} else {
													$82 = (($72) + 1)|0;
													$83 = ($82>>>0)>($79>>>0);
													$84 = $76;
													if ($83) {
														$85 = (($82) - ($79))|0;
														__THREW__ = 0;
														invoke_vii(92,($7|0),($85|0));
														$86 = __THREW__; __THREW__ = 0;
														$87 = $86&1;
														if ($87) {
															label = 15;
															break L5;
														}
														$$pre$i20 = HEAP32[$7>>2]|0;
														$96 = $$pre$i20;
														break;
													}
													$88 = ($82>>>0)<($79>>>0);
													if ($88) {
														$89 = (($81) + ($82<<2)|0);
														$90 = ($84|0)==($89|0);
														if ($90) {
															$96 = $81;
														} else {
															$__new_last2$i$i$i$i = $89;
															$scevgep$i$i$i$i21 = ((($84)) + -4|0);
															$91 = $scevgep$i$i$i$i21;
															$92 = (($91) - ($__new_last2$i$i$i$i))|0;
															$93 = $92 >>> 2;
															$94 = $93 ^ -1;
															$scevgep4$i$i$i$i22 = (($84) + ($94<<2)|0);
															HEAP32[$8>>2] = $scevgep4$i$i$i$i22;
															$96 = $81;
														}
													} else {
														$96 = $81;
													}
												}
											} while(0);
											$95 = (($96) + ($72<<2)|0);
											$97 = HEAP32[$95>>2]|0;
											$98 = (($97) + 1)|0;
											HEAP32[$95>>2] = $98;
											$99 = HEAP32[$hist>>2]|0;
											$100 = (($99) + 1)|0;
											HEAP32[$hist>>2] = $100;
										}
									}
									$101 = (($i$060) + 1)|0;
									$102 = HEAP32[$2>>2]|0;
									$103 = HEAP32[$1>>2]|0;
									$104 = (($102) - ($103))|0;
									$105 = $104 >> 2;
									$106 = ($101|0)<($105|0);
									if ($106) {
										$51 = $103;$i$060 = $101;
									} else {
										$$lcssa163 = $102;$$lcssa164 = $103;
										break;
									}
								}
								if ((label|0) == 15) {
									$38 = ___cxa_find_matching_catch_2()|0;
									$39 = tempRet0;
									$lpad$phi$index = $38;$lpad$phi$index3 = $39;
									break;
								}
								$$pre103 = HEAP32[$8>>2]|0;
								$$pre106 = HEAP32[$7>>2]|0;
								$$pre$i$pre = HEAP32[$hist>>2]|0;
								$9 = ($$pre103|0)==($$pre106|0);
								$10 = $$pre106;
								if ($9) {
									$$pre$i117 = $$pre$i$pre;$$pre$phi110116Z2D = $8;$110 = $$lcssa164;$111 = $$lcssa163;$16 = $$pre106;$17 = $$pre103;$28 = $10;$cum$2$ph$i = 0;$l$0$lcssa$i = 0;
									label = 7;
								} else {
									$11 = (($$pre103) - ($$pre106))|0;
									$12 = $11 >> 2;
									$cum$07$i = 0;$l$06$i = 0;
									while(1) {
										$19 = (($10) + ($l$06$i<<2)|0);
										$20 = HEAP32[$19>>2]|0;
										$21 = (($20) + ($cum$07$i))|0;
										$22 = $21 << 1;
										$23 = ($22>>>0)<($$pre$i$pre>>>0);
										if (!($23)) {
											$$pre$i117 = $$pre$i$pre;$$pre$phi110116Z2D = $8;$110 = $$lcssa164;$111 = $$lcssa163;$16 = $$pre106;$17 = $$pre103;$28 = $10;$cum$2$ph$i = $21;$l$0$lcssa$i = $l$06$i;
											label = 7;
											break L3;
										}
										$24 = (($l$06$i) + 1)|0;
										$25 = ($24>>>0)<($12>>>0);
										if ($25) {
											$cum$07$i = $21;$l$06$i = $24;
										} else {
											$$pre$i117 = $$pre$i$pre;$$pre$phi110116Z2D = $8;$110 = $$lcssa164;$111 = $$lcssa163;$16 = $$pre106;$17 = $$pre103;$28 = $10;$cum$2$ph$i = $21;$l$0$lcssa$i = $24;
											label = 7;
											break;
										}
									}
								}
							} else {
								$$pre109 = ((($hist)) + 8|0);
								$$pre$i117 = 0;$$pre$phi110116Z2D = $$pre109;$110 = $4;$111 = $3;$16 = 0;$17 = 0;$28 = 0;$cum$2$ph$i = 0;$l$0$lcssa$i = 0;
								label = 7;
							}
						} while(0);
						do {
							if ((label|0) == 7) {
								$13 = $cum$2$ph$i << 1;
								$14 = ($13>>>0)>($$pre$i117>>>0);
								L36: do {
									if ($14) {
										$r$0$lcssa$i = $l$0$lcssa$i;
									} else {
										$15 = (($17) - ($16))|0;
										$18 = $15 >> 2;
										$cum$22$i = $cum$2$ph$i;$r$03$i = $l$0$lcssa$i;
										while(1) {
											$26 = ($r$03$i>>>0)<($18>>>0);
											if (!($26)) {
												$r$0$lcssa$i = $r$03$i;
												break L36;
											}
											$27 = (($28) + ($r$03$i<<2)|0);
											$29 = HEAP32[$27>>2]|0;
											$30 = (($29) + ($cum$22$i))|0;
											$31 = (($r$03$i) + 1)|0;
											$32 = $30 << 1;
											$33 = ($32>>>0)>($$pre$i117>>>0);
											if ($33) {
												$r$0$lcssa$i = $31;
												break;
											} else {
												$cum$22$i = $30;$r$03$i = $31;
											}
										}
									}
								} while(0);
								$107 = (($r$0$lcssa$i) + ($l$0$lcssa$i))|0;
								$108 = $107 >>> 1;
								$109 = (($111) - ($110))|0;
								$112 = $109 >> 2;
								$$phi$trans$insert$i31 = ((($this)) + 16|0);
								$i1$0$in$ph = $112;$modified$0$ph = 0;
								L42: while(1) {
									$113 = ($i1$0$in$ph|0)>(0);
									if ($113) {
										$i1$058$in = $i1$0$in$ph;
									} else {
										$modified$0$ph162 = $modified$0$ph;
										label = 38;
										break;
									}
									while(1) {
										$i1$058 = (($i1$058$in) + -1)|0;
										$124 = ($i1$058$in|0)<(1);
										if ($124) {
											label = 46;
										} else {
											$125 = HEAP32[$2>>2]|0;
											$126 = HEAP32[$1>>2]|0;
											$127 = (($125) - ($126))|0;
											$128 = $127 >> 2;
											$129 = ($128|0)<($i1$058$in|0);
											if ($129) {
												label = 46;
											} else {
												$130 = $126;
												$134 = $130;
											}
										}
										if ((label|0) == 46) {
											label = 0;
											__THREW__ = 0;
											invoke_vi(47,(3008|0));
											$131 = __THREW__; __THREW__ = 0;
											$132 = $131&1;
											if ($132) {
												label = 13;
												break L42;
											}
											$$pre$i32 = HEAP32[$$phi$trans$insert$i31>>2]|0;
											$134 = $$pre$i32;
										}
										$133 = (($134) + ($i1$058<<2)|0);
										$135 = HEAP32[$133>>2]|0;
										__THREW__ = 0;
										$136 = (invoke_iii(178,($135|0),32)|0);
										$137 = __THREW__; __THREW__ = 0;
										$138 = $137&1;
										if ($138) {
											label = 13;
											break L42;
										}
										if (!($136)) {
											if ($124) {
												label = 54;
											} else {
												$140 = HEAP32[$2>>2]|0;
												$141 = HEAP32[$1>>2]|0;
												$142 = (($140) - ($141))|0;
												$143 = $142 >> 2;
												$144 = ($143|0)<($i1$058$in|0);
												if ($144) {
													label = 54;
												} else {
													$145 = $141;
													$149 = $145;
												}
											}
											if ((label|0) == 54) {
												label = 0;
												__THREW__ = 0;
												invoke_vi(47,(3008|0));
												$146 = __THREW__; __THREW__ = 0;
												$147 = $146&1;
												if ($147) {
													label = 13;
													break L42;
												}
												$$pre$i37 = HEAP32[$$phi$trans$insert$i31>>2]|0;
												$149 = $$pre$i37;
											}
											$148 = (($149) + ($i1$058<<2)|0);
											$150 = HEAP32[$148>>2]|0;
											$151 = ((($150)) + 12|0);
											$152 = HEAP32[$151>>2]|0;
											$153 = ((($150)) + 4|0);
											$154 = HEAP32[$153>>2]|0;
											$155 = (($152) + 1)|0;
											$156 = (($155) - ($154))|0;
											__THREW__ = 0;
											$157 = (invoke_iiiii(120,($156|0),($108|0),10,2)|0);
											$158 = __THREW__; __THREW__ = 0;
											$159 = $158&1;
											if ($159) {
												label = 13;
												break L42;
											}
											if (!($157)) {
												$i1$058$lcssa157 = $i1$058;
												break;
											}
										}
										$139 = ($i1$058$in|0)>(1);
										if ($139) {
											$i1$058$in = $i1$058;
										} else {
											$modified$0$ph162 = $modified$0$ph;
											label = 38;
											break L42;
										}
									}
									__THREW__ = 0;
									invoke_vii(121,($this|0),($i1$058$lcssa157|0));
									$160 = __THREW__; __THREW__ = 0;
									$161 = $160&1;
									if ($161) {
										label = 14;
										break;
									} else {
										$i1$0$in$ph = $i1$058$lcssa157;$modified$0$ph = 1;
									}
								}
								if ((label|0) == 13) {
									$34 = ___cxa_find_matching_catch_2()|0;
									$35 = tempRet0;
									$lpad$phi$index = $34;$lpad$phi$index3 = $35;
									break;
								}
								else if ((label|0) == 14) {
									$36 = ___cxa_find_matching_catch_2()|0;
									$37 = tempRet0;
									$lpad$phi$index = $36;$lpad$phi$index3 = $37;
									break;
								}
								else if ((label|0) == 38) {
									$114 = ((($hist)) + 4|0);
									$115 = HEAP32[$114>>2]|0;
									$116 = ($115|0)==(0|0);
									$117 = $115;
									if (!($116)) {
										$118 = HEAP32[$$pre$phi110116Z2D>>2]|0;
										$119 = ($118|0)==($115|0);
										if (!($119)) {
											$scevgep$i$i$i$i25 = ((($118)) + -4|0);
											$120 = $scevgep$i$i$i$i25;
											$121 = (($120) - ($117))|0;
											$122 = $121 >>> 2;
											$123 = $122 ^ -1;
											$scevgep4$i$i$i$i26 = (($118) + ($123<<2)|0);
											HEAP32[$$pre$phi110116Z2D>>2] = $scevgep4$i$i$i$i26;
										}
										__ZdlPv($115);
									}
									$extract$t = ($modified$0$ph162<<24>>24)==(0);
									if (!($extract$t)) {
										break L1;
									}
									STACKTOP = sp;return;
								}
							}
						} while(0);
						$40 = ((($hist)) + 4|0);
						$41 = HEAP32[$40>>2]|0;
						$42 = ($41|0)==(0|0);
						$43 = $41;
						if ($42) {
							___resumeException($lpad$phi$index|0);
							// unreachable;
						}
						$44 = ((($hist)) + 8|0);
						$45 = HEAP32[$44>>2]|0;
						$46 = ($45|0)==($41|0);
						if (!($46)) {
							$scevgep$i$i$i$i = ((($45)) + -4|0);
							$47 = $scevgep$i$i$i$i;
							$48 = (($47) - ($43))|0;
							$49 = $48 >>> 2;
							$50 = $49 ^ -1;
							$scevgep4$i$i$i$i = (($45) + ($50<<2)|0);
							HEAP32[$44>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($41);
						___resumeException($lpad$phi$index|0);
						// unreachable;
					} else {
						$162 = ((($this)) + 16|0);
						$163 = ((($this)) + 20|0);
						$164 = HEAP32[$163>>2]|0;
						$165 = HEAP32[$162>>2]|0;
						$166 = (($164) - ($165))|0;
						$167 = $166 >> 2;
						$i2$06774 = (($167) + -1)|0;
						$168 = ($166|0)>(0);
						L86: do {
							if ($168) {
								$$phi$trans$insert$i16 = ((($this)) + 16|0);
								$169 = ($filter|0)==(7);
								if ($169) {
									$i2$0$in68 = $167;$i2$069 = $i2$06774;
									while(1) {
										$191 = ($i2$0$in68|0)<(1);
										if ($191) {
											label = 74;
										} else {
											$192 = HEAP32[$163>>2]|0;
											$193 = HEAP32[$162>>2]|0;
											$194 = (($192) - ($193))|0;
											$195 = $194 >> 2;
											$196 = ($195|0)<($i2$0$in68|0);
											if ($196) {
												label = 74;
											} else {
												$197 = $193;
												$199 = $197;
											}
										}
										if ((label|0) == 74) {
											label = 0;
											__ZN5Ocrad14internal_errorEPKc(3008);
											$$pre$i17 = HEAP32[$$phi$trans$insert$i16>>2]|0;
											$199 = $$pre$i17;
										}
										$198 = (($199) + ($i2$069<<2)|0);
										$200 = HEAP32[$198>>2]|0;
										$201 = ((($200)) + 28|0);
										$202 = ((($200)) + 32|0);
										$203 = HEAP32[$202>>2]|0;
										$204 = HEAP32[$201>>2]|0;
										$205 = ($203|0)==($204|0);
										if (!($205)) {
											__ZN9Character12apply_filterEN6Filter4TypeE($200,7);
										}
										$i2$0 = (($i2$069) + -1)|0;
										$206 = ($i2$069|0)>(0);
										if ($206) {
											$i2$0$in68$phi = $i2$069;$i2$069 = $i2$0;$i2$0$in68 = $i2$0$in68$phi;
										} else {
											$modified$2$off0$ph$lcssa = 0;
											break L86;
										}
									}
								} else {
									$i2$0$in$ph75$us = $167;$i2$06777$us = $i2$06774;$modified$2$off0$ph76$us = 0;
								}
								while(1) {
									$i2$0$in68$us$us = $i2$0$in$ph75$us;$i2$069$us$us = $i2$06777$us;
									while(1) {
										$170 = ($i2$0$in68$us$us|0)<(1);
										if ($170) {
											label = 64;
										} else {
											$171 = HEAP32[$163>>2]|0;
											$172 = HEAP32[$162>>2]|0;
											$173 = (($171) - ($172))|0;
											$174 = $173 >> 2;
											$175 = ($174|0)<($i2$0$in68$us$us|0);
											if ($175) {
												label = 64;
											} else {
												$176 = $172;
												$178 = $176;
											}
										}
										if ((label|0) == 64) {
											label = 0;
											__ZN5Ocrad14internal_errorEPKc(3008);
											$$pre$i17$us$us = HEAP32[$$phi$trans$insert$i16>>2]|0;
											$178 = $$pre$i17$us$us;
										}
										$177 = (($178) + ($i2$069$us$us<<2)|0);
										$179 = HEAP32[$177>>2]|0;
										$180 = ((($179)) + 28|0);
										$181 = ((($179)) + 32|0);
										$182 = HEAP32[$181>>2]|0;
										$183 = HEAP32[$180>>2]|0;
										$184 = ($182|0)==($183|0);
										if (!($184)) {
											__ZN9Character12apply_filterEN6Filter4TypeE($179,$filter);
											$185 = HEAP32[$181>>2]|0;
											$186 = HEAP32[$180>>2]|0;
											$187 = ($185|0)==($186|0);
											if ($187) {
												$i2$069$us$us$lcssa = $i2$069$us$us;
												break;
											}
										}
										$i2$0$us$us = (($i2$069$us$us) + -1)|0;
										$188 = ($i2$069$us$us|0)>(0);
										if ($188) {
											$i2$0$in68$us$us$phi = $i2$069$us$us;$i2$069$us$us = $i2$0$us$us;$i2$0$in68$us$us = $i2$0$in68$us$us$phi;
										} else {
											$modified$2$off0$ph$lcssa = $modified$2$off0$ph76$us;
											break L86;
										}
									}
									__ZN8Textline16delete_characterEi($this,$i2$069$us$us$lcssa);
									$i2$067$us = (($i2$069$us$us$lcssa) + -1)|0;
									$189 = ($i2$069$us$us$lcssa|0)>(0);
									if ($189) {
										$i2$0$in$ph75$us = $i2$069$us$us$lcssa;$i2$06777$us = $i2$067$us;$modified$2$off0$ph76$us = 1;
									} else {
										$modified$2$off0$ph$lcssa = 1;
										break;
									}
								}
							} else {
								$modified$2$off0$ph$lcssa = 0;
							}
						} while(0);
						$190 = ($filter|0)==(7);
						if ($190) {
							__ZN8Textline35join_broken_unrecognized_charactersEv($this);
							if ($modified$2$off0$ph$lcssa) {
								break;
							}
							STACKTOP = sp;return;
						} else {
							if ($modified$2$off0$ph$lcssa) {
								break;
							}
							STACKTOP = sp;return;
						}
					}
				} while(0);
				__ZN8Textline40remove_leadind_trailing_duplicate_spacesEv($this);
				STACKTOP = sp;return;
			}
			function __ZN8Textline35join_broken_unrecognized_charactersEv($this) {
				$this = $this|0;
				var $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$011 = 0, $i$011$in = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(4);
				if (!($5)) {
					return;
				}
				$6 = $4 >> 2;
				$$phi$trans$insert$i = ((($this)) + 16|0);
				$i$011$in = $6;
				while(1) {
					$i$011 = (($i$011$in) + -1)|0;
					$7 = ($i$011$in|0)<(1);
					if ($7) {
						label = 7;
					} else {
						$8 = HEAP32[$1>>2]|0;
						$9 = HEAP32[$0>>2]|0;
						$10 = (($8) - ($9))|0;
						$11 = $10 >> 2;
						$12 = ($11|0)<($i$011$in|0);
						if ($12) {
							label = 7;
						} else {
							$13 = $9;
							$16 = $13;$26 = $9;
						}
					}
					if ((label|0) == 7) {
						label = 0;
						__ZN5Ocrad14internal_errorEPKc(3008);
						$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
						$14 = $$pre$i;
						$16 = $$pre$i;$26 = $14;
					}
					$15 = (($16) + ($i$011<<2)|0);
					$17 = HEAP32[$15>>2]|0;
					$18 = ((($17)) + 28|0);
					$19 = ((($17)) + 32|0);
					$20 = HEAP32[$19>>2]|0;
					$21 = HEAP32[$18>>2]|0;
					$22 = ($20|0)==($21|0);
					if ($22) {
						if ($7) {
							label = 13;
						} else {
							$24 = HEAP32[$1>>2]|0;
							$25 = (($24) - ($26))|0;
							$27 = $25 >> 2;
							$28 = ($27|0)<($i$011$in|0);
							if ($28) {
								label = 13;
							} else {
								$29 = $26;
								$32 = $29;$38 = $26;
							}
						}
						if ((label|0) == 13) {
							label = 0;
							__ZN5Ocrad14internal_errorEPKc(3008);
							$$pre$i7 = HEAP32[$$phi$trans$insert$i>>2]|0;
							$30 = $$pre$i7;
							$32 = $$pre$i7;$38 = $30;
						}
						$31 = (($32) + ($i$011<<2)|0);
						$33 = HEAP32[$31>>2]|0;
						$34 = (($i$011$in) + -2)|0;
						$35 = ($i$011$in|0)<(2);
						if ($35) {
							label = 17;
						} else {
							$36 = HEAP32[$1>>2]|0;
							$37 = (($36) - ($38))|0;
							$39 = $37 >> 2;
							$40 = ($39|0)>($34|0);
							if ($40) {
								$41 = $38;
								$43 = $41;
							} else {
								label = 17;
							}
						}
						if ((label|0) == 17) {
							label = 0;
							__ZN5Ocrad14internal_errorEPKc(3008);
							$$pre$i3 = HEAP32[$$phi$trans$insert$i>>2]|0;
							$43 = $$pre$i3;
						}
						$42 = (($43) + ($34<<2)|0);
						$44 = HEAP32[$42>>2]|0;
						$45 = (__ZNK9Rectangle10h_overlapsERKS_($33,$44)|0);
						if ($45) {
							__ZN8Textline16delete_characterEi($this,$i$011);
						}
					}
					$23 = ($i$011|0)>(1);
					if ($23) {
						$i$011$in = $i$011;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN8Textline40remove_leadind_trailing_duplicate_spacesEv($this) {
				$this = $this|0;
				var $$phi$trans$insert$i = 0, $$pre$i = 0, $$pre$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $i$07$in = 0, $or$cond = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				if (!($5)) {
					return;
				}
				$6 = $4 >> 2;
				$$phi$trans$insert$i = ((($this)) + 16|0);
				$i$07$in = $6;
				while(1) {
					$i$07 = (($i$07$in) + -1)|0;
					$7 = ($i$07$in|0)<(1);
					if ($7) {
						label = 7;
					} else {
						$8 = HEAP32[$1>>2]|0;
						$9 = HEAP32[$0>>2]|0;
						$10 = (($8) - ($9))|0;
						$11 = $10 >> 2;
						$12 = ($11|0)<($i$07$in|0);
						if ($12) {
							label = 7;
						} else {
							$13 = $9;
							$15 = $13;
						}
					}
					if ((label|0) == 7) {
						label = 0;
						__ZN5Ocrad14internal_errorEPKc(3008);
						$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
						$15 = $$pre$i;
					}
					$14 = (($15) + ($i$07<<2)|0);
					$16 = HEAP32[$14>>2]|0;
					$17 = (__ZNK9Character5maybeEi($16,32)|0);
					do {
						if ($17) {
							$19 = ($i$07|0)==(0);
							if (!($19)) {
								$20 = HEAP32[$1>>2]|0;
								$21 = HEAP32[$0>>2]|0;
								$22 = (($20) - ($21))|0;
								$23 = $22 >> 2;
								$24 = ($i$07$in|0)==($23|0);
								if (!($24)) {
									$25 = (($i$07$in) + -2)|0;
									$26 = ($25|0)>(-1);
									$27 = ($23|0)>($25|0);
									$or$cond = $26 & $27;
									if ($or$cond) {
										$28 = $21;
										$30 = $28;
									} else {
										__ZN5Ocrad14internal_errorEPKc(3008);
										$$pre$i3 = HEAP32[$$phi$trans$insert$i>>2]|0;
										$30 = $$pre$i3;
									}
									$29 = (($30) + ($25<<2)|0);
									$31 = HEAP32[$29>>2]|0;
									$32 = (__ZNK9Character5maybeEi($31,32)|0);
									if (!($32)) {
										break;
									}
								}
							}
							__ZN8Textline16delete_characterEi($this,$i$07);
						}
					} while(0);
					$18 = ($i$07$in|0)>(1);
					if ($18) {
						$i$07$in = $i$07;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN8Textline17apply_user_filterERK11User_filter($this,$user_filter) {
				$this = $this|0;
				$user_filter = $user_filter|0;
				var $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0613$in = 0, $i$08 = 0, $i$08$in = 0, $i$08$in$lcssa = 0;
				var $i$08$lcssa = 0, $modified$0$off0$ph$lcssa = 0, $modified$0$off0$ph12 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = ((($this)) + 20|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = ($4|0)>(0);
				L1: do {
					if ($5) {
						$6 = $4 >> 2;
						$$phi$trans$insert$i = ((($this)) + 16|0);
						$7 = ((($user_filter)) + 40|0);
						$i$0613$in = $6;$modified$0$off0$ph12 = 0;
						while(1) {
							$i$08$in = $i$0613$in;
							while(1) {
								$i$08 = (($i$08$in) + -1)|0;
								$10 = ($i$08$in|0)<(1);
								if ($10) {
									label = 9;
								} else {
									$11 = HEAP32[$1>>2]|0;
									$12 = HEAP32[$0>>2]|0;
									$13 = (($11) - ($12))|0;
									$14 = $13 >> 2;
									$15 = ($14|0)<($i$08$in|0);
									if ($15) {
										label = 9;
									} else {
										$16 = $12;
										$18 = $16;
									}
								}
								if ((label|0) == 9) {
									label = 0;
									__ZN5Ocrad14internal_errorEPKc(3008);
									$$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
									$18 = $$pre$i;
								}
								$17 = (($18) + ($i$08<<2)|0);
								$19 = HEAP32[$17>>2]|0;
								$20 = ((($19)) + 28|0);
								$21 = ((($19)) + 32|0);
								$22 = HEAP32[$21>>2]|0;
								$23 = HEAP32[$20>>2]|0;
								$24 = ($22|0)==($23|0);
								if (!($24)) {
									__ZN9Character17apply_user_filterERK11User_filter($19,$user_filter);
									$25 = HEAP32[$21>>2]|0;
									$26 = HEAP32[$20>>2]|0;
									$27 = ($25|0)==($26|0);
									$28 = HEAP32[$7>>2]|0;
									$29 = ($28|0)==(0);
									$or$cond = $27 & $29;
									if ($or$cond) {
										$i$08$in$lcssa = $i$08$in;$i$08$lcssa = $i$08;
										break;
									}
								}
								$30 = ($i$08$in|0)>(1);
								if ($30) {
									$i$08$in = $i$08;
								} else {
									$$pre$phiZ2D = $7;$modified$0$off0$ph$lcssa = $modified$0$off0$ph12;
									break L1;
								}
							}
							__ZN8Textline16delete_characterEi($this,$i$08$lcssa);
							$31 = ($i$08$in$lcssa|0)>(1);
							if ($31) {
								$i$0613$in = $i$08$lcssa;$modified$0$off0$ph12 = 1;
							} else {
								$$pre$phiZ2D = $7;$modified$0$off0$ph$lcssa = 1;
								break;
							}
						}
					} else {
						$$pre = ((($user_filter)) + 40|0);
						$$pre$phiZ2D = $$pre;$modified$0$off0$ph$lcssa = 0;
					}
				} while(0);
				$8 = HEAP32[$$pre$phiZ2D>>2]|0;
				$9 = ($8|0)==(2);
				if ($9) {
					__ZN8Textline35join_broken_unrecognized_charactersEv($this);
				}
				if (!($modified$0$off0$ph$lcssa)) {
					return;
				}
				__ZN8Textline40remove_leadind_trailing_duplicate_spacesEv($this);
				return;
			}
			function __ZN5Track9set_trackERKNSt3__16vectorI9RectangleNS0_9allocatorIS2_EEEE($this,$rectangle_vector) {
				$this = $this|0;
				$rectangle_vector = $rectangle_vector|0;
				var $$byval_copy = 0, $$in = 0, $$lcssa115 = 0, $$pre = 0, $$pre$i = 0, $$pre$i5$i = 0, $$pre$phi73Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre$i$i = 0, $$pre65 = 0, $$pre66 = 0, $$pre68 = 0, $$pre70 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
				var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
				var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
				var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
				var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
				var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
				var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
				var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
				var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
				var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
				var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
				var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
				var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i7 = 0, $i$021$i = 0, $i$046 = 0, $i1$041 = 0, $i1$06$i$i = 0, $i1$08$i$i = 0, $i2$0$i$i = 0, $i2$0$i$i$lcssa114 = 0, $i2$0$in$i$i = 0, $i2$0$in$ph$i$i = 0, $i2$04$i$i = 0, $i2$040 = 0, $i2$1 = 0, $ibest$0$lcssa$i$i = 0, $ibest$0$lcssa$i7$i = 0;
				var $ibest$0$ph$i$i = 0, $ibest$07$i$i = 0, $ibest$09$i$i = 0, $ibest$1$ph$i$i = 0, $ibest$1$ph$i$i$lcssa = 0, $ibest$15$i$i = 0, $ibest$2$i$i = 0, $ibest$2$i$i$lcssa = 0, $lcol$0$i = 0, $lcol$0$in$i = 0, $lpad$phi$index = 0, $lpad$phi$index20 = 0, $lvc$0$i = 0, $mean_height$0$lcssa$i = 0, $mean_height$022$i = 0, $mean_height$111$i = 0, $mean_vcenter$0$lcssa$i = 0, $mean_vcenter$023$i = 0, $mean_vcenter$112$i = 0, $mean_width$0$lcssa$i = 0;
				var $mean_width$020$i = 0, $not$ = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i$i2$i = 0, $or$cond$i4$i = 0, $or$cond$i8$i = 0, $or$cond$i9$i = 0, $rcol$0$i = 0, $rcol$0$in$i = 0, $rvc$0$i = 0, $s1$0$lcssa = 0, $s1$045 = 0, $s2$0$lcssa = 0, $s2$044 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i17 = 0, $scevgep$i$i$i4 = 0, $scevgep$i$i$i8 = 0, $scevgep4$i$i$i = 0;
				var $scevgep4$i$i$i18 = 0, $scevgep4$i$i$i5 = 0, $scevgep4$i$i$i9 = 0, $storemerge = 0, $storemerge74 = 0, $storemerge75 = 0, $storemerge76 = 0, $storemerge77 = 0, $tmp = 0, $v = 0, $val$i$i = 0, $val$i6$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0;
				var $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $vc$0$i$i3$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 132|0;
				$vararg_buffer12 = sp + 48|0;
				$vararg_buffer5 = sp + 24|0;
				$vararg_buffer = sp;
				$val$i6$i = sp + 128|0;
				$val$i$i = sp + 124|0;
				$tmp = sp + 112|0;
				$0 = sp + 92|0;
				$v = sp + 72|0;
				$1 = sp + 68|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($this)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)==($2|0);
				$6 = $2;
				if ($5) {
					$$in = $4;
				} else {
					$scevgep$i$i$i = ((($4)) + -20|0);
					$7 = $scevgep$i$i$i;
					$8 = (($7) - ($6))|0;
					$9 = (($8>>>0) / 20)&-1;
					$10 = $9 ^ -1;
					$scevgep4$i$i$i = (($4) + (($10*20)|0)|0);
					HEAP32[$3>>2] = $scevgep4$i$i$i;
					$$in = $scevgep4$i$i$i;
				}
				$11 = $$in;
				$12 = HEAP32[$rectangle_vector>>2]|0;
				$13 = ((($rectangle_vector)) + 4|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ($12|0)==($14|0);
				if ($15) {
					STACKTOP = sp;return;
				}
				$16 = $14;
				$17 = $12;
				HEAP32[$tmp>>2] = 0;
				$18 = ((($tmp)) + 4|0);
				HEAP32[$18>>2] = 0;
				$19 = ((($tmp)) + 8|0);
				HEAP32[$19>>2] = 0;
				$20 = ((($12)) + 8|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = HEAP32[$12>>2]|0;
				$23 = (($21) + 1)|0;
				$24 = (($23) - ($22))|0;
				$25 = (($16) - ($17))|0;
				$26 = $25 >> 4;
				$27 = ($26>>>0)>(1);
				if ($27) {
					$50 = $21;$i$046 = 1;$s1$045 = $24;$s2$044 = 0;
					while(1) {
						$41 = (((($12) + ($i$046<<4)|0)) + 8|0);
						$42 = HEAP32[$41>>2]|0;
						$43 = (($12) + ($i$046<<4)|0);
						$44 = HEAP32[$43>>2]|0;
						$45 = (($s1$045) + 1)|0;
						$46 = (($45) + ($42))|0;
						$47 = (($46) - ($44))|0;
						$48 = (($44) + ($s2$044))|0;
						$49 = (($48) - ($50))|0;
						$51 = (($i$046) + 1)|0;
						$52 = ($51>>>0)<($26>>>0);
						if ($52) {
							$50 = $42;$i$046 = $51;$s1$045 = $47;$s2$044 = $49;
						} else {
							$s1$0$lcssa = $47;$s2$0$lcssa = $49;
							break;
						}
					}
				} else {
					$s1$0$lcssa = $24;$s2$0$lcssa = 0;
				}
				$53 = ($s1$0$lcssa|0)<($s2$0$lcssa|0);
				$54 = $53 ? $s2$0$lcssa : $s1$0$lcssa;
				$55 = ($54*5)|0;
				$56 = (($55>>>0) / ($26>>>0))&-1;
				$57 = ($14|0)==($12|0);
				do {
					if ($57) {
						$$pre$phi73Z2D = $this;$$pre$phiZ2D = $3;$310 = $2;$67 = $6;$68 = $11;
						label = 16;
					} else {
						$58 = ((($tmp)) + 8|0);
						$59 = HEAP32[90]|0;
						$60 = ((($0)) + 4|0);
						$61 = ((($0)) + 8|0);
						$62 = ((($0)) + 12|0);
						$63 = ((($0)) + 16|0);
						$64 = ((($this)) + 8|0);
						$77 = $12;$78 = 0;$80 = 0;$i1$041 = 0;
						L14: while(1) {
							$76 = (($77) + ($i1$041<<4)|0);
							$79 = ($78|0)==($80|0);
							if ($79) {
								__THREW__ = 0;
								invoke_vii(179,($tmp|0),($76|0));
								$82 = __THREW__; __THREW__ = 0;
								$83 = $82&1;
								if ($83) {
									label = 6;
									break;
								}
							} else {
								;HEAP32[$78>>2]=HEAP32[$76>>2]|0;HEAP32[$78+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$78+12>>2]=HEAP32[$76+12>>2]|0;
								$81 = ((($78)) + 16|0);
								HEAP32[$18>>2] = $81;
							}
							$84 = (($i1$041) + 1)|0;
							$85 = HEAP32[$13>>2]|0;
							$86 = HEAP32[$rectangle_vector>>2]|0;
							$87 = (($85) - ($86))|0;
							$88 = $87 >> 4;
							$89 = ($84>>>0)<($88>>>0);
							if ($89) {
								$90 = $86;
								$91 = (($90) + ($84<<4)|0);
								$92 = HEAP32[$91>>2]|0;
								$93 = (((($77) + ($i1$041<<4)|0)) + 8|0);
								$94 = HEAP32[$93>>2]|0;
								$95 = (($92) - ($94))|0;
								$not$ = ($95|0)<($56|0);
								if (!($not$)) {
									label = 23;
								}
							} else {
								label = 23;
							}
							if ((label|0) == 23) {
								label = 0;
								$96 = HEAP32[$18>>2]|0;
								$97 = HEAP32[$tmp>>2]|0;
								$98 = (($96) - ($97))|0;
								$99 = $98 >> 4;
								$100 = ($98|0)>(0);
								$101 = $97;
								$102 = $96;
								if ($100) {
									$i$021$i = 0;$mean_height$022$i = 0;$mean_vcenter$023$i = 0;$mean_width$020$i = 0;
									while(1) {
										$104 = (((($101) + ($i$021$i<<4)|0)) + 4|0);
										$105 = HEAP32[$104>>2]|0;
										$106 = (((($101) + ($i$021$i<<4)|0)) + 12|0);
										$107 = HEAP32[$106>>2]|0;
										$108 = (($107) + ($105))|0;
										$109 = (($108|0) / 2)&-1;
										$110 = (($109) + ($mean_vcenter$023$i))|0;
										$111 = (($mean_height$022$i) + 1)|0;
										$112 = (($111) - ($105))|0;
										$113 = (($112) + ($107))|0;
										$114 = (((($101) + ($i$021$i<<4)|0)) + 8|0);
										$115 = HEAP32[$114>>2]|0;
										$116 = (($101) + ($i$021$i<<4)|0);
										$117 = HEAP32[$116>>2]|0;
										$118 = (($mean_width$020$i) + 1)|0;
										$119 = (($118) + ($115))|0;
										$120 = (($119) - ($117))|0;
										$121 = (($i$021$i) + 1)|0;
										$122 = ($121|0)<($99|0);
										if ($122) {
											$i$021$i = $121;$mean_height$022$i = $113;$mean_vcenter$023$i = $110;$mean_width$020$i = $120;
										} else {
											$mean_height$0$lcssa$i = $113;$mean_vcenter$0$lcssa$i = $110;$mean_width$0$lcssa$i = $120;
											break;
										}
									}
								} else {
									$mean_height$0$lcssa$i = 0;$mean_vcenter$0$lcssa$i = 0;$mean_width$0$lcssa$i = 0;
								}
								$103 = ($99|0)==(0);
								do {
									if ($103) {
										$mean_height$111$i = $mean_height$0$lcssa$i;$mean_vcenter$112$i = $mean_vcenter$0$lcssa$i;
										label = 27;
									} else {
										$123 = (($mean_vcenter$0$lcssa$i|0) / ($99|0))&-1;
										$124 = (($mean_height$0$lcssa$i|0) / ($99|0))&-1;
										$125 = (($mean_width$0$lcssa$i|0) / ($99|0))&-1;
										$126 = ($98|0)<(128);
										if ($126) {
											$mean_height$111$i = $124;$mean_vcenter$112$i = $123;
											label = 27;
										} else {
											$136 = (($99|0) / 4)&-1;
											HEAP32[$val$i6$i>>2] = 3;
											$311 = 3;$i1$08$i$i = 0;$ibest$09$i$i = -1;
											L31: while(1) {
												$137 = (($i1$08$i$i) + 1)|0;
												$142 = ($i1$08$i$i|0)<($136|0);
												$143 = (($i1$08$i$i) + 2)|0;
												if ($142) {
													$i2$04$i$i = $137;$ibest$15$i$i = $ibest$09$i$i;
													while(1) {
														$144 = HEAP32[$tmp>>2]|0;
														$145 = (($144) + ($i1$08$i$i<<4)|0);
														$146 = (($144) + ($i2$04$i$i<<4)|0);
														$147 = (__ZN12_GLOBAL__N_114good_referenceERK9RectangleS2_Riii($145,$146,$val$i6$i,$124,$125)|0);
														$148 = ($147|0)>(-1);
														if ($148) {
															$149 = ($147|0)==(0);
															$150 = $149 ? $i1$08$i$i : $i2$04$i$i;
															$151 = HEAP32[$val$i6$i>>2]|0;
															$152 = ($151|0)==(0);
															if ($152) {
																$ibest$0$lcssa$i7$i = $150;
																break L31;
															} else {
																$ibest$2$i$i = $150;
															}
														} else {
															$ibest$2$i$i = $ibest$15$i$i;
														}
														$153 = (($i2$04$i$i) + 1)|0;
														$154 = ($i2$04$i$i|0)>=($136|0);
														$155 = ($i2$04$i$i|0)>=($143|0);
														$or$cond$i8$i = $154 | $155;
														if ($or$cond$i8$i) {
															$ibest$2$i$i$lcssa = $ibest$2$i$i;
															break;
														} else {
															$i2$04$i$i = $153;$ibest$15$i$i = $ibest$2$i$i;
														}
													}
													$$pre$pre$i$i = HEAP32[$val$i6$i>>2]|0;
													$139 = $$pre$pre$i$i;$ibest$0$ph$i$i = $ibest$2$i$i$lcssa;
												} else {
													$139 = $311;$ibest$0$ph$i$i = $ibest$09$i$i;
												}
												$138 = ($137|0)<($136|0);
												$140 = ($139|0)>(0);
												$141 = $138 & $140;
												if ($141) {
													$311 = $139;$i1$08$i$i = $137;$ibest$09$i$i = $ibest$0$ph$i$i;
												} else {
													$ibest$0$lcssa$i7$i = $ibest$0$ph$i$i;
													break;
												}
											}
											$156 = HEAP32[$18>>2]|0;
											$157 = HEAP32[$tmp>>2]|0;
											$158 = (($156) - ($157))|0;
											$159 = $158 >> 4;
											$160 = (($159) + -1)|0;
											$161 = (($159|0) / 4)&-1;
											$162 = (($160) - ($161))|0;
											HEAP32[$val$i$i>>2] = 3;
											$163 = ($158|0)>(48);
											L42: do {
												if ($163) {
													$i1$06$i$i = $160;$ibest$07$i$i = -1;
													while(1) {
														$164 = (($i1$06$i$i) + -2)|0;
														$i2$0$in$ph$i$i = $i1$06$i$i;$ibest$1$ph$i$i = $ibest$07$i$i;
														L45: while(1) {
															$i2$0$in$i$i = $i2$0$in$ph$i$i;
															while(1) {
																$i2$0$i$i = (($i2$0$in$i$i) + -1)|0;
																$165 = ($i2$0$in$i$i|0)>($162|0);
																$166 = ($i2$0$in$i$i|0)>($164|0);
																$or$cond$i4$i = $165 & $166;
																if (!($or$cond$i4$i)) {
																	$ibest$1$ph$i$i$lcssa = $ibest$1$ph$i$i;
																	break L45;
																}
																$167 = HEAP32[$tmp>>2]|0;
																$168 = (($167) + ($i1$06$i$i<<4)|0);
																$169 = (($167) + ($i2$0$i$i<<4)|0);
																$170 = (__ZN12_GLOBAL__N_114good_referenceERK9RectangleS2_Riii($168,$169,$val$i$i,$124,$125)|0);
																$171 = ($170|0)>(-1);
																if ($171) {
																	$$lcssa115 = $170;$i2$0$i$i$lcssa114 = $i2$0$i$i;
																	break;
																} else {
																	$i2$0$in$i$i = $i2$0$i$i;
																}
															}
															$172 = ($$lcssa115|0)==(0);
															$173 = $172 ? $i1$06$i$i : $i2$0$i$i$lcssa114;
															$174 = HEAP32[$val$i$i>>2]|0;
															$175 = ($174|0)==(0);
															if ($175) {
																$ibest$0$lcssa$i$i = $173;
																break L42;
															} else {
																$i2$0$in$ph$i$i = $i2$0$i$i$lcssa114;$ibest$1$ph$i$i = $173;
															}
														}
														$$pre$i5$i = HEAP32[$val$i$i>>2]|0;
														$176 = (($i1$06$i$i) + -1)|0;
														$177 = ($176|0)>($162|0);
														$178 = ($$pre$i5$i|0)>(0);
														$179 = $177 & $178;
														if ($179) {
															$i1$06$i$i = $176;$ibest$07$i$i = $ibest$1$ph$i$i$lcssa;
														} else {
															$ibest$0$lcssa$i$i = $ibest$1$ph$i$i$lcssa;
															break;
														}
													}
												} else {
													$ibest$0$lcssa$i$i = -1;
												}
											} while(0);
											$180 = ($ibest$0$lcssa$i7$i|0)>(-1);
											$181 = HEAP32[$tmp>>2]|0;
											if ($180) {
												$182 = (($181) + ($ibest$0$lcssa$i7$i<<4)|0);
												$183 = HEAP32[$182>>2]|0;
												$184 = (((($181) + ($ibest$0$lcssa$i7$i<<4)|0)) + 8|0);
												$185 = HEAP32[$184>>2]|0;
												$186 = (($185) + ($183))|0;
												$187 = (((($181) + ($ibest$0$lcssa$i7$i<<4)|0)) + 12|0);
												$188 = HEAP32[$187>>2]|0;
												$189 = (($124|0) / 2)&-1;
												$190 = (($188) - ($189))|0;
												$lcol$0$in$i = $186;$lvc$0$i = $190;
											} else {
												$191 = HEAP32[$181>>2]|0;
												$192 = ((($181)) + 8|0);
												$193 = HEAP32[$192>>2]|0;
												$194 = (($193) + ($191))|0;
												$lcol$0$in$i = $194;$lvc$0$i = $123;
											}
											$lcol$0$i = (($lcol$0$in$i|0) / 2)&-1;
											$195 = ($ibest$0$lcssa$i$i|0)>(-1);
											if ($195) {
												$196 = (($181) + ($ibest$0$lcssa$i$i<<4)|0);
												$197 = HEAP32[$196>>2]|0;
												$198 = (((($181) + ($ibest$0$lcssa$i$i<<4)|0)) + 8|0);
												$199 = HEAP32[$198>>2]|0;
												$200 = (($199) + ($197))|0;
												$201 = (((($181) + ($ibest$0$lcssa$i$i<<4)|0)) + 12|0);
												$202 = HEAP32[$201>>2]|0;
												$203 = (($124|0) / 2)&-1;
												$204 = (($202) - ($203))|0;
												$rcol$0$in$i = $200;$rvc$0$i = $204;
											} else {
												$205 = HEAP32[$18>>2]|0;
												$206 = ((($205)) + -16|0);
												$207 = HEAP32[$206>>2]|0;
												$208 = ((($205)) + -8|0);
												$209 = HEAP32[$208>>2]|0;
												$210 = (($209) + ($207))|0;
												$rcol$0$in$i = $210;$rvc$0$i = $123;
											}
											$rcol$0$i = (($rcol$0$in$i|0) / 2)&-1;
											$211 = ($rcol$0$i|0)<($lcol$0$i|0);
											$212 = ($124|0)<(1);
											$or$cond$i$i = $212 | $211;
											if ($or$cond$i$i) {
												$213 = HEAP32[1700]|0;
												$214 = ($213|0)>(-1);
												if ($214) {
													HEAP32[$vararg_buffer5>>2] = $lcol$0$i;
													$vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
													HEAP32[$vararg_ptr8>>2] = $lvc$0$i;
													$vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
													HEAP32[$vararg_ptr9>>2] = $rcol$0$i;
													$vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
													HEAP32[$vararg_ptr10>>2] = $rvc$0$i;
													$vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
													HEAP32[$vararg_ptr11>>2] = $124;
													(_fprintf($59,3264,$vararg_buffer5)|0);
												}
												__THREW__ = 0;
												invoke_vi(47,(3306|0));
												$215 = __THREW__; __THREW__ = 0;
												$216 = $215&1;
												if ($216) {
													label = 6;
													break L14;
												}
												$$pre$i = HEAP32[$tmp>>2]|0;
												$218 = $$pre$i;
											} else {
												$218 = $181;
											}
											$217 = HEAP32[$218>>2]|0;
											$219 = ($rcol$0$i|0)<($217|0);
											if ($219) {
												__THREW__ = 0;
												invoke_vi(47,(3342|0));
												$220 = __THREW__; __THREW__ = 0;
												$221 = $220&1;
												if ($221) {
													label = 6;
													break L14;
												}
											}
											$222 = ($rcol$0$i|0)!=($lcol$0$i|0);
											$223 = ($rvc$0$i|0)!=($lvc$0$i|0);
											$or$cond$i$i2$i = $222 & $223;
											if ($or$cond$i$i2$i) {
												$224 = (($rvc$0$i) - ($lvc$0$i))|0;
												$225 = (($rcol$0$i) - ($lcol$0$i))|0;
												$226 = (($217) - ($lcol$0$i))|0;
												$227 = Math_imul($226, $224)|0;
												$228 = (($227|0) / ($225|0))&-1;
												$229 = (($228) + ($lvc$0$i))|0;
												$vc$0$i$i3$i = $229;
											} else {
												$vc$0$i$i3$i = $lvc$0$i;
											}
											$230 = HEAP32[$18>>2]|0;
											$231 = ((($230)) + -8|0);
											$232 = HEAP32[$231>>2]|0;
											$233 = ($232|0)<($217|0);
											if ($233) {
												__THREW__ = 0;
												invoke_vi(47,(3391|0));
												$234 = __THREW__; __THREW__ = 0;
												$235 = $234&1;
												if ($235) {
													label = 6;
													break L14;
												}
											}
											$236 = ($rcol$0$i|0)!=($217|0);
											$237 = ($rvc$0$i|0)!=($vc$0$i$i3$i|0);
											$or$cond$i$i$i = $236 & $237;
											if (!($or$cond$i$i$i)) {
												$storemerge = $124;$storemerge74 = $vc$0$i$i3$i;$storemerge75 = $232;$storemerge76 = $vc$0$i$i3$i;$storemerge77 = $217;
												break;
											}
											$238 = (($rvc$0$i) - ($vc$0$i$i3$i))|0;
											$239 = (($rcol$0$i) - ($217))|0;
											$240 = (($232) - ($217))|0;
											$241 = Math_imul($240, $238)|0;
											$242 = (($241|0) / ($239|0))&-1;
											$243 = (($242) + ($vc$0$i$i3$i))|0;
											$storemerge = $124;$storemerge74 = $243;$storemerge75 = $232;$storemerge76 = $vc$0$i$i3$i;$storemerge77 = $217;
										}
									}
								} while(0);
								if ((label|0) == 27) {
									label = 0;
									$127 = HEAP32[$101>>2]|0;
									$128 = ((($102)) + -8|0);
									$129 = HEAP32[$128>>2]|0;
									$130 = ($129|0)<($127|0);
									$131 = ($mean_height$111$i|0)<(1);
									$or$cond$i9$i = $131 | $130;
									if ($or$cond$i9$i) {
										$132 = HEAP32[1700]|0;
										$133 = ($132|0)>(-1);
										if ($133) {
											HEAP32[$vararg_buffer>>2] = $127;
											$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
											HEAP32[$vararg_ptr1>>2] = $mean_vcenter$112$i;
											$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
											HEAP32[$vararg_ptr2>>2] = $129;
											$vararg_ptr3 = ((($vararg_buffer)) + 12|0);
											HEAP32[$vararg_ptr3>>2] = $mean_vcenter$112$i;
											$vararg_ptr4 = ((($vararg_buffer)) + 16|0);
											HEAP32[$vararg_ptr4>>2] = $mean_height$111$i;
											(_fprintf($59,3264,$vararg_buffer)|0);
										}
										__THREW__ = 0;
										invoke_vi(47,(3306|0));
										$134 = __THREW__; __THREW__ = 0;
										$135 = $134&1;
										if ($135) {
											label = 6;
											break;
										} else {
											$storemerge = $mean_height$111$i;$storemerge74 = $mean_vcenter$112$i;$storemerge75 = $129;$storemerge76 = $mean_vcenter$112$i;$storemerge77 = $127;
										}
									} else {
										$storemerge = $mean_height$111$i;$storemerge74 = $mean_vcenter$112$i;$storemerge75 = $129;$storemerge76 = $mean_vcenter$112$i;$storemerge77 = $127;
									}
								}
								HEAP32[$0>>2] = $storemerge77;
								HEAP32[$60>>2] = $storemerge76;
								HEAP32[$61>>2] = $storemerge75;
								HEAP32[$62>>2] = $storemerge74;
								HEAP32[$63>>2] = $storemerge;
								$244 = HEAP32[$3>>2]|0;
								$245 = HEAP32[$64>>2]|0;
								$246 = ($244|0)==($245|0);
								if ($246) {
									__THREW__ = 0;
									invoke_vii(180,($this|0),($0|0));
									$249 = __THREW__; __THREW__ = 0;
									$250 = $249&1;
									if ($250) {
										label = 6;
										break;
									}
								} else {
									;HEAP32[$244>>2]=HEAP32[$0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$244+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$244+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$244+16>>2]=HEAP32[$0+16>>2]|0;
									$247 = HEAP32[$3>>2]|0;
									$248 = ((($247)) + 20|0);
									HEAP32[$3>>2] = $248;
								}
								$251 = HEAP32[$tmp>>2]|0;
								$252 = HEAP32[$18>>2]|0;
								$253 = ($252|0)==($251|0);
								if (!($253)) {
									$__new_last2$i$i$i7 = $251;
									$scevgep$i$i$i8 = ((($252)) + -16|0);
									$260 = $scevgep$i$i$i8;
									$261 = (($260) - ($__new_last2$i$i$i7))|0;
									$262 = $261 >>> 4;
									$263 = $262 ^ -1;
									$scevgep4$i$i$i9 = (($252) + ($263<<4)|0);
									HEAP32[$18>>2] = $scevgep4$i$i$i9;
								}
							}
							$254 = HEAP32[$13>>2]|0;
							$255 = HEAP32[$rectangle_vector>>2]|0;
							$256 = (($254) - ($255))|0;
							$257 = $256 >> 4;
							$258 = ($84>>>0)<($257>>>0);
							if (!($258)) {
								label = 15;
								break;
							}
							$259 = $255;
							$$pre = HEAP32[$18>>2]|0;
							$$pre65 = HEAP32[$58>>2]|0;
							$77 = $259;$78 = $$pre;$80 = $$pre65;$i1$041 = $84;
						}
						if ((label|0) == 6) {
							$30 = ___cxa_find_matching_catch_2()|0;
							$31 = tempRet0;
							$lpad$phi$index = $30;$lpad$phi$index20 = $31;
							break;
						}
						else if ((label|0) == 15) {
							$$pre66 = HEAP32[$3>>2]|0;
							$$pre68 = HEAP32[$this>>2]|0;
							$65 = $$pre68;
							$$pre$phi73Z2D = $this;$$pre$phiZ2D = $3;$310 = $65;$67 = $$pre68;$68 = $$pre66;
							label = 16;
							break;
						}
					}
				} while(0);
				L95: do {
					if ((label|0) == 16) {
						$66 = (($68) - ($67))|0;
						$69 = (($66|0) / 20)&-1;
						$70 = ($69>>>0)>(1);
						L97: do {
							if ($70) {
								$71 = HEAP32[90]|0;
								$72 = ((($v)) + 4|0);
								$73 = ((($v)) + 8|0);
								$74 = ((($v)) + 12|0);
								$75 = ((($v)) + 16|0);
								$274 = $310;$278 = 1;$i2$040 = 0;
								while(1) {
									$273 = (((($274) + (($i2$040*20)|0)|0)) + 8|0);
									$275 = HEAP32[$273>>2]|0;
									$276 = (($275) + 1)|0;
									$277 = (($274) + (($278*20)|0)|0);
									$279 = HEAP32[$277>>2]|0;
									$280 = ($276|0)<($279|0);
									if ($280) {
										$281 = (((($274) + (($i2$040*20)|0)|0)) + 12|0);
										$282 = HEAP32[$281>>2]|0;
										$283 = (($279) + -1)|0;
										$284 = (((($274) + (($278*20)|0)|0)) + 4|0);
										$285 = HEAP32[$284>>2]|0;
										$286 = (((($274) + (($i2$040*20)|0)|0)) + 16|0);
										$287 = HEAP32[$286>>2]|0;
										$288 = (((($274) + (($278*20)|0)|0)) + 16|0);
										$289 = HEAP32[$288>>2]|0;
										$290 = (($289) + ($287))|0;
										$291 = (($290|0) / 2)&-1;
										$292 = ($290|0)<(2);
										if ($292) {
											$293 = HEAP32[1700]|0;
											$294 = ($293|0)>(-1);
											if ($294) {
												HEAP32[$vararg_buffer12>>2] = $276;
												$vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
												HEAP32[$vararg_ptr15>>2] = $282;
												$vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
												HEAP32[$vararg_ptr16>>2] = $283;
												$vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
												HEAP32[$vararg_ptr17>>2] = $285;
												$vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
												HEAP32[$vararg_ptr18>>2] = $291;
												(_fprintf($71,3264,$vararg_buffer12)|0);
											}
											__THREW__ = 0;
											invoke_vi(47,(3306|0));
											$295 = __THREW__; __THREW__ = 0;
											$296 = $295&1;
											if ($296) {
												break;
											}
											$$pre70 = HEAP32[$this>>2]|0;
											$298 = $$pre70;
										} else {
											$298 = $274;
										}
										HEAP32[$v>>2] = $276;
										HEAP32[$72>>2] = $282;
										HEAP32[$73>>2] = $283;
										HEAP32[$74>>2] = $285;
										HEAP32[$75>>2] = $291;
										$297 = (($298) + (($278*20)|0)|0);
										$299 = $297;
										HEAP32[$1>>2] = $299;
										__THREW__ = 0;
										;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
										(invoke_iiii(181,($this|0),($$byval_copy|0),($v|0))|0);
										$300 = __THREW__; __THREW__ = 0;
										$301 = $300&1;
										if ($301) {
											break;
										}
										$i2$1 = $278;
									} else {
										$i2$1 = $i2$040;
									}
									$302 = (($i2$1) + 1)|0;
									$303 = (($i2$1) + 2)|0;
									$304 = HEAP32[$$pre$phiZ2D>>2]|0;
									$305 = HEAP32[$$pre$phi73Z2D>>2]|0;
									$306 = (($304) - ($305))|0;
									$307 = (($306|0) / 20)&-1;
									$308 = ($303>>>0)<($307>>>0);
									$309 = $305;
									if ($308) {
										$274 = $309;$278 = $303;$i2$040 = $302;
									} else {
										break L97;
									}
								}
								$28 = ___cxa_find_matching_catch_2()|0;
								$29 = tempRet0;
								$lpad$phi$index = $28;$lpad$phi$index20 = $29;
								break L95;
							}
						} while(0);
						$264 = HEAP32[$tmp>>2]|0;
						$265 = ($264|0)==(0|0);
						$266 = $264;
						if (!($265)) {
							$267 = HEAP32[$18>>2]|0;
							$268 = ($267|0)==($264|0);
							if (!($268)) {
								$scevgep$i$i$i4 = ((($267)) + -16|0);
								$269 = $scevgep$i$i$i4;
								$270 = (($269) - ($266))|0;
								$271 = $270 >>> 4;
								$272 = $271 ^ -1;
								$scevgep4$i$i$i5 = (($267) + ($272<<4)|0);
								HEAP32[$18>>2] = $scevgep4$i$i$i5;
							}
							__ZdlPv($264);
						}
						STACKTOP = sp;return;
					}
				} while(0);
				$32 = HEAP32[$tmp>>2]|0;
				$33 = ($32|0)==(0|0);
				$34 = $32;
				if ($33) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$35 = HEAP32[$18>>2]|0;
				$36 = ($35|0)==($32|0);
				if (!($36)) {
					$scevgep$i$i$i17 = ((($35)) + -16|0);
					$37 = $scevgep$i$i$i17;
					$38 = (($37) - ($34))|0;
					$39 = $38 >>> 4;
					$40 = $39 ^ -1;
					$scevgep4$i$i$i18 = (($35) + ($40<<4)|0);
					HEAP32[$18>>2] = $scevgep4$i$i$i18;
				}
				__ZdlPv($32);
				___resumeException($lpad$phi$index|0);
				// unreachable;
			}
			function __ZN12_GLOBAL__N_114good_referenceERK9RectangleS2_Riii($r1,$r2,$val,$mean_height,$mean_width) {
				$r1 = $r1|0;
				$r2 = $r2|0;
				$val = $val|0;
				$mean_height = $mean_height|0;
				$mean_width = $mean_width|0;
				var $$0 = 0, $$old = 0, $$old7 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0;
				var $ispos = 0, $ispos1 = 0, $ispos4 = 0, $neg = 0, $neg2 = 0, $neg5 = 0, $not$ = 0, $not$3 = 0, $not$6 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond19 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($r1)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($r1)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = $5 << 2;
				$7 = ($mean_height*3)|0;
				$8 = ($6|0)<($7|0);
				if ($8) {
					$$0 = -1;
					return ($$0|0);
				}
				$9 = ((($r2)) + 12|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = ((($r2)) + 4|0);
				$12 = HEAP32[$11>>2]|0;
				$13 = (($10) + 1)|0;
				$14 = (($13) - ($12))|0;
				$15 = $14 << 2;
				$16 = ($15|0)<($7|0);
				if ($16) {
					$$0 = -1;
					return ($$0|0);
				}
				$17 = ((($r1)) + 8|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = HEAP32[$r1>>2]|0;
				$20 = (($18) + 1)|0;
				$21 = (($20) - ($19))|0;
				$22 = ($21|0)<($mean_width|0);
				if ($22) {
					$23 = ((($r2)) + 8|0);
					$24 = HEAP32[$23>>2]|0;
					$25 = HEAP32[$r2>>2]|0;
					$26 = (($24) + 1)|0;
					$27 = (($26) - ($25))|0;
					$28 = ($27|0)>=($mean_width|0);
					$29 = HEAP32[$val>>2]|0;
					$30 = ($29|0)>(0);
					$or$cond = $28 & $30;
					if ($or$cond) {
						$$pr = $29;
					} else {
						$$0 = -1;
						return ($$0|0);
					}
				} else {
					$$old = HEAP32[$val>>2]|0;
					$$old7 = ($$old|0)>(0);
					if ($$old7) {
						$$pr = $$old;
					} else {
						$$0 = -1;
						return ($$0|0);
					}
				}
				$31 = ($mean_height*5)|0;
				$32 = ($6|0)>($31|0);
				$33 = ($15|0)>($31|0);
				$or$cond19 = $32 | $33;
				if (!($or$cond19)) {
					$34 = ($5*9)|0;
					$35 = ($mean_height*10)|0;
					$36 = ($34|0)>($35|0);
					$37 = ($14*9)|0;
					$38 = ($37|0)>($35|0);
					$or$cond10 = $36 | $38;
					if (!($or$cond10)) {
						$39 = (($1) - ($10))|0;
						$ispos4 = ($39|0)>(-1);
						$neg5 = (0 - ($39))|0;
						$40 = $ispos4 ? $39 : $neg5;
						$41 = ($40*10)|0;
						$42 = ($41|0)>($mean_height|0);
						if (!($42)) {
							HEAP32[$val>>2] = 0;
							$43 = HEAP32[$0>>2]|0;
							$44 = HEAP32[$2>>2]|0;
							$45 = (($43) + 1)|0;
							$46 = (($45) - ($44))|0;
							$47 = HEAP32[$9>>2]|0;
							$48 = HEAP32[$11>>2]|0;
							$49 = (($47) + 1)|0;
							$50 = (($49) - ($48))|0;
							$not$6 = ($46|0)>($50|0);
							$51 = $not$6&1;
							$$0 = $51;
							return ($$0|0);
						}
					}
					$52 = ($$pr|0)>(1);
					if (!($52)) {
						$$0 = -1;
						return ($$0|0);
					}
					$53 = (($1) + ($3))|0;
					$54 = (($53|0) / 2)&-1;
					$55 = (($10) + ($12))|0;
					$56 = (($55|0) / 2)&-1;
					$57 = (($54) - ($56))|0;
					$ispos1 = ($57|0)>(-1);
					$neg2 = (0 - ($57))|0;
					$58 = $ispos1 ? $57 : $neg2;
					$59 = ($58*10)|0;
					$60 = ($59|0)>($mean_height|0);
					if (!($60)) {
						HEAP32[$val>>2] = 1;
						$61 = HEAP32[$0>>2]|0;
						$62 = HEAP32[$9>>2]|0;
						$not$3 = ($61|0)>($62|0);
						$63 = $not$3&1;
						$$0 = $63;
						return ($$0|0);
					}
				}
				$64 = ($$pr|0)>(2);
				if (!($64)) {
					$$0 = -1;
					return ($$0|0);
				}
				$65 = (($1) + ($3))|0;
				$66 = (($65|0) / 2)&-1;
				$67 = (($10) + ($12))|0;
				$68 = (($67|0) / 2)&-1;
				$69 = (($66) - ($68))|0;
				$ispos = ($69|0)>(-1);
				$neg = (0 - ($69))|0;
				$70 = $ispos ? $69 : $neg;
				$71 = ($70*10)|0;
				$72 = ($71|0)>($mean_height|0);
				if ($72) {
					$$0 = -1;
					return ($$0|0);
				}
				HEAP32[$val>>2] = 2;
				$73 = HEAP32[$0>>2]|0;
				$74 = HEAP32[$9>>2]|0;
				$not$ = ($73|0)>($74|0);
				$75 = $not$&1;
				$$0 = $75;
				return ($$0|0);
			}
			function __ZNSt3__16vectorI9VrhomboidNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = (($3|0) / 20)&-1;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(214748364);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = (($9|0) / 20)&-1;
				$11 = ($10>>>0)<(107374182);
				if ($11) {
					$15 = $10 << 1;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = (($19|0) / 20)&-1;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$32 = $18;
					} else {
						$$0$i1 = $17;$39 = $18;$40 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = (($13|0) / 20)&-1;
					$$0$i1 = 214748364;$39 = $12;$40 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = ($$0$i1*20)|0;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $40;$32 = $39;
				}
				$24 = (($25) + (($26*20)|0)|0);
				$27 = (($25) + (($$0$i2*20)|0)|0);
				$28 = $27;
				;HEAP32[$24>>2]=HEAP32[$__x>>2]|0;HEAP32[$24+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$__x+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$__x+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$__x+16>>2]|0;
				$29 = ((($24)) + 20|0);
				$30 = $29;
				$31 = (($32) - ($$in))|0;
				$33 = (($31|0) / -20)&-1;
				$34 = (($24) + (($33*20)|0)|0);
				$35 = $34;
				$36 = $$in;
				_memcpy(($34|0),($36|0),($31|0))|0;
				HEAP32[$this>>2] = $35;
				HEAP32[$0>>2] = $30;
				HEAP32[$7>>2] = $28;
				$37 = ($$in|0)==(0);
				if ($37) {
					return;
				}
				$38 = $$in;
				__ZdlPv($38);
				return;
			}
			function __ZNSt3__16vectorI9VrhomboidNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_($this,$__position,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i8 = 0, $$0$i9 = 0, $$idx10 = 0, $$in$i7 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre11 = 0, $$pre12 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0;
				var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
				var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
				var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
				var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
				var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$21$0 = 0, $__v$sroa$37$0 = 0, $__xr$0 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = (($3|0) / 20)&-1;
				$5 = (($0) + (($4*20)|0)|0);
				$6 = ((($this)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)<($9>>>0);
				$11 = $7;
				$12 = $9;
				if ($10) {
					$13 = ($5|0)==($7|0);
					if ($13) {
						;HEAP32[$5>>2]=HEAP32[$__x>>2]|0;HEAP32[$5+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$__x+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$__x+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$__x+16>>2]|0;
						$14 = HEAP32[$6>>2]|0;
						$15 = ((($14)) + 20|0);
						HEAP32[$6>>2] = $15;
						$__p$0 = $5;
						return ($__p$0|0);
					}
					$16 = ((($5)) + 20|0);
					$17 = $16;
					$18 = (($11) - ($17))|0;
					$19 = (($18|0) / 20)&-1;
					$20 = (($5) + (($19*20)|0)|0);
					$21 = ($20>>>0)<($7>>>0);
					if ($21) {
						$$in$i7 = $7;$__i$01$i = $20;
						while(1) {
							;HEAP32[$$in$i7>>2]=HEAP32[$__i$01$i>>2]|0;HEAP32[$$in$i7+4>>2]=HEAP32[$__i$01$i+4>>2]|0;HEAP32[$$in$i7+8>>2]=HEAP32[$__i$01$i+8>>2]|0;HEAP32[$$in$i7+12>>2]=HEAP32[$__i$01$i+12>>2]|0;HEAP32[$$in$i7+16>>2]=HEAP32[$__i$01$i+16>>2]|0;
							$22 = ((($__i$01$i)) + 20|0);
							$23 = HEAP32[$6>>2]|0;
							$24 = ((($23)) + 20|0);
							HEAP32[$6>>2] = $24;
							$25 = ($22>>>0)<($7>>>0);
							if ($25) {
								$$in$i7 = $24;$__i$01$i = $22;
							} else {
								break;
							}
						}
					}
					$26 = (($18|0) / -20)&-1;
					$27 = (($7) + (($26*20)|0)|0);
					_memmove(($27|0),($5|0),($18|0))|0;
					$28 = ($5>>>0)>($__x>>>0);
					if ($28) {
						$__xr$0 = $__x;
					} else {
						$29 = HEAP32[$6>>2]|0;
						$30 = ($29>>>0)>($__x>>>0);
						$31 = ((($__x)) + 20|0);
						$$ = $30 ? $31 : $__x;
						$__xr$0 = $$;
					}
					;HEAP32[$5>>2]=HEAP32[$__xr$0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$__xr$0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$__xr$0+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$__xr$0+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$__xr$0+16>>2]|0;
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$32 = (($11) - ($1))|0;
				$33 = (($32|0) / 20)&-1;
				$34 = (($33) + 1)|0;
				$35 = ($34>>>0)>(214748364);
				if ($35) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre11 = HEAP32[$this>>2]|0;
					$36 = $$pre11;
					$$pre$phiZ2D = $8;$102 = $36;$38 = $$pre11;$39 = $$pre;
				} else {
					$$pre$phiZ2D = $8;$102 = $0;$38 = $1;$39 = $12;
				}
				$37 = (($39) - ($38))|0;
				$40 = (($37|0) / 20)&-1;
				$41 = ($40>>>0)<(107374182);
				if ($41) {
					$45 = $40 << 1;
					$46 = ($45>>>0)<($34>>>0);
					$47 = $46 ? $34 : $45;
					$48 = $5;
					$49 = (($48) - ($38))|0;
					$50 = (($49|0) / 20)&-1;
					$51 = ($47|0)==(0);
					if ($51) {
						$$0$i9 = 0;$55 = 0;$56 = $50;$88 = $48;
					} else {
						$$0$i8 = $47;$103 = $50;$104 = $48;
						label = 15;
					}
				} else {
					$42 = $5;
					$43 = (($42) - ($38))|0;
					$44 = (($43|0) / 20)&-1;
					$$0$i8 = 214748364;$103 = $44;$104 = $42;
					label = 15;
				}
				if ((label|0) == 15) {
					$52 = ($$0$i8*20)|0;
					$53 = (__Znwj($52)|0);
					$$0$i9 = $$0$i8;$55 = $53;$56 = $103;$88 = $104;
				}
				$54 = (($55) + (($56*20)|0)|0);
				$57 = $54;
				$58 = (($55) + (($$0$i9*20)|0)|0);
				$59 = $58;
				$60 = ($56|0)==($$0$i9|0);
				do {
					if ($60) {
						$61 = ($56|0)>(0);
						$$idx10 = ($56*20)|0;
						$62 = (($$idx10|0) / 20)&-1;
						if ($61) {
							$63 = (($62) + 1)|0;
							$64 = (($63|0) / -2)&-1;
							$65 = (($54) + (($64*20)|0)|0);
							$66 = $65;
							$82 = $65;$85 = $102;$__v$sroa$21$0 = $66;$__v$sroa$37$0 = $59;
							break;
						}
						$67 = $62 << 1;
						$68 = ($56|0)==(0);
						$69 = $68 ? 1 : $67;
						$70 = $69 >>> 2;
						$71 = ($69|0)==(0);
						do {
							if ($71) {
								$77 = 0;
							} else {
								$72 = ($69*20)|0;
								__THREW__ = 0;
								$73 = (invoke_ii(29,($72|0))|0);
								$74 = __THREW__; __THREW__ = 0;
								$75 = $74&1;
								if (!($75)) {
									$77 = $73;
									break;
								}
								$99 = ___cxa_find_matching_catch_2()|0;
								$100 = tempRet0;
								$101 = ($55|0)==(0|0);
								if ($101) {
									___resumeException($99|0);
									// unreachable;
								}
								__ZdlPv($55);
								___resumeException($99|0);
								// unreachable;
							}
						} while(0);
						$76 = (($77) + (($70*20)|0)|0);
						$78 = $76;
						$79 = (($77) + (($69*20)|0)|0);
						$80 = $79;
						$81 = ($55|0)==(0|0);
						if ($81) {
							$82 = $76;$85 = $102;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
						} else {
							__ZdlPv($55);
							$$pre12 = HEAP32[$this>>2]|0;
							$82 = $76;$85 = $$pre12;$__v$sroa$21$0 = $78;$__v$sroa$37$0 = $80;
						}
					} else {
						$82 = $54;$85 = $102;$__v$sroa$21$0 = $57;$__v$sroa$37$0 = $59;
					}
				} while(0);
				;HEAP32[$82>>2]=HEAP32[$__x>>2]|0;HEAP32[$82+4>>2]=HEAP32[$__x+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$__x+8>>2]|0;HEAP32[$82+12>>2]=HEAP32[$__x+12>>2]|0;HEAP32[$82+16>>2]=HEAP32[$__x+16>>2]|0;
				$83 = $__v$sroa$21$0;
				$84 = ((($83)) + 20|0);
				$86 = $85;
				$87 = (($88) - ($86))|0;
				$89 = (($87|0) / -20)&-1;
				$90 = (($83) + (($89*20)|0)|0);
				$91 = $90;
				_memcpy(($90|0),($85|0),($87|0))|0;
				$92 = HEAP32[$6>>2]|0;
				$93 = (($92) - ($88))|0;
				$94 = (($93|0) / 20)&-1;
				_memcpy(($84|0),($5|0),($93|0))|0;
				$95 = (($84) + (($94*20)|0)|0);
				$96 = $95;
				$97 = HEAP32[$this>>2]|0;
				HEAP32[$this>>2] = $91;
				HEAP32[$6>>2] = $96;
				HEAP32[$$pre$phiZ2D>>2] = $__v$sroa$37$0;
				$98 = ($97|0)==(0|0);
				if ($98) {
					$__p$0 = $83;
					return ($__p$0|0);
				}
				__ZdlPv($97);
				$__p$0 = $83;
				return ($__p$0|0);
			}
			function __ZNK5Track6bottomEi($this,$col) {
				$this = $this|0;
				$col = $col|0;
				var $$12 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$08$lcssa = 0, $or$cond = 0, $or$cond$i$i = 0, $vc$0$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($1|0)==($2|0);
				$4 = $2;
				if ($3) {
					$$12 = 0;
					return ($$12|0);
				}
				$5 = (($1) - ($2))|0;
				$6 = (($5|0) / 20)&-1;
				$i$08 = 0;
				while(1) {
					$7 = (((($4) + (($i$08*20)|0)|0)) + 8|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = ($8|0)<($col|0);
					$10 = (($i$08) + 1)|0;
					$11 = ($10>>>0)<($6>>>0);
					$or$cond = $11 & $9;
					if ($or$cond) {
						$i$08 = $10;
					} else {
						$$lcssa = $8;$i$08$lcssa = $i$08;
						break;
					}
				}
				$12 = (($4) + (($i$08$lcssa*20)|0)|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 12|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 4|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ($$lcssa|0)!=($13|0);
				$19 = ($15|0)!=($17|0);
				$or$cond$i$i = $18 & $19;
				if ($or$cond$i$i) {
					$20 = (($15) - ($17))|0;
					$21 = (($$lcssa) - ($13))|0;
					$22 = (($col) - ($13))|0;
					$23 = Math_imul($20, $22)|0;
					$24 = (($23|0) / ($21|0))&-1;
					$25 = (($24) + ($17))|0;
					$vc$0$i$i = $25;
				} else {
					$vc$0$i$i = $17;
				}
				$26 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 16|0);
				$27 = HEAP32[$26>>2]|0;
				$28 = (($27|0) / 2)&-1;
				$29 = (($28) + ($vc$0$i$i))|0;
				$$12 = $29;
				return ($$12|0);
			}
			function __ZNK5Track3topEi($this,$col) {
				$this = $this|0;
				$col = $col|0;
				var $$12 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$08 = 0, $i$08$lcssa = 0, $or$cond = 0, $or$cond$i$i$i = 0, $vc$0$i$i$i = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($1|0)==($2|0);
				$4 = $2;
				if ($3) {
					$$12 = 0;
					return ($$12|0);
				}
				$5 = (($1) - ($2))|0;
				$6 = (($5|0) / 20)&-1;
				$i$08 = 0;
				while(1) {
					$7 = (((($4) + (($i$08*20)|0)|0)) + 8|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = ($8|0)<($col|0);
					$10 = (($i$08) + 1)|0;
					$11 = ($10>>>0)<($6>>>0);
					$or$cond = $11 & $9;
					if ($or$cond) {
						$i$08 = $10;
					} else {
						$$lcssa = $8;$i$08$lcssa = $i$08;
						break;
					}
				}
				$12 = (($4) + (($i$08$lcssa*20)|0)|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 12|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 4|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ($$lcssa|0)!=($13|0);
				$19 = ($15|0)!=($17|0);
				$or$cond$i$i$i = $18 & $19;
				if ($or$cond$i$i$i) {
					$20 = (($15) - ($17))|0;
					$21 = (($$lcssa) - ($13))|0;
					$22 = (($col) - ($13))|0;
					$23 = Math_imul($20, $22)|0;
					$24 = (($23|0) / ($21|0))&-1;
					$25 = (($24) + ($17))|0;
					$vc$0$i$i$i = $25;
				} else {
					$vc$0$i$i$i = $17;
				}
				$26 = (((($4) + (($i$08$lcssa*20)|0)|0)) + 16|0);
				$27 = HEAP32[$26>>2]|0;
				$28 = (($27|0) / 2)&-1;
				$29 = (($vc$0$i$i$i) + 1)|0;
				$30 = (($29) - ($27))|0;
				$31 = (($30) + ($28))|0;
				$$12 = $31;
				return ($$12|0);
			}
			function __ZNK5Track7vcenterEi($this,$col) {
				$this = $this|0;
				$col = $col|0;
				var $$12 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$07 = 0, $i$07$lcssa = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = ($1|0)==($2|0);
				$4 = $2;
				if ($3) {
					$$12 = 0;
					return ($$12|0);
				}
				$5 = (($1) - ($2))|0;
				$6 = (($5|0) / 20)&-1;
				$i$07 = 0;
				while(1) {
					$7 = (((($4) + (($i$07*20)|0)|0)) + 8|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = ($8|0)<($col|0);
					$10 = (($i$07) + 1)|0;
					$11 = ($10>>>0)<($6>>>0);
					$or$cond = $11 & $9;
					if ($or$cond) {
						$i$07 = $10;
					} else {
						$$lcssa = $8;$i$07$lcssa = $i$07;
						break;
					}
				}
				$12 = (($4) + (($i$07$lcssa*20)|0)|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = (((($4) + (($i$07$lcssa*20)|0)|0)) + 12|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = (((($4) + (($i$07$lcssa*20)|0)|0)) + 4|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ($$lcssa|0)!=($13|0);
				$19 = ($15|0)!=($17|0);
				$or$cond$i = $18 & $19;
				if (!($or$cond$i)) {
					$$12 = $17;
					return ($$12|0);
				}
				$20 = (($15) - ($17))|0;
				$21 = (($$lcssa) - ($13))|0;
				$22 = (($col) - ($13))|0;
				$23 = Math_imul($20, $22)|0;
				$24 = (($23|0) / ($21|0))&-1;
				$25 = (($24) + ($17))|0;
				$$12 = $25;
				return ($$12|0);
			}
			function __ZN8Rational9normalizeEv($this) {
				$this = $this|0;
				var $$0$i = 0, $$0$i1 = 0, $$02$i = 0, $$04$i = 0, $$13$i = 0, $$m$i = 0, $$n$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0);
				if ($2) {
					return;
				}
				$3 = HEAP32[$this>>2]|0;
				$switch$split2D = ($3|0)<(0);
				L4: do {
					if ($switch$split2D) {
						switch ($3|0) {
							case -2147483648:  {
								break;
							}
							default: {
								break L4;
							}
						}
						$4 = ($1|0)==(-2147483648);
						if ($4) {
							HEAP32[$0>>2] = -2147483647;
							$6 = -2147483647;
						} else {
							$6 = $1;
						}
						$5 = (0 - ($6))|0;
						$7 = ($6|0)<(0);
						$8 = $5 >> 31;
						$9 = $8 & -2147483647;
						$$0$i = $7 ? 2147483647 : $9;
						HEAP32[$this>>2] = $$0$i;
						HEAP32[$0>>2] = 0;
						return;
					} else {
						switch ($3|0) {
							case 0:  {
								break;
							}
							default: {
								break L4;
							}
						}
						HEAP32[$0>>2] = 1;
						return;
					}
				} while(0);
				$10 = ($1|0)<(0);
				do {
					if ($10) {
						$11 = ($1|0)==(-2147483648);
						$12 = (0 - ($3))|0;
						if (!($11)) {
							HEAP32[$this>>2] = $12;
							$16 = (0 - ($1))|0;
							HEAP32[$0>>2] = $16;
							$17 = $16;$19 = $12;
							break;
						}
						$13 = ($3|0)<(0);
						$14 = $12 >> 31;
						$15 = $14 & -2147483647;
						$$0$i1 = $13 ? 2147483647 : $15;
						HEAP32[$this>>2] = $$0$i1;
						HEAP32[$0>>2] = 0;
						return;
					} else {
						$17 = $1;$19 = $3;
					}
				} while(0);
				$18 = ($17|0)==(1);
				if ($18) {
					return;
				}
				$20 = ($19|0)<(0);
				$21 = (0 - ($19))|0;
				$$n$i = $20 ? $21 : $19;
				$22 = ($17|0)<(0);
				$23 = (0 - ($17))|0;
				$$m$i = $22 ? $23 : $17;
				$24 = ($$m$i|0)==(0);
				L25: do {
					if ($24) {
						$$02$i = $$n$i;
					} else {
						$$04$i = $$m$i;$$13$i = $$n$i;
						while(1) {
							$25 = (($$13$i|0) % ($$04$i|0))&-1;
							$26 = ($25|0)==(0);
							if ($26) {
								$$02$i = $$04$i;
								break L25;
							}
							$27 = (($$04$i|0) % ($25|0))&-1;
							$28 = ($27|0)==(0);
							if ($28) {
								$$02$i = $25;
								break;
							} else {
								$$04$i = $27;$$13$i = $25;
							}
						}
					}
				} while(0);
				$29 = (($19|0) / ($$02$i|0))&-1;
				HEAP32[$this>>2] = $29;
				$30 = (($17|0) / ($$02$i|0))&-1;
				HEAP32[$0>>2] = $30;
				return;
			}
			function __ZNK8Rational7inverseEv($agg$result,$this) {
				$agg$result = $agg$result|0;
				$this = $this|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $tmp$sroa$0$0 = 0, $tmp$sroa$7$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(1);
				if ($2) {
					$3 = $this;
					$4 = $3;
					$5 = HEAP32[$4>>2]|0;
					$6 = (($3) + 4)|0;
					$7 = $6;
					$8 = HEAP32[$7>>2]|0;
					$9 = $agg$result;
					$10 = $9;
					HEAP32[$10>>2] = $5;
					$11 = (($9) + 4)|0;
					$12 = $11;
					HEAP32[$12>>2] = $8;
					return;
				}
				$13 = HEAP32[$this>>2]|0;
				$14 = ($13|0)>(0);
				if ($14) {
					$tmp$sroa$0$0 = $1;$tmp$sroa$7$0 = $13;
				} else {
					$15 = ($13|0)<(0);
					if ($15) {
						$16 = (0 - ($1))|0;
						$17 = (0 - ($13))|0;
						$tmp$sroa$0$0 = $16;$tmp$sroa$7$0 = $17;
					} else {
						$tmp$sroa$0$0 = 2147483647;$tmp$sroa$7$0 = 0;
					}
				}
				$18 = $agg$result;
				$19 = $18;
				HEAP32[$19>>2] = $tmp$sroa$0$0;
				$20 = (($18) + 4)|0;
				$21 = $20;
				HEAP32[$21>>2] = $tmp$sroa$7$0;
				return;
			}
			function __ZN8RationalpLERKS_($this,$r) {
				$this = $this|0;
				$r = $r|0;
				var $$$i$i = 0, $$$i7$i = 0, $$0$i$i = 0, $$0$i8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(1);
				if ($2) {
					return ($this|0);
				}
				$3 = ((($r)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(1);
				if ($5) {
					$6 = HEAP32[$r>>2]|0;
					HEAP32[$this>>2] = $6;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				$7 = ($1|0)<(0);
				$8 = $7 << 31 >> 31;
				$9 = ($4|0)<(0);
				$10 = $9 << 31 >> 31;
				$11 = (___muldi3(($4|0),($10|0),($1|0),($8|0))|0);
				$12 = tempRet0;
				$13 = HEAP32[$this>>2]|0;
				$14 = ($13|0)<(0);
				$15 = $14 << 31 >> 31;
				$16 = (___muldi3(($13|0),($15|0),($4|0),($10|0))|0);
				$17 = tempRet0;
				$18 = HEAP32[$r>>2]|0;
				$19 = ($18|0)<(0);
				$20 = $19 << 31 >> 31;
				$21 = (___muldi3(($18|0),($20|0),($1|0),($8|0))|0);
				$22 = tempRet0;
				$23 = (_i64Add(($21|0),($22|0),($16|0),($17|0))|0);
				$24 = tempRet0;
				$25 = ($11|0)==(0);
				$26 = ($12|0)==(0);
				$27 = $25 & $26;
				if ($27) {
					$28 = ($24|0)>(0);
					$29 = ($23>>>0)>(0);
					$30 = ($24|0)==(0);
					$31 = $30 & $29;
					$32 = $28 | $31;
					$33 = ($24|0)<(0);
					$$$i$i = $33 ? -2147483647 : 0;
					$$0$i$i = $32 ? 2147483647 : $$$i$i;
					HEAP32[$this>>2] = $$0$i$i;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				$34 = ($23|0)==(0);
				$35 = ($24|0)==(0);
				$36 = $34 & $35;
				if ($36) {
					HEAP32[$this>>2] = 0;
					HEAP32[$0>>2] = 1;
					return ($this|0);
				}
				$37 = ($11|0)==(1);
				$38 = ($12|0)==(0);
				$39 = $37 & $38;
				if ($39) {
					$73 = $23;$74 = $24;$82 = 1;$83 = 0;
				} else {
					$40 = ($24|0)<(0);
					$41 = (_i64Subtract(0,0,($23|0),($24|0))|0);
					$42 = tempRet0;
					$43 = $40 ? $41 : $23;
					$44 = $40 ? $42 : $24;
					$45 = ($12|0)<(0);
					$46 = (_i64Subtract(0,0,($11|0),($12|0))|0);
					$47 = tempRet0;
					$48 = $45 ? $46 : $11;
					$49 = $45 ? $47 : $12;
					$50 = ($48|0)==(0);
					$51 = ($49|0)==(0);
					$52 = $50 & $51;
					L18: do {
						if ($52) {
							$67 = $43;$68 = $44;
						} else {
							$53 = $43;$54 = $44;$55 = $48;$56 = $49;
							while(1) {
								$57 = (___remdi3(($53|0),($54|0),($55|0),($56|0))|0);
								$58 = tempRet0;
								$59 = ($57|0)==(0);
								$60 = ($58|0)==(0);
								$61 = $59 & $60;
								if ($61) {
									$67 = $55;$68 = $56;
									break L18;
								}
								$62 = (___remdi3(($55|0),($56|0),($57|0),($58|0))|0);
								$63 = tempRet0;
								$64 = ($62|0)==(0);
								$65 = ($63|0)==(0);
								$66 = $64 & $65;
								if ($66) {
									$67 = $57;$68 = $58;
									break;
								} else {
									$53 = $57;$54 = $58;$55 = $62;$56 = $63;
								}
							}
						}
					} while(0);
					$69 = (___divdi3(($23|0),($24|0),($67|0),($68|0))|0);
					$70 = tempRet0;
					$71 = (___divdi3(($11|0),($12|0),($67|0),($68|0))|0);
					$72 = tempRet0;
					$73 = $69;$74 = $70;$82 = $71;$83 = $72;
				}
				$75 = (_i64Add(($73|0),($74|0),2147483647,0)|0);
				$76 = tempRet0;
				$77 = ($76>>>0)<(0);
				$78 = ($75>>>0)<(4294967295);
				$79 = ($76|0)==(0);
				$80 = $79 & $78;
				$81 = $77 | $80;
				$84 = (_i64Add(($82|0),($83|0),2147483647,0)|0);
				$85 = tempRet0;
				$86 = ($85>>>0)<(0);
				$87 = ($84>>>0)<(4294967295);
				$88 = ($85|0)==(0);
				$89 = $88 & $87;
				$90 = $86 | $89;
				$91 = $90 & $81;
				$92 = ($83|0)>(-1);
				$93 = ($82>>>0)>(4294967295);
				$94 = ($83|0)==(-1);
				$95 = $94 & $93;
				$96 = $92 | $95;
				if (!($91)) {
					$101 = (_i64Subtract(0,0,($73|0),($74|0))|0);
					$102 = tempRet0;
					$103 = $96 ? $73 : $101;
					$104 = $96 ? $74 : $102;
					$105 = ($104|0)>(0);
					$106 = ($103>>>0)>(0);
					$107 = ($104|0)==(0);
					$108 = $107 & $106;
					$109 = $105 | $108;
					$110 = ($104|0)<(0);
					$$$i7$i = $110 ? -2147483647 : 0;
					$$0$i8$i = $109 ? 2147483647 : $$$i7$i;
					HEAP32[$this>>2] = $$0$i8$i;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				if ($96) {
					HEAP32[$this>>2] = $73;
					HEAP32[$0>>2] = $82;
					return ($this|0);
				} else {
					$97 = (_i64Subtract(0,0,($73|0),($74|0))|0);
					$98 = tempRet0;
					HEAP32[$this>>2] = $97;
					$99 = (_i64Subtract(0,0,($82|0),($83|0))|0);
					$100 = tempRet0;
					HEAP32[$0>>2] = $99;
					return ($this|0);
				}
				return (0)|0;
			}
			function __ZN8RationalmLERKS_($this,$r) {
				$this = $this|0;
				$r = $r|0;
				var $$$i$i = 0, $$$i7$i = 0, $$0$i$i = 0, $$0$i8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(1);
				if ($2) {
					return ($this|0);
				}
				$3 = ((($r)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(1);
				if ($5) {
					$6 = HEAP32[$r>>2]|0;
					HEAP32[$this>>2] = $6;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				$7 = HEAP32[$this>>2]|0;
				$8 = ($7|0)<(0);
				$9 = $8 << 31 >> 31;
				$10 = HEAP32[$r>>2]|0;
				$11 = ($10|0)<(0);
				$12 = $11 << 31 >> 31;
				$13 = (___muldi3(($10|0),($12|0),($7|0),($9|0))|0);
				$14 = tempRet0;
				$15 = ($1|0)<(0);
				$16 = $15 << 31 >> 31;
				$17 = ($4|0)<(0);
				$18 = $17 << 31 >> 31;
				$19 = (___muldi3(($4|0),($18|0),($1|0),($16|0))|0);
				$20 = tempRet0;
				$21 = ($19|0)==(0);
				$22 = ($20|0)==(0);
				$23 = $21 & $22;
				if ($23) {
					$24 = ($14|0)>(0);
					$25 = ($13>>>0)>(0);
					$26 = ($14|0)==(0);
					$27 = $26 & $25;
					$28 = $24 | $27;
					$29 = ($14|0)<(0);
					$$$i$i = $29 ? -2147483647 : 0;
					$$0$i$i = $28 ? 2147483647 : $$$i$i;
					HEAP32[$this>>2] = $$0$i$i;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				$30 = ($13|0)==(0);
				$31 = ($14|0)==(0);
				$32 = $30 & $31;
				if ($32) {
					HEAP32[$this>>2] = 0;
					HEAP32[$0>>2] = 1;
					return ($this|0);
				}
				$33 = ($19|0)==(1);
				$34 = ($20|0)==(0);
				$35 = $33 & $34;
				if ($35) {
					$69 = $13;$70 = $14;$78 = 1;$79 = 0;
				} else {
					$36 = ($14|0)<(0);
					$37 = (_i64Subtract(0,0,($13|0),($14|0))|0);
					$38 = tempRet0;
					$39 = $36 ? $37 : $13;
					$40 = $36 ? $38 : $14;
					$41 = ($20|0)<(0);
					$42 = (_i64Subtract(0,0,($19|0),($20|0))|0);
					$43 = tempRet0;
					$44 = $41 ? $42 : $19;
					$45 = $41 ? $43 : $20;
					$46 = ($44|0)==(0);
					$47 = ($45|0)==(0);
					$48 = $46 & $47;
					L18: do {
						if ($48) {
							$63 = $39;$64 = $40;
						} else {
							$49 = $39;$50 = $40;$51 = $44;$52 = $45;
							while(1) {
								$53 = (___remdi3(($49|0),($50|0),($51|0),($52|0))|0);
								$54 = tempRet0;
								$55 = ($53|0)==(0);
								$56 = ($54|0)==(0);
								$57 = $55 & $56;
								if ($57) {
									$63 = $51;$64 = $52;
									break L18;
								}
								$58 = (___remdi3(($51|0),($52|0),($53|0),($54|0))|0);
								$59 = tempRet0;
								$60 = ($58|0)==(0);
								$61 = ($59|0)==(0);
								$62 = $60 & $61;
								if ($62) {
									$63 = $53;$64 = $54;
									break;
								} else {
									$49 = $53;$50 = $54;$51 = $58;$52 = $59;
								}
							}
						}
					} while(0);
					$65 = (___divdi3(($13|0),($14|0),($63|0),($64|0))|0);
					$66 = tempRet0;
					$67 = (___divdi3(($19|0),($20|0),($63|0),($64|0))|0);
					$68 = tempRet0;
					$69 = $65;$70 = $66;$78 = $67;$79 = $68;
				}
				$71 = (_i64Add(($69|0),($70|0),2147483647,0)|0);
				$72 = tempRet0;
				$73 = ($72>>>0)<(0);
				$74 = ($71>>>0)<(4294967295);
				$75 = ($72|0)==(0);
				$76 = $75 & $74;
				$77 = $73 | $76;
				$80 = (_i64Add(($78|0),($79|0),2147483647,0)|0);
				$81 = tempRet0;
				$82 = ($81>>>0)<(0);
				$83 = ($80>>>0)<(4294967295);
				$84 = ($81|0)==(0);
				$85 = $84 & $83;
				$86 = $82 | $85;
				$87 = $86 & $77;
				$88 = ($79|0)>(-1);
				$89 = ($78>>>0)>(4294967295);
				$90 = ($79|0)==(-1);
				$91 = $90 & $89;
				$92 = $88 | $91;
				if (!($87)) {
					$97 = (_i64Subtract(0,0,($69|0),($70|0))|0);
					$98 = tempRet0;
					$99 = $92 ? $69 : $97;
					$100 = $92 ? $70 : $98;
					$101 = ($100|0)>(0);
					$102 = ($99>>>0)>(0);
					$103 = ($100|0)==(0);
					$104 = $103 & $102;
					$105 = $101 | $104;
					$106 = ($100|0)<(0);
					$$$i7$i = $106 ? -2147483647 : 0;
					$$0$i8$i = $105 ? 2147483647 : $$$i7$i;
					HEAP32[$this>>2] = $$0$i8$i;
					HEAP32[$0>>2] = 0;
					return ($this|0);
				}
				if ($92) {
					HEAP32[$this>>2] = $69;
					HEAP32[$0>>2] = $78;
					return ($this|0);
				} else {
					$93 = (_i64Subtract(0,0,($69|0),($70|0))|0);
					$94 = tempRet0;
					HEAP32[$this>>2] = $93;
					$95 = (_i64Subtract(0,0,($78|0),($79|0))|0);
					$96 = tempRet0;
					HEAP32[$0>>2] = $95;
					return ($this|0);
				}
				return (0)|0;
			}
			function __ZN7ProfileC2ERK6BitmapNS_4TypeE($this,$bm_,$t) {
				$this = $this|0;
				$bm_ = $bm_|0;
				$t = $t|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = $bm_;
				$0 = ((($this)) + 4|0);
				HEAP32[$0>>2] = $t;
				$1 = ((($this)) + 8|0);
				$2 = ((($this)) + 36|0);
				;HEAP32[$1>>2]=4294967295|0;HEAP32[$1+4>>2]=4294967295|0;HEAP32[$1+8>>2]=4294967295|0;HEAP32[$1+12>>2]=4294967295|0;HEAP32[$1+16>>2]=4294967295|0;HEAP32[$1+20>>2]=4294967295|0;HEAP8[$1+24>>0]=255|0;
				HEAP32[$2>>2] = 0;
				$3 = ((($this)) + 40|0);
				HEAP32[$3>>2] = 0;
				$4 = ((($this)) + 44|0);
				HEAP32[$4>>2] = 0;
				return;
			}
			function __ZN7Profile10initializeEv($this) {
				$this = $this|0;
				var $$phi$trans$insert = 0, $$phi$trans$insert111 = 0, $$phi$trans$insert115 = 0, $$phi$trans$insert120 = 0, $$phi$trans$insert122 = 0, $$phi$trans$insert124 = 0, $$phi$trans$insert129 = 0, $$phi$trans$insert131 = 0, $$phi$trans$insert133 = 0, $$phi$trans$insert136 = 0, $$phi$trans$insert138 = 0, $$phi$trans$insert140 = 0, $$phi$trans$insert147 = 0, $$phi$trans$insert149 = 0, $$phi$trans$insert151 = 0, $$phi$trans$insert154 = 0, $$phi$trans$insert156 = 0, $$phi$trans$insert160 = 0, $$pre = 0, $$pre110 = 0;
				var $$pre112 = 0, $$pre114 = 0, $$pre116 = 0, $$pre117 = 0, $$pre119 = 0, $$pre121 = 0, $$pre123 = 0, $$pre125 = 0, $$pre126 = 0, $$pre128 = 0, $$pre130 = 0, $$pre132 = 0, $$pre134 = 0, $$pre135 = 0, $$pre137 = 0, $$pre139 = 0, $$pre141 = 0, $$pre143 = 0, $$pre144 = 0, $$pre146 = 0;
				var $$pre148 = 0, $$pre150 = 0, $$pre152 = 0, $$pre153 = 0, $$pre155 = 0, $$pre157 = 0, $$pre159 = 0, $$pre161 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
				var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
				var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
				var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
				var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
				var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
				var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
				var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
				var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
				var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
				var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
				var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
				var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
				var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
				var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
				var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
				var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
				var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
				var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
				var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i13 = 0, $__new_last2$i$i$i18 = 0, $__new_last2$i$i$i23 = 0, $__new_last2$i$i$i28 = 0, $__new_last2$i$i$i8 = 0, $col$060 = 0, $col4$076 = 0, $col6$088 = 0, $d$0$lcssa = 0, $d$084 = 0;
				var $j$0$lcssa = 0, $j$049 = 0, $j1$0$lcssa = 0, $j1$055 = 0, $j3$0$lcssa = 0, $j3$063 = 0, $j5$0$lcssa = 0, $j5$071 = 0, $l$0$lcssa = 0, $l$092 = 0, $r$0$lcssa = 0, $r$097 = 0, $row$052 = 0, $row2$068 = 0, $row7$0101 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i14 = 0, $scevgep$i$i$i19 = 0, $scevgep$i$i$i24 = 0, $scevgep$i$i$i29 = 0;
				var $scevgep$i$i$i9 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i10 = 0, $scevgep4$i$i$i15 = 0, $scevgep4$i$i$i20 = 0, $scevgep4$i$i$i25 = 0, $scevgep4$i$i$i30 = 0, $u$0$lcssa = 0, $u$079 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				switch ($1|0) {
					case 0:  {
						$2 = ((($this)) + 36|0);
						$3 = HEAP32[$this>>2]|0;
						$4 = ((($3)) + 12|0);
						$5 = HEAP32[$4>>2]|0;
						$6 = ((($3)) + 4|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = (($5) + 1)|0;
						$9 = (($8) - ($7))|0;
						$10 = ((($this)) + 40|0);
						$11 = HEAP32[$10>>2]|0;
						$12 = HEAP32[$2>>2]|0;
						$13 = (($11) - ($12))|0;
						$14 = $13 >> 2;
						$15 = ($9>>>0)>($14>>>0);
						$16 = $12;
						$17 = $11;
						if ($15) {
							$18 = (($9) - ($14))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($2,$18);
							$$pre153 = HEAP32[$this>>2]|0;
							$$phi$trans$insert154 = ((($$pre153)) + 4|0);
							$$pre155 = HEAP32[$$phi$trans$insert154>>2]|0;
							$$phi$trans$insert156 = ((($$pre153)) + 12|0);
							$$pre157 = HEAP32[$$phi$trans$insert156>>2]|0;
							$27 = $$pre153;$33 = $$pre155;$35 = $$pre157;$415 = $$pre153;
						} else {
							$19 = ($9>>>0)<($14>>>0);
							if ($19) {
								$20 = (($16) + ($9<<2)|0);
								$21 = ($17|0)==($20|0);
								if ($21) {
									$27 = $3;$33 = $7;$35 = $5;$415 = $3;
								} else {
									$__new_last2$i$i$i8 = $20;
									$scevgep$i$i$i9 = ((($17)) + -4|0);
									$22 = $scevgep$i$i$i9;
									$23 = (($22) - ($__new_last2$i$i$i8))|0;
									$24 = $23 >>> 2;
									$25 = $24 ^ -1;
									$scevgep4$i$i$i10 = (($17) + ($25<<2)|0);
									HEAP32[$10>>2] = $scevgep4$i$i$i10;
									$27 = $3;$33 = $7;$35 = $5;$415 = $3;
								}
							} else {
								$27 = $3;$33 = $7;$35 = $5;$415 = $3;
							}
						}
						$26 = ((($27)) + 8|0);
						$28 = HEAP32[$26>>2]|0;
						$29 = HEAP32[$27>>2]|0;
						$30 = (($28) + 1)|0;
						$31 = (($30) - ($29))|0;
						$32 = ((($this)) + 8|0);
						HEAP32[$32>>2] = $31;
						$34 = ($33|0)>($35|0);
						if ($34) {
							return;
						}
						$36 = $29;$38 = $28;$40 = $415;$56 = $27;$row$052 = $33;
						while(1) {
							$37 = ($36|0)>($38|0);
							L14: do {
								if ($37) {
									$j$0$lcssa = $36;
								} else {
									$39 = ((($40)) + 4|0);
									$41 = HEAP32[$39>>2]|0;
									$42 = (($row$052) - ($41))|0;
									$43 = ((($40)) + 16|0);
									$44 = HEAP32[$43>>2]|0;
									$45 = HEAP32[$40>>2]|0;
									$46 = (($44) + (($42*12)|0)|0);
									$47 = HEAP32[$46>>2]|0;
									$j$049 = $36;
									while(1) {
										$48 = (($j$049) - ($45))|0;
										$49 = (($47) + ($48)|0);
										$50 = HEAP8[$49>>0]|0;
										$51 = ($50<<24>>24)==(0);
										if (!($51)) {
											$j$0$lcssa = $j$049;
											break L14;
										}
										$52 = (($j$049) + 1)|0;
										$53 = ($j$049|0)<($38|0);
										if ($53) {
											$j$049 = $52;
										} else {
											$j$0$lcssa = $52;
											break;
										}
									}
								}
							} while(0);
							$54 = (($j$0$lcssa) - ($36))|0;
							$55 = ((($56)) + 4|0);
							$57 = HEAP32[$55>>2]|0;
							$58 = (($row$052) - ($57))|0;
							$59 = HEAP32[$2>>2]|0;
							$60 = (($59) + ($58<<2)|0);
							HEAP32[$60>>2] = $54;
							$61 = HEAP32[$this>>2]|0;
							$62 = ((($61)) + 12|0);
							$63 = HEAP32[$62>>2]|0;
							$64 = ($row$052|0)<($63|0);
							if (!($64)) {
								break;
							}
							$65 = (($row$052) + 1)|0;
							$$pre159 = HEAP32[$61>>2]|0;
							$$phi$trans$insert160 = ((($61)) + 8|0);
							$$pre161 = HEAP32[$$phi$trans$insert160>>2]|0;
							$36 = $$pre159;$38 = $$pre161;$40 = $61;$56 = $61;$row$052 = $65;
						}
						return;
						break;
					}
					case 1:  {
						$66 = ((($this)) + 36|0);
						$67 = HEAP32[$this>>2]|0;
						$68 = ((($67)) + 8|0);
						$69 = HEAP32[$68>>2]|0;
						$70 = HEAP32[$67>>2]|0;
						$71 = (($69) + 1)|0;
						$72 = (($71) - ($70))|0;
						$73 = ((($this)) + 40|0);
						$74 = HEAP32[$73>>2]|0;
						$75 = HEAP32[$66>>2]|0;
						$76 = (($74) - ($75))|0;
						$77 = $76 >> 2;
						$78 = ($72>>>0)>($77>>>0);
						$79 = $75;
						$80 = $74;
						if ($78) {
							$81 = (($72) - ($77))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($66,$81);
							$$pre144 = HEAP32[$this>>2]|0;
							$$pre146 = HEAP32[$$pre144>>2]|0;
							$$phi$trans$insert147 = ((($$pre144)) + 8|0);
							$$pre148 = HEAP32[$$phi$trans$insert147>>2]|0;
							$416 = $$pre144;$90 = $$pre144;$97 = $$pre146;$99 = $$pre148;
						} else {
							$82 = ($72>>>0)<($77>>>0);
							if ($82) {
								$83 = (($79) + ($72<<2)|0);
								$84 = ($80|0)==($83|0);
								if ($84) {
									$416 = $67;$90 = $67;$97 = $70;$99 = $69;
								} else {
									$__new_last2$i$i$i28 = $83;
									$scevgep$i$i$i29 = ((($80)) + -4|0);
									$85 = $scevgep$i$i$i29;
									$86 = (($85) - ($__new_last2$i$i$i28))|0;
									$87 = $86 >>> 2;
									$88 = $87 ^ -1;
									$scevgep4$i$i$i30 = (($80) + ($88<<2)|0);
									HEAP32[$73>>2] = $scevgep4$i$i$i30;
									$416 = $67;$90 = $67;$97 = $70;$99 = $69;
								}
							} else {
								$416 = $67;$90 = $67;$97 = $70;$99 = $69;
							}
						}
						$89 = ((($90)) + 12|0);
						$91 = HEAP32[$89>>2]|0;
						$92 = ((($90)) + 4|0);
						$93 = HEAP32[$92>>2]|0;
						$94 = (($91) + 1)|0;
						$95 = (($94) - ($93))|0;
						$96 = ((($this)) + 8|0);
						HEAP32[$96>>2] = $95;
						$98 = ($97|0)>($99|0);
						if ($98) {
							return;
						}
						$100 = $93;$102 = $91;$104 = $416;$120 = $90;$col$060 = $97;
						while(1) {
							$101 = ($100|0)>($102|0);
							L34: do {
								if ($101) {
									$j1$0$lcssa = $100;
								} else {
									$103 = ((($104)) + 4|0);
									$105 = HEAP32[$103>>2]|0;
									$106 = ((($104)) + 16|0);
									$107 = HEAP32[$106>>2]|0;
									$108 = HEAP32[$104>>2]|0;
									$109 = (($col$060) - ($108))|0;
									$j1$055 = $100;
									while(1) {
										$110 = (($j1$055) - ($105))|0;
										$111 = (($107) + (($110*12)|0)|0);
										$112 = HEAP32[$111>>2]|0;
										$113 = (($112) + ($109)|0);
										$114 = HEAP8[$113>>0]|0;
										$115 = ($114<<24>>24)==(0);
										if (!($115)) {
											$j1$0$lcssa = $j1$055;
											break L34;
										}
										$116 = (($j1$055) + 1)|0;
										$117 = ($j1$055|0)<($102|0);
										if ($117) {
											$j1$055 = $116;
										} else {
											$j1$0$lcssa = $116;
											break;
										}
									}
								}
							} while(0);
							$118 = (($j1$0$lcssa) - ($100))|0;
							$119 = HEAP32[$120>>2]|0;
							$121 = (($col$060) - ($119))|0;
							$122 = HEAP32[$66>>2]|0;
							$123 = (($122) + ($121<<2)|0);
							HEAP32[$123>>2] = $118;
							$124 = HEAP32[$this>>2]|0;
							$125 = ((($124)) + 8|0);
							$126 = HEAP32[$125>>2]|0;
							$127 = ($col$060|0)<($126|0);
							if (!($127)) {
								break;
							}
							$128 = (($col$060) + 1)|0;
							$$phi$trans$insert149 = ((($124)) + 4|0);
							$$pre150 = HEAP32[$$phi$trans$insert149>>2]|0;
							$$phi$trans$insert151 = ((($124)) + 12|0);
							$$pre152 = HEAP32[$$phi$trans$insert151>>2]|0;
							$100 = $$pre150;$102 = $$pre152;$104 = $124;$120 = $124;$col$060 = $128;
						}
						return;
						break;
					}
					case 2:  {
						$129 = ((($this)) + 36|0);
						$130 = HEAP32[$this>>2]|0;
						$131 = ((($130)) + 12|0);
						$132 = HEAP32[$131>>2]|0;
						$133 = ((($130)) + 4|0);
						$134 = HEAP32[$133>>2]|0;
						$135 = (($132) + 1)|0;
						$136 = (($135) - ($134))|0;
						$137 = ((($this)) + 40|0);
						$138 = HEAP32[$137>>2]|0;
						$139 = HEAP32[$129>>2]|0;
						$140 = (($138) - ($139))|0;
						$141 = $140 >> 2;
						$142 = ($136>>>0)>($141>>>0);
						$143 = $139;
						$144 = $138;
						if ($142) {
							$145 = (($136) - ($141))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($129,$145);
							$$pre135 = HEAP32[$this>>2]|0;
							$$phi$trans$insert136 = ((($$pre135)) + 4|0);
							$$pre137 = HEAP32[$$phi$trans$insert136>>2]|0;
							$$phi$trans$insert138 = ((($$pre135)) + 12|0);
							$$pre139 = HEAP32[$$phi$trans$insert138>>2]|0;
							$154 = $$pre135;$160 = $$pre137;$162 = $$pre139;$417 = $$pre135;
						} else {
							$146 = ($136>>>0)<($141>>>0);
							if ($146) {
								$147 = (($143) + ($136<<2)|0);
								$148 = ($144|0)==($147|0);
								if ($148) {
									$154 = $130;$160 = $134;$162 = $132;$417 = $130;
								} else {
									$__new_last2$i$i$i23 = $147;
									$scevgep$i$i$i24 = ((($144)) + -4|0);
									$149 = $scevgep$i$i$i24;
									$150 = (($149) - ($__new_last2$i$i$i23))|0;
									$151 = $150 >>> 2;
									$152 = $151 ^ -1;
									$scevgep4$i$i$i25 = (($144) + ($152<<2)|0);
									HEAP32[$137>>2] = $scevgep4$i$i$i25;
									$154 = $130;$160 = $134;$162 = $132;$417 = $130;
								}
							} else {
								$154 = $130;$160 = $134;$162 = $132;$417 = $130;
							}
						}
						$153 = ((($154)) + 8|0);
						$155 = HEAP32[$153>>2]|0;
						$156 = HEAP32[$154>>2]|0;
						$157 = (($155) + 1)|0;
						$158 = (($157) - ($156))|0;
						$159 = ((($this)) + 8|0);
						HEAP32[$159>>2] = $158;
						$161 = ($160|0)>($162|0);
						if ($161) {
							return;
						}
						$163 = $155;$165 = $156;$167 = $417;$183 = $154;$row2$068 = $160;
						while(1) {
							$164 = ($163|0)<($165|0);
							L54: do {
								if ($164) {
									$j3$0$lcssa = $163;
								} else {
									$166 = ((($167)) + 4|0);
									$168 = HEAP32[$166>>2]|0;
									$169 = (($row2$068) - ($168))|0;
									$170 = ((($167)) + 16|0);
									$171 = HEAP32[$170>>2]|0;
									$172 = HEAP32[$167>>2]|0;
									$173 = (($171) + (($169*12)|0)|0);
									$174 = HEAP32[$173>>2]|0;
									$j3$063 = $163;
									while(1) {
										$175 = (($j3$063) - ($172))|0;
										$176 = (($174) + ($175)|0);
										$177 = HEAP8[$176>>0]|0;
										$178 = ($177<<24>>24)==(0);
										if (!($178)) {
											$j3$0$lcssa = $j3$063;
											break L54;
										}
										$179 = (($j3$063) + -1)|0;
										$180 = ($j3$063|0)>($165|0);
										if ($180) {
											$j3$063 = $179;
										} else {
											$j3$0$lcssa = $179;
											break;
										}
									}
								}
							} while(0);
							$181 = (($163) - ($j3$0$lcssa))|0;
							$182 = ((($183)) + 4|0);
							$184 = HEAP32[$182>>2]|0;
							$185 = (($row2$068) - ($184))|0;
							$186 = HEAP32[$129>>2]|0;
							$187 = (($186) + ($185<<2)|0);
							HEAP32[$187>>2] = $181;
							$188 = HEAP32[$this>>2]|0;
							$189 = ((($188)) + 12|0);
							$190 = HEAP32[$189>>2]|0;
							$191 = ($row2$068|0)<($190|0);
							if (!($191)) {
								break;
							}
							$192 = (($row2$068) + 1)|0;
							$$phi$trans$insert140 = ((($188)) + 8|0);
							$$pre141 = HEAP32[$$phi$trans$insert140>>2]|0;
							$$pre143 = HEAP32[$188>>2]|0;
							$163 = $$pre141;$165 = $$pre143;$167 = $188;$183 = $188;$row2$068 = $192;
						}
						return;
						break;
					}
					case 3:  {
						$193 = ((($this)) + 36|0);
						$194 = HEAP32[$this>>2]|0;
						$195 = ((($194)) + 8|0);
						$196 = HEAP32[$195>>2]|0;
						$197 = HEAP32[$194>>2]|0;
						$198 = (($196) + 1)|0;
						$199 = (($198) - ($197))|0;
						$200 = ((($this)) + 40|0);
						$201 = HEAP32[$200>>2]|0;
						$202 = HEAP32[$193>>2]|0;
						$203 = (($201) - ($202))|0;
						$204 = $203 >> 2;
						$205 = ($199>>>0)>($204>>>0);
						$206 = $202;
						$207 = $201;
						if ($205) {
							$208 = (($199) - ($204))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($193,$208);
							$$pre126 = HEAP32[$this>>2]|0;
							$$pre128 = HEAP32[$$pre126>>2]|0;
							$$phi$trans$insert129 = ((($$pre126)) + 8|0);
							$$pre130 = HEAP32[$$phi$trans$insert129>>2]|0;
							$217 = $$pre126;$224 = $$pre128;$226 = $$pre130;$418 = $$pre126;
						} else {
							$209 = ($199>>>0)<($204>>>0);
							if ($209) {
								$210 = (($206) + ($199<<2)|0);
								$211 = ($207|0)==($210|0);
								if ($211) {
									$217 = $194;$224 = $197;$226 = $196;$418 = $194;
								} else {
									$__new_last2$i$i$i18 = $210;
									$scevgep$i$i$i19 = ((($207)) + -4|0);
									$212 = $scevgep$i$i$i19;
									$213 = (($212) - ($__new_last2$i$i$i18))|0;
									$214 = $213 >>> 2;
									$215 = $214 ^ -1;
									$scevgep4$i$i$i20 = (($207) + ($215<<2)|0);
									HEAP32[$200>>2] = $scevgep4$i$i$i20;
									$217 = $194;$224 = $197;$226 = $196;$418 = $194;
								}
							} else {
								$217 = $194;$224 = $197;$226 = $196;$418 = $194;
							}
						}
						$216 = ((($217)) + 12|0);
						$218 = HEAP32[$216>>2]|0;
						$219 = ((($217)) + 4|0);
						$220 = HEAP32[$219>>2]|0;
						$221 = (($218) + 1)|0;
						$222 = (($221) - ($220))|0;
						$223 = ((($this)) + 8|0);
						HEAP32[$223>>2] = $222;
						$225 = ($224|0)>($226|0);
						if ($225) {
							return;
						}
						$227 = $218;$229 = $220;$231 = $418;$247 = $217;$col4$076 = $224;
						while(1) {
							$228 = ($227|0)<($229|0);
							L74: do {
								if ($228) {
									$j5$0$lcssa = $227;
								} else {
									$230 = ((($231)) + 4|0);
									$232 = HEAP32[$230>>2]|0;
									$233 = ((($231)) + 16|0);
									$234 = HEAP32[$233>>2]|0;
									$235 = HEAP32[$231>>2]|0;
									$236 = (($col4$076) - ($235))|0;
									$j5$071 = $227;
									while(1) {
										$237 = (($j5$071) - ($232))|0;
										$238 = (($234) + (($237*12)|0)|0);
										$239 = HEAP32[$238>>2]|0;
										$240 = (($239) + ($236)|0);
										$241 = HEAP8[$240>>0]|0;
										$242 = ($241<<24>>24)==(0);
										if (!($242)) {
											$j5$0$lcssa = $j5$071;
											break L74;
										}
										$243 = (($j5$071) + -1)|0;
										$244 = ($j5$071|0)>($229|0);
										if ($244) {
											$j5$071 = $243;
										} else {
											$j5$0$lcssa = $243;
											break;
										}
									}
								}
							} while(0);
							$245 = (($227) - ($j5$0$lcssa))|0;
							$246 = HEAP32[$247>>2]|0;
							$248 = (($col4$076) - ($246))|0;
							$249 = HEAP32[$193>>2]|0;
							$250 = (($249) + ($248<<2)|0);
							HEAP32[$250>>2] = $245;
							$251 = HEAP32[$this>>2]|0;
							$252 = ((($251)) + 8|0);
							$253 = HEAP32[$252>>2]|0;
							$254 = ($col4$076|0)<($253|0);
							if (!($254)) {
								break;
							}
							$255 = (($col4$076) + 1)|0;
							$$phi$trans$insert131 = ((($251)) + 12|0);
							$$pre132 = HEAP32[$$phi$trans$insert131>>2]|0;
							$$phi$trans$insert133 = ((($251)) + 4|0);
							$$pre134 = HEAP32[$$phi$trans$insert133>>2]|0;
							$227 = $$pre132;$229 = $$pre134;$231 = $251;$247 = $251;$col4$076 = $255;
						}
						return;
						break;
					}
					case 4:  {
						$256 = ((($this)) + 36|0);
						$257 = HEAP32[$this>>2]|0;
						$258 = ((($257)) + 8|0);
						$259 = HEAP32[$258>>2]|0;
						$260 = HEAP32[$257>>2]|0;
						$261 = (($259) + 1)|0;
						$262 = (($261) - ($260))|0;
						$263 = ((($this)) + 40|0);
						$264 = HEAP32[$263>>2]|0;
						$265 = HEAP32[$256>>2]|0;
						$266 = (($264) - ($265))|0;
						$267 = $266 >> 2;
						$268 = ($262>>>0)>($267>>>0);
						$269 = $265;
						$270 = $264;
						if ($268) {
							$271 = (($262) - ($267))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($256,$271);
							$$pre117 = HEAP32[$this>>2]|0;
							$$pre119 = HEAP32[$$pre117>>2]|0;
							$$phi$trans$insert120 = ((($$pre117)) + 8|0);
							$$pre121 = HEAP32[$$phi$trans$insert120>>2]|0;
							$280 = $$pre117;$287 = $$pre119;$289 = $$pre121;$419 = $$pre117;
						} else {
							$272 = ($262>>>0)<($267>>>0);
							if ($272) {
								$273 = (($269) + ($262<<2)|0);
								$274 = ($270|0)==($273|0);
								if ($274) {
									$280 = $257;$287 = $260;$289 = $259;$419 = $257;
								} else {
									$__new_last2$i$i$i13 = $273;
									$scevgep$i$i$i14 = ((($270)) + -4|0);
									$275 = $scevgep$i$i$i14;
									$276 = (($275) - ($__new_last2$i$i$i13))|0;
									$277 = $276 >>> 2;
									$278 = $277 ^ -1;
									$scevgep4$i$i$i15 = (($270) + ($278<<2)|0);
									HEAP32[$263>>2] = $scevgep4$i$i$i15;
									$280 = $257;$287 = $260;$289 = $259;$419 = $257;
								}
							} else {
								$280 = $257;$287 = $260;$289 = $259;$419 = $257;
							}
						}
						$279 = ((($280)) + 12|0);
						$281 = HEAP32[$279>>2]|0;
						$282 = ((($280)) + 4|0);
						$283 = HEAP32[$282>>2]|0;
						$284 = (($281) + 1)|0;
						$285 = (($284) - ($283))|0;
						$286 = ((($this)) + 8|0);
						HEAP32[$286>>2] = $285;
						$288 = ($287|0)>($289|0);
						if ($288) {
							return;
						}
						$290 = $283;$292 = $281;$294 = $419;$326 = $280;$col6$088 = $287;
						while(1) {
							$291 = ($290|0)>($292|0);
							L94: do {
								if ($291) {
									$u$0$lcssa = $290;
								} else {
									$293 = ((($294)) + 4|0);
									$295 = HEAP32[$293>>2]|0;
									$296 = ((($294)) + 16|0);
									$297 = HEAP32[$296>>2]|0;
									$298 = HEAP32[$294>>2]|0;
									$299 = (($col6$088) - ($298))|0;
									$u$079 = $290;
									while(1) {
										$300 = (($u$079) - ($295))|0;
										$301 = (($297) + (($300*12)|0)|0);
										$302 = HEAP32[$301>>2]|0;
										$303 = (($302) + ($299)|0);
										$304 = HEAP8[$303>>0]|0;
										$305 = ($304<<24>>24)==(0);
										if (!($305)) {
											$u$0$lcssa = $u$079;
											break L94;
										}
										$313 = (($u$079) + 1)|0;
										$314 = ($u$079|0)<($292|0);
										if ($314) {
											$u$079 = $313;
										} else {
											$u$0$lcssa = $313;
											break;
										}
									}
								}
							} while(0);
							$306 = ($292|0)<($u$0$lcssa|0);
							L100: do {
								if ($306) {
									$d$0$lcssa = $292;
								} else {
									$307 = ((($294)) + 4|0);
									$308 = HEAP32[$307>>2]|0;
									$309 = ((($294)) + 16|0);
									$310 = HEAP32[$309>>2]|0;
									$311 = HEAP32[$294>>2]|0;
									$312 = (($col6$088) - ($311))|0;
									$d$084 = $292;
									while(1) {
										$315 = (($d$084) - ($308))|0;
										$316 = (($310) + (($315*12)|0)|0);
										$317 = HEAP32[$316>>2]|0;
										$318 = (($317) + ($312)|0);
										$319 = HEAP8[$318>>0]|0;
										$320 = ($319<<24>>24)==(0);
										if (!($320)) {
											$d$0$lcssa = $d$084;
											break L100;
										}
										$321 = (($d$084) + -1)|0;
										$322 = ($d$084|0)>($u$0$lcssa|0);
										if ($322) {
											$d$084 = $321;
										} else {
											$d$0$lcssa = $321;
											break;
										}
									}
								}
							} while(0);
							$323 = (1 - ($u$0$lcssa))|0;
							$324 = (($323) + ($d$0$lcssa))|0;
							$325 = HEAP32[$326>>2]|0;
							$327 = (($col6$088) - ($325))|0;
							$328 = HEAP32[$256>>2]|0;
							$329 = (($328) + ($327<<2)|0);
							HEAP32[$329>>2] = $324;
							$330 = HEAP32[$this>>2]|0;
							$331 = ((($330)) + 8|0);
							$332 = HEAP32[$331>>2]|0;
							$333 = ($col6$088|0)<($332|0);
							if (!($333)) {
								break;
							}
							$334 = (($col6$088) + 1)|0;
							$$phi$trans$insert122 = ((($330)) + 4|0);
							$$pre123 = HEAP32[$$phi$trans$insert122>>2]|0;
							$$phi$trans$insert124 = ((($330)) + 12|0);
							$$pre125 = HEAP32[$$phi$trans$insert124>>2]|0;
							$290 = $$pre123;$292 = $$pre125;$294 = $330;$326 = $330;$col6$088 = $334;
						}
						return;
						break;
					}
					case 5:  {
						$335 = ((($this)) + 36|0);
						$336 = HEAP32[$this>>2]|0;
						$337 = ((($336)) + 12|0);
						$338 = HEAP32[$337>>2]|0;
						$339 = ((($336)) + 4|0);
						$340 = HEAP32[$339>>2]|0;
						$341 = (($338) + 1)|0;
						$342 = (($341) - ($340))|0;
						$343 = ((($this)) + 40|0);
						$344 = HEAP32[$343>>2]|0;
						$345 = HEAP32[$335>>2]|0;
						$346 = (($344) - ($345))|0;
						$347 = $346 >> 2;
						$348 = ($342>>>0)>($347>>>0);
						$349 = $345;
						$350 = $344;
						if ($348) {
							$351 = (($342) - ($347))|0;
							__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj($335,$351);
							$$pre = HEAP32[$this>>2]|0;
							$$phi$trans$insert = ((($$pre)) + 4|0);
							$$pre110 = HEAP32[$$phi$trans$insert>>2]|0;
							$$phi$trans$insert111 = ((($$pre)) + 12|0);
							$$pre112 = HEAP32[$$phi$trans$insert111>>2]|0;
							$360 = $$pre;$366 = $$pre110;$368 = $$pre112;$420 = $$pre;
						} else {
							$352 = ($342>>>0)<($347>>>0);
							if ($352) {
								$353 = (($349) + ($342<<2)|0);
								$354 = ($350|0)==($353|0);
								if ($354) {
									$360 = $336;$366 = $340;$368 = $338;$420 = $336;
								} else {
									$__new_last2$i$i$i = $353;
									$scevgep$i$i$i = ((($350)) + -4|0);
									$355 = $scevgep$i$i$i;
									$356 = (($355) - ($__new_last2$i$i$i))|0;
									$357 = $356 >>> 2;
									$358 = $357 ^ -1;
									$scevgep4$i$i$i = (($350) + ($358<<2)|0);
									HEAP32[$343>>2] = $scevgep4$i$i$i;
									$360 = $336;$366 = $340;$368 = $338;$420 = $336;
								}
							} else {
								$360 = $336;$366 = $340;$368 = $338;$420 = $336;
							}
						}
						$359 = ((($360)) + 8|0);
						$361 = HEAP32[$359>>2]|0;
						$362 = HEAP32[$360>>2]|0;
						$363 = (($361) + 1)|0;
						$364 = (($363) - ($362))|0;
						$365 = ((($this)) + 8|0);
						HEAP32[$365>>2] = $364;
						$367 = ($366|0)>($368|0);
						if ($367) {
							return;
						}
						$369 = $362;$371 = $361;$373 = $420;$405 = $360;$row7$0101 = $366;
						while(1) {
							$370 = ($369|0)>($371|0);
							L120: do {
								if ($370) {
									$l$0$lcssa = $369;
								} else {
									$372 = ((($373)) + 4|0);
									$374 = HEAP32[$372>>2]|0;
									$375 = (($row7$0101) - ($374))|0;
									$376 = ((($373)) + 16|0);
									$377 = HEAP32[$376>>2]|0;
									$378 = HEAP32[$373>>2]|0;
									$379 = (($377) + (($375*12)|0)|0);
									$380 = HEAP32[$379>>2]|0;
									$l$092 = $369;
									while(1) {
										$381 = (($l$092) - ($378))|0;
										$382 = (($380) + ($381)|0);
										$383 = HEAP8[$382>>0]|0;
										$384 = ($383<<24>>24)==(0);
										if (!($384)) {
											$l$0$lcssa = $l$092;
											break L120;
										}
										$394 = (($l$092) + 1)|0;
										$395 = ($l$092|0)<($371|0);
										if ($395) {
											$l$092 = $394;
										} else {
											$l$0$lcssa = $394;
											break;
										}
									}
								}
							} while(0);
							$385 = ($371|0)<($l$0$lcssa|0);
							L126: do {
								if ($385) {
									$r$0$lcssa = $371;
								} else {
									$386 = ((($373)) + 4|0);
									$387 = HEAP32[$386>>2]|0;
									$388 = (($row7$0101) - ($387))|0;
									$389 = ((($373)) + 16|0);
									$390 = HEAP32[$389>>2]|0;
									$391 = HEAP32[$373>>2]|0;
									$392 = (($390) + (($388*12)|0)|0);
									$393 = HEAP32[$392>>2]|0;
									$r$097 = $371;
									while(1) {
										$396 = (($r$097) - ($391))|0;
										$397 = (($393) + ($396)|0);
										$398 = HEAP8[$397>>0]|0;
										$399 = ($398<<24>>24)==(0);
										if (!($399)) {
											$r$0$lcssa = $r$097;
											break L126;
										}
										$400 = (($r$097) + -1)|0;
										$401 = ($r$097|0)>($l$0$lcssa|0);
										if ($401) {
											$r$097 = $400;
										} else {
											$r$0$lcssa = $400;
											break;
										}
									}
								}
							} while(0);
							$402 = (1 - ($l$0$lcssa))|0;
							$403 = (($402) + ($r$0$lcssa))|0;
							$404 = ((($405)) + 4|0);
							$406 = HEAP32[$404>>2]|0;
							$407 = (($row7$0101) - ($406))|0;
							$408 = HEAP32[$335>>2]|0;
							$409 = (($408) + ($407<<2)|0);
							HEAP32[$409>>2] = $403;
							$410 = HEAP32[$this>>2]|0;
							$411 = ((($410)) + 12|0);
							$412 = HEAP32[$411>>2]|0;
							$413 = ($row7$0101|0)<($412|0);
							if (!($413)) {
								break;
							}
							$414 = (($row7$0101) + 1)|0;
							$$pre114 = HEAP32[$410>>2]|0;
							$$phi$trans$insert115 = ((($410)) + 8|0);
							$$pre116 = HEAP32[$$phi$trans$insert115>>2]|0;
							$369 = $$pre114;$371 = $$pre116;$373 = $410;$405 = $410;$row7$0101 = $414;
						}
						return;
						break;
					}
					default: {
						return;
					}
				}
			}
			function __ZN7Profile4meanEv($this) {
				$this = $this|0;
				var $$lcssa = 0, $$lcssa11 = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 20|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if (!($2)) {
					$35 = $1;
					return ($35|0);
				}
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
				}
				HEAP32[$0>>2] = 0;
				$6 = ((($this)) + 36|0);
				$7 = ((($this)) + 40|0);
				$i$0 = 0;
				while(1) {
					$8 = HEAP32[$3>>2]|0;
					$9 = ($8|0)<(0);
					if ($9) {
						__ZN7Profile10initializeEv($this);
					}
					$10 = HEAP32[$7>>2]|0;
					$11 = HEAP32[$6>>2]|0;
					$12 = (($10) - ($11))|0;
					$13 = $12 >> 2;
					$14 = ($i$0|0)<($13|0);
					if (!($14)) {
						$$lcssa = $10;$$lcssa11 = $11;
						break;
					}
					$21 = $11;
					$22 = (($21) + ($i$0<<2)|0);
					$23 = HEAP32[$22>>2]|0;
					$24 = HEAP32[$0>>2]|0;
					$25 = (($24) + ($23))|0;
					HEAP32[$0>>2] = $25;
					$26 = (($i$0) + 1)|0;
					$i$0 = $26;
				}
				$15 = HEAP32[$3>>2]|0;
				$16 = ($15|0)<(0);
				if ($16) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$7>>2]|0;
					$$pre4 = HEAP32[$6>>2]|0;
					$18 = $$pre4;$19 = $$pre;
				} else {
					$18 = $$lcssa11;$19 = $$lcssa;
				}
				$17 = (($19) - ($18))|0;
				$20 = ($17|0)>(4);
				if (!($20)) {
					$$pre7 = HEAP32[$0>>2]|0;
					$35 = $$pre7;
					return ($35|0);
				}
				$27 = HEAP32[$3>>2]|0;
				$28 = ($27|0)<(0);
				if ($28) {
					__ZN7Profile10initializeEv($this);
					$$pre5 = HEAP32[$7>>2]|0;
					$$pre6 = HEAP32[$6>>2]|0;
					$30 = $$pre6;$31 = $$pre5;
				} else {
					$30 = $18;$31 = $19;
				}
				$29 = (($31) - ($30))|0;
				$32 = $29 >> 2;
				$33 = HEAP32[$0>>2]|0;
				$34 = (($33|0) / ($32|0))&-1;
				HEAP32[$0>>2] = $34;
				$35 = $34;
				return ($35|0);
			}
			function __ZN7Profile3maxEv($this) {
				$this = $this|0;
				var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if (!($2)) {
					$26 = $1;
					return ($26|0);
				}
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
				}
				$6 = ((($this)) + 36|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$7>>2]|0;
				HEAP32[$0>>2] = $8;
				$9 = ((($this)) + 40|0);
				$10 = $7;$i$0 = 1;
				while(1) {
					$11 = $10;
					$12 = HEAP32[$3>>2]|0;
					$13 = ($12|0)<(0);
					if ($13) {
						__ZN7Profile10initializeEv($this);
						$$pre = HEAP32[$6>>2]|0;
						$14 = $$pre;
						$17 = $$pre;$21 = $14;
					} else {
						$17 = $11;$21 = $10;
					}
					$15 = HEAP32[$9>>2]|0;
					$16 = (($15) - ($17))|0;
					$18 = $16 >> 2;
					$19 = ($i$0|0)<($18|0);
					if (!($19)) {
						break;
					}
					$20 = (($21) + ($i$0<<2)|0);
					$22 = HEAP32[$20>>2]|0;
					$23 = HEAP32[$0>>2]|0;
					$24 = ($22|0)>($23|0);
					if ($24) {
						HEAP32[$0>>2] = $22;
					}
					$25 = (($i$0) + 1)|0;
					$10 = $21;$i$0 = $25;
				}
				$$pre1 = HEAP32[$0>>2]|0;
				$26 = $$pre1;
				return ($26|0);
			}
			function __ZN7Profile3maxEii($this,$l,$r) {
				$this = $this|0;
				$l = $l|0;
				$r = $r|0;
				var $$0 = 0, $$m$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $m$0$lcssa = 0, $m$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
				}
				$3 = ($r|0)<(0);
				if ($3) {
					$4 = HEAP32[$0>>2]|0;
					$5 = ($4|0)<(0);
					if ($5) {
						__ZN7Profile10initializeEv($this);
					}
					$6 = ((($this)) + 36|0);
					$7 = ((($this)) + 40|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = HEAP32[$6>>2]|0;
					$10 = (($8) - ($9))|0;
					$11 = $10 >> 2;
					$12 = (($11) + -1)|0;
					$$0 = $12;
				} else {
					$$0 = $r;
				}
				$13 = ($$0|0)<($l|0);
				if ($13) {
					$m$0$lcssa = 0;
					return ($m$0$lcssa|0);
				}
				$14 = ((($this)) + 36|0);
				$15 = HEAP32[$14>>2]|0;
				$i$02 = $l;$m$01 = 0;
				while(1) {
					$16 = (($15) + ($i$02<<2)|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = ($17|0)>($m$01|0);
					$$m$0 = $18 ? $17 : $m$01;
					$19 = (($i$02) + 1)|0;
					$20 = ($i$02|0)<($$0|0);
					if ($20) {
						$i$02 = $19;$m$01 = $$m$0;
					} else {
						$m$0$lcssa = $$m$0;
						break;
					}
				}
				return ($m$0$lcssa|0);
			}
			function __ZN7Profile3minEv($this) {
				$this = $this|0;
				var $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 16|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if (!($2)) {
					$26 = $1;
					return ($26|0);
				}
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
				}
				$6 = ((($this)) + 36|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = HEAP32[$7>>2]|0;
				HEAP32[$0>>2] = $8;
				$9 = ((($this)) + 40|0);
				$10 = $7;$i$0 = 1;
				while(1) {
					$11 = $10;
					$12 = HEAP32[$3>>2]|0;
					$13 = ($12|0)<(0);
					if ($13) {
						__ZN7Profile10initializeEv($this);
						$$pre = HEAP32[$6>>2]|0;
						$14 = $$pre;
						$17 = $$pre;$21 = $14;
					} else {
						$17 = $11;$21 = $10;
					}
					$15 = HEAP32[$9>>2]|0;
					$16 = (($15) - ($17))|0;
					$18 = $16 >> 2;
					$19 = ($i$0|0)<($18|0);
					if (!($19)) {
						break;
					}
					$20 = (($21) + ($i$0<<2)|0);
					$22 = HEAP32[$20>>2]|0;
					$23 = HEAP32[$0>>2]|0;
					$24 = ($22|0)<($23|0);
					if ($24) {
						HEAP32[$0>>2] = $22;
					}
					$25 = (($i$0) + 1)|0;
					$10 = $21;$i$0 = $25;
				}
				$$pre1 = HEAP32[$0>>2]|0;
				$26 = $$pre1;
				return ($26|0);
			}
			function __ZN7Profile3minEii($this,$l,$r) {
				$this = $this|0;
				$l = $l|0;
				$r = $r|0;
				var $$0 = 0, $$m$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $m$0$lcssa = 0, $m$01 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
				}
				$3 = ($r|0)<(0);
				if ($3) {
					$4 = HEAP32[$0>>2]|0;
					$5 = ($4|0)<(0);
					if ($5) {
						__ZN7Profile10initializeEv($this);
					}
					$6 = ((($this)) + 36|0);
					$7 = ((($this)) + 40|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = HEAP32[$6>>2]|0;
					$10 = (($8) - ($9))|0;
					$11 = $10 >> 2;
					$12 = (($11) + -1)|0;
					$$0 = $12;
				} else {
					$$0 = $r;
				}
				$13 = HEAP32[$0>>2]|0;
				$14 = ($$0|0)<($l|0);
				if ($14) {
					$m$0$lcssa = $13;
					return ($m$0$lcssa|0);
				}
				$15 = ((($this)) + 36|0);
				$16 = HEAP32[$15>>2]|0;
				$i$02 = $l;$m$01 = $13;
				while(1) {
					$17 = (($16) + ($i$02<<2)|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = ($18|0)<($m$01|0);
					$$m$0 = $19 ? $18 : $m$01;
					$20 = (($i$02) + 1)|0;
					$21 = ($i$02|0)<($$0|0);
					if ($21) {
						$i$02 = $20;$m$01 = $$m$0;
					} else {
						$m$0$lcssa = $$m$0;
						break;
					}
				}
				return ($m$0$lcssa|0);
			}
			function __ZN7ProfileixEi($this,$i) {
				$this = $this|0;
				$i = $i|0;
				var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
				}
				$3 = ($i|0)<(0);
				if ($3) {
					$$phi$trans$insert = ((($this)) + 36|0);
					$$pre3 = HEAP32[$$phi$trans$insert>>2]|0;
					$$0 = 0;$23 = $$pre3;
					$22 = (($23) + ($$0<<2)|0);
					$24 = HEAP32[$22>>2]|0;
					return ($24|0);
				}
				$4 = HEAP32[$0>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
				}
				$6 = ((($this)) + 36|0);
				$7 = ((($this)) + 40|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = HEAP32[$6>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = $10 >> 2;
				$12 = ($11|0)>($i|0);
				$13 = $9;
				if ($12) {
					$$0 = $i;$23 = $13;
					$22 = (($23) + ($$0<<2)|0);
					$24 = HEAP32[$22>>2]|0;
					return ($24|0);
				}
				$14 = HEAP32[$0>>2]|0;
				$15 = ($14|0)<(0);
				if ($15) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$7>>2]|0;
					$$pre2 = HEAP32[$6>>2]|0;
					$16 = $$pre2;
					$18 = $$pre2;$19 = $$pre;$25 = $16;
				} else {
					$18 = $9;$19 = $8;$25 = $13;
				}
				$17 = (($19) - ($18))|0;
				$20 = $17 >> 2;
				$21 = (($20) + -1)|0;
				$$0 = $21;$23 = $25;
				$22 = (($23) + ($$0<<2)|0);
				$24 = HEAP32[$22>>2]|0;
				return ($24|0);
			}
			function __ZN7Profile4areaEii($this,$l,$r) {
				$this = $this|0;
				$l = $l|0;
				$r = $r|0;
				var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$0$lcssa = 0, $a$02 = 0, $i$03 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
				}
				$3 = ($r|0)<(0);
				if ($3) {
					label = 7;
				} else {
					$4 = HEAP32[$0>>2]|0;
					$5 = ($4|0)<(0);
					if ($5) {
						__ZN7Profile10initializeEv($this);
					}
					$6 = ((($this)) + 36|0);
					$7 = ((($this)) + 40|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = HEAP32[$6>>2]|0;
					$10 = (($8) - ($9))|0;
					$11 = $10 >> 2;
					$12 = ($11|0)>($r|0);
					if ($12) {
						$$0 = $r;$$in = $9;
					} else {
						label = 7;
					}
				}
				if ((label|0) == 7) {
					$13 = HEAP32[$0>>2]|0;
					$14 = ($13|0)<(0);
					if ($14) {
						__ZN7Profile10initializeEv($this);
					}
					$15 = ((($this)) + 36|0);
					$16 = ((($this)) + 40|0);
					$17 = HEAP32[$16>>2]|0;
					$18 = HEAP32[$15>>2]|0;
					$19 = (($17) - ($18))|0;
					$20 = $19 >> 2;
					$21 = (($20) + -1)|0;
					$$0 = $21;$$in = $18;
				}
				$22 = $$in;
				$23 = ($$0|0)<($l|0);
				if ($23) {
					$a$0$lcssa = 0;
					return ($a$0$lcssa|0);
				} else {
					$a$02 = 0;$i$03 = $l;
				}
				while(1) {
					$24 = (($22) + ($i$03<<2)|0);
					$25 = HEAP32[$24>>2]|0;
					$26 = (($25) + ($a$02))|0;
					$27 = (($i$03) + 1)|0;
					$28 = ($i$03|0)<($$0|0);
					if ($28) {
						$a$02 = $26;$i$03 = $27;
					} else {
						$a$0$lcssa = $26;
						break;
					}
				}
				return ($a$0$lcssa|0);
			}
			function __ZN7Profile10increasingEii($this,$i,$min_delta) {
				$this = $this|0;
				$i = $i|0;
				$min_delta = $min_delta|0;
				var $$0 = 0, $$01 = 0, $$cast = 0, $$in = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
				var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
				var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
				}
				$3 = ($i|0)<(0);
				if ($3) {
					$$0 = 0;
					return ($$0|0);
				}
				$4 = HEAP32[$0>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
				}
				$6 = ((($this)) + 36|0);
				$7 = ((($this)) + 40|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = HEAP32[$6>>2]|0;
				$10 = (($8) - ($9))|0;
				$11 = $10 >> 2;
				$12 = (($11) + -2)|0;
				$13 = ($12|0)<($i|0);
				if ($13) {
					$$0 = 0;
					return ($$0|0);
				}
				$14 = HEAP32[$0>>2]|0;
				$15 = ($14|0)<(0);
				if ($15) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$7>>2]|0;
					$$pre4 = HEAP32[$6>>2]|0;
					$$in = $$pre4;$17 = $$pre;
				} else {
					$$in = $9;$17 = $8;
				}
				$16 = (($17) - ($$in))|0;
				$18 = $16 >> 2;
				$19 = (($18) + -1)|0;
				$$cast = $$in;
				$20 = (($$cast) + ($19<<2)|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = (($$cast) + ($i<<2)|0);
				$23 = HEAP32[$22>>2]|0;
				$24 = (($21) - ($23))|0;
				$25 = ($24|0)<($min_delta|0);
				if ($25) {
					$$0 = 0;
					return ($$0|0);
				}
				$26 = $$in;
				$$01 = $i;$43 = $26;$44 = $$in;$45 = $17;
				while(1) {
					$27 = (($$01) + 1)|0;
					$28 = HEAP32[$0>>2]|0;
					$29 = ($28|0)<(0);
					if ($29) {
						__ZN7Profile10initializeEv($this);
						$$pre5 = HEAP32[$7>>2]|0;
						$$pre6 = HEAP32[$6>>2]|0;
						$30 = $$pre6;
						$32 = $$pre6;$33 = $$pre5;$37 = $30;
					} else {
						$32 = $44;$33 = $45;$37 = $43;
					}
					$31 = (($33) - ($32))|0;
					$34 = $31 >> 2;
					$35 = ($27|0)<($34|0);
					if (!($35)) {
						$$0 = 1;
						label = 15;
						break;
					}
					$36 = (($37) + ($27<<2)|0);
					$38 = HEAP32[$36>>2]|0;
					$39 = (($37) + ($$01<<2)|0);
					$40 = HEAP32[$39>>2]|0;
					$41 = ($38|0)<($40|0);
					$42 = $37;
					if ($41) {
						$$0 = 0;
						label = 15;
						break;
					} else {
						$$01 = $27;$43 = $37;$44 = $42;$45 = $33;
					}
				}
				if ((label|0) == 15) {
					return ($$0|0);
				}
				return (0)|0;
			}
			function __ZN7Profile10decreasingEii($this,$i,$end) {
				$this = $this|0;
				$i = $i|0;
				$end = $end|0;
				var $$0 = 0, $$01 = 0, $$02 = 0, $$in = 0, $$pr = 0, $$pr6 = 0, $$pre = 0, $$pre10 = 0, $$pre11 = 0, $$pre12 = 0, $$pre13 = 0, $$pre7 = 0, $$pre8 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
				var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
				var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
				var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
						$$pre = HEAP32[$0>>2]|0;
						$12 = $$pre;
					} else {
						$12 = $$pr;
					}
				} else {
					$12 = $1;
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = $8 >> 2;
				$10 = (($9|0) / 20)&-1;
				$11 = (($10) + 1)|0;
				$13 = ($12|0)<(0);
				if ($13) {
					__ZN7Profile10initializeEv($this);
					$$pr6 = HEAP32[$0>>2]|0;
					$$pre7 = HEAP32[$5>>2]|0;
					$$pre8 = HEAP32[$4>>2]|0;
					$$in = $$pre8;$16 = $$pre7;$18 = $$pr6;
				} else {
					$$in = $7;$16 = $6;$18 = $12;
				}
				$14 = $$in;
				$15 = (($16) - ($$in))|0;
				$17 = $15 >> 2;
				$19 = ($18|0)<($17|0);
				$20 = $19 ? $18 : $17;
				$21 = (($20|0) / 20)&-1;
				$22 = (($21) + 1)|0;
				$23 = ($end|0)<(0);
				if ($23) {
					$32 = $18;$59 = $14;$60 = $$in;$61 = $16;
					label = 11;
				} else {
					$24 = ($18|0)<(0);
					if ($24) {
						__ZN7Profile10initializeEv($this);
						$$pre9 = HEAP32[$5>>2]|0;
						$$pre10 = HEAP32[$4>>2]|0;
						$25 = $$pre10;
						$27 = $$pre10;$28 = $$pre9;$62 = $25;
					} else {
						$27 = $$in;$28 = $16;$62 = $14;
					}
					$26 = (($28) - ($27))|0;
					$29 = $26 >> 2;
					$30 = (($29) - ($11))|0;
					$31 = ($30|0)<($end|0);
					if ($31) {
						$$pre11 = HEAP32[$0>>2]|0;
						$32 = $$pre11;$59 = $62;$60 = $27;$61 = $28;
						label = 11;
					} else {
						$$02 = $end;$45 = $62;
					}
				}
				if ((label|0) == 11) {
					$33 = ($32|0)<(0);
					if ($33) {
						__ZN7Profile10initializeEv($this);
						$$pre12 = HEAP32[$5>>2]|0;
						$$pre13 = HEAP32[$4>>2]|0;
						$34 = $$pre13;
						$36 = $$pre13;$37 = $$pre12;$63 = $34;
					} else {
						$36 = $60;$37 = $61;$63 = $59;
					}
					$35 = (($37) - ($36))|0;
					$38 = $35 >> 2;
					$39 = (($38) - ($11))|0;
					$$02 = $39;$45 = $63;
				}
				$40 = ($i|0)<(0);
				if ($40) {
					$$0 = 0;
					return ($$0|0);
				}
				$41 = (($$02) - ($i))|0;
				$42 = $22 << 1;
				$43 = ($41|0)>($42|0);
				if (!($43)) {
					$$0 = 0;
					return ($$0|0);
				}
				$44 = (($45) + ($i<<2)|0);
				$46 = HEAP32[$44>>2]|0;
				$47 = (($$02) + -1)|0;
				$48 = (($45) + ($47<<2)|0);
				$49 = HEAP32[$48>>2]|0;
				$50 = (($46) - ($49))|0;
				$51 = ($50|0)>($22|0);
				if ($51) {
					$$01 = $i;
				} else {
					$$0 = 0;
					return ($$0|0);
				}
				while(1) {
					$52 = (($$01) + 1)|0;
					$53 = ($52|0)<($$02|0);
					if (!($53)) {
						$$0 = 1;
						label = 19;
						break;
					}
					$54 = (($45) + ($52<<2)|0);
					$55 = HEAP32[$54>>2]|0;
					$56 = (($45) + ($$01<<2)|0);
					$57 = HEAP32[$56>>2]|0;
					$58 = ($55|0)>($57|0);
					if ($58) {
						$$0 = 0;
						label = 19;
						break;
					} else {
						$$01 = $52;
					}
				}
				if ((label|0) == 19) {
					return ($$0|0);
				}
				return (0)|0;
			}
			function __ZN7Profile9isconcaveEv($this) {
				$this = $this|0;
				var $$4 = 0, $$4$in = 0, $$cast = 0, $$in = 0, $$lcssa = 0, $$lcssa66 = 0, $$lcssa68 = 0, $$lcssa69 = 0, $$lcssa70 = 0, $$lcssa71 = 0, $$lcssa72 = 0, $$pr = 0, $$pre = 0, $$pre23 = 0, $$pre24 = 0, $$pre25 = 0, $$pre26 = 0, $$pre27 = 0, $$pre28 = 0, $$pre29 = 0;
				var $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
				var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
				var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
				var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
				var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
				var $99 = 0, $dmax$0 = 0, $dmax$0$lcssa = 0, $dmax$1 = 0, $i$0 = 0, $i1$0 = 0, $i2$0 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 24|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(20);
				if ($12) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$13 = HEAP32[$3>>2]|0;
				$14 = ($13|0)<(0);
				if ($14) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre23 = HEAP32[$7>>2]|0;
					$$in = $$pre23;$17 = $$pre;
				} else {
					$$in = $10;$17 = $9;
				}
				$15 = $$in;
				$16 = (($17) - ($$in))|0;
				$18 = $16 >> 2;
				$19 = ($18*10)|0;
				$20 = (($19) + -10)|0;
				$21 = (($20|0) / 100)&-1;
				$129 = $15;$130 = $15;$131 = $15;$132 = $$in;$133 = $15;$134 = $$in;$135 = $17;$dmax$0 = -1;$i$0 = $21;$l$0 = 0;$r$0 = 0;
				while(1) {
					$22 = HEAP32[$3>>2]|0;
					$23 = ($22|0)<(0);
					if ($23) {
						__ZN7Profile10initializeEv($this);
						$$pre24 = HEAP32[$8>>2]|0;
						$$pre25 = HEAP32[$7>>2]|0;
						$24 = $$pre25;
						$136 = $24;$137 = $24;$138 = $24;$139 = $$pre25;$26 = $$pre25;$27 = $$pre24;$35 = $24;
					} else {
						$136 = $129;$137 = $130;$138 = $131;$139 = $132;$26 = $134;$27 = $135;$35 = $133;
					}
					$25 = (($27) - ($26))|0;
					$28 = $25 >> 2;
					$29 = ($28*90)|0;
					$30 = (($29) + -90)|0;
					$31 = (($30|0) / 100)&-1;
					$32 = ($i$0|0)>($31|0);
					if ($32) {
						$$lcssa68 = $136;$$lcssa69 = $137;$$lcssa70 = $138;$$lcssa71 = $139;$$lcssa72 = $27;$dmax$0$lcssa = $dmax$0;$l$0$lcssa = $l$0;$r$0$lcssa = $r$0;
						break;
					}
					$34 = (($35) + ($i$0<<2)|0);
					$36 = HEAP32[$34>>2]|0;
					$37 = ($36|0)>($dmax$0|0);
					$dmax$1 = $37 ? $36 : $dmax$0;
					$l$1 = $37 ? $i$0 : $l$0;
					$38 = ($36|0)>=($dmax$0|0);
					$r$1 = $38 ? $i$0 : $r$0;
					$39 = (($i$0) + 1)|0;
					$40 = $35;
					$129 = $136;$130 = $137;$131 = $138;$132 = $139;$133 = $35;$134 = $40;$135 = $27;$dmax$0 = $dmax$1;$i$0 = $39;$l$0 = $l$1;$r$0 = $r$1;
				}
				$33 = ($l$0$lcssa|0)>($r$0$lcssa|0);
				if ($33) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$41 = HEAP32[$3>>2]|0;
				$42 = ($41|0)<(0);
				if ($42) {
					__ZN7Profile10initializeEv($this);
					$$pre26 = HEAP32[$8>>2]|0;
					$$pre27 = HEAP32[$7>>2]|0;
					$43 = $$pre27;
					$140 = $43;$141 = $43;$142 = $43;$45 = $$pre27;$46 = $$pre26;
				} else {
					$140 = $$lcssa68;$141 = $$lcssa69;$142 = $$lcssa70;$45 = $$lcssa71;$46 = $$lcssa72;
				}
				$44 = (($46) - ($45))|0;
				$47 = $44 >> 2;
				$48 = ($47*25)|0;
				$49 = (($48) + -25)|0;
				$50 = (($49|0) / 100)&-1;
				$51 = ($l$0$lcssa|0)<($50|0);
				if ($51) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$52 = HEAP32[$3>>2]|0;
				$53 = ($52|0)<(0);
				if ($53) {
					__ZN7Profile10initializeEv($this);
					$$pre28 = HEAP32[$8>>2]|0;
					$$pre29 = HEAP32[$7>>2]|0;
					$54 = $$pre29;
					$143 = $54;$144 = $54;$145 = $54;$56 = $$pre29;$57 = $$pre28;
				} else {
					$143 = $140;$144 = $141;$145 = $142;$56 = $45;$57 = $46;
				}
				$55 = (($57) - ($56))|0;
				$58 = $55 >> 2;
				$59 = ($58*75)|0;
				$60 = (($59) + -75)|0;
				$61 = (($60|0) / 100)&-1;
				$62 = ($r$0$lcssa|0)>($61|0);
				if ($62) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$63 = HEAP32[$3>>2]|0;
				$64 = ($63|0)<(0);
				if ($64) {
					__ZN7Profile10initializeEv($this);
					$$pre30 = HEAP32[$8>>2]|0;
					$$pre31 = HEAP32[$7>>2]|0;
					$65 = $$pre31;
					$146 = $65;$147 = $65;$67 = $$pre31;$68 = $$pre30;$74 = $65;
				} else {
					$146 = $143;$147 = $144;$67 = $56;$68 = $57;$74 = $145;
				}
				$66 = (($68) - ($67))|0;
				$69 = $66 >> 2;
				$70 = ($69*10)|0;
				$71 = (($70) + -10)|0;
				$72 = (($71|0) / 100)&-1;
				$73 = (($74) + ($72<<2)|0);
				$75 = HEAP32[$73>>2]|0;
				$76 = ($75|0)<($dmax$0$lcssa|0);
				if (!($76)) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$77 = HEAP32[$3>>2]|0;
				$78 = ($77|0)<(0);
				if ($78) {
					__ZN7Profile10initializeEv($this);
					$$pre32 = HEAP32[$8>>2]|0;
					$$pre33 = HEAP32[$7>>2]|0;
					$79 = $$pre33;
					$148 = $79;$149 = $79;$81 = $$pre33;$82 = $$pre32;
				} else {
					$148 = $146;$149 = $147;$81 = $67;$82 = $68;
				}
				$80 = (($82) - ($81))|0;
				$83 = $80 >> 2;
				$84 = ($83*90)|0;
				$85 = (($84) + -90)|0;
				$86 = (($85|0) / 100)&-1;
				$$cast = $81;
				$87 = (($$cast) + ($86<<2)|0);
				$88 = HEAP32[$87>>2]|0;
				$89 = ($88|0)<($dmax$0$lcssa|0);
				if (!($89)) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$90 = (($r$0$lcssa) + ($l$0$lcssa))|0;
				$91 = (($90|0) / 2)&-1;
				$92 = HEAP32[$3>>2]|0;
				$93 = ($92|0)<(0);
				if ($93) {
					__ZN7Profile10initializeEv($this);
					$$pre34 = HEAP32[$8>>2]|0;
					$$pre35 = HEAP32[$7>>2]|0;
					$94 = $$pre35;
					$102 = $94;$150 = $94;$96 = $$pre35;$97 = $$pre34;
				} else {
					$102 = $148;$150 = $149;$96 = $81;$97 = $82;
				}
				$95 = (($97) - ($96))|0;
				$98 = $95 >> 2;
				$99 = ($98*10)|0;
				$100 = (($99) + -10)|0;
				$101 = (($100|0) / 100)&-1;
				$103 = $102;
				$151 = $150;$152 = $96;$i1$0 = $101;
				while(1) {
					$104 = ($i1$0|0)<($91|0);
					if (!($104)) {
						$$lcssa = $151;$$lcssa66 = $152;
						break;
					}
					$105 = (($102) + ($i1$0<<2)|0);
					$106 = HEAP32[$105>>2]|0;
					$107 = (($i1$0) + 1)|0;
					$108 = (($102) + ($107<<2)|0);
					$109 = HEAP32[$108>>2]|0;
					$110 = ($106|0)>($109|0);
					if ($110) {
						label = 37;
						break;
					} else {
						$151 = $102;$152 = $103;$i1$0 = $107;
					}
				}
				if ((label|0) == 37) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				$111 = HEAP32[$3>>2]|0;
				$112 = ($111|0)<(0);
				if ($112) {
					__ZN7Profile10initializeEv($this);
					$$pre36 = HEAP32[$8>>2]|0;
					$$pre37 = HEAP32[$7>>2]|0;
					$113 = $$pre37;
					$115 = $$pre37;$116 = $$pre36;$123 = $113;
				} else {
					$115 = $$lcssa66;$116 = $97;$123 = $$lcssa;
				}
				$114 = (($116) - ($115))|0;
				$117 = $114 >> 2;
				$118 = ($117*90)|0;
				$119 = (($118) + -90)|0;
				$120 = (($119|0) / 100)&-1;
				$i2$0 = $120;
				while(1) {
					$121 = ($i2$0|0)>($91|0);
					if (!($121)) {
						break;
					}
					$122 = (($123) + ($i2$0<<2)|0);
					$124 = HEAP32[$122>>2]|0;
					$125 = (($i2$0) + -1)|0;
					$126 = (($123) + ($125<<2)|0);
					$127 = HEAP32[$126>>2]|0;
					$128 = ($124|0)>($127|0);
					if ($128) {
						label = 37;
						break;
					} else {
						$i2$0 = $125;
					}
				}
				if ((label|0) == 37) {
					$$4$in = HEAP8[$0>>0]|0;
					$$4 = ($$4$in<<24>>24)!=(0);
					return ($$4|0);
				}
				HEAP8[$0>>0] = 1;
				$$4$in = HEAP8[$0>>0]|0;
				$$4 = ($$4$in<<24>>24)!=(0);
				return ($$4|0);
			}
			function __ZN7Profile8isconvexEv($this) {
				$this = $this|0;
				var $$ = 0, $$0$i = 0, $$0$i13 = 0, $$0$i13$in = 0, $$8 = 0, $$8$in = 0, $$in$i = 0, $$in$i12 = 0, $$l$0 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lmin$0 = 0, $$min$0 = 0, $$pr = 0, $$pr31 = 0, $$pre = 0, $$pre59 = 0, $$pre60 = 0;
				var $$pre61 = 0, $$pre62 = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre66 = 0, $$pre67 = 0, $$pre68 = 0, $$pre69 = 0, $$pre70 = 0, $$pre71 = 0, $$pre72 = 0, $$pre73 = 0, $$pre74 = 0, $$pre75 = 0, $$pre76 = 0, $$pre77 = 0, $$pre78 = 0, $$pre79 = 0, $0 = 0;
				var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
				var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
				var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
				var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
				var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
				var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
				var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
				var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa$i = 0, $a$0$lcssa$i14 = 0, $a$02$i = 0, $a$02$i16 = 0, $dmax$0$ph51 = 0;
				var $exitcond = 0, $i$0 = 0, $i$0$min_begin$0 = 0, $i$03$i = 0, $i$03$i$in = 0, $i$03$i15 = 0, $i1$04753$in = 0, $i1$049 = 0, $i1$049$in = 0, $i1$049$lcssa = 0, $ispos = 0, $l$0 = 0, $l$0$lcssa = 0, $lmin$0 = 0, $lmin$0$lcssa = 0, $min$0 = 0, $min$1 = 0, $min_begin$0 = 0, $min_begin$0$lcssa = 0, $min_begin$1 = 0;
				var $min_end$0 = 0, $min_end$0$lcssa = 0, $min_end$1 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $or$cond8 = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1 = 0, $rmax$0 = 0, $rmax$0$lcssa = 0, $rmax$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 25|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(36);
				$13 = $10;
				if ($12) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$14 = HEAP32[$3>>2]|0;
				$15 = ($14|0)<(5);
				if ($15) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$16 = (0 - ($14))|0;
				$17 = $14;$227 = $13;$228 = $10;$229 = $9;$i$0 = 1;$l$0 = 0;$lmin$0 = $14;$min$0 = $14;$min_begin$0 = 0;$min_end$0 = 0;$r$0 = 0;$rmax$0 = $16;
				while(1) {
					$18 = ($17|0)<(0);
					if ($18) {
						__ZN7Profile10initializeEv($this);
						$$pre59 = HEAP32[$8>>2]|0;
						$$pre60 = HEAP32[$7>>2]|0;
						$19 = $$pre60;
						$21 = $$pre60;$22 = $$pre59;$27 = $19;
					} else {
						$21 = $228;$22 = $229;$27 = $227;
					}
					$20 = (($22) - ($21))|0;
					$23 = $20 >> 2;
					$24 = ($i$0|0)<($23|0);
					if (!($24)) {
						$$lcssa118 = $27;$$lcssa119 = $21;$$lcssa120 = $22;$l$0$lcssa = $l$0;$lmin$0$lcssa = $lmin$0;$min_begin$0$lcssa = $min_begin$0;$min_end$0$lcssa = $min_end$0;$r$0$lcssa = $r$0;$rmax$0$lcssa = $rmax$0;
						break;
					}
					$26 = (($27) + ($i$0<<2)|0);
					$28 = HEAP32[$26>>2]|0;
					$29 = (($i$0) + -1)|0;
					$30 = (($27) + ($29<<2)|0);
					$31 = HEAP32[$30>>2]|0;
					$32 = (($28) - ($31))|0;
					$33 = ($32|0)<($lmin$0|0);
					$$lmin$0 = $33 ? $32 : $lmin$0;
					$$l$0 = $33 ? $29 : $l$0;
					$34 = ($32|0)<($rmax$0|0);
					$rmax$1 = $34 ? $rmax$0 : $32;
					$r$1 = $34 ? $r$0 : $i$0;
					$35 = ($28|0)>($min$0|0);
					$36 = $27;
					if ($35) {
						$min$1 = $min$0;$min_begin$1 = $min_begin$0;$min_end$1 = $min_end$0;
					} else {
						$37 = ($28|0)<($min$0|0);
						$i$0$min_begin$0 = $37 ? $i$0 : $min_begin$0;
						$$min$0 = $37 ? $28 : $min$0;
						$min$1 = $$min$0;$min_begin$1 = $i$0$min_begin$0;$min_end$1 = $i$0;
					}
					$38 = (($i$0) + 1)|0;
					$$pre = HEAP32[$3>>2]|0;
					$17 = $$pre;$227 = $27;$228 = $36;$229 = $22;$i$0 = $38;$l$0 = $$l$0;$lmin$0 = $$lmin$0;$min$0 = $min$1;$min_begin$0 = $min_begin$1;$min_end$0 = $min_end$1;$r$0 = $r$1;$rmax$0 = $rmax$1;
				}
				$25 = ($l$0$lcssa|0)<($r$0$lcssa|0);
				if (!($25)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$39 = HEAP32[$3>>2]|0;
				$40 = ($39|0)<(0);
				if ($40) {
					__ZN7Profile10initializeEv($this);
					$$pre61 = HEAP32[$8>>2]|0;
					$$pre62 = HEAP32[$7>>2]|0;
					$41 = $$pre62;
					$230 = $41;$43 = $$pre62;$44 = $$pre61;
				} else {
					$230 = $$lcssa118;$43 = $$lcssa119;$44 = $$lcssa120;
				}
				$42 = (($44) - ($43))|0;
				$45 = $42 >> 2;
				$46 = ($45*25)|0;
				$47 = (($46) + -25)|0;
				$48 = (($47|0) / 100)&-1;
				$49 = ($l$0$lcssa|0)<($48|0);
				if (!($49)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$50 = HEAP32[$3>>2]|0;
				$51 = ($50|0)<(0);
				if ($51) {
					__ZN7Profile10initializeEv($this);
					$$pre63 = HEAP32[$8>>2]|0;
					$$pre64 = HEAP32[$7>>2]|0;
					$52 = $$pre64;
					$54 = $$pre64;$55 = $$pre63;$64 = $52;
				} else {
					$54 = $43;$55 = $44;$64 = $230;
				}
				$53 = (($55) - ($54))|0;
				$56 = $53 >> 2;
				$57 = ($56*75)|0;
				$58 = (($57) + -75)|0;
				$59 = (($58|0) / 100)&-1;
				$60 = ($r$0$lcssa|0)>($59|0);
				if (!($60)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$61 = ($lmin$0$lcssa|0)>(-1);
				$62 = ($rmax$0$lcssa|0)<(1);
				$or$cond = $61 | $62;
				if ($or$cond) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$63 = (($64) + ($l$0$lcssa<<2)|0);
				$65 = HEAP32[$63>>2]|0;
				$66 = ($65|0)<(2);
				if ($66) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$67 = (($64) + ($r$0$lcssa<<2)|0);
				$68 = HEAP32[$67>>2]|0;
				$69 = ($68|0)<(2);
				if ($69) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$70 = (($68) + ($65))|0;
				$71 = ($70*3)|0;
				$72 = HEAP32[$3>>2]|0;
				$73 = ($72|0)<(0);
				if ($73) {
					__ZN7Profile10initializeEv($this);
					$$pr31 = HEAP32[$3>>2]|0;
					$$pre65 = HEAP32[$8>>2]|0;
					$$pre66 = HEAP32[$7>>2]|0;
					$74 = $$pre66;
					$231 = $74;$76 = $$pre66;$77 = $$pre65;$79 = $$pr31;
				} else {
					$231 = $64;$76 = $54;$77 = $55;$79 = $72;
				}
				$75 = (($77) - ($76))|0;
				$78 = $75 >> 2;
				$80 = ($79|0)<($78|0);
				$81 = $80 ? $79 : $78;
				$82 = ($71|0)>($81|0);
				if (!($82)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$83 = (($min_end$0$lcssa) - ($min_begin$0$lcssa))|0;
				$84 = (($83) + 1)|0;
				$85 = ($84*3)|0;
				$86 = ($79|0)<(0);
				if ($86) {
					__ZN7Profile10initializeEv($this);
					$$pre67 = HEAP32[$8>>2]|0;
					$$pre68 = HEAP32[$7>>2]|0;
					$87 = $$pre68;
					$232 = $87;$89 = $$pre68;$90 = $$pre67;
				} else {
					$232 = $231;$89 = $76;$90 = $77;
				}
				$88 = (($90) - ($89))|0;
				$91 = $88 >> 1;
				$92 = ($85|0)<=($91|0);
				$93 = $l$0$lcssa << 1;
				$94 = ($93|0)<($min_begin$0$lcssa|0);
				$or$cond42 = $94 & $92;
				if (!($or$cond42)) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$95 = $r$0$lcssa << 1;
				$96 = HEAP32[$3>>2]|0;
				$97 = ($96|0)<(0);
				if ($97) {
					__ZN7Profile10initializeEv($this);
					$$pre69 = HEAP32[$8>>2]|0;
					$$pre70 = HEAP32[$7>>2]|0;
					$98 = $$pre70;
					$100 = $$pre70;$101 = $$pre69;$233 = $98;
				} else {
					$100 = $89;$101 = $90;$233 = $232;
				}
				$99 = (($101) - ($100))|0;
				$102 = $99 >> 2;
				$103 = (($102) + ($min_end$0$lcssa))|0;
				$104 = ($95|0)<($103|0);
				if ($104) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$105 = HEAP32[$3>>2]|0;
				$106 = ($105|0)<(0);
				if ($106) {
					__ZN7Profile10initializeEv($this);
					$$pre71 = HEAP32[$8>>2]|0;
					$$pre72 = HEAP32[$7>>2]|0;
					$107 = $$pre72;
					$109 = $$pre72;$110 = $$pre71;$234 = $107;
				} else {
					$109 = $100;$110 = $101;$234 = $233;
				}
				$108 = (($110) - ($109))|0;
				$111 = $108 >> 2;
				$112 = ($111*10)|0;
				$113 = (($112) + -10)|0;
				$114 = (($113|0) / 100)&-1;
				$115 = ($min_begin$0$lcssa|0)<($114|0);
				if ($115) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$116 = HEAP32[$3>>2]|0;
				$117 = ($116|0)<(0);
				if ($117) {
					__ZN7Profile10initializeEv($this);
					$$pre73 = HEAP32[$8>>2]|0;
					$$pre74 = HEAP32[$7>>2]|0;
					$118 = $$pre74;
					$120 = $$pre74;$121 = $$pre73;$235 = $118;
				} else {
					$120 = $109;$121 = $110;$235 = $234;
				}
				$119 = (($121) - ($120))|0;
				$122 = $119 >> 2;
				$123 = ($122*90)|0;
				$124 = (($123) + -90)|0;
				$125 = (($124|0) / 100)&-1;
				$126 = ($min_end$0$lcssa|0)>($125|0);
				if ($126) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				$127 = HEAP32[$3>>2]|0;
				$128 = ($127|0)<(0);
				if ($128) {
					__ZN7Profile10initializeEv($this);
					$$pre75 = HEAP32[$8>>2]|0;
					$$pre76 = HEAP32[$7>>2]|0;
					$$pre77 = HEAP32[$3>>2]|0;
					$129 = $$pre76;
					$131 = $$pre76;$132 = $$pre75;$134 = $$pre77;$144 = $129;
				} else {
					$131 = $120;$132 = $121;$134 = $127;$144 = $235;
				}
				$130 = (($132) - ($131))|0;
				$133 = $130 >> 2;
				$135 = ($134|0)<($133|0);
				$136 = $135 ? $134 : $133;
				$137 = (($136|0) / 30)&-1;
				$138 = (($137) + 1)|0;
				$139 = (0 - ($134))|0;
				$dmax$0$ph51 = $139;$i1$04753$in = $l$0$lcssa;
				L81: while(1) {
					$140 = (($dmax$0$ph51) - ($138))|0;
					$i1$049$in = $i1$04753$in;
					L83: while(1) {
						$i1$049 = (($i1$049$in) + 1)|0;
						$141 = ($i1$049|0)>=($min_begin$0$lcssa|0);
						$142 = ($i1$049$in|0)<($min_end$0$lcssa|0);
						$or$cond8 = $142 & $141;
						$143 = (($144) + ($i1$049<<2)|0);
						$145 = HEAP32[$143>>2]|0;
						do {
							if ($or$cond8) {
								$146 = ($145|0)>($138|0);
								if ($146) {
									label = 77;
									break L81;
								}
							} else {
								$148 = (($144) + ($i1$049$in<<2)|0);
								$149 = HEAP32[$148>>2]|0;
								$150 = (($145) - ($149))|0;
								$151 = ($145|0)==($149|0);
								if ($151) {
									break;
								}
								$152 = ($150|0)>($dmax$0$ph51|0);
								if ($152) {
									$$lcssa117 = $150;$i1$049$lcssa = $i1$049;
									break L83;
								}
								$157 = ($150|0)<($140|0);
								if ($157) {
									label = 77;
									break L81;
								}
							}
						} while(0);
						$147 = ($i1$049|0)<($r$0$lcssa|0);
						if ($147) {
							$i1$049$in = $i1$049;
						} else {
							label = 50;
							break L81;
						}
					}
					$ispos = ($$lcssa117|0)>(-1);
					$neg = (0 - ($$lcssa117))|0;
					$153 = $ispos ? $$lcssa117 : $neg;
					$154 = ($153|0)>($138|0);
					$155 = (($dmax$0$ph51) + 1)|0;
					$$ = $154 ? $$lcssa117 : $155;
					$156 = ($i1$049$lcssa|0)<($r$0$lcssa|0);
					if ($156) {
						$dmax$0$ph51 = $$;$i1$04753$in = $i1$049$lcssa;
					} else {
						label = 50;
						break;
					}
				}
				if ((label|0) == 50) {
					$158 = $84 << 1;
					$159 = ($134|0)<(0);
					if ($159) {
						__ZN7Profile10initializeEv($this);
						$$pre78 = HEAP32[$8>>2]|0;
						$$pre79 = HEAP32[$7>>2]|0;
						$160 = $$pre79;
						$162 = $$pre79;$163 = $$pre78;$169 = $160;
					} else {
						$162 = $131;$163 = $132;$169 = $144;
					}
					$161 = (($163) - ($162))|0;
					$164 = $161 >> 2;
					$165 = ($158|0)<($164|0);
					do {
						if ($165) {
							$166 = (1 - ($l$0$lcssa))|0;
							$167 = (($166) + ($min_begin$0$lcssa))|0;
							$168 = (($169) + ($l$0$lcssa<<2)|0);
							$170 = HEAP32[$168>>2]|0;
							$171 = Math_imul($170, $167)|0;
							$172 = (($171|0) / 2)&-1;
							$173 = (($r$0$lcssa) + 1)|0;
							$174 = (($173) - ($min_end$0$lcssa))|0;
							$175 = (($169) + ($r$0$lcssa<<2)|0);
							$176 = HEAP32[$175>>2]|0;
							$177 = Math_imul($176, $174)|0;
							$178 = (($177|0) / 2)&-1;
							$179 = (($178) + ($172))|0;
							$180 = HEAP32[$3>>2]|0;
							$181 = ($180|0)<(0);
							if ($181) {
								__ZN7Profile10initializeEv($this);
							}
							$182 = ($min_begin$0$lcssa|0)<(1);
							if ($182) {
								label = 59;
							} else {
								$183 = HEAP32[$3>>2]|0;
								$184 = ($183|0)<(0);
								if ($184) {
									__ZN7Profile10initializeEv($this);
								}
								$185 = HEAP32[$8>>2]|0;
								$186 = HEAP32[$7>>2]|0;
								$187 = (($185) - ($186))|0;
								$188 = $187 >> 2;
								$189 = ($188|0)<($min_begin$0$lcssa|0);
								if ($189) {
									label = 59;
								} else {
									$$0$i13$in = $min_begin$0$lcssa;$$in$i12 = $186;
								}
							}
							if ((label|0) == 59) {
								$190 = HEAP32[$3>>2]|0;
								$191 = ($190|0)<(0);
								if ($191) {
									__ZN7Profile10initializeEv($this);
								}
								$192 = HEAP32[$8>>2]|0;
								$193 = HEAP32[$7>>2]|0;
								$194 = (($192) - ($193))|0;
								$195 = $194 >> 2;
								$$0$i13$in = $195;$$in$i12 = $193;
							}
							$$0$i13 = (($$0$i13$in) + -1)|0;
							$196 = $$in$i12;
							$197 = ($$0$i13$in|0)>($l$0$lcssa|0);
							if ($197) {
								$a$02$i16 = 0;$i$03$i15 = $l$0$lcssa;
								while(1) {
									$198 = (($196) + ($i$03$i15<<2)|0);
									$199 = HEAP32[$198>>2]|0;
									$200 = (($199) + ($a$02$i16))|0;
									$201 = (($i$03$i15) + 1)|0;
									$202 = ($i$03$i15|0)<($$0$i13|0);
									if ($202) {
										$a$02$i16 = $200;$i$03$i15 = $201;
									} else {
										$a$0$lcssa$i14 = $200;
										break;
									}
								}
							} else {
								$a$0$lcssa$i14 = 0;
							}
							$203 = HEAP32[$3>>2]|0;
							$204 = ($203|0)<(0);
							if ($204) {
								__ZN7Profile10initializeEv($this);
							}
							$205 = ($r$0$lcssa|0)<(0);
							if ($205) {
								label = 70;
							} else {
								$206 = HEAP32[$3>>2]|0;
								$207 = ($206|0)<(0);
								if ($207) {
									__ZN7Profile10initializeEv($this);
								}
								$208 = HEAP32[$8>>2]|0;
								$209 = HEAP32[$7>>2]|0;
								$210 = (($208) - ($209))|0;
								$211 = $210 >> 2;
								$212 = ($211|0)>($r$0$lcssa|0);
								if ($212) {
									$$0$i = $r$0$lcssa;$$in$i = $209;
								} else {
									label = 70;
								}
							}
							if ((label|0) == 70) {
								$213 = HEAP32[$3>>2]|0;
								$214 = ($213|0)<(0);
								if ($214) {
									__ZN7Profile10initializeEv($this);
								}
								$215 = HEAP32[$8>>2]|0;
								$216 = HEAP32[$7>>2]|0;
								$217 = (($215) - ($216))|0;
								$218 = $217 >> 2;
								$219 = (($218) + -1)|0;
								$$0$i = $219;$$in$i = $216;
							}
							$220 = $$in$i;
							$221 = ($$0$i|0)>($min_end$0$lcssa|0);
							if ($221) {
								$a$02$i = 0;$i$03$i$in = $min_end$0$lcssa;
								while(1) {
									$i$03$i = (($i$03$i$in) + 1)|0;
									$222 = (($220) + ($i$03$i<<2)|0);
									$223 = HEAP32[$222>>2]|0;
									$224 = (($223) + ($a$02$i))|0;
									$exitcond = ($i$03$i|0)==($$0$i|0);
									if ($exitcond) {
										$a$0$lcssa$i = $224;
										break;
									} else {
										$a$02$i = $224;$i$03$i$in = $i$03$i;
									}
								}
							} else {
								$a$0$lcssa$i = 0;
							}
							$225 = (($a$0$lcssa$i) + ($a$0$lcssa$i14))|0;
							$226 = ($225|0)<($179|0);
							if ($226) {
								break;
							}
							$$8$in = HEAP8[$0>>0]|0;
							$$8 = ($$8$in<<24>>24)!=(0);
							return ($$8|0);
						}
					} while(0);
					HEAP8[$0>>0] = 1;
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				else if ((label|0) == 77) {
					$$8$in = HEAP8[$0>>0]|0;
					$$8 = ($$8$in<<24>>24)!=(0);
					return ($$8|0);
				}
				return (0)|0;
			}
			function __ZN7Profile6isflatEv($this) {
				$this = $this|0;
				var $$0 = 0, $$0$in = 0, $$0$in$pre = 0, $$cast = 0, $$in = 0, $$lcssa = 0, $$lcssa13 = 0, $$mx$0 = 0, $$pr = 0, $$pre = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $mn$0 = 0, $mn$0$lcssa = 0, $mn$1 = 0, $mx$0 = 0, $mx$0$lcssa = 0, $mx$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 26|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$0$in = $1;
					$$0 = ($$0$in<<24>>24)!=(0);
					return ($$0|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(40);
				if ($12) {
					$$0$in$pre = HEAP8[$0>>0]|0;
					$$0$in = $$0$in$pre;
					$$0 = ($$0$in<<24>>24)!=(0);
					return ($$0|0);
				}
				$13 = HEAP32[$3>>2]|0;
				$14 = ($13|0)<(0);
				if ($14) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre4 = HEAP32[$7>>2]|0;
					$$in = $$pre4;$17 = $$pre;
				} else {
					$$in = $10;$17 = $9;
				}
				$15 = $$in;
				$16 = (($17) - ($$in))|0;
				$18 = $16 >> 2;
				$19 = (($18|0) / 2)&-1;
				$$cast = $$in;
				$20 = (($$cast) + ($19<<2)|0);
				$21 = HEAP32[$20>>2]|0;
				$49 = $15;$50 = $$in;$51 = $17;$i$0 = 1;$mn$0 = $21;$mx$0 = $21;
				while(1) {
					$22 = HEAP32[$3>>2]|0;
					$23 = ($22|0)<(0);
					if ($23) {
						__ZN7Profile10initializeEv($this);
						$$pre5 = HEAP32[$8>>2]|0;
						$$pre6 = HEAP32[$7>>2]|0;
						$24 = $$pre6;
						$26 = $$pre6;$27 = $$pre5;$43 = $24;
					} else {
						$26 = $50;$27 = $51;$43 = $49;
					}
					$25 = (($27) - ($26))|0;
					$28 = $25 >> 2;
					$29 = (($28) + -1)|0;
					$30 = ($i$0|0)<($29|0);
					if (!($30)) {
						$$lcssa = $26;$$lcssa13 = $27;$mn$0$lcssa = $mn$0;$mx$0$lcssa = $mx$0;
						break;
					}
					$42 = (($43) + ($i$0<<2)|0);
					$44 = HEAP32[$42>>2]|0;
					$45 = ($44|0)<($mn$0|0);
					$46 = ($44|0)>($mx$0|0);
					$$mx$0 = $46 ? $44 : $mx$0;
					$mn$1 = $45 ? $44 : $mn$0;
					$mx$1 = $45 ? $mx$0 : $$mx$0;
					$47 = (($i$0) + 1)|0;
					$48 = $43;
					$49 = $43;$50 = $48;$51 = $27;$i$0 = $47;$mn$0 = $mn$1;$mx$0 = $mx$1;
				}
				$31 = (($mx$0$lcssa) - ($mn$0$lcssa))|0;
				$32 = HEAP32[$3>>2]|0;
				$33 = ($32|0)<(0);
				if ($33) {
					__ZN7Profile10initializeEv($this);
					$$pre7 = HEAP32[$8>>2]|0;
					$$pre8 = HEAP32[$7>>2]|0;
					$35 = $$pre8;$36 = $$pre7;
				} else {
					$35 = $$lcssa;$36 = $$lcssa13;
				}
				$34 = (($36) - ($35))|0;
				$37 = $34 >> 2;
				$38 = (($37|0) / 30)&-1;
				$39 = (($38) + 1)|0;
				$40 = ($31|0)<=($39|0);
				$41 = $40&1;
				HEAP8[$0>>0] = $41;
				$$0$in = $41;
				$$0 = ($$0$in<<24>>24)!=(0);
				return ($$0|0);
			}
			function __ZN7Profile7isflatsEv($this) {
				$this = $this|0;
				var $$1 = 0, $$1$in = 0, $$in = 0, $$in58 = 0, $$lcssa = 0, $$lcssa77 = 0, $$lcssa80 = 0, $$lcssa83 = 0, $$mx$1 = 0, $$mx$3 = 0, $$mx$5 = 0, $$pr = 0, $$pre = 0, $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $$pre43 = 0, $$pre44 = 0;
				var $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $$pre48 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
				var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
				var $96 = 0, $i$029 = 0, $i1$026 = 0, $i2$0 = 0, $i2$013 = 0, $i2$01319 = 0, $i2$01322 = 0, $i2$015 = 0, $i2$015$lcssa = 0, $i3$0 = 0, $mn$1$ph$lcssa = 0, $mn$1$ph20 = 0, $mx$1$lcssa = 0, $mx$125 = 0, $mx$3$lcssa = 0, $mx$3$ph21 = 0, $mx$314 = 0, $mx$314$lcssa = 0, $mx$5 = 0, $mx$5$lcssa = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 27|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$1$in = HEAP8[$0>>0]|0;
					$$1 = ($$1$in<<24>>24)!=(0);
					return ($$1|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(48);
				if ($12) {
					$$1$in = HEAP8[$0>>0]|0;
					$$1 = ($$1$in<<24>>24)!=(0);
					return ($$1|0);
				}
				$13 = HEAP32[$3>>2]|0;
				$14 = ($13|0)<(0);
				if ($14) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$8>>2]|0;
					$$pre38 = HEAP32[$7>>2]|0;
					$$pre39 = HEAP32[$3>>2]|0;
					$$in = $$pre38;$16 = $$pre;$23 = $$pre39;
				} else {
					$$in = $10;$16 = $9;$23 = $13;
				}
				$15 = (($16) - ($$in))|0;
				$17 = $15 >> 2;
				$18 = ($17*15)|0;
				$19 = (($18) + -15)|0;
				$20 = (($19|0) / 100)&-1;
				$21 = ($20|0)<(3);
				$22 = $21 ? 3 : $20;
				$24 = ($23|0)<(0);
				if ($24) {
					__ZN7Profile10initializeEv($this);
					$$pre40 = HEAP32[$8>>2]|0;
					$$pre41 = HEAP32[$7>>2]|0;
					$$pre42 = HEAP32[$3>>2]|0;
					$30 = (($$pre40) - ($$pre41))|0;
					$31 = $30 >> 2;
					$32 = ($31*85)|0;
					$33 = (($32) + -85)|0;
					$34 = (($33|0) / 100)&-1;
					$35 = ($$pre42|0)<(0);
					if ($35) {
						__ZN7Profile10initializeEv($this);
						$$pre43 = HEAP32[$8>>2]|0;
						$$pre44 = HEAP32[$7>>2]|0;
						$$in58 = $$pre44;$38 = $$pre43;$42 = $34;
					} else {
						$$in58 = $$pre41;$38 = $$pre40;$42 = $34;
					}
				} else {
					$25 = (($16) - ($$in))|0;
					$26 = $25 >> 2;
					$27 = ($26*85)|0;
					$28 = (($27) + -85)|0;
					$29 = (($28|0) / 100)&-1;
					$$in58 = $$in;$38 = $16;$42 = $29;
				}
				$36 = $$in58;
				$37 = (($38) - ($$in58))|0;
				$39 = $37 >> 2;
				$40 = (($39) + -4)|0;
				$41 = ($40|0)<($42|0);
				$43 = $41 ? $40 : $42;
				$44 = (($22) + 2)|0;
				$45 = ($44|0)<($43|0);
				if ($45) {
					$i$029 = $44;
				} else {
					$$1$in = HEAP8[$0>>0]|0;
					$$1 = ($$1$in<<24>>24)!=(0);
					return ($$1|0);
				}
				while(1) {
					$48 = (($i$029) + -1)|0;
					$49 = (($36) + ($48<<2)|0);
					$50 = HEAP32[$49>>2]|0;
					$51 = (($36) + ($i$029<<2)|0);
					$52 = HEAP32[$51>>2]|0;
					$53 = ($50|0)==($52|0);
					$46 = (($i$029) + 1)|0;
					if ($53) {
						$$lcssa83 = $50;
						break;
					}
					$47 = ($46|0)<($43|0);
					if ($47) {
						$i$029 = $46;
					} else {
						label = 31;
						break;
					}
				}
				if ((label|0) == 31) {
					$$1$in = HEAP8[$0>>0]|0;
					$$1 = ($$1$in<<24>>24)!=(0);
					return ($$1|0);
				}
				$54 = ($$lcssa83|0)<(0);
				if ($54) {
					$$1$in = HEAP8[$0>>0]|0;
					$$1 = ($$1$in<<24>>24)!=(0);
					return ($$1|0);
				}
				$55 = ($22|0)<(1);
				if ($55) {
					$mx$1$lcssa = $$lcssa83;
				} else {
					$i1$026 = 1;$mx$125 = $$lcssa83;
					while(1) {
						$57 = (($36) + ($i1$026<<2)|0);
						$58 = HEAP32[$57>>2]|0;
						$59 = ($58|0)>($mx$125|0);
						$$mx$1 = $59 ? $58 : $mx$125;
						$60 = (($i1$026) + 1)|0;
						$61 = ($i1$026|0)<($22|0);
						if ($61) {
							$i1$026 = $60;$mx$125 = $$mx$1;
						} else {
							$mx$1$lcssa = $$mx$1;
							break;
						}
					}
				}
				$i2$01319 = (($22) + 1)|0;
				$56 = ($i2$01319|0)<($43|0);
				L34: do {
					if ($56) {
						$i2$01322 = $i2$01319;$mn$1$ph20 = $$lcssa83;$mx$3$ph21 = $mx$1$lcssa;
						while(1) {
							$i2$015 = $i2$01322;$mx$314 = $mx$3$ph21;
							while(1) {
								$62 = (($36) + ($i2$015<<2)|0);
								$63 = HEAP32[$62>>2]|0;
								$64 = ($63|0)<($mn$1$ph20|0);
								if ($64) {
									$$lcssa80 = $63;$i2$015$lcssa = $i2$015;$mx$314$lcssa = $mx$314;
									break;
								}
								$66 = ($63|0)>($mx$314|0);
								$$mx$3 = $66 ? $63 : $mx$314;
								$i2$0 = (($i2$015) + 1)|0;
								$67 = ($i2$0|0)<($43|0);
								if ($67) {
									$i2$015 = $i2$0;$mx$314 = $$mx$3;
								} else {
									$mn$1$ph$lcssa = $mn$1$ph20;$mx$3$lcssa = $$mx$3;
									break L34;
								}
							}
							$i2$013 = (($i2$015$lcssa) + 1)|0;
							$65 = ($i2$013|0)<($43|0);
							if ($65) {
								$i2$01322 = $i2$013;$mn$1$ph20 = $$lcssa80;$mx$3$ph21 = $mx$314$lcssa;
							} else {
								$mn$1$ph$lcssa = $$lcssa80;$mx$3$lcssa = $mx$314$lcssa;
								break;
							}
						}
					} else {
						$mn$1$ph$lcssa = $$lcssa83;$mx$3$lcssa = $mx$1$lcssa;
					}
				} while(0);
				$94 = $36;$95 = $$in58;$96 = $38;$i3$0 = $43;$mx$5 = $mx$3$lcssa;
				while(1) {
					$68 = HEAP32[$3>>2]|0;
					$69 = ($68|0)<(0);
					if ($69) {
						__ZN7Profile10initializeEv($this);
						$$pre45 = HEAP32[$8>>2]|0;
						$$pre46 = HEAP32[$7>>2]|0;
						$70 = $$pre46;
						$72 = $$pre46;$73 = $$pre45;$89 = $70;
					} else {
						$72 = $95;$73 = $96;$89 = $94;
					}
					$71 = (($73) - ($72))|0;
					$74 = $71 >> 2;
					$75 = (($74) + -1)|0;
					$76 = ($i3$0|0)<($75|0);
					if (!($76)) {
						$$lcssa = $72;$$lcssa77 = $73;$mx$5$lcssa = $mx$5;
						break;
					}
					$88 = (($89) + ($i3$0<<2)|0);
					$90 = HEAP32[$88>>2]|0;
					$91 = ($90|0)>($mx$5|0);
					$$mx$5 = $91 ? $90 : $mx$5;
					$92 = (($i3$0) + 1)|0;
					$93 = $89;
					$94 = $89;$95 = $93;$96 = $73;$i3$0 = $92;$mx$5 = $$mx$5;
				}
				$77 = (($mx$5$lcssa) - ($mn$1$ph$lcssa))|0;
				$78 = HEAP32[$3>>2]|0;
				$79 = ($78|0)<(0);
				if ($79) {
					__ZN7Profile10initializeEv($this);
					$$pre47 = HEAP32[$8>>2]|0;
					$$pre48 = HEAP32[$7>>2]|0;
					$81 = $$pre48;$82 = $$pre47;
				} else {
					$81 = $$lcssa;$82 = $$lcssa77;
				}
				$80 = (($82) - ($81))|0;
				$83 = $80 >> 2;
				$84 = (($83|0) / 30)&-1;
				$85 = (($84) + 1)|0;
				$86 = ($77|0)<=($85|0);
				$87 = $86&1;
				HEAP8[$0>>0] = $87;
				$$1$in = HEAP8[$0>>0]|0;
				$$1 = ($$1$in<<24>>24)!=(0);
				return ($$1|0);
			}
			function __ZN7Profile5ispitEv($this) {
				$this = $this|0;
				var $$9 = 0, $$9$in = 0, $$cast = 0, $$in = 0, $$lcssa = 0, $$lcssa206 = 0, $$lcssa208 = 0, $$lcssa210 = 0, $$lcssa212 = 0, $$lcssa214 = 0, $$lcssa216 = 0, $$lcssa218 = 0, $$lcssa219 = 0, $$lcssa220 = 0, $$lcssa221 = 0, $$lcssa222 = 0, $$lcssa223 = 0, $$lcssa224 = 0, $$lcssa225 = 0, $$lcssa226 = 0;
				var $$lcssa227 = 0, $$ph = 0, $$pr = 0, $$pr16 = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $$pre48 = 0, $$pre49 = 0, $$pre50 = 0, $$pre51 = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0;
				var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
				var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
				var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
				var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
				var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
				var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
				var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
				var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
				var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end$2 = 0, $i$0$i = 0, $i$035 = 0, $i1$0 = 0, $i1$0$lcssa204 = 0, $i1$1 = 0, $i1$1$in = 0, $i1$1$in$ph$lcssa = 0, $i1$1$in$ph$ph = 0, $i1$1$in$ph155 = 0, $i1$1$in$us = 0;
				var $i1$1$lcssa199 = 0, $i1$1$us = 0, $i1$2 = 0, $i1$2$in = 0, $or$cond = 0, $ref$0 = 0, $ref$2$ph = 0, $ref$3$ph$lcssa = 0, $ref$3$ph$ph = 0, $ref$3$ph156 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 28|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				L1: do {
					if ($2) {
						HEAP8[$0>>0] = 0;
						$3 = ((($this)) + 8|0);
						$4 = HEAP32[$3>>2]|0;
						$5 = ($4|0)<(0);
						if ($5) {
							__ZN7Profile10initializeEv($this);
							$$pr = HEAP32[$3>>2]|0;
							$6 = ($$pr|0)<(0);
							if ($6) {
								__ZN7Profile10initializeEv($this);
							}
						}
						$7 = ((($this)) + 36|0);
						$8 = ((($this)) + 40|0);
						$9 = HEAP32[$8>>2]|0;
						$10 = HEAP32[$7>>2]|0;
						$11 = (($9) - ($10))|0;
						$12 = ($11|0)<(20);
						if (!($12)) {
							$13 = HEAP32[$3>>2]|0;
							$14 = ($13|0)<(0);
							if ($14) {
								__ZN7Profile10initializeEv($this);
								$$pre = HEAP32[$8>>2]|0;
								$$pre48 = HEAP32[$7>>2]|0;
								$$pre49 = HEAP32[$3>>2]|0;
								$$in = $$pre48;$17 = $$pre;$19 = $$pre49;
							} else {
								$$in = $10;$17 = $9;$19 = $13;
							}
							$15 = $$in;
							$16 = (($17) - ($$in))|0;
							$18 = $16 >> 2;
							$20 = ($19|0)<($18|0);
							$21 = $20 ? $19 : $18;
							$22 = (($21|0) / 25)&-1;
							$23 = (($22) + 1)|0;
							$24 = ($21|0)<(-24);
							if ($24) {
								$137 = $15;$138 = $15;$139 = $15;$140 = $15;$141 = $$in;$142 = $17;$143 = $15;
							} else {
								$144 = $15;$145 = $15;$146 = $15;$147 = $15;$148 = $15;$149 = $$in;$150 = $17;$28 = $15;$i$035 = 0;
								while(1) {
									$27 = (($28) + ($i$035<<2)|0);
									$29 = HEAP32[$27>>2]|0;
									$30 = (($23) - ($i$035))|0;
									$31 = ($29|0)>($30|0);
									if (!($31)) {
										break L1;
									}
									$32 = HEAP32[$3>>2]|0;
									$33 = ($32|0)<(0);
									if ($33) {
										__ZN7Profile10initializeEv($this);
										$$pre50 = HEAP32[$8>>2]|0;
										$$pre51 = HEAP32[$7>>2]|0;
										$34 = $$pre51;
										$151 = $34;$152 = $34;$153 = $34;$154 = $34;$155 = $34;$36 = $$pre51;$37 = $$pre50;
									} else {
										$151 = $144;$152 = $145;$153 = $146;$154 = $147;$155 = $148;$36 = $149;$37 = $150;
									}
									$35 = (($37) - ($36))|0;
									$38 = $35 >> 2;
									$39 = $i$035 ^ -1;
									$40 = (($38) + ($39))|0;
									$$cast = $36;
									$41 = (($$cast) + ($40<<2)|0);
									$42 = HEAP32[$41>>2]|0;
									$43 = ($42|0)>($30|0);
									if (!($43)) {
										break L1;
									}
									$25 = (($i$035) + 1)|0;
									$26 = ($22|0)>($i$035|0);
									if ($26) {
										$144 = $151;$145 = $152;$146 = $153;$147 = $154;$148 = $155;$149 = $36;$150 = $37;$28 = $$cast;$i$035 = $25;
									} else {
										$137 = $151;$138 = $152;$139 = $153;$140 = $154;$141 = $36;$142 = $37;$143 = $155;
										break;
									}
								}
							}
							$44 = ((($this)) + 16|0);
							$45 = HEAP32[$44>>2]|0;
							$46 = ($45|0)<(0);
							if ($46) {
								$47 = HEAP32[$3>>2]|0;
								$48 = ($47|0)<(0);
								if ($48) {
									__ZN7Profile10initializeEv($this);
									$$pre52 = HEAP32[$7>>2]|0;
									$49 = $$pre52;
									$165 = $$pre52;$166 = $49;$167 = $$pre52;$168 = $$pre52;$169 = $$pre52;$51 = $$pre52;
								} else {
									$165 = $137;$166 = $141;$167 = $138;$168 = $139;$169 = $140;$51 = $143;
								}
								$50 = HEAP32[$51>>2]|0;
								HEAP32[$44>>2] = $50;
								$170 = $165;$171 = $166;$172 = $167;$173 = $168;$174 = $166;$175 = $166;$176 = $169;$177 = $166;$52 = $51;$i$0$i = 1;
								while(1) {
									$53 = $52;
									$54 = HEAP32[$3>>2]|0;
									$55 = ($54|0)<(0);
									if ($55) {
										__ZN7Profile10initializeEv($this);
										$$pre$i = HEAP32[$7>>2]|0;
										$56 = $$pre$i;
										$178 = $56;$179 = $$pre$i;$180 = $56;$181 = $56;$182 = $$pre$i;$183 = $$pre$i;$184 = $56;$185 = $$pre$i;$59 = $$pre$i;$63 = $56;
									} else {
										$178 = $170;$179 = $171;$180 = $172;$181 = $173;$182 = $174;$183 = $175;$184 = $176;$185 = $177;$59 = $53;$63 = $52;
									}
									$57 = HEAP32[$8>>2]|0;
									$58 = (($57) - ($59))|0;
									$60 = $58 >> 2;
									$61 = ($i$0$i|0)<($60|0);
									if (!($61)) {
										$$lcssa219 = $178;$$lcssa220 = $179;$$lcssa221 = $180;$$lcssa222 = $181;$$lcssa223 = $182;$$lcssa224 = $183;$$lcssa225 = $184;$$lcssa226 = $185;$$lcssa227 = $57;
										break;
									}
									$62 = (($63) + ($i$0$i<<2)|0);
									$64 = HEAP32[$62>>2]|0;
									$65 = HEAP32[$44>>2]|0;
									$66 = ($64|0)<($65|0);
									if ($66) {
										HEAP32[$44>>2] = $64;
									}
									$67 = (($i$0$i) + 1)|0;
									$170 = $178;$171 = $179;$172 = $180;$173 = $181;$174 = $182;$175 = $183;$176 = $184;$177 = $185;$52 = $63;$i$0$i = $67;
								}
								$$pre1$i = HEAP32[$44>>2]|0;
								$156 = $$lcssa219;$157 = $$lcssa220;$158 = $$lcssa221;$159 = $$lcssa222;$160 = $$lcssa223;$161 = $$lcssa224;$162 = $$lcssa225;$163 = $$lcssa226;$164 = $$lcssa227;$82 = $$pre1$i;
							} else {
								$156 = $137;$157 = $141;$158 = $138;$159 = $139;$160 = $141;$161 = $141;$162 = $140;$163 = $141;$164 = $142;$82 = $45;
							}
							$68 = HEAP32[$3>>2]|0;
							$69 = (($68|0) / 2)&-1;
							$186 = $156;$187 = $157;$188 = $158;$189 = $159;$190 = $160;$191 = $161;$192 = $162;$193 = $163;$194 = $164;$70 = $68;$i1$0 = 0;$ref$0 = $69;
							while(1) {
								$71 = ($70|0)<(0);
								if ($71) {
									__ZN7Profile10initializeEv($this);
									$$pre53 = HEAP32[$8>>2]|0;
									$$pre54 = HEAP32[$7>>2]|0;
									$72 = $$pre54;
									$195 = $72;$196 = $$pre54;$197 = $72;$198 = $72;$199 = $$pre54;$200 = $$pre54;$74 = $$pre54;$75 = $$pre53;$79 = $72;
								} else {
									$195 = $186;$196 = $187;$197 = $188;$198 = $189;$199 = $190;$200 = $191;$74 = $193;$75 = $194;$79 = $192;
								}
								$73 = (($75) - ($74))|0;
								$76 = $73 >> 2;
								$77 = ($i1$0|0)<($76|0);
								if (!($77)) {
									break L1;
								}
								$78 = (($79) + ($i1$0<<2)|0);
								$80 = HEAP32[$78>>2]|0;
								$81 = ($80|0)==($82|0);
								$83 = $79;
								if ($81) {
									$$lcssa206 = $195;$$lcssa208 = $196;$$lcssa210 = $197;$$lcssa212 = $198;$$lcssa214 = $199;$$lcssa216 = $200;$$lcssa218 = $75;$i1$0$lcssa204 = $i1$0;
									break;
								}
								$84 = ($80|0)<($ref$0|0);
								if ($84) {
									$ref$2$ph = $80;
								} else {
									$85 = (($ref$0) + ($23))|0;
									$86 = ($80|0)>($85|0);
									$87 = ($ref$0|0)<($69|0);
									$or$cond = $87 & $86;
									if ($or$cond) {
										break L1;
									} else {
										$ref$2$ph = $ref$0;
									}
								}
								$88 = (($i1$0) + 1)|0;
								$$pr16 = HEAP32[$3>>2]|0;
								$186 = $195;$187 = $196;$188 = $197;$189 = $198;$190 = $199;$191 = $200;$192 = $79;$193 = $83;$194 = $75;$70 = $$pr16;$i1$0 = $88;$ref$0 = $ref$2$ph;
							}
							$89 = ($i1$0$lcssa204|0)<(2);
							if (!($89)) {
								$90 = HEAP32[$3>>2]|0;
								$91 = ($90|0)<(0);
								if ($91) {
									__ZN7Profile10initializeEv($this);
									$$pre55 = HEAP32[$8>>2]|0;
									$$pre56 = HEAP32[$7>>2]|0;
									$92 = $$pre56;
									$201 = $92;$202 = $$pre56;$203 = $92;$204 = $92;$205 = $$pre56;$94 = $$pre56;$95 = $$pre55;
								} else {
									$201 = $$lcssa206;$202 = $$lcssa208;$203 = $$lcssa210;$204 = $$lcssa212;$205 = $$lcssa214;$94 = $$lcssa216;$95 = $$lcssa218;
								}
								$93 = (($95) - ($94))|0;
								$96 = $93 >> 2;
								$97 = (($96) + -3)|0;
								$98 = ($i1$0$lcssa204|0)>($97|0);
								if (!($98)) {
									$99 = HEAP32[$3>>2]|0;
									$100 = ($99|0)<(0);
									if ($100) {
										__ZN7Profile10initializeEv($this);
										$$pre57 = HEAP32[$8>>2]|0;
										$$pre58 = HEAP32[$7>>2]|0;
										$101 = $$pre58;
										$103 = $$pre58;$104 = $$pre57;$111 = $101;$206 = $101;$207 = $$pre58;$208 = $101;
									} else {
										$103 = $205;$104 = $95;$111 = $203;$206 = $201;$207 = $202;$208 = $204;
									}
									$102 = (($104) - ($103))|0;
									$105 = $102 >> 2;
									$$ph = $208;$i1$1$in$ph$ph = $105;$ref$3$ph$ph = $69;
									L55: while(1) {
										$106 = ($ref$3$ph$ph|0)<($69|0);
										if ($106) {
											$i1$1$in$ph$lcssa = $i1$1$in$ph$ph;$ref$3$ph$lcssa = $ref$3$ph$ph;
										} else {
											$i1$1$in$ph155 = $i1$1$in$ph$ph;$ref$3$ph156 = $ref$3$ph$ph;
											while(1) {
												$i1$1$in = $i1$1$in$ph155;
												while(1) {
													$i1$1 = (($i1$1$in) + -1)|0;
													$116 = ($i1$1$in|0)>($i1$0$lcssa204|0);
													if (!($116)) {
														$end$2 = 0;
														break L55;
													}
													$117 = (($$ph) + ($i1$1<<2)|0);
													$118 = HEAP32[$117>>2]|0;
													$119 = ($118|0)==($82|0);
													if ($119) {
														$end$2 = $i1$1;
														break L55;
													}
													$120 = ($118|0)<($ref$3$ph156|0);
													if ($120) {
														$$lcssa = $118;$i1$1$lcssa199 = $i1$1;
														break;
													} else {
														$i1$1$in = $i1$1;
													}
												}
												$107 = ($$lcssa|0)<($69|0);
												if ($107) {
													$i1$1$in$ph$lcssa = $i1$1$lcssa199;$ref$3$ph$lcssa = $$lcssa;
													break;
												} else {
													$i1$1$in$ph155 = $i1$1$lcssa199;$ref$3$ph156 = $$lcssa;
												}
											}
										}
										$108 = (($ref$3$ph$lcssa) + ($23))|0;
										$i1$1$in$us = $i1$1$in$ph$lcssa;
										while(1) {
											$i1$1$us = (($i1$1$in$us) + -1)|0;
											$109 = ($i1$1$in$us|0)>($i1$0$lcssa204|0);
											if (!($109)) {
												$end$2 = 0;
												break L55;
											}
											$110 = (($111) + ($i1$1$us<<2)|0);
											$112 = HEAP32[$110>>2]|0;
											$113 = ($112|0)==($82|0);
											if ($113) {
												$end$2 = $i1$1$us;
												break L55;
											}
											$114 = ($112|0)<($ref$3$ph$lcssa|0);
											if ($114) {
												$$ph = $111;$i1$1$in$ph$ph = $i1$1$us;$ref$3$ph$ph = $112;
												continue L55;
											}
											$115 = ($112|0)>($108|0);
											if ($115) {
												break L1;
											} else {
												$i1$1$in$us = $i1$1$us;
											}
										}
									}
									$121 = ($end$2|0)<($i1$0$lcssa204|0);
									if (!($121)) {
										$122 = HEAP32[$3>>2]|0;
										$123 = ($122|0)<(0);
										if ($123) {
											__ZN7Profile10initializeEv($this);
											$$pre59 = HEAP32[$8>>2]|0;
											$$pre60 = HEAP32[$7>>2]|0;
											$124 = $$pre60;
											$126 = $$pre60;$127 = $$pre59;$134 = $124;
										} else {
											$126 = $207;$127 = $104;$134 = $206;
										}
										$125 = (($127) - ($126))|0;
										$128 = $125 >> 2;
										$129 = (($128) + -3)|0;
										$130 = ($end$2|0)>($129|0);
										if (!($130)) {
											$131 = (($82) + ($23))|0;
											$i1$2$in = $i1$0$lcssa204;
											while(1) {
												$i1$2 = (($i1$2$in) + 1)|0;
												$132 = ($i1$2|0)<($end$2|0);
												if (!($132)) {
													break;
												}
												$133 = (($134) + ($i1$2<<2)|0);
												$135 = HEAP32[$133>>2]|0;
												$136 = ($135|0)>($131|0);
												if ($136) {
													break L1;
												} else {
													$i1$2$in = $i1$2;
												}
											}
											HEAP8[$0>>0] = 1;
										}
									}
								}
							}
						}
					}
				} while(0);
				$$9$in = HEAP8[$0>>0]|0;
				$$9 = ($$9$in<<24>>24)!=(0);
				return ($$9|0);
			}
			function __ZN7Profile6iscpitEi($this,$cpos) {
				$this = $this|0;
				$cpos = $cpos|0;
				var $$3 = 0, $$lcssa33 = 0, $$pr = 0, $$pr11 = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
				var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
				var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $cpos$off = 0, $i$016 = 0, $i1$0 = 0, $i1$0$in = 0, $imin$0 = 0;
				var $j$0 = 0, $j$0$in = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = ($8|0)<(20);
				$cpos$off = (($cpos) + -25)|0;
				$10 = ($cpos$off>>>0)>(50);
				$11 = $10 | $9;
				if ($11) {
					$$3 = 0;
					return ($$3|0);
				}
				$12 = HEAP32[$0>>2]|0;
				$13 = ($12|0)<(0);
				if ($13) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$5>>2]|0;
					$$pre19 = HEAP32[$4>>2]|0;
					$$pre20 = HEAP32[$0>>2]|0;
					$19 = (($$pre) - ($$pre19))|0;
					$20 = $19 >> 2;
					$21 = (($20) + -1)|0;
					$22 = Math_imul($21, $cpos)|0;
					$23 = (($22|0) / 100)&-1;
					$24 = ($$pre20|0)<(0);
					if ($24) {
						__ZN7Profile10initializeEv($this);
						$$pr11 = HEAP32[$0>>2]|0;
						$27 = HEAP32[$5>>2]|0;
						$28 = HEAP32[$4>>2]|0;
						$29 = (($27) - ($28))|0;
						$30 = $29 >> 2;
						$31 = (($30|0) / 4)&-1;
						$32 = ($$pr11|0)<(0);
						if ($32) {
							__ZN7Profile10initializeEv($this);
							$$pre21 = HEAP32[$5>>2]|0;
							$$pre22 = HEAP32[$4>>2]|0;
							$34 = $$pre22;$35 = $$pre21;$38 = $23;$42 = $31;
						} else {
							$34 = $28;$35 = $27;$38 = $23;$42 = $31;
						}
					} else {
						$26 = $20;$80 = $23;$81 = $$pre;$82 = $$pre19;
						label = 8;
					}
				} else {
					$14 = (($6) - ($7))|0;
					$15 = $14 >> 2;
					$16 = (($15) + -1)|0;
					$17 = Math_imul($16, $cpos)|0;
					$18 = (($17|0) / 100)&-1;
					$26 = $15;$80 = $18;$81 = $6;$82 = $7;
					label = 8;
				}
				if ((label|0) == 8) {
					$25 = (($26|0) / 4)&-1;
					$34 = $82;$35 = $81;$38 = $80;$42 = $25;
				}
				$33 = (($35) - ($34))|0;
				$36 = $33 >> 2;
				$37 = (($36) - ($38))|0;
				$39 = ($37|0)<($38|0);
				$40 = $39 ? $37 : $38;
				$41 = ($40|0)<($42|0);
				$43 = $41 ? $40 : $42;
				$44 = (__ZN7Profile4meanEv($this)|0);
				$45 = ($44|0)<(2);
				if ($45) {
					$55 = 2;
				} else {
					$46 = (__ZN7Profile4meanEv($this)|0);
					$55 = $46;
				}
				$47 = ($43|0)>(0);
				if (!($47)) {
					$$3 = 0;
					return ($$3|0);
				}
				$48 = HEAP32[$4>>2]|0;
				$i$016 = 0;
				while(1) {
					$51 = (($i$016) + ($38))|0;
					$52 = (($48) + ($51<<2)|0);
					$53 = HEAP32[$52>>2]|0;
					$54 = ($53|0)<($55|0);
					if ($54) {
						$imin$0 = $51;
						break;
					}
					$56 = (($38) - ($i$016))|0;
					$57 = (($56) + -1)|0;
					$58 = (($48) + ($57<<2)|0);
					$59 = HEAP32[$58>>2]|0;
					$60 = ($59|0)<($55|0);
					$49 = (($i$016) + 1)|0;
					if ($60) {
						$imin$0 = $57;
						break;
					}
					$50 = ($49|0)<($43|0);
					if ($50) {
						$i$016 = $49;
					} else {
						$$3 = 0;
						label = 26;
						break;
					}
				}
				if ((label|0) == 26) {
					return ($$3|0);
				}
				$61 = ($imin$0|0)<(0);
				if ($61) {
					$$3 = 0;
					return ($$3|0);
				} else {
					$62 = $48;$83 = $48;$i1$0$in = $imin$0;
				}
				while(1) {
					$63 = $62;
					$i1$0 = (($i1$0$in) + 1)|0;
					$64 = HEAP32[$0>>2]|0;
					$65 = ($64|0)<(0);
					if ($65) {
						__ZN7Profile10initializeEv($this);
						$$pre23 = HEAP32[$4>>2]|0;
						$66 = $$pre23;
						$69 = $$pre23;$73 = $66;$84 = $66;
					} else {
						$69 = $63;$73 = $62;$84 = $83;
					}
					$67 = HEAP32[$5>>2]|0;
					$68 = (($67) - ($69))|0;
					$70 = $68 >> 2;
					$71 = ($i1$0|0)<($70|0);
					if (!($71)) {
						$$3 = 0;
						label = 26;
						break;
					}
					$72 = (($73) + ($i1$0<<2)|0);
					$74 = HEAP32[$72>>2]|0;
					$75 = ($74|0)>($55|0);
					if ($75) {
						$$lcssa33 = $84;
						break;
					} else {
						$62 = $73;$83 = $84;$i1$0$in = $i1$0;
					}
				}
				if ((label|0) == 26) {
					return ($$3|0);
				}
				$j$0$in = $imin$0;
				while(1) {
					$j$0 = (($j$0$in) + -1)|0;
					$76 = ($j$0$in|0)>(0);
					if (!($76)) {
						$$3 = 0;
						label = 26;
						break;
					}
					$77 = (($$lcssa33) + ($j$0<<2)|0);
					$78 = HEAP32[$77>>2]|0;
					$79 = ($78|0)>($55|0);
					if ($79) {
						$$3 = 1;
						label = 26;
						break;
					} else {
						$j$0$in = $j$0;
					}
				}
				if ((label|0) == 26) {
					return ($$3|0);
				}
				return (0)|0;
			}
			function __ZN7Profile6istpitEv($this) {
				$this = $this|0;
				var $$0 = 0, $$lcssa = 0, $$lcssa12 = 0, $$pr = 0, $$pr4 = 0, $$pre = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
				var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$l$0 = 0, $l$0 = 0, $l$0$lcssa = 0, $l$1 = 0, $phitmp = 0, $r$0 = 0, $r$0$lcssa = 0, $r$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 29|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				do {
					if ($2) {
						$3 = ((($this)) + 8|0);
						$4 = HEAP32[$3>>2]|0;
						$5 = ($4|0)<(0);
						if ($5) {
							__ZN7Profile10initializeEv($this);
							$$pr = HEAP32[$3>>2]|0;
							$6 = $$pr;
						} else {
							$6 = $4;
						}
						$7 = ($6|0)<(5);
						if (!($7)) {
							$8 = ((($this)) + 36|0);
							$9 = ((($this)) + 40|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = ($12|0)<(20);
							if (!($13)) {
								$14 = (__ZN7Profile5ispitEv($this)|0);
								if ($14) {
									$15 = HEAP32[$3>>2]|0;
									$16 = ($15|0)<(0);
									if ($16) {
										__ZN7Profile10initializeEv($this);
										$$pre = HEAP32[$3>>2]|0;
										$21 = $$pre;
									} else {
										$21 = $15;
									}
									$17 = HEAP32[$9>>2]|0;
									$18 = HEAP32[$8>>2]|0;
									$19 = (($17) - ($18))|0;
									$20 = $19 >> 2;
									$22 = ($21|0)<($20|0);
									$23 = $22 ? $21 : $20;
									$24 = (($23|0) / 30)&-1;
									$25 = (($24) + 1)|0;
									$26 = $18;
									$27 = $21;$56 = $26;$57 = $18;$58 = $17;$i$0 = 0;$l$0 = -1;$r$0 = 0;
									while(1) {
										$28 = ($27|0)<(0);
										if ($28) {
											__ZN7Profile10initializeEv($this);
											$$pre5 = HEAP32[$9>>2]|0;
											$$pre6 = HEAP32[$8>>2]|0;
											$29 = $$pre6;
											$31 = $$pre6;$32 = $$pre5;$37 = $29;
										} else {
											$31 = $57;$32 = $58;$37 = $56;
										}
										$30 = (($32) - ($31))|0;
										$33 = $30 >> 2;
										$34 = ($i$0|0)<($33|0);
										if (!($34)) {
											$$lcssa = $31;$$lcssa12 = $32;$l$0$lcssa = $l$0;$r$0$lcssa = $r$0;
											break;
										}
										$36 = (($37) + ($i$0<<2)|0);
										$38 = HEAP32[$36>>2]|0;
										$39 = ($38|0)>($25|0);
										$40 = ($l$0|0)<(0);
										$i$0$l$0 = $40 ? $i$0 : $l$0;
										$l$1 = $39 ? $l$0 : $i$0$l$0;
										$r$1 = $39 ? $r$0 : $i$0;
										$41 = (($i$0) + 1)|0;
										$$pr4 = HEAP32[$3>>2]|0;
										$42 = $37;
										$27 = $$pr4;$56 = $37;$57 = $42;$58 = $32;$i$0 = $41;$l$0 = $l$1;$r$0 = $r$1;
									}
									$35 = ($l$0$lcssa|0)>(0);
									if ($35) {
										$43 = (($r$0$lcssa) - ($l$0$lcssa))|0;
										$44 = $43 << 2;
										$45 = (($44) + 4)|0;
										$46 = HEAP32[$3>>2]|0;
										$47 = ($46|0)<(0);
										if ($47) {
											__ZN7Profile10initializeEv($this);
											$$pre7 = HEAP32[$9>>2]|0;
											$$pre8 = HEAP32[$8>>2]|0;
											$49 = $$pre8;$50 = $$pre7;
										} else {
											$49 = $$lcssa;$50 = $$lcssa12;
										}
										$48 = (($50) - ($49))|0;
										$51 = $48 >> 2;
										$52 = ($45|0)<($51|0);
										$phitmp = $52&1;
										$53 = $phitmp;
									} else {
										$53 = 0;
									}
									HEAP8[$0>>0] = $53;
									$54 = $53;
									break;
								}
							}
						}
						HEAP8[$0>>0] = 0;
						$$0 = 0;
						return ($$0|0);
					} else {
						$54 = $1;
					}
				} while(0);
				$55 = ($54<<24>>24)!=(0);
				$$0 = $55;
				return ($$0|0);
			}
			function __ZN7Profile6isupitEv($this) {
				$this = $this|0;
				var $$3 = 0, $$3$in = 0, $$pr = 0, $$pre = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $i$0 = 0, $lcount$0 = 0, $lcount$0$lcssa = 0, $lcount$2$ph = 0, $lmean$0 = 0, $lmean$0$lcssa = 0, $lmean$2$ph = 0, $lmean$4 = 0, $phitmp = 0, $status$0 = 0, $status$0$lcssa = 0, $status$2$ph = 0, $ucount$0 = 0, $ucount$0$lcssa = 0, $ucount$2$ph = 0, $umean$0 = 0, $umean$0$lcssa = 0;
				var $umean$2$ph = 0, $umean$4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 30|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$3$in = HEAP8[$0>>0]|0;
					$$3 = ($$3$in<<24>>24)!=(0);
					return ($$3|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(20);
				if ($12) {
					$$3$in = HEAP8[$0>>0]|0;
					$$3 = ($$3$in<<24>>24)!=(0);
					return ($$3|0);
				}
				$13 = (__ZN7Profile4meanEv($this)|0);
				$14 = ($13|0)<(2);
				if ($14) {
					$15 = (__ZN7Profile5rangeEv($this)|0);
					$16 = ($15|0)>(2);
					if ($16) {
						$29 = 2;
					} else {
						label = 8;
					}
				} else {
					label = 8;
				}
				if ((label|0) == 8) {
					$17 = (__ZN7Profile4meanEv($this)|0);
					$29 = $17;
				}
				$i$0 = 0;$lcount$0 = 0;$lmean$0 = 0;$status$0 = 0;$ucount$0 = 0;$umean$0 = 0;
				L16: while(1) {
					$18 = HEAP32[$3>>2]|0;
					$19 = ($18|0)<(0);
					if ($19) {
						__ZN7Profile10initializeEv($this);
					}
					$20 = HEAP32[$8>>2]|0;
					$21 = HEAP32[$7>>2]|0;
					$22 = (($20) - ($21))|0;
					$23 = $22 >> 2;
					$24 = ($i$0|0)<($23|0);
					if (!($24)) {
						$lcount$0$lcssa = $lcount$0;$lmean$0$lcssa = $lmean$0;$status$0$lcssa = $status$0;$ucount$0$lcssa = $ucount$0;$umean$0$lcssa = $umean$0;
						label = 36;
						break;
					}
					$25 = $21;
					$26 = (($25) + ($i$0<<2)|0);
					$27 = HEAP32[$26>>2]|0;
					L22: do {
						switch ($status$0|0) {
							case 0:  {
								$28 = ($27|0)<($29|0);
								if (!($28)) {
									$50 = ($27|0)>($29|0);
									if (!($50)) {
										$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 0;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
										break L22;
									}
									$51 = (($ucount$0) + 1)|0;
									$52 = (($27) + ($umean$0))|0;
									$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 0;$ucount$2$ph = $51;$umean$2$ph = $52;
									break L22;
								}
								$30 = HEAP32[$3>>2]|0;
								$31 = ($30|0)<(0);
								if ($31) {
									__ZN7Profile10initializeEv($this);
									$$pre35 = HEAP32[$8>>2]|0;
									$$pre36 = HEAP32[$7>>2]|0;
									$33 = $$pre36;$34 = $$pre35;
								} else {
									$33 = $21;$34 = $20;
								}
								$32 = (($34) - ($33))|0;
								$35 = $32 >> 2;
								$36 = ($35*25)|0;
								$37 = (($36) + -25)|0;
								$38 = (($37|0) / 100)&-1;
								$39 = ($i$0|0)<($38|0);
								if ($39) {
									label = 43;
									break L16;
								}
								$40 = HEAP32[$3>>2]|0;
								$41 = ($40|0)<(0);
								if ($41) {
									__ZN7Profile10initializeEv($this);
									$$pre37 = HEAP32[$8>>2]|0;
									$$pre38 = HEAP32[$7>>2]|0;
									$43 = $$pre38;$44 = $$pre37;
								} else {
									$43 = $33;$44 = $34;
								}
								$42 = (($44) - ($43))|0;
								$45 = $42 >> 2;
								$46 = ($45*70)|0;
								$47 = (($46) + -70)|0;
								$48 = (($47|0) / 100)&-1;
								$49 = ($i$0|0)>($48|0);
								if ($49) {
									label = 43;
									break L16;
								} else {
									$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 1;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
								}
								break;
							}
							case 1:  {
								$53 = ($27|0)>($29|0);
								if (!($53)) {
									$74 = ($27|0)<($29|0);
									if (!($74)) {
										$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 1;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
										break L22;
									}
									$75 = (($lcount$0) + 1)|0;
									$76 = (($27) + ($lmean$0))|0;
									$lcount$2$ph = $75;$lmean$2$ph = $76;$status$2$ph = 1;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
									break L22;
								}
								$54 = HEAP32[$3>>2]|0;
								$55 = ($54|0)<(0);
								if ($55) {
									__ZN7Profile10initializeEv($this);
									$$pre = HEAP32[$8>>2]|0;
									$$pre32 = HEAP32[$7>>2]|0;
									$57 = $$pre32;$58 = $$pre;
								} else {
									$57 = $21;$58 = $20;
								}
								$56 = (($58) - ($57))|0;
								$59 = $56 >> 2;
								$60 = ($59*30)|0;
								$61 = (($60) + -30)|0;
								$62 = (($61|0) / 100)&-1;
								$63 = ($i$0|0)<($62|0);
								if ($63) {
									label = 43;
									break L16;
								}
								$64 = HEAP32[$3>>2]|0;
								$65 = ($64|0)<(0);
								if ($65) {
									__ZN7Profile10initializeEv($this);
									$$pre33 = HEAP32[$8>>2]|0;
									$$pre34 = HEAP32[$7>>2]|0;
									$67 = $$pre34;$68 = $$pre33;
								} else {
									$67 = $57;$68 = $58;
								}
								$66 = (($68) - ($67))|0;
								$69 = $66 >> 2;
								$70 = ($69*75)|0;
								$71 = (($70) + -75)|0;
								$72 = (($71|0) / 100)&-1;
								$73 = ($i$0|0)>($72|0);
								if ($73) {
									label = 43;
									break L16;
								} else {
									$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 2;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
								}
								break;
							}
							case 2:  {
								$77 = ($27|0)<($29|0);
								if ($77) {
									label = 43;
									break L16;
								}
								$78 = ($27|0)>($29|0);
								if ($78) {
									$79 = (($ucount$0) + 1)|0;
									$80 = (($27) + ($umean$0))|0;
									$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 2;$ucount$2$ph = $79;$umean$2$ph = $80;
								} else {
									$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = 2;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
								}
								break;
							}
							default: {
								$lcount$2$ph = $lcount$0;$lmean$2$ph = $lmean$0;$status$2$ph = $status$0;$ucount$2$ph = $ucount$0;$umean$2$ph = $umean$0;
							}
						}
					} while(0);
					$81 = (($i$0) + 1)|0;
					$i$0 = $81;$lcount$0 = $lcount$2$ph;$lmean$0 = $lmean$2$ph;$status$0 = $status$2$ph;$ucount$0 = $ucount$2$ph;$umean$0 = $umean$2$ph;
				}
				if ((label|0) == 36) {
					$82 = ($ucount$0$lcssa|0)>(1);
					if ($82) {
						$83 = (($umean$0$lcssa|0) / ($ucount$0$lcssa|0))&-1;
						$umean$4 = $83;
					} else {
						$umean$4 = $umean$0$lcssa;
					}
					$84 = ($lcount$0$lcssa|0)>(1);
					if ($84) {
						$85 = (($lmean$0$lcssa|0) / ($lcount$0$lcssa|0))&-1;
						$lmean$4 = $85;
					} else {
						$lmean$4 = $lmean$0$lcssa;
					}
					$86 = ($status$0$lcssa|0)==(2);
					if ($86) {
						$87 = (($umean$4) - ($lmean$4))|0;
						$88 = (__ZN7Profile5rangeEv($this)|0);
						$89 = (($88|0) / 2)&-1;
						$90 = ($87|0)>($89|0);
						$phitmp = $90&1;
						$91 = $phitmp;
					} else {
						$91 = 0;
					}
					HEAP8[$0>>0] = $91;
					$$3$in = HEAP8[$0>>0]|0;
					$$3 = ($$3$in<<24>>24)!=(0);
					return ($$3|0);
				}
				else if ((label|0) == 43) {
					$$3$in = HEAP8[$0>>0]|0;
					$$3 = ($$3$in<<24>>24)!=(0);
					return ($$3|0);
				}
				return (0)|0;
			}
			function __ZN7Profile5rangeEv($this) {
				$this = $this|0;
				var $$pre$i = 0, $$pre$i2 = 0, $$pre1$i = 0, $$pre1$i4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$i = 0;
				var $i$0$i1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					$3 = ((($this)) + 8|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)<(0);
					if ($5) {
						__ZN7Profile10initializeEv($this);
					}
					$6 = ((($this)) + 36|0);
					$7 = HEAP32[$6>>2]|0;
					$8 = HEAP32[$7>>2]|0;
					HEAP32[$0>>2] = $8;
					$9 = ((($this)) + 40|0);
					$10 = $7;$i$0$i = 1;
					while(1) {
						$11 = $10;
						$12 = HEAP32[$3>>2]|0;
						$13 = ($12|0)<(0);
						if ($13) {
							__ZN7Profile10initializeEv($this);
							$$pre$i = HEAP32[$6>>2]|0;
							$14 = $$pre$i;
							$17 = $$pre$i;$21 = $14;
						} else {
							$17 = $11;$21 = $10;
						}
						$15 = HEAP32[$9>>2]|0;
						$16 = (($15) - ($17))|0;
						$18 = $16 >> 2;
						$19 = ($i$0$i|0)<($18|0);
						if (!($19)) {
							break;
						}
						$20 = (($21) + ($i$0$i<<2)|0);
						$22 = HEAP32[$20>>2]|0;
						$23 = HEAP32[$0>>2]|0;
						$24 = ($22|0)>($23|0);
						if ($24) {
							HEAP32[$0>>2] = $22;
						}
						$25 = (($i$0$i) + 1)|0;
						$10 = $21;$i$0$i = $25;
					}
					$$pre1$i = HEAP32[$0>>2]|0;
					$54 = $$pre1$i;
				} else {
					$54 = $1;
				}
				$26 = ((($this)) + 16|0);
				$27 = HEAP32[$26>>2]|0;
				$28 = ($27|0)<(0);
				if (!($28)) {
					$53 = $27;
					$52 = (($54) - ($53))|0;
					return ($52|0);
				}
				$29 = ((($this)) + 8|0);
				$30 = HEAP32[$29>>2]|0;
				$31 = ($30|0)<(0);
				if ($31) {
					__ZN7Profile10initializeEv($this);
				}
				$32 = ((($this)) + 36|0);
				$33 = HEAP32[$32>>2]|0;
				$34 = HEAP32[$33>>2]|0;
				HEAP32[$26>>2] = $34;
				$35 = ((($this)) + 40|0);
				$36 = $33;$i$0$i1 = 1;
				while(1) {
					$37 = $36;
					$38 = HEAP32[$29>>2]|0;
					$39 = ($38|0)<(0);
					if ($39) {
						__ZN7Profile10initializeEv($this);
						$$pre$i2 = HEAP32[$32>>2]|0;
						$40 = $$pre$i2;
						$43 = $$pre$i2;$47 = $40;
					} else {
						$43 = $37;$47 = $36;
					}
					$41 = HEAP32[$35>>2]|0;
					$42 = (($41) - ($43))|0;
					$44 = $42 >> 2;
					$45 = ($i$0$i1|0)<($44|0);
					if (!($45)) {
						break;
					}
					$46 = (($47) + ($i$0$i1<<2)|0);
					$48 = HEAP32[$46>>2]|0;
					$49 = HEAP32[$26>>2]|0;
					$50 = ($48|0)<($49|0);
					if ($50) {
						HEAP32[$26>>2] = $48;
					}
					$51 = (($i$0$i1) + 1)|0;
					$36 = $47;$i$0$i1 = $51;
				}
				$$pre1$i4 = HEAP32[$26>>2]|0;
				$53 = $$pre1$i4;
				$52 = (($54) - ($53))|0;
				return ($52|0);
			}
			function __ZN7Profile6isvpitEv($this) {
				$this = $this|0;
				var $$0 = 0, $$lcssa = 0, $$lcssa9 = 0, $$neg = 0, $$neg4 = 0, $$pr = 0, $$pr3 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
				var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $i$0 = 0, $i$0$ll$0 = 0, $i$0$ln$0 = 0, $ll$0 = 0, $ll$0$lcssa = 0, $ll$2 = 0, $ln$0 = 0, $ln$0$lcssa = 0, $ln$1 = 0, $phitmp = 0, $rl$0 = 0, $rl$0$lcssa = 0, $rl$1 = 0, $rn$0 = 0, $rn$0$lcssa = 0, $rn$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 31|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				do {
					if ($2) {
						$3 = ((($this)) + 8|0);
						$4 = HEAP32[$3>>2]|0;
						$5 = ($4|0)<(0);
						if ($5) {
							__ZN7Profile10initializeEv($this);
							$$pr = HEAP32[$3>>2]|0;
							$6 = $$pr;
						} else {
							$6 = $4;
						}
						$7 = ($6|0)<(5);
						if (!($7)) {
							$8 = ((($this)) + 36|0);
							$9 = ((($this)) + 40|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = HEAP32[$8>>2]|0;
							$12 = (($10) - ($11))|0;
							$13 = ($12|0)<(20);
							if (!($13)) {
								$14 = (__ZN7Profile5ispitEv($this)|0);
								if ($14) {
									$15 = HEAP32[$3>>2]|0;
									$16 = (($15|0) / 20)&-1;
									$17 = (($15|0) / 10)&-1;
									$18 = (($17) + 2)|0;
									$19 = $15;$i$0 = 0;$ll$0 = -1;$ln$0 = -1;$rl$0 = -1;$rn$0 = -1;
									while(1) {
										$20 = ($19|0)<(0);
										if ($20) {
											__ZN7Profile10initializeEv($this);
										}
										$21 = HEAP32[$9>>2]|0;
										$22 = HEAP32[$8>>2]|0;
										$23 = (($21) - ($22))|0;
										$24 = $23 >> 2;
										$25 = ($i$0|0)<($24|0);
										if (!($25)) {
											$$lcssa = $21;$$lcssa9 = $22;$ll$0$lcssa = $ll$0;$ln$0$lcssa = $ln$0;$rl$0$lcssa = $rl$0;$rn$0$lcssa = $rn$0;
											break;
										}
										$29 = $22;
										$30 = (($29) + ($i$0<<2)|0);
										$31 = HEAP32[$30>>2]|0;
										$32 = ($31|0)>($18|0);
										if ($32) {
											$ll$2 = $ll$0;$ln$1 = $ln$0;$rl$1 = $rl$0;$rn$1 = $rn$0;
										} else {
											$33 = ($ll$0|0)<(0);
											$i$0$ll$0 = $33 ? $i$0 : $ll$0;
											$34 = ($31|0)>($16|0);
											if ($34) {
												$ll$2 = $i$0$ll$0;$ln$1 = $ln$0;$rl$1 = $i$0;$rn$1 = $rn$0;
											} else {
												$35 = ($ln$0|0)<(0);
												$i$0$ln$0 = $35 ? $i$0 : $ln$0;
												$ll$2 = $i$0$ll$0;$ln$1 = $i$0$ln$0;$rl$1 = $i$0;$rn$1 = $i$0;
											}
										}
										$36 = (($i$0) + 1)|0;
										$$pr3 = HEAP32[$3>>2]|0;
										$19 = $$pr3;$i$0 = $36;$ll$0 = $ll$2;$ln$0 = $ln$1;$rl$0 = $rl$1;$rn$0 = $rn$1;
									}
									$26 = (($rl$0$lcssa) - ($ll$0$lcssa))|0;
									$27 = (($26) + 1)|0;
									$28 = ($ln$0$lcssa|0)>(0);
									if ($28) {
										$37 = $27 << 1;
										$38 = HEAP32[$3>>2]|0;
										$39 = ($38|0)<(0);
										if ($39) {
											__ZN7Profile10initializeEv($this);
											$$pre = HEAP32[$9>>2]|0;
											$$pre5 = HEAP32[$8>>2]|0;
											$41 = $$pre5;$42 = $$pre;
										} else {
											$41 = $$lcssa9;$42 = $$lcssa;
										}
										$40 = (($42) - ($41))|0;
										$43 = $40 >> 2;
										$44 = (($43) + 1)|0;
										$45 = ($37|0)>($44|0);
										if ($45) {
											$50 = 0;
										} else {
											$$neg = (($ln$0$lcssa) + -1)|0;
											$$neg4 = (($$neg) - ($rn$0$lcssa))|0;
											$46 = (($$neg4) + ($27))|0;
											$47 = (($18) - ($16))|0;
											$48 = $47 << 1;
											$49 = ($46|0)<=($48|0);
											$phitmp = $49&1;
											$50 = $phitmp;
										}
									} else {
										$50 = 0;
									}
									HEAP8[$0>>0] = $50;
									$51 = $50;
									break;
								}
							}
						}
						HEAP8[$0>>0] = 0;
						$$0 = 0;
						return ($$0|0);
					} else {
						$51 = $1;
					}
				} while(0);
				$52 = ($51<<24>>24)!=(0);
				$$0 = $52;
				return ($$0|0);
			}
			function __ZN7Profile5istipEv($this) {
				$this = $this|0;
				var $$ = 0, $$23 = 0, $$23$in = 0, $$5 = 0, $$cast = 0, $$cast18 = 0, $$cast19 = 0, $$lth$0 = 0, $$pr = 0, $$pr12 = 0, $$pre = 0, $$pre54 = 0, $$pre55 = 0, $$pre56 = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre60 = 0, $$pre61 = 0, $$pre62 = 0;
				var $$pre63 = 0, $$status$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
				var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
				var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
				var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
				var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
				var $begin$0$lcssa = 0, $begin$028 = 0, $end$0$lcssa = 0, $end$029 = 0, $end$1 = 0, $i$0$begin$0 = 0, $i$0$neg = 0, $i$0$neg31 = 0, $i$030 = 0, $i1$0$in$ph = 0, $i1$0$us = 0, $i1$0$us40 = 0, $i1$0$us43 = 0, $i1$0$us46 = 0, $lth$0$lcssa = 0, $lth$027 = 0, $or$cond = 0, $rth$0$lcssa = 0, $rth$026 = 0, $rth$1 = 0;
				var $status$0$ = 0, $status$0$ph = 0, $status$0$ph51 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 32|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = ($1<<24>>24)<(0);
				if (!($2)) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				HEAP8[$0>>0] = 0;
				$3 = ((($this)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<(0);
				if ($5) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$3>>2]|0;
					$6 = ($$pr|0)<(0);
					if ($6) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 40|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = ($11|0)<(20);
				if ($12) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				$13 = (__ZN7Profile4meanEv($this)|0);
				$14 = ($13|0)<(2);
				if ($14) {
					$15 = (__ZN7Profile5rangeEv($this)|0);
					$16 = ($15|0)>(2);
					if ($16) {
						$18 = 2;
					} else {
						label = 8;
					}
				} else {
					label = 8;
				}
				if ((label|0) == 8) {
					$17 = (__ZN7Profile4meanEv($this)|0);
					$18 = $17;
				}
				$19 = ($18|0)<(2);
				$20 = $19&1;
				$$ = (($20) + ($18))|0;
				$21 = HEAP32[$7>>2]|0;
				$22 = HEAP32[$21>>2]|0;
				$23 = HEAP32[$3>>2]|0;
				$24 = ($23|0)<(0);
				$25 = $21;
				if ($24) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$7>>2]|0;
					$$pre54 = HEAP32[$3>>2]|0;
					$26 = $$pre;
					$123 = $26;$29 = $$pre;$34 = $$pre54;
				} else {
					$123 = $21;$29 = $25;$34 = $23;
				}
				$27 = HEAP32[$8>>2]|0;
				$28 = (($27) - ($29))|0;
				$30 = $28 >> 2;
				$31 = (($30) + -1)|0;
				$$cast = $29;
				$32 = (($$cast) + ($31<<2)|0);
				$33 = HEAP32[$32>>2]|0;
				$35 = ($34|0)<(0);
				if ($35) {
					__ZN7Profile10initializeEv($this);
					$$pr12 = HEAP32[$3>>2]|0;
					$39 = HEAP32[$8>>2]|0;
					$40 = HEAP32[$7>>2]|0;
					$41 = (($39) - ($40))|0;
					$42 = $41 >> 2;
					$43 = (($42) + -1)|0;
					$44 = ($$pr12|0)<(0);
					$45 = $40;
					if ($44) {
						__ZN7Profile10initializeEv($this);
						$$pre55 = HEAP32[$8>>2]|0;
						$$pre56 = HEAP32[$7>>2]|0;
						$46 = $$pre56;
						$124 = $46;$125 = $43;$48 = $$pre56;$49 = $$pre55;
					} else {
						$124 = $45;$125 = $43;$48 = $40;$49 = $39;
					}
				} else {
					$36 = (($27) - ($29))|0;
					$37 = $36 >> 2;
					$38 = (($37) + -1)|0;
					$124 = $123;$125 = $38;$48 = $29;$49 = $27;
				}
				$47 = (($49) - ($48))|0;
				$50 = $47 >> 2;
				$51 = (($50) + 5)|0;
				$52 = (($51|0) / 10)&-1;
				$53 = ($52|0)>(2);
				$54 = $53 ? $52 : 2;
				$55 = ($54|0)>(1);
				if ($55) {
					$126 = $48;$127 = $48;$128 = $48;$129 = $49;$59 = $124;$begin$028 = 0;$end$029 = $125;$i$0$neg31 = -1;$i$030 = 1;$lth$027 = $22;$rth$026 = $33;
					while(1) {
						$58 = (($59) + ($i$030<<2)|0);
						$60 = HEAP32[$58>>2]|0;
						$61 = ($60|0)<($lth$027|0);
						$$lth$0 = $61 ? $60 : $lth$027;
						$i$0$begin$0 = $61 ? $i$030 : $begin$028;
						$62 = HEAP32[$3>>2]|0;
						$63 = ($62|0)<(0);
						if ($63) {
							__ZN7Profile10initializeEv($this);
							$$pre57 = HEAP32[$8>>2]|0;
							$$pre58 = HEAP32[$7>>2]|0;
							$130 = $$pre58;$131 = $$pre58;$65 = $$pre58;$66 = $$pre57;
						} else {
							$130 = $126;$131 = $127;$65 = $128;$66 = $129;
						}
						$64 = (($66) - ($65))|0;
						$67 = $64 >> 2;
						$68 = (($i$0$neg31) + -1)|0;
						$69 = (($68) + ($67))|0;
						$$cast18 = $65;
						$70 = (($$cast18) + ($69<<2)|0);
						$71 = HEAP32[$70>>2]|0;
						$72 = ($71|0)<($rth$026|0);
						if ($72) {
							$73 = HEAP32[$3>>2]|0;
							$74 = ($73|0)<(0);
							if ($74) {
								__ZN7Profile10initializeEv($this);
								$$pre59 = HEAP32[$8>>2]|0;
								$$pre60 = HEAP32[$7>>2]|0;
								$$pre61 = HEAP32[$3>>2]|0;
								$137 = $$pre60;$76 = $$pre60;$77 = $$pre59;$82 = $$pre61;
							} else {
								$137 = $130;$76 = $131;$77 = $66;$82 = $73;
							}
							$75 = (($77) - ($76))|0;
							$78 = $75 >> 2;
							$79 = (($68) + ($78))|0;
							$$cast19 = $76;
							$80 = (($$cast19) + ($79<<2)|0);
							$81 = HEAP32[$80>>2]|0;
							$83 = ($82|0)<(0);
							if ($83) {
								__ZN7Profile10initializeEv($this);
								$$pre62 = HEAP32[$8>>2]|0;
								$$pre63 = HEAP32[$7>>2]|0;
								$85 = $$pre63;$86 = $$pre62;
							} else {
								$85 = $137;$86 = $77;
							}
							$84 = (($86) - ($85))|0;
							$87 = $84 >> 2;
							$88 = (($68) + ($87))|0;
							$89 = $85;
							$132 = $85;$133 = $85;$134 = $85;$135 = $86;$136 = $89;$end$1 = $88;$rth$1 = $81;
						} else {
							$132 = $130;$133 = $131;$134 = $65;$135 = $66;$136 = $$cast18;$end$1 = $end$029;$rth$1 = $rth$026;
						}
						$90 = (($i$030) + 1)|0;
						$i$0$neg = $i$030 ^ -1;
						$91 = ($90|0)<($54|0);
						if ($91) {
							$126 = $132;$127 = $133;$128 = $134;$129 = $135;$59 = $136;$begin$028 = $i$0$begin$0;$end$029 = $end$1;$i$0$neg31 = $i$0$neg;$i$030 = $90;$lth$027 = $$lth$0;$rth$026 = $rth$1;
						} else {
							$begin$0$lcssa = $i$0$begin$0;$end$0$lcssa = $end$1;$lth$0$lcssa = $$lth$0;$rth$0$lcssa = $rth$1;
							break;
						}
					}
				} else {
					$begin$0$lcssa = 0;$end$0$lcssa = $125;$lth$0$lcssa = $22;$rth$0$lcssa = $33;
				}
				$56 = ($lth$0$lcssa|0)<($$|0);
				$57 = ($rth$0$lcssa|0)<($$|0);
				$or$cond = $57 & $56;
				if (!($or$cond)) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				$92 = ($lth$0$lcssa*3)|0;
				$93 = (__ZN7Profile5rangeEv($this)|0);
				$94 = $93 << 1;
				$95 = ($92|0)<($94|0);
				if (!($95)) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				$96 = ($rth$0$lcssa*3)|0;
				$97 = (__ZN7Profile5rangeEv($this)|0);
				$98 = $97 << 1;
				$99 = ($96|0)<($98|0);
				if (!($99)) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				$100 = ($lth$0$lcssa|0)<($rth$0$lcssa|0);
				$101 = $100 ? $rth$0$lcssa : $lth$0$lcssa;
				$102 = (($101) + 1)|0;
				$i1$0$in$ph = $begin$0$lcssa;$status$0$ph = 0;
				L49: while(1) {
					switch ($status$0$ph|0) {
						case 0:  {
							$i1$0$us = (($i1$0$in$ph) + 1)|0;
							$103 = ($i1$0$us|0)<($end$0$lcssa|0);
							if (!($103)) {
								$status$0$ph51 = 0;
								label = 39;
								break L49;
							}
							$107 = HEAP32[$7>>2]|0;
							$108 = (($107) + ($i1$0$us<<2)|0);
							$109 = HEAP32[$108>>2]|0;
							$110 = ($109|0)>($102|0);
							$$status$0 = $110&1;
							$i1$0$in$ph = $i1$0$us;$status$0$ph = $$status$0;
							continue L49;
							break;
						}
						case 1:  {
							$i1$0$us40 = (($i1$0$in$ph) + 1)|0;
							$104 = ($i1$0$us40|0)<($end$0$lcssa|0);
							if (!($104)) {
								$status$0$ph51 = 0;
								label = 39;
								break L49;
							}
							$111 = HEAP32[$7>>2]|0;
							$112 = (($111) + ($i1$0$us40<<2)|0);
							$113 = HEAP32[$112>>2]|0;
							$114 = ($113|0)>($102|0);
							$$5 = $114 ? 2 : 0;
							$i1$0$in$ph = $i1$0$us40;$status$0$ph = $$5;
							continue L49;
							break;
						}
						case 2:  {
							$i1$0$us43 = (($i1$0$in$ph) + 1)|0;
							$105 = ($i1$0$us43|0)<($end$0$lcssa|0);
							if (!($105)) {
								$status$0$ph51 = 1;
								label = 39;
								break L49;
							}
							$115 = HEAP32[$7>>2]|0;
							$116 = (($115) + ($i1$0$us43<<2)|0);
							$117 = HEAP32[$116>>2]|0;
							$118 = ($117|0)>($101|0);
							$status$0$ = $118 ? 2 : 3;
							$i1$0$in$ph = $i1$0$us43;$status$0$ph = $status$0$;
							continue L49;
							break;
						}
						case 3:  {
							$i1$0$us46 = (($i1$0$in$ph) + 1)|0;
							$106 = ($i1$0$us46|0)<($end$0$lcssa|0);
							if (!($106)) {
								$status$0$ph51 = 1;
								label = 39;
								break L49;
							}
							$119 = HEAP32[$7>>2]|0;
							$120 = (($119) + ($i1$0$us46<<2)|0);
							$121 = HEAP32[$120>>2]|0;
							$122 = ($121|0)>($102|0);
							if ($122) {
								label = 40;
								break L49;
							} else {
								$i1$0$in$ph = $i1$0$us46;$status$0$ph = 3;
								continue L49;
							}
							break;
						}
						default: {
							label = 38;
							break L49;
						}
					}
				}
				if ((label|0) == 38) {
					// unreachable;
				}
				else if ((label|0) == 39) {
					HEAP8[$0>>0] = $status$0$ph51;
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				else if ((label|0) == 40) {
					$$23$in = HEAP8[$0>>0]|0;
					$$23 = ($$23$in<<24>>24)!=(0);
					return ($$23|0);
				}
				return (0)|0;
			}
			function __ZN7Profile6isctipEi($this,$cpos) {
				$this = $this|0;
				$cpos = $cpos|0;
				var $$3 = 0, $$in = 0, $$lcssa41 = 0, $$pr = 0, $$pr11 = 0, $$pre = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
				var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
				var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
				var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
				var $99 = 0, $cpos$off = 0, $i$025 = 0, $i1$020 = 0, $i2$0 = 0, $i2$0$in = 0, $imax$0 = 0, $imax$013 = 0, $imax$2 = 0, $imax$217 = 0, $j$0 = 0, $j$0$in = 0, $th$016 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = ($8|0)<(20);
				$cpos$off = (($cpos) + -25)|0;
				$10 = ($cpos$off>>>0)>(50);
				$11 = $10 | $9;
				if ($11) {
					$$3 = 0;
					return ($$3|0);
				}
				$12 = HEAP32[$0>>2]|0;
				$13 = ($12|0)<(0);
				if ($13) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$5>>2]|0;
					$$pre28 = HEAP32[$4>>2]|0;
					$$pre29 = HEAP32[$0>>2]|0;
					$19 = (($$pre) - ($$pre28))|0;
					$20 = $19 >> 2;
					$21 = (($20) + -1)|0;
					$22 = Math_imul($21, $cpos)|0;
					$23 = (($22|0) / 100)&-1;
					$24 = ($$pre29|0)<(0);
					if ($24) {
						__ZN7Profile10initializeEv($this);
						$$pr11 = HEAP32[$0>>2]|0;
						$27 = HEAP32[$5>>2]|0;
						$28 = HEAP32[$4>>2]|0;
						$29 = (($27) - ($28))|0;
						$30 = $29 >> 2;
						$31 = (($30|0) / 4)&-1;
						$32 = ($$pr11|0)<(0);
						if ($32) {
							__ZN7Profile10initializeEv($this);
							$$pre30 = HEAP32[$5>>2]|0;
							$$pre31 = HEAP32[$4>>2]|0;
							$34 = $$pre31;$35 = $$pre30;$38 = $23;$42 = $31;
						} else {
							$34 = $28;$35 = $27;$38 = $23;$42 = $31;
						}
					} else {
						$104 = $23;$105 = $$pre;$106 = $$pre28;$26 = $20;
						label = 8;
					}
				} else {
					$14 = (($6) - ($7))|0;
					$15 = $14 >> 2;
					$16 = (($15) + -1)|0;
					$17 = Math_imul($16, $cpos)|0;
					$18 = (($17|0) / 100)&-1;
					$104 = $18;$105 = $6;$106 = $7;$26 = $15;
					label = 8;
				}
				if ((label|0) == 8) {
					$25 = (($26|0) / 4)&-1;
					$34 = $106;$35 = $105;$38 = $104;$42 = $25;
				}
				$33 = (($35) - ($34))|0;
				$36 = $33 >> 2;
				$37 = (($36) - ($38))|0;
				$39 = ($37|0)<($38|0);
				$40 = $39 ? $37 : $38;
				$41 = ($40|0)<($42|0);
				$43 = $41 ? $40 : $42;
				$44 = (__ZN7Profile4meanEv($this)|0);
				$45 = HEAP32[$0>>2]|0;
				$46 = (($45|0) / 3)&-1;
				$47 = ($46|0)<($44|0);
				$48 = $47 ? $46 : $44;
				$49 = ($48|0)>(2);
				$50 = $49 ? $48 : 2;
				$51 = ($43|0)>(0);
				L16: do {
					if ($51) {
						$52 = HEAP32[$4>>2]|0;
						$i$025 = 0;
						while(1) {
							$55 = (($i$025) + ($38))|0;
							$56 = (($52) + ($55<<2)|0);
							$57 = HEAP32[$56>>2]|0;
							$58 = ($57|0)>($50|0);
							if ($58) {
								$imax$0 = $55;
								break;
							}
							$59 = (($38) - ($i$025))|0;
							$60 = (($59) + -1)|0;
							$61 = (($52) + ($60<<2)|0);
							$62 = HEAP32[$61>>2]|0;
							$63 = ($62|0)>($50|0);
							$53 = (($i$025) + 1)|0;
							if ($63) {
								$imax$0 = $60;
								break;
							}
							$54 = ($53|0)<($43|0);
							if ($54) {
								$i$025 = $53;
							} else {
								$imax$013 = -1;
								label = 17;
								break L16;
							}
						}
						$64 = ($imax$0|0)<(0);
						if ($64) {
							$imax$013 = $imax$0;
							label = 17;
						} else {
							$$in = $52;$imax$217 = $imax$0;$th$016 = $50;
						}
					} else {
						$imax$013 = -1;
						label = 17;
					}
				} while(0);
				do {
					if ((label|0) == 17) {
						$65 = (__ZN7Profile4meanEv($this)|0);
						$66 = ($65|0)==(0);
						if (!($66)) {
							$$3 = 0;
							return ($$3|0);
						}
						$67 = (($50) + -1)|0;
						if (!($51)) {
							$$3 = 0;
							return ($$3|0);
						}
						$68 = HEAP32[$4>>2]|0;
						$i1$020 = 0;
						while(1) {
							$71 = (($i1$020) + ($38))|0;
							$72 = (($68) + ($71<<2)|0);
							$73 = HEAP32[$72>>2]|0;
							$74 = ($73|0)<($50|0);
							if (!($74)) {
								$imax$2 = $71;
								break;
							}
							$75 = (($38) - ($i1$020))|0;
							$76 = (($75) + -1)|0;
							$77 = (($68) + ($76<<2)|0);
							$78 = HEAP32[$77>>2]|0;
							$79 = ($78|0)<($50|0);
							$69 = (($i1$020) + 1)|0;
							if (!($79)) {
								$imax$2 = $76;
								break;
							}
							$70 = ($69|0)<($43|0);
							if ($70) {
								$i1$020 = $69;
							} else {
								$imax$2 = $imax$013;
								break;
							}
						}
						$80 = ($imax$2|0)<(0);
						if ($80) {
							$$3 = 0;
							return ($$3|0);
						} else {
							$$pre32 = HEAP32[$4>>2]|0;
							$$in = $$pre32;$imax$217 = $imax$2;$th$016 = $67;
							break;
						}
					}
				} while(0);
				$81 = (($$in) + ($imax$217<<2)|0);
				$82 = HEAP32[$81>>2]|0;
				$83 = (($82|0) / 2)&-1;
				$84 = ($th$016|0)<($83|0);
				$85 = $84 ? $83 : $th$016;
				$107 = $$in;$86 = $$in;$i2$0$in = $imax$217;
				while(1) {
					$87 = $86;
					$i2$0 = (($i2$0$in) + 1)|0;
					$88 = HEAP32[$0>>2]|0;
					$89 = ($88|0)<(0);
					if ($89) {
						__ZN7Profile10initializeEv($this);
						$$pre33 = HEAP32[$4>>2]|0;
						$90 = $$pre33;
						$108 = $90;$93 = $$pre33;$97 = $90;
					} else {
						$108 = $107;$93 = $87;$97 = $86;
					}
					$91 = HEAP32[$5>>2]|0;
					$92 = (($91) - ($93))|0;
					$94 = $92 >> 2;
					$95 = ($i2$0|0)<($94|0);
					if (!($95)) {
						$$3 = 0;
						label = 33;
						break;
					}
					$96 = (($97) + ($i2$0<<2)|0);
					$98 = HEAP32[$96>>2]|0;
					$99 = ($98|0)<($85|0);
					if ($99) {
						$$lcssa41 = $108;
						break;
					} else {
						$107 = $108;$86 = $97;$i2$0$in = $i2$0;
					}
				}
				if ((label|0) == 33) {
					return ($$3|0);
				}
				$j$0$in = $imax$217;
				while(1) {
					$j$0 = (($j$0$in) + -1)|0;
					$100 = ($j$0$in|0)>(0);
					if (!($100)) {
						$$3 = 0;
						label = 33;
						break;
					}
					$101 = (($$lcssa41) + ($j$0<<2)|0);
					$102 = HEAP32[$101>>2]|0;
					$103 = ($102|0)<($85|0);
					if ($103) {
						$$3 = 1;
						label = 33;
						break;
					} else {
						$j$0$in = $j$0;
					}
				}
				if ((label|0) == 33) {
					return ($$3|0);
				}
				return (0)|0;
			}
			function __ZN7Profile6isltipEv($this) {
				$this = $this|0;
				var $$cast = 0, $$in = 0, $$lcssa = 0, $$lcssa40 = 0, $$lcssa42 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$pr = 0, $$pr7 = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $$pre12 = 0, $$pre13 = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $0 = 0;
				var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
				var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $begin$2 = 0, $i$0 = 0, $i$0$i = 0, $not$ = 0, $ref$0 = 0, $ref$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = ($8|0)<(20);
				if ($9) {
					return 0;
				}
				$10 = HEAP32[$0>>2]|0;
				$11 = ($10|0)<(0);
				if ($11) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$5>>2]|0;
					$$pre12 = HEAP32[$4>>2]|0;
					$$in = $$pre12;$14 = $$pre;
				} else {
					$$in = $7;$14 = $6;
				}
				$12 = $$in;
				$13 = (($14) - ($$in))|0;
				$15 = $13 >> 2;
				$16 = (($15|0) / 30)&-1;
				$17 = (($16) + 1)|0;
				$$cast = $$in;
				$18 = HEAP32[$$cast>>2]|0;
				$19 = ($18|0)>($17|0);
				if (!($19)) {
					return 0;
				}
				$20 = ((($this)) + 16|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = ($21|0)<(0);
				if ($22) {
					$23 = HEAP32[$0>>2]|0;
					$24 = ($23|0)<(0);
					if ($24) {
						__ZN7Profile10initializeEv($this);
						$$pre13 = HEAP32[$4>>2]|0;
						$25 = $$pre13;
						$27 = $$pre13;$76 = $25;
					} else {
						$27 = $12;$76 = $$in;
					}
					$26 = HEAP32[$27>>2]|0;
					HEAP32[$20>>2] = $26;
					$28 = $27;$77 = $76;$78 = $27;$79 = $76;$i$0$i = 1;
					while(1) {
						$29 = $28;
						$30 = HEAP32[$0>>2]|0;
						$31 = ($30|0)<(0);
						if ($31) {
							__ZN7Profile10initializeEv($this);
							$$pre$i = HEAP32[$4>>2]|0;
							$32 = $$pre$i;
							$35 = $$pre$i;$39 = $32;$80 = $$pre$i;$81 = $32;$82 = $$pre$i;
						} else {
							$35 = $29;$39 = $28;$80 = $77;$81 = $78;$82 = $79;
						}
						$33 = HEAP32[$5>>2]|0;
						$34 = (($33) - ($35))|0;
						$36 = $34 >> 2;
						$37 = ($i$0$i|0)<($36|0);
						if (!($37)) {
							$$lcssa42 = $80;$$lcssa43 = $81;$$lcssa44 = $82;$$lcssa45 = $33;
							break;
						}
						$38 = (($39) + ($i$0$i<<2)|0);
						$40 = HEAP32[$38>>2]|0;
						$41 = HEAP32[$20>>2]|0;
						$42 = ($40|0)<($41|0);
						if ($42) {
							HEAP32[$20>>2] = $40;
						}
						$43 = (($i$0$i) + 1)|0;
						$28 = $39;$77 = $80;$78 = $81;$79 = $82;$i$0$i = $43;
					}
					$$pre1$i = HEAP32[$20>>2]|0;
					$58 = $$pre1$i;$72 = $$lcssa42;$73 = $$lcssa43;$74 = $$lcssa44;$75 = $$lcssa45;
				} else {
					$58 = $21;$72 = $$in;$73 = $12;$74 = $$in;$75 = $14;
				}
				$44 = HEAP32[$0>>2]|0;
				$45 = $44;$83 = $72;$84 = $73;$85 = $74;$86 = $75;$i$0 = 0;$ref$0 = $44;
				while(1) {
					$46 = ($45|0)<(0);
					if ($46) {
						__ZN7Profile10initializeEv($this);
						$$pre14 = HEAP32[$5>>2]|0;
						$$pre15 = HEAP32[$4>>2]|0;
						$47 = $$pre15;
						$49 = $$pre15;$50 = $$pre14;$55 = $47;$87 = $$pre15;
					} else {
						$49 = $85;$50 = $86;$55 = $84;$87 = $83;
					}
					$48 = (($50) - ($49))|0;
					$51 = $48 >> 2;
					$52 = (($51) - ($17))|0;
					$53 = ($i$0|0)<($52|0);
					if (!($53)) {
						$$lcssa = $87;$$lcssa40 = $50;$begin$2 = 0;
						break;
					}
					$54 = (($55) + ($i$0<<2)|0);
					$56 = HEAP32[$54>>2]|0;
					$57 = ($56|0)==($58|0);
					$59 = $55;
					if ($57) {
						$$lcssa = $87;$$lcssa40 = $50;$begin$2 = $i$0;
						break;
					}
					$60 = ($56|0)<($ref$0|0);
					if ($60) {
						$ref$1 = $56;
					} else {
						$61 = (($ref$0) + ($17))|0;
						$62 = ($56|0)>($61|0);
						if ($62) {
							label = 31;
							break;
						} else {
							$ref$1 = $ref$0;
						}
					}
					$63 = (($i$0) + 1)|0;
					$$pr7 = HEAP32[$0>>2]|0;
					$45 = $$pr7;$83 = $87;$84 = $55;$85 = $59;$86 = $50;$i$0 = $63;$ref$0 = $ref$1;
				}
				if ((label|0) == 31) {
					return 0;
				}
				$64 = ($begin$2|0)>($17|0);
				if (!($64)) {
					return 0;
				}
				$65 = $begin$2 << 1;
				$66 = HEAP32[$0>>2]|0;
				$67 = ($66|0)<(0);
				if (!($67)) {
					$69 = $$lcssa;$70 = $$lcssa40;
					$68 = (($70) - ($69))|0;
					$71 = $68 >> 2;
					$not$ = ($65|0)<=($71|0);
					return ($not$|0);
				}
				__ZN7Profile10initializeEv($this);
				$$pre16 = HEAP32[$5>>2]|0;
				$$pre17 = HEAP32[$4>>2]|0;
				$69 = $$pre17;$70 = $$pre16;
				$68 = (($70) - ($69))|0;
				$71 = $68 >> 2;
				$not$ = ($65|0)<=($71|0);
				return ($not$|0);
			}
			function __ZN7Profile6isrtipEv($this) {
				$this = $this|0;
				var $$cast = 0, $$in = 0, $$lcssa = 0, $$lcssa81 = 0, $$lcssa82 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$pr = 0, $$pr9 = 0, $$pre = 0, $$pre$i = 0, $$pre1$i = 0, $$pre27 = 0, $$pre28 = 0, $$pre29 = 0, $$pre30 = 0, $$pre31 = 0, $$pre32 = 0, $$pre33 = 0, $$pre34 = 0;
				var $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
				var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
				var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $begin$2 = 0, $i$0 = 0, $i$0$i = 0, $i$0$in = 0, $i$0$in$lcssa73 = 0, $i$0$in$ph = 0, $i$0$neg = 0, $not$ = 0, $ref$0$ph = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = ($8|0)<(20);
				if ($9) {
					return 0;
				}
				$10 = HEAP32[$0>>2]|0;
				$11 = ($10|0)<(0);
				if ($11) {
					__ZN7Profile10initializeEv($this);
					$$pr9 = HEAP32[$0>>2]|0;
					$$pre = HEAP32[$5>>2]|0;
					$$pre27 = HEAP32[$4>>2]|0;
					$16 = (($$pre) - ($$pre27))|0;
					$17 = $16 >> 2;
					$18 = (($17|0) / 30)&-1;
					$19 = (($18) + 1)|0;
					$20 = ($$pr9|0)<(0);
					if ($20) {
						__ZN7Profile10initializeEv($this);
						$$pre28 = HEAP32[$5>>2]|0;
						$$pre29 = HEAP32[$4>>2]|0;
						$$in = $$pre29;$23 = $$pre28;$29 = $19;
					} else {
						$$in = $$pre27;$23 = $$pre;$29 = $19;
					}
				} else {
					$12 = (($6) - ($7))|0;
					$13 = $12 >> 2;
					$14 = (($13|0) / 30)&-1;
					$15 = (($14) + 1)|0;
					$$in = $7;$23 = $6;$29 = $15;
				}
				$21 = $$in;
				$22 = (($23) - ($$in))|0;
				$24 = $22 >> 2;
				$25 = (($24) + -1)|0;
				$$cast = $$in;
				$26 = (($$cast) + ($25<<2)|0);
				$27 = HEAP32[$26>>2]|0;
				$28 = ($27|0)>($29|0);
				if (!($28)) {
					return 0;
				}
				$30 = ((($this)) + 16|0);
				$31 = HEAP32[$30>>2]|0;
				$32 = ($31|0)<(0);
				if ($32) {
					$33 = HEAP32[$0>>2]|0;
					$34 = ($33|0)<(0);
					if ($34) {
						__ZN7Profile10initializeEv($this);
						$$pre30 = HEAP32[$4>>2]|0;
						$35 = $$pre30;
						$37 = $$pre30;$91 = $35;
					} else {
						$37 = $21;$91 = $$in;
					}
					$36 = HEAP32[$37>>2]|0;
					HEAP32[$30>>2] = $36;
					$38 = $37;$92 = $91;$93 = $91;$94 = $37;$95 = $91;$i$0$i = 1;
					while(1) {
						$39 = $38;
						$40 = HEAP32[$0>>2]|0;
						$41 = ($40|0)<(0);
						if ($41) {
							__ZN7Profile10initializeEv($this);
							$$pre$i = HEAP32[$4>>2]|0;
							$42 = $$pre$i;
							$45 = $$pre$i;$49 = $42;$96 = $$pre$i;$97 = $$pre$i;$98 = $42;$99 = $$pre$i;
						} else {
							$45 = $39;$49 = $38;$96 = $92;$97 = $93;$98 = $94;$99 = $95;
						}
						$43 = HEAP32[$5>>2]|0;
						$44 = (($43) - ($45))|0;
						$46 = $44 >> 2;
						$47 = ($i$0$i|0)<($46|0);
						if (!($47)) {
							$$lcssa = $96;$$lcssa81 = $97;$$lcssa82 = $98;$$lcssa83 = $99;$$lcssa84 = $43;
							break;
						}
						$48 = (($49) + ($i$0$i<<2)|0);
						$50 = HEAP32[$48>>2]|0;
						$51 = HEAP32[$30>>2]|0;
						$52 = ($50|0)<($51|0);
						if ($52) {
							HEAP32[$30>>2] = $50;
						}
						$53 = (($i$0$i) + 1)|0;
						$38 = $49;$92 = $96;$93 = $97;$94 = $98;$95 = $99;$i$0$i = $53;
					}
					$$pre1$i = HEAP32[$30>>2]|0;
					$67 = $$pre1$i;$86 = $$lcssa;$87 = $$lcssa81;$88 = $$lcssa82;$89 = $$lcssa83;$90 = $$lcssa84;
				} else {
					$67 = $31;$86 = $$in;$87 = $$in;$88 = $21;$89 = $$in;$90 = $23;
				}
				$54 = HEAP32[$0>>2]|0;
				$55 = ($54|0)<(0);
				if ($55) {
					__ZN7Profile10initializeEv($this);
					$$pre31 = HEAP32[$5>>2]|0;
					$$pre32 = HEAP32[$4>>2]|0;
					$56 = $$pre32;
					$100 = $$pre32;$101 = $$pre32;$58 = $$pre32;$59 = $$pre31;$64 = $56;
				} else {
					$100 = $86;$101 = $87;$58 = $89;$59 = $90;$64 = $88;
				}
				$57 = (($59) - ($58))|0;
				$60 = $57 >> 2;
				$i$0$in$ph = $60;$ref$0$ph = $54;
				L35: while(1) {
					$61 = (($ref$0$ph) + ($29))|0;
					$i$0$in = $i$0$in$ph;
					while(1) {
						$i$0 = (($i$0$in) + -1)|0;
						$62 = ($i$0$in|0)>($29|0);
						if (!($62)) {
							$102 = $100;$103 = $59;$begin$2 = 0;
							break L35;
						}
						$63 = (($64) + ($i$0<<2)|0);
						$65 = HEAP32[$63>>2]|0;
						$66 = ($65|0)==($67|0);
						if ($66) {
							$i$0$in$lcssa73 = $i$0$in;
							label = 27;
							break L35;
						}
						$76 = ($65|0)<($ref$0$ph|0);
						if ($76) {
							$i$0$in$ph = $i$0;$ref$0$ph = $65;
							continue L35;
						}
						$77 = ($65|0)>($61|0);
						if ($77) {
							label = 36;
							break L35;
						} else {
							$i$0$in = $i$0;
						}
					}
				}
				if ((label|0) == 36) {
					return 0;
				}
				if ((label|0) == 27) {
					$68 = HEAP32[$0>>2]|0;
					$69 = ($68|0)<(0);
					if ($69) {
						__ZN7Profile10initializeEv($this);
						$$pre33 = HEAP32[$5>>2]|0;
						$$pre34 = HEAP32[$4>>2]|0;
						$104 = $$pre34;$71 = $$pre34;$72 = $$pre33;
					} else {
						$104 = $100;$71 = $101;$72 = $59;
					}
					$70 = (($72) - ($71))|0;
					$73 = $70 >> 2;
					$i$0$neg = (1 - ($i$0$in$lcssa73))|0;
					$74 = (($i$0$neg) + -1)|0;
					$75 = (($74) + ($73))|0;
					$102 = $104;$103 = $72;$begin$2 = $75;
				}
				$78 = ($begin$2|0)>($29|0);
				if (!($78)) {
					return 0;
				}
				$79 = $begin$2 << 1;
				$80 = HEAP32[$0>>2]|0;
				$81 = ($80|0)<(0);
				if (!($81)) {
					$83 = $102;$84 = $103;
					$82 = (($84) - ($83))|0;
					$85 = $82 >> 2;
					$not$ = ($79|0)<=($85|0);
					return ($not$|0);
				}
				__ZN7Profile10initializeEv($this);
				$$pre35 = HEAP32[$5>>2]|0;
				$$pre36 = HEAP32[$4>>2]|0;
				$83 = $$pre36;$84 = $$pre35;
				$82 = (($84) - ($83))|0;
				$85 = $82 >> 2;
				$not$ = ($79|0)<=($85|0);
				return ($not$|0);
			}
			function __ZN7Profile8imaximumEv($this) {
				$this = $this|0;
				var $$lcssa = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$mvalue$0 = 0, $$pr = 0, $$pre = 0, $$pre3 = 0, $$pre4 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
				var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$mbegin$0 = 0;
				var $mbegin$0 = 0, $mbegin$0$lcssa = 0, $mend$0 = 0, $mend$0$in = 0, $mend$0$in$lcssa = 0, $mvalue$0 = 0, $mvalue$0$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = $8 >> 2;
				$10 = (($9|0) / 30)&-1;
				$11 = (($10) + 1)|0;
				$12 = $7;
				$43 = $12;$44 = $7;$45 = $6;$i$0 = $11;$mbegin$0 = 0;$mvalue$0 = 0;
				while(1) {
					$13 = HEAP32[$0>>2]|0;
					$14 = ($13|0)<(0);
					if ($14) {
						__ZN7Profile10initializeEv($this);
						$$pre = HEAP32[$5>>2]|0;
						$$pre3 = HEAP32[$4>>2]|0;
						$15 = $$pre3;
						$17 = $$pre3;$18 = $$pre;$23 = $15;
					} else {
						$17 = $44;$18 = $45;$23 = $43;
					}
					$16 = (($18) - ($17))|0;
					$19 = $16 >> 2;
					$20 = (($19) - ($11))|0;
					$21 = ($i$0|0)<($20|0);
					if (!($21)) {
						$$lcssa = $23;$$lcssa12 = $17;$$lcssa13 = $18;$mbegin$0$lcssa = $mbegin$0;$mvalue$0$lcssa = $mvalue$0;
						break;
					}
					$22 = (($23) + ($i$0<<2)|0);
					$24 = HEAP32[$22>>2]|0;
					$25 = ($24|0)>($mvalue$0|0);
					$i$0$mbegin$0 = $25 ? $i$0 : $mbegin$0;
					$$mvalue$0 = $25 ? $24 : $mvalue$0;
					$26 = (($i$0) + 1)|0;
					$27 = $23;
					$43 = $23;$44 = $27;$45 = $18;$i$0 = $26;$mbegin$0 = $i$0$mbegin$0;$mvalue$0 = $$mvalue$0;
				}
				$46 = $$lcssa;$47 = $$lcssa12;$48 = $$lcssa13;$mend$0$in = $mbegin$0$lcssa;
				while(1) {
					$mend$0 = (($mend$0$in) + 1)|0;
					$28 = HEAP32[$0>>2]|0;
					$29 = ($28|0)<(0);
					if ($29) {
						__ZN7Profile10initializeEv($this);
						$$pre4 = HEAP32[$5>>2]|0;
						$$pre5 = HEAP32[$4>>2]|0;
						$30 = $$pre5;
						$32 = $$pre5;$33 = $$pre4;$37 = $30;
					} else {
						$32 = $47;$33 = $48;$37 = $46;
					}
					$31 = (($33) - ($32))|0;
					$34 = $31 >> 2;
					$35 = ($mend$0|0)<($34|0);
					if (!($35)) {
						$mend$0$in$lcssa = $mend$0$in;
						label = 14;
						break;
					}
					$36 = (($37) + ($mend$0<<2)|0);
					$38 = HEAP32[$36>>2]|0;
					$39 = ($38|0)<($mvalue$0$lcssa|0);
					$40 = $37;
					if ($39) {
						$mend$0$in$lcssa = $mend$0$in;
						label = 14;
						break;
					} else {
						$46 = $37;$47 = $40;$48 = $33;$mend$0$in = $mend$0;
					}
				}
				if ((label|0) == 14) {
					$41 = (($mend$0$in$lcssa) + ($mbegin$0$lcssa))|0;
					$42 = (($41|0) / 2)&-1;
					return ($42|0);
				}
				return (0)|0;
			}
			function __ZN7Profile8iminimumEii($this,$m,$th) {
				$this = $this|0;
				$m = $m|0;
				$th = $th|0;
				var $$01 = 0, $$1 = 0, $$lcssa61 = 0, $$lcssa63 = 0, $$lcssa65 = 0, $$minima$0 = 0, $$pr = 0, $$pr5 = 0, $$pre = 0, $$pre26 = 0, $$pre27 = 0, $$pre28 = 0, $$pre29 = 0, $$status$0 = 0, $$value$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
				var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
				var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $begin$0 = 0, $begin$0$lcssa58 = 0, $begin$059 = 0, $begin$1 = 0, $begin$2$lcssa = 0, $begin$215 = 0, $end$0 = 0, $end$0$begin$0 = 0, $end$0$lcssa60 = 0, $end$1 = 0, $end$1$ = 0, $end$3$lcssa = 0, $end$312 = 0;
				var $i$0$begin$2 = 0, $i$017 = 0, $minima$0 = 0, $minima$022 = 0, $minima$1 = 0, $not$ = 0, $status$0 = 0, $status$1 = 0, $value$0$lcssa = 0, $value$016 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
						$$pre = HEAP32[$0>>2]|0;
						$12 = $$pre;
					} else {
						$12 = $$pr;
					}
				} else {
					$12 = $1;
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = $8 >> 2;
				$10 = (($9|0) / 30)&-1;
				$11 = (($10) + 1)|0;
				$13 = ($12|0)<(0);
				if ($13) {
					__ZN7Profile10initializeEv($this);
					$$pre26 = HEAP32[$5>>2]|0;
					$$pre27 = HEAP32[$4>>2]|0;
					$15 = $$pre27;$16 = $$pre26;
				} else {
					$15 = $7;$16 = $6;
				}
				$14 = (($16) - ($15))|0;
				$17 = $14 >> 2;
				$18 = $11 << 1;
				$19 = ($17|0)<($18|0);
				if ($19) {
					$$1 = 0;
					return ($$1|0);
				}
				$20 = ($th|0)<(2);
				if ($20) {
					$21 = (__ZN7Profile4meanEv($this)|0);
					$22 = ($21|0)<(2);
					if ($22) {
						$$01 = 2;
					} else {
						$23 = (__ZN7Profile4meanEv($this)|0);
						$$01 = $23;
					}
				} else {
					$$01 = $th;
				}
				$24 = HEAP32[$0>>2]|0;
				$25 = (($24) + 1)|0;
				$26 = (($m) + 1)|0;
				$27 = $24;$begin$0 = 0;$end$0 = $11;$minima$0 = 0;$status$0 = 0;
				while(1) {
					$28 = ($27|0)<(0);
					if ($28) {
						__ZN7Profile10initializeEv($this);
					}
					$29 = HEAP32[$5>>2]|0;
					$30 = HEAP32[$4>>2]|0;
					$31 = (($29) - ($30))|0;
					$32 = $31 >> 2;
					$33 = (($32) - ($11))|0;
					$34 = ($end$0|0)<($33|0);
					$35 = $30;
					if (!($34)) {
						$69 = $35;$70 = $30;$71 = $29;$begin$059 = $begin$0;$end$1 = $end$0;$minima$022 = $minima$0;
						break;
					}
					$36 = ($status$0|0)==(0);
					$37 = (($35) + ($end$0<<2)|0);
					$38 = HEAP32[$37>>2]|0;
					if ($36) {
						$39 = ($38|0)<($$01|0);
						$40 = $39&1;
						$$minima$0 = (($40) + ($minima$0))|0;
						$$status$0 = $39&1;
						$end$0$begin$0 = $39 ? $end$0 : $begin$0;
						$begin$1 = $end$0$begin$0;$minima$1 = $$minima$0;$status$1 = $$status$0;
					} else {
						$41 = ($38|0)>($$01|0);
						if ($41) {
							$42 = ($minima$0|0)==($26|0);
							if ($42) {
								$$lcssa61 = $29;$$lcssa63 = $30;$$lcssa65 = $35;$begin$0$lcssa58 = $begin$0;$end$0$lcssa60 = $end$0;
								label = 18;
								break;
							} else {
								$begin$1 = $begin$0;$minima$1 = $minima$0;$status$1 = 0;
							}
						} else {
							$begin$1 = $begin$0;$minima$1 = $minima$0;$status$1 = $status$0;
						}
					}
					$44 = (($end$0) + 1)|0;
					$$pr5 = HEAP32[$0>>2]|0;
					$27 = $$pr5;$begin$0 = $begin$1;$end$0 = $44;$minima$0 = $minima$1;$status$0 = $status$1;
				}
				if ((label|0) == 18) {
					$43 = (($end$0$lcssa60) + -1)|0;
					$69 = $$lcssa65;$70 = $$lcssa63;$71 = $$lcssa61;$begin$059 = $begin$0$lcssa58;$end$1 = $43;$minima$022 = $26;
				}
				$45 = HEAP32[$0>>2]|0;
				$46 = ($45|0)<(0);
				if ($46) {
					__ZN7Profile10initializeEv($this);
					$$pre28 = HEAP32[$5>>2]|0;
					$$pre29 = HEAP32[$4>>2]|0;
					$47 = $$pre29;
					$49 = $$pre29;$50 = $$pre28;$57 = $47;
				} else {
					$49 = $70;$50 = $71;$57 = $69;
				}
				$48 = (($50) - ($49))|0;
				$51 = $48 >> 2;
				$not$ = ($end$1|0)>=($51|0);
				$52 = $not$ << 31 >> 31;
				$end$1$ = (($52) + ($end$1))|0;
				$53 = ($minima$022|0)==($26|0);
				if (!($53)) {
					$$1 = 0;
					return ($$1|0);
				}
				$54 = ($begin$059|0)>($end$1$|0);
				if ($54) {
					$begin$2$lcssa = $begin$059;$value$0$lcssa = $25;
				} else {
					$begin$215 = $begin$059;$i$017 = $begin$059;$value$016 = $25;
					while(1) {
						$56 = (($57) + ($i$017<<2)|0);
						$58 = HEAP32[$56>>2]|0;
						$59 = ($58|0)<($value$016|0);
						$i$0$begin$2 = $59 ? $i$017 : $begin$215;
						$$value$0 = $59 ? $58 : $value$016;
						$60 = (($i$017) + 1)|0;
						$61 = ($i$017|0)<($end$1$|0);
						if ($61) {
							$begin$215 = $i$0$begin$2;$i$017 = $60;$value$016 = $$value$0;
						} else {
							$begin$2$lcssa = $i$0$begin$2;$value$0$lcssa = $$value$0;
							break;
						}
					}
				}
				$55 = ($end$1$|0)<($begin$2$lcssa|0);
				L39: do {
					if ($55) {
						$end$3$lcssa = $end$1$;
					} else {
						$end$312 = $end$1$;
						while(1) {
							$62 = (($57) + ($end$312<<2)|0);
							$63 = HEAP32[$62>>2]|0;
							$64 = ($63|0)==($value$0$lcssa|0);
							if ($64) {
								$end$3$lcssa = $end$312;
								break L39;
							}
							$65 = (($end$312) + -1)|0;
							$66 = ($end$312|0)>($begin$2$lcssa|0);
							if ($66) {
								$end$312 = $65;
							} else {
								$end$3$lcssa = $65;
								break;
							}
						}
					}
				} while(0);
				$67 = (($end$3$lcssa) + ($begin$2$lcssa))|0;
				$68 = (($67|0) / 2)&-1;
				$$1 = $68;
				return ($$1|0);
			}
			function __ZN7Profile6minimaEi($this,$th) {
				$this = $this|0;
				$th = $th|0;
				var $$01 = 0, $$1 = 0, $$minima$0 = 0, $$pr = 0, $$pre = 0, $$pre4 = 0, $$status$0 = 0, $$status$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
				var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
				var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $minima$0 = 0;
				var $minima$1 = 0, $not$ = 0, $status$0 = 0, $status$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = ($6|0)==($7|0);
				if ($8) {
					$$1 = 0;
					return ($$1|0);
				}
				$9 = ($th|0)<(1);
				if ($9) {
					$10 = (__ZN7Profile4meanEv($this)|0);
					$11 = ($10|0)<(2);
					if ($11) {
						$$01 = 2;
					} else {
						$12 = (__ZN7Profile4meanEv($this)|0);
						$$01 = $12;
					}
				} else {
					$$01 = $th;
				}
				$13 = HEAP32[$0>>2]|0;
				$14 = (($13|0) / 40)&-1;
				$15 = (($14) + 1)|0;
				$16 = (($15|0) / 2)&-1;
				$17 = (($$01) - ($16))|0;
				$18 = (($13|0) / 80)&-1;
				$19 = (($18) + ($$01))|0;
				$20 = ($17|0)<(1);
				if ($20) {
					$$1 = 1;
					return ($$1|0);
				}
				$21 = HEAP32[$4>>2]|0;
				$22 = HEAP32[$21>>2]|0;
				$23 = ($22|0)<($17|0);
				$24 = $23&1;
				$25 = $21;
				$26 = $13;$45 = $21;$46 = $21;$47 = $25;$i$0 = 1;$minima$0 = $24;$status$0 = $24;
				while(1) {
					$27 = ($26|0)<(0);
					if ($27) {
						__ZN7Profile10initializeEv($this);
						$$pre4 = HEAP32[$4>>2]|0;
						$28 = $$pre4;
						$31 = $$pre4;$35 = $28;$41 = $28;
					} else {
						$31 = $47;$35 = $45;$41 = $46;
					}
					$29 = HEAP32[$5>>2]|0;
					$30 = (($29) - ($31))|0;
					$32 = $30 >> 2;
					$33 = ($i$0|0)<($32|0);
					if (!($33)) {
						$$1 = $minima$0;
						break;
					}
					switch ($status$0|0) {
						case 0:  {
							$34 = (($35) + ($i$0<<2)|0);
							$36 = HEAP32[$34>>2]|0;
							$37 = ($36|0)<($17|0);
							$38 = $37&1;
							$$minima$0 = (($38) + ($minima$0))|0;
							$$status$0 = $37&1;
							$39 = $35;
							$48 = $35;$49 = $39;$minima$1 = $$minima$0;$status$1 = $$status$0;
							break;
						}
						case 1:  {
							$40 = (($41) + ($i$0<<2)|0);
							$42 = HEAP32[$40>>2]|0;
							$not$ = ($42|0)<=($19|0);
							$$status$02 = $not$&1;
							$43 = $41;
							$48 = $41;$49 = $43;$minima$1 = $minima$0;$status$1 = $$status$02;
							break;
						}
						default: {
							$48 = $41;$49 = $31;$minima$1 = $minima$0;$status$1 = $status$0;
						}
					}
					$44 = (($i$0) + 1)|0;
					$$pre = HEAP32[$0>>2]|0;
					$26 = $$pre;$45 = $35;$46 = $48;$47 = $49;$i$0 = $44;$minima$0 = $minima$1;$status$0 = $status$1;
				}
				return ($$1|0);
			}
			function __ZN7Profile8straightEPi($this,$dyp) {
				$this = $this|0;
				$dyp = $dyp|0;
				var $$5 = 0, $$cast = 0, $$cast13 = 0, $$in = 0, $$in25 = 0, $$in27 = 0, $$pr = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $$pre22 = 0, $$pre23 = 0, $$pre24 = 0, $0 = 0;
				var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
				var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $faults$0 = 0, $faults$2 = 0, $i$0 = 0, $ispos = 0, $neg = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					__ZN7Profile10initializeEv($this);
					$$pr = HEAP32[$0>>2]|0;
					$3 = ($$pr|0)<(0);
					if ($3) {
						__ZN7Profile10initializeEv($this);
					}
				}
				$4 = ((($this)) + 36|0);
				$5 = ((($this)) + 40|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = HEAP32[$4>>2]|0;
				$8 = (($6) - ($7))|0;
				$9 = ($8|0)<(20);
				if ($9) {
					$$5 = 0;
					return ($$5|0);
				}
				$10 = HEAP32[$0>>2]|0;
				$11 = ($10|0)<(0);
				if ($11) {
					__ZN7Profile10initializeEv($this);
					$$pre = HEAP32[$5>>2]|0;
					$$pre14 = HEAP32[$4>>2]|0;
					$$pre15 = HEAP32[$0>>2]|0;
					$$in = $$pre14;$13 = $$pre;$24 = $$pre15;
				} else {
					$$in = $7;$13 = $6;$24 = $10;
				}
				$12 = (($13) - ($$in))|0;
				$14 = $12 >> 2;
				$15 = (($14|0) / 30)&-1;
				$16 = (($15) + 1)|0;
				$$cast = $$in;
				$17 = (($$cast) + ($16<<2)|0);
				$18 = HEAP32[$17>>2]|0;
				$19 = (($15) + 2)|0;
				$20 = (($$cast) + ($19<<2)|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = (($21) + ($18))|0;
				$23 = (($22|0) / 2)&-1;
				$25 = ($24|0)<(0);
				if ($25) {
					__ZN7Profile10initializeEv($this);
					$$pre16 = HEAP32[$5>>2]|0;
					$$pre17 = HEAP32[$4>>2]|0;
					$$in25 = $$pre17;$27 = $$pre16;
				} else {
					$$in25 = $$in;$27 = $13;
				}
				$26 = (($27) - ($$in25))|0;
				$28 = $26 >> 2;
				$29 = (($28) - ($16))|0;
				$30 = (($29) + -1)|0;
				$31 = (($29) + -2)|0;
				$$cast13 = $$in25;
				$32 = (($$cast13) + ($31<<2)|0);
				$33 = HEAP32[$32>>2]|0;
				$34 = (($$cast13) + ($30<<2)|0);
				$35 = HEAP32[$34>>2]|0;
				$36 = (($35) + ($33))|0;
				$37 = (($36|0) / 2)&-1;
				$38 = (($30) - ($16))|0;
				$39 = (($37) - ($23))|0;
				$40 = ($38|0)<(1);
				if ($40) {
					$$5 = 0;
					return ($$5|0);
				}
				$41 = HEAP32[$0>>2]|0;
				$42 = ($41|0)<(0);
				if ($42) {
					__ZN7Profile10initializeEv($this);
					$$pre18 = HEAP32[$5>>2]|0;
					$$pre19 = HEAP32[$4>>2]|0;
					$$pre20 = HEAP32[$0>>2]|0;
					$48 = (($$pre18) - ($$pre19))|0;
					$49 = $48 >> 2;
					$50 = (($49|0) / 20)&-1;
					$51 = (($50) + 2)|0;
					$52 = Math_imul($51, $38)|0;
					$53 = ($$pre20|0)<(0);
					if ($53) {
						__ZN7Profile10initializeEv($this);
						$$pre21 = HEAP32[$5>>2]|0;
						$$pre22 = HEAP32[$4>>2]|0;
						$$in27 = $$pre22;$56 = $$pre21;$78 = $52;
					} else {
						$$in27 = $$pre19;$56 = $$pre18;$78 = $52;
					}
				} else {
					$43 = (($27) - ($$in25))|0;
					$44 = $43 >> 2;
					$45 = (($44|0) / 20)&-1;
					$46 = (($45) + 2)|0;
					$47 = Math_imul($46, $38)|0;
					$$in27 = $$in25;$56 = $27;$78 = $47;
				}
				$54 = $$in27;
				$55 = (($56) - ($$in27))|0;
				$57 = $55 >> 2;
				$58 = (($57|0) / 10)&-1;
				$59 = Math_imul($38, $23)|0;
				$89 = $54;$90 = $$in27;$91 = $56;$faults$0 = $58;$i$0 = 0;
				L22: while(1) {
					$60 = HEAP32[$0>>2]|0;
					$61 = ($60|0)<(0);
					if ($61) {
						__ZN7Profile10initializeEv($this);
						$$pre23 = HEAP32[$5>>2]|0;
						$$pre24 = HEAP32[$4>>2]|0;
						$62 = $$pre24;
						$64 = $$pre24;$65 = $$pre23;$72 = $62;
					} else {
						$64 = $90;$65 = $91;$72 = $89;
					}
					$63 = (($65) - ($64))|0;
					$66 = $63 >> 2;
					$67 = ($i$0|0)<($66|0);
					if (!($67)) {
						label = 25;
						break;
					}
					$68 = (($i$0) - ($16))|0;
					$69 = Math_imul($68, $39)|0;
					$70 = (($69) + ($59))|0;
					$71 = (($72) + ($i$0<<2)|0);
					$73 = HEAP32[$71>>2]|0;
					$74 = Math_imul($73, $38)|0;
					$75 = (($74) - ($70))|0;
					$ispos = ($75|0)>(-1);
					$neg = (0 - ($75))|0;
					$76 = $ispos ? $75 : $neg;
					$77 = ($76|0)<($78|0);
					$79 = $72;
					do {
						if ($77) {
							$faults$2 = $faults$0;
						} else {
							$80 = ($74|0)<($70|0);
							if (!($80)) {
								$81 = ($i$0|0)>($15|0);
								$82 = ($i$0|0)<($29|0);
								$or$cond = $81 & $82;
								if (!($or$cond)) {
									$faults$2 = $faults$0;
									break;
								}
							}
							$83 = ($76|0)>($78|0);
							if ($83) {
								$$5 = 0;
								label = 27;
								break L22;
							}
							$84 = ($76|0)==($78|0);
							if ($84) {
								$85 = (($faults$0) + -1)|0;
								$86 = ($faults$0|0)<(1);
								if ($86) {
									$$5 = 0;
									label = 27;
									break L22;
								} else {
									$faults$2 = $85;
								}
							} else {
								$faults$2 = $faults$0;
							}
						}
					} while(0);
					$87 = (($i$0) + 1)|0;
					$89 = $72;$90 = $79;$91 = $65;$faults$0 = $faults$2;$i$0 = $87;
				}
				if ((label|0) == 25) {
					$88 = ($dyp|0)==(0|0);
					if ($88) {
						$$5 = 1;
						return ($$5|0);
					}
					HEAP32[$dyp>>2] = $39;
					$$5 = 1;
					return ($$5|0);
				}
				else if ((label|0) == 27) {
					return ($$5|0);
				}
				return (0)|0;
			}
			function __ZNK4Mask4leftEi($this,$row) {
				$this = $this|0;
				$row = $row|0;
				var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>($row|0);
				if ($2) {
					return -1;
				}
				$3 = ((($this)) + 12|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<($row|0);
				if ($5) {
					return -1;
				} else {
					$6 = (($row) - ($1))|0;
					$7 = ((($this)) + 16|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = (($8) + ($6<<3)|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = (((($8) + ($6<<3)|0)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = ($10|0)<=($12|0);
					$$ = $13 ? $10 : -1;
					return ($$|0);
				}
				return (0)|0;
			}
			function __ZNK4Mask5rightEi($this,$row) {
				$this = $this|0;
				$row = $row|0;
				var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>($row|0);
				if ($2) {
					return -1;
				}
				$3 = ((($this)) + 12|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ($4|0)<($row|0);
				if ($5) {
					return -1;
				} else {
					$6 = (($row) - ($1))|0;
					$7 = ((($this)) + 16|0);
					$8 = HEAP32[$7>>2]|0;
					$9 = (($8) + ($6<<3)|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = (((($8) + ($6<<3)|0)) + 4|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = ($10|0)<=($12|0);
					$$ = $13 ? $12 : -1;
					return ($$|0);
				}
				return (0)|0;
			}
			function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEjRS6_($this,$__position,$__n,$__x) {
				$this = $this|0;
				$__position = $__position|0;
				$__n = $__n|0;
				$__x = $__x|0;
				var $$ = 0, $$0$i = 0, $$0$i2 = 0, $$0$i35 = 0, $$0$i36 = 0, $$012$i$i = 0, $$03$i$i = 0, $$04 = 0, $$in = 0, $$in$i = 0, $$lcssa = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
				var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
				var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v$sroa$12$0$in = 0, $__xr$0 = 0, $scevgep = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = $0;
				$2 = HEAP32[$__position>>2]|0;
				$3 = (($2) - ($1))|0;
				$4 = $3 >> 3;
				$5 = (($0) + ($4<<3)|0);
				$6 = ($__n|0)==(0);
				if ($6) {
					$__p$0 = $5;
					return ($__p$0|0);
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ((($this)) + 4|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = $10;
				$12 = (($8) - ($11))|0;
				$13 = $12 >> 3;
				$14 = ($13>>>0)<($__n>>>0);
				if ($14) {
					$76 = (($11) - ($1))|0;
					$77 = $76 >> 3;
					$78 = (($77) + ($__n))|0;
					$79 = ($78>>>0)>(536870911);
					if ($79) {
						__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
						$$pre = HEAP32[$7>>2]|0;
						$$pre7 = HEAP32[$this>>2]|0;
						$81 = $$pre7;$82 = $$pre;
					} else {
						$81 = $1;$82 = $8;
					}
					$80 = (($82) - ($81))|0;
					$83 = $80 >> 3;
					$84 = ($83>>>0)<(268435455);
					if ($84) {
						$88 = $80 >> 2;
						$89 = ($88>>>0)<($78>>>0);
						$90 = $89 ? $78 : $88;
						$91 = $5;
						$92 = (($91) - ($81))|0;
						$93 = $92 >> 3;
						$94 = ($90|0)==(0);
						if ($94) {
							$$0$i36 = 0;$119 = $91;$98 = 0;$99 = $93;
						} else {
							$$0$i35 = $90;$130 = $93;$131 = $91;
							label = 18;
						}
					} else {
						$85 = $5;
						$86 = (($85) - ($81))|0;
						$87 = $86 >> 3;
						$$0$i35 = 536870911;$130 = $87;$131 = $85;
						label = 18;
					}
					if ((label|0) == 18) {
						$95 = $$0$i35 << 3;
						$96 = (__Znwj($95)|0);
						$$0$i36 = $$0$i35;$119 = $131;$98 = $96;$99 = $130;
					}
					$97 = (($98) + ($99<<3)|0);
					$100 = (($98) + ($$0$i36<<3)|0);
					$101 = (($99) + ($__n))|0;
					$$0$i = $__n;$__v$sroa$12$0$in = $97;
					while(1) {
						$102 = $__x;
						$103 = $102;
						$104 = HEAP32[$103>>2]|0;
						$105 = (($102) + 4)|0;
						$106 = $105;
						$107 = HEAP32[$106>>2]|0;
						$108 = $__v$sroa$12$0$in;
						$109 = $108;
						HEAP32[$109>>2] = $104;
						$110 = (($108) + 4)|0;
						$111 = $110;
						HEAP32[$111>>2] = $107;
						$112 = ((($__v$sroa$12$0$in)) + 8|0);
						$113 = (($$0$i) + -1)|0;
						$114 = ($113|0)==(0);
						if ($114) {
							break;
						} else {
							$$0$i = $113;$__v$sroa$12$0$in = $112;
						}
					}
					$115 = $100;
					$scevgep = (($98) + ($101<<3)|0);
					$116 = HEAP32[$this>>2]|0;
					$117 = $116;
					$118 = (($119) - ($117))|0;
					$120 = $118 >> 3;
					$121 = (0 - ($120))|0;
					$122 = (($97) + ($121<<3)|0);
					$123 = $122;
					_memcpy(($122|0),($116|0),($118|0))|0;
					$124 = HEAP32[$9>>2]|0;
					$125 = (($124) - ($119))|0;
					$126 = $125 >> 3;
					_memcpy(($scevgep|0),($5|0),($125|0))|0;
					$127 = (($scevgep) + ($126<<3)|0);
					$128 = $127;
					HEAP32[$this>>2] = $123;
					HEAP32[$9>>2] = $128;
					HEAP32[$7>>2] = $115;
					$129 = ($116|0)==(0|0);
					if ($129) {
						$__p$0 = $97;
						return ($__p$0|0);
					}
					__ZdlPv($116);
					$__p$0 = $97;
					return ($__p$0|0);
				} else {
					$15 = $5;
					$16 = (($11) - ($15))|0;
					$17 = $16 >> 3;
					$18 = ($17>>>0)<($__n>>>0);
					if ($18) {
						$19 = (($__n) - ($17))|0;
						$$0$i2 = $19;$$in = $10;
						while(1) {
							$20 = $__x;
							$21 = $20;
							$22 = HEAP32[$21>>2]|0;
							$23 = (($20) + 4)|0;
							$24 = $23;
							$25 = HEAP32[$24>>2]|0;
							$26 = $$in;
							$27 = $26;
							HEAP32[$27>>2] = $22;
							$28 = (($26) + 4)|0;
							$29 = $28;
							HEAP32[$29>>2] = $25;
							$30 = HEAP32[$9>>2]|0;
							$31 = ((($30)) + 8|0);
							HEAP32[$9>>2] = $31;
							$32 = (($$0$i2) + -1)|0;
							$33 = ($32|0)==(0);
							if ($33) {
								$$lcssa = $31;
								break;
							} else {
								$$0$i2 = $32;$$in = $31;
							}
						}
						$34 = ($17|0)==(0);
						if ($34) {
							$__p$0 = $5;
							return ($__p$0|0);
						} else {
							$$04 = $17;$36 = $$lcssa;
						}
					} else {
						$$04 = $__n;$36 = $10;
					}
					$35 = (($5) + ($__n<<3)|0);
					$37 = $36;
					$38 = $35;
					$39 = (($37) - ($38))|0;
					$40 = $39 >> 3;
					$41 = (($5) + ($40<<3)|0);
					$42 = ($41>>>0)<($10>>>0);
					if ($42) {
						$$in$i = $36;$__i$01$i = $41;
						while(1) {
							$43 = $__i$01$i;
							$44 = $43;
							$45 = HEAP32[$44>>2]|0;
							$46 = (($43) + 4)|0;
							$47 = $46;
							$48 = HEAP32[$47>>2]|0;
							$49 = $$in$i;
							$50 = $49;
							HEAP32[$50>>2] = $45;
							$51 = (($49) + 4)|0;
							$52 = $51;
							HEAP32[$52>>2] = $48;
							$53 = ((($__i$01$i)) + 8|0);
							$54 = HEAP32[$9>>2]|0;
							$55 = ((($54)) + 8|0);
							HEAP32[$9>>2] = $55;
							$56 = ($53>>>0)<($10>>>0);
							if ($56) {
								$$in$i = $55;$__i$01$i = $53;
							} else {
								break;
							}
						}
					}
					$57 = (0 - ($40))|0;
					$58 = (($36) + ($57<<3)|0);
					_memmove(($58|0),($5|0),($39|0))|0;
					$59 = ($5>>>0)>($__x>>>0);
					if ($59) {
						$__xr$0 = $__x;
					} else {
						$60 = HEAP32[$9>>2]|0;
						$61 = ($60>>>0)>($__x>>>0);
						$62 = (($__x) + ($__n<<3)|0);
						$$ = $61 ? $62 : $__x;
						$__xr$0 = $$;
					}
					$$012$i$i = $$04;$$03$i$i = $5;
					while(1) {
						$63 = $__xr$0;
						$64 = $63;
						$65 = HEAP32[$64>>2]|0;
						$66 = (($63) + 4)|0;
						$67 = $66;
						$68 = HEAP32[$67>>2]|0;
						$69 = $$03$i$i;
						$70 = $69;
						HEAP32[$70>>2] = $65;
						$71 = (($69) + 4)|0;
						$72 = $71;
						HEAP32[$72>>2] = $68;
						$73 = ((($$03$i$i)) + 8|0);
						$74 = (($$012$i$i) + -1)|0;
						$75 = ($74|0)==(0);
						if ($75) {
							$__p$0 = $5;
							break;
						} else {
							$$012$i$i = $74;$$03$i$i = $73;
						}
					}
					return ($__p$0|0);
				}
				return (0)|0;
			}
			function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i = 0, $$0$i2 = 0, $$0$i45 = 0, $$0$i46 = 0, $$in = 0, $$pre = 0, $$pre7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
				var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0;
				var $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, $scevgep$i3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = $4 >> 3;
				$6 = ($5>>>0)<($__n>>>0);
				$7 = $3;
				if (!($6)) {
					$$0$i = $__n;$8 = $7;
					while(1) {
						HEAP32[$8>>2] = 1;
						$9 = ((($8)) + 4|0);
						HEAP32[$9>>2] = 0;
						$10 = ((($8)) + 8|0);
						$11 = (($$0$i) + -1)|0;
						$12 = ($11|0)==(0);
						if ($12) {
							break;
						} else {
							$$0$i = $11;$8 = $10;
						}
					}
					$scevgep$i = (($7) + ($__n<<3)|0);
					HEAP32[$2>>2] = $scevgep$i;
					return;
				}
				$13 = HEAP32[$this>>2]|0;
				$14 = (($3) - ($13))|0;
				$15 = $14 >> 3;
				$16 = (($15) + ($__n))|0;
				$17 = ($16>>>0)>(536870911);
				if ($17) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre7 = HEAP32[$this>>2]|0;
					$$in = $$pre7;$19 = $$pre;
				} else {
					$$in = $13;$19 = $1;
				}
				$18 = (($19) - ($$in))|0;
				$20 = $18 >> 3;
				$21 = ($20>>>0)<(268435455);
				if ($21) {
					$25 = $18 >> 2;
					$26 = ($25>>>0)<($16>>>0);
					$27 = $26 ? $16 : $25;
					$28 = HEAP32[$2>>2]|0;
					$29 = (($28) - ($$in))|0;
					$30 = $29 >> 3;
					$31 = ($27|0)==(0);
					if ($31) {
						$$0$i46 = 0;$35 = 0;$36 = $30;$46 = $28;
					} else {
						$$0$i45 = $27;$54 = $28;$55 = $30;
						label = 9;
					}
				} else {
					$22 = HEAP32[$2>>2]|0;
					$23 = (($22) - ($$in))|0;
					$24 = $23 >> 3;
					$$0$i45 = 536870911;$54 = $22;$55 = $24;
					label = 9;
				}
				if ((label|0) == 9) {
					$32 = $$0$i45 << 3;
					$33 = (__Znwj($32)|0);
					$$0$i46 = $$0$i45;$35 = $33;$36 = $55;$46 = $54;
				}
				$34 = (($35) + ($36<<3)|0);
				$37 = (($35) + ($$0$i46<<3)|0);
				$$0$i2 = $__n;$38 = $34;
				while(1) {
					HEAP32[$38>>2] = 1;
					$39 = ((($38)) + 4|0);
					HEAP32[$39>>2] = 0;
					$40 = ((($38)) + 8|0);
					$41 = (($$0$i2) + -1)|0;
					$42 = ($41|0)==(0);
					if ($42) {
						break;
					} else {
						$$0$i2 = $41;$38 = $40;
					}
				}
				$43 = $37;
				$scevgep$i3 = (($34) + ($__n<<3)|0);
				$44 = $scevgep$i3;
				$45 = (($46) - ($$in))|0;
				$47 = $45 >> 3;
				$48 = (0 - ($47))|0;
				$49 = (($34) + ($48<<3)|0);
				$50 = $49;
				$51 = $$in;
				_memcpy(($49|0),($51|0),($45|0))|0;
				HEAP32[$this>>2] = $50;
				HEAP32[$2>>2] = $44;
				HEAP32[$0>>2] = $43;
				$52 = ($$in|0)==(0);
				if ($52) {
					return;
				}
				$53 = $$in;
				__ZdlPv($53);
				return;
			}
			function __ZN4Mask8add_maskERKS_($this,$m) {
				$this = $this|0;
				$m = $m|0;
				var $$byval_copy = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $i$05 = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 12|0;
				$0 = sp + 8|0;
				$1 = sp;
				$2 = ((($m)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ($5|0)>($3|0);
				if ($6) {
					$7 = ($5|0)==($3|0);
					if (!($7)) {
						$8 = ((($this)) + 16|0);
						$9 = HEAP32[$8>>2]|0;
						HEAP32[$0>>2] = $9;
						$10 = (($5) - ($3))|0;
						HEAP32[$1>>2] = 1;
						$11 = ((($1)) + 4|0);
						HEAP32[$11>>2] = 0;
						;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
						(__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEjRS6_($8,$$byval_copy,$10,$1)|0);
						__ZN9Rectangle3topEi($this,$3);
					}
				}
				$12 = ((($m)) + 12|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = ((($this)) + 12|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = ($15|0)<($13|0);
				do {
					if ($16) {
						__ZN9Rectangle6bottomEi($this,$13);
						$17 = ((($this)) + 16|0);
						$18 = HEAP32[$14>>2]|0;
						$19 = HEAP32[$4>>2]|0;
						$20 = (($18) + 1)|0;
						$21 = (($20) - ($19))|0;
						$22 = ((($this)) + 20|0);
						$23 = HEAP32[$22>>2]|0;
						$24 = HEAP32[$17>>2]|0;
						$25 = (($23) - ($24))|0;
						$26 = $25 >> 3;
						$27 = ($21>>>0)>($26>>>0);
						$28 = $24;
						$29 = $23;
						if ($27) {
							$30 = (($21) - ($26))|0;
							__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE8__appendEj($17,$30);
							break;
						}
						$31 = ($21>>>0)<($26>>>0);
						if ($31) {
							$32 = (($28) + ($21<<3)|0);
							$33 = ($29|0)==($32|0);
							if (!($33)) {
								$__new_last2$i$i$i$i = $32;
								$scevgep$i$i$i$i = ((($29)) + -8|0);
								$34 = $scevgep$i$i$i$i;
								$35 = (($34) - ($__new_last2$i$i$i$i))|0;
								$36 = $35 >>> 3;
								$37 = $36 ^ -1;
								$scevgep4$i$i$i$i = (($29) + ($37<<3)|0);
								HEAP32[$22>>2] = $scevgep4$i$i$i$i;
							}
						}
					}
				} while(0);
				$38 = HEAP32[$2>>2]|0;
				$39 = HEAP32[$12>>2]|0;
				$40 = ($38|0)>($39|0);
				if ($40) {
					STACKTOP = sp;return;
				}
				$41 = ((($this)) + 16|0);
				$42 = ((($m)) + 16|0);
				$43 = ((($this)) + 8|0);
				$49 = $38;$i$05 = $38;
				while(1) {
					$44 = HEAP32[$4>>2]|0;
					$45 = (($i$05) - ($44))|0;
					$46 = HEAP32[$41>>2]|0;
					$47 = (($46) + ($45<<3)|0);
					$48 = (($i$05) - ($49))|0;
					$50 = HEAP32[$42>>2]|0;
					$51 = (($50) + ($48<<3)|0);
					__ZN8Csegment12add_csegmentERKS_($47,$51);
					$52 = HEAP32[$47>>2]|0;
					$53 = HEAP32[$this>>2]|0;
					$54 = ($52|0)<($53|0);
					if ($54) {
						__ZN9Rectangle4leftEi($this,$52);
					}
					$55 = (((($46) + ($45<<3)|0)) + 4|0);
					$56 = HEAP32[$55>>2]|0;
					$57 = HEAP32[$43>>2]|0;
					$58 = ($56|0)>($57|0);
					if ($58) {
						__ZN9Rectangle5rightEi($this,$56);
					}
					$59 = HEAP32[$12>>2]|0;
					$60 = ($i$05|0)<($59|0);
					if (!($60)) {
						break;
					}
					$61 = (($i$05) + 1)|0;
					$$pre = HEAP32[$2>>2]|0;
					$49 = $$pre;$i$05 = $61;
				}
				STACKTOP = sp;return;
			}
			function __ZN4Mask13add_rectangleERK9Rectangle($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $__new_last2$i$i$i$i = 0, $i$05 = 0, $rseg = 0, $scevgep$i$i$i$i = 0, $scevgep4$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 20|0;
				$0 = sp + 16|0;
				$1 = sp + 8|0;
				$rseg = sp;
				$2 = ((($re)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($this)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ($5|0)>($3|0);
				if ($6) {
					$7 = ($5|0)==($3|0);
					if (!($7)) {
						$8 = ((($this)) + 16|0);
						$9 = HEAP32[$8>>2]|0;
						HEAP32[$0>>2] = $9;
						$10 = (($5) - ($3))|0;
						HEAP32[$1>>2] = 1;
						$11 = ((($1)) + 4|0);
						HEAP32[$11>>2] = 0;
						;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
						(__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EEjRS6_($8,$$byval_copy,$10,$1)|0);
						__ZN9Rectangle3topEi($this,$3);
					}
				}
				$12 = ((($re)) + 12|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = ((($this)) + 12|0);
				$15 = HEAP32[$14>>2]|0;
				$16 = ($15|0)<($13|0);
				do {
					if ($16) {
						__ZN9Rectangle6bottomEi($this,$13);
						$17 = ((($this)) + 16|0);
						$18 = HEAP32[$14>>2]|0;
						$19 = HEAP32[$4>>2]|0;
						$20 = (($18) + 1)|0;
						$21 = (($20) - ($19))|0;
						$22 = ((($this)) + 20|0);
						$23 = HEAP32[$22>>2]|0;
						$24 = HEAP32[$17>>2]|0;
						$25 = (($23) - ($24))|0;
						$26 = $25 >> 3;
						$27 = ($21>>>0)>($26>>>0);
						$28 = $24;
						$29 = $23;
						if ($27) {
							$30 = (($21) - ($26))|0;
							__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE8__appendEj($17,$30);
							break;
						}
						$31 = ($21>>>0)<($26>>>0);
						if ($31) {
							$32 = (($28) + ($21<<3)|0);
							$33 = ($29|0)==($32|0);
							if (!($33)) {
								$__new_last2$i$i$i$i = $32;
								$scevgep$i$i$i$i = ((($29)) + -8|0);
								$34 = $scevgep$i$i$i$i;
								$35 = (($34) - ($__new_last2$i$i$i$i))|0;
								$36 = $35 >>> 3;
								$37 = $36 ^ -1;
								$scevgep4$i$i$i$i = (($29) + ($37<<3)|0);
								HEAP32[$22>>2] = $scevgep4$i$i$i$i;
							}
						}
					}
				} while(0);
				$38 = HEAP32[$re>>2]|0;
				$39 = ((($re)) + 8|0);
				$40 = HEAP32[$39>>2]|0;
				HEAP32[$rseg>>2] = $38;
				$41 = ((($rseg)) + 4|0);
				HEAP32[$41>>2] = $40;
				$42 = HEAP32[$2>>2]|0;
				$43 = HEAP32[$12>>2]|0;
				$44 = ($42|0)>($43|0);
				if ($44) {
					STACKTOP = sp;return;
				}
				$45 = ((($this)) + 16|0);
				$46 = ((($this)) + 8|0);
				$i$05 = $42;
				while(1) {
					$47 = HEAP32[$4>>2]|0;
					$48 = (($i$05) - ($47))|0;
					$49 = HEAP32[$45>>2]|0;
					$50 = (($49) + ($48<<3)|0);
					__ZN8Csegment12add_csegmentERKS_($50,$rseg);
					$51 = HEAP32[$50>>2]|0;
					$52 = HEAP32[$this>>2]|0;
					$53 = ($51|0)<($52|0);
					if ($53) {
						__ZN9Rectangle4leftEi($this,$51);
					}
					$54 = (((($49) + ($48<<3)|0)) + 4|0);
					$55 = HEAP32[$54>>2]|0;
					$56 = HEAP32[$46>>2]|0;
					$57 = ($55|0)>($56|0);
					if ($57) {
						__ZN9Rectangle5rightEi($this,$55);
					}
					$58 = (($i$05) + 1)|0;
					$59 = HEAP32[$12>>2]|0;
					$60 = ($i$05|0)<($59|0);
					if ($60) {
						$i$05 = $58;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZNK4Mask8distanceERK9Rectangle($this,$re) {
				$this = $this|0;
				$re = $re|0;
				var $$mindist$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $mindist$0$lcssa = 0, $mindist$03 = 0, $mindist$31 = 0, $seg = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$seg = sp;
				$0 = HEAP32[$re>>2]|0;
				$1 = ((($re)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				HEAP32[$seg>>2] = $0;
				$3 = ((($seg)) + 4|0);
				HEAP32[$3>>2] = $2;
				$4 = ((($this)) + 12|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ((($re)) + 4|0);
				$7 = ((($this)) + 4|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ($5|0)<($8|0);
				if ($9) {
					$mindist$0$lcssa = 2147483647;
					STACKTOP = sp;return ($mindist$0$lcssa|0);
				}
				$10 = ((($this)) + 16|0);
				$i$02 = $5;$mindist$03 = 2147483647;
				while(1) {
					$11 = (__ZNK9Rectangle10v_distanceEi($re,$i$02)|0);
					$12 = ($11|0)<($mindist$03|0);
					if ($12) {
						$13 = HEAP32[$7>>2]|0;
						$14 = (($i$02) - ($13))|0;
						$15 = HEAP32[$10>>2]|0;
						$16 = (($15) + ($14<<3)|0);
						$17 = (__ZNK8Csegment8distanceERKS_($16,$seg)|0);
						$18 = ($17|0)<($mindist$03|0);
						if ($18) {
							$19 = (__ZN9Rectangle6hypotiEii($17,$11)|0);
							$20 = ($19|0)<($mindist$03|0);
							$$mindist$0 = $20 ? $19 : $mindist$03;
							$mindist$31 = $$mindist$0;
						} else {
							$mindist$31 = $mindist$03;
						}
					} else {
						$21 = HEAP32[$6>>2]|0;
						$22 = ($i$02|0)<($21|0);
						if ($22) {
							$mindist$0$lcssa = $mindist$03;
							label = 8;
							break;
						} else {
							$mindist$31 = $mindist$03;
						}
					}
					$23 = (($i$02) + -1)|0;
					$24 = HEAP32[$7>>2]|0;
					$25 = ($i$02|0)>($24|0);
					if ($25) {
						$i$02 = $23;$mindist$03 = $mindist$31;
					} else {
						$mindist$0$lcssa = $mindist$31;
						label = 8;
						break;
					}
				}
				if ((label|0) == 8) {
					STACKTOP = sp;return ($mindist$0$lcssa|0);
				}
				return (0)|0;
			}
			function __ZN8FeaturesC2ERK4Blob($this,$b_) {
				$this = $this|0;
				$b_ = $b_|0;
				var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$3 = 0, $$34 = 0, $$4 = 0, $$45 = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i39 = 0, $$pre$i42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
				var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
				var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
				var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0;
				var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
				var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
				var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
				var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
				var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i36 = 0, $scevgep$i$i$i$i14 = 0, $scevgep$i$i$i$i19 = 0, $scevgep$i$i$i$i24 = 0, $scevgep$i$i$i$i29 = 0, $scevgep$i$i$i9 = 0, $scevgep4$i$i$i = 0;
				var $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i37 = 0, $scevgep4$i$i$i$i15 = 0, $scevgep4$i$i$i$i20 = 0, $scevgep4$i$i$i$i25 = 0, $scevgep4$i$i$i$i30 = 0, $scevgep4$i$i$i10 = 0, dest = 0, label = 0, sp = 0, stop = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = $b_;
				$0 = ((($this)) + 4|0);
				HEAP8[$0>>0] = 0;
				$1 = ((($this)) + 5|0);
				HEAP8[$1>>0] = 0;
				$2 = ((($this)) + 8|0);
				$3 = ((($this)) + 12|0);
				$4 = ((($this)) + 20|0);
				$5 = ((($this)) + 24|0);
				$6 = ((($this)) + 32|0);
				$7 = ((($this)) + 36|0);
				$8 = ((($this)) + 44|0);
				$9 = ((($this)) + 48|0);
				$10 = ((($this)) + 56|0);
				dest=$2; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
				__THREW__ = 0;
				invoke_viii(160,($10|0),($b_|0),0);
				$11 = __THREW__; __THREW__ = 0;
				$12 = $11&1;
				if ($12) {
					$33 = ___cxa_find_matching_catch_2()|0;
					$34 = tempRet0;
					$$4 = $34;$$45 = $33;
				} else {
					$13 = ((($this)) + 104|0);
					$14 = HEAP32[$this>>2]|0;
					__THREW__ = 0;
					invoke_viii(160,($13|0),($14|0),1);
					$15 = __THREW__; __THREW__ = 0;
					$16 = $15&1;
					if ($16) {
						$35 = ___cxa_find_matching_catch_2()|0;
						$36 = tempRet0;
						$$3 = $36;$$34 = $35;
					} else {
						$17 = ((($this)) + 152|0);
						$18 = HEAP32[$this>>2]|0;
						__THREW__ = 0;
						invoke_viii(160,($17|0),($18|0),2);
						$19 = __THREW__; __THREW__ = 0;
						$20 = $19&1;
						if ($20) {
							$37 = ___cxa_find_matching_catch_2()|0;
							$38 = tempRet0;
							$$2 = $38;$$23 = $37;
						} else {
							$21 = ((($this)) + 200|0);
							$22 = HEAP32[$this>>2]|0;
							__THREW__ = 0;
							invoke_viii(160,($21|0),($22|0),3);
							$23 = __THREW__; __THREW__ = 0;
							$24 = $23&1;
							if ($24) {
								$39 = ___cxa_find_matching_catch_2()|0;
								$40 = tempRet0;
								$$1 = $40;$$12 = $39;
							} else {
								$25 = ((($this)) + 248|0);
								$26 = HEAP32[$this>>2]|0;
								__THREW__ = 0;
								invoke_viii(160,($25|0),($26|0),4);
								$27 = __THREW__; __THREW__ = 0;
								$28 = $27&1;
								if ($28) {
									$41 = ___cxa_find_matching_catch_2()|0;
									$42 = tempRet0;
									$$0 = $42;$$01 = $41;
								} else {
									$29 = ((($this)) + 296|0);
									$30 = HEAP32[$this>>2]|0;
									__THREW__ = 0;
									invoke_viii(160,($29|0),($30|0),5);
									$31 = __THREW__; __THREW__ = 0;
									$32 = $31&1;
									if (!($32)) {
										return;
									}
									$43 = ___cxa_find_matching_catch_2()|0;
									$44 = tempRet0;
									$45 = ((($this)) + 284|0);
									$46 = HEAP32[$45>>2]|0;
									$47 = ($46|0)==(0|0);
									$48 = $46;
									if ($47) {
										$$0 = $44;$$01 = $43;
									} else {
										$49 = ((($this)) + 288|0);
										$50 = HEAP32[$49>>2]|0;
										$51 = ($50|0)==($46|0);
										if (!($51)) {
											$scevgep$i$i$i$i = ((($50)) + -4|0);
											$52 = $scevgep$i$i$i$i;
											$53 = (($52) - ($48))|0;
											$54 = $53 >>> 2;
											$55 = $54 ^ -1;
											$scevgep4$i$i$i$i = (($50) + ($55<<2)|0);
											HEAP32[$49>>2] = $scevgep4$i$i$i$i;
										}
										__ZdlPv($46);
										$$0 = $44;$$01 = $43;
									}
								}
								$56 = ((($this)) + 236|0);
								$57 = HEAP32[$56>>2]|0;
								$58 = ($57|0)==(0|0);
								$59 = $57;
								if ($58) {
									$$1 = $$0;$$12 = $$01;
								} else {
									$60 = ((($this)) + 240|0);
									$61 = HEAP32[$60>>2]|0;
									$62 = ($61|0)==($57|0);
									if (!($62)) {
										$scevgep$i$i$i$i14 = ((($61)) + -4|0);
										$63 = $scevgep$i$i$i$i14;
										$64 = (($63) - ($59))|0;
										$65 = $64 >>> 2;
										$66 = $65 ^ -1;
										$scevgep4$i$i$i$i15 = (($61) + ($66<<2)|0);
										HEAP32[$60>>2] = $scevgep4$i$i$i$i15;
									}
									__ZdlPv($57);
									$$1 = $$0;$$12 = $$01;
								}
							}
							$67 = ((($this)) + 188|0);
							$68 = HEAP32[$67>>2]|0;
							$69 = ($68|0)==(0|0);
							$70 = $68;
							if ($69) {
								$$2 = $$1;$$23 = $$12;
							} else {
								$71 = ((($this)) + 192|0);
								$72 = HEAP32[$71>>2]|0;
								$73 = ($72|0)==($68|0);
								if (!($73)) {
									$scevgep$i$i$i$i19 = ((($72)) + -4|0);
									$74 = $scevgep$i$i$i$i19;
									$75 = (($74) - ($70))|0;
									$76 = $75 >>> 2;
									$77 = $76 ^ -1;
									$scevgep4$i$i$i$i20 = (($72) + ($77<<2)|0);
									HEAP32[$71>>2] = $scevgep4$i$i$i$i20;
								}
								__ZdlPv($68);
								$$2 = $$1;$$23 = $$12;
							}
						}
						$78 = ((($this)) + 140|0);
						$79 = HEAP32[$78>>2]|0;
						$80 = ($79|0)==(0|0);
						$81 = $79;
						if ($80) {
							$$3 = $$2;$$34 = $$23;
						} else {
							$82 = ((($this)) + 144|0);
							$83 = HEAP32[$82>>2]|0;
							$84 = ($83|0)==($79|0);
							if (!($84)) {
								$scevgep$i$i$i$i24 = ((($83)) + -4|0);
								$85 = $scevgep$i$i$i$i24;
								$86 = (($85) - ($81))|0;
								$87 = $86 >>> 2;
								$88 = $87 ^ -1;
								$scevgep4$i$i$i$i25 = (($83) + ($88<<2)|0);
								HEAP32[$82>>2] = $scevgep4$i$i$i$i25;
							}
							__ZdlPv($79);
							$$3 = $$2;$$34 = $$23;
						}
					}
					$89 = ((($this)) + 92|0);
					$90 = HEAP32[$89>>2]|0;
					$91 = ($90|0)==(0|0);
					$92 = $90;
					if ($91) {
						$$4 = $$3;$$45 = $$34;
					} else {
						$93 = ((($this)) + 96|0);
						$94 = HEAP32[$93>>2]|0;
						$95 = ($94|0)==($90|0);
						if (!($95)) {
							$scevgep$i$i$i$i29 = ((($94)) + -4|0);
							$96 = $scevgep$i$i$i$i29;
							$97 = (($96) - ($92))|0;
							$98 = $97 >>> 2;
							$99 = $98 ^ -1;
							$scevgep4$i$i$i$i30 = (($94) + ($99<<2)|0);
							HEAP32[$93>>2] = $scevgep4$i$i$i$i30;
						}
						__ZdlPv($90);
						$$4 = $$3;$$45 = $$34;
					}
				}
				$100 = HEAP32[$8>>2]|0;
				$101 = ($100|0)==(0|0);
				if (!($101)) {
					$102 = HEAP32[$9>>2]|0;
					$103 = ($102|0)==($100|0);
					if ($103) {
						$118 = $100;
					} else {
						$105 = $102;
						while(1) {
							$104 = ((($105)) + -12|0);
							HEAP32[$9>>2] = $104;
							$106 = HEAP32[$104>>2]|0;
							$107 = ($106|0)==(0|0);
							$108 = $106;
							if ($107) {
								$109 = $104;
							} else {
								$111 = ((($105)) + -8|0);
								$112 = HEAP32[$111>>2]|0;
								$113 = ($112|0)==($106|0);
								if (!($113)) {
									$scevgep$i$i$i$i$i$i$i$i36 = ((($112)) + -8|0);
									$114 = $scevgep$i$i$i$i$i$i$i$i36;
									$115 = (($114) - ($108))|0;
									$116 = $115 >>> 3;
									$117 = $116 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i37 = (($112) + ($117<<3)|0);
									HEAP32[$111>>2] = $scevgep4$i$i$i$i$i$i$i$i37;
								}
								__ZdlPv($106);
								$$pre$i$i$i39 = HEAP32[$9>>2]|0;
								$109 = $$pre$i$i$i39;
							}
							$110 = ($109|0)==($100|0);
							if ($110) {
								break;
							} else {
								$105 = $109;
							}
						}
						$$pre$i42 = HEAP32[$8>>2]|0;
						$118 = $$pre$i42;
					}
					__ZdlPv($118);
				}
				$119 = HEAP32[$6>>2]|0;
				$120 = ($119|0)==(0|0);
				if (!($120)) {
					$121 = HEAP32[$7>>2]|0;
					$122 = ($121|0)==($119|0);
					if ($122) {
						$137 = $119;
					} else {
						$124 = $121;
						while(1) {
							$123 = ((($124)) + -12|0);
							HEAP32[$7>>2] = $123;
							$125 = HEAP32[$123>>2]|0;
							$126 = ($125|0)==(0|0);
							$127 = $125;
							if ($126) {
								$128 = $123;
							} else {
								$130 = ((($124)) + -8|0);
								$131 = HEAP32[$130>>2]|0;
								$132 = ($131|0)==($125|0);
								if (!($132)) {
									$scevgep$i$i$i$i$i$i$i$i = ((($131)) + -8|0);
									$133 = $scevgep$i$i$i$i$i$i$i$i;
									$134 = (($133) - ($127))|0;
									$135 = $134 >>> 3;
									$136 = $135 ^ -1;
									$scevgep4$i$i$i$i$i$i$i$i = (($131) + ($136<<3)|0);
									HEAP32[$130>>2] = $scevgep4$i$i$i$i$i$i$i$i;
								}
								__ZdlPv($125);
								$$pre$i$i$i = HEAP32[$7>>2]|0;
								$128 = $$pre$i$i$i;
							}
							$129 = ($128|0)==($119|0);
							if ($129) {
								break;
							} else {
								$124 = $128;
							}
						}
						$$pre$i = HEAP32[$6>>2]|0;
						$137 = $$pre$i;
					}
					__ZdlPv($137);
				}
				$138 = HEAP32[$4>>2]|0;
				$139 = ($138|0)==(0|0);
				$140 = $138;
				if (!($139)) {
					$141 = HEAP32[$5>>2]|0;
					$142 = ($141|0)==($138|0);
					if (!($142)) {
						$scevgep$i$i$i9 = ((($141)) + -16|0);
						$143 = $scevgep$i$i$i9;
						$144 = (($143) - ($140))|0;
						$145 = $144 >>> 4;
						$146 = $145 ^ -1;
						$scevgep4$i$i$i10 = (($141) + ($146<<4)|0);
						HEAP32[$5>>2] = $scevgep4$i$i$i10;
					}
					__ZdlPv($138);
				}
				$147 = HEAP32[$2>>2]|0;
				$148 = ($147|0)==(0|0);
				$149 = $147;
				if ($148) {
					___resumeException($$45|0);
					// unreachable;
				}
				$150 = HEAP32[$3>>2]|0;
				$151 = ($150|0)==($147|0);
				if (!($151)) {
					$scevgep$i$i$i = ((($150)) + -16|0);
					$152 = $scevgep$i$i$i;
					$153 = (($152) - ($149))|0;
					$154 = $153 >>> 4;
					$155 = $154 ^ -1;
					$scevgep4$i$i$i = (($150) + ($155<<4)|0);
					HEAP32[$3>>2] = $scevgep4$i$i$i;
				}
				__ZdlPv($147);
				___resumeException($$45|0);
				// unreachable;
			}
			function __ZNK8Features13row_scan_initEv($this) {
				$this = $this|0;
				var $$in = 0, $$not = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $col$01 = 0, $l$05 = 0, $l$1$lcssa = 0, $l$12 = 0, $l$2 = 0, $l$3 = 0, $or$cond = 0, $row$03 = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 32|0);
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($2)) + 12|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($2)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = (($4) + 1)|0;
				$8 = (($7) - ($6))|0;
				$9 = ((($this)) + 36|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = HEAP32[$1>>2]|0;
				$12 = (($10) - ($11))|0;
				$13 = (($12|0) / 12)&-1;
				$14 = ($8>>>0)>($13>>>0);
				$15 = $11;
				$16 = $10;
				if ($14) {
					$17 = (($8) - ($13))|0;
					__ZNSt3__16vectorINS0_I8CsegmentNS_9allocatorIS1_EEEENS2_IS4_EEE8__appendEj($1,$17);
				} else {
					$18 = ($8>>>0)<($13>>>0);
					if ($18) {
						$19 = (($15) + (($8*12)|0)|0);
						$20 = ($16|0)==($19|0);
						if (!($20)) {
							$22 = $16;
							while(1) {
								$21 = ((($22)) + -12|0);
								HEAP32[$9>>2] = $21;
								$23 = HEAP32[$21>>2]|0;
								$24 = ($23|0)==(0|0);
								$25 = $23;
								if ($24) {
									$26 = $21;
								} else {
									$28 = ((($22)) + -8|0);
									$29 = HEAP32[$28>>2]|0;
									$30 = ($29|0)==($23|0);
									if (!($30)) {
										$scevgep$i$i$i$i$i$i$i$i = ((($29)) + -8|0);
										$31 = $scevgep$i$i$i$i$i$i$i$i;
										$32 = (($31) - ($25))|0;
										$33 = $32 >>> 3;
										$34 = $33 ^ -1;
										$scevgep4$i$i$i$i$i$i$i$i = (($29) + ($34<<3)|0);
										HEAP32[$28>>2] = $scevgep4$i$i$i$i$i$i$i$i;
									}
									__ZdlPv($23);
									$$pre$i$i$i = HEAP32[$9>>2]|0;
									$26 = $$pre$i$i$i;
								}
								$27 = ($26|0)==($19|0);
								if ($27) {
									break;
								} else {
									$22 = $26;
								}
							}
						}
					}
				}
				$35 = HEAP32[$this>>2]|0;
				$36 = ((($35)) + 4|0);
				$37 = HEAP32[$36>>2]|0;
				$38 = ((($35)) + 12|0);
				$39 = HEAP32[$38>>2]|0;
				$40 = ($37|0)>($39|0);
				if ($40) {
					STACKTOP = sp;return;
				}
				$41 = ((($0)) + 4|0);
				$$in = $35;$l$05 = -1;$row$03 = $37;
				while(1) {
					$42 = HEAP32[$$in>>2]|0;
					$43 = ((($$in)) + 8|0);
					$44 = HEAP32[$43>>2]|0;
					$45 = ($42|0)>($44|0);
					if ($45) {
						$48 = $$in;$l$1$lcssa = $l$05;
					} else {
						$52 = $$in;$68 = $44;$col$01 = $42;$l$12 = $l$05;
						while(1) {
							$51 = ((($52)) + 4|0);
							$53 = HEAP32[$51>>2]|0;
							$54 = (($row$03) - ($53))|0;
							$55 = ((($52)) + 16|0);
							$56 = HEAP32[$55>>2]|0;
							$57 = HEAP32[$52>>2]|0;
							$58 = (($col$01) - ($57))|0;
							$59 = (($56) + (($54*12)|0)|0);
							$60 = HEAP32[$59>>2]|0;
							$61 = (($60) + ($58)|0);
							$62 = HEAP8[$61>>0]|0;
							$63 = ($62<<24>>24)!=(0);
							$64 = ($l$12|0)<(0);
							$65 = $64 & $63;
							$l$2 = $65 ? $col$01 : $l$12;
							$66 = ($l$2|0)>(-1);
							do {
								if ($66) {
									$$not = $63 ^ 1;
									$67 = ($col$01|0)==($68|0);
									$or$cond = $67 | $$not;
									if ($or$cond) {
										$69 = ((($52)) + 4|0);
										$70 = HEAP32[$69>>2]|0;
										$71 = (($row$03) - ($70))|0;
										$72 = HEAP32[$1>>2]|0;
										$73 = $63&1;
										$74 = $73 ^ 1;
										$75 = (($col$01) - ($74))|0;
										HEAP32[$0>>2] = $l$2;
										HEAP32[$41>>2] = $75;
										$76 = (((($72) + (($71*12)|0)|0)) + 4|0);
										$77 = HEAP32[$76>>2]|0;
										$78 = (((($72) + (($71*12)|0)|0)) + 8|0);
										$79 = HEAP32[$78>>2]|0;
										$80 = ($77|0)==($79|0);
										if ($80) {
											$93 = (($72) + (($71*12)|0)|0);
											__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($93,$0);
											$l$3 = -1;
											break;
										} else {
											$81 = $0;
											$82 = $81;
											$83 = HEAP32[$82>>2]|0;
											$84 = (($81) + 4)|0;
											$85 = $84;
											$86 = HEAP32[$85>>2]|0;
											$87 = $77;
											$88 = $87;
											HEAP32[$88>>2] = $83;
											$89 = (($87) + 4)|0;
											$90 = $89;
											HEAP32[$90>>2] = $86;
											$91 = HEAP32[$76>>2]|0;
											$92 = ((($91)) + 8|0);
											HEAP32[$76>>2] = $92;
											$l$3 = -1;
											break;
										}
									} else {
										$l$3 = $l$2;
									}
								} else {
									$l$3 = $l$2;
								}
							} while(0);
							$94 = (($col$01) + 1)|0;
							$95 = HEAP32[$this>>2]|0;
							$96 = ((($95)) + 8|0);
							$97 = HEAP32[$96>>2]|0;
							$98 = ($col$01|0)<($97|0);
							if ($98) {
								$52 = $95;$68 = $97;$col$01 = $94;$l$12 = $l$3;
							} else {
								$48 = $95;$l$1$lcssa = $l$3;
								break;
							}
						}
					}
					$46 = (($row$03) + 1)|0;
					$47 = ((($48)) + 12|0);
					$49 = HEAP32[$47>>2]|0;
					$50 = ($row$03|0)<($49|0);
					if ($50) {
						$$in = $48;$l$05 = $l$1$lcssa;$row$03 = $46;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZNSt3__16vectorINS0_I8CsegmentNS_9allocatorIS1_EEEENS2_IS4_EEE8__appendEj($this,$__n) {
				$this = $this|0;
				$__n = $__n|0;
				var $$0$i = 0, $$0$i1014 = 0, $$0$i1015 = 0, $$0$i12 = 0, $$01$i$i = 0, $$in = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $$pre18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
				var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
				var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
				var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
				var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
				var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__v$sroa$6$0 = 0, $__v$sroa$6$0$lcssa = 0, $scevgep$i = 0, $scevgep$i$i$i$i$i$i$i$i$i = 0, $scevgep$i$i$i$i$i$i$i$i$i3 = 0, $scevgep$i13 = 0, $scevgep4$i$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i$i4 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($1) - ($3))|0;
				$5 = (($4|0) / 12)&-1;
				$6 = ($5>>>0)<($__n>>>0);
				$7 = $3;
				if (!($6)) {
					$$0$i = $__n;$8 = $7;
					while(1) {
						HEAP32[$8>>2] = 0;
						$9 = ((($8)) + 4|0);
						HEAP32[$9>>2] = 0;
						$10 = ((($8)) + 8|0);
						HEAP32[$10>>2] = 0;
						$11 = ((($8)) + 12|0);
						$12 = (($$0$i) + -1)|0;
						$13 = ($12|0)==(0);
						if ($13) {
							break;
						} else {
							$$0$i = $12;$8 = $11;
						}
					}
					$scevgep$i = (($7) + (($__n*12)|0)|0);
					HEAP32[$2>>2] = $scevgep$i;
					return;
				}
				$14 = HEAP32[$this>>2]|0;
				$15 = (($3) - ($14))|0;
				$16 = (($15|0) / 12)&-1;
				$17 = (($16) + ($__n))|0;
				$18 = ($17>>>0)>(357913941);
				if ($18) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$0>>2]|0;
					$$pre18 = HEAP32[$this>>2]|0;
					$$in = $$pre18;$21 = $$pre;
				} else {
					$$in = $14;$21 = $1;
				}
				$19 = $$in;
				$20 = (($21) - ($$in))|0;
				$22 = (($20|0) / 12)&-1;
				$23 = ($22>>>0)<(178956970);
				if ($23) {
					$28 = $22 << 1;
					$29 = ($28>>>0)<($17>>>0);
					$30 = $29 ? $17 : $28;
					$31 = HEAP32[$2>>2]|0;
					$32 = (($31) - ($$in))|0;
					$33 = (($32|0) / 12)&-1;
					$34 = ($30|0)==(0);
					$35 = $31;
					if ($34) {
						$$0$i1015 = 0;$39 = 0;$40 = $33;$51 = $35;
					} else {
						$$0$i1014 = $30;$100 = $35;$101 = $33;
						label = 9;
					}
				} else {
					$24 = HEAP32[$2>>2]|0;
					$25 = (($24) - ($$in))|0;
					$26 = (($25|0) / 12)&-1;
					$27 = $24;
					$$0$i1014 = 357913941;$100 = $27;$101 = $26;
					label = 9;
				}
				if ((label|0) == 9) {
					$36 = ($$0$i1014*12)|0;
					$37 = (__Znwj($36)|0);
					$$0$i1015 = $$0$i1014;$39 = $37;$40 = $101;$51 = $100;
				}
				$38 = (($39) + (($40*12)|0)|0);
				$41 = (($39) + (($$0$i1015*12)|0)|0);
				$$0$i12 = $__n;$42 = $38;
				while(1) {
					HEAP32[$42>>2] = 0;
					$43 = ((($42)) + 4|0);
					HEAP32[$43>>2] = 0;
					$44 = ((($42)) + 8|0);
					HEAP32[$44>>2] = 0;
					$45 = ((($42)) + 12|0);
					$46 = (($$0$i12) + -1)|0;
					$47 = ($46|0)==(0);
					if ($47) {
						break;
					} else {
						$$0$i12 = $46;$42 = $45;
					}
				}
				$48 = $38;
				$49 = $41;
				$scevgep$i13 = (($38) + (($__n*12)|0)|0);
				$50 = $scevgep$i13;
				$52 = ($51|0)==($19|0);
				do {
					if ($52) {
						$62 = $48;$64 = $$in;
					} else {
						$$01$i$i = $51;$54 = $38;$__v$sroa$6$0 = $48;
						while(1) {
							$53 = ((($54)) + -12|0);
							$55 = ((($$01$i$i)) + -12|0);
							__THREW__ = 0;
							invoke_vii(81,($53|0),($55|0));
							$56 = __THREW__; __THREW__ = 0;
							$57 = $56&1;
							if ($57) {
								$__v$sroa$6$0$lcssa = $__v$sroa$6$0;
								break;
							}
							$58 = $__v$sroa$6$0;
							$59 = ((($58)) + -12|0);
							$60 = $59;
							$61 = ($55|0)==($19|0);
							if ($61) {
								$$lcssa = $60;
								label = 15;
								break;
							} else {
								$$01$i$i = $55;$54 = $59;$__v$sroa$6$0 = $60;
							}
						}
						if ((label|0) == 15) {
							$$pre$i = HEAP32[$this>>2]|0;
							$62 = $$lcssa;$64 = $$pre$i;
							break;
						}
						$82 = ___cxa_find_matching_catch_2()|0;
						$83 = tempRet0;
						$84 = $__v$sroa$6$0$lcssa;
						$85 = ($scevgep$i13|0)==($84|0);
						if (!($85)) {
							$87 = $scevgep$i13;
							while(1) {
								$86 = ((($87)) + -12|0);
								$88 = HEAP32[$86>>2]|0;
								$89 = ($88|0)==(0|0);
								$90 = $88;
								if (!($89)) {
									$92 = ((($87)) + -8|0);
									$93 = HEAP32[$92>>2]|0;
									$94 = ($93|0)==($88|0);
									if (!($94)) {
										$scevgep$i$i$i$i$i$i$i$i$i = ((($93)) + -8|0);
										$95 = $scevgep$i$i$i$i$i$i$i$i$i;
										$96 = (($95) - ($90))|0;
										$97 = $96 >>> 3;
										$98 = $97 ^ -1;
										$scevgep4$i$i$i$i$i$i$i$i$i = (($93) + ($98<<3)|0);
										HEAP32[$92>>2] = $scevgep4$i$i$i$i$i$i$i$i$i;
									}
									__ZdlPv($88);
								}
								$91 = ($86|0)==($84|0);
								if ($91) {
									break;
								} else {
									$87 = $86;
								}
							}
						}
						$99 = ($39|0)==(0|0);
						if ($99) {
							___resumeException($82|0);
							// unreachable;
						}
						__ZdlPv($39);
						___resumeException($82|0);
						// unreachable;
					}
				} while(0);
				HEAP32[$this>>2] = $62;
				$63 = HEAP32[$2>>2]|0;
				HEAP32[$2>>2] = $50;
				HEAP32[$0>>2] = $49;
				$65 = $64;
				$66 = ($63|0)==($65|0);
				if (!($66)) {
					$68 = $63;
					while(1) {
						$67 = ((($68)) + -12|0);
						$69 = HEAP32[$67>>2]|0;
						$70 = ($69|0)==(0|0);
						$71 = $69;
						if (!($70)) {
							$73 = ((($68)) + -8|0);
							$74 = HEAP32[$73>>2]|0;
							$75 = ($74|0)==($69|0);
							if (!($75)) {
								$scevgep$i$i$i$i$i$i$i$i$i3 = ((($74)) + -8|0);
								$76 = $scevgep$i$i$i$i$i$i$i$i$i3;
								$77 = (($76) - ($71))|0;
								$78 = $77 >>> 3;
								$79 = $78 ^ -1;
								$scevgep4$i$i$i$i$i$i$i$i$i4 = (($74) + ($79<<3)|0);
								HEAP32[$73>>2] = $scevgep4$i$i$i$i$i$i$i$i$i4;
							}
							__ZdlPv($69);
						}
						$72 = ($67|0)==($65|0);
						if ($72) {
							break;
						} else {
							$68 = $67;
						}
					}
				}
				$80 = ($64|0)==(0);
				if ($80) {
					return;
				}
				$81 = $64;
				__ZdlPv($81);
				return;
			}
			function __ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 3;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(536870911);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 3;
				$11 = ($10>>>0)<(268435455);
				if ($11) {
					$15 = $9 >> 2;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 3;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$42 = $18;
					} else {
						$$0$i1 = $17;$50 = $18;$51 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 3;
					$$0$i1 = 536870911;$50 = $12;$51 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 3;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $51;$42 = $50;
				}
				$24 = (($25) + ($26<<3)|0);
				$27 = (($25) + ($$0$i2<<3)|0);
				$28 = $27;
				$29 = $__x;
				$30 = $29;
				$31 = HEAP32[$30>>2]|0;
				$32 = (($29) + 4)|0;
				$33 = $32;
				$34 = HEAP32[$33>>2]|0;
				$35 = $24;
				$36 = $35;
				HEAP32[$36>>2] = $31;
				$37 = (($35) + 4)|0;
				$38 = $37;
				HEAP32[$38>>2] = $34;
				$39 = ((($24)) + 8|0);
				$40 = $39;
				$41 = (($42) - ($$in))|0;
				$43 = $41 >> 3;
				$44 = (0 - ($43))|0;
				$45 = (($24) + ($44<<3)|0);
				$46 = $45;
				$47 = $$in;
				_memcpy(($45|0),($47|0),($41|0))|0;
				HEAP32[$this>>2] = $46;
				HEAP32[$0>>2] = $40;
				HEAP32[$7>>2] = $28;
				$48 = ($$in|0)==(0);
				if ($48) {
					return;
				}
				$49 = $$in;
				__ZdlPv($49);
				return;
			}
			function __ZNK8Features13col_scan_initEv($this) {
				$this = $this|0;
				var $$in = 0, $$not = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $col$03 = 0, $or$cond = 0, $row$01 = 0, $scevgep$i$i$i$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i$i$i$i = 0, $t$05 = 0, $t$1$lcssa = 0, $t$12 = 0, $t$2 = 0, $t$3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 44|0);
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($2)) + 8|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = ((($this)) + 48|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$1>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = (($11|0) / 12)&-1;
				$13 = ($7>>>0)>($12>>>0);
				$14 = $10;
				$15 = $9;
				if ($13) {
					$16 = (($7) - ($12))|0;
					__ZNSt3__16vectorINS0_I8CsegmentNS_9allocatorIS1_EEEENS2_IS4_EEE8__appendEj($1,$16);
				} else {
					$17 = ($7>>>0)<($12>>>0);
					if ($17) {
						$18 = (($14) + (($7*12)|0)|0);
						$19 = ($15|0)==($18|0);
						if (!($19)) {
							$21 = $15;
							while(1) {
								$20 = ((($21)) + -12|0);
								HEAP32[$8>>2] = $20;
								$22 = HEAP32[$20>>2]|0;
								$23 = ($22|0)==(0|0);
								$24 = $22;
								if ($23) {
									$25 = $20;
								} else {
									$27 = ((($21)) + -8|0);
									$28 = HEAP32[$27>>2]|0;
									$29 = ($28|0)==($22|0);
									if (!($29)) {
										$scevgep$i$i$i$i$i$i$i$i = ((($28)) + -8|0);
										$30 = $scevgep$i$i$i$i$i$i$i$i;
										$31 = (($30) - ($24))|0;
										$32 = $31 >>> 3;
										$33 = $32 ^ -1;
										$scevgep4$i$i$i$i$i$i$i$i = (($28) + ($33<<3)|0);
										HEAP32[$27>>2] = $scevgep4$i$i$i$i$i$i$i$i;
									}
									__ZdlPv($22);
									$$pre$i$i$i = HEAP32[$8>>2]|0;
									$25 = $$pre$i$i$i;
								}
								$26 = ($25|0)==($18|0);
								if ($26) {
									break;
								} else {
									$21 = $25;
								}
							}
						}
					}
				}
				$34 = HEAP32[$this>>2]|0;
				$35 = HEAP32[$34>>2]|0;
				$36 = ((($34)) + 8|0);
				$37 = HEAP32[$36>>2]|0;
				$38 = ($35|0)>($37|0);
				if ($38) {
					STACKTOP = sp;return;
				}
				$39 = ((($0)) + 4|0);
				$$in = $34;$col$03 = $35;$t$05 = -1;
				while(1) {
					$40 = ((($$in)) + 4|0);
					$41 = HEAP32[$40>>2]|0;
					$42 = ((($$in)) + 12|0);
					$43 = HEAP32[$42>>2]|0;
					$44 = ($41|0)>($43|0);
					if ($44) {
						$47 = $$in;$t$1$lcssa = $t$05;
					} else {
						$51 = $$in;$67 = $43;$row$01 = $41;$t$12 = $t$05;
						while(1) {
							$50 = ((($51)) + 4|0);
							$52 = HEAP32[$50>>2]|0;
							$53 = (($row$01) - ($52))|0;
							$54 = ((($51)) + 16|0);
							$55 = HEAP32[$54>>2]|0;
							$56 = HEAP32[$51>>2]|0;
							$57 = (($col$03) - ($56))|0;
							$58 = (($55) + (($53*12)|0)|0);
							$59 = HEAP32[$58>>2]|0;
							$60 = (($59) + ($57)|0);
							$61 = HEAP8[$60>>0]|0;
							$62 = ($61<<24>>24)!=(0);
							$63 = ($t$12|0)<(0);
							$64 = $63 & $62;
							$t$2 = $64 ? $row$01 : $t$12;
							$65 = ($t$2|0)>(-1);
							do {
								if ($65) {
									$$not = $62 ^ 1;
									$66 = ($row$01|0)==($67|0);
									$or$cond = $66 | $$not;
									if ($or$cond) {
										$68 = HEAP32[$51>>2]|0;
										$69 = (($col$03) - ($68))|0;
										$70 = HEAP32[$1>>2]|0;
										$71 = $62&1;
										$72 = $71 ^ 1;
										$73 = (($row$01) - ($72))|0;
										HEAP32[$0>>2] = $t$2;
										HEAP32[$39>>2] = $73;
										$74 = (((($70) + (($69*12)|0)|0)) + 4|0);
										$75 = HEAP32[$74>>2]|0;
										$76 = (((($70) + (($69*12)|0)|0)) + 8|0);
										$77 = HEAP32[$76>>2]|0;
										$78 = ($75|0)==($77|0);
										if ($78) {
											$91 = (($70) + (($69*12)|0)|0);
											__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($91,$0);
											$t$3 = -1;
											break;
										} else {
											$79 = $0;
											$80 = $79;
											$81 = HEAP32[$80>>2]|0;
											$82 = (($79) + 4)|0;
											$83 = $82;
											$84 = HEAP32[$83>>2]|0;
											$85 = $75;
											$86 = $85;
											HEAP32[$86>>2] = $81;
											$87 = (($85) + 4)|0;
											$88 = $87;
											HEAP32[$88>>2] = $84;
											$89 = HEAP32[$74>>2]|0;
											$90 = ((($89)) + 8|0);
											HEAP32[$74>>2] = $90;
											$t$3 = -1;
											break;
										}
									} else {
										$t$3 = $t$2;
									}
								} else {
									$t$3 = $t$2;
								}
							} while(0);
							$92 = (($row$01) + 1)|0;
							$93 = HEAP32[$this>>2]|0;
							$94 = ((($93)) + 12|0);
							$95 = HEAP32[$94>>2]|0;
							$96 = ($row$01|0)<($95|0);
							if ($96) {
								$51 = $93;$67 = $95;$row$01 = $92;$t$12 = $t$3;
							} else {
								$47 = $93;$t$1$lcssa = $t$3;
								break;
							}
						}
					}
					$45 = (($col$03) + 1)|0;
					$46 = ((($47)) + 8|0);
					$48 = HEAP32[$46>>2]|0;
					$49 = ($col$03|0)<($48|0);
					if ($49) {
						$$in = $47;$col$03 = $45;$t$05 = $t$1$lcssa;
					} else {
						break;
					}
				}
				STACKTOP = sp;return;
			}
			function __ZNK8Features5hbarsEv($this) {
				$this = $this|0;
				var $$$i = 0, $$in = 0, $$in113 = 0, $$l$1 = 0, $$lcssa = 0, $$lcssa118 = 0, $$maxsize$0 = 0, $$op = 0, $$op23 = 0, $$op24 = 0, $$op25 = 0, $$phi$trans$insert93 = 0, $$pre = 0, $$pre$phi100Z2D = 0, $$pre$phi102Z2D = 0, $$pre$phi108Z2D = 0, $$pre$phi110Z2D = 0, $$pre$phi97Z2D = 0, $$pre101 = 0, $$pre103 = 0;
				var $$pre105 = 0, $$pre94 = 0, $$pre95 = 0, $$pre96 = 0, $$pre99 = 0, $$wmin$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
				var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
				var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
				var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
				var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
				var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
				var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
				var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
				var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
				var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
				var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
				var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
				var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
				var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
				var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $37 = 0;
				var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
				var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
				var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
				var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $begin$073 = 0, $begin$1 = 0, $begin$2$lcssa = 0, $begin$258 = 0, $begin$3 = 0, $end$0$lcssa = 0, $end$063 = 0, $i$087 = 0, $i1$076 = 0, $i6$052 = 0, $i7$0 = 0;
				var $i7$054 = 0, $i7$055 = 0, $j$0$jmax$0 = 0, $j$0$jmax$0$lcssa = 0, $j$080 = 0, $j2$067 = 0, $j4$069 = 0, $jmax$081 = 0, $l$074 = 0, $l$1 = 0, $l$3 = 0, $l$4 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $maxsize$082 = 0, $not$or$cond$i = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $r$075 = 0;
				var $r$1 = 0, $r$2 = 0, $r$3 = 0, $r$4 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i4 = 0, $scevgep$i$i$i9 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i10 = 0, $scevgep4$i$i$i5 = 0, $segv = 0, $state$072 = 0, $state$2 = 0, $wmin$0$lcssa = 0, $wmin$051 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$segv = sp + 24|0;
				$0 = sp;
				$1 = sp + 8|0;
				$2 = ((($this)) + 4|0);
				$3 = HEAP8[$2>>0]|0;
				$4 = ($3<<24>>24)==(0);
				if (!($4)) {
					$$pre103 = ((($this)) + 8|0);
					$$pre105 = ((($this)) + 12|0);
					$$pre$phi108Z2D = $$pre105;$$pre$phi110Z2D = $$pre103;
					$355 = HEAP32[$$pre$phi108Z2D>>2]|0;
					$356 = HEAP32[$$pre$phi110Z2D>>2]|0;
					$357 = (($355) - ($356))|0;
					$358 = $357 >> 4;
					STACKTOP = sp;return ($358|0);
				}
				HEAP8[$2>>0] = 1;
				$5 = ((($this)) + 32|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ((($this)) + 36|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ($6|0)==($8|0);
				if ($9) {
					__ZNK8Features13row_scan_initEv($this);
				}
				HEAP32[$segv>>2] = 0;
				$10 = ((($segv)) + 4|0);
				HEAP32[$10>>2] = 0;
				$11 = ((($segv)) + 8|0);
				HEAP32[$11>>2] = 0;
				$12 = HEAP32[$this>>2]|0;
				$13 = ((($12)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($12)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = (($14) + 1)|0;
				$18 = (($17) - ($16))|0;
				$19 = ((($segv)) + 8|0);
				$20 = ($17|0)==($16|0);
				do {
					if ($20) {
						label = 10;
					} else {
						$21 = ($17|0)==($16|0);
						if ($21) {
							$26 = 0;
						} else {
							$22 = $18 << 3;
							__THREW__ = 0;
							$23 = (invoke_ii(29,($22|0))|0);
							$24 = __THREW__; __THREW__ = 0;
							$25 = $24&1;
							if ($25) {
								label = 15;
								break;
							}
							$26 = $23;
						}
						$27 = $26;
						$28 = (($26) + ($18<<3)|0);
						$29 = $28;
						HEAP32[$segv>>2] = $27;
						HEAP32[$10>>2] = $27;
						HEAP32[$19>>2] = $29;
						label = 10;
					}
				} while(0);
				L14: do {
					if ((label|0) == 10) {
						$30 = HEAP32[$7>>2]|0;
						$31 = HEAP32[$5>>2]|0;
						$32 = ($30|0)==($31|0);
						L16: do {
							if (!($32)) {
								$33 = ((($0)) + 4|0);
								$$in = $31;$i$087 = 0;
								L18: while(1) {
									$53 = $$in;
									$54 = (($53) + (($i$087*12)|0)|0);
									$55 = (((($53) + (($i$087*12)|0)|0)) + 4|0);
									$56 = HEAP32[$55>>2]|0;
									$57 = HEAP32[$54>>2]|0;
									$58 = (($56) - ($57))|0;
									$59 = ($58|0)==(8);
									$60 = $57;
									do {
										if ($59) {
											$74 = HEAP32[$10>>2]|0;
											$75 = HEAP32[$19>>2]|0;
											$76 = ($74|0)==($75|0);
											if ($76) {
												__THREW__ = 0;
												invoke_vii(182,($segv|0),($60|0));
												$90 = __THREW__; __THREW__ = 0;
												$91 = $90&1;
												if ($91) {
													break L18;
												} else {
													break;
												}
											} else {
												$77 = $57;
												$78 = $77;
												$79 = $78;
												$80 = HEAP32[$79>>2]|0;
												$81 = (($78) + 4)|0;
												$82 = $81;
												$83 = HEAP32[$82>>2]|0;
												$84 = $74;
												$85 = $84;
												HEAP32[$85>>2] = $80;
												$86 = (($84) + 4)|0;
												$87 = $86;
												HEAP32[$87>>2] = $83;
												$88 = HEAP32[$10>>2]|0;
												$89 = ((($88)) + 8|0);
												HEAP32[$10>>2] = $89;
												break;
											}
										} else {
											$61 = (($53) + (($i$087*12)|0)|0);
											$62 = (((($53) + (($i$087*12)|0)|0)) + 4|0);
											$63 = HEAP32[$62>>2]|0;
											$64 = HEAP32[$61>>2]|0;
											$65 = ($63|0)==($64|0);
											if (!($65)) {
												$66 = (($53) + (($i$087*12)|0)|0);
												$67 = (((($53) + (($i$087*12)|0)|0)) + 4|0);
												$68 = HEAP32[$67>>2]|0;
												$69 = HEAP32[$66>>2]|0;
												$70 = (($68) - ($69))|0;
												$71 = $70 >> 3;
												$72 = (($53) + (($i$087*12)|0)|0);
												$73 = HEAP32[$72>>2]|0;
												$j$080 = 0;$jmax$081 = -1;$maxsize$082 = 0;
												while(1) {
													$93 = (($73) + ($j$080<<3)|0);
													$94 = HEAP32[$93>>2]|0;
													$95 = (((($73) + ($j$080<<3)|0)) + 4|0);
													$96 = HEAP32[$95>>2]|0;
													$97 = ($96|0)<($94|0);
													$98 = (1 - ($94))|0;
													$99 = (($98) + ($96))|0;
													$100 = $97 ? 0 : $99;
													$101 = ($maxsize$082|0)<($100|0);
													$j$0$jmax$0 = $101 ? $j$080 : $jmax$081;
													$$maxsize$0 = $101 ? $100 : $maxsize$082;
													$102 = (($j$080) + 1)|0;
													$103 = ($102>>>0)<($71>>>0);
													if ($103) {
														$j$080 = $102;$jmax$081 = $j$0$jmax$0;$maxsize$082 = $$maxsize$0;
													} else {
														$j$0$jmax$0$lcssa = $j$0$jmax$0;
														break;
													}
												}
												$92 = ($j$0$jmax$0$lcssa|0)>(-1);
												if ($92) {
													$104 = (($53) + (($i$087*12)|0)|0);
													$105 = HEAP32[$104>>2]|0;
													$106 = (($105) + ($j$0$jmax$0$lcssa<<3)|0);
													$107 = HEAP32[$10>>2]|0;
													$108 = HEAP32[$19>>2]|0;
													$109 = ($107|0)==($108|0);
													if ($109) {
														__THREW__ = 0;
														invoke_vii(182,($segv|0),($106|0));
														$122 = __THREW__; __THREW__ = 0;
														$123 = $122&1;
														if ($123) {
															break L18;
														} else {
															break;
														}
													} else {
														$110 = $106;
														$111 = $110;
														$112 = HEAP32[$111>>2]|0;
														$113 = (($110) + 4)|0;
														$114 = $113;
														$115 = HEAP32[$114>>2]|0;
														$116 = $107;
														$117 = $116;
														HEAP32[$117>>2] = $112;
														$118 = (($116) + 4)|0;
														$119 = $118;
														HEAP32[$119>>2] = $115;
														$120 = HEAP32[$10>>2]|0;
														$121 = ((($120)) + 8|0);
														HEAP32[$10>>2] = $121;
														break;
													}
												}
											}
											HEAP32[$0>>2] = 1;
											HEAP32[$33>>2] = 0;
											$124 = HEAP32[$10>>2]|0;
											$125 = HEAP32[$19>>2]|0;
											$126 = ($124|0)==($125|0);
											if ($126) {
												__THREW__ = 0;
												invoke_vii(182,($segv|0),($0|0));
												$139 = __THREW__; __THREW__ = 0;
												$140 = $139&1;
												if ($140) {
													break L18;
												} else {
													break;
												}
											} else {
												$127 = $0;
												$128 = $127;
												$129 = HEAP32[$128>>2]|0;
												$130 = (($127) + 4)|0;
												$131 = $130;
												$132 = HEAP32[$131>>2]|0;
												$133 = $124;
												$134 = $133;
												HEAP32[$134>>2] = $129;
												$135 = (($133) + 4)|0;
												$136 = $135;
												HEAP32[$136>>2] = $132;
												$137 = HEAP32[$10>>2]|0;
												$138 = ((($137)) + 8|0);
												HEAP32[$10>>2] = $138;
												break;
											}
										}
									} while(0);
									$141 = (($i$087) + 1)|0;
									$142 = HEAP32[$7>>2]|0;
									$143 = HEAP32[$5>>2]|0;
									$144 = (($142) - ($143))|0;
									$145 = (($144|0) / 12)&-1;
									$146 = ($141>>>0)<($145>>>0);
									if ($146) {
										$$in = $143;$i$087 = $141;
									} else {
										break L16;
									}
								}
								$40 = ___cxa_find_matching_catch_2()|0;
								$41 = tempRet0;
								$lpad$phi$index = $40;$lpad$phi$index3 = $41;
								break L14;
							}
						} while(0);
						$34 = ((($this)) + 296|0);
						__THREW__ = 0;
						$35 = (invoke_ii(148,($34|0))|0);
						$36 = __THREW__; __THREW__ = 0;
						$37 = $36&1;
						if ($37) {
							label = 15;
						} else {
							$147 = (($35) + 1)|0;
							$148 = (($147|0) / 2)&-1;
							$149 = HEAP32[$this>>2]|0;
							$150 = ((($149)) + 12|0);
							$151 = HEAP32[$150>>2]|0;
							$152 = ((($149)) + 4|0);
							$153 = HEAP32[$152>>2]|0;
							$154 = (($151) + 1)|0;
							$155 = (($154) - ($153))|0;
							$156 = ($155|0)>(0);
							L43: do {
								if ($156) {
									$157 = ((($this)) + 12|0);
									$158 = ((($this)) + 16|0);
									$159 = ((($this)) + 8|0);
									$177 = $155;$197 = $153;$198 = $151;$begin$073 = 0;$i1$076 = 0;$l$074 = 0;$r$075 = 0;$state$072 = 0;
									L45: while(1) {
										$166 = HEAP32[$segv>>2]|0;
										$167 = (($166) + ($i1$076<<3)|0);
										switch ($state$072|0) {
											case 0:  {
												$168 = HEAP32[$167>>2]|0;
												$169 = (((($166) + ($i1$076<<3)|0)) + 4|0);
												$170 = HEAP32[$169>>2]|0;
												$171 = ($170|0)<($168|0);
												$172 = (1 - ($168))|0;
												$173 = (($172) + ($170))|0;
												$174 = $171 ? 0 : $173;
												$175 = ($174|0)>($148|0);
												if ($175) {
													$176 = (($177) + -1)|0;
													$178 = ($i1$076|0)<($176|0);
													if ($178) {
														$begin$3 = $i1$076;$l$4 = $168;$r$4 = $170;$state$2 = 1;
													} else {
														$$pre$phi97Z2D = $169;$179 = $170;$181 = $168;$begin$1 = $i1$076;$l$1 = $168;$r$1 = $170;
														label = 44;
													}
												} else {
													$begin$3 = $begin$073;$l$4 = $l$074;$r$4 = $r$075;$state$2 = 0;
												}
												break;
											}
											case 1:  {
												$$pre = HEAP32[$167>>2]|0;
												$$phi$trans$insert93 = (((($166) + ($i1$076<<3)|0)) + 4|0);
												$$pre94 = HEAP32[$$phi$trans$insert93>>2]|0;
												$$pre$phi97Z2D = $$phi$trans$insert93;$179 = $$pre94;$181 = $$pre;$begin$1 = $begin$073;$l$1 = $l$074;$r$1 = $r$075;
												label = 44;
												break;
											}
											default: {
												$begin$3 = $begin$073;$l$4 = $l$074;$r$4 = $r$075;$state$2 = $state$072;
											}
										}
										L51: do {
											if ((label|0) == 44) {
												label = 0;
												$180 = ($179|0)<($181|0);
												$182 = (1 - ($181))|0;
												$183 = (($182) + ($179))|0;
												$184 = $180 ? 0 : $183;
												$185 = ($184|0)>($148|0);
												do {
													if ($185) {
														$186 = ($i1$076|0)>($begin$1|0);
														if ($186) {
															$187 = (($i1$076) + -1)|0;
															if ($180) {
																$l$3 = $l$1;$r$3 = $r$1;
																break;
															}
															$188 = (($166) + ($187<<3)|0);
															$189 = HEAP32[$188>>2]|0;
															$190 = (((($166) + ($187<<3)|0)) + 4|0);
															$191 = HEAP32[$190>>2]|0;
															$192 = ($179|0)>=($189|0);
															$notlhs$i = ($189|0)<=($191|0);
															$notrhs$i = ($181|0)<=($191|0);
															$not$or$cond$i = $notrhs$i & $notlhs$i;
															$$$i = $192 & $not$or$cond$i;
															if (!($$$i)) {
																$l$3 = $l$1;$r$3 = $r$1;
																break;
															}
														}
														$193 = ($181|0)<($l$1|0);
														$$l$1 = $193 ? $181 : $l$1;
														$194 = HEAP32[$$pre$phi97Z2D>>2]|0;
														$195 = ($194|0)>($r$1|0);
														$r$2 = $195 ? $194 : $r$1;
														$196 = (($198) - ($197))|0;
														$199 = ($i1$076|0)<($196|0);
														if ($199) {
															$begin$3 = $begin$1;$l$4 = $$l$1;$r$4 = $r$2;$state$2 = 1;
															break L51;
														} else {
															$l$3 = $$l$1;$r$3 = $r$2;
														}
													} else {
														$l$3 = $l$1;$r$3 = $r$1;
													}
												} while(0);
												$200 = HEAP32[$$pre$phi97Z2D>>2]|0;
												$201 = ($200|0)<($181|0);
												$202 = (($182) + ($200))|0;
												$203 = $201 ? 0 : $202;
												$204 = ($203|0)<=($148|0);
												$205 = $204 << 31 >> 31;
												$206 = (($205) + ($i1$076))|0;
												$207 = (($r$3) - ($l$3))|0;
												$208 = (($207) + 1)|0;
												$209 = ($begin$1|0)>($206|0);
												L60: do {
													if ($209) {
														$begin$2$lcssa = $begin$1;
													} else {
														$210 = $208 << 1;
														$begin$258 = $begin$1;
														while(1) {
															$213 = (($166) + ($begin$258<<3)|0);
															$214 = HEAP32[$213>>2]|0;
															$215 = (((($166) + ($begin$258<<3)|0)) + 4|0);
															$216 = HEAP32[$215>>2]|0;
															$217 = ($216|0)<($214|0);
															$218 = (1 - ($214))|0;
															$219 = (($218) + ($216))|0;
															$$op = ($219*3)|0;
															$220 = $217 ? 0 : $$op;
															$221 = ($220|0)<($210|0);
															if (!($221)) {
																$begin$2$lcssa = $begin$258;
																break L60;
															}
															$222 = (($begin$258) + 1)|0;
															$223 = ($begin$258|0)<($206|0);
															if ($223) {
																$begin$258 = $222;
															} else {
																$begin$2$lcssa = $222;
																break;
															}
														}
													}
												} while(0);
												$211 = ($206|0)<($begin$2$lcssa|0);
												L66: do {
													if ($211) {
														$end$0$lcssa = $206;
													} else {
														$212 = $208 << 1;
														$end$063 = $206;
														while(1) {
															$224 = (($166) + ($end$063<<3)|0);
															$225 = HEAP32[$224>>2]|0;
															$226 = (((($166) + ($end$063<<3)|0)) + 4|0);
															$227 = HEAP32[$226>>2]|0;
															$228 = ($227|0)<($225|0);
															$229 = (1 - ($225))|0;
															$230 = (($229) + ($227))|0;
															$$op23 = ($230*3)|0;
															$231 = $228 ? 0 : $$op23;
															$232 = ($231|0)<($212|0);
															if (!($232)) {
																$end$0$lcssa = $end$063;
																break L66;
															}
															$233 = (($end$063) + -1)|0;
															$234 = ($end$063|0)>($begin$2$lcssa|0);
															if ($234) {
																$end$063 = $233;
															} else {
																$end$0$lcssa = $233;
																break;
															}
														}
													}
												} while(0);
												$235 = (($end$0$lcssa) - ($begin$2$lcssa))|0;
												$236 = (($235) + 1)|0;
												$237 = ($235|0)<(0);
												$238 = ($235|0)>($207|0);
												$or$cond = $237 | $238;
												if ($or$cond) {
													$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
												} else {
													$239 = (($198) + 1)|0;
													$240 = (($239) - ($197))|0;
													$241 = (($240|0) / 10)&-1;
													$242 = (($241) + 1)|0;
													$243 = ($236|0)<($242|0);
													$244 = $243 ? $242 : $236;
													$245 = ($begin$2$lcssa|0)<($244|0);
													L73: do {
														if (!($245)) {
															$246 = ($244|0)>(0);
															if (!($246)) {
																$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
																break L51;
															}
															$247 = $208 << 1;
															$j2$067 = $244;
															while(1) {
																$250 = (($begin$2$lcssa) - ($j2$067))|0;
																$251 = (($166) + ($250<<3)|0);
																$252 = HEAP32[$251>>2]|0;
																$253 = (((($166) + ($250<<3)|0)) + 4|0);
																$254 = HEAP32[$253>>2]|0;
																$255 = ($254|0)<($252|0);
																$256 = (1 - ($252))|0;
																$257 = (($256) + ($254))|0;
																$$op24 = ($257*3)|0;
																$258 = $255 ? 0 : $$op24;
																$259 = ($258|0)>($247|0);
																if (!($259)) {
																	break L73;
																}
																$248 = (($j2$067) + -1)|0;
																$249 = ($j2$067|0)>(1);
																if ($249) {
																	$j2$067 = $248;
																} else {
																	$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
																	break L51;
																}
															}
														}
													} while(0);
													$260 = (($244) + ($end$0$lcssa))|0;
													$261 = ($260|0)<($240|0);
													L80: do {
														if ($261) {
															$262 = ($244|0)>(0);
															if (!($262)) {
																$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
																break L51;
															}
															$263 = $208 << 1;
															$j4$069 = $244;
															while(1) {
																$266 = (($j4$069) + ($end$0$lcssa))|0;
																$267 = (($166) + ($266<<3)|0);
																$268 = HEAP32[$267>>2]|0;
																$269 = (((($166) + ($266<<3)|0)) + 4|0);
																$270 = HEAP32[$269>>2]|0;
																$271 = ($270|0)<($268|0);
																$272 = (1 - ($268))|0;
																$273 = (($272) + ($270))|0;
																$$op25 = ($273*3)|0;
																$274 = $271 ? 0 : $$op25;
																$275 = ($274|0)>($263|0);
																if (!($275)) {
																	break L80;
																}
																$264 = (($j4$069) + -1)|0;
																$265 = ($j4$069|0)>(1);
																if ($265) {
																	$j4$069 = $264;
																} else {
																	$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
																	break L51;
																}
															}
														}
													} while(0);
													$276 = (($197) + ($begin$2$lcssa))|0;
													$277 = (($197) + ($end$0$lcssa))|0;
													__THREW__ = 0;
													invoke_viiiii(183,($1|0),($l$3|0),($276|0),($r$3|0),($277|0));
													$278 = __THREW__; __THREW__ = 0;
													$279 = $278&1;
													if ($279) {
														break L45;
													}
													$280 = HEAP32[$157>>2]|0;
													$281 = HEAP32[$158>>2]|0;
													$282 = ($280|0)==($281|0);
													if ($282) {
														__THREW__ = 0;
														invoke_vii(179,($159|0),($1|0));
														$285 = __THREW__; __THREW__ = 0;
														$286 = $285&1;
														if ($286) {
															break L45;
														} else {
															$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
															break;
														}
													} else {
														;HEAP32[$280>>2]=HEAP32[$1>>2]|0;HEAP32[$280+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$280+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$280+12>>2]=HEAP32[$1+12>>2]|0;
														$283 = HEAP32[$157>>2]|0;
														$284 = ((($283)) + 16|0);
														HEAP32[$157>>2] = $284;
														$begin$3 = $begin$2$lcssa;$l$4 = $l$3;$r$4 = $r$3;$state$2 = 0;
														break;
													}
												}
											}
										} while(0);
										$287 = (($i1$076) + 1)|0;
										$288 = HEAP32[$this>>2]|0;
										$289 = ((($288)) + 12|0);
										$290 = HEAP32[$289>>2]|0;
										$291 = ((($288)) + 4|0);
										$292 = HEAP32[$291>>2]|0;
										$293 = (($290) + 1)|0;
										$294 = (($293) - ($292))|0;
										$295 = ($287|0)<($294|0);
										if ($295) {
											$177 = $294;$197 = $292;$198 = $290;$begin$073 = $begin$3;$i1$076 = $287;$l$074 = $l$4;$r$075 = $r$4;$state$072 = $state$2;
										} else {
											$$pre$phi100Z2D = $159;$$pre$phi102Z2D = $157;
											break L43;
										}
									}
									$38 = ___cxa_find_matching_catch_2()|0;
									$39 = tempRet0;
									$lpad$phi$index = $38;$lpad$phi$index3 = $39;
									break L14;
								} else {
									$$pre99 = ((($this)) + 8|0);
									$$pre101 = ((($this)) + 12|0);
									$$pre$phi100Z2D = $$pre99;$$pre$phi102Z2D = $$pre101;
								}
							} while(0);
							$160 = HEAP32[$$pre$phi102Z2D>>2]|0;
							$161 = HEAP32[$$pre$phi100Z2D>>2]|0;
							$162 = (($160) - ($161))|0;
							$163 = $162 >> 4;
							$164 = ($163>>>0)>(3);
							if ($164) {
								$165 = ((($this)) + 8|0);
								$$in113 = $161;$308 = $160;
								while(1) {
									$301 = $$in113;
									$302 = ((($301)) + 8|0);
									$303 = HEAP32[$302>>2]|0;
									$304 = HEAP32[$301>>2]|0;
									$305 = (($303) + 1)|0;
									$306 = (($305) - ($304))|0;
									$307 = (($308) - ($$in113))|0;
									$309 = $307 >> 4;
									$310 = ($309>>>0)>(1);
									if ($310) {
										$311 = (($308) - ($$in113))|0;
										$312 = $311 >> 4;
										$i6$052 = 1;$wmin$051 = $306;
										while(1) {
											$314 = (((($301) + ($i6$052<<4)|0)) + 8|0);
											$315 = HEAP32[$314>>2]|0;
											$316 = (($301) + ($i6$052<<4)|0);
											$317 = HEAP32[$316>>2]|0;
											$318 = (($315) + 1)|0;
											$319 = (($318) - ($317))|0;
											$320 = ($319|0)<($wmin$051|0);
											$$wmin$0 = $320 ? $319 : $wmin$051;
											$321 = (($i6$052) + 1)|0;
											$322 = ($321>>>0)<($312>>>0);
											if ($322) {
												$i6$052 = $321;$wmin$051 = $$wmin$0;
											} else {
												$$lcssa = $312;$wmin$0$lcssa = $$wmin$0;
												break;
											}
										}
									} else {
										$$lcssa = $309;$wmin$0$lcssa = $306;
									}
									$313 = ($$lcssa|0)>(0);
									if ($313) {
										$i7$054 = (($$lcssa) + -1)|0;
										$324 = $301;$335 = $308;$359 = $308;$i7$055 = $i7$054;
										while(1) {
											$323 = (($324) + ($i7$055<<4)|0);
											$325 = (((($324) + ($i7$055<<4)|0)) + 8|0);
											$326 = HEAP32[$325>>2]|0;
											$327 = HEAP32[$323>>2]|0;
											$328 = (($326) + 1)|0;
											$329 = (($328) - ($327))|0;
											$330 = ($329|0)==($wmin$0$lcssa|0);
											if ($330) {
												$332 = ((($323)) + 16|0);
												$333 = $332;
												$334 = (($335) - ($333))|0;
												$336 = $334 >> 4;
												_memmove(($323|0),($332|0),($334|0))|0;
												$337 = (($323) + ($336<<4)|0);
												$338 = HEAP32[$$pre$phi102Z2D>>2]|0;
												$339 = ($338|0)==($337|0);
												$340 = $338;
												if ($339) {
													$360 = $340;$361 = $340;
												} else {
													$__new_last2$i$i$i = $337;
													$scevgep$i$i$i4 = ((($338)) + -16|0);
													$341 = $scevgep$i$i$i4;
													$342 = (($341) - ($__new_last2$i$i$i))|0;
													$343 = $342 >>> 4;
													$344 = $343 ^ -1;
													$scevgep4$i$i$i5 = (($338) + ($344<<4)|0);
													HEAP32[$$pre$phi102Z2D>>2] = $scevgep4$i$i$i5;
													$345 = $scevgep4$i$i$i5;
													$360 = $345;$361 = $345;
												}
											} else {
												$360 = $359;$361 = $335;
											}
											$i7$0 = (($i7$055) + -1)|0;
											$331 = ($i7$0|0)>(-1);
											if (!($331)) {
												$$lcssa118 = $360;
												break;
											}
											$$pre95 = HEAP32[$165>>2]|0;
											$324 = $$pre95;$335 = $361;$359 = $360;$i7$055 = $i7$0;
										}
										$$pre96 = HEAP32[$$pre$phi100Z2D>>2]|0;
										$297 = $$pre96;$298 = $$lcssa118;
									} else {
										$297 = $$in113;$298 = $308;
									}
									$296 = (($298) - ($297))|0;
									$299 = $296 >> 4;
									$300 = ($299>>>0)>(3);
									if ($300) {
										$$in113 = $297;$308 = $298;
									} else {
										break;
									}
								}
							}
							$346 = HEAP32[$segv>>2]|0;
							$347 = ($346|0)==(0|0);
							$348 = $346;
							if (!($347)) {
								$349 = HEAP32[$10>>2]|0;
								$350 = ($349|0)==($346|0);
								if (!($350)) {
									$scevgep$i$i$i = ((($349)) + -8|0);
									$351 = $scevgep$i$i$i;
									$352 = (($351) - ($348))|0;
									$353 = $352 >>> 3;
									$354 = $353 ^ -1;
									$scevgep4$i$i$i = (($349) + ($354<<3)|0);
									HEAP32[$10>>2] = $scevgep4$i$i$i;
								}
								__ZdlPv($346);
							}
							$$pre$phi108Z2D = $$pre$phi102Z2D;$$pre$phi110Z2D = $$pre$phi100Z2D;
							$355 = HEAP32[$$pre$phi108Z2D>>2]|0;
							$356 = HEAP32[$$pre$phi110Z2D>>2]|0;
							$357 = (($355) - ($356))|0;
							$358 = $357 >> 4;
							STACKTOP = sp;return ($358|0);
						}
					}
				} while(0);
				if ((label|0) == 15) {
					$42 = ___cxa_find_matching_catch_2()|0;
					$43 = tempRet0;
					$lpad$phi$index = $42;$lpad$phi$index3 = $43;
				}
				$44 = HEAP32[$segv>>2]|0;
				$45 = ($44|0)==(0|0);
				$46 = $44;
				if ($45) {
					___resumeException($lpad$phi$index|0);
					// unreachable;
				}
				$47 = HEAP32[$10>>2]|0;
				$48 = ($47|0)==($44|0);
				if (!($48)) {
					$scevgep$i$i$i9 = ((($47)) + -8|0);
					$49 = $scevgep$i$i$i9;
					$50 = (($49) - ($46))|0;
					$51 = $50 >>> 3;
					$52 = $51 ^ -1;
					$scevgep4$i$i$i10 = (($47) + ($52<<3)|0);
					HEAP32[$10>>2] = $scevgep4$i$i$i10;
				}
				__ZdlPv($44);
				___resumeException($lpad$phi$index|0);
				// unreachable;
				return (0)|0;
			}
			function __ZNK8Features5vbarsEv($this) {
				$this = $this|0;
				var $$count$0 = 0, $$in = 0, $$lcssa = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$phi$trans$insert = 0, $$phi$trans$insert42 = 0, $$pre = 0, $$pre43 = 0, $$state$0 = 0, $$state$02 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
				var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
				var $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
				var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
				var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
				var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
				var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $begin$0$col$0 = 0, $begin$0$col$01 = 0;
				var $begin$024 = 0, $begin$1 = 0, $c$0 = 0, $c$0$lcssa140 = 0, $c$0$ph = 0, $c$1 = 0, $c$1$count$0 = 0, $c2$0$ph = 0, $c2$0$ph$lcssa = 0, $c2$0$ph$ph = 0, $c2$1 = 0, $col$025 = 0, $count$0$ph$ph = 0, $count$0$ph$ph$lcssa = 0, $or$cond = 0, $row$0 = 0, $row$0$in = 0, $row$0$in$ph = 0, $row$0$in$ph$ph = 0, $row$0$lcssa142 = 0;
				var $row$0144 = 0, $state$0$ = 0, $state$027 = 0, $state$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$1 = ((($this)) + 5|0);
				$2 = HEAP8[$1>>0]|0;
				$3 = ($2<<24>>24)==(0);
				if (!($3)) {
					$110 = ((($this)) + 20|0);
					$111 = ((($this)) + 24|0);
					$112 = HEAP32[$111>>2]|0;
					$113 = HEAP32[$110>>2]|0;
					$114 = (($112) - ($113))|0;
					$115 = $114 >> 4;
					STACKTOP = sp;return ($115|0);
				}
				HEAP8[$1>>0] = 1;
				$4 = HEAP32[$this>>2]|0;
				$5 = ((($4)) + 12|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ((($4)) + 4|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($6) + 1)|0;
				$10 = (($9) - ($8))|0;
				$11 = ($10|0)<(40);
				$12 = (($10|0) / 10)&-1;
				$13 = $11 ? 3 : $12;
				$14 = (($10) - ($13))|0;
				$15 = HEAP32[$4>>2]|0;
				$16 = ((($4)) + 8|0);
				$17 = HEAP32[$16>>2]|0;
				$18 = ($15|0)>($17|0);
				if ($18) {
					$110 = ((($this)) + 20|0);
					$111 = ((($this)) + 24|0);
					$112 = HEAP32[$111>>2]|0;
					$113 = HEAP32[$110>>2]|0;
					$114 = (($112) - ($113))|0;
					$115 = $114 >> 4;
					STACKTOP = sp;return ($115|0);
				}
				$19 = $14 << 1;
				$20 = ($14*3)|0;
				$21 = ((($this)) + 24|0);
				$22 = ((($this)) + 28|0);
				$23 = ((($this)) + 20|0);
				$$in = $4;$116 = $8;$25 = $6;$94 = $17;$begin$024 = 0;$col$025 = $15;$state$027 = 0;
				while(1) {
					$24 = (($25) + -1)|0;
					$26 = (($col$025) + -1)|0;
					$27 = (($col$025) + 1)|0;
					$117 = $$in;$118 = $$in;$119 = $$in;$120 = $$in;$c2$0$ph$ph = 0;$count$0$ph$ph = 0;$row$0$in$ph$ph = $116;
					L9: while(1) {
						$121 = $120;$29 = $119;$54 = $118;$58 = $117;$c$0$ph = 0;$c2$0$ph = $c2$0$ph$ph;$row$0$in$ph = $row$0$in$ph$ph;
						L11: while(1) {
							$28 = ((($29)) + 4|0);
							$30 = ((($29)) + 16|0);
							$122 = $121;$c$0 = $c$0$ph;$row$0$in = $row$0$in$ph;
							while(1) {
								$row$0 = (($row$0$in) + 1)|0;
								$31 = ($row$0|0)<($25|0);
								if (!($31)) {
									$$lcssa = $122;$c2$0$ph$lcssa = $c2$0$ph;$count$0$ph$ph$lcssa = $count$0$ph$ph;
									break L9;
								}
								$35 = HEAP32[$28>>2]|0;
								$36 = (($row$0) - ($35))|0;
								$37 = HEAP32[$30>>2]|0;
								$38 = HEAP32[$29>>2]|0;
								$39 = (($col$025) - ($38))|0;
								$40 = (($37) + (($36*12)|0)|0);
								$41 = HEAP32[$40>>2]|0;
								$42 = (($41) + ($39)|0);
								$43 = HEAP8[$42>>0]|0;
								$44 = ($43<<24>>24)==(0);
								if ($44) {
									$$lcssa146 = $38;$$lcssa148 = $41;$c$0$lcssa140 = $c$0;$row$0$lcssa142 = $row$0;
									break;
								}
								$45 = (($c$0) + 1)|0;
								$46 = ($row$0|0)<($24|0);
								if ($46) {
									$122 = $29;$c$0 = $45;$row$0$in = $row$0;
								} else {
									$123 = $58;$124 = $54;$125 = $29;$126 = $29;$c$1 = $45;$c2$1 = $c2$0$ph;$row$0144 = $row$0;
									break L11;
								}
							}
							$47 = HEAP32[$$in>>2]|0;
							$48 = ($col$025|0)>($47|0);
							if ($48) {
								$49 = (($26) - ($$lcssa146))|0;
								$50 = (($$lcssa148) + ($49)|0);
								$51 = HEAP8[$50>>0]|0;
								$52 = ($51<<24>>24)==(0);
								if ($52) {
									label = 13;
								}
							} else {
								label = 13;
							}
							if ((label|0) == 13) {
								label = 0;
								$53 = ((($54)) + 8|0);
								$55 = HEAP32[$53>>2]|0;
								$56 = ($col$025|0)<($55|0);
								if (!($56)) {
									$123 = $58;$124 = $54;$125 = $54;$126 = $54;$c$1 = $c$0$lcssa140;$c2$1 = $c2$0$ph;$row$0144 = $row$0$lcssa142;
									break;
								}
								$57 = ((($58)) + 4|0);
								$59 = HEAP32[$57>>2]|0;
								$60 = (($row$0$lcssa142) - ($59))|0;
								$61 = ((($58)) + 16|0);
								$62 = HEAP32[$61>>2]|0;
								$63 = HEAP32[$58>>2]|0;
								$64 = (($27) - ($63))|0;
								$65 = (($62) + (($60*12)|0)|0);
								$66 = HEAP32[$65>>2]|0;
								$67 = (($66) + ($64)|0);
								$68 = HEAP8[$67>>0]|0;
								$69 = ($68<<24>>24)==(0);
								if ($69) {
									$123 = $58;$124 = $58;$125 = $58;$126 = $58;$c$1 = $c$0$lcssa140;$c2$1 = $c2$0$ph;$row$0144 = $row$0$lcssa142;
									break;
								}
							}
							$70 = (($c$0$lcssa140) + 1)|0;
							$71 = (($c2$0$ph) + 1)|0;
							$72 = ($row$0$lcssa142|0)<($24|0);
							if ($72) {
								$121 = $$in;$29 = $$in;$54 = $$in;$58 = $$in;$c$0$ph = $70;$c2$0$ph = $71;$row$0$in$ph = $row$0$lcssa142;
							} else {
								$123 = $$in;$124 = $$in;$125 = $$in;$126 = $$in;$c$1 = $70;$c2$1 = $71;$row$0144 = $row$0$lcssa142;
								break;
							}
						}
						$73 = ($c$1|0)>($count$0$ph$ph|0);
						$c$1$count$0 = $73 ? $c$1 : $count$0$ph$ph;
						$117 = $123;$118 = $124;$119 = $125;$120 = $126;$c2$0$ph$ph = $c2$1;$count$0$ph$ph = $c$1$count$0;$row$0$in$ph$ph = $row$0144;
					}
					$32 = (($count$0$ph$ph$lcssa) - ($c2$0$ph$lcssa))|0;
					$33 = ($32*3)|0;
					$34 = ($33|0)<($19|0);
					$$count$0 = $34 ? 0 : $count$0$ph$ph$lcssa;
					L26: do {
						switch ($state$027|0) {
							case 0:  {
								$74 = ($$count$0|0)<($14|0);
								if ($74) {
									$75 = $$count$0 << 2;
									$76 = ($75|0)<($20|0);
									if ($76) {
										$77 = ($$count$0*3)|0;
										$78 = ($77|0)<($19|0);
										$begin$0$col$0 = $78 ? $begin$024 : $col$025;
										$79 = $78&1;
										$state$0$ = $79 ^ 1;
										$begin$1 = $begin$0$col$0;$state$1 = $state$0$;
									} else {
										$begin$1 = $col$025;$state$1 = 2;
									}
								} else {
									$begin$1 = $col$025;$state$1 = 3;
								}
								break;
							}
							case 1:  {
								$80 = ($$count$0|0)<($14|0);
								if ($80) {
									$81 = $$count$0 << 2;
									$82 = ($81|0)<($20|0);
									if ($82) {
										$83 = ($$count$0*3)|0;
										$84 = ($83|0)<($19|0);
										$begin$0$col$01 = $84 ? $begin$024 : $col$025;
										$85 = $84&1;
										$$state$0 = $85 ^ 1;
										$begin$1 = $begin$0$col$01;$state$1 = $$state$0;
									} else {
										$begin$1 = $begin$024;$state$1 = 2;
									}
								} else {
									$begin$1 = $begin$024;$state$1 = 3;
								}
								break;
							}
							case 2:  {
								$86 = ($$count$0|0)<($14|0);
								if ($86) {
									$87 = ($$count$0*3)|0;
									$88 = ($87|0)<($19|0);
									if ($88) {
										$begin$1 = $begin$024;$state$1 = 0;
									} else {
										$89 = $$count$0 << 2;
										$90 = ($89|0)<($20|0);
										$$state$02 = $90 ? 1 : 2;
										$begin$1 = $begin$024;$state$1 = $$state$02;
									}
								} else {
									$begin$1 = $begin$024;$state$1 = 3;
								}
								break;
							}
							case 3:  {
								$91 = ($$count$0*3)|0;
								$92 = ($91|0)<($19|0);
								$93 = ($col$025|0)==($94|0);
								$or$cond = $92 | $93;
								if ($or$cond) {
									$95 = $92 << 31 >> 31;
									$96 = (($95) + ($col$025))|0;
									$97 = ((($$lcssa)) + 4|0);
									$98 = HEAP32[$97>>2]|0;
									$99 = ((($$lcssa)) + 12|0);
									$100 = HEAP32[$99>>2]|0;
									__ZN9RectangleC2Eiiii($0,$begin$024,$98,$96,$100);
									$101 = HEAP32[$21>>2]|0;
									$102 = HEAP32[$22>>2]|0;
									$103 = ($101|0)==($102|0);
									if ($103) {
										__ZNSt3__16vectorI9RectangleNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($23,$0);
										$begin$1 = $begin$024;$state$1 = 0;
										break L26;
									} else {
										;HEAP32[$101>>2]=HEAP32[$0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$101+12>>2]=HEAP32[$0+12>>2]|0;
										$104 = HEAP32[$21>>2]|0;
										$105 = ((($104)) + 16|0);
										HEAP32[$21>>2] = $105;
										$begin$1 = $begin$024;$state$1 = 0;
										break L26;
									}
								} else {
									$begin$1 = $begin$024;$state$1 = 3;
								}
								break;
							}
							default: {
								$begin$1 = $begin$024;$state$1 = $state$027;
							}
						}
					} while(0);
					$106 = HEAP32[$this>>2]|0;
					$107 = ((($106)) + 8|0);
					$108 = HEAP32[$107>>2]|0;
					$109 = ($col$025|0)<($108|0);
					if (!($109)) {
						break;
					}
					$$phi$trans$insert = ((($106)) + 4|0);
					$$pre = HEAP32[$$phi$trans$insert>>2]|0;
					$$phi$trans$insert42 = ((($106)) + 12|0);
					$$pre43 = HEAP32[$$phi$trans$insert42>>2]|0;
					$$in = $106;$116 = $$pre;$25 = $$pre43;$94 = $108;$begin$024 = $begin$1;$col$025 = $27;$state$027 = $state$1;
				}
				$110 = ((($this)) + 20|0);
				$111 = ((($this)) + 24|0);
				$112 = HEAP32[$111>>2]|0;
				$113 = HEAP32[$110>>2]|0;
				$114 = (($112) - ($113))|0;
				$115 = $114 >> 4;
				STACKTOP = sp;return ($115|0);
			}
			function __ZNK8Features9v_segmentEii($agg$result,$this,$row,$col) {
				$agg$result = $agg$result|0;
				$this = $this|0;
				$row = $row|0;
				$col = $col|0;
				var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$02$lcssa = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 44|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 48|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1|0)==($3|0);
				if ($4) {
					__ZNK8Features13col_scan_initEv($this);
					$$pre$i = HEAP32[$0>>2]|0;
					$9 = $$pre$i;
				} else {
					$9 = $1;
				}
				$5 = HEAP32[$this>>2]|0;
				$6 = HEAP32[$5>>2]|0;
				$7 = (($col) - ($6))|0;
				$8 = (($9) + (($7*12)|0)|0);
				$10 = (((($9) + (($7*12)|0)|0)) + 4|0);
				$11 = HEAP32[$10>>2]|0;
				$12 = HEAP32[$8>>2]|0;
				$13 = (($11) - ($12))|0;
				$14 = $13 >> 3;
				$15 = ($13|0)>(0);
				$16 = $12;
				L4: do {
					if ($15) {
						$i$02 = 0;
						while(1) {
							$17 = (($16) + ($i$02<<3)|0);
							$18 = HEAP32[$17>>2]|0;
							$19 = ($18|0)>($row|0);
							if (!($19)) {
								$20 = (((($16) + ($i$02<<3)|0)) + 4|0);
								$21 = HEAP32[$20>>2]|0;
								$22 = ($21|0)<($row|0);
								if (!($22)) {
									$i$02$lcssa = $i$02;
									break;
								}
							}
							$34 = (($i$02) + 1)|0;
							$35 = ($34|0)<($14|0);
							if ($35) {
								$i$02 = $34;
							} else {
								break L4;
							}
						}
						$23 = (($16) + ($i$02$lcssa<<3)|0);
						$24 = $23;
						$25 = $24;
						$26 = HEAP32[$25>>2]|0;
						$27 = (($24) + 4)|0;
						$28 = $27;
						$29 = HEAP32[$28>>2]|0;
						$30 = $agg$result;
						$31 = $30;
						HEAP32[$31>>2] = $26;
						$32 = (($30) + 4)|0;
						$33 = $32;
						HEAP32[$33>>2] = $29;
						return;
					}
				} while(0);
				HEAP32[$agg$result>>2] = 1;
				$36 = ((($agg$result)) + 4|0);
				HEAP32[$36>>2] = 0;
				return;
			}
			function __ZNK8Features9test_miscERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$ = 0, $$4$ph = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$old = 0, $$phi$trans$insert = 0, $$phi$trans$insert61 = 0, $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi72Z2D = 0, $$pre60 = 0, $$pre62 = 0, $$pre63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
				var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
				var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
				var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
				var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
				var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
				var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
				var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
				var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
				var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
				var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
				var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
				var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
				var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
				var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
				var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
				var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
				var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
				var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
				var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
				var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
				var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
				var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
				var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
				var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
				var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
				var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
				var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
				var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
				var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
				var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
				var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
				var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond75 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 200|0);
				$1 = (__ZN7Profile6minimaEi($0,-1)|0);
				$2 = ($1|0)==(1);
				if ($2) {
					$3 = (__ZNK8Features5hbarsEv($this)|0);
					$4 = ($3|0)==(1);
					if ($4) {
						$5 = ((($this)) + 8|0);
						$6 = HEAP32[$5>>2]|0;
						$7 = ((($6)) + 4|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = HEAP32[$this>>2]|0;
						$10 = ((($9)) + 4|0);
						$11 = HEAP32[$10>>2]|0;
						$12 = ((($9)) + 12|0);
						$13 = HEAP32[$12>>2]|0;
						$14 = (1 - ($11))|0;
						$15 = (($14) + ($13))|0;
						$16 = (($15|0) / 10)&-1;
						$17 = (($16) + ($11))|0;
						$18 = ($8|0)>($17|0);
						if ($18) {
							$$pre$phi68Z2D = $this;
						} else {
							$19 = ((($6)) + 12|0);
							$20 = HEAP32[$19>>2]|0;
							$21 = (1 - ($8))|0;
							$22 = (($21) + ($20))|0;
							$23 = $22 << 2;
							$24 = ($23|0)>($15|0);
							if ($24) {
								$$pre$phi68Z2D = $this;
							} else {
								$25 = ((($6)) + 8|0);
								$26 = HEAP32[$25>>2]|0;
								$27 = HEAP32[$6>>2]|0;
								$28 = (($26) + 1)|0;
								$29 = (($28) - ($27))|0;
								$30 = ($29*5)|0;
								$31 = ((($9)) + 8|0);
								$32 = HEAP32[$31>>2]|0;
								$33 = HEAP32[$9>>2]|0;
								$34 = (($32) + 1)|0;
								$35 = (($34) - ($33))|0;
								$36 = $35 << 2;
								$37 = ($30|0)<($36|0);
								if ($37) {
									$$pre$phi68Z2D = $this;
								} else {
									$38 = ((($this)) + 152|0);
									$39 = (2 - ($11))|0;
									$40 = (($39) + ($20))|0;
									$41 = (__ZN7ProfileixEi($38,$40)|0);
									$42 = HEAP32[$5>>2]|0;
									$43 = ((($42)) + 12|0);
									$44 = HEAP32[$43>>2]|0;
									$45 = HEAP32[$this>>2]|0;
									$46 = ((($45)) + 4|0);
									$47 = HEAP32[$46>>2]|0;
									$48 = (($44) - ($47))|0;
									$49 = (__ZN7ProfileixEi($38,$48)|0);
									$50 = (($41) - ($49))|0;
									$51 = HEAP32[$this>>2]|0;
									$52 = ((($51)) + 8|0);
									$53 = HEAP32[$52>>2]|0;
									$54 = HEAP32[$51>>2]|0;
									$55 = (($53) + 1)|0;
									$56 = (($55) - ($54))|0;
									$57 = (($56|0) / 4)&-1;
									$58 = ($50|0)<($57|0);
									if ($58) {
										$59 = HEAP32[$5>>2]|0;
										$60 = ((($59)) + 4|0);
										$61 = HEAP32[$60>>2]|0;
										$62 = ((($59)) + 12|0);
										$63 = HEAP32[$62>>2]|0;
										$64 = (($63) + ($61))|0;
										$65 = (($64|0) / 2)&-1;
										$66 = ((($51)) + 4|0);
										$67 = HEAP32[$66>>2]|0;
										$68 = (1 - ($67))|0;
										$69 = (($68) + ($65))|0;
										$70 = (__ZN7Profile10increasingEii($38,$69,2)|0);
										if ($70) {
											$$5 = 55;
											return ($$5|0);
										} else {
											$$pre$phi68Z2D = $this;
										}
									} else {
										$$pre$phi68Z2D = $this;
									}
								}
							}
						}
					} else {
						$$pre$phi68Z2D = $this;
					}
					$71 = HEAP32[$$pre$phi68Z2D>>2]|0;
					$72 = ((($71)) + 12|0);
					$73 = HEAP32[$72>>2]|0;
					$74 = ((($71)) + 4|0);
					$75 = HEAP32[$74>>2]|0;
					$76 = (($73) + 1)|0;
					$77 = (($76) - ($75))|0;
					$78 = ((($71)) + 8|0);
					$79 = HEAP32[$78>>2]|0;
					$80 = HEAP32[$71>>2]|0;
					$81 = (($79) + 1)|0;
					$82 = (($81) - ($80))|0;
					$83 = ($77|0)>($82|0);
					if ($83) {
						$84 = ((($this)) + 152|0);
						$85 = (__ZN7Profile10increasingEii($84,1,2)|0);
						if ($85) {
							$86 = ((($this)) + 104|0);
							$87 = (__ZN7Profile10decreasingEii($86,1,-1)|0);
							if ($87) {
								$$pre$phi72Z2D = $$pre$phi68Z2D;
							} else {
								$88 = HEAP32[$this>>2]|0;
								$89 = ((($88)) + 4|0);
								$90 = HEAP32[$89>>2]|0;
								$91 = ((($88)) + 12|0);
								$92 = HEAP32[$91>>2]|0;
								$93 = (($92) + ($90))|0;
								$94 = (($93|0) / 2)&-1;
								$95 = HEAP32[$88>>2]|0;
								$96 = ((($88)) + 8|0);
								$97 = HEAP32[$96>>2]|0;
								$98 = (($97) + ($95))|0;
								$99 = (($98|0) / 2)&-1;
								$100 = (__ZNK6Bitmap9seek_leftEiib($88,$94,$99,1)|0);
								$101 = HEAP32[$$pre$phi68Z2D>>2]|0;
								$102 = HEAP32[$101>>2]|0;
								$103 = ($100|0)>($102|0);
								if ($103) {
									$$pre$phi72Z2D = $$pre$phi68Z2D;
								} else {
									$$5 = 55;
									return ($$5|0);
								}
							}
						} else {
							$$pre$phi72Z2D = $$pre$phi68Z2D;
						}
					} else {
						$$pre$phi72Z2D = $$pre$phi68Z2D;
					}
				} else {
					$$pre$phi72Z2D = $this;
				}
				$104 = ((($this)) + 104|0);
				$105 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$106 = ((($105)) + 12|0);
				$107 = HEAP32[$106>>2]|0;
				$108 = ((($105)) + 4|0);
				$109 = HEAP32[$108>>2]|0;
				$110 = (($107) + 1)|0;
				$111 = (($110) - ($109))|0;
				$112 = (($111|0) / 4)&-1;
				$113 = (__ZN7Profile6minimaEi($104,$112)|0);
				$114 = ($113|0)==(1);
				if (!($114)) {
					$$5 = 0;
					return ($$5|0);
				}
				$115 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$116 = ((($115)) + 12|0);
				$117 = HEAP32[$116>>2]|0;
				$118 = ((($115)) + 4|0);
				$119 = HEAP32[$118>>2]|0;
				$120 = (($117) + 1)|0;
				$121 = (($120) - ($119))|0;
				$122 = (($121|0) / 4)&-1;
				$123 = (__ZN7Profile6minimaEi($0,$122)|0);
				$124 = ($123|0)==(1);
				if (!($124)) {
					$$5 = 0;
					return ($$5|0);
				}
				$125 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$126 = ((($125)) + 12|0);
				$127 = HEAP32[$126>>2]|0;
				$128 = ((($125)) + 4|0);
				$129 = HEAP32[$128>>2]|0;
				$130 = (($127) + 1)|0;
				$131 = (($130) - ($129))|0;
				$132 = ((($125)) + 8|0);
				$133 = HEAP32[$132>>2]|0;
				$134 = HEAP32[$125>>2]|0;
				$135 = (($133) + 1)|0;
				$136 = (($135) - ($134))|0;
				$137 = $136 << 1;
				$138 = ($131|0)>($137|0);
				if ($138) {
					$139 = ((($this)) + 152|0);
					$140 = (__ZN7Profile10increasingEii($139,1,2)|0);
					if ($140) {
						$141 = (__ZN7Profile10decreasingEii($104,1,-1)|0);
						if ($141) {
							$142 = ((($this)) + 56|0);
							$143 = (__ZN7Profile6iscpitEi($142,25)|0);
							if ($143) {
								$$5 = 49;
								return ($$5|0);
							}
						}
					}
				}
				$144 = (__ZNK8Features5hbarsEv($this)|0);
				$145 = ($144|0)==(1);
				do {
					if ($145) {
						$$phi$trans$insert = ((($this)) + 8|0);
						$$pre = HEAP32[$$phi$trans$insert>>2]|0;
						$$pre60 = HEAP32[$$pre$phi72Z2D>>2]|0;
						$$phi$trans$insert61 = ((($$pre60)) + 12|0);
						$$pre62 = HEAP32[$$phi$trans$insert61>>2]|0;
						$172 = $$pre;$180 = $$pre60;$183 = $$pre62;
						label = 26;
					} else {
						$146 = (__ZNK8Features5hbarsEv($this)|0);
						$147 = ($146|0)==(2);
						if (!($147)) {
							$$pre63 = HEAP32[$$pre$phi72Z2D>>2]|0;
							$231 = $$pre63;
							break;
						}
						$148 = ((($this)) + 8|0);
						$149 = HEAP32[$148>>2]|0;
						$150 = ((($149)) + 28|0);
						$151 = HEAP32[$150>>2]|0;
						$152 = HEAP32[$$pre$phi72Z2D>>2]|0;
						$153 = ((($152)) + 12|0);
						$154 = HEAP32[$153>>2]|0;
						$155 = (($154) + -1)|0;
						$156 = ($151|0)<($155|0);
						if ($156) {
							$231 = $152;
						} else {
							$157 = ((($149)) + 8|0);
							$158 = HEAP32[$157>>2]|0;
							$159 = HEAP32[$149>>2]|0;
							$160 = (($158) + 1)|0;
							$161 = (($160) - ($159))|0;
							$162 = ($161*3)|0;
							$163 = ((($149)) + 24|0);
							$164 = HEAP32[$163>>2]|0;
							$165 = ((($149)) + 16|0);
							$166 = HEAP32[$165>>2]|0;
							$167 = (($164) + 1)|0;
							$168 = (($167) - ($166))|0;
							$169 = $168 << 2;
							$170 = ($162|0)>($169|0);
							if ($170) {
								$172 = $149;$180 = $152;$183 = $154;
								label = 26;
							} else {
								$231 = $152;
							}
						}
					}
				} while(0);
				if ((label|0) == 26) {
					$171 = ((($172)) + 12|0);
					$173 = HEAP32[$171>>2]|0;
					$174 = ((($172)) + 4|0);
					$175 = HEAP32[$174>>2]|0;
					$176 = (($173) + 1)|0;
					$177 = (($176) - ($175))|0;
					$178 = ($177*3)|0;
					$179 = ((($180)) + 4|0);
					$181 = HEAP32[$179>>2]|0;
					$182 = (($183) + 1)|0;
					$184 = (($182) - ($181))|0;
					$185 = ($178|0)>=($184|0);
					$186 = (($181) + 1)|0;
					$187 = ($175|0)>($186|0);
					$or$cond = $185 | $187;
					if ($or$cond) {
						$231 = $180;
					} else {
						$188 = ((($this)) + 56|0);
						$189 = ((($this)) + 64|0);
						$190 = HEAP32[$189>>2]|0;
						$191 = ($190|0)<(0);
						if ($191) {
							__ZN7Profile10initializeEv($188);
						}
						$192 = ((($this)) + 92|0);
						$193 = ((($this)) + 96|0);
						$194 = HEAP32[$193>>2]|0;
						$195 = HEAP32[$192>>2]|0;
						$196 = (($194) - ($195))|0;
						$197 = $196 >> 2;
						$198 = ($197*40)|0;
						$199 = (($198) + -40)|0;
						$200 = (($199|0) / 100)&-1;
						$201 = ((($this)) + 296|0);
						$202 = (__ZN7ProfileixEi($201,$200)|0);
						$203 = ($202*3)|0;
						$204 = HEAP32[$$pre$phi72Z2D>>2]|0;
						$205 = ((($204)) + 8|0);
						$206 = HEAP32[$205>>2]|0;
						$207 = HEAP32[$204>>2]|0;
						$208 = (($206) + 1)|0;
						$209 = (($208) - ($207))|0;
						$210 = ($203|0)<($209|0);
						if ($210) {
							$211 = (__ZN7ProfileixEi($188,$200)|0);
							$212 = ($211*5)|0;
							$213 = HEAP32[$$pre$phi72Z2D>>2]|0;
							$214 = ((($213)) + 8|0);
							$215 = HEAP32[$214>>2]|0;
							$216 = HEAP32[$213>>2]|0;
							$217 = (($215) + 1)|0;
							$218 = (($217) - ($216))|0;
							$219 = ($212|0)>($218|0);
							if ($219) {
								$220 = ((($this)) + 152|0);
								$221 = (__ZN7ProfileixEi($220,$200)|0);
								$222 = ($221*5)|0;
								$223 = HEAP32[$$pre$phi72Z2D>>2]|0;
								$224 = ((($223)) + 8|0);
								$225 = HEAP32[$224>>2]|0;
								$226 = HEAP32[$223>>2]|0;
								$227 = (($225) + 1)|0;
								$228 = (($227) - ($226))|0;
								$229 = ($222|0)>($228|0);
								if ($229) {
									$$5 = 84;
									return ($$5|0);
								} else {
									$231 = $223;
								}
							} else {
								$231 = $213;
							}
						} else {
							$231 = $204;
						}
					}
				}
				$230 = ((($231)) + 12|0);
				$232 = HEAP32[$230>>2]|0;
				$233 = ((($231)) + 4|0);
				$234 = HEAP32[$233>>2]|0;
				$235 = (($232) + 1)|0;
				$236 = (($235) - ($234))|0;
				$237 = ($236*3)|0;
				$238 = ((($231)) + 8|0);
				$239 = HEAP32[$238>>2]|0;
				$240 = HEAP32[$231>>2]|0;
				$241 = (($239) + 1)|0;
				$242 = (($241) - ($240))|0;
				$243 = $242 << 2;
				$244 = ($237|0)>($243|0);
				if ($244) {
					$245 = (__ZNK8Features5vbarsEv($this)|0);
					$246 = ($245|0)==(1);
					if ($246) {
						$247 = ((($this)) + 20|0);
						$248 = HEAP32[$247>>2]|0;
						$249 = ((($248)) + 8|0);
						$250 = HEAP32[$249>>2]|0;
						$251 = HEAP32[$248>>2]|0;
						$252 = (($250) + 1)|0;
						$253 = (($252) - ($251))|0;
						$254 = ($253|0)>(1);
						if ($254) {
							$255 = HEAP32[$$pre$phi72Z2D>>2]|0;
							$256 = HEAP32[$255>>2]|0;
							$257 = (($251) - ($256))|0;
							$258 = ((($255)) + 8|0);
							$259 = HEAP32[$258>>2]|0;
							$260 = (($259) - ($250))|0;
							$261 = $257 << 1;
							$262 = (1 - ($256))|0;
							$263 = (($262) + ($259))|0;
							$264 = ($261|0)<($263|0);
							$265 = $260 << 1;
							$266 = ($265|0)<($263|0);
							$or$cond17 = $264 & $266;
							if ($or$cond17) {
								$267 = (__ZN5Ocrad7similarEiiii($257,$260,40,1)|0);
								if ($267) {
									$268 = ((($this)) + 208|0);
									$269 = HEAP32[$268>>2]|0;
									$270 = ($269|0)<(0);
									if ($270) {
										__ZN7Profile10initializeEv($0);
									}
									$271 = ((($this)) + 236|0);
									$272 = ((($this)) + 240|0);
									$273 = HEAP32[$272>>2]|0;
									$274 = HEAP32[$271>>2]|0;
									$275 = (($273) - ($274))|0;
									$276 = $275 >> 2;
									$277 = ($276*25)|0;
									$278 = (($277) + -25)|0;
									$279 = (($278|0) / 100)&-1;
									$280 = (__ZN7ProfileixEi($0,$279)|0);
									$281 = $280 << 2;
									$282 = HEAP32[$$pre$phi72Z2D>>2]|0;
									$283 = ((($282)) + 12|0);
									$284 = HEAP32[$283>>2]|0;
									$285 = ((($282)) + 4|0);
									$286 = HEAP32[$285>>2]|0;
									$287 = (($284) + 1)|0;
									$288 = (($287) - ($286))|0;
									$289 = ($288*3)|0;
									$290 = ($281|0)>($289|0);
									if ($290) {
										$291 = ((($this)) + 112|0);
										$292 = HEAP32[$291>>2]|0;
										$293 = ($292|0)<(0);
										if ($293) {
											__ZN7Profile10initializeEv($104);
										}
										$294 = ((($this)) + 140|0);
										$295 = ((($this)) + 144|0);
										$296 = HEAP32[$295>>2]|0;
										$297 = HEAP32[$294>>2]|0;
										$298 = (($296) - ($297))|0;
										$299 = $298 >> 2;
										$300 = ($299*75)|0;
										$301 = (($300) + -75)|0;
										$302 = (($301|0) / 100)&-1;
										$303 = (__ZN7ProfileixEi($104,$302)|0);
										$304 = $303 << 2;
										$305 = HEAP32[$$pre$phi72Z2D>>2]|0;
										$306 = ((($305)) + 12|0);
										$307 = HEAP32[$306>>2]|0;
										$308 = ((($305)) + 4|0);
										$309 = HEAP32[$308>>2]|0;
										$310 = (($307) + 1)|0;
										$311 = (($310) - ($309))|0;
										$312 = ($311*3)|0;
										$313 = ($304|0)>($312|0);
										if ($313) {
											$$5 = 108;
											return ($$5|0);
										}
									}
								}
							}
						}
					}
				}
				$314 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$315 = ((($314)) + 12|0);
				$316 = HEAP32[$315>>2]|0;
				$317 = ((($314)) + 4|0);
				$318 = HEAP32[$317>>2]|0;
				$319 = (($316) + 1)|0;
				$320 = (($319) - ($318))|0;
				$321 = ($320*5)|0;
				$322 = ((($charbox)) + 12|0);
				$323 = HEAP32[$322>>2]|0;
				$324 = ((($charbox)) + 4|0);
				$325 = HEAP32[$324>>2]|0;
				$326 = (($323) + 1)|0;
				$327 = (($326) - ($325))|0;
				$328 = $327 << 2;
				$329 = ($321|0)<($328|0);
				if (!($329)) {
					$330 = ((($this)) + 296|0);
					$331 = (__ZN7Profile3maxEv($330)|0);
					$332 = ($320|0)>($331|0);
					if ($332) {
						$333 = ((($this)) + 304|0);
						$334 = HEAP32[$333>>2]|0;
						$335 = ($334|0)<(0);
						if ($335) {
							__ZN7Profile10initializeEv($330);
						}
						$336 = ((($this)) + 332|0);
						$337 = ((($this)) + 336|0);
						$338 = HEAP32[$337>>2]|0;
						$339 = HEAP32[$336>>2]|0;
						$340 = (($338) - ($339))|0;
						$341 = $340 >> 2;
						$342 = ($341*50)|0;
						$343 = (($342) + -50)|0;
						$344 = (($343|0) / 100)&-1;
						$345 = (__ZN7ProfileixEi($330,$344)|0);
						$346 = ($345*3)|0;
						$347 = HEAP32[$$pre$phi72Z2D>>2]|0;
						$348 = ((($347)) + 8|0);
						$349 = HEAP32[$348>>2]|0;
						$350 = HEAP32[$347>>2]|0;
						$351 = (($349) + 1)|0;
						$352 = (($351) - ($350))|0;
						$353 = ($346|0)<($352|0);
						if ($353) {
							$354 = (__ZNK8Features5hbarsEv($this)|0);
							$355 = ($354|0)==(1);
							if ($355) {
								$356 = ((($this)) + 8|0);
								$357 = HEAP32[$356>>2]|0;
								$358 = ((($357)) + 12|0);
								$359 = HEAP32[$358>>2]|0;
								$360 = HEAP32[$$pre$phi72Z2D>>2]|0;
								$361 = ((($360)) + 12|0);
								$362 = HEAP32[$361>>2]|0;
								$363 = (($362) + -1)|0;
								$364 = ($359|0)<($363|0);
								if (!($364)) {
									$365 = ((($357)) + 4|0);
									$366 = HEAP32[$365>>2]|0;
									$367 = ((($360)) + 4|0);
									$368 = HEAP32[$367>>2]|0;
									$369 = (($362) - ($368))|0;
									$370 = ($369*75)|0;
									$371 = (($370|0) / 100)&-1;
									$372 = (($371) + ($368))|0;
									$373 = ($366|0)>($372|0);
									if ($373) {
										$374 = ((($this)) + 56|0);
										$375 = ((($this)) + 64|0);
										$376 = HEAP32[$375>>2]|0;
										$377 = ($376|0)<(0);
										if ($377) {
											__ZN7Profile10initializeEv($374);
										}
										$378 = ((($this)) + 92|0);
										$379 = ((($this)) + 96|0);
										$380 = HEAP32[$379>>2]|0;
										$381 = HEAP32[$378>>2]|0;
										$382 = (($380) - ($381))|0;
										$383 = $382 >> 2;
										$384 = ($383*50)|0;
										$385 = (($384) + -50)|0;
										$386 = (($385|0) / 100)&-1;
										$387 = (__ZN7ProfileixEi($374,$386)|0);
										$388 = ((($this)) + 152|0);
										$389 = ((($this)) + 160|0);
										$390 = HEAP32[$389>>2]|0;
										$391 = ($390|0)<(0);
										if ($391) {
											__ZN7Profile10initializeEv($388);
										}
										$392 = ((($this)) + 188|0);
										$393 = ((($this)) + 192|0);
										$394 = HEAP32[$393>>2]|0;
										$395 = HEAP32[$392>>2]|0;
										$396 = (($394) - ($395))|0;
										$397 = $396 >> 2;
										$398 = ($397*50)|0;
										$399 = (($398) + -50)|0;
										$400 = (($399|0) / 100)&-1;
										$401 = (__ZN7ProfileixEi($388,$400)|0);
										$402 = (__ZN5Ocrad7similarEiiii($387,$401,20,2)|0);
										if ($402) {
											$$5 = 108;
											return ($$5|0);
										}
									}
								}
							}
							$403 = (__ZNK8Features5hbarsEv($this)|0);
							$404 = ($403|0)==(2);
							if ($404) {
								$405 = ((($this)) + 8|0);
								$406 = HEAP32[$405>>2]|0;
								$407 = ((($406)) + 12|0);
								$408 = HEAP32[$407>>2]|0;
								$409 = HEAP32[$$pre$phi72Z2D>>2]|0;
								$410 = ((($409)) + 4|0);
								$411 = HEAP32[$410>>2]|0;
								$412 = ((($409)) + 12|0);
								$413 = HEAP32[$412>>2]|0;
								$414 = (($413) - ($411))|0;
								$415 = (($414|0) / 4)&-1;
								$416 = (($415) + ($411))|0;
								$417 = ($408|0)<($416|0);
								if ($417) {
									$418 = ((($406)) + 20|0);
									$419 = HEAP32[$418>>2]|0;
									$420 = ($414*75)|0;
									$421 = (($420|0) / 100)&-1;
									$422 = (($421) + ($411))|0;
									$423 = ($419|0)>($422|0);
									if ($423) {
										$424 = ((($406)) + 28|0);
										$425 = HEAP32[$424>>2]|0;
										$426 = (($413) + -1)|0;
										$427 = ($425|0)<($426|0);
										if (!($427)) {
											$428 = ((($406)) + 8|0);
											$429 = HEAP32[$428>>2]|0;
											$430 = ((($406)) + 16|0);
											$431 = HEAP32[$430>>2]|0;
											$432 = ((($406)) + 24|0);
											$433 = HEAP32[$432>>2]|0;
											$434 = (($433) + ($431))|0;
											$435 = (($434|0) / 2)&-1;
											$436 = ($429|0)>($435|0);
											if (!($436)) {
												$$5 = 0;
												return ($$5|0);
											}
											$437 = HEAP32[$406>>2]|0;
											$438 = (($429) + 1)|0;
											$439 = (($438) - ($437))|0;
											$440 = ($439*3)|0;
											$441 = (1 - ($431))|0;
											$442 = (($441) + ($433))|0;
											$443 = $442 << 1;
											$444 = ($440|0)>($443|0);
											if ($444) {
												$445 = (1 - ($411))|0;
												$446 = (($445) + ($413))|0;
												$447 = (__ZN7Profile3maxEv($330)|0);
												$448 = ($447*3)|0;
												$449 = ($446|0)<($448|0);
												$$7 = $449 ? 73 : 108;
												return ($$7|0);
											} else {
												$$5 = 108;
												return ($$5|0);
											}
										}
									}
								}
							}
						}
					}
				}
				$450 = (__ZNK8Features5hbarsEv($this)|0);
				$451 = ($450|0)==(2);
				if ($451) {
					label = 65;
				} else {
					$452 = (__ZNK8Features5hbarsEv($this)|0);
					$453 = ($452|0)==(3);
					if ($453) {
						label = 65;
					}
				}
				if ((label|0) == 65) {
					$454 = ((($this)) + 8|0);
					$455 = HEAP32[$454>>2]|0;
					$456 = ((($455)) + 4|0);
					$457 = HEAP32[$456>>2]|0;
					$458 = HEAP32[$$pre$phi72Z2D>>2]|0;
					$459 = ((($458)) + 4|0);
					$460 = HEAP32[$459>>2]|0;
					$461 = (($460) + 1)|0;
					$462 = ($457|0)>($461|0);
					if (!($462)) {
						$463 = ((($455)) + 16|0);
						$464 = (__ZNK9Rectangle16includes_vcenterERKS_($463,$458)|0);
						if ($464) {
							$465 = HEAP32[$454>>2]|0;
							$466 = ((($465)) + 8|0);
							$467 = HEAP32[$466>>2]|0;
							$468 = HEAP32[$465>>2]|0;
							$469 = (($467) + 1)|0;
							$470 = (($469) - ($468))|0;
							$471 = ($470*3)|0;
							$472 = ((($465)) + 24|0);
							$473 = HEAP32[$472>>2]|0;
							$474 = ((($465)) + 16|0);
							$475 = HEAP32[$474>>2]|0;
							$476 = (($473) + 1)|0;
							$477 = (($476) - ($475))|0;
							$478 = $477 << 2;
							$479 = ($471|0)>($478|0);
							if ($479) {
								$480 = (__ZNK8Features5hbarsEv($this)|0);
								$481 = ($480|0)==(2);
								if ($481) {
									$$5 = 70;
									return ($$5|0);
								}
								$482 = HEAP32[$454>>2]|0;
								$483 = ((($482)) + 44|0);
								$484 = HEAP32[$483>>2]|0;
								$485 = HEAP32[$$pre$phi72Z2D>>2]|0;
								$486 = ((($485)) + 12|0);
								$487 = HEAP32[$486>>2]|0;
								$488 = (($487) + -1)|0;
								$489 = ($484|0)<($488|0);
								if (!($489)) {
									$490 = ((($482)) + 8|0);
									$491 = HEAP32[$490>>2]|0;
									$492 = HEAP32[$482>>2]|0;
									$493 = (($491) + 1)|0;
									$494 = (($493) - ($492))|0;
									$495 = ($494*3)|0;
									$496 = ((($482)) + 40|0);
									$497 = HEAP32[$496>>2]|0;
									$498 = ((($482)) + 32|0);
									$499 = HEAP32[$498>>2]|0;
									$500 = (($497) + 1)|0;
									$501 = (($500) - ($499))|0;
									$502 = $501 << 2;
									$503 = ($495|0)>($502|0);
									if ($503) {
										$$5 = 70;
										return ($$5|0);
									}
								}
							}
						}
					}
				}
				$504 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$505 = ((($504)) + 12|0);
				$506 = HEAP32[$505>>2]|0;
				$507 = ((($504)) + 4|0);
				$508 = HEAP32[$507>>2]|0;
				$509 = (($506) + 1)|0;
				$510 = (($509) - ($508))|0;
				$511 = ((($this)) + 296|0);
				$512 = (__ZN7Profile3maxEv($511)|0);
				$513 = ($512*3)|0;
				$514 = ($510|0)>($513|0);
				if ($514) {
					$515 = ((($this)) + 152|0);
					$516 = (__ZN7Profile5istipEv($515)|0);
					$517 = ((($this)) + 56|0);
					if ($516) {
						$518 = (__ZN7Profile5ispitEv($517)|0);
						if ($518) {
							$519 = (__ZN7Profile6istpitEv($517)|0);
							$$ = $519 ? 123 : 40;
							$$5 = $$;
							return ($$5|0);
						}
					}
					$520 = (__ZN7Profile5istipEv($517)|0);
					if ($520) {
						$521 = (__ZN7Profile5ispitEv($515)|0);
						if ($521) {
							$522 = (__ZN7Profile6istpitEv($515)|0);
							$$6 = $522 ? 125 : 41;
							$$5 = $$6;
							return ($$5|0);
						}
					}
					$523 = HEAP32[$$pre$phi72Z2D>>2]|0;
					$524 = ((($523)) + 8|0);
					$525 = HEAP32[$524>>2]|0;
					$526 = HEAP32[$523>>2]|0;
					$527 = (($525) + 1)|0;
					$528 = (($527) - ($526))|0;
					$529 = (__ZN7Profile3maxEv($511)|0);
					$530 = $529 << 1;
					$531 = ($528|0)>($530|0);
					if ($531) {
						$532 = (__ZN7Profile8isconvexEv($515)|0);
						if ($532) {
							$$5 = 41;
							return ($$5|0);
						}
					}
				}
				$533 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$534 = ((($533)) + 12|0);
				$535 = HEAP32[$534>>2]|0;
				$536 = ((($533)) + 4|0);
				$537 = HEAP32[$536>>2]|0;
				$538 = (($535) + 1)|0;
				$539 = (($538) - ($537))|0;
				$540 = ((($533)) + 8|0);
				$541 = HEAP32[$540>>2]|0;
				$542 = HEAP32[$533>>2]|0;
				$543 = (($541) + 1)|0;
				$544 = (($543) - ($542))|0;
				$545 = $544 << 1;
				$546 = ($539|0)>($545|0);
				if (!($546)) {
					$$5 = 0;
					return ($$5|0);
				}
				$547 = ($539*5)|0;
				$548 = HEAP32[$322>>2]|0;
				$549 = HEAP32[$324>>2]|0;
				$550 = (($548) + 1)|0;
				$551 = (($550) - ($549))|0;
				$552 = $551 << 2;
				$553 = ($547|0)<($552|0);
				if ($553) {
					$$5 = 0;
					return ($$5|0);
				}
				$554 = ((($this)) + 56|0);
				$555 = (__ZN7Profile3maxEv($554)|0);
				$556 = ((($this)) + 152|0);
				$557 = (__ZN7Profile3maxEv($556)|0);
				$558 = (($557) + ($555))|0;
				$559 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$560 = ((($559)) + 8|0);
				$561 = HEAP32[$560>>2]|0;
				$562 = HEAP32[$559>>2]|0;
				$563 = (($561) + 1)|0;
				$564 = (($563) - ($562))|0;
				$565 = ($558|0)<($564|0);
				if (!($565)) {
					$$5 = 0;
					return ($$5|0);
				}
				$566 = ((($this)) + 160|0);
				$567 = HEAP32[$566>>2]|0;
				$568 = ($567|0)<(0);
				if ($568) {
					__ZN7Profile10initializeEv($556);
				}
				$569 = ((($this)) + 188|0);
				$570 = ((($this)) + 192|0);
				$571 = HEAP32[$570>>2]|0;
				$572 = HEAP32[$569>>2]|0;
				$573 = (($571) - ($572))|0;
				$574 = $573 >> 2;
				$575 = ($574*50)|0;
				$576 = (($575) + -50)|0;
				$577 = (($576|0) / 100)&-1;
				$578 = (__ZN7ProfileixEi($556,$577)|0);
				$579 = ($578*5)|0;
				$580 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$581 = ((($580)) + 8|0);
				$582 = HEAP32[$581>>2]|0;
				$583 = HEAP32[$580>>2]|0;
				$584 = (($582) + 1)|0;
				$585 = (($584) - ($583))|0;
				$586 = $585 << 1;
				$587 = ($579|0)>($586|0);
				if (!($587)) {
					$$5 = 124;
					return ($$5|0);
				}
				$588 = ((($580)) + 4|0);
				$589 = HEAP32[$588>>2]|0;
				$590 = ((($580)) + 12|0);
				$591 = HEAP32[$590>>2]|0;
				$592 = (($591) - ($589))|0;
				$593 = ($592*75)|0;
				$594 = (($593|0) / 100)&-1;
				$595 = (($594) + ($589))|0;
				$596 = (($582) - ($583))|0;
				$597 = ($596*75)|0;
				$598 = (($597|0) / 100)&-1;
				$599 = (($598) + ($583))|0;
				$600 = (__ZNK6Bitmap8seek_topEiib($580,$595,$599,1)|0);
				$601 = HEAP32[$$pre$phi72Z2D>>2]|0;
				$602 = ((($601)) + 4|0);
				$603 = HEAP32[$602>>2]|0;
				$604 = HEAP32[$324>>2]|0;
				$605 = ($603|0)<($604|0);
				if ($605) {
					$$old = ($600|0)>($603|0);
					if ($$old) {
						label = 89;
					} else {
						$$4$ph = 76;
					}
				} else {
					$606 = ((($601)) + 12|0);
					$607 = HEAP32[$606>>2]|0;
					$608 = HEAP32[$322>>2]|0;
					$609 = (1 - ($603))|0;
					$610 = (($609) + ($607))|0;
					$611 = (($610|0) / 5)&-1;
					$612 = (($611) + ($608))|0;
					$613 = ($607|0)>($612|0);
					$614 = ($600|0)>($603|0);
					$or$cond75 = $613 | $614;
					if ($or$cond75) {
						label = 89;
					} else {
						$$4$ph = 76;
					}
				}
				if ((label|0) == 89) {
					$615 = ($600|0)>($603|0);
					if (!($615)) {
						$$5 = 124;
						return ($$5|0);
					}
					$616 = ((($601)) + 4|0);
					$617 = HEAP32[$616>>2]|0;
					$618 = ((($601)) + 12|0);
					$619 = HEAP32[$618>>2]|0;
					$620 = (($619) - ($617))|0;
					$621 = ($620*75)|0;
					$622 = (($621|0) / 100)&-1;
					$623 = (($622) + ($617))|0;
					$624 = HEAP32[$601>>2]|0;
					$625 = ((($601)) + 8|0);
					$626 = HEAP32[$625>>2]|0;
					$627 = (($626) - ($624))|0;
					$628 = ($627*75)|0;
					$629 = (($628|0) / 100)&-1;
					$630 = (($629) + ($624))|0;
					$631 = (__ZNK6Bitmap11seek_bottomEiib($601,$623,$630,1)|0);
					$632 = HEAP32[$$pre$phi72Z2D>>2]|0;
					$633 = ((($632)) + 12|0);
					$634 = HEAP32[$633>>2]|0;
					$635 = ($631|0)<($634|0);
					if ($635) {
						$$4$ph = 91;
					} else {
						$$5 = 124;
						return ($$5|0);
					}
				}
				$$5 = $$4$ph;
				return ($$5|0);
			}
			function __ZN5Ocrad14internal_errorEPKc($msg) {
				$msg = $msg|0;
				var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$0 = HEAP32[90]|0;
				HEAP32[$vararg_buffer>>2] = $msg;
				(_fprintf($0,3441,$vararg_buffer)|0);
				_exit(3);
				// unreachable;
			}
			function __ZN5Ocrad7similarEiiii($a,$b,$percent_dif,$abs_dif) {
				$a = $a|0;
				$b = $b|0;
				$percent_dif = $percent_dif|0;
				$abs_dif = $abs_dif|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, $or$cond = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = (($a) - ($b))|0;
				$ispos = ($0|0)>(-1);
				$neg = (0 - ($0))|0;
				$1 = $ispos ? $0 : $neg;
				$2 = ($percent_dif|0)<(1);
				$3 = ($1|0)>($abs_dif|0);
				$or$cond = $2 | $3;
				if (!($or$cond)) {
					$$0 = 1;
					return ($$0|0);
				}
				$ispos1 = ($a|0)>(-1);
				$neg2 = (0 - ($a))|0;
				$4 = $ispos1 ? $a : $neg2;
				$ispos3 = ($b|0)>(-1);
				$neg4 = (0 - ($b))|0;
				$5 = $ispos3 ? $b : $neg4;
				$6 = ($4|0)<($5|0);
				$7 = $6 ? $5 : $4;
				$8 = ($1*100)|0;
				$9 = Math_imul($7, $percent_dif)|0;
				$10 = ($8|0)<=($9|0);
				$$0 = $10;
				return ($$0|0);
			}
			function __ZNK7Charset7enabledENS_5ValueE($this,$cset) {
				$this = $this|0;
				$cset = $cset|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)==(0);
				$2 = $0 & $cset;
				$3 = ($2|0)!=(0);
				$4 = ($cset|0)==(4);
				$$0 = $1 ? $4 : $3;
				return ($$0|0);
			}
			function __ZNK7Charset4onlyENS_5ValueE($this,$cset) {
				$this = $this|0;
				$cset = $cset|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ($0|0)==(0);
				$2 = ($0|0)==($cset|0);
				$3 = ($cset|0)==(4);
				$$0 = $1 ? $3 : $2;
				return ($$0|0);
			}
			function __ZN14Transformation3setEPKc($this,$name) {
				$this = $this|0;
				$name = $name|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03$lcssa = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_strcmp($name,3478)|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$i$03$lcssa = 0;
				} else {
					$2 = (_strcmp($name,3483)|0);
					$3 = ($2|0)==(0);
					if ($3) {
						$i$03$lcssa = 1;
					} else {
						$7 = (_strcmp($name,3492)|0);
						$8 = ($7|0)==(0);
						if ($8) {
							$i$03$lcssa = 2;
						} else {
							$9 = (_strcmp($name,3502)|0);
							$10 = ($9|0)==(0);
							if ($10) {
								$i$03$lcssa = 3;
							} else {
								$11 = (_strcmp($name,3512)|0);
								$12 = ($11|0)==(0);
								if ($12) {
									$i$03$lcssa = 4;
								} else {
									$13 = (_strcmp($name,3522)|0);
									$14 = ($13|0)==(0);
									if ($14) {
										$i$03$lcssa = 5;
									} else {
										$15 = (_strcmp($name,3532)|0);
										$16 = ($15|0)==(0);
										if ($16) {
											$i$03$lcssa = 6;
										} else {
											$17 = (_strcmp($name,3542)|0);
											$18 = ($17|0)==(0);
											if ($18) {
												$i$03$lcssa = 7;
											} else {
												$6 = 0;
												return ($6|0);
											}
										}
									}
								}
							}
						}
					}
				}
				$4 = (((160 + ($i$03$lcssa<<3)|0)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				HEAP32[$this>>2] = $5;
				$6 = 1;
				return ($6|0);
			}
			function __ZN7ControlD2Ev($this) {
				$this = $this|0;
				var $$lcssa = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$06 = 0, $scevgep$i$i$i = 0;
				var $scevgep$i$i$i1 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = ((($this)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) - ($3))|0;
				$5 = $4 >> 3;
				$6 = ($5|0)==(0);
				$7 = $3;
				L1: do {
					if ($6) {
						$8 = $7;
					} else {
						$19 = $7;$f$06 = $5;
						while(1) {
							$17 = (($f$06) + -1)|0;
							$18 = (($19) + ($17<<3)|0);
							$20 = HEAP32[$18>>2]|0;
							$21 = ($20|0)==(0|0);
							if (!($21)) {
								__THREW__ = 0;
								invoke_vi(184,($20|0));
								$23 = __THREW__; __THREW__ = 0;
								$24 = $23&1;
								if ($24) {
									$$lcssa = $20;
									break;
								}
								__ZdlPv($20);
							}
							$22 = ($17|0)==(0);
							$$pre8 = HEAP32[$0>>2]|0;
							if ($22) {
								$8 = $$pre8;
								break L1;
							} else {
								$19 = $$pre8;$f$06 = $17;
							}
						}
						$25 = ___cxa_find_matching_catch_2()|0;
						$26 = tempRet0;
						__ZdlPv($$lcssa);
						$27 = HEAP32[$0>>2]|0;
						$28 = ($27|0)==(0|0);
						$29 = $27;
						if ($28) {
							___resumeException($25|0);
							// unreachable;
						}
						$30 = HEAP32[$1>>2]|0;
						$31 = ($30|0)==($27|0);
						if (!($31)) {
							$scevgep$i$i$i = ((($30)) + -8|0);
							$32 = $scevgep$i$i$i;
							$33 = (($32) - ($29))|0;
							$34 = $33 >>> 3;
							$35 = $34 ^ -1;
							$scevgep4$i$i$i = (($30) + ($35<<3)|0);
							HEAP32[$1>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($27);
						___resumeException($25|0);
						// unreachable;
					}
				} while(0);
				$9 = ($8|0)==(0|0);
				$10 = $8;
				if ($9) {
					return;
				}
				$11 = HEAP32[$1>>2]|0;
				$12 = ($11|0)==($8|0);
				if (!($12)) {
					$scevgep$i$i$i1 = ((($11)) + -8|0);
					$13 = $scevgep$i$i$i1;
					$14 = (($13) - ($10))|0;
					$15 = $14 >>> 3;
					$16 = $15 ^ -1;
					$scevgep4$i$i$i2 = (($11) + ($16<<3)|0);
					HEAP32[$1>>2] = $scevgep4$i$i$i2;
				}
				__ZdlPv($8);
				return;
			}
			function __ZN11User_filterD2Ev($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i10 = 0, $scevgep$i$i$i2 = 0, $scevgep$i$i$i5 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i11 = 0, $scevgep4$i$i$i3 = 0, $scevgep4$i$i$i6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 24|0);
				__THREW__ = 0;
				invoke_vi(27,($0|0));
				$1 = __THREW__; __THREW__ = 0;
				$2 = $1&1;
				if ($2) {
					$24 = ___cxa_find_matching_catch_2()|0;
					$25 = tempRet0;
					$26 = ((($this)) + 12|0);
					$27 = HEAP32[$26>>2]|0;
					$28 = ($27|0)==(0|0);
					$29 = $27;
					if (!($28)) {
						$30 = ((($this)) + 16|0);
						$31 = HEAP32[$30>>2]|0;
						$32 = ($31|0)==($27|0);
						if (!($32)) {
							$scevgep$i$i$i5 = ((($31)) + -8|0);
							$33 = $scevgep$i$i$i5;
							$34 = (($33) - ($29))|0;
							$35 = $34 >>> 3;
							$36 = $35 ^ -1;
							$scevgep4$i$i$i6 = (($31) + ($36<<3)|0);
							HEAP32[$30>>2] = $scevgep4$i$i$i6;
						}
						__ZdlPv($27);
					}
					$37 = HEAP32[$this>>2]|0;
					$38 = ($37|0)==(0|0);
					$39 = $37;
					if ($38) {
						___resumeException($24|0);
						// unreachable;
					}
					$40 = ((($this)) + 4|0);
					$41 = HEAP32[$40>>2]|0;
					$42 = ($41|0)==($37|0);
					if (!($42)) {
						$scevgep$i$i$i10 = ((($41)) + -4|0);
						$43 = $scevgep$i$i$i10;
						$44 = (($43) - ($39))|0;
						$45 = $44 >>> 2;
						$46 = $45 ^ -1;
						$scevgep4$i$i$i11 = (($41) + ($46<<2)|0);
						HEAP32[$40>>2] = $scevgep4$i$i$i11;
					}
					__ZdlPv($37);
					___resumeException($24|0);
					// unreachable;
				} else {
					$3 = ((($this)) + 12|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = ($4|0)==(0|0);
					$6 = $4;
					if (!($5)) {
						$7 = ((($this)) + 16|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = ($8|0)==($4|0);
						if (!($9)) {
							$scevgep$i$i$i = ((($8)) + -8|0);
							$10 = $scevgep$i$i$i;
							$11 = (($10) - ($6))|0;
							$12 = $11 >>> 3;
							$13 = $12 ^ -1;
							$scevgep4$i$i$i = (($8) + ($13<<3)|0);
							HEAP32[$7>>2] = $scevgep4$i$i$i;
						}
						__ZdlPv($4);
					}
					$14 = HEAP32[$this>>2]|0;
					$15 = ($14|0)==(0|0);
					$16 = $14;
					if ($15) {
						return;
					}
					$17 = ((($this)) + 4|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = ($18|0)==($14|0);
					if (!($19)) {
						$scevgep$i$i$i2 = ((($18)) + -4|0);
						$20 = $scevgep$i$i$i2;
						$21 = (($20) - ($16))|0;
						$22 = $21 >>> 2;
						$23 = $22 ^ -1;
						$scevgep4$i$i$i3 = (($18) + ($23<<2)|0);
						HEAP32[$17>>2] = $scevgep4$i$i$i3;
					}
					__ZdlPv($14);
					return;
				}
			}
			function __ZN7Control10add_filterEPKcS1_($this,$program_name,$name) {
				$this = $this|0;
				$program_name = $program_name|0;
				$name = $name|0;
				var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04$lcssa = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer26 = sp + 80|0;
				$vararg_buffer23 = sp + 72|0;
				$vararg_buffer20 = sp + 64|0;
				$vararg_buffer17 = sp + 56|0;
				$vararg_buffer14 = sp + 48|0;
				$vararg_buffer11 = sp + 40|0;
				$vararg_buffer8 = sp + 32|0;
				$vararg_buffer5 = sp + 24|0;
				$vararg_buffer2 = sp + 16|0;
				$vararg_buffer = sp + 8|0;
				$0 = sp;
				$1 = (_strcmp($name,3552)|0);
				$2 = ($1|0)==(0);
				if ($2) {
					$i$04$lcssa = 0;
				} else {
					$24 = (_strcmp($name,3560)|0);
					$25 = ($24|0)==(0);
					if ($25) {
						$i$04$lcssa = 1;
					} else {
						$31 = (_strcmp($name,3573)|0);
						$32 = ($31|0)==(0);
						if ($32) {
							$i$04$lcssa = 2;
						} else {
							$33 = (_strcmp($name,3581)|0);
							$34 = ($33|0)==(0);
							if ($34) {
								$i$04$lcssa = 3;
							} else {
								$35 = (_strcmp($name,3594)|0);
								$36 = ($35|0)==(0);
								if ($36) {
									$i$04$lcssa = 4;
								} else {
									$37 = (_strcmp($name,3606)|0);
									$38 = ($37|0)==(0);
									if ($38) {
										$i$04$lcssa = 5;
									} else {
										$39 = (_strcmp($name,3617)|0);
										$40 = ($39|0)==(0);
										if ($40) {
											$i$04$lcssa = 6;
										} else {
											$41 = (_strcmp($name,3627)|0);
											$42 = ($41|0)==(0);
											if ($42) {
												$i$04$lcssa = 7;
											} else {
												$43 = (_strcmp($name,3642)|0);
												$44 = ($43|0)==(0);
												if ($44) {
													$i$04$lcssa = 8;
												} else {
													$45 = HEAP32[1700]|0;
													$46 = ($45|0)>(-1);
													if (!($46)) {
														$$1 = 0;
														STACKTOP = sp;return ($$1|0);
													}
													$26 = ($name|0)==(0|0);
													if (!($26)) {
														$27 = (_strcmp($name,3468)|0);
														$28 = ($27|0)==(0);
														if (!($28)) {
															$29 = HEAP32[90]|0;
															HEAP32[$vararg_buffer>>2] = $program_name;
															$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
															HEAP32[$vararg_ptr1>>2] = $name;
															(_fprintf($29,3657,$vararg_buffer)|0);
														}
													}
													$30 = HEAP32[90]|0;
													(_fwrite(3678,19,1,$30)|0);
													HEAP32[$vararg_buffer2>>2] = 3552;
													(_fprintf($30,3473,$vararg_buffer2)|0);
													HEAP32[$vararg_buffer5>>2] = 3560;
													(_fprintf($30,3473,$vararg_buffer5)|0);
													HEAP32[$vararg_buffer8>>2] = 3573;
													(_fprintf($30,3473,$vararg_buffer8)|0);
													HEAP32[$vararg_buffer11>>2] = 3581;
													(_fprintf($30,3473,$vararg_buffer11)|0);
													HEAP32[$vararg_buffer14>>2] = 3594;
													(_fprintf($30,3473,$vararg_buffer14)|0);
													HEAP32[$vararg_buffer17>>2] = 3606;
													(_fprintf($30,3473,$vararg_buffer17)|0);
													HEAP32[$vararg_buffer20>>2] = 3617;
													(_fprintf($30,3473,$vararg_buffer20)|0);
													HEAP32[$vararg_buffer23>>2] = 3627;
													(_fprintf($30,3473,$vararg_buffer23)|0);
													HEAP32[$vararg_buffer26>>2] = 3642;
													(_fprintf($30,3473,$vararg_buffer26)|0);
													(_fputc(10,$30)|0);
													$$1 = 0;
													STACKTOP = sp;return ($$1|0);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				$3 = (((232 + ($i$04$lcssa<<3)|0)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				HEAP32[$0>>2] = 0;
				$5 = ((($0)) + 4|0);
				HEAP32[$5>>2] = $4;
				$6 = ((($this)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($this)) + 12|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7|0)==($9|0);
				if ($10) {
					$23 = ((($this)) + 4|0);
					__ZNSt3__16vectorI6FilterNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($23,$0);
					$$1 = 1;
					STACKTOP = sp;return ($$1|0);
				} else {
					$11 = $0;
					$12 = $11;
					$13 = HEAP32[$12>>2]|0;
					$14 = (($11) + 4)|0;
					$15 = $14;
					$16 = HEAP32[$15>>2]|0;
					$17 = $7;
					$18 = $17;
					HEAP32[$18>>2] = $13;
					$19 = (($17) + 4)|0;
					$20 = $19;
					HEAP32[$20>>2] = $16;
					$21 = HEAP32[$6>>2]|0;
					$22 = ((($21)) + 8|0);
					HEAP32[$6>>2] = $22;
					$$1 = 1;
					STACKTOP = sp;return ($$1|0);
				}
				return (0)|0;
			}
			function __ZNSt3__16vectorI6FilterNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_($this,$__x) {
				$this = $this|0;
				$__x = $__x|0;
				var $$0$i1 = 0, $$0$i2 = 0, $$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = HEAP32[$this>>2]|0;
				$3 = (($1) - ($2))|0;
				$4 = $3 >> 3;
				$5 = (($4) + 1)|0;
				$6 = ($5>>>0)>(536870911);
				if ($6) {
					__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
					$$pre = HEAP32[$this>>2]|0;
					$$in = $$pre;
				} else {
					$$in = $2;
				}
				$7 = ((($this)) + 8|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) - ($$in))|0;
				$10 = $9 >> 3;
				$11 = ($10>>>0)<(268435455);
				if ($11) {
					$15 = $9 >> 2;
					$16 = ($15>>>0)<($5>>>0);
					$17 = $16 ? $5 : $15;
					$18 = HEAP32[$0>>2]|0;
					$19 = (($18) - ($$in))|0;
					$20 = $19 >> 3;
					$21 = ($17|0)==(0);
					if ($21) {
						$$0$i2 = 0;$25 = 0;$26 = $20;$42 = $18;
					} else {
						$$0$i1 = $17;$50 = $18;$51 = $20;
						label = 6;
					}
				} else {
					$12 = HEAP32[$0>>2]|0;
					$13 = (($12) - ($$in))|0;
					$14 = $13 >> 3;
					$$0$i1 = 536870911;$50 = $12;$51 = $14;
					label = 6;
				}
				if ((label|0) == 6) {
					$22 = $$0$i1 << 3;
					$23 = (__Znwj($22)|0);
					$$0$i2 = $$0$i1;$25 = $23;$26 = $51;$42 = $50;
				}
				$24 = (($25) + ($26<<3)|0);
				$27 = (($25) + ($$0$i2<<3)|0);
				$28 = $27;
				$29 = $__x;
				$30 = $29;
				$31 = HEAP32[$30>>2]|0;
				$32 = (($29) + 4)|0;
				$33 = $32;
				$34 = HEAP32[$33>>2]|0;
				$35 = $24;
				$36 = $35;
				HEAP32[$36>>2] = $31;
				$37 = (($35) + 4)|0;
				$38 = $37;
				HEAP32[$38>>2] = $34;
				$39 = ((($24)) + 8|0);
				$40 = $39;
				$41 = (($42) - ($$in))|0;
				$43 = $41 >> 3;
				$44 = (0 - ($43))|0;
				$45 = (($24) + ($44<<3)|0);
				$46 = $45;
				$47 = $$in;
				_memcpy(($45|0),($47|0),($41|0))|0;
				HEAP32[$this>>2] = $46;
				HEAP32[$0>>2] = $40;
				HEAP32[$7>>2] = $28;
				$48 = ($$in|0)==(0);
				if ($48) {
					return;
				}
				$49 = $$in;
				__ZdlPv($49);
				return;
			}
			function __ZNK8Features11test_235EszERK7Charset($this,$charset) {
				$this = $this|0;
				$charset = $charset|0;
				var $$35 = 0, $$36 = 0, $$5 = 0, $$c6$0 = 0, $$lcssa = 0, $$lcssa156 = 0, $$lcssa158 = 0, $$not = 0, $$not29 = 0, $$phi$trans$insert110 = 0, $$phi$trans$insert112 = 0, $$phi$trans$insert115$phi$trans$insert = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $$pre114$pre = 0, $$pre116 = 0, $$pre116$pre = 0, $0 = 0, $1 = 0;
				var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
				var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
				var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
				var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
				var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
				var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
				var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
				var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
				var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
				var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
				var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
				var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
				var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
				var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
				var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
				var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
				var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
				var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
				var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
				var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
				var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
				var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
				var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
				var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
				var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
				var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
				var $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge30 = 0, $brmerge31 = 0, $c$073 = 0, $c6$0 = 0, $c6$2 = 0, $done$3$off0 = 0, $done$5$off0 = 0, $hdiff = 0, $i$098 = 0, $i4$0 = 0, $j$084 = 0, $lcol1$0103 = 0, $lcol1$1 = 0, $lcol2$0101 = 0, $lcol2$181 = 0, $lcol2$2 = 0;
				var $lcol2$4 = 0, $lrow1$0107 = 0, $lrow1$1 = 0, $lrow2$0105 = 0, $lrow2$188 = 0, $lrow2$2 = 0, $lrow2$4 = 0, $not$ = 0, $not$51 = 0, $or$cond = 0, $or$cond38 = 0, $or$cond50 = 0, $row$0 = 0, $row$0$lcssa = 0, $row$1 = 0, $row$1$lcssa154 = 0, $row$2 = 0, $row$3 = 0, $row$3$lcssa159 = 0, $ucol2$0102 = 0;
				var $ucol2$2 = 0, $ucol3$096 = 0, $ucol3$1$ = 0, $ucol3$175 = 0, $ucol3$3 = 0, $ucol3$5 = 0, $urow2$0106 = 0, $urow2$2 = 0, $urow3$0104 = 0, $urow3$1$row$3 = 0, $urow3$185 = 0, $urow3$3 = 0, $urow3$5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hdiff = sp;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($0)) + 8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$0>>2]|0;
				$4 = (($2) + 1)|0;
				$5 = (($4) - ($3))|0;
				$6 = ($5|0)<(9);
				if ($6) {
					$$5 = 0;
					STACKTOP = sp;return ($$5|0);
				}
				$7 = ((($0)) + 12|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = ((($0)) + 4|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = (($8) + 1)|0;
				$12 = (($11) - ($10))|0;
				$13 = ($5*3)|0;
				$14 = ($12|0)>($13|0);
				if ($14) {
					$$5 = 0;
					STACKTOP = sp;return ($$5|0);
				}
				$15 = ((($this)) + 200|0);
				$16 = (($12|0) / 2)&-1;
				$17 = (__ZN7Profile6minimaEi($15,$16)|0);
				$18 = ($17|0)>(1);
				if ($18) {
					$$5 = 0;
					STACKTOP = sp;return ($$5|0);
				}
				$19 = HEAP32[$this>>2]|0;
				$20 = ((($19)) + 12|0);
				$21 = HEAP32[$20>>2]|0;
				$22 = ((($19)) + 4|0);
				$23 = HEAP32[$22>>2]|0;
				$24 = (($21) + 1)|0;
				$25 = (($24) - ($23))|0;
				$26 = ((($19)) + 8|0);
				$27 = HEAP32[$26>>2]|0;
				$28 = HEAP32[$19>>2]|0;
				$29 = (($27) + 1)|0;
				$30 = (($29) - ($28))|0;
				$31 = ($30|0)<($25|0);
				$32 = $31 ? $30 : $25;
				$33 = (($32|0) / 15)&-1;
				$34 = (($33) + 1)|0;
				$35 = ((($this)) + 104|0);
				$37 = $28;$38 = $27;$47 = $23;$i$098 = 0;$lcol1$0103 = 0;$lcol2$0101 = 0;$lrow1$0107 = 0;$lrow2$0105 = 0;$ucol2$0102 = 0;$ucol3$096 = 0;$urow2$0106 = 0;$urow3$0104 = 0;
				while(1) {
					$36 = (($38) + ($37))|0;
					$39 = (($36|0) / 2)&-1;
					$40 = (312 + ($i$098<<2)|0);
					$41 = HEAP32[$40>>2]|0;
					$42 = Math_imul($41, $34)|0;
					$43 = (($39) + ($42))|0;
					$44 = (($43) - ($37))|0;
					$45 = (__ZN7ProfileixEi($35,$44)|0);
					$46 = (($45) + ($47))|0;
					$48 = HEAP32[$this>>2]|0;
					$49 = ((($48)) + 12|0);
					$50 = HEAP32[$49>>2]|0;
					$51 = ((($48)) + 4|0);
					$52 = ((($48)) + 16|0);
					$row$0 = $46;
					while(1) {
						$53 = (($row$0) + 1)|0;
						$54 = ($53|0)<($50|0);
						if (!($54)) {
							$$lcssa = $53;$row$0$lcssa = $row$0;
							break;
						}
						$55 = HEAP32[$51>>2]|0;
						$56 = (($53) - ($55))|0;
						$57 = HEAP32[$52>>2]|0;
						$58 = HEAP32[$48>>2]|0;
						$59 = (($43) - ($58))|0;
						$60 = (($57) + (($56*12)|0)|0);
						$61 = HEAP32[$60>>2]|0;
						$62 = (($61) + ($59)|0);
						$63 = HEAP8[$62>>0]|0;
						$64 = ($63<<24>>24)==(0);
						if ($64) {
							$$lcssa = $53;$row$0$lcssa = $row$0;
							break;
						} else {
							$row$0 = $53;
						}
					}
					$65 = ((($48)) + 4|0);
					$66 = HEAP32[$65>>2]|0;
					$67 = (($50) - ($66))|0;
					$68 = ($67*30)|0;
					$69 = (($68|0) / 100)&-1;
					$70 = (($69) + ($66))|0;
					$71 = ($row$0$lcssa|0)<($70|0);
					L16: do {
						if ($71) {
							$72 = ((($48)) + 4|0);
							$73 = ((($48)) + 16|0);
							$row$1 = $$lcssa;
							while(1) {
								$74 = (($row$1) + 1)|0;
								$75 = ($74|0)<($50|0);
								if (!($75)) {
									$done$5$off0 = 0;$lcol1$1 = $43;$lcol2$4 = $lcol2$0101;$lrow1$1 = $$lcssa;$lrow2$4 = $lrow2$0105;$ucol2$2 = $ucol2$0102;$ucol3$5 = $ucol3$096;$urow2$2 = $urow2$0106;$urow3$5 = $urow3$0104;
									break L16;
								}
								$76 = HEAP32[$72>>2]|0;
								$77 = (($74) - ($76))|0;
								$78 = HEAP32[$73>>2]|0;
								$79 = HEAP32[$48>>2]|0;
								$80 = (($43) - ($79))|0;
								$81 = (($78) + (($77*12)|0)|0);
								$82 = HEAP32[$81>>2]|0;
								$83 = (($82) + ($80)|0);
								$84 = HEAP8[$83>>0]|0;
								$85 = ($84<<24>>24)==(0);
								if ($85) {
									$row$1 = $74;
								} else {
									$$lcssa156 = $74;$row$1$lcssa154 = $row$1;
									break;
								}
							}
							$86 = HEAP32[$48>>2]|0;
							$87 = ((($48)) + 8|0);
							$88 = HEAP32[$87>>2]|0;
							$89 = (($88) + ($86))|0;
							$90 = (($89|0) / 2)&-1;
							$91 = ($i$098*3)|0;
							$92 = ((($48)) + 4|0);
							$93 = ((($48)) + 16|0);
							$94 = ((($48)) + 4|0);
							$95 = ((($48)) + 16|0);
							$96 = ((($48)) + 4|0);
							$97 = ((($48)) + 16|0);
							$98 = ($67*70)|0;
							$99 = (($98|0) / 100)&-1;
							$100 = (($99) + ($66))|0;
							$j$084 = 0;$lcol2$181 = $lcol2$0101;$lrow2$188 = $lrow2$0105;$ucol3$175 = $ucol3$096;$urow3$185 = $urow3$0104;
							while(1) {
								$101 = (($j$084) + ($91))|0;
								$102 = (324 + ($101<<2)|0);
								$103 = HEAP32[$102>>2]|0;
								$104 = Math_imul($103, $34)|0;
								$105 = (($90) + ($104))|0;
								$106 = ($43|0)==($105|0);
								L24: do {
									if ($106) {
										$row$2 = $$lcssa156;
										label = 18;
									} else {
										$107 = ($43|0)>($105|0);
										$108 = $107 ? 1 : -1;
										$109 = HEAP32[$92>>2]|0;
										$110 = (($$lcssa156) - ($109))|0;
										$111 = HEAP32[$93>>2]|0;
										$112 = HEAP32[$48>>2]|0;
										$113 = (($111) + (($110*12)|0)|0);
										$114 = HEAP32[$113>>2]|0;
										$c$073 = $105;
										while(1) {
											$117 = (($c$073) - ($112))|0;
											$118 = (($114) + ($117)|0);
											$119 = HEAP8[$118>>0]|0;
											$120 = ($119<<24>>24)==(0);
											$115 = (($c$073) + ($108))|0;
											if ($120) {
												$done$3$off0 = 0;$lcol2$2 = $lcol2$181;$lrow2$2 = $lrow2$188;$ucol3$3 = $ucol3$175;$urow3$3 = $urow3$185;
												break L24;
											}
											$116 = ($115|0)==($43|0);
											if ($116) {
												$row$2 = $$lcssa156;
												label = 18;
												break;
											} else {
												$c$073 = $115;
											}
										}
									}
								} while(0);
								L29: do {
									if ((label|0) == 18) {
										while(1) {
											label = 0;
											$121 = (($row$2) + 1)|0;
											$122 = ($121|0)<($50|0);
											if (!($122)) {
												$done$3$off0 = 0;$lcol2$2 = $lcol2$181;$lrow2$2 = $lrow2$188;$ucol3$3 = $ucol3$175;$urow3$3 = $urow3$185;
												break L29;
											}
											$123 = HEAP32[$94>>2]|0;
											$124 = (($121) - ($123))|0;
											$125 = HEAP32[$95>>2]|0;
											$126 = HEAP32[$48>>2]|0;
											$127 = (($105) - ($126))|0;
											$128 = (($125) + (($124*12)|0)|0);
											$129 = HEAP32[$128>>2]|0;
											$130 = (($129) + ($127)|0);
											$131 = HEAP8[$130>>0]|0;
											$132 = ($131<<24>>24)==(0);
											if ($132) {
												$$lcssa158 = $121;
												break;
											} else {
												$row$2 = $121;
												label = 18;
											}
										}
										$row$3 = $$lcssa158;
										while(1) {
											$133 = (($row$3) + 1)|0;
											$134 = ($row$3|0)<($50|0);
											if (!($134)) {
												$done$3$off0 = 0;$lcol2$2 = $105;$lrow2$2 = $$lcssa158;$ucol3$3 = $ucol3$175;$urow3$3 = $urow3$185;
												break L29;
											}
											$135 = HEAP32[$96>>2]|0;
											$136 = (($133) - ($135))|0;
											$137 = HEAP32[$97>>2]|0;
											$138 = HEAP32[$48>>2]|0;
											$139 = (($105) - ($138))|0;
											$140 = (($137) + (($136*12)|0)|0);
											$141 = HEAP32[$140>>2]|0;
											$142 = (($141) + ($139)|0);
											$143 = HEAP8[$142>>0]|0;
											$144 = ($143<<24>>24)==(0);
											if ($144) {
												$row$3 = $133;
											} else {
												$row$3$lcssa159 = $row$3;
												break;
											}
										}
										$145 = ($row$3$lcssa159|0)<($100|0);
										$ucol3$1$ = $145 ? $ucol3$175 : $105;
										$not$ = $145 ^ 1;
										$urow3$1$row$3 = $145 ? $urow3$185 : $row$3$lcssa159;
										$done$3$off0 = $not$;$lcol2$2 = $105;$lrow2$2 = $$lcssa158;$ucol3$3 = $ucol3$1$;$urow3$3 = $urow3$1$row$3;
									}
								} while(0);
								$146 = (($j$084) + 1)|0;
								$$not29 = ($j$084|0)>(1);
								$brmerge30 = $done$3$off0 | $$not29;
								if ($brmerge30) {
									$done$5$off0 = $done$3$off0;$lcol1$1 = $43;$lcol2$4 = $lcol2$2;$lrow1$1 = $$lcssa;$lrow2$4 = $lrow2$2;$ucol2$2 = $43;$ucol3$5 = $ucol3$3;$urow2$2 = $row$1$lcssa154;$urow3$5 = $urow3$3;
									break;
								} else {
									$j$084 = $146;$lcol2$181 = $lcol2$2;$lrow2$188 = $lrow2$2;$ucol3$175 = $ucol3$3;$urow3$185 = $urow3$3;
								}
							}
						} else {
							$done$5$off0 = 0;$lcol1$1 = $lcol1$0103;$lcol2$4 = $lcol2$0101;$lrow1$1 = $lrow1$0107;$lrow2$4 = $lrow2$0105;$ucol2$2 = $ucol2$0102;$ucol3$5 = $ucol3$096;$urow2$2 = $urow2$0106;$urow3$5 = $urow3$0104;
						}
					} while(0);
					$$not = ($i$098|0)>(1);
					$brmerge = $done$5$off0 | $$not;
					if ($brmerge) {
						break;
					}
					$147 = (($i$098) + 1)|0;
					$$pre = HEAP32[$48>>2]|0;
					$$phi$trans$insert110 = ((($48)) + 8|0);
					$$pre111 = HEAP32[$$phi$trans$insert110>>2]|0;
					$$phi$trans$insert112 = ((($48)) + 4|0);
					$$pre113 = HEAP32[$$phi$trans$insert112>>2]|0;
					$37 = $$pre;$38 = $$pre111;$47 = $$pre113;$i$098 = $147;$lcol1$0103 = $lcol1$1;$lcol2$0101 = $lcol2$4;$lrow1$0107 = $lrow1$1;$lrow2$0105 = $lrow2$4;$ucol2$0102 = $ucol2$2;$ucol3$096 = $ucol3$5;$urow2$0106 = $urow2$2;$urow3$0104 = $urow3$5;
				}
				if (!($done$5$off0)) {
					$$5 = 0;
					STACKTOP = sp;return ($$5|0);
				}
				$148 = (__ZNK6Bitmap13escape_bottomEii($48,$urow3$5,$ucol3$5)|0);
				$149 = HEAP32[$this>>2]|0;
				$150 = (__ZNK6Bitmap10escape_topEii($149,$lrow1$1,$lcol1$1)|0);
				$151 = $148 & $150;
				$152 = HEAP32[$this>>2]|0;
				$153 = ((($152)) + 4|0);
				$154 = HEAP32[$153>>2]|0;
				$155 = ((($152)) + 12|0);
				$156 = HEAP32[$155>>2]|0;
				$157 = (($156) + ($154))|0;
				$158 = (($157|0) / 2)&-1;
				$159 = HEAP32[$152>>2]|0;
				$160 = ((($152)) + 8|0);
				$161 = HEAP32[$160>>2]|0;
				$162 = (($161) + ($159))|0;
				$163 = (($162|0) / 2)&-1;
				$164 = (($158) - ($154))|0;
				$165 = ((($152)) + 16|0);
				$166 = HEAP32[$165>>2]|0;
				$167 = (($163) - ($159))|0;
				$168 = (($166) + (($164*12)|0)|0);
				$169 = HEAP32[$168>>2]|0;
				$170 = (($169) + ($167)|0);
				$171 = HEAP8[$170>>0]|0;
				$172 = ($171<<24>>24)!=(0);
				$173 = $172 ? 42 : 0;
				$174 = (__ZNK6Bitmap11escape_leftEii($152,$lrow2$4,$lcol2$4)|0);
				$175 = HEAP32[$this>>2]|0;
				L45: do {
					if ($174) {
						$176 = (__ZNK6Bitmap11escape_leftEii($175,$urow2$2,$ucol2$2)|0);
						if ($176) {
							if ($151) {
								$$5 = $173;
								STACKTOP = sp;return ($$5|0);
							}
							$brmerge31 = $148 | $150;
							if ($brmerge31) {
								break;
							}
							$177 = HEAP32[$this>>2]|0;
							$178 = ((($177)) + 12|0);
							$179 = HEAP32[$178>>2]|0;
							$180 = ((($177)) + 4|0);
							$181 = HEAP32[$180>>2]|0;
							$182 = (($179) + 1)|0;
							$183 = (($182) - ($181))|0;
							$184 = ((($177)) + 8|0);
							$185 = HEAP32[$184>>2]|0;
							$186 = HEAP32[$177>>2]|0;
							$187 = (($185) + 1)|0;
							$188 = (($187) - ($186))|0;
							$189 = ($188*3)|0;
							$190 = ($183|0)>($189|0);
							if ($190) {
								break;
							}
							$191 = ((($this)) + 56|0);
							$192 = (__ZN7Profile6minimaEi($191,-1)|0);
							$193 = ((($this)) + 152|0);
							$194 = (__ZN7Profile6minimaEi($193,-1)|0);
							$195 = $192 | 1;
							$196 = ($195|0)==(3);
							if (!($196)) {
								break;
							}
							switch ($194|0) {
								case 1:  {
									break;
								}
								case 2:  {
									$$5 = 51;
									STACKTOP = sp;return ($$5|0);
									break;
								}
								default: {
									break L45;
								}
							}
							$197 = (__ZN7Profile8iminimumEii($193,0,-1)|0);
							$198 = ((($this)) + 160|0);
							$199 = HEAP32[$198>>2]|0;
							$200 = ($199|0)<(0);
							if ($200) {
								__ZN7Profile10initializeEv($193);
							}
							$201 = ((($this)) + 188|0);
							$202 = ((($this)) + 192|0);
							$203 = HEAP32[$202>>2]|0;
							$204 = HEAP32[$201>>2]|0;
							$205 = (($203) - ($204))|0;
							$206 = $205 >> 2;
							$207 = ($206*80)|0;
							$208 = (($207) + -80)|0;
							$209 = (($208|0) / 100)&-1;
							$210 = ($197|0)<($209|0);
							if ($210) {
								$$5 = 51;
							} else {
								break;
							}
							STACKTOP = sp;return ($$5|0);
						}
						$211 = HEAP32[$this>>2]|0;
						$212 = (__ZNK6Bitmap12escape_rightEii($211,$urow2$2,$ucol2$2)|0);
						if ($212) {
							if ($151) {
								$$5 = $173;
								STACKTOP = sp;return ($$5|0);
							}
							$213 = ((($this)) + 152|0);
							$214 = (($lrow1$1) + 1)|0;
							$215 = HEAP32[$this>>2]|0;
							$216 = ((($215)) + 4|0);
							$217 = HEAP32[$216>>2]|0;
							$218 = (($214) - ($217))|0;
							$219 = (__ZN7ProfileixEi($213,$218)|0);
							$220 = HEAP32[$this>>2]|0;
							$221 = HEAP32[$220>>2]|0;
							$222 = (($lcol1$1) - ($221))|0;
							$223 = ($219|0)<($222|0);
							do {
								if (!($223)) {
									$224 = ((($this)) + 56|0);
									$225 = (($lrow2$4) + 1)|0;
									$226 = ((($220)) + 4|0);
									$227 = HEAP32[$226>>2]|0;
									$228 = (($225) - ($227))|0;
									$229 = (__ZN7ProfileixEi($224,$228)|0);
									$230 = HEAP32[$this>>2]|0;
									$231 = HEAP32[$230>>2]|0;
									$232 = (($lcol2$4) - ($231))|0;
									$233 = ($229|0)<($232|0);
									if (!($233)) {
										$234 = (($urow3$5) + -1)|0;
										$235 = ((($230)) + 4|0);
										$236 = HEAP32[$235>>2]|0;
										$237 = (($234) - ($236))|0;
										$238 = (__ZN7ProfileixEi($224,$237)|0);
										$239 = HEAP32[$this>>2]|0;
										$240 = HEAP32[$239>>2]|0;
										$241 = (($ucol3$5) - ($240))|0;
										$242 = ($238|0)<($241|0);
										if (!($242)) {
											break;
										}
									}
									$243 = ((($this)) + 64|0);
									$244 = HEAP32[$243>>2]|0;
									$245 = ($244|0)<(0);
									if ($245) {
										__ZN7Profile10initializeEv($224);
									}
									$246 = ((($this)) + 92|0);
									$247 = ((($this)) + 96|0);
									$248 = HEAP32[$247>>2]|0;
									$249 = HEAP32[$246>>2]|0;
									$250 = (($248) - ($249))|0;
									$251 = $250 >> 2;
									$252 = ($251*40)|0;
									$253 = (($252) + -40)|0;
									$254 = (($253|0) / 100)&-1;
									$i4$0 = $254;
									while(1) {
										$255 = HEAP32[$243>>2]|0;
										$256 = ($255|0)<(0);
										if ($256) {
											__ZN7Profile10initializeEv($224);
										}
										$257 = HEAP32[$247>>2]|0;
										$258 = HEAP32[$246>>2]|0;
										$259 = (($257) - ($258))|0;
										$260 = $259 >> 2;
										$261 = ($260*70)|0;
										$262 = (($261) + -70)|0;
										$263 = (($262|0) / 100)&-1;
										$264 = ($i4$0|0)>($263|0);
										if ($264) {
											break;
										}
										$265 = (__ZN7ProfileixEi($224,$i4$0)|0);
										$266 = ($265*5)|0;
										$267 = HEAP32[$this>>2]|0;
										$268 = ((($267)) + 8|0);
										$269 = HEAP32[$268>>2]|0;
										$270 = HEAP32[$267>>2]|0;
										$271 = (($269) + 1)|0;
										$272 = (($271) - ($270))|0;
										$273 = ($266|0)<($272|0);
										$274 = (($i4$0) + 1)|0;
										if (!($273)) {
											$i4$0 = $274;
											continue;
										}
										$275 = (__ZN7ProfileixEi($224,$274)|0);
										$276 = $275 << 1;
										$277 = HEAP32[$this>>2]|0;
										$278 = ((($277)) + 8|0);
										$279 = HEAP32[$278>>2]|0;
										$280 = HEAP32[$277>>2]|0;
										$281 = (($279) + 1)|0;
										$282 = (($281) - ($280))|0;
										$283 = ($276|0)>($282|0);
										if ($283) {
											$$5 = 53;
											label = 102;
											break;
										} else {
											$i4$0 = $274;
										}
									}
									if ((label|0) == 102) {
										STACKTOP = sp;return ($$5|0);
									}
									$284 = HEAP32[$this>>2]|0;
									$285 = (__ZNK6Bitmap8top_hookEPi($284,$hdiff)|0);
									if ($285) {
										$286 = HEAP32[$hdiff>>2]|0;
										$287 = ($286*5)|0;
										$288 = HEAP32[$this>>2]|0;
										$289 = ((($288)) + 12|0);
										$290 = HEAP32[$289>>2]|0;
										$291 = ((($288)) + 4|0);
										$292 = HEAP32[$291>>2]|0;
										$293 = (($290) + 1)|0;
										$294 = (($293) - ($292))|0;
										$295 = $294 << 2;
										$296 = ($287|0)<($295|0);
										if ($296) {
											$298 = $292;$c6$0 = 0;
										} else {
											$$pre116 = $292;
											label = 53;
										}
									} else {
										$$pre114$pre = HEAP32[$this>>2]|0;
										$$phi$trans$insert115$phi$trans$insert = ((($$pre114$pre)) + 4|0);
										$$pre116$pre = HEAP32[$$phi$trans$insert115$phi$trans$insert>>2]|0;
										$$pre116 = $$pre116$pre;
										label = 53;
									}
									if ((label|0) == 53) {
										$298 = $$pre116;$c6$0 = 1;
									}
									$297 = (($lrow2$4) - ($298))|0;
									$299 = (__ZN7ProfileixEi($224,$297)|0);
									$300 = $299 << 1;
									$301 = HEAP32[$this>>2]|0;
									$302 = HEAP32[$301>>2]|0;
									$303 = (($lcol2$4) - ($302))|0;
									$304 = ($300|0)<($303|0);
									$305 = $304&1;
									$$c6$0 = (($305) + ($c6$0))|0;
									$306 = (__ZN7Profile8isconvexEv($35)|0);
									if ($306) {
										$307 = (__ZN7Profile5ispitEv($35)|0);
										if ($307) {
											$c6$2 = $$c6$0;
										} else {
											$308 = (__ZN7Profile5ispitEv($15)|0);
											if ($308) {
												label = 57;
											} else {
												$c6$2 = $$c6$0;
											}
										}
									} else {
										label = 57;
									}
									if ((label|0) == 57) {
										$309 = (($$c6$0) + 1)|0;
										$c6$2 = $309;
									}
									$not$51 = ($c6$2|0)<(2);
									if (!($not$51)) {
										$$5 = 53;
										STACKTOP = sp;return ($$5|0);
									}
								}
							} while(0);
							$310 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
							if (!($310)) {
								$311 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
								if (!($311)) {
									$$5 = 115;
									STACKTOP = sp;return ($$5|0);
								}
							}
							$312 = HEAP32[$this>>2]|0;
							$313 = ((($312)) + 4|0);
							$314 = HEAP32[$313>>2]|0;
							$315 = ((($312)) + 12|0);
							$316 = HEAP32[$315>>2]|0;
							$317 = (($316) - ($314))|0;
							$318 = ($317*55)|0;
							$319 = (($318|0) / 100)&-1;
							$320 = (($319) + ($314))|0;
							$321 = ($urow2$2|0)>($320|0);
							if (!($321)) {
								$$5 = 115;
								STACKTOP = sp;return ($$5|0);
							}
							$322 = (($urow2$2) + -1)|0;
							$323 = (__ZNK6Bitmap10seek_rightEiib($312,$322,$ucol2$2,1)|0);
							$324 = HEAP32[$this>>2]|0;
							$325 = ((($324)) + 8|0);
							$326 = HEAP32[$325>>2]|0;
							$327 = ($323|0)<($326|0);
							if (!($327)) {
								$$5 = 115;
								STACKTOP = sp;return ($$5|0);
							}
							$328 = ((($324)) + 4|0);
							$329 = HEAP32[$328>>2]|0;
							$330 = ((($324)) + 12|0);
							$331 = HEAP32[$330>>2]|0;
							$332 = (($331) - ($329))|0;
							$333 = ($332*63)|0;
							$334 = (($333|0) / 100)&-1;
							$335 = (($334) + ($329))|0;
							$336 = ($urow2$2|0)>($335|0);
							$$35 = $336 ? 199 : 231;
							$$5 = $$35;
							STACKTOP = sp;return ($$5|0);
						}
					} else {
						$337 = (__ZNK6Bitmap12escape_rightEii($175,$lrow2$4,$lcol2$4)|0);
						if ($337) {
							$338 = HEAP32[$this>>2]|0;
							$339 = (__ZNK6Bitmap12escape_rightEii($338,$urow2$2,$ucol2$2)|0);
							if (!($339)) {
								$438 = HEAP32[$this>>2]|0;
								$439 = (__ZNK6Bitmap11escape_leftEii($438,$urow2$2,$ucol2$2)|0);
								if (!($439)) {
									break;
								}
								do {
									if (!($151)) {
										$440 = ((($this)) + 56|0);
										$441 = ((($this)) + 64|0);
										$442 = HEAP32[$441>>2]|0;
										$443 = ($442|0)<(0);
										if ($443) {
											__ZN7Profile10initializeEv($440);
										}
										$444 = ((($this)) + 92|0);
										$445 = ((($this)) + 96|0);
										$446 = HEAP32[$445>>2]|0;
										$447 = HEAP32[$444>>2]|0;
										$448 = (($446) - ($447))|0;
										$449 = $448 >> 2;
										$450 = ($449*50)|0;
										$451 = (($450) + -50)|0;
										$452 = (($451|0) / 100)&-1;
										$453 = (__ZN7ProfileixEi($440,$452)|0);
										$454 = $453 << 1;
										$455 = (($454) + 2)|0;
										$456 = HEAP32[$this>>2]|0;
										$457 = ((($456)) + 8|0);
										$458 = HEAP32[$457>>2]|0;
										$459 = HEAP32[$456>>2]|0;
										$460 = (($458) + 1)|0;
										$461 = (($460) - ($459))|0;
										$462 = ($455|0)<($461|0);
										if (!($462)) {
											$463 = (__ZN7Profile8isconvexEv($35)|0);
											if ($463) {
												$$5 = 50;
												STACKTOP = sp;return ($$5|0);
											}
											$464 = (__ZN7Profile5ispitEv($35)|0);
											if (!($464)) {
												$465 = (__ZN7Profile6isrtipEv($35)|0);
												if (!($465)) {
													break;
												}
											}
											$466 = (__ZN7Profile5ispitEv($15)|0);
											if (!($466)) {
												$$5 = 50;
												STACKTOP = sp;return ($$5|0);
											}
										}
									}
								} while(0);
								$467 = HEAP32[$this>>2]|0;
								$468 = ((($467)) + 12|0);
								$469 = HEAP32[$468>>2]|0;
								$470 = ((($467)) + 4|0);
								$471 = HEAP32[$470>>2]|0;
								$472 = (($469) + 1)|0;
								$473 = (($472) - ($471))|0;
								$474 = $473 << 1;
								$475 = ((($this)) + 296|0);
								$476 = (__ZN7Profile3maxEv($475)|0);
								$477 = ($476*5)|0;
								$478 = ($474|0)>($477|0);
								if ($478) {
									break;
								}
								$479 = ((($this)) + 208|0);
								$480 = HEAP32[$479>>2]|0;
								$481 = ($480|0)<(0);
								if ($481) {
									__ZN7Profile10initializeEv($15);
								}
								$482 = ((($this)) + 236|0);
								$483 = ((($this)) + 240|0);
								$484 = HEAP32[$483>>2]|0;
								$485 = HEAP32[$482>>2]|0;
								$486 = (($484) - ($485))|0;
								$487 = $486 >> 2;
								$488 = ($487*75)|0;
								$489 = (($488) + -75)|0;
								$490 = (($489|0) / 100)&-1;
								$491 = (__ZN7ProfileixEi($15,$490)|0);
								$492 = HEAP32[$this>>2]|0;
								$493 = ((($492)) + 12|0);
								$494 = HEAP32[$493>>2]|0;
								$495 = ((($492)) + 4|0);
								$496 = HEAP32[$495>>2]|0;
								$497 = (($494) + 1)|0;
								$498 = (($497) - ($496))|0;
								$499 = (($498|0) / 10)&-1;
								$500 = ($491|0)>($499|0);
								if ($500) {
									break;
								}
								$501 = ((($this)) + 304|0);
								$502 = HEAP32[$501>>2]|0;
								$503 = ($502|0)<(0);
								if ($503) {
									__ZN7Profile10initializeEv($475);
								}
								$504 = ((($this)) + 332|0);
								$505 = ((($this)) + 336|0);
								$506 = HEAP32[$505>>2]|0;
								$507 = HEAP32[$504>>2]|0;
								$508 = (($506) - ($507))|0;
								$509 = $508 >> 2;
								$510 = ($509*30)|0;
								$511 = (($510) + -30)|0;
								$512 = (($511|0) / 100)&-1;
								$513 = (__ZN7Profile3maxEii($475,0,$512)|0);
								$514 = HEAP32[$501>>2]|0;
								$515 = ($514|0)<(0);
								if ($515) {
									__ZN7Profile10initializeEv($475);
								}
								$516 = HEAP32[$505>>2]|0;
								$517 = HEAP32[$504>>2]|0;
								$518 = (($516) - ($517))|0;
								$519 = $518 >> 2;
								$520 = ($519*70)|0;
								$521 = (($520) + -70)|0;
								$522 = (($521|0) / 100)&-1;
								$523 = (__ZN7Profile3maxEii($475,$522,-1)|0);
								$524 = (__ZN5Ocrad7similarEiiii($513,$523,20,1)|0);
								if ($524) {
									$$5 = 122;
								} else {
									break;
								}
								STACKTOP = sp;return ($$5|0);
							}
							if ($151) {
								$$5 = $173;
								STACKTOP = sp;return ($$5|0);
							}
							$340 = HEAP32[$this>>2]|0;
							$341 = ((($340)) + 12|0);
							$342 = HEAP32[$341>>2]|0;
							$343 = ((($340)) + 4|0);
							$344 = HEAP32[$343>>2]|0;
							$345 = (($342) + 1)|0;
							$346 = (($345) - ($344))|0;
							$347 = (($346|0) / 5)&-1;
							$348 = (__ZN7Profile6minimaEi($15,$347)|0);
							$349 = ($348|0)==(1);
							if ($349) {
								$350 = ((($this)) + 56|0);
								$351 = (($lrow2$4) + ($urow3$5))|0;
								$352 = (($351|0) / 2)&-1;
								$353 = HEAP32[$this>>2]|0;
								$354 = ((($353)) + 4|0);
								$355 = HEAP32[$354>>2]|0;
								$356 = (($352) - ($355))|0;
								$357 = (__ZN7ProfileixEi($350,$356)|0);
								$358 = $357 << 3;
								$359 = HEAP32[$this>>2]|0;
								$360 = ((($359)) + 8|0);
								$361 = HEAP32[$360>>2]|0;
								$362 = HEAP32[$359>>2]|0;
								$363 = (($361) + 1)|0;
								$364 = (($363) - ($362))|0;
								$365 = ($358|0)<($364|0);
								if (!($365)) {
									$366 = (($lrow1$1) + ($urow2$2))|0;
									$367 = (($366|0) / 2)&-1;
									$368 = HEAP32[$359>>2]|0;
									$369 = (__ZNK6Bitmap10escape_topEii($359,$367,$368)|0);
									if ($369) {
										$370 = HEAP32[$this>>2]|0;
										$371 = HEAP32[$370>>2]|0;
										$372 = (__ZNK6Bitmap10escape_topEii($370,$352,$371)|0);
										if (!($372)) {
											$$5 = 102;
											STACKTOP = sp;return ($$5|0);
										}
									}
								}
								$373 = ((($this)) + 152|0);
								$374 = HEAP32[$this>>2]|0;
								$375 = ((($374)) + 8|0);
								$376 = HEAP32[$375>>2]|0;
								$377 = HEAP32[$374>>2]|0;
								$378 = (($376) + 1)|0;
								$379 = (($378) - ($377))|0;
								$380 = (($379|0) / 8)&-1;
								$381 = (__ZN7Profile6minimaEi($373,$380)|0);
								$382 = ($381|0)<(3);
								if ($382) {
									$383 = HEAP32[$this>>2]|0;
									$384 = (__ZNK6Bitmap13escape_bottomEii($383,$urow3$5,$ucol3$5)|0);
									if ($384) {
										$385 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
										if (!($385)) {
											$386 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
											if (!($386)) {
												$$5 = 70;
												STACKTOP = sp;return ($$5|0);
											}
										}
										$387 = ((($this)) + 64|0);
										$388 = HEAP32[$387>>2]|0;
										$389 = ($388|0)<(0);
										if ($389) {
											__ZN7Profile10initializeEv($350);
										}
										$390 = ((($this)) + 92|0);
										$391 = ((($this)) + 96|0);
										$392 = HEAP32[$391>>2]|0;
										$393 = HEAP32[$390>>2]|0;
										$394 = (($392) - ($393))|0;
										$395 = $394 >> 2;
										$396 = ($395*95)|0;
										$397 = (($396) + -95)|0;
										$398 = (($397|0) / 100)&-1;
										$399 = (__ZN7ProfileixEi($350,$398)|0);
										$400 = $399 << 1;
										$401 = ((($this)) + 160|0);
										$402 = HEAP32[$401>>2]|0;
										$403 = ($402|0)<(0);
										if ($403) {
											__ZN7Profile10initializeEv($373);
										}
										$404 = ((($this)) + 188|0);
										$405 = ((($this)) + 192|0);
										$406 = HEAP32[$405>>2]|0;
										$407 = HEAP32[$404>>2]|0;
										$408 = (($406) - ($407))|0;
										$409 = $408 >> 2;
										$410 = ($409*95)|0;
										$411 = (($410) + -95)|0;
										$412 = (($411|0) / 100)&-1;
										$413 = (__ZN7ProfileixEi($373,$412)|0);
										$414 = ($400|0)>($413|0);
										if (!($414)) {
											$$5 = 70;
											STACKTOP = sp;return ($$5|0);
										}
										$415 = HEAP32[$this>>2]|0;
										$416 = ((($415)) + 4|0);
										$417 = HEAP32[$416>>2]|0;
										$418 = ((($415)) + 12|0);
										$419 = HEAP32[$418>>2]|0;
										$420 = (($419) - ($417))|0;
										$421 = ($420*63)|0;
										$422 = (($421|0) / 100)&-1;
										$423 = (($422) + ($417))|0;
										$424 = ($urow2$2|0)>($423|0);
										$$36 = $424 ? 199 : 231;
										$$5 = $$36;
										STACKTOP = sp;return ($$5|0);
									}
								}
								$425 = ($lrow1$1|0)<($urow2$2|0);
								$426 = (($urow2$2) + 2)|0;
								$427 = ($426|0)<($lrow2$4|0);
								$or$cond = $425 & $427;
								$428 = ($lrow2$4|0)<($urow3$5|0);
								$or$cond38 = $428 & $or$cond;
								if ($or$cond38) {
									$429 = HEAP32[$this>>2]|0;
									$430 = ((($429)) + 4|0);
									$431 = HEAP32[$430>>2]|0;
									$432 = ((($429)) + 12|0);
									$433 = HEAP32[$432>>2]|0;
									$434 = (($433) + ($431))|0;
									$435 = (($434|0) / 2)&-1;
									$436 = ($urow2$2|0)>($435|0);
									$437 = ($lrow2$4|0)<($435|0);
									$or$cond50 = $436 | $437;
									if (!($or$cond50)) {
										$$5 = 69;
										STACKTOP = sp;return ($$5|0);
									}
								}
							}
						}
					}
				} while(0);
				$$5 = 0;
				STACKTOP = sp;return ($$5|0);
			}
			function __ZNK8Features12test_EFIJLlTERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$ = 0, $$0$ph = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$8 = 0, $$in = 0, $$in157 = 0, $$phi$trans$insert134 = 0, $$phi$trans$insert144 = 0, $$pre = 0, $$pre121 = 0, $$pre123 = 0, $$pre125 = 0, $$pre127 = 0, $$pre128 = 0, $$pre130 = 0, $$pre131 = 0, $$pre133 = 0, $$pre135 = 0;
				var $$pre137 = 0, $$pre145 = 0, $$pre147 = 0, $$pre148 = 0, $$pre149 = 0, $$pre153 = 0, $$pre155 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
				var $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0;
				var $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0;
				var $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0;
				var $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0;
				var $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0;
				var $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0;
				var $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0;
				var $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
				var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
				var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
				var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
				var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
				var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
				var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
				var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
				var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
				var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
				var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
				var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
				var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
				var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
				var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
				var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
				var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
				var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
				var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
				var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
				var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
				var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
				var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
				var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
				var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
				var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
				var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
				var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
				var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
				var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
				var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
				var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
				var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
				var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
				var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
				var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
				var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
				var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
				var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
				var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
				var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
				var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
				var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
				var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
				var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
				var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
				var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
				var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
				var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
				var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $hdiff = 0, $i$0 = 0, $i$0119 = 0, $i$0120 = 0, $ispos = 0, $ispos10 = 0, $ispos12 = 0, $ispos14 = 0, $ispos8 = 0;
				var $neg = 0, $neg11 = 0, $neg13 = 0, $neg15 = 0, $neg9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hdiff = sp;
				$0 = ((($this)) + 104|0);
				$1 = HEAP32[$this>>2]|0;
				$2 = ((($1)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($1)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = (($7|0) / 4)&-1;
				$9 = (__ZN7Profile6minimaEi($0,$8)|0);
				$10 = ($9|0)==(1);
				if (!($10)) {
					$$8 = 0;
					STACKTOP = sp;return ($$8|0);
				}
				$11 = ((($this)) + 200|0);
				$12 = HEAP32[$this>>2]|0;
				$13 = ((($12)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($12)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = (($14) + 1)|0;
				$18 = (($17) - ($16))|0;
				$19 = (($18|0) / 4)&-1;
				$20 = (__ZN7Profile6minimaEi($11,$19)|0);
				$21 = ($20|0)==(1);
				if (!($21)) {
					$$8 = 0;
					STACKTOP = sp;return ($$8|0);
				}
				$22 = HEAP32[$this>>2]|0;
				$23 = ((($22)) + 12|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = ((($22)) + 4|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = (($24) + 1)|0;
				$28 = (($27) - ($26))|0;
				$29 = ((($22)) + 8|0);
				$30 = HEAP32[$29>>2]|0;
				$31 = HEAP32[$22>>2]|0;
				$32 = (($30) + 1)|0;
				$33 = (($32) - ($31))|0;
				$34 = ($33|0)<($28|0);
				$35 = $34 ? $33 : $28;
				$36 = (($35|0) / 30)&-1;
				$37 = (($36) + 1)|0;
				$38 = ((($this)) + 56|0);
				$39 = ((($this)) + 64|0);
				$40 = HEAP32[$39>>2]|0;
				$41 = ($40|0)<(0);
				if ($41) {
					__ZN7Profile10initializeEv($38);
				}
				$42 = ((($this)) + 92|0);
				$43 = ((($this)) + 96|0);
				$44 = HEAP32[$43>>2]|0;
				$45 = HEAP32[$42>>2]|0;
				$46 = (($44) - ($45))|0;
				$47 = $46 >> 2;
				$48 = ($47*50)|0;
				$49 = (($48) + -50)|0;
				$50 = (($49|0) / 100)&-1;
				$51 = (__ZN7ProfileixEi($38,$50)|0);
				$52 = (($51) + ($37))|0;
				$53 = $52 << 1;
				$54 = HEAP32[$this>>2]|0;
				$55 = ((($54)) + 8|0);
				$56 = HEAP32[$55>>2]|0;
				$57 = HEAP32[$54>>2]|0;
				$58 = (($56) + 1)|0;
				$59 = (($58) - ($57))|0;
				$60 = ($53|0)>=($59|0);
				$61 = $60 ? 25 : 75;
				$62 = (($56) - ($57))|0;
				$63 = Math_imul($61, $62)|0;
				$64 = (($63|0) / 100)&-1;
				$65 = (($64) + ($57))|0;
				$66 = ((($54)) + 4|0);
				$67 = HEAP32[$66>>2]|0;
				$68 = ((($54)) + 12|0);
				$69 = HEAP32[$68>>2]|0;
				$70 = (($69) + ($67))|0;
				$71 = (($70|0) / 2)&-1;
				$72 = (__ZNK6Bitmap8seek_topEiib($54,$71,$65,1)|0);
				$73 = HEAP32[$this>>2]|0;
				$74 = ((($73)) + 4|0);
				$75 = HEAP32[$74>>2]|0;
				$76 = ($72|0)>($75|0);
				if ($76) {
					$77 = ((($73)) + 12|0);
					$78 = HEAP32[$77>>2]|0;
					$79 = (($78) - ($75))|0;
					$80 = (($79|0) / 4)&-1;
					$81 = (($80) + ($75))|0;
					$82 = ($72|0)<($81|0);
					if ($82) {
						$83 = (__ZNK6Bitmap10escape_topEii($73,$72,$65)|0);
						if ($83) {
							$$pre = HEAP32[$this>>2]|0;
							$84 = $$pre;
							label = 9;
						}
					}
				} else {
					$84 = $73;
					label = 9;
				}
				if ((label|0) == 9) {
					$85 = (__ZNK6Bitmap11bottom_hookEPi($84,$hdiff)|0);
					do {
						if ($85) {
							$86 = HEAP32[$hdiff>>2]|0;
							if ($60) {
								$87 = HEAP32[$this>>2]|0;
								$88 = ((($87)) + 12|0);
								$89 = HEAP32[$88>>2]|0;
								$90 = ((($87)) + 4|0);
								$91 = HEAP32[$90>>2]|0;
								$92 = (($89) + 1)|0;
								$93 = (($92) - ($91))|0;
								$94 = (($93|0) / 2)&-1;
								$95 = ($86|0)>($94|0);
								if (!($95)) {
									break;
								}
								$96 = ((($this)) + 152|0);
								$97 = ((($this)) + 160|0);
								$98 = HEAP32[$97>>2]|0;
								$99 = ($98|0)<(0);
								if ($99) {
									__ZN7Profile10initializeEv($96);
								}
								$100 = ((($this)) + 188|0);
								$101 = ((($this)) + 192|0);
								$102 = HEAP32[$101>>2]|0;
								$103 = HEAP32[$100>>2]|0;
								$104 = (($102) - ($103))|0;
								$105 = $104 >> 2;
								$106 = ($105*80)|0;
								$107 = (($106) + -80)|0;
								$108 = (($107|0) / 100)&-1;
								$109 = (__ZN7Profile10increasingEii($96,$108,1)|0);
								if (!($109)) {
									break;
								}
								$110 = (__ZN7Profile10decreasingEii($96,1,-1)|0);
								if ($110) {
									break;
								} else {
									$$0$ph = 74;
								}
							} else {
								$111 = (0 - ($86))|0;
								$112 = HEAP32[$this>>2]|0;
								$113 = ((($112)) + 12|0);
								$114 = HEAP32[$113>>2]|0;
								$115 = ((($112)) + 4|0);
								$116 = HEAP32[$115>>2]|0;
								$117 = (($114) + 1)|0;
								$118 = (($117) - ($116))|0;
								$119 = (($118|0) / 2)&-1;
								$120 = ($119|0)<($111|0);
								if (!($120)) {
									break;
								}
								$121 = HEAP32[$39>>2]|0;
								$122 = ($121|0)<(0);
								if ($122) {
									__ZN7Profile10initializeEv($38);
								}
								$123 = HEAP32[$43>>2]|0;
								$124 = HEAP32[$42>>2]|0;
								$125 = (($123) - ($124))|0;
								$126 = $125 >> 2;
								$127 = ($126*80)|0;
								$128 = (($127) + -80)|0;
								$129 = (($128|0) / 100)&-1;
								$130 = (__ZN7ProfileixEi($38,$129)|0);
								$131 = ($130*5)|0;
								$132 = HEAP32[$this>>2]|0;
								$133 = ((($132)) + 8|0);
								$134 = HEAP32[$133>>2]|0;
								$135 = HEAP32[$132>>2]|0;
								$136 = (($134) + 1)|0;
								$137 = (($136) - ($135))|0;
								$138 = $137 << 1;
								$139 = ($131|0)<($138|0);
								if ($139) {
									$140 = (($135) + ($134))|0;
									$141 = (($140|0) / 2)&-1;
									$142 = ($65|0)>($141|0);
									if ($142) {
										$$0$ph = 76;
									} else {
										break;
									}
								} else {
									$$0$ph = 118;
								}
							}
							$$8 = $$0$ph;
							STACKTOP = sp;return ($$8|0);
						}
					} while(0);
				}
				$143 = HEAP32[$this>>2]|0;
				$144 = ((($143)) + 12|0);
				$145 = HEAP32[$144>>2]|0;
				$146 = ((($143)) + 4|0);
				$147 = HEAP32[$146>>2]|0;
				$148 = (($145) + 1)|0;
				$149 = (($148) - ($147))|0;
				$150 = (($149|0) / 30)&-1;
				$151 = (($150) + 1)|0;
				$152 = (($151) + ($147))|0;
				$153 = (($145) - ($151))|0;
				$154 = (__ZNK8Features5vbarsEv($this)|0);
				$155 = ($154|0)==(1);
				if ($155) {
					$156 = ((($this)) + 20|0);
					$157 = HEAP32[$156>>2]|0;
					$158 = ((($157)) + 8|0);
					$159 = HEAP32[$158>>2]|0;
					$160 = HEAP32[$157>>2]|0;
					$161 = (($159) + 1)|0;
					$162 = (($161) - ($160))|0;
					$163 = ($162|0)>(1);
					if ($163) {
						$164 = $162 << 1;
						$165 = HEAP32[$this>>2]|0;
						$166 = ((($165)) + 8|0);
						$167 = HEAP32[$166>>2]|0;
						$168 = HEAP32[$165>>2]|0;
						$169 = (($167) + 1)|0;
						$170 = (($169) - ($168))|0;
						$171 = ($164|0)>($170|0);
						if (!($171)) {
							$172 = (($160) + ($159))|0;
							$173 = (($172|0) / 2)&-1;
							$174 = (($168) + ($167))|0;
							$175 = (($174|0) / 2)&-1;
							$176 = (($173) - ($175))|0;
							$ispos10 = ($176|0)>(-1);
							$neg11 = (0 - ($176))|0;
							$177 = $ispos10 ? $176 : $neg11;
							$178 = ($177|0)>($37|0);
							if (!($178)) {
								$179 = (($160) - ($168))|0;
								$180 = (($159) - ($167))|0;
								$181 = (($179) + ($180))|0;
								$ispos12 = ($181|0)>(-1);
								$neg13 = (0 - ($181))|0;
								$182 = $ispos12 ? $181 : $neg13;
								$183 = $37 << 1;
								$184 = ($182|0)>($183|0);
								if (!($184)) {
									$185 = (__ZNK8Features5hbarsEv($this)|0);
									$186 = ($185|0)==(1);
									if ($186) {
										$187 = ((($this)) + 8|0);
										$188 = HEAP32[$187>>2]|0;
										$189 = ((($188)) + 12|0);
										$190 = HEAP32[$189>>2]|0;
										$191 = ((($188)) + 4|0);
										$192 = HEAP32[$191>>2]|0;
										$193 = (($190) + 1)|0;
										$194 = (($193) - ($192))|0;
										$195 = $194 << 2;
										$196 = HEAP32[$this>>2]|0;
										$197 = ((($196)) + 12|0);
										$198 = HEAP32[$197>>2]|0;
										$199 = ((($196)) + 4|0);
										$200 = HEAP32[$199>>2]|0;
										$201 = (($198) + 1)|0;
										$202 = (($201) - ($200))|0;
										$203 = ($195|0)>($202|0);
										if (!($203)) {
											$204 = ($192|0)>($152|0);
											if ($204) {
												$205 = (($198) - ($200))|0;
												$206 = ($205*15)|0;
												$207 = (($206|0) / 100)&-1;
												$208 = (($207) + ($200))|0;
												$209 = ($190|0)<($208|0);
												if ($209) {
													label = 32;
												} else {
													$267 = $196;
												}
											} else {
												label = 32;
											}
											do {
												if ((label|0) == 32) {
													$210 = ((($188)) + 8|0);
													$211 = HEAP32[$210>>2]|0;
													$212 = HEAP32[$188>>2]|0;
													$213 = (($211) + 1)|0;
													$214 = (($213) - ($212))|0;
													$215 = ((($this)) + 296|0);
													$216 = ((($this)) + 304|0);
													$217 = HEAP32[$216>>2]|0;
													$218 = ($217|0)<(0);
													if ($218) {
														__ZN7Profile10initializeEv($215);
													}
													$219 = ((($this)) + 332|0);
													$220 = ((($this)) + 336|0);
													$221 = HEAP32[$220>>2]|0;
													$222 = HEAP32[$219>>2]|0;
													$223 = (($221) - ($222))|0;
													$224 = $223 >> 2;
													$225 = ($224*75)|0;
													$226 = (($225) + -75)|0;
													$227 = (($226|0) / 100)&-1;
													$228 = (__ZN7ProfileixEi($215,$227)|0);
													$229 = HEAP32[$216>>2]|0;
													$230 = ($229|0)<(0);
													if ($230) {
														__ZN7Profile10initializeEv($215);
													}
													$231 = HEAP32[$220>>2]|0;
													$232 = HEAP32[$219>>2]|0;
													$233 = (($231) - ($232))|0;
													$234 = $233 >> 2;
													$235 = ($234*80)|0;
													$236 = (($235) + -80)|0;
													$237 = (($236|0) / 100)&-1;
													$238 = (__ZN7ProfileixEi($215,$237)|0);
													$239 = (($238) + ($228))|0;
													$240 = ($214|0)<($239|0);
													if ($240) {
														$$pre121 = HEAP32[$this>>2]|0;
														$267 = $$pre121;
														break;
													}
													$241 = HEAP32[$39>>2]|0;
													$242 = ($241|0)<(0);
													if ($242) {
														__ZN7Profile10initializeEv($38);
													}
													$243 = HEAP32[$43>>2]|0;
													$244 = HEAP32[$42>>2]|0;
													$245 = (($243) - ($244))|0;
													$246 = $245 >> 2;
													$247 = ($246*50)|0;
													$248 = (($247) + -50)|0;
													$249 = (($248|0) / 100)&-1;
													$250 = (__ZN7ProfileixEi($38,$249)|0);
													$251 = $250 << 2;
													$252 = HEAP32[$this>>2]|0;
													$253 = ((($252)) + 8|0);
													$254 = HEAP32[$253>>2]|0;
													$255 = HEAP32[$252>>2]|0;
													$256 = (($254) + 1)|0;
													$257 = (($256) - ($255))|0;
													$258 = ($251|0)<($257|0);
													if ($258) {
														$267 = $252;
													} else {
														$$8 = 84;
														STACKTOP = sp;return ($$8|0);
													}
												}
											} while(0);
											$259 = HEAP32[$187>>2]|0;
											$260 = ((($259)) + 4|0);
											$261 = HEAP32[$260>>2]|0;
											$262 = ((($259)) + 12|0);
											$263 = HEAP32[$262>>2]|0;
											$264 = (($263) + ($261))|0;
											$265 = (($264|0) / 2)&-1;
											$266 = ((($267)) + 4|0);
											$268 = HEAP32[$266>>2]|0;
											$269 = ((($267)) + 12|0);
											$270 = HEAP32[$269>>2]|0;
											$271 = (($270) + ($268))|0;
											$272 = (($271|0) / 2)&-1;
											$273 = (($265) - ($272))|0;
											$ispos14 = ($273|0)>(-1);
											$neg15 = (0 - ($273))|0;
											$274 = $ispos14 ? $273 : $neg15;
											$275 = ($274|0)>($151|0);
											if (!($275)) {
												$276 = ((($259)) + 8|0);
												$277 = HEAP32[$276>>2]|0;
												$278 = HEAP32[$259>>2]|0;
												$279 = (($277) + 1)|0;
												$280 = (($279) - ($278))|0;
												$281 = ((($267)) + 8|0);
												$282 = HEAP32[$281>>2]|0;
												$283 = HEAP32[$267>>2]|0;
												$284 = (($282) + 1)|0;
												$285 = (($284) - ($283))|0;
												$286 = ($280|0)<($285|0);
												if (!($286)) {
													$287 = (1 - ($268))|0;
													$288 = (($287) + ($270))|0;
													$289 = (__ZN5Ocrad7similarEiiii($288,$285,50,1)|0);
													if ($289) {
														$$8 = 43;
														STACKTOP = sp;return ($$8|0);
													}
												}
											}
										}
									}
									$290 = (__ZNK8Features5hbarsEv($this)|0);
									$291 = ($290|0)==(2);
									if ($291) {
										$292 = ((($this)) + 8|0);
										$293 = HEAP32[$292>>2]|0;
										$294 = ((($293)) + 4|0);
										$295 = HEAP32[$294>>2]|0;
										$296 = ($295|0)>($152|0);
										if (!($296)) {
											$297 = ((($293)) + 12|0);
											$298 = HEAP32[$297>>2]|0;
											$299 = (1 - ($295))|0;
											$300 = (($299) + ($298))|0;
											$301 = $300 << 2;
											$302 = HEAP32[$this>>2]|0;
											$303 = ((($302)) + 12|0);
											$304 = HEAP32[$303>>2]|0;
											$305 = ((($302)) + 4|0);
											$306 = HEAP32[$305>>2]|0;
											$307 = (($304) + 1)|0;
											$308 = (($307) - ($306))|0;
											$309 = ($301|0)>($308|0);
											if (!($309)) {
												$310 = ((($293)) + 28|0);
												$311 = HEAP32[$310>>2]|0;
												$312 = ($311|0)<($153|0);
												if (!($312)) {
													$313 = ((($293)) + 20|0);
													$314 = HEAP32[$313>>2]|0;
													$315 = (($311) + 1)|0;
													$316 = (($315) - ($314))|0;
													$317 = $316 << 2;
													$318 = ($317|0)>($308|0);
													if (!($318)) {
														$319 = ((($293)) + 8|0);
														$320 = HEAP32[$319>>2]|0;
														$321 = HEAP32[$293>>2]|0;
														$322 = (($320) + 1)|0;
														$323 = (($322) - ($321))|0;
														$324 = ($323*3)|0;
														$325 = ((($293)) + 24|0);
														$326 = HEAP32[$325>>2]|0;
														$327 = ((($293)) + 16|0);
														$328 = HEAP32[$327>>2]|0;
														$329 = (($326) + 1)|0;
														$330 = (($329) - ($328))|0;
														$331 = $330 << 2;
														$332 = ($324|0)>($331|0);
														if ($332) {
															$$8 = 84;
															STACKTOP = sp;return ($$8|0);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				$333 = (__ZNK8Features5vbarsEv($this)|0);
				$334 = ($333|0)==(1);
				if ($334) {
					$335 = ((($this)) + 20|0);
					$336 = HEAP32[$335>>2]|0;
					$337 = ((($336)) + 8|0);
					$338 = HEAP32[$337>>2]|0;
					$339 = HEAP32[$336>>2]|0;
					$340 = (($338) + 1)|0;
					$341 = (($340) - ($339))|0;
					$342 = ($341|0)>(1);
					if ($342) {
						$343 = $341 << 1;
						$344 = HEAP32[$this>>2]|0;
						$345 = ((($344)) + 8|0);
						$346 = HEAP32[$345>>2]|0;
						$347 = HEAP32[$344>>2]|0;
						$348 = (($346) + 1)|0;
						$349 = (($348) - ($347))|0;
						$350 = ($343|0)>($349|0);
						do {
							if (!($350)) {
								$351 = (($347) + ($346))|0;
								$352 = (($351|0) / 2)&-1;
								$353 = ($338|0)>($352|0);
								if (!($353)) {
									$354 = (__ZNK8Features5hbarsEv($this)|0);
									$355 = ($354|0)==(2);
									if ($355) {
										label = 56;
									} else {
										$356 = (__ZNK8Features5hbarsEv($this)|0);
										$357 = ($356|0)==(3);
										if ($357) {
											label = 56;
										}
									}
									do {
										if ((label|0) == 56) {
											$358 = ((($this)) + 8|0);
											$359 = HEAP32[$358>>2]|0;
											$360 = ((($359)) + 4|0);
											$361 = HEAP32[$360>>2]|0;
											$362 = ($361|0)>($152|0);
											if (!($362)) {
												$363 = ((($359)) + 8|0);
												$364 = HEAP32[$363>>2]|0;
												$365 = HEAP32[$359>>2]|0;
												$366 = (($364) + 2)|0;
												$367 = (($366) - ($365))|0;
												$368 = ((($359)) + 16|0);
												$369 = ((($359)) + 24|0);
												$370 = HEAP32[$369>>2]|0;
												$371 = HEAP32[$368>>2]|0;
												$372 = (($370) + 1)|0;
												$373 = (($372) - ($371))|0;
												$374 = ($367|0)<($373|0);
												if (!($374)) {
													$375 = $373 << 1;
													$376 = HEAP32[$335>>2]|0;
													$377 = ((($376)) + 8|0);
													$378 = HEAP32[$377>>2]|0;
													$379 = HEAP32[$376>>2]|0;
													$380 = (($378) + 1)|0;
													$381 = (($380) - ($379))|0;
													$382 = ($381*3)|0;
													$383 = ($375|0)<($382|0);
													if (!($383)) {
														$384 = (__ZNK9Rectangle10h_overlapsERKS_($376,$368)|0);
														if ($384) {
															$385 = (__ZNK8Features5hbarsEv($this)|0);
															$386 = ($385|0)==(3);
															do {
																if ($386) {
																	$387 = HEAP32[$358>>2]|0;
																	$388 = ((($387)) + 8|0);
																	$389 = HEAP32[$388>>2]|0;
																	$390 = HEAP32[$387>>2]|0;
																	$391 = (($389) + 1)|0;
																	$392 = (($391) - ($390))|0;
																	$393 = ((($387)) + 40|0);
																	$394 = HEAP32[$393>>2]|0;
																	$395 = ((($387)) + 32|0);
																	$396 = HEAP32[$395>>2]|0;
																	$397 = (($394) + 1)|0;
																	$398 = (($397) - ($396))|0;
																	$399 = (__ZN5Ocrad7similarEiiii($392,$398,10,2)|0);
																	if ($399) {
																		$400 = HEAP32[$358>>2]|0;
																		$401 = ((($400)) + 40|0);
																		$402 = HEAP32[$401>>2]|0;
																		$403 = ((($400)) + 32|0);
																		$404 = HEAP32[$403>>2]|0;
																		$405 = (($402) + 1)|0;
																		$406 = (($405) - ($404))|0;
																		$407 = ($406*10)|0;
																		$408 = ((($400)) + 24|0);
																		$409 = HEAP32[$408>>2]|0;
																		$410 = ((($400)) + 16|0);
																		$411 = HEAP32[$410>>2]|0;
																		$412 = (($409) + 1)|0;
																		$413 = (($412) - ($411))|0;
																		$414 = ($413*9)|0;
																		$415 = ($407|0)<($414|0);
																		if ($415) {
																			break;
																		}
																		$416 = HEAP32[$400>>2]|0;
																		$417 = (($411) + 1)|0;
																		$418 = ($416|0)>($417|0);
																		if ($418) {
																			break;
																		} else {
																			$$8 = 69;
																		}
																		STACKTOP = sp;return ($$8|0);
																	}
																}
															} while(0);
															$419 = (__ZNK8Features5hbarsEv($this)|0);
															$420 = ($419|0)==(2);
															$$pre123 = HEAP32[$358>>2]|0;
															if (!($420)) {
																$421 = ((($$pre123)) + 8|0);
																$422 = HEAP32[$421>>2]|0;
																$423 = HEAP32[$$pre123>>2]|0;
																$424 = (($422) + 1)|0;
																$425 = (($424) - ($423))|0;
																$426 = ((($$pre123)) + 40|0);
																$427 = HEAP32[$426>>2]|0;
																$428 = ((($$pre123)) + 32|0);
																$429 = HEAP32[$428>>2]|0;
																$430 = (($427) + 1)|0;
																$431 = (($430) - ($429))|0;
																$432 = ($425|0)>($431|0);
																if (!($432)) {
																	break;
																}
															}
															$433 = ((($$pre123)) + 16|0);
															$434 = HEAP32[$this>>2]|0;
															$435 = (__ZNK9Rectangle16includes_vcenterERKS_($433,$434)|0);
															if ($435) {
																$$8 = 70;
																STACKTOP = sp;return ($$8|0);
															}
															$436 = HEAP32[$358>>2]|0;
															$437 = ((($436)) + 24|0);
															$438 = HEAP32[$437>>2]|0;
															$439 = ((($436)) + 16|0);
															$440 = HEAP32[$439>>2]|0;
															$441 = (($438) + 1)|0;
															$442 = (($441) - ($440))|0;
															$443 = ($442*3)|0;
															$444 = ((($436)) + 8|0);
															$445 = HEAP32[$444>>2]|0;
															$446 = HEAP32[$436>>2]|0;
															$447 = (($445) + 1)|0;
															$448 = (($447) - ($446))|0;
															$449 = $448 << 1;
															$450 = ($443|0)>($449|0);
															if (!($450)) {
																break;
															}
															$451 = (__ZN7ProfileixEi($38,$151)|0);
															$452 = ($451*10)|0;
															$453 = HEAP32[$this>>2]|0;
															$454 = ((($453)) + 8|0);
															$455 = HEAP32[$454>>2]|0;
															$456 = HEAP32[$453>>2]|0;
															$457 = (($455) + 1)|0;
															$458 = (($457) - ($456))|0;
															$459 = ($452|0)<($458|0);
															if (!($459)) {
																break;
															}
															$460 = HEAP32[$358>>2]|0;
															$461 = ((($460)) + 20|0);
															$462 = HEAP32[$461>>2]|0;
															$463 = ((($453)) + 4|0);
															$464 = HEAP32[$463>>2]|0;
															$465 = ((($453)) + 12|0);
															$466 = HEAP32[$465>>2]|0;
															$467 = (($466) - ($464))|0;
															$468 = ($467*30)|0;
															$469 = (($468|0) / 100)&-1;
															$470 = (($469) + ($464))|0;
															$471 = ($462|0)>($470|0);
															if (!($471)) {
																break;
															}
															$472 = ((($460)) + 28|0);
															$473 = HEAP32[$472>>2]|0;
															$474 = ($467*60)|0;
															$475 = (($474|0) / 100)&-1;
															$476 = (($475) + ($464))|0;
															$477 = ($473|0)<($476|0);
															if ($477) {
																$$8 = 70;
															} else {
																break;
															}
															STACKTOP = sp;return ($$8|0);
														}
													}
												}
											}
										}
									} while(0);
									$478 = (__ZNK8Features5hbarsEv($this)|0);
									$479 = ($478|0)==(2);
									if ($479) {
										$480 = ((($this)) + 8|0);
										$481 = HEAP32[$480>>2]|0;
										$482 = ((($481)) + 28|0);
										$483 = HEAP32[$482>>2]|0;
										$484 = ($483|0)<($153|0);
										if (!($484)) {
											$485 = HEAP32[$this>>2]|0;
											$486 = ((($485)) + 12|0);
											$487 = HEAP32[$486>>2]|0;
											$488 = ((($485)) + 4|0);
											$489 = HEAP32[$488>>2]|0;
											$490 = (($487) + 1)|0;
											$491 = (($490) - ($489))|0;
											$492 = ((($485)) + 8|0);
											$493 = HEAP32[$492>>2]|0;
											$494 = HEAP32[$485>>2]|0;
											$495 = (($493) + 1)|0;
											$496 = (($495) - ($494))|0;
											$497 = ($491|0)>($496|0);
											if ($497) {
												$498 = ((($481)) + 24|0);
												$499 = HEAP32[$498>>2]|0;
												$500 = ((($481)) + 16|0);
												$501 = HEAP32[$500>>2]|0;
												$502 = (($499) + 1)|0;
												$503 = (($502) - ($501))|0;
												$504 = ((($481)) + 8|0);
												$505 = HEAP32[$504>>2]|0;
												$506 = HEAP32[$481>>2]|0;
												$507 = (($505) + 1)|0;
												$508 = (($507) - ($506))|0;
												$509 = ($503|0)>($508|0);
												if ($509) {
													$510 = HEAP32[$335>>2]|0;
													$511 = HEAP32[$510>>2]|0;
													$512 = ((($510)) + 8|0);
													$513 = HEAP32[$512>>2]|0;
													$514 = (($513) + ($511))|0;
													$515 = (($514|0) / 2)&-1;
													$516 = (($506) + ($505))|0;
													$517 = (($516|0) / 2)&-1;
													$518 = (($515) - ($517))|0;
													$ispos8 = ($518|0)>(-1);
													$neg9 = (0 - ($518))|0;
													$519 = $ispos8 ? $518 : $neg9;
													$520 = ($519|0)<(2);
													if ($520) {
														$521 = ((($this)) + 152|0);
														$522 = (__ZN7Profile8iminimumEii($521,0,-1)|0);
														$523 = ((($this)) + 160|0);
														$524 = HEAP32[$523>>2]|0;
														$525 = ($524|0)<(0);
														if ($525) {
															__ZN7Profile10initializeEv($521);
														}
														$526 = ((($this)) + 188|0);
														$527 = ((($this)) + 192|0);
														$528 = HEAP32[$527>>2]|0;
														$529 = HEAP32[$526>>2]|0;
														$530 = (($528) - ($529))|0;
														$531 = $530 >> 2;
														$532 = ($531*70)|0;
														$533 = (($532) + -70)|0;
														$534 = (($533|0) / 100)&-1;
														$535 = ($522|0)>($534|0);
														if ($535) {
															$$8 = 76;
															STACKTOP = sp;return ($$8|0);
														}
													}
												}
											}
										}
									}
									$536 = (__ZNK8Features5hbarsEv($this)|0);
									$537 = ($536|0)==(1);
									if ($537) {
										$538 = ((($this)) + 8|0);
										$539 = HEAP32[$538>>2]|0;
										$540 = ((($539)) + 8|0);
										$541 = HEAP32[$540>>2]|0;
										$542 = HEAP32[$539>>2]|0;
										$543 = (($541) + 1)|0;
										$544 = (($543) - ($542))|0;
										$545 = HEAP32[$this>>2]|0;
										$546 = ((($545)) + 8|0);
										$547 = HEAP32[$546>>2]|0;
										$548 = HEAP32[$545>>2]|0;
										$549 = (($547) + 1)|0;
										$550 = (($549) - ($548))|0;
										$551 = (__ZN5Ocrad7similarEiiii($544,$550,10,1)|0);
										if ($551) {
											$552 = HEAP32[$335>>2]|0;
											$553 = HEAP32[$552>>2]|0;
											$554 = HEAP32[$this>>2]|0;
											$555 = HEAP32[$554>>2]|0;
											$556 = ((($554)) + 8|0);
											$557 = HEAP32[$556>>2]|0;
											$558 = (($557) - ($555))|0;
											$559 = ($558*30)|0;
											$560 = (($559|0) / 100)&-1;
											$561 = (($560) + ($555))|0;
											$562 = ($553|0)>($561|0);
											if (!($562)) {
												$563 = HEAP32[$538>>2]|0;
												$564 = ((($563)) + 12|0);
												$565 = HEAP32[$564>>2]|0;
												$566 = ($565|0)<($153|0);
												do {
													if ($566) {
														$578 = $563;
													} else {
														$567 = ((($554)) + 4|0);
														$568 = HEAP32[$567>>2]|0;
														$569 = ((($554)) + 12|0);
														$570 = HEAP32[$569>>2]|0;
														$571 = (($570) + ($568))|0;
														$572 = (($571|0) / 2)&-1;
														$573 = ($558*75)|0;
														$574 = (($573|0) / 100)&-1;
														$575 = (($574) + ($555))|0;
														$576 = (__ZNK6Bitmap10escape_topEii($554,$572,$575)|0);
														if ($576) {
															$$8 = 76;
															STACKTOP = sp;return ($$8|0);
														} else {
															$$pre125 = HEAP32[$538>>2]|0;
															$578 = $$pre125;
															break;
														}
													}
												} while(0);
												$577 = ((($578)) + 4|0);
												$579 = HEAP32[$577>>2]|0;
												$580 = ($579|0)>($152|0);
												if (!($580)) {
													$581 = ((($this)) + 296|0);
													$582 = ((($this)) + 304|0);
													$583 = HEAP32[$582>>2]|0;
													$584 = ($583|0)<(0);
													if ($584) {
														__ZN7Profile10initializeEv($581);
													}
													$585 = ((($this)) + 332|0);
													$586 = ((($this)) + 336|0);
													$587 = HEAP32[$586>>2]|0;
													$588 = HEAP32[$585>>2]|0;
													$589 = (($587) - ($588))|0;
													$590 = $589 >> 2;
													$591 = ($590*50)|0;
													$592 = (($591) + -50)|0;
													$593 = (($592|0) / 100)&-1;
													$594 = (__ZN7ProfileixEi($581,$593)|0);
													$595 = $594 << 1;
													$596 = HEAP32[$this>>2]|0;
													$597 = ((($596)) + 8|0);
													$598 = HEAP32[$597>>2]|0;
													$599 = HEAP32[$596>>2]|0;
													$600 = (($598) + 1)|0;
													$601 = (($600) - ($599))|0;
													$602 = ($595|0)<($601|0);
													if (!($602)) {
														$603 = HEAP32[$582>>2]|0;
														$604 = ($603|0)<(0);
														if ($604) {
															__ZN7Profile10initializeEv($581);
														}
														$605 = HEAP32[$586>>2]|0;
														$606 = HEAP32[$585>>2]|0;
														$607 = (($605) - ($606))|0;
														$608 = $607 >> 2;
														$609 = ($608*75)|0;
														$610 = (($609) + -75)|0;
														$611 = (($610|0) / 100)&-1;
														$612 = (__ZN7ProfileixEi($581,$611)|0);
														$613 = $612 << 2;
														$614 = HEAP32[$this>>2]|0;
														$615 = ((($614)) + 8|0);
														$616 = HEAP32[$615>>2]|0;
														$617 = HEAP32[$614>>2]|0;
														$618 = (($616) + 1)|0;
														$619 = (($618) - ($617))|0;
														$620 = ($613|0)<($619|0);
														if (!($620)) {
															break;
														}
														$621 = ((($614)) + 4|0);
														$622 = HEAP32[$621>>2]|0;
														$623 = ((($614)) + 12|0);
														$624 = HEAP32[$623>>2]|0;
														$625 = (($624) - ($622))|0;
														$626 = (($625|0) / 4)&-1;
														$627 = (($626) + ($622))|0;
														$628 = (($617) + ($616))|0;
														$629 = (($628|0) / 2)&-1;
														$630 = (__ZNK6Bitmap12escape_rightEii($614,$627,$629)|0);
														if ($630) {
															$$8 = 70;
														} else {
															break;
														}
														STACKTOP = sp;return ($$8|0);
													}
												}
											}
										}
									}
								}
							}
						} while(0);
						$631 = HEAP32[$335>>2]|0;
						$632 = ((($631)) + 8|0);
						$633 = HEAP32[$632>>2]|0;
						$634 = HEAP32[$631>>2]|0;
						$635 = (($633) + 1)|0;
						$636 = (($635) - ($634))|0;
						$637 = ($636*3)|0;
						$638 = HEAP32[$this>>2]|0;
						$639 = ((($638)) + 8|0);
						$640 = HEAP32[$639>>2]|0;
						$641 = HEAP32[$638>>2]|0;
						$642 = (($640) + 1)|0;
						$643 = (($642) - ($641))|0;
						$644 = $643 << 1;
						$645 = ($637|0)<($644|0);
						if ($645) {
							$646 = (($640) - ($641))|0;
							$647 = ($646*33)|0;
							$648 = (($647|0) / 100)&-1;
							$649 = (($648) + ($641))|0;
							$650 = ($634|0)>($649|0);
							if ($650) {
								$651 = (__ZNK8Features5hbarsEv($this)|0);
								$652 = ($651|0)==(1);
								if ($652) {
									$653 = HEAP32[$335>>2]|0;
									$654 = ((($653)) + 8|0);
									$655 = HEAP32[$654>>2]|0;
									$656 = HEAP32[$this>>2]|0;
									$657 = HEAP32[$656>>2]|0;
									$658 = ((($656)) + 8|0);
									$659 = HEAP32[$658>>2]|0;
									$660 = (($659) - ($657))|0;
									$661 = ($660*90)|0;
									$662 = (($661|0) / 100)&-1;
									$663 = (($662) + ($657))|0;
									$664 = ($655|0)<($663|0);
									$$pre153 = ((($this)) + 8|0);
									if (!($664)) {
										$665 = HEAP32[$$pre153>>2]|0;
										$666 = ((($665)) + 12|0);
										$667 = HEAP32[$666>>2]|0;
										$668 = ($667|0)<($153|0);
										if (!($668)) {
											$669 = HEAP32[$665>>2]|0;
											$670 = ($669|0)==($657|0);
											if ($670) {
												$671 = ((($656)) + 12|0);
												$672 = HEAP32[$671>>2]|0;
												$673 = ((($charbox)) + 4|0);
												$674 = HEAP32[$673>>2]|0;
												$675 = ((($charbox)) + 12|0);
												$676 = HEAP32[$675>>2]|0;
												$677 = (($676) - ($674))|0;
												$678 = ($677*90)|0;
												$679 = (($678|0) / 100)&-1;
												$680 = (($679) + ($674))|0;
												$681 = ($672|0)>($680|0);
												if ($681) {
													$682 = ((($656)) + 4|0);
													$683 = HEAP32[$682>>2]|0;
													$684 = ((($656)) + 12|0);
													$685 = HEAP32[$684>>2]|0;
													$686 = (($685) + ($683))|0;
													$687 = (($686|0) / 2)&-1;
													$688 = (($660|0) / 4)&-1;
													$689 = (($688) + ($657))|0;
													$690 = (__ZNK6Bitmap10escape_topEii($656,$687,$689)|0);
													if ($690) {
														$691 = HEAP32[$this>>2]|0;
														$692 = ((($691)) + 12|0);
														$693 = HEAP32[$692>>2]|0;
														$694 = ((($691)) + 4|0);
														$695 = HEAP32[$694>>2]|0;
														$696 = (($693) + 1)|0;
														$697 = (($696) - ($695))|0;
														$698 = ((($691)) + 8|0);
														$699 = HEAP32[$698>>2]|0;
														$700 = HEAP32[$691>>2]|0;
														$701 = (($699) + 1)|0;
														$702 = (($701) - ($700))|0;
														$703 = ($697|0)>($702|0);
														$$ = $703 ? 74 : 0;
														$$8 = $$;
														STACKTOP = sp;return ($$8|0);
													}
												}
											}
										}
									}
									$704 = HEAP32[$$pre153>>2]|0;
									$705 = ((($704)) + 4|0);
									$706 = HEAP32[$705>>2]|0;
									$707 = ($706|0)>($152|0);
									if (!($707)) {
										$708 = ((($704)) + 8|0);
										$709 = HEAP32[$708>>2]|0;
										$710 = HEAP32[$704>>2]|0;
										$711 = (($709) + 2)|0;
										$712 = (($711) - ($710))|0;
										$713 = HEAP32[$this>>2]|0;
										$714 = ((($713)) + 8|0);
										$715 = HEAP32[$714>>2]|0;
										$716 = HEAP32[$713>>2]|0;
										$717 = (($715) + 1)|0;
										$718 = (($717) - ($716))|0;
										$719 = ($712|0)<($718|0);
										if (!($719)) {
											$720 = ((($713)) + 12|0);
											$721 = HEAP32[$720>>2]|0;
											$722 = ((($713)) + 4|0);
											$723 = HEAP32[$722>>2]|0;
											$724 = (($721) + 1)|0;
											$725 = (($724) - ($723))|0;
											$726 = ($718|0)>($725|0);
											if ($726) {
												$727 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
												if ($727) {
													$$8 = 172;
													STACKTOP = sp;return ($$8|0);
												} else {
													$728 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
													$$18 = $728 ? 172 : 0;
													STACKTOP = sp;return ($$18|0);
												}
											}
										}
									}
								}
							}
						}
					}
				}
				$729 = (__ZNK8Features5vbarsEv($this)|0);
				$730 = ($729|0)==(1);
				do {
					if ($730) {
						$731 = ((($this)) + 20|0);
						$732 = HEAP32[$731>>2]|0;
						$733 = ((($732)) + 8|0);
						$734 = HEAP32[$733>>2]|0;
						$735 = HEAP32[$732>>2]|0;
						$736 = (($734) + 1)|0;
						$737 = (($736) - ($735))|0;
						$738 = ($737|0)>(1);
						if ($738) {
							$739 = (__ZN7Profile6minimaEi($0,-1)|0);
							$740 = ($739|0)==(1);
							if ($740) {
								$741 = (__ZN7Profile6minimaEi($11,-1)|0);
								$742 = ($741|0)==(1);
								if ($742) {
									$743 = HEAP32[$this>>2]|0;
									$744 = ((($743)) + 12|0);
									$745 = HEAP32[$744>>2]|0;
									$746 = ((($743)) + 4|0);
									$747 = HEAP32[$746>>2]|0;
									$748 = (($745) + 1)|0;
									$749 = (($748) - ($747))|0;
									$750 = ($749*3)|0;
									$751 = ((($743)) + 8|0);
									$752 = HEAP32[$751>>2]|0;
									$753 = HEAP32[$743>>2]|0;
									$754 = (($752) + 1)|0;
									$755 = (($754) - ($753))|0;
									$756 = $755 << 2;
									$757 = ($750|0)>($756|0);
									L158: do {
										if ($757) {
											$758 = HEAP32[$731>>2]|0;
											$759 = HEAP32[$758>>2]|0;
											$760 = (($759) - ($753))|0;
											$761 = ((($758)) + 8|0);
											$762 = HEAP32[$761>>2]|0;
											$763 = (($752) - ($762))|0;
											$764 = $37 << 1;
											$765 = (__ZN5Ocrad7similarEiiii($760,$763,30,$764)|0);
											if ($765) {
												$766 = HEAP32[$this>>2]|0;
												$767 = ((($766)) + 12|0);
												$768 = HEAP32[$767>>2]|0;
												$769 = ((($766)) + 4|0);
												$770 = HEAP32[$769>>2]|0;
												$771 = (($768) + 1)|0;
												$772 = (($771) - ($770))|0;
												$773 = ((($this)) + 296|0);
												$774 = (__ZN7Profile3maxEv($773)|0);
												$775 = ($774*3)|0;
												$776 = ($772|0)>($775|0);
												$$pre155 = ((($this)) + 152|0);
												if (!($776)) {
													$777 = (__ZN7Profile5istipEv($$pre155)|0);
													if ($777) {
														$778 = (__ZN7Profile5istipEv($38)|0);
														if ($778) {
															$779 = HEAP32[$this>>2]|0;
															$780 = ((($779)) + 12|0);
															$781 = HEAP32[$780>>2]|0;
															$782 = ((($779)) + 4|0);
															$783 = HEAP32[$782>>2]|0;
															$784 = (($781) + 1)|0;
															$785 = (($784) - ($783))|0;
															$786 = ((($779)) + 8|0);
															$787 = HEAP32[$786>>2]|0;
															$788 = HEAP32[$779>>2]|0;
															$789 = (($787) + 1)|0;
															$790 = (($789) - ($788))|0;
															$791 = ($790*3)|0;
															$792 = ($785|0)>($791|0);
															do {
																if (!($792)) {
																	$793 = HEAP32[$39>>2]|0;
																	$794 = ($793|0)<(0);
																	if ($794) {
																		__ZN7Profile10initializeEv($38);
																	}
																	$795 = HEAP32[$43>>2]|0;
																	$796 = HEAP32[$42>>2]|0;
																	$797 = (($795) - ($796))|0;
																	$798 = $797 >> 2;
																	$799 = ($798*40)|0;
																	$800 = (($799) + -40)|0;
																	$801 = (($800|0) / 100)&-1;
																	$802 = (__ZN7ProfileixEi($38,$801)|0);
																	$803 = HEAP32[$39>>2]|0;
																	$804 = ($803|0)<(0);
																	if ($804) {
																		__ZN7Profile10initializeEv($38);
																	}
																	$805 = HEAP32[$43>>2]|0;
																	$806 = HEAP32[$42>>2]|0;
																	$807 = (($805) - ($806))|0;
																	$808 = $807 >> 2;
																	$809 = ($808*60)|0;
																	$810 = (($809) + -60)|0;
																	$811 = (($810|0) / 100)&-1;
																	$812 = (__ZN7ProfileixEi($38,$811)|0);
																	$813 = (($812) + ($37))|0;
																	$814 = ($802|0)>($813|0);
																	if (!($814)) {
																		break;
																	}
																	$815 = ((($this)) + 160|0);
																	$816 = HEAP32[$815>>2]|0;
																	$817 = ($816|0)<(0);
																	if ($817) {
																		__ZN7Profile10initializeEv($$pre155);
																	}
																	$818 = ((($this)) + 188|0);
																	$819 = ((($this)) + 192|0);
																	$820 = HEAP32[$819>>2]|0;
																	$821 = HEAP32[$818>>2]|0;
																	$822 = (($820) - ($821))|0;
																	$823 = $822 >> 2;
																	$824 = ($823*60)|0;
																	$825 = (($824) + -60)|0;
																	$826 = (($825|0) / 100)&-1;
																	$827 = (__ZN7ProfileixEi($$pre155,$826)|0);
																	$828 = HEAP32[$815>>2]|0;
																	$829 = ($828|0)<(0);
																	if ($829) {
																		__ZN7Profile10initializeEv($$pre155);
																	}
																	$830 = HEAP32[$819>>2]|0;
																	$831 = HEAP32[$818>>2]|0;
																	$832 = (($830) - ($831))|0;
																	$833 = $832 >> 2;
																	$834 = ($833*40)|0;
																	$835 = (($834) + -40)|0;
																	$836 = (($835|0) / 100)&-1;
																	$837 = (__ZN7ProfileixEi($$pre155,$836)|0);
																	$838 = (($837) + ($37))|0;
																	$839 = ($827|0)>($838|0);
																	if ($839) {
																		$$8 = 122;
																	} else {
																		break;
																	}
																	STACKTOP = sp;return ($$8|0);
																}
															} while(0);
															$$8 = 73;
															STACKTOP = sp;return ($$8|0);
														}
													}
												}
												$840 = (__ZN7Profile7isflatsEv($$pre155)|0);
												do {
													if ($840) {
														$841 = (__ZN7Profile5istipEv($38)|0);
														if ($841) {
															$$8 = 108;
															STACKTOP = sp;return ($$8|0);
														}
														$842 = (__ZN7Profile7isflatsEv($38)|0);
														if ($842) {
															$$8 = 108;
															STACKTOP = sp;return ($$8|0);
														}
														$843 = (__ZN7Profile6isctipEi($38,50)|0);
														if ($843) {
															$844 = (__ZN7Profile6minimaEi($38,-1)|0);
															$845 = ($844|0)==(2);
															if (!($845)) {
																break;
															}
															$846 = (__ZN7Profile8iminimumEii($38,0,-1)|0);
															$847 = HEAP32[$39>>2]|0;
															$848 = ($847|0)<(0);
															if ($848) {
																__ZN7Profile10initializeEv($38);
															}
															$849 = HEAP32[$43>>2]|0;
															$850 = HEAP32[$42>>2]|0;
															$851 = (($849) - ($850))|0;
															$852 = $851 >> 2;
															$853 = ($852*30)|0;
															$854 = (($853) + -30)|0;
															$855 = (($854|0) / 100)&-1;
															$856 = ($846|0)<($855|0);
															if (!($856)) {
																break;
															}
															$857 = (__ZN7Profile8iminimumEii($38,1,-1)|0);
															$858 = HEAP32[$39>>2]|0;
															$859 = ($858|0)<(0);
															if ($859) {
																__ZN7Profile10initializeEv($38);
															}
															$860 = HEAP32[$43>>2]|0;
															$861 = HEAP32[$42>>2]|0;
															$862 = (($860) - ($861))|0;
															$863 = $862 >> 2;
															$864 = ($863*80)|0;
															$865 = (($864) + -80)|0;
															$866 = (($865|0) / 100)&-1;
															$867 = ($857|0)>($866|0);
															if ($867) {
																$$8 = 108;
															} else {
																break;
															}
															STACKTOP = sp;return ($$8|0);
														}
													}
												} while(0);
												$868 = HEAP32[$this>>2]|0;
												$869 = ((($868)) + 12|0);
												$870 = HEAP32[$869>>2]|0;
												$871 = ((($868)) + 4|0);
												$872 = HEAP32[$871>>2]|0;
												$873 = (($870) + 1)|0;
												$874 = (($873) - ($872))|0;
												$875 = (__ZN7Profile3maxEv($773)|0);
												$876 = ($875*3)|0;
												$877 = ($874|0)>($876|0);
												do {
													if ($877) {
														$878 = (__ZN7Profile5istipEv($$pre155)|0);
														do {
															if ($878) {
																$879 = (__ZN7Profile5ispitEv($38)|0);
																if (!($879)) {
																	break;
																}
																$880 = (__ZN7Profile8iminimumEii($38,0,-1)|0);
																$881 = HEAP32[$39>>2]|0;
																$882 = ($881|0)<(0);
																if ($882) {
																	__ZN7Profile10initializeEv($38);
																}
																$883 = HEAP32[$43>>2]|0;
																$884 = HEAP32[$42>>2]|0;
																$885 = (($883) - ($884))|0;
																$886 = $885 >> 2;
																$887 = ($886*50)|0;
																$888 = (($887) + -50)|0;
																$889 = (($888|0) / 100)&-1;
																$890 = (__ZN5Ocrad7similarEiiii($880,$889,10,1)|0);
																if (!($890)) {
																	break;
																}
																$891 = (__ZN7Profile6istpitEv($38)|0);
																$$16 = $891 ? 123 : 40;
																$$8 = $$16;
																STACKTOP = sp;return ($$8|0);
															}
														} while(0);
														$892 = (__ZN7Profile5istipEv($38)|0);
														do {
															if ($892) {
																$893 = (__ZN7Profile5ispitEv($$pre155)|0);
																if (!($893)) {
																	break;
																}
																$894 = (__ZN7Profile8iminimumEii($$pre155,0,-1)|0);
																$895 = ((($this)) + 160|0);
																$896 = HEAP32[$895>>2]|0;
																$897 = ($896|0)<(0);
																if ($897) {
																	__ZN7Profile10initializeEv($$pre155);
																}
																$898 = ((($this)) + 188|0);
																$899 = ((($this)) + 192|0);
																$900 = HEAP32[$899>>2]|0;
																$901 = HEAP32[$898>>2]|0;
																$902 = (($900) - ($901))|0;
																$903 = $902 >> 2;
																$904 = ($903*50)|0;
																$905 = (($904) + -50)|0;
																$906 = (($905|0) / 100)&-1;
																$907 = (__ZN5Ocrad7similarEiiii($894,$906,10,1)|0);
																if (!($907)) {
																	break;
																}
																$908 = (__ZN7Profile6istpitEv($$pre155)|0);
																$$17 = $908 ? 125 : 41;
																$$8 = $$17;
																STACKTOP = sp;return ($$8|0);
															}
														} while(0);
														$909 = (__ZN7Profile7isflatsEv($$pre155)|0);
														if (!($909)) {
															break;
														}
														$910 = HEAP32[$731>>2]|0;
														$911 = ((($910)) + 12|0);
														$912 = HEAP32[$911>>2]|0;
														$913 = ((($910)) + 4|0);
														$914 = HEAP32[$913>>2]|0;
														$915 = (($912) + 1)|0;
														$916 = (($915) - ($914))|0;
														$917 = ((($910)) + 8|0);
														$918 = HEAP32[$917>>2]|0;
														$919 = HEAP32[$910>>2]|0;
														$920 = (($918) + 1)|0;
														$921 = (($920) - ($919))|0;
														$922 = $916 << 1;
														$923 = Math_imul($922, $921)|0;
														$924 = HEAP32[$this>>2]|0;
														$925 = (__ZNK6Bitmap4areaEv($924)|0);
														$926 = ($923|0)<($925|0);
														if ($926) {
															break;
														} else {
															$$8 = 108;
														}
														STACKTOP = sp;return ($$8|0);
													}
												} while(0);
												$927 = HEAP32[$this>>2]|0;
												$928 = ((($927)) + 12|0);
												$929 = HEAP32[$928>>2]|0;
												$930 = ((($927)) + 4|0);
												$931 = HEAP32[$930>>2]|0;
												$932 = (($929) + 1)|0;
												$933 = (($932) - ($931))|0;
												$934 = $933 << 1;
												$935 = ((($927)) + 8|0);
												$936 = HEAP32[$935>>2]|0;
												$937 = HEAP32[$927>>2]|0;
												$938 = (($936) + 1)|0;
												$939 = (($938) - ($937))|0;
												$940 = ($939*3)|0;
												$941 = ($934|0)>($940|0);
												if ($941) {
													$942 = (__ZN7Profile6minimaEi($38,-1)|0);
													$943 = ($942|0)<(3);
													if ($943) {
														$944 = (__ZN7Profile7isflatsEv($$pre155)|0);
														if (!($944)) {
															$945 = (__ZN7Profile6minimaEi($$pre155,-1)|0);
															$946 = ($945|0)==(1);
															if (!($946)) {
																break;
															}
														}
														$947 = HEAP32[$731>>2]|0;
														$948 = ((($947)) + 8|0);
														$949 = HEAP32[$948>>2]|0;
														$950 = HEAP32[$this>>2]|0;
														$951 = HEAP32[$950>>2]|0;
														$952 = ((($950)) + 8|0);
														$953 = HEAP32[$952>>2]|0;
														$954 = (($953) - ($951))|0;
														$955 = ($954*70)|0;
														$956 = (($955|0) / 100)&-1;
														$957 = (($956) + ($951))|0;
														$958 = ($949|0)<($957|0);
														if ($958) {
															$959 = ((($950)) + 4|0);
															$960 = HEAP32[$959>>2]|0;
															$961 = ((($950)) + 12|0);
															$962 = HEAP32[$961>>2]|0;
															$963 = (($962) - ($960))|0;
															$964 = ($963*75)|0;
															$965 = (($964|0) / 100)&-1;
															$966 = (($965) + ($960))|0;
															$967 = (($949) + 1)|0;
															$968 = ($967|0)<($953|0);
															$969 = $968 ? $967 : $953;
															$970 = (__ZNK6Bitmap10escape_topEii($950,$966,$969)|0);
															if (!($970)) {
																break;
															}
															$$pre127 = HEAP32[$731>>2]|0;
															$$pre128 = HEAP32[$this>>2]|0;
															$$pre130 = HEAP32[$$pre128>>2]|0;
															$$in = $$pre128;$972 = $$pre127;$974 = $$pre130;
														} else {
															$$in = $950;$972 = $947;$974 = $951;
														}
														$971 = HEAP32[$972>>2]|0;
														$i$0119 = (($971) + -1)|0;
														$973 = ($i$0119|0)>($974|0);
														if ($973) {
															$$in157 = $$in;$i$0120 = $i$0119;
														} else {
															break;
														}
														while(1) {
															$975 = ((($$in157)) + 4|0);
															$976 = HEAP32[$975>>2]|0;
															$977 = ((($$in157)) + 12|0);
															$978 = HEAP32[$977>>2]|0;
															$979 = (($978) - ($976))|0;
															$980 = ($979*75)|0;
															$981 = (($980|0) / 100)&-1;
															$982 = (($981) + ($976))|0;
															$983 = (__ZNK6Bitmap11seek_bottomEiib($$in157,$982,$i$0120,1)|0);
															$984 = HEAP32[$this>>2]|0;
															$985 = ((($984)) + 12|0);
															$986 = HEAP32[$985>>2]|0;
															$987 = ($983|0)<($986|0);
															if ($987) {
																$988 = HEAP32[$984>>2]|0;
																$989 = (($i$0120) - ($988))|0;
																$990 = (__ZN7ProfileixEi($11,$989)|0);
																$991 = ($990|0)>($37|0);
																if (!($991)) {
																	$$8 = 108;
																	break;
																}
																$$pre131 = HEAP32[$this>>2]|0;
																$993 = $$pre131;
															} else {
																$993 = $984;
															}
															$i$0 = (($i$0120) + -1)|0;
															$992 = HEAP32[$993>>2]|0;
															$994 = ($i$0|0)>($992|0);
															if ($994) {
																$$in157 = $993;$i$0120 = $i$0;
															} else {
																break L158;
															}
														}
														STACKTOP = sp;return ($$8|0);
													}
												}
											}
										}
									} while(0);
									$995 = HEAP32[$731>>2]|0;
									$996 = ((($995)) + 8|0);
									$997 = HEAP32[$996>>2]|0;
									$998 = HEAP32[$this>>2]|0;
									$999 = ((($998)) + 8|0);
									$1000 = HEAP32[$999>>2]|0;
									$1001 = (($1000) + -1)|0;
									$1002 = ($997|0)<($1001|0);
									if (!($1002)) {
										$1003 = (__ZN7Profile5istipEv($38)|0);
										$1004 = HEAP32[$this>>2]|0;
										$1005 = ((($1004)) + 12|0);
										$1006 = HEAP32[$1005>>2]|0;
										$1007 = ((($1004)) + 4|0);
										$1008 = HEAP32[$1007>>2]|0;
										if ($1003) {
											$1009 = (($1006) + 1)|0;
											$1010 = (($1009) - ($1008))|0;
											$1011 = ((($1004)) + 8|0);
											$1012 = HEAP32[$1011>>2]|0;
											$1013 = HEAP32[$1004>>2]|0;
											$1014 = (($1012) + 1)|0;
											$1015 = (($1014) - ($1013))|0;
											$1016 = $1015 << 1;
											$1017 = ($1010|0)>($1016|0);
											if ($1017) {
												$1018 = HEAP32[$731>>2]|0;
												$1019 = ((($1018)) + 8|0);
												$1020 = HEAP32[$1019>>2]|0;
												$1021 = HEAP32[$1018>>2]|0;
												$1022 = (($1020) + 1)|0;
												$1023 = (($1022) - ($1021))|0;
												$1024 = $1023 << 1;
												$1025 = ((($this)) + 296|0);
												$1026 = (__ZN7Profile3maxEv($1025)|0);
												$1027 = ($1024|0)>($1026|0);
												if ($1027) {
													$$pre133 = HEAP32[$this>>2]|0;
													$$phi$trans$insert134 = ((($$pre133)) + 8|0);
													$$pre135 = HEAP32[$$phi$trans$insert134>>2]|0;
													$$pre137 = HEAP32[$$pre133>>2]|0;
													$1047 = $$pre133;$1054 = $$pre135;$1056 = $$pre137;
												} else {
													$1028 = HEAP32[$39>>2]|0;
													$1029 = ($1028|0)<(0);
													if ($1029) {
														__ZN7Profile10initializeEv($38);
													}
													$1030 = HEAP32[$43>>2]|0;
													$1031 = HEAP32[$42>>2]|0;
													$1032 = (($1030) - ($1031))|0;
													$1033 = $1032 >> 2;
													$1034 = ($1033*50)|0;
													$1035 = (($1034) + -50)|0;
													$1036 = (($1035|0) / 100)&-1;
													$1037 = (__ZN7ProfileixEi($38,$1036)|0);
													$1038 = HEAP32[$this>>2]|0;
													$1039 = ((($1038)) + 8|0);
													$1040 = HEAP32[$1039>>2]|0;
													$1041 = HEAP32[$1038>>2]|0;
													$1042 = (($1040) + 1)|0;
													$1043 = (($1042) - ($1041))|0;
													$1044 = (($1043|0) / 2)&-1;
													$1045 = ($1037|0)<($1044|0);
													if ($1045) {
														$1047 = $1038;$1054 = $1040;$1056 = $1041;
													} else {
														$$8 = 93;
														STACKTOP = sp;return ($$8|0);
													}
												}
												$1046 = ((($1047)) + 12|0);
												$1048 = HEAP32[$1046>>2]|0;
												$1049 = ((($1047)) + 4|0);
												$1050 = HEAP32[$1049>>2]|0;
												$1051 = (($1048) + 1)|0;
												$1052 = (($1051) - ($1050))|0;
												$1053 = (($1054) + 1)|0;
												$1055 = (($1053) - ($1056))|0;
												$1057 = ($1055*3)|0;
												$1058 = ($1052|0)<($1057|0);
												if ($1058) {
													$1060 = $1048;$1062 = $1050;$1065 = $1054;$1067 = $1056;
												} else {
													$$8 = 108;
													STACKTOP = sp;return ($$8|0);
												}
											} else {
												$1060 = $1006;$1062 = $1008;$1065 = $1012;$1067 = $1013;
											}
										} else {
											$$phi$trans$insert144 = ((($1004)) + 8|0);
											$$pre145 = HEAP32[$$phi$trans$insert144>>2]|0;
											$$pre147 = HEAP32[$1004>>2]|0;
											$1060 = $1006;$1062 = $1008;$1065 = $$pre145;$1067 = $$pre147;
										}
										$1059 = (($1060) + 1)|0;
										$1061 = (($1059) - ($1062))|0;
										$1063 = $1061 << 1;
										$1064 = (($1065) + 1)|0;
										$1066 = (($1064) - ($1067))|0;
										$1068 = ($1066*3)|0;
										$1069 = ($1063|0)<($1068|0);
										if (!($1069)) {
											$1070 = HEAP32[$731>>2]|0;
											$1071 = ((($1070)) + 12|0);
											$1072 = HEAP32[$1071>>2]|0;
											$1073 = ((($1070)) + 4|0);
											$1074 = HEAP32[$1073>>2]|0;
											$1075 = (($1072) + 1)|0;
											$1076 = (($1075) - ($1074))|0;
											$1077 = ((($1070)) + 8|0);
											$1078 = HEAP32[$1077>>2]|0;
											$1079 = HEAP32[$1070>>2]|0;
											$1080 = (($1078) + 1)|0;
											$1081 = (($1080) - ($1079))|0;
											$1082 = ($1081*3)|0;
											$1083 = ($1076|0)<($1082|0);
											if (!($1083)) {
												$1084 = (__ZN7Profile6istpitEv($38)|0);
												if ($1084) {
													$1085 = (__ZN7Profile6minimaEi($38,-1)|0);
													$1086 = ($1085|0)==(1);
													if ($1086) {
														$1087 = (__ZN7Profile8iminimumEii($38,0,-1)|0);
														$1088 = HEAP32[$39>>2]|0;
														$1089 = ($1088|0)<(0);
														if ($1089) {
															__ZN7Profile10initializeEv($38);
														}
														$1090 = HEAP32[$43>>2]|0;
														$1091 = HEAP32[$42>>2]|0;
														$1092 = (($1090) - ($1091))|0;
														$1093 = $1092 >> 2;
														$1094 = ($1093*10)|0;
														$1095 = (($1094) + -10)|0;
														$1096 = (($1095|0) / 100)&-1;
														$1097 = ($1087|0)>($1096|0);
														if ($1097) {
															$1098 = HEAP32[$39>>2]|0;
															$1099 = ($1098|0)<(0);
															if ($1099) {
																__ZN7Profile10initializeEv($38);
																$$pre148 = HEAP32[$43>>2]|0;
																$$pre149 = HEAP32[$42>>2]|0;
																$1101 = $$pre149;$1102 = $$pre148;
															} else {
																$1101 = $1091;$1102 = $1090;
															}
															$1100 = (($1102) - ($1101))|0;
															$1103 = $1100 >> 2;
															$1104 = ($1103*40)|0;
															$1105 = (($1104) + -40)|0;
															$1106 = (($1105|0) / 100)&-1;
															$1107 = ($1087|0)<($1106|0);
															if ($1107) {
																$$8 = 49;
															} else {
																break;
															}
															STACKTOP = sp;return ($$8|0);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				} while(0);
				$1108 = (__ZNK8Features5hbarsEv($this)|0);
				$1109 = ($1108|0)==(1);
				if ($1109) {
					$1110 = ((($this)) + 8|0);
					$1111 = HEAP32[$1110>>2]|0;
					$1112 = ((($1111)) + 8|0);
					$1113 = HEAP32[$1112>>2]|0;
					$1114 = HEAP32[$1111>>2]|0;
					$1115 = (($1113) + 1)|0;
					$1116 = (($1115) - ($1114))|0;
					$1117 = HEAP32[$this>>2]|0;
					$1118 = ((($1117)) + 8|0);
					$1119 = HEAP32[$1118>>2]|0;
					$1120 = HEAP32[$1117>>2]|0;
					$1121 = (($1119) + 1)|0;
					$1122 = (($1121) - ($1120))|0;
					$1123 = ($1116|0)<($1122|0);
					if (!($1123)) {
						$1124 = ((($1111)) + 4|0);
						$1125 = HEAP32[$1124>>2]|0;
						$1126 = ((($1111)) + 12|0);
						$1127 = HEAP32[$1126>>2]|0;
						$1128 = (($1127) + ($1125))|0;
						$1129 = (($1128|0) / 2)&-1;
						$1130 = ((($1117)) + 4|0);
						$1131 = HEAP32[$1130>>2]|0;
						$1132 = ((($1117)) + 12|0);
						$1133 = HEAP32[$1132>>2]|0;
						$1134 = (($1133) + ($1131))|0;
						$1135 = (($1134|0) / 2)&-1;
						$1136 = (($1129) - ($1135))|0;
						$ispos = ($1136|0)>(-1);
						$neg = (0 - ($1136))|0;
						$1137 = $ispos ? $1136 : $neg;
						$1138 = ($1137|0)>($151|0);
						if (!($1138)) {
							$1139 = (1 - ($1131))|0;
							$1140 = (($1139) + ($1133))|0;
							$1141 = (__ZN5Ocrad7similarEiiii($1140,$1122,50,1)|0);
							if ($1141) {
								$1142 = (__ZN7Profile6isupitEv($0)|0);
								if ($1142) {
									$1143 = (__ZN7Profile6isupitEv($11)|0);
									if ($1143) {
										$$8 = 43;
										STACKTOP = sp;return ($$8|0);
									}
								}
							}
						}
					}
				}
				$$8 = 0;
				STACKTOP = sp;return ($$8|0);
			}
			function __ZNK8Features6test_cEv($this) {
				$this = $this|0;
				var $$ = 0, $$3 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi16Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
				var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
				var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
				var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
				var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
				var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
				var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
				var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 56|0);
				$1 = (__ZN7Profile8isconvexEv($0)|0);
				if ($1) {
					label = 4;
				} else {
					$2 = (__ZN7Profile5ispitEv($0)|0);
					if ($2) {
						label = 4;
					} else {
						$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
					}
				}
				do {
					if ((label|0) == 4) {
						$3 = HEAP32[$this>>2]|0;
						$4 = ((($3)) + 4|0);
						$5 = HEAP32[$4>>2]|0;
						$6 = ((($3)) + 12|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = (($7) + ($5))|0;
						$9 = (($8|0) / 2)&-1;
						$10 = HEAP32[$3>>2]|0;
						$11 = ((($3)) + 8|0);
						$12 = HEAP32[$11>>2]|0;
						$13 = (($12) + ($10))|0;
						$14 = (($13|0) / 2)&-1;
						$15 = (__ZNK6Bitmap8seek_topEiib($3,$9,$14,1)|0);
						$16 = HEAP32[$this>>2]|0;
						$17 = ((($16)) + 4|0);
						$18 = HEAP32[$17>>2]|0;
						$19 = ((($16)) + 12|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = (($20) + ($18))|0;
						$22 = (($21|0) / 2)&-1;
						$23 = HEAP32[$16>>2]|0;
						$24 = ((($16)) + 8|0);
						$25 = HEAP32[$24>>2]|0;
						$26 = (($25) + ($23))|0;
						$27 = (($26|0) / 2)&-1;
						$28 = (__ZNK6Bitmap11seek_bottomEiib($16,$22,$27,1)|0);
						$29 = HEAP32[$this>>2]|0;
						$30 = ((($29)) + 12|0);
						$31 = HEAP32[$30>>2]|0;
						$32 = ((($29)) + 4|0);
						$33 = HEAP32[$32>>2]|0;
						$34 = (($31) + 1)|0;
						$35 = (($34) - ($33))|0;
						$36 = ((($29)) + 8|0);
						$37 = HEAP32[$36>>2]|0;
						$38 = HEAP32[$29>>2]|0;
						$39 = (($37) + 1)|0;
						$40 = (($39) - ($38))|0;
						$41 = $40 << 1;
						$42 = ($35|0)>($41|0);
						do {
							if ($42) {
								$43 = ((($this)) + 296|0);
								$44 = (__ZN7Profile3maxEv($43)|0);
								$45 = ($44*3)|0;
								$46 = HEAP32[$this>>2]|0;
								$47 = ((($46)) + 8|0);
								$48 = HEAP32[$47>>2]|0;
								$49 = HEAP32[$46>>2]|0;
								$50 = (($48) + 1)|0;
								$51 = (($50) - ($49))|0;
								$52 = $51 << 1;
								$53 = ($45|0)>($52|0);
								if ($53) {
									$$phi$trans$insert = ((($46)) + 4|0);
									$$pre = HEAP32[$$phi$trans$insert>>2]|0;
									$56 = $$pre;$58 = $46;
									break;
								}
								$54 = (__ZN7Profile8isconvexEv($0)|0);
								$$ = $54 ? 40 : 0;
								$$3 = $$;
								return ($$3|0);
							} else {
								$56 = $33;$58 = $29;
							}
						} while(0);
						$55 = ($15|0)>($56|0);
						if ($55) {
							$57 = ((($58)) + 12|0);
							$59 = HEAP32[$57>>2]|0;
							$60 = ($28|0)<($59|0);
							if ($60) {
								$61 = ((($this)) + 152|0);
								$62 = (__ZN7Profile6isctipEi($61,50)|0);
								if ($62) {
									$63 = ((($this)) + 200|0);
									$64 = (__ZN7Profile5ispitEv($63)|0);
									if (!($64)) {
										$65 = ((($this)) + 104|0);
										$66 = (__ZN7Profile5ispitEv($65)|0);
										if (!($66)) {
											$67 = (__ZN7Profile6isltipEv($63)|0);
											if (!($67)) {
												$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
												break;
											}
											$68 = (__ZN7Profile6isltipEv($65)|0);
											if (!($68)) {
												$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
												break;
											}
										}
									}
									$69 = HEAP32[$this>>2]|0;
									$70 = ((($69)) + 4|0);
									$71 = HEAP32[$70>>2]|0;
									$72 = ((($69)) + 12|0);
									$73 = HEAP32[$72>>2]|0;
									$74 = (($73) + ($71))|0;
									$75 = (($74|0) / 2)&-1;
									$76 = HEAP32[$69>>2]|0;
									$77 = ((($69)) + 8|0);
									$78 = HEAP32[$77>>2]|0;
									$79 = (($78) + ($76))|0;
									$80 = (($79|0) / 2)&-1;
									$81 = (__ZNK6Bitmap12escape_rightEii($69,$75,$80)|0);
									if ($81) {
										$$3 = 99;
										return ($$3|0);
									} else {
										$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
									}
								} else {
									$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
								}
							} else {
								$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
							}
						} else {
							$$pre$phi16Z2D = $this;$$pre$phiZ2D = $this;
						}
					}
				} while(0);
				$82 = HEAP32[$$pre$phi16Z2D>>2]|0;
				$83 = ((($82)) + 12|0);
				$84 = HEAP32[$83>>2]|0;
				$85 = ((($82)) + 4|0);
				$86 = HEAP32[$85>>2]|0;
				$87 = (($84) + 1)|0;
				$88 = (($87) - ($86))|0;
				$89 = ((($82)) + 8|0);
				$90 = HEAP32[$89>>2]|0;
				$91 = HEAP32[$82>>2]|0;
				$92 = (($90) + 1)|0;
				$93 = (($92) - ($91))|0;
				$94 = $93 << 1;
				$95 = ($88|0)>($94|0);
				if (!($95)) {
					$$3 = 0;
					return ($$3|0);
				}
				$96 = ((($this)) + 152|0);
				$97 = (__ZN7Profile8isconvexEv($96)|0);
				if (!($97)) {
					$$3 = 0;
					return ($$3|0);
				}
				$98 = HEAP32[$$pre$phiZ2D>>2]|0;
				$99 = ((($98)) + 4|0);
				$100 = HEAP32[$99>>2]|0;
				$101 = ((($98)) + 12|0);
				$102 = HEAP32[$101>>2]|0;
				$103 = (($102) + ($100))|0;
				$104 = (($103|0) / 2)&-1;
				$105 = HEAP32[$98>>2]|0;
				$106 = ((($98)) + 8|0);
				$107 = HEAP32[$106>>2]|0;
				$108 = (($107) + ($105))|0;
				$109 = (($108|0) / 2)&-1;
				$110 = (__ZNK6Bitmap8seek_topEiib($98,$104,$109,1)|0);
				$111 = HEAP32[$$pre$phiZ2D>>2]|0;
				$112 = ((($111)) + 4|0);
				$113 = HEAP32[$112>>2]|0;
				$114 = ((($111)) + 12|0);
				$115 = HEAP32[$114>>2]|0;
				$116 = (($115) + ($113))|0;
				$117 = (($116|0) / 2)&-1;
				$118 = HEAP32[$111>>2]|0;
				$119 = ((($111)) + 8|0);
				$120 = HEAP32[$119>>2]|0;
				$121 = (($120) + ($118))|0;
				$122 = (($121|0) / 2)&-1;
				$123 = (__ZNK6Bitmap11seek_bottomEiib($111,$117,$122,1)|0);
				$124 = ((($this)) + 296|0);
				$125 = (__ZN7Profile3maxEv($124)|0);
				$126 = ($125*3)|0;
				$127 = HEAP32[$$pre$phi16Z2D>>2]|0;
				$128 = ((($127)) + 8|0);
				$129 = HEAP32[$128>>2]|0;
				$130 = HEAP32[$127>>2]|0;
				$131 = (($129) + 1)|0;
				$132 = (($131) - ($130))|0;
				$133 = $132 << 1;
				$134 = ($126|0)>($133|0);
				if ($134) {
					$135 = ((($127)) + 4|0);
					$136 = HEAP32[$135>>2]|0;
					$137 = (($110) - ($136))|0;
					$138 = (__ZN7ProfileixEi($0,$137)|0);
					$139 = $138 << 1;
					$140 = HEAP32[$$pre$phi16Z2D>>2]|0;
					$141 = ((($140)) + 8|0);
					$142 = HEAP32[$141>>2]|0;
					$143 = HEAP32[$140>>2]|0;
					$144 = (($142) + 1)|0;
					$145 = (($144) - ($143))|0;
					$146 = ($139|0)<($145|0);
					if ($146) {
						$$3 = 0;
						return ($$3|0);
					}
					$147 = ((($140)) + 4|0);
					$148 = HEAP32[$147>>2]|0;
					$149 = (($123) - ($148))|0;
					$150 = (__ZN7ProfileixEi($0,$149)|0);
					$151 = $150 << 1;
					$152 = HEAP32[$$pre$phi16Z2D>>2]|0;
					$153 = ((($152)) + 8|0);
					$154 = HEAP32[$153>>2]|0;
					$155 = HEAP32[$152>>2]|0;
					$156 = (($154) + 1)|0;
					$157 = (($156) - ($155))|0;
					$158 = ($151|0)<($157|0);
					if ($158) {
						$$3 = 0;
						return ($$3|0);
					}
				}
				$$3 = 41;
				return ($$3|0);
			}
			function __ZNK8Features9test_frstERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$ = 0, $$0$ph = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8$ph = 0, $$in = 0, $$in88 = 0, $$mux = 0, $$phi$trans$insert = 0, $$phi$trans$insert81 = 0, $$phi$trans$insert84 = 0, $$pre = 0, $$pre$i = 0, $$pre$i19 = 0, $$pre79 = 0, $$pre80 = 0, $$pre82 = 0, $$pre83 = 0;
				var $$pre85 = 0, $$pre86 = 0, $$pre87 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
				var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
				var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
				var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
				var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
				var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
				var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
				var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
				var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
				var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
				var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
				var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
				var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
				var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
				var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
				var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
				var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
				var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
				var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
				var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
				var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
				var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
				var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
				var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
				var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
				var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
				var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
				var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
				var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
				var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
				var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
				var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
				var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
				var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
				var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
				var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
				var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
				var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
				var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b_hdiff = 0, $brmerge = 0, $maybe_t$0$off0 = 0, $maybe_t$2$off0 = 0, $t_hdiff = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$b_hdiff = sp + 4|0;
				$t_hdiff = sp;
				$0 = ((($this)) + 200|0);
				$1 = HEAP32[$this>>2]|0;
				$2 = ((($1)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($1)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = (($7|0) / 4)&-1;
				$9 = (__ZN7Profile6minimaEi($0,$8)|0);
				$10 = ($9|0)==(1);
				if (!($10)) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$11 = ((($this)) + 104|0);
				$12 = HEAP32[$this>>2]|0;
				$13 = ((($12)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($12)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = (($14) + 1)|0;
				$18 = (($17) - ($16))|0;
				$19 = (($18|0) / 2)&-1;
				$20 = (__ZN7Profile6minimaEi($11,$19)|0);
				$21 = ($20|0)==(1);
				if (!($21)) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$22 = HEAP32[$this>>2]|0;
				$23 = ((($22)) + 12|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = ((($22)) + 4|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = (($24) + 1)|0;
				$28 = (($27) - ($26))|0;
				$29 = (($28|0) / 2)&-1;
				$30 = (__ZN7Profile6minimaEi($0,$29)|0);
				$31 = ($30|0)==(1);
				if (!($31)) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$32 = HEAP32[$this>>2]|0;
				$33 = ((($32)) + 12|0);
				$34 = HEAP32[$33>>2]|0;
				$35 = ((($32)) + 4|0);
				$36 = HEAP32[$35>>2]|0;
				$37 = (($34) + 1)|0;
				$38 = (($37) - ($36))|0;
				$39 = ((($32)) + 8|0);
				$40 = HEAP32[$39>>2]|0;
				$41 = HEAP32[$32>>2]|0;
				$42 = (($40) + 1)|0;
				$43 = (($42) - ($41))|0;
				$44 = ($43|0)<($38|0);
				$45 = $44 ? $43 : $38;
				$46 = (($45|0) / 30)&-1;
				$47 = (($46) + 1)|0;
				$48 = (($38|0) / 4)&-1;
				$49 = (__ZN7Profile6minimaEi($11,$48)|0);
				$50 = ($49|0)!=(1);
				L10: do {
					if ($50) {
						$maybe_t$2$off0 = 1;
					} else {
						HEAP32[$b_hdiff>>2] = 0;
						HEAP32[$t_hdiff>>2] = 0;
						$51 = HEAP32[$this>>2]|0;
						$52 = (__ZNK6Bitmap11bottom_hookEPi($51,$b_hdiff)|0);
						do {
							if ($52) {
								$53 = HEAP32[$b_hdiff>>2]|0;
								$54 = Math_imul($53, -2)|0;
								$55 = HEAP32[$this>>2]|0;
								$56 = ((($55)) + 12|0);
								$57 = HEAP32[$56>>2]|0;
								$58 = ((($55)) + 4|0);
								$59 = HEAP32[$58>>2]|0;
								$60 = (($57) + 1)|0;
								$61 = (($60) - ($59))|0;
								$62 = ($54|0)>($61|0);
								if ($62) {
									$63 = ((($this)) + 296|0);
									$64 = (__ZN7Profile3maxEv($63)|0);
									$65 = ($64*3)|0;
									$66 = ($61|0)<($65|0);
									if (!($66)) {
										$67 = ((($this)) + 56|0);
										$68 = (__ZN7Profile5ispitEv($67)|0);
										if (!($68)) {
											$69 = (__ZNK8Features5hbarsEv($this)|0);
											$70 = ($69|0)==(0);
											if ($70) {
												$$0$ph = 108;
												break;
											}
											$71 = ((($this)) + 8|0);
											$72 = HEAP32[$71>>2]|0;
											$73 = ((($72)) + 12|0);
											$74 = HEAP32[$73>>2]|0;
											$75 = HEAP32[$this>>2]|0;
											$76 = ((($75)) + 4|0);
											$77 = HEAP32[$76>>2]|0;
											$78 = ((($75)) + 12|0);
											$79 = HEAP32[$78>>2]|0;
											$80 = (($79) - ($77))|0;
											$81 = (($80|0) / 5)&-1;
											$82 = (($81) + ($77))|0;
											$83 = ($74|0)<($82|0);
											if ($83) {
												$$0$ph = 108;
												break;
											}
										}
									}
									$84 = ((($this)) + 304|0);
									$85 = HEAP32[$84>>2]|0;
									$86 = ($85|0)<(0);
									if ($86) {
										__ZN7Profile10initializeEv($63);
									}
									$87 = ((($this)) + 332|0);
									$88 = ((($this)) + 336|0);
									$89 = HEAP32[$88>>2]|0;
									$90 = HEAP32[$87>>2]|0;
									$91 = (($89) - ($90))|0;
									$92 = $91 >> 2;
									$93 = ($92*6)|0;
									$94 = (($93) + -6)|0;
									$95 = (($94|0) / 100)&-1;
									$96 = (__ZN7ProfileixEi($63,$95)|0);
									$97 = $96 << 1;
									$98 = HEAP32[$this>>2]|0;
									$99 = ((($98)) + 8|0);
									$100 = HEAP32[$99>>2]|0;
									$101 = HEAP32[$98>>2]|0;
									$102 = (($100) + 1)|0;
									$103 = (($102) - ($101))|0;
									$104 = ($97|0)<($103|0);
									if ($104) {
										$105 = (__ZNK8Features5hbarsEv($this)|0);
										$106 = ($105|0)>(0);
										if ($106) {
											$107 = (__ZNK8Features5hbarsEv($this)|0);
											$108 = ($107|0)<(3);
											if ($108) {
												$109 = ((($this)) + 8|0);
												$110 = HEAP32[$109>>2]|0;
												$111 = ((($110)) + 4|0);
												$112 = HEAP32[$111>>2]|0;
												$113 = HEAP32[$this>>2]|0;
												$114 = ((($113)) + 4|0);
												$115 = HEAP32[$114>>2]|0;
												$116 = ((($113)) + 12|0);
												$117 = HEAP32[$116>>2]|0;
												$118 = (($117) - ($115))|0;
												$119 = ($118*15)|0;
												$120 = (($119|0) / 100)&-1;
												$121 = (($120) + ($115))|0;
												$122 = ($112|0)<($121|0);
												if ($122) {
													label = 19;
												} else {
													$123 = ((($110)) + 12|0);
													$124 = HEAP32[$123>>2]|0;
													$125 = (($117) + ($115))|0;
													$126 = (($125|0) / 2)&-1;
													$127 = ($124|0)<($126|0);
													if ($127) {
														$128 = ((($110)) + 8|0);
														$129 = HEAP32[$128>>2]|0;
														$130 = HEAP32[$110>>2]|0;
														$131 = (($129) + 1)|0;
														$132 = (($131) - ($130))|0;
														$133 = (__ZN7Profile3maxEv($63)|0);
														$134 = (__ZN5Ocrad7similarEiiii($132,$133,10,1)|0);
														if ($134) {
															$$0$ph = 116;
														} else {
															label = 19;
														}
													} else {
														label = 19;
													}
												}
											} else {
												label = 19;
											}
										} else {
											label = 19;
										}
									} else {
										label = 19;
									}
								} else {
									label = 19;
								}
							} else {
								label = 19;
							}
						} while(0);
						do {
							if ((label|0) == 19) {
								$135 = HEAP32[$this>>2]|0;
								$136 = (__ZNK6Bitmap8top_hookEPi($135,$t_hdiff)|0);
								if ($136) {
									$137 = HEAP32[$t_hdiff>>2]|0;
									$138 = ($137*3)|0;
									$139 = HEAP32[$this>>2]|0;
									$140 = ((($139)) + 12|0);
									$141 = HEAP32[$140>>2]|0;
									$142 = ((($139)) + 4|0);
									$143 = HEAP32[$142>>2]|0;
									$144 = (($141) + 1)|0;
									$145 = (($144) - ($143))|0;
									$146 = $145 << 1;
									$147 = ($138|0)>($146|0);
									if ($147) {
										$148 = ((($this)) + 296|0);
										$149 = (__ZN7Profile3maxEv($148)|0);
										$150 = $149 << 1;
										$151 = ($145|0)>($150|0);
										if ($151) {
											$152 = (__ZN7Profile8iminimumEii($11,0,-1)|0);
											$153 = ((($this)) + 112|0);
											$154 = HEAP32[$153>>2]|0;
											$155 = ($154|0)<(0);
											if ($155) {
												__ZN7Profile10initializeEv($11);
											}
											$156 = ((($this)) + 140|0);
											$157 = ((($this)) + 144|0);
											$158 = HEAP32[$157>>2]|0;
											$159 = HEAP32[$156>>2]|0;
											$160 = (($158) - ($159))|0;
											$161 = $160 >> 2;
											$162 = ($161*50)|0;
											$163 = (($162) + -50)|0;
											$164 = (($163|0) / 100)&-1;
											$165 = ($152|0)>($164|0);
											if ($165) {
												$166 = (__ZN7Profile8iminimumEii($0,0,-1)|0);
												$167 = ((($this)) + 208|0);
												$168 = HEAP32[$167>>2]|0;
												$169 = ($168|0)<(0);
												if ($169) {
													__ZN7Profile10initializeEv($0);
												}
												$170 = ((($this)) + 236|0);
												$171 = ((($this)) + 240|0);
												$172 = HEAP32[$171>>2]|0;
												$173 = HEAP32[$170>>2]|0;
												$174 = (($172) - ($173))|0;
												$175 = $174 >> 2;
												$176 = ($175*50)|0;
												$177 = (($176) + -50)|0;
												$178 = (($177|0) / 100)&-1;
												$179 = ($166|0)>($178|0);
												if (!($179)) {
													$180 = HEAP32[$b_hdiff>>2]|0;
													$181 = ($180|0)==(0);
													if ($181) {
														$$0$ph = 102;
														break;
													}
													$182 = ((($this)) + 152|0);
													$183 = ((($this)) + 160|0);
													$184 = HEAP32[$183>>2]|0;
													$185 = ($184|0)<(0);
													if ($185) {
														__ZN7Profile10initializeEv($182);
													}
													$186 = ((($this)) + 188|0);
													$187 = ((($this)) + 192|0);
													$188 = HEAP32[$187>>2]|0;
													$189 = HEAP32[$186>>2]|0;
													$190 = (($188) - ($189))|0;
													$191 = $190 >> 2;
													$192 = ($191*50)|0;
													$193 = (($192) + -50)|0;
													$194 = (($193|0) / 100)&-1;
													$195 = (__ZN7Profile10increasingEii($182,$194,2)|0);
													if ($195) {
														$$0$ph = 102;
														break;
													}
												}
											}
										}
									}
									$196 = HEAP32[$b_hdiff>>2]|0;
									$197 = $196 << 1;
									$198 = HEAP32[$this>>2]|0;
									$199 = ((($198)) + 12|0);
									$200 = HEAP32[$199>>2]|0;
									$201 = ((($198)) + 4|0);
									$202 = HEAP32[$201>>2]|0;
									$203 = (($200) + 1)|0;
									$204 = (($203) - ($202))|0;
									$205 = ($197|0)>($204|0);
									if ($205) {
										$206 = HEAP32[$t_hdiff>>2]|0;
										$207 = $206 << 1;
										$208 = ($207|0)>($204|0);
										if ($208) {
											$$0$ph = 0;
											break;
										} else {
											$maybe_t$0$off0 = 0;
										}
									} else {
										$maybe_t$0$off0 = 0;
									}
								} else {
									$maybe_t$0$off0 = 1;
								}
								$maybe_t$2$off0 = $maybe_t$0$off0;
								break L10;
							}
						} while(0);
						$$10 = $$0$ph;
						STACKTOP = sp;return ($$10|0);
					}
				} while(0);
				$209 = ((($this)) + 152|0);
				$210 = ((($this)) + 160|0);
				$211 = HEAP32[$210>>2]|0;
				$212 = ($211|0)<(0);
				if ($212) {
					__ZN7Profile10initializeEv($209);
				}
				$213 = ((($this)) + 188|0);
				$214 = ((($this)) + 192|0);
				$215 = HEAP32[$214>>2]|0;
				$216 = HEAP32[$213>>2]|0;
				$217 = (($215) - ($216))|0;
				$218 = $217 >> 2;
				$219 = ($218*50)|0;
				$220 = (($219) + -50)|0;
				$221 = (($220|0) / 100)&-1;
				$222 = (__ZN7ProfileixEi($209,$221)|0);
				$223 = $222 << 1;
				$224 = HEAP32[$this>>2]|0;
				$225 = ((($224)) + 8|0);
				$226 = HEAP32[$225>>2]|0;
				$227 = HEAP32[$224>>2]|0;
				$228 = (($226) + 1)|0;
				$229 = (($228) - ($227))|0;
				$230 = ($223|0)>($229|0);
				if ($230) {
					$231 = ((($this)) + 208|0);
					$232 = HEAP32[$231>>2]|0;
					$233 = ($232|0)<(0);
					if ($233) {
						__ZN7Profile10initializeEv($0);
					}
					$234 = ((($this)) + 236|0);
					$235 = ((($this)) + 240|0);
					$236 = HEAP32[$235>>2]|0;
					$237 = HEAP32[$234>>2]|0;
					$238 = (($236) - ($237))|0;
					$239 = $238 >> 2;
					$240 = ($239*50)|0;
					$241 = (($240) + -50)|0;
					$242 = (($241|0) / 100)&-1;
					$243 = (__ZN7ProfileixEi($0,$242)|0);
					$244 = $243 << 1;
					$245 = HEAP32[$this>>2]|0;
					$246 = ((($245)) + 12|0);
					$247 = HEAP32[$246>>2]|0;
					$248 = ((($245)) + 4|0);
					$249 = HEAP32[$248>>2]|0;
					$250 = (($247) + 1)|0;
					$251 = (($250) - ($249))|0;
					$252 = ($244|0)>($251|0);
					if ($252) {
						$253 = (__ZN7Profile6isctipEi($11,50)|0);
						$brmerge = $50 | $253;
						$$mux = $253 ? 114 : 0;
						if ($brmerge) {
							$$10 = $$mux;
							STACKTOP = sp;return ($$10|0);
						}
					} else {
						label = 43;
					}
				} else {
					label = 43;
				}
				if ((label|0) == 43) {
					if ($50) {
						$$10 = 0;
						STACKTOP = sp;return ($$10|0);
					}
				}
				$254 = (__ZNK8Features5vbarsEv($this)|0);
				$255 = ($254|0)==(1);
				if (!($255)) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$256 = ((($this)) + 20|0);
				$257 = HEAP32[$256>>2]|0;
				$258 = ((($257)) + 8|0);
				$259 = HEAP32[$258>>2]|0;
				$260 = HEAP32[$257>>2]|0;
				$261 = (($259) + 1)|0;
				$262 = (($261) - ($260))|0;
				$263 = ($262|0)<(2);
				if ($263) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$264 = (($260) + ($259))|0;
				$265 = (($264|0) / 2)&-1;
				$266 = HEAP32[$this>>2]|0;
				$267 = HEAP32[$266>>2]|0;
				$268 = ((($266)) + 8|0);
				$269 = HEAP32[$268>>2]|0;
				$270 = (($269) + ($267))|0;
				$271 = (($270|0) / 2)&-1;
				$272 = ($265|0)>($271|0);
				if ($272) {
					$$10 = 0;
					STACKTOP = sp;return ($$10|0);
				}
				$273 = HEAP32[$210>>2]|0;
				$274 = ($273|0)<(0);
				if ($274) {
					__ZN7Profile10initializeEv($209);
				}
				$275 = HEAP32[$214>>2]|0;
				$276 = HEAP32[$213>>2]|0;
				$277 = (($275) - ($276))|0;
				$278 = $277 >> 2;
				$279 = ($278*50)|0;
				$280 = (($279) + -50)|0;
				$281 = (($280|0) / 100)&-1;
				$282 = (__ZN7ProfileixEi($209,$281)|0);
				$283 = (($269) - ($282))|0;
				$284 = (($283) + 2)|0;
				$285 = HEAP32[$this>>2]|0;
				$286 = ((($285)) + 8|0);
				$287 = HEAP32[$286>>2]|0;
				$288 = ($284|0)<($287|0);
				L79: do {
					if ($288) {
						$289 = ((($285)) + 4|0);
						$290 = HEAP32[$289>>2]|0;
						$291 = ((($285)) + 12|0);
						$292 = HEAP32[$291>>2]|0;
						$293 = (($292) + ($290))|0;
						$294 = (($293|0) / 2)&-1;
						$295 = (__ZNK6Bitmap11seek_bottomEiib($285,$294,$284,1)|0);
						$296 = HEAP32[$this>>2]|0;
						$297 = ((($296)) + 12|0);
						$298 = HEAP32[$297>>2]|0;
						$299 = ($295|0)<($298|0);
						if ($299) {
							$300 = (($295) + -1)|0;
							$301 = (__ZNK6Bitmap13escape_bottomEii($296,$300,$284)|0);
							if ($301) {
								label = 52;
							}
						} else {
							label = 52;
						}
						if ((label|0) == 52) {
							$302 = (__ZN7Profile6minimaEi($209,-1)|0);
							$303 = ($302|0)==(3);
							$304 = HEAP32[$this>>2]|0;
							if ($303) {
								$305 = ((($304)) + 8|0);
								$306 = HEAP32[$305>>2]|0;
								$307 = HEAP32[$304>>2]|0;
								$308 = (($306) + 1)|0;
								$309 = (($308) - ($307))|0;
								$310 = (($309|0) / 8)&-1;
								$311 = (__ZN7Profile6minimaEi($209,$310)|0);
								$312 = ($311|0)<(3);
								$$ = $312 ? 102 : 0;
								$$8$ph = $$;
								break;
							}
							$313 = ((($304)) + 12|0);
							$314 = HEAP32[$313>>2]|0;
							$315 = ((($304)) + 4|0);
							$316 = HEAP32[$315>>2]|0;
							$317 = (($314) + 1)|0;
							$318 = (($317) - ($316))|0;
							$319 = ((($304)) + 8|0);
							$320 = HEAP32[$319>>2]|0;
							$321 = HEAP32[$304>>2]|0;
							$322 = (($320) + 1)|0;
							$323 = (($322) - ($321))|0;
							$324 = (__ZN5Ocrad7similarEiiii($318,$323,40,1)|0);
							if ($324) {
								$325 = HEAP32[$this>>2]|0;
								$326 = ((($325)) + 12|0);
								$327 = HEAP32[$326>>2]|0;
								$328 = ((($325)) + 4|0);
								$329 = HEAP32[$328>>2]|0;
								$330 = (($327) + 1)|0;
								$331 = (($330) - ($329))|0;
								$332 = (($331|0) / 8)&-1;
								$333 = (__ZN7Profile6minimaEi($11,$332)|0);
								$334 = ($333|0)==(2);
								if ($334) {
									$335 = HEAP32[$this>>2]|0;
									$336 = ((($335)) + 12|0);
									$337 = HEAP32[$336>>2]|0;
									$338 = ((($335)) + 4|0);
									$339 = HEAP32[$338>>2]|0;
									$340 = (($337) + 1)|0;
									$341 = (($340) - ($339))|0;
									$342 = (($341|0) / 8)&-1;
									$343 = (__ZN7Profile6minimaEi($0,$342)|0);
									$344 = ($343|0)==(2);
									if ($344) {
										$$8$ph = 120;
										break;
									}
								}
								$345 = HEAP32[$this>>2]|0;
								$346 = ((($345)) + 4|0);
								$347 = HEAP32[$346>>2]|0;
								$348 = ((($345)) + 12|0);
								$349 = HEAP32[$348>>2]|0;
								$350 = (($349) - ($347))|0;
								$351 = ($350*75)|0;
								$352 = (($351|0) / 100)&-1;
								$353 = (($352) + ($347))|0;
								$354 = HEAP32[$345>>2]|0;
								$355 = ((($345)) + 8|0);
								$356 = HEAP32[$355>>2]|0;
								$357 = (($356) + ($354))|0;
								$358 = (($357|0) / 2)&-1;
								$359 = (__ZNK6Bitmap10seek_rightEiib($345,$353,$358,0)|0);
								$360 = (($359) + 1)|0;
								$361 = HEAP32[$this>>2]|0;
								$362 = (__ZNK6Bitmap10seek_rightEiib($361,$353,$360,1)|0);
								$363 = HEAP32[$this>>2]|0;
								$364 = ((($363)) + 8|0);
								$365 = HEAP32[$364>>2]|0;
								$366 = ($362|0)<($365|0);
								if (!($366)) {
									$367 = ((($this)) + 56|0);
									$368 = (__ZN7Profile8isconvexEv($367)|0);
									if ($368) {
										$369 = HEAP32[$this>>2]|0;
										$370 = HEAP32[$369>>2]|0;
										$371 = ((($369)) + 8|0);
										$372 = HEAP32[$371>>2]|0;
										$373 = (($372) - ($370))|0;
										$374 = ($373*60)|0;
										$375 = (($374|0) / 100)&-1;
										$376 = (($375) + ($370))|0;
										$377 = ($284|0)>($376|0);
										if ($377) {
											$$8$ph = 0;
											break;
										}
										$378 = ((($369)) + 12|0);
										$379 = HEAP32[$378>>2]|0;
										$380 = ($295|0)<($379|0);
										if ($380) {
											$$8$ph = 0;
											break;
										}
									}
									$381 = (__ZNK8Features5hbarsEv($this)|0);
									$382 = ($381|0)==(1);
									do {
										if ($382) {
											$$phi$trans$insert = ((($this)) + 8|0);
											$$pre = HEAP32[$$phi$trans$insert>>2]|0;
											$$pre79 = HEAP32[$this>>2]|0;
											$409 = $$pre;$412 = $$pre79;
											label = 66;
										} else {
											$383 = (__ZNK8Features5hbarsEv($this)|0);
											$384 = ($383|0)==(2);
											if (!($384)) {
												break;
											}
											$385 = ((($this)) + 8|0);
											$386 = HEAP32[$385>>2]|0;
											$387 = ((($386)) + 28|0);
											$388 = HEAP32[$387>>2]|0;
											$389 = HEAP32[$this>>2]|0;
											$390 = ((($389)) + 12|0);
											$391 = HEAP32[$390>>2]|0;
											$392 = (($391) + -1)|0;
											$393 = ($388|0)<($392|0);
											if ($393) {
												break;
											}
											$394 = ((($386)) + 8|0);
											$395 = HEAP32[$394>>2]|0;
											$396 = HEAP32[$386>>2]|0;
											$397 = (($395) + 1)|0;
											$398 = (($397) - ($396))|0;
											$399 = $398 << 1;
											$400 = ((($386)) + 24|0);
											$401 = HEAP32[$400>>2]|0;
											$402 = ((($386)) + 16|0);
											$403 = HEAP32[$402>>2]|0;
											$404 = (($401) + 1)|0;
											$405 = (($404) - ($403))|0;
											$406 = ($405*3)|0;
											$407 = ($399|0)>($406|0);
											if ($407) {
												$409 = $386;$412 = $389;
												label = 66;
											}
										}
									} while(0);
									do {
										if ((label|0) == 66) {
											$408 = ((($409)) + 4|0);
											$410 = HEAP32[$408>>2]|0;
											$411 = ((($412)) + 4|0);
											$413 = HEAP32[$411>>2]|0;
											$414 = (($413) + 1)|0;
											$415 = ($410|0)>($414|0);
											if ($415) {
												break;
											}
											$416 = ((($409)) + 12|0);
											$417 = HEAP32[$416>>2]|0;
											$418 = (1 - ($410))|0;
											$419 = (($418) + ($417))|0;
											$420 = $419 << 2;
											$421 = ((($412)) + 12|0);
											$422 = HEAP32[$421>>2]|0;
											$423 = (1 - ($413))|0;
											$424 = (($423) + ($422))|0;
											$425 = ($420|0)>($424|0);
											if ($425) {
												break;
											}
											$426 = ((($this)) + 64|0);
											$427 = HEAP32[$426>>2]|0;
											$428 = ($427|0)<(0);
											if ($428) {
												__ZN7Profile10initializeEv($367);
											}
											$429 = ((($this)) + 92|0);
											$430 = ((($this)) + 96|0);
											$431 = HEAP32[$430>>2]|0;
											$432 = HEAP32[$429>>2]|0;
											$433 = (($431) - ($432))|0;
											$434 = $433 >> 2;
											$435 = ($434*50)|0;
											$436 = (($435) + -50)|0;
											$437 = (($436|0) / 100)&-1;
											$438 = (__ZN7ProfileixEi($367,$437)|0);
											$439 = $438 << 2;
											$440 = HEAP32[$this>>2]|0;
											$441 = ((($440)) + 8|0);
											$442 = HEAP32[$441>>2]|0;
											$443 = HEAP32[$440>>2]|0;
											$444 = (($442) + 1)|0;
											$445 = (($444) - ($443))|0;
											$446 = ($439|0)<($445|0);
											if (!($446)) {
												$$8$ph = 84;
												break L79;
											}
										}
									} while(0);
									$447 = HEAP32[$210>>2]|0;
									$448 = ($447|0)<(0);
									if ($448) {
										__ZN7Profile10initializeEv($209);
									}
									$449 = HEAP32[$214>>2]|0;
									$450 = HEAP32[$213>>2]|0;
									$451 = (($449) - ($450))|0;
									$452 = $451 >> 2;
									$453 = ($452*50)|0;
									$454 = (($453) + -50)|0;
									$455 = (($454|0) / 100)&-1;
									$456 = (__ZN7ProfileixEi($209,$455)|0);
									$457 = ($456*3)|0;
									$458 = HEAP32[$this>>2]|0;
									$459 = ((($458)) + 8|0);
									$460 = HEAP32[$459>>2]|0;
									$461 = HEAP32[$458>>2]|0;
									$462 = (($460) + 1)|0;
									$463 = (($462) - ($461))|0;
									$464 = ($457|0)>($463|0);
									$$11 = $464 ? 114 : 0;
									$$8$ph = $$11;
									break;
								}
							}
						}
						$465 = HEAP32[$this>>2]|0;
						$466 = ((($465)) + 12|0);
						$467 = HEAP32[$466>>2]|0;
						$468 = ((($465)) + 4|0);
						$469 = HEAP32[$468>>2]|0;
						$470 = (($467) + 1)|0;
						$471 = (($470) - ($469))|0;
						$472 = ((($465)) + 8|0);
						$473 = HEAP32[$472>>2]|0;
						$474 = HEAP32[$465>>2]|0;
						$475 = (($473) + 1)|0;
						$476 = (($475) - ($474))|0;
						$477 = (__ZN5Ocrad7similarEiiii($471,$476,40,1)|0);
						if ($477) {
							$478 = HEAP32[$this>>2]|0;
							$479 = ((($478)) + 4|0);
							$480 = HEAP32[$479>>2]|0;
							$481 = ((($478)) + 12|0);
							$482 = HEAP32[$481>>2]|0;
							$483 = (($482) - ($480))|0;
							$484 = ($483*15)|0;
							$485 = (($484|0) / 100)&-1;
							$486 = (($485) + ($480))|0;
							$487 = ((($this)) + 32|0);
							$488 = HEAP32[$487>>2]|0;
							$489 = ((($this)) + 36|0);
							$490 = HEAP32[$489>>2]|0;
							$491 = ($488|0)==($490|0);
							if ($491) {
								__ZNK8Features13row_scan_initEv($this);
								$$pre$i19 = HEAP32[$487>>2]|0;
								$$pre80 = HEAP32[$this>>2]|0;
								$$phi$trans$insert81 = ((($$pre80)) + 4|0);
								$$pre82 = HEAP32[$$phi$trans$insert81>>2]|0;
								$$in = $$pre80;$493 = $$pre82;$495 = $$pre$i19;
							} else {
								$$in = $478;$493 = $480;$495 = $488;
							}
							$492 = (($486) - ($493))|0;
							$494 = (($495) + (($492*12)|0)|0);
							$496 = (((($495) + (($492*12)|0)|0)) + 4|0);
							$497 = HEAP32[$496>>2]|0;
							$498 = HEAP32[$494>>2]|0;
							$499 = (($497) - ($498))|0;
							$500 = ($499|0)==(24);
							if ($500) {
								$501 = ((($$in)) + 12|0);
								$502 = HEAP32[$501>>2]|0;
								$503 = (($502) - ($493))|0;
								$504 = ($503*85)|0;
								$505 = (($504|0) / 100)&-1;
								$506 = (($505) + ($493))|0;
								$507 = HEAP32[$489>>2]|0;
								$508 = ($495|0)==($507|0);
								if ($508) {
									__ZNK8Features13row_scan_initEv($this);
									$$pre$i = HEAP32[$487>>2]|0;
									$$pre83 = HEAP32[$this>>2]|0;
									$$phi$trans$insert84 = ((($$pre83)) + 4|0);
									$$pre85 = HEAP32[$$phi$trans$insert84>>2]|0;
									$$in88 = $$pre83;$510 = $$pre85;$512 = $$pre$i;
								} else {
									$$in88 = $$in;$510 = $493;$512 = $495;
								}
								$509 = (($506) - ($510))|0;
								$511 = (($512) + (($509*12)|0)|0);
								$513 = (((($512) + (($509*12)|0)|0)) + 4|0);
								$514 = HEAP32[$513>>2]|0;
								$515 = HEAP32[$511>>2]|0;
								$516 = (($514) - ($515))|0;
								$517 = ($516|0)==(24);
								if ($517) {
									$518 = (($295) + -1)|0;
									$519 = (__ZNK6Bitmap10seek_rightEiib($$in88,$518,$284,1)|0);
									$520 = HEAP32[$this>>2]|0;
									$521 = ((($520)) + 8|0);
									$522 = HEAP32[$521>>2]|0;
									$523 = ($519|0)<($522|0);
									if ($523) {
										$524 = ((($this)) + 56|0);
										$525 = (__ZN7Profile6isctipEi($524,50)|0);
										if ($525) {
											$$8$ph = 120;
										} else {
											label = 83;
										}
									} else {
										label = 83;
									}
								} else {
									label = 83;
								}
							} else {
								label = 83;
							}
						} else {
							label = 83;
						}
					} else {
						label = 83;
					}
				} while(0);
				L124: do {
					if ((label|0) == 83) {
						$526 = HEAP32[$this>>2]|0;
						$527 = ((($526)) + 12|0);
						$528 = HEAP32[$527>>2]|0;
						$529 = ((($526)) + 4|0);
						$530 = HEAP32[$529>>2]|0;
						$531 = (($528) + 1)|0;
						$532 = (($531) - ($530))|0;
						$533 = ($532*3)|0;
						$534 = ((($526)) + 8|0);
						$535 = HEAP32[$534>>2]|0;
						$536 = HEAP32[$526>>2]|0;
						$537 = (($535) + 1)|0;
						$538 = (($537) - ($536))|0;
						$539 = $538 << 2;
						$540 = ($533|0)>($539|0);
						L126: do {
							if ($540) {
								$541 = HEAP32[$256>>2]|0;
								$542 = HEAP32[$541>>2]|0;
								$543 = ($542|0)>($536|0);
								if ($543) {
									$544 = (__ZN7Profile6minimaEi($209,-1)|0);
									$545 = ($544|0)<(3);
									if ($545) {
										$546 = HEAP32[$this>>2]|0;
										$547 = ((($546)) + 8|0);
										$548 = HEAP32[$547>>2]|0;
										$549 = HEAP32[$210>>2]|0;
										$550 = ($549|0)<(0);
										if ($550) {
											__ZN7Profile10initializeEv($209);
										}
										$551 = HEAP32[$214>>2]|0;
										$552 = HEAP32[$213>>2]|0;
										$553 = (($551) - ($552))|0;
										$554 = $553 >> 2;
										$555 = ($554*50)|0;
										$556 = (($555) + -50)|0;
										$557 = (($556|0) / 100)&-1;
										$558 = (__ZN7ProfileixEi($209,$557)|0);
										$559 = (($558) + -1)|0;
										$560 = ($559|0)>(0);
										$561 = $560 ? $559 : 0;
										$562 = (($548) - ($561))|0;
										$563 = HEAP32[$this>>2]|0;
										$564 = ((($563)) + 4|0);
										$565 = HEAP32[$564>>2]|0;
										$566 = ((($563)) + 12|0);
										$567 = HEAP32[$566>>2]|0;
										$568 = (($567) + ($565))|0;
										$569 = (($568|0) / 2)&-1;
										$570 = (__ZNK6Bitmap13escape_bottomEii($563,$569,$562)|0);
										$571 = ((($this)) + 296|0);
										if (!($570)) {
											$572 = ((($this)) + 304|0);
											$573 = HEAP32[$572>>2]|0;
											$574 = ($573|0)<(0);
											if ($574) {
												__ZN7Profile10initializeEv($571);
											}
											$575 = ((($this)) + 332|0);
											$576 = ((($this)) + 336|0);
											$577 = HEAP32[$576>>2]|0;
											$578 = HEAP32[$575>>2]|0;
											$579 = (($577) - ($578))|0;
											$580 = $579 >> 2;
											$581 = ($580*6)|0;
											$582 = (($581) + -6)|0;
											$583 = (($582|0) / 100)&-1;
											$584 = (__ZN7ProfileixEi($571,$583)|0);
											$585 = ($584*3)|0;
											$586 = HEAP32[$this>>2]|0;
											$587 = ((($586)) + 8|0);
											$588 = HEAP32[$587>>2]|0;
											$589 = HEAP32[$586>>2]|0;
											$590 = (($588) + 1)|0;
											$591 = (($590) - ($589))|0;
											$592 = $591 << 1;
											$593 = ($585|0)<($592|0);
											do {
												if ($593) {
													$594 = (__ZN7Profile5ispitEv($11)|0);
													if (!($594)) {
														break;
													}
													$595 = ((($this)) + 56|0);
													$596 = (__ZN7Profile8iminimumEii($595,0,-1)|0);
													$597 = ((($this)) + 64|0);
													$598 = HEAP32[$597>>2]|0;
													$599 = ($598|0)<(0);
													if ($599) {
														__ZN7Profile10initializeEv($595);
													}
													$600 = ((($this)) + 92|0);
													$601 = ((($this)) + 96|0);
													$602 = HEAP32[$601>>2]|0;
													$603 = HEAP32[$600>>2]|0;
													$604 = (($602) - ($603))|0;
													$605 = $604 >> 2;
													$606 = ($605*40)|0;
													$607 = (($606) + -40)|0;
													$608 = (($607|0) / 100)&-1;
													$609 = ($596|0)<($608|0);
													if ($609) {
														$$8$ph = 116;
														break L124;
													}
												}
											} while(0);
											$$8$ph = 0;
											break L124;
										}
										$610 = (__ZN7Profile3maxEv($571)|0);
										$611 = $610 << 1;
										$612 = HEAP32[$this>>2]|0;
										$613 = ((($612)) + 8|0);
										$614 = HEAP32[$613>>2]|0;
										$615 = HEAP32[$612>>2]|0;
										$616 = (($614) + 1)|0;
										$617 = (($616) - ($615))|0;
										$618 = ($611|0)>($617|0);
										if ($618) {
											$619 = (__ZN7Profile8iminimumEii($209,0,-1)|0);
											$620 = HEAP32[$210>>2]|0;
											$621 = ($620|0)<(0);
											if ($621) {
												__ZN7Profile10initializeEv($209);
											}
											$622 = HEAP32[$214>>2]|0;
											$623 = HEAP32[$213>>2]|0;
											$624 = (($622) - ($623))|0;
											$625 = $624 >> 2;
											$626 = ($625*20)|0;
											$627 = (($626) + -20)|0;
											$628 = (($627|0) / 100)&-1;
											$629 = ($619|0)<($628|0);
											if (!($629)) {
												do {
													if ($maybe_t$2$off0) {
														$699 = (__ZN7Profile8isconvexEv($209)|0);
														if ($699) {
															break;
														}
														$700 = HEAP32[$this>>2]|0;
														$701 = ((($700)) + 12|0);
														$702 = HEAP32[$701>>2]|0;
														$703 = ((($700)) + 4|0);
														$704 = HEAP32[$703>>2]|0;
														$705 = (($702) + 1)|0;
														$706 = (($705) - ($704))|0;
														$707 = (($706|0) / 3)&-1;
														$708 = (__ZN7Profile6minimaEi($0,$707)|0);
														$709 = ($708|0)==(1);
														if ($709) {
															$$8$ph = 116;
															break L124;
														}
													}
												} while(0);
												$$8$ph = 0;
												break L124;
											}
											$630 = HEAP32[$210>>2]|0;
											$631 = ($630|0)<(0);
											if ($631) {
												__ZN7Profile10initializeEv($209);
												$$pre86 = HEAP32[$214>>2]|0;
												$$pre87 = HEAP32[$213>>2]|0;
												$633 = $$pre87;$634 = $$pre86;
											} else {
												$633 = $623;$634 = $622;
											}
											$632 = (($634) - ($633))|0;
											$635 = $632 >> 2;
											$636 = ($635*20)|0;
											$637 = (($636) + -20)|0;
											$638 = (($637|0) / 100)&-1;
											$639 = (__ZN7Profile10increasingEii($209,$638,2)|0);
											do {
												if (!($639)) {
													$640 = (__ZN7Profile10increasingEii($0,1,2)|0);
													if ($640) {
														break;
													}
													$641 = (__ZN7Profile6minimaEi($11,$47)|0);
													$642 = ($641|0)==(2);
													if ($642) {
														break;
													}
													$643 = (__ZN7Profile6minimaEi($209,-1)|0);
													$644 = ($643|0)==(1);
													if ($644) {
														$645 = HEAP32[$this>>2]|0;
														$646 = ((($645)) + 12|0);
														$647 = HEAP32[$646>>2]|0;
														$648 = ((($645)) + 4|0);
														$649 = HEAP32[$648>>2]|0;
														$650 = (($647) + 1)|0;
														$651 = (($650) - ($649))|0;
														$652 = ((($charbox)) + 12|0);
														$653 = HEAP32[$652>>2]|0;
														$654 = ((($charbox)) + 4|0);
														$655 = HEAP32[$654>>2]|0;
														$656 = (($653) + 1)|0;
														$657 = (($656) - ($655))|0;
														$658 = ($651|0)<($657|0);
														if ($658) {
															break;
														}
														$659 = (__ZN7Profile8iminimumEii($11,0,-1)|0);
														$660 = ((($this)) + 112|0);
														$661 = HEAP32[$660>>2]|0;
														$662 = ($661|0)<(0);
														if ($662) {
															__ZN7Profile10initializeEv($11);
														}
														$663 = ((($this)) + 140|0);
														$664 = ((($this)) + 144|0);
														$665 = HEAP32[$664>>2]|0;
														$666 = HEAP32[$663>>2]|0;
														$667 = (($665) - ($666))|0;
														$668 = $667 >> 2;
														$669 = ($668*50)|0;
														$670 = (($669) + -50)|0;
														$671 = (($670|0) / 100)&-1;
														$672 = ($659|0)>($671|0);
														if ($672) {
															break;
														}
													}
													$683 = HEAP32[$this>>2]|0;
													$684 = ((($683)) + 12|0);
													$685 = HEAP32[$684>>2]|0;
													$686 = ((($683)) + 4|0);
													$687 = HEAP32[$686>>2]|0;
													$688 = (($685) + 1)|0;
													$689 = (($688) - ($687))|0;
													$690 = ($689*3)|0;
													$691 = ((($683)) + 8|0);
													$692 = HEAP32[$691>>2]|0;
													$693 = HEAP32[$683>>2]|0;
													$694 = (($692) + 1)|0;
													$695 = (($694) - ($693))|0;
													$696 = ($695*5)|0;
													$697 = ($690|0)<($696|0);
													if ($697) {
														break L126;
													}
													$698 = (__ZN7Profile5istipEv($209)|0);
													if ($698) {
														break L126;
													} else {
														$$8$ph = 102;
														break L124;
													}
												}
											} while(0);
											$673 = HEAP32[$this>>2]|0;
											$674 = ((($673)) + 12|0);
											$675 = HEAP32[$674>>2]|0;
											$676 = ((($673)) + 4|0);
											$677 = HEAP32[$676>>2]|0;
											$678 = (($675) + 1)|0;
											$679 = (($678) - ($677))|0;
											$680 = (__ZN7Profile3maxEv($571)|0);
											$681 = ($680*3)|0;
											$682 = ($679|0)>($681|0);
											$$12 = $682 ? 0 : 114;
											$$8$ph = $$12;
											break L124;
										}
									}
								}
							}
						} while(0);
						$710 = HEAP32[$this>>2]|0;
						$711 = ((($710)) + 4|0);
						$712 = HEAP32[$711>>2]|0;
						$713 = ((($710)) + 12|0);
						$714 = HEAP32[$713>>2]|0;
						$715 = (($714) + ($712))|0;
						$716 = (($715|0) / 2)&-1;
						$717 = HEAP32[$710>>2]|0;
						$718 = ((($710)) + 8|0);
						$719 = HEAP32[$718>>2]|0;
						$720 = (($719) - ($717))|0;
						$721 = ($720*60)|0;
						$722 = (($721|0) / 100)&-1;
						$723 = (($717) + 1)|0;
						$724 = (($723) + ($722))|0;
						$725 = (__ZNK6Bitmap11seek_bottomEiib($710,$716,$724,1)|0);
						$726 = HEAP32[$this>>2]|0;
						$727 = ((($726)) + 12|0);
						$728 = HEAP32[$727>>2]|0;
						$729 = ($725|0)<($728|0);
						if (!($729)) {
							$730 = (__ZN7Profile6minimaEi($209,-1)|0);
							$731 = ($730|0)==(2);
							$$13 = $731 ? 102 : 114;
							$$8$ph = $$13;
							break;
						}
						$732 = HEAP32[$256>>2]|0;
						$733 = ((($732)) + 8|0);
						$734 = HEAP32[$733>>2]|0;
						$735 = HEAP32[$726>>2]|0;
						$736 = ((($726)) + 8|0);
						$737 = HEAP32[$736>>2]|0;
						$738 = (($737) + ($735))|0;
						$739 = (($738|0) / 2)&-1;
						$740 = ($734|0)>($739|0);
						if ($740) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						}
						$741 = (__ZNK8Features5hbarsEv($this)|0);
						$742 = ($741|0)==(1);
						if (!($742)) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						}
						$743 = ((($this)) + 8|0);
						$744 = HEAP32[$743>>2]|0;
						$745 = ((($744)) + 12|0);
						$746 = HEAP32[$745>>2]|0;
						$747 = HEAP32[$this>>2]|0;
						$748 = ((($747)) + 12|0);
						$749 = HEAP32[$748>>2]|0;
						$750 = (($749) + -1)|0;
						$751 = ($746|0)<($750|0);
						if ($751) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						}
						$752 = ((($this)) + 56|0);
						$753 = (__ZN7Profile5istipEv($752)|0);
						if (!($753)) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						}
						$754 = (__ZN7Profile5istipEv($209)|0);
						if (!($754)) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						}
						$755 = HEAP32[$this>>2]|0;
						$756 = ((($755)) + 4|0);
						$757 = HEAP32[$756>>2]|0;
						$758 = ((($755)) + 12|0);
						$759 = HEAP32[$758>>2]|0;
						$760 = (($759) + ($757))|0;
						$761 = (($760|0) / 2)&-1;
						$762 = HEAP32[$755>>2]|0;
						$763 = ((($755)) + 8|0);
						$764 = HEAP32[$763>>2]|0;
						$765 = (($764) - ($762))|0;
						$766 = ($765*75)|0;
						$767 = (($766|0) / 100)&-1;
						$768 = (($767) + ($762))|0;
						$769 = (__ZNK6Bitmap10escape_topEii($755,$761,$768)|0);
						if ($769) {
							$$10 = 0;
							STACKTOP = sp;return ($$10|0);
						} else {
							$$8$ph = 114;
						}
					}
				} while(0);
				$$10 = $$8$ph;
				STACKTOP = sp;return ($$10|0);
			}
			function __ZNK8Features6test_GEv($this) {
				$this = $this|0;
				var $$4$ph = 0, $$5 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
				var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
				var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0;
				var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
				var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
				var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
				var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
				var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0 = 0, $col$0$lcssa = 0, $col$1 = 0, $i$0 = 0, $lrow$0 = 0, $lrow$0$in42 = 0, $lrow$0$in48 = 0, $lrow$0$in48$phi = 0, $lrow$044 = 0;
				var $lrow$047 = 0, $lrow$049 = 0, $row$0 = 0, $row$0$lcssa = 0, $row$1 = 0, $urow$0$lcssa = 0, $urow$012 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 56|0);
				$1 = (__ZN7Profile8isconvexEv($0)|0);
				if (!($1)) {
					$2 = (__ZN7Profile5ispitEv($0)|0);
					if (!($2)) {
						$$5 = 0;
						return ($$5|0);
					}
				}
				$3 = ((($this)) + 152|0);
				$4 = ((($this)) + 160|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ($5|0)<(0);
				if ($6) {
					__ZN7Profile10initializeEv($3);
				}
				$7 = ((($this)) + 188|0);
				$8 = ((($this)) + 192|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = HEAP32[$7>>2]|0;
				$11 = (($9) - ($10))|0;
				$12 = $11 >> 2;
				$13 = ($12*60)|0;
				$14 = (($13) + -60)|0;
				$15 = (($14|0) / 100)&-1;
				$col$0 = 0;$i$0 = $15;$row$0 = 0;
				while(1) {
					$16 = HEAP32[$4>>2]|0;
					$17 = ($16|0)<(0);
					if ($17) {
						__ZN7Profile10initializeEv($3);
					}
					$18 = HEAP32[$8>>2]|0;
					$19 = HEAP32[$7>>2]|0;
					$20 = (($18) - ($19))|0;
					$21 = $20 >> 2;
					$22 = ($21*30)|0;
					$23 = (($22) + -30)|0;
					$24 = (($23|0) / 100)&-1;
					$25 = ($i$0|0)<($24|0);
					if ($25) {
						$col$0$lcssa = $col$0;$row$0$lcssa = $row$0;
						break;
					}
					$27 = (__ZN7ProfileixEi($3,$i$0)|0);
					$28 = ($27|0)>($col$0|0);
					if ($28) {
						$29 = (__ZN7ProfileixEi($3,$i$0)|0);
						$col$1 = $29;$row$1 = $i$0;
					} else {
						$col$1 = $col$0;$row$1 = $row$0;
					}
					$30 = (($i$0) + -1)|0;
					$col$0 = $col$1;$i$0 = $30;$row$0 = $row$1;
				}
				$26 = ($col$0$lcssa|0)==(0);
				if ($26) {
					$$4$ph = 0;
				} else {
					$31 = HEAP32[$this>>2]|0;
					$32 = ((($31)) + 4|0);
					$33 = HEAP32[$32>>2]|0;
					$34 = (($33) + ($row$0$lcssa))|0;
					$35 = ((($31)) + 8|0);
					$36 = HEAP32[$35>>2]|0;
					$37 = (($36) - ($col$0$lcssa))|0;
					$38 = (($37) + 1)|0;
					$39 = HEAP32[$31>>2]|0;
					$40 = ($37|0)<($39|0);
					if ($40) {
						$$4$ph = 0;
					} else {
						$41 = (($39) + ($36))|0;
						$42 = (($41|0) / 2)&-1;
						$43 = ($38|0)<($42|0);
						if ($43) {
							$44 = (($42) + ($38))|0;
							$45 = (($44|0) / 2)&-1;
							$46 = (__ZNK6Bitmap11seek_bottomEiib($31,$34,$45,1)|0);
							$47 = HEAP32[$this>>2]|0;
							$48 = ((($47)) + 12|0);
							$49 = HEAP32[$48>>2]|0;
							$50 = ($46|0)<($49|0);
							if (!($50)) {
								$$5 = 0;
								return ($$5|0);
							}
							$51 = (__ZNK6Bitmap12escape_rightEii($47,$46,$45)|0);
							if (!($51)) {
								$$5 = 0;
								return ($$5|0);
							}
							$52 = HEAP32[$this>>2]|0;
							$53 = HEAP32[$52>>2]|0;
							$54 = ((($52)) + 8|0);
							$55 = HEAP32[$54>>2]|0;
							$56 = (($55) + ($53))|0;
							$57 = (($56|0) / 2)&-1;
							$58 = (__ZNK6Bitmap13escape_bottomEii($52,$46,$57)|0);
							if ($58) {
								$$5 = 0;
								return ($$5|0);
							}
							$59 = HEAP32[$this>>2]|0;
							$60 = ((($59)) + 12|0);
							$61 = HEAP32[$60>>2]|0;
							$62 = ((($59)) + 4|0);
							$63 = HEAP32[$62>>2]|0;
							$64 = (($61) + 1)|0;
							$65 = (($64) - ($63))|0;
							$66 = (($65|0) / 20)&-1;
							$67 = ($66|0)>(2);
							$68 = $67 ? $66 : 2;
							$lrow$047 = (($46) + -1)|0;
							$69 = ($lrow$047|0)>($63|0);
							L31: do {
								if ($69) {
									$71 = $59;$lrow$0$in48 = $46;$lrow$049 = $lrow$047;
									while(1) {
										$70 = HEAP32[$71>>2]|0;
										$72 = ((($71)) + 8|0);
										$73 = HEAP32[$72>>2]|0;
										$74 = (($73) + ($70))|0;
										$75 = (($74|0) / 2)&-1;
										$76 = (__ZNK6Bitmap10seek_rightEiib($71,$lrow$049,$75,1)|0);
										$77 = HEAP32[$this>>2]|0;
										$78 = ((($77)) + 8|0);
										$79 = HEAP32[$78>>2]|0;
										$80 = ($76|0)<($79|0);
										$$phi$trans$insert = ((($77)) + 4|0);
										$$pre = HEAP32[$$phi$trans$insert>>2]|0;
										if (!($80)) {
											$145 = $77;$146 = $77;$84 = $$pre;$lrow$0$in42 = $lrow$0$in48;$lrow$044 = $lrow$049;
											break L31;
										}
										$lrow$0 = (($lrow$049) + -1)|0;
										$81 = ($lrow$0|0)>($$pre|0);
										if ($81) {
											$lrow$0$in48$phi = $lrow$049;$71 = $77;$lrow$049 = $lrow$0;$lrow$0$in48 = $lrow$0$in48$phi;
										} else {
											$145 = $77;$146 = $77;$84 = $$pre;$lrow$0$in42 = $lrow$049;$lrow$044 = $lrow$0;
											break;
										}
									}
								} else {
									$145 = $59;$146 = $59;$84 = $63;$lrow$0$in42 = $46;$lrow$044 = $lrow$047;
								}
							} while(0);
							$82 = (($lrow$0$in42) + -2)|0;
							$83 = ($82|0)>($84|0);
							L36: do {
								if ($83) {
									$86 = $145;$urow$012 = $82;
									while(1) {
										$85 = HEAP32[$86>>2]|0;
										$87 = ((($86)) + 8|0);
										$88 = HEAP32[$87>>2]|0;
										$89 = (($88) + ($85))|0;
										$90 = (($89|0) / 2)&-1;
										$91 = (__ZNK6Bitmap10seek_rightEiib($86,$urow$012,$90,1)|0);
										$92 = HEAP32[$this>>2]|0;
										$93 = ((($92)) + 8|0);
										$94 = HEAP32[$93>>2]|0;
										$95 = ($91|0)<($94|0);
										if ($95) {
											$103 = $92;$112 = $92;$urow$0$lcssa = $urow$012;
											break L36;
										}
										$96 = (($urow$012) + -1)|0;
										$97 = ((($92)) + 4|0);
										$98 = HEAP32[$97>>2]|0;
										$99 = ($96|0)>($98|0);
										if ($99) {
											$86 = $92;$urow$012 = $96;
										} else {
											$103 = $92;$112 = $92;$urow$0$lcssa = $96;
											break;
										}
									}
								} else {
									$103 = $146;$112 = $145;$urow$0$lcssa = $82;
								}
							} while(0);
							$100 = (($lrow$044) + ($68))|0;
							$101 = ($100|0)<($46|0);
							if (!($101)) {
								$$5 = 0;
								return ($$5|0);
							}
							$102 = ((($103)) + 4|0);
							$104 = HEAP32[$102>>2]|0;
							$105 = ($urow$0$lcssa|0)>($104|0);
							if (!($105)) {
								$$5 = 0;
								return ($$5|0);
							}
							$106 = (($urow$0$lcssa) - ($104))|0;
							$107 = (($106|0) / 2)&-1;
							$108 = ($107|0)<($68|0);
							$109 = $108 ? $107 : $68;
							$110 = (($urow$0$lcssa) - ($109))|0;
							$111 = ((($112)) + 8|0);
							$113 = HEAP32[$111>>2]|0;
							$114 = (__ZNK6Bitmap9seek_leftEiib($112,$110,$113,1)|0);
							$115 = HEAP32[$this>>2]|0;
							$116 = HEAP32[$115>>2]|0;
							$117 = ((($115)) + 8|0);
							$118 = HEAP32[$117>>2]|0;
							$119 = (($118) + ($116))|0;
							$120 = (($119|0) / 2)&-1;
							$121 = (__ZNK6Bitmap10seek_rightEiib($115,$110,$120,1)|0);
							$122 = HEAP32[$this>>2]|0;
							$123 = ((($122)) + 8|0);
							$124 = HEAP32[$123>>2]|0;
							$125 = (__ZNK6Bitmap9seek_leftEiib($122,$100,$124,1)|0);
							$126 = HEAP32[$this>>2]|0;
							$127 = HEAP32[$126>>2]|0;
							$128 = ((($126)) + 8|0);
							$129 = HEAP32[$128>>2]|0;
							$130 = (($129) + ($127))|0;
							$131 = (($130|0) / 2)&-1;
							$132 = (__ZNK6Bitmap10seek_rightEiib($126,$100,$131,1)|0);
							$133 = HEAP32[$this>>2]|0;
							$134 = ((($133)) + 4|0);
							$135 = HEAP32[$134>>2]|0;
							$136 = ((($133)) + 12|0);
							$137 = HEAP32[$136>>2]|0;
							$138 = (($137) + ($135))|0;
							$139 = (($138|0) / 2)&-1;
							$140 = ($lrow$044|0)>($139|0);
							if ($140) {
								$141 = (($125) - ($132))|0;
								$142 = (($114) + ($68))|0;
								$143 = (($142) - ($121))|0;
								$144 = ($141|0)>($143|0);
								if ($144) {
									$$4$ph = 71;
								} else {
									$$5 = 0;
									return ($$5|0);
								}
							} else {
								$$4$ph = 71;
							}
						} else {
							$$4$ph = 0;
						}
					}
				}
				$$5 = $$4$ph;
				return ($$5|0);
			}
			function __ZNK8Features15test_HKMNUuvwYyERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$ = 0, $$11$ph = 0, $$12 = 0, $$21 = 0, $$22 = 0, $$4 = 0, $$510 = 0, $$8$ph = 0, $$lcssa227 = 0, $$phi$trans$insert = 0, $$phi$trans$insert145 = 0, $$phi$trans$insert147 = 0, $$phi$trans$insert158 = 0, $$phi$trans$insert161 = 0, $$phi$trans$insert168 = 0, $$phi$trans$insert170 = 0, $$phi$trans$insert173 = 0, $$phi$trans$insert175 = 0, $$phi$trans$insert177 = 0, $$phi$trans$insert182 = 0;
				var $$phi$trans$insert185 = 0, $$phi$trans$insert189 = 0, $$phi$trans$insert191 = 0, $$phi$trans$insert194 = 0, $$phi$trans$insert196 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i28 = 0, $$pre$i$i31 = 0, $$pre$i38 = 0, $$pre$i52 = 0, $$pre$i58 = 0, $$pre$i65 = 0, $$pre$i66 = 0, $$pre$i68 = 0, $$pre$i70 = 0, $$pre142 = 0, $$pre143 = 0;
				var $$pre144 = 0, $$pre146 = 0, $$pre148 = 0, $$pre149 = 0, $$pre150 = 0, $$pre151 = 0, $$pre152 = 0, $$pre153 = 0, $$pre154 = 0, $$pre155 = 0, $$pre156 = 0, $$pre157 = 0, $$pre159 = 0, $$pre160 = 0, $$pre162 = 0, $$pre163 = 0, $$pre165 = 0, $$pre167 = 0, $$pre169 = 0, $$pre171 = 0;
				var $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0, $$pre183 = 0, $$pre184 = 0, $$pre186 = 0, $$pre188 = 0, $$pre190 = 0, $$pre192 = 0, $$pre193 = 0, $$pre195 = 0, $$pre197 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
				var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
				var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
				var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $106 = 0, $107 = 0;
				var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
				var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
				var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
				var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
				var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
				var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
				var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
				var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
				var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
				var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
				var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
				var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
				var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
				var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
				var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
				var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
				var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
				var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
				var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
				var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
				var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
				var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
				var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
				var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
				var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
				var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
				var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
				var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
				var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
				var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
				var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
				var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
				var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
				var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
				var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
				var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
				var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
				var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
				var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
				var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
				var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
				var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
				var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
				var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
				var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
				var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
				var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
				var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
				var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
				var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $bm = 0, $brmerge$demorgan = 0, $cond1 = 0, $hdiff = 0, $hdiff5 = 0, $ispos = 0, $ispos15 = 0, $neg = 0, $neg16 = 0, $or$cond = 0, $or$cond19 = 0;
				var $or$cond19$not = 0, $or$cond20 = 0, $or$cond82 = 0, $or$cond83 = 0, $or$cond85 = 0, $or$cond86 = 0, $r = 0, $row1$0 = 0, $row1$0$in = 0, $row1$0$lcssa223 = 0, $row1$0224 = 0, $row1$1 = 0, $row2$0$lcssa = 0, $row2$0140 = 0, $sum = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hdiff = sp + 56|0;
				$0 = sp + 48|0;
				$r = sp + 32|0;
				$bm = sp + 4|0;
				$hdiff5 = sp;
				$1 = ((($this)) + 104|0);
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($2)) + 12|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($2)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = (($4) + 1)|0;
				$8 = (($7) - ($6))|0;
				$9 = (($8|0) / 5)&-1;
				$10 = (__ZN7Profile6minimaEi($1,$9)|0);
				$11 = ($10|0)==(2);
				if (!($11)) {
					$$12 = 0;
					STACKTOP = sp;return ($$12|0);
				}
				$12 = HEAP32[$this>>2]|0;
				$13 = ((($12)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ((($12)) + 4|0);
				$16 = HEAP32[$15>>2]|0;
				$17 = (($14) + 1)|0;
				$18 = (($17) - ($16))|0;
				$19 = (($18|0) / 4)&-1;
				$20 = (__ZN7Profile6minimaEi($1,$19)|0);
				$21 = ($20|0)==(2);
				if (!($21)) {
					$$12 = 0;
					STACKTOP = sp;return ($$12|0);
				}
				$22 = HEAP32[$this>>2]|0;
				$23 = ((($22)) + 12|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = ((($22)) + 4|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = (($24) + 1)|0;
				$28 = (($27) - ($26))|0;
				$29 = (($28|0) / 2)&-1;
				$30 = (__ZN7Profile6minimaEi($1,$29)|0);
				$31 = ($30|0)<(4);
				if (!($31)) {
					$$12 = 0;
					STACKTOP = sp;return ($$12|0);
				}
				$32 = (__ZN7Profile6isctipEi($1,50)|0);
				if (!($32)) {
					$$12 = 0;
					STACKTOP = sp;return ($$12|0);
				}
				$33 = HEAP32[$this>>2]|0;
				$34 = ((($33)) + 12|0);
				$35 = HEAP32[$34>>2]|0;
				$36 = ((($33)) + 4|0);
				$37 = HEAP32[$36>>2]|0;
				$38 = (($35) + 1)|0;
				$39 = (($38) - ($37))|0;
				$40 = ((($33)) + 8|0);
				$41 = HEAP32[$40>>2]|0;
				$42 = HEAP32[$33>>2]|0;
				$43 = (($41) + 1)|0;
				$44 = (($43) - ($42))|0;
				$45 = ($44|0)<($39|0);
				$46 = $45 ? $44 : $39;
				$47 = (($46|0) / 30)&-1;
				$48 = (($47) + 1)|0;
				$49 = ((($this)) + 200|0);
				$50 = (($39|0) / 5)&-1;
				$51 = (__ZN7Profile6minimaEi($49,$50)|0);
				$52 = HEAP32[$this>>2]|0;
				$53 = ((($52)) + 12|0);
				$54 = HEAP32[$53>>2]|0;
				$55 = ((($52)) + 4|0);
				$56 = HEAP32[$55>>2]|0;
				$57 = (($54) + 1)|0;
				$58 = (($57) - ($56))|0;
				$59 = $58 << 1;
				$60 = ((($52)) + 8|0);
				$61 = HEAP32[$60>>2]|0;
				$62 = HEAP32[$52>>2]|0;
				$63 = (($61) + 1)|0;
				$64 = (($63) - ($62))|0;
				$65 = ($59|0)>=($64|0);
				$66 = ($58|0)>(9);
				$or$cond82 = $66 & $65;
				L13: do {
					if ($or$cond82) {
						switch ($51|0) {
							case 1:  {
								break;
							}
							case 2:  {
								$67 = (__ZN7Profile8iminimumEii($49,0,-1)|0);
								$68 = ((($this)) + 208|0);
								$69 = HEAP32[$68>>2]|0;
								$70 = ($69|0)<(0);
								if ($70) {
									__ZN7Profile10initializeEv($49);
								}
								$71 = ((($this)) + 236|0);
								$72 = ((($this)) + 240|0);
								$73 = HEAP32[$72>>2]|0;
								$74 = HEAP32[$71>>2]|0;
								$75 = (($73) - ($74))|0;
								$76 = $75 >> 2;
								$77 = ($76*50)|0;
								$78 = (($77) + -50)|0;
								$79 = (($78|0) / 100)&-1;
								$80 = (__ZN5Ocrad7similarEiiii($67,$79,10,1)|0);
								if (!($80)) {
									$$pre172 = HEAP32[$this>>2]|0;
									$$phi$trans$insert173 = ((($$pre172)) + 12|0);
									$$pre174 = HEAP32[$$phi$trans$insert173>>2]|0;
									$$phi$trans$insert175 = ((($$pre172)) + 4|0);
									$$pre176 = HEAP32[$$phi$trans$insert175>>2]|0;
									$$phi$trans$insert177 = ((($$pre172)) + 8|0);
									$$pre178 = HEAP32[$$phi$trans$insert177>>2]|0;
									$$pre180 = HEAP32[$$pre172>>2]|0;
									$585 = $$pre174;$587 = $$pre176;$590 = $$pre178;$592 = $$pre180;
									label = 112;
									break L13;
								}
								break;
							}
							default: {
								$585 = $54;$587 = $56;$590 = $61;$592 = $62;
								label = 112;
								break L13;
							}
						}
						$81 = (__ZN7Profile3maxEv($1)|0);
						$82 = (__ZN7Profile3minEv($1)|0);
						$83 = (($81) - ($82))|0;
						$84 = HEAP32[$this>>2]|0;
						$85 = ((($84)) + 12|0);
						$86 = HEAP32[$85>>2]|0;
						$87 = ((($84)) + 4|0);
						$88 = HEAP32[$87>>2]|0;
						$89 = (($86) + 1)|0;
						$90 = (($89) - ($88))|0;
						$91 = (($90|0) / 10)&-1;
						$92 = (($91) + ($83))|0;
						$93 = ((($this)) + 296|0);
						$94 = ((($this)) + 304|0);
						$95 = HEAP32[$94>>2]|0;
						$96 = ($95|0)<(0);
						if ($96) {
							__ZN7Profile10initializeEv($93);
						}
						$97 = ((($this)) + 332|0);
						$98 = ((($this)) + 336|0);
						$99 = HEAP32[$98>>2]|0;
						$100 = HEAP32[$97>>2]|0;
						$101 = (($99) - ($100))|0;
						$102 = $101 >> 2;
						$103 = ($102*90)|0;
						$104 = (($103) + -90)|0;
						$105 = (($104|0) / 100)&-1;
						$106 = ($105|0)<($92|0);
						$107 = $106 ? $105 : $92;
						$108 = (__ZN7Profile3maxEv($1)|0);
						$109 = (__ZN7Profile3minEv($1)|0);
						$110 = (($108) - ($109))|0;
						$111 = ($110*5)|0;
						$112 = HEAP32[$this>>2]|0;
						$113 = ((($112)) + 12|0);
						$114 = HEAP32[$113>>2]|0;
						$115 = ((($112)) + 4|0);
						$116 = HEAP32[$115>>2]|0;
						$117 = (($114) + 1)|0;
						$118 = (($117) - ($116))|0;
						$119 = ($118*3)|0;
						$120 = ($111|0)>($119|0);
						if ($120) {
							$121 = HEAP32[$94>>2]|0;
							$122 = ($121|0)<(0);
							if ($122) {
								__ZN7Profile10initializeEv($93);
							}
							$123 = HEAP32[$98>>2]|0;
							$124 = HEAP32[$97>>2]|0;
							$125 = (($123) - ($124))|0;
							$126 = $125 >> 2;
							$127 = ($126*75)|0;
							$128 = (($127) + -75)|0;
							$129 = (($128|0) / 100)&-1;
							$130 = ($107|0)>($129|0);
							if ($130) {
								$354 = 0;
							} else {
								$131 = (__ZN7ProfileixEi($93,$107)|0);
								$132 = ($131*5)|0;
								$133 = HEAP32[$this>>2]|0;
								$134 = ((($133)) + 8|0);
								$135 = HEAP32[$134>>2]|0;
								$136 = HEAP32[$133>>2]|0;
								$137 = (($135) + 1)|0;
								$138 = (($137) - ($136))|0;
								$139 = ($132|0)<=($138|0);
								$354 = $139;
							}
						} else {
							$354 = 1;
						}
						$140 = ((($this)) + 56|0);
						$141 = ((($this)) + 64|0);
						$142 = HEAP32[$141>>2]|0;
						$143 = ($142|0)<(0);
						if ($143) {
							__ZN7Profile10initializeEv($140);
						}
						$144 = ((($this)) + 92|0);
						$145 = ((($this)) + 96|0);
						$146 = HEAP32[$145>>2]|0;
						$147 = HEAP32[$144>>2]|0;
						$148 = (($146) - ($147))|0;
						$149 = $148 >> 2;
						$150 = ($149*90)|0;
						$151 = (($150) + -90)|0;
						$152 = (($151|0) / 100)&-1;
						$153 = (__ZN7Profile3minEii($140,$152,-1)|0);
						$154 = ($153|0)>(1);
						if ($154) {
							$155 = (__ZN7Profile6isvpitEv($49)|0);
							if ($155) {
								$156 = HEAP32[$this>>2]|0;
								$157 = ((($156)) + 12|0);
								$158 = HEAP32[$157>>2]|0;
								$159 = ((($156)) + 4|0);
								$160 = HEAP32[$159>>2]|0;
								$161 = (($158) + 1)|0;
								$162 = (($161) - ($160))|0;
								$163 = (($162|0) / 2)&-1;
								$164 = (__ZN7Profile6minimaEi($1,$163)|0);
								$165 = ($164|0)==(2);
								if ($165) {
									$166 = HEAP32[$141>>2]|0;
									$167 = ($166|0)<(0);
									if ($167) {
										__ZN7Profile10initializeEv($140);
									}
									$168 = HEAP32[$145>>2]|0;
									$169 = HEAP32[$144>>2]|0;
									$170 = (($168) - ($169))|0;
									$171 = $170 >> 2;
									$172 = ($171*75)|0;
									$173 = (($172) + -75)|0;
									$174 = (($173|0) / 100)&-1;
									$175 = (__ZN7ProfileixEi($140,$174)|0);
									$176 = ($175|0)>($153|0);
									if (!($176)) {
										if (!($354)) {
											$$11$ph = 118;
											break;
										}
										$177 = (__ZN7ProfileixEi($93,$107)|0);
										$178 = ($177*3)|0;
										$179 = HEAP32[$this>>2]|0;
										$180 = ((($179)) + 8|0);
										$181 = HEAP32[$180>>2]|0;
										$182 = HEAP32[$179>>2]|0;
										$183 = (($181) + 1)|0;
										$184 = (($183) - ($182))|0;
										$185 = ($178|0)>($184|0);
										if ($185) {
											$$11$ph = 118;
											break;
										}
										$186 = (__ZN7ProfileixEi($93,$107)|0);
										$187 = HEAP32[$94>>2]|0;
										$188 = ($187|0)<(0);
										if ($188) {
											__ZN7Profile10initializeEv($93);
										}
										$189 = HEAP32[$98>>2]|0;
										$190 = HEAP32[$97>>2]|0;
										$191 = (($189) - ($190))|0;
										$192 = $191 >> 2;
										$193 = ($192*90)|0;
										$194 = (($193) + -90)|0;
										$195 = (($194|0) / 100)&-1;
										$196 = (__ZN7ProfileixEi($93,$195)|0);
										$197 = (($196) + 1)|0;
										$198 = ($186|0)>($197|0);
										if ($198) {
											$$11$ph = 118;
											break;
										}
									}
								}
							}
						}
						$199 = HEAP32[$this>>2]|0;
						$200 = (__ZNK6Bitmap11bottom_hookEPi($199,$hdiff)|0);
						L49: do {
							if ($200) {
								$201 = HEAP32[$hdiff>>2]|0;
								$ispos15 = ($201|0)>(-1);
								$neg16 = (0 - ($201))|0;
								$202 = $ispos15 ? $201 : $neg16;
								$203 = HEAP32[$this>>2]|0;
								$204 = ((($203)) + 12|0);
								$205 = HEAP32[$204>>2]|0;
								$206 = ((($203)) + 4|0);
								$207 = HEAP32[$206>>2]|0;
								$208 = (($205) + 1)|0;
								$209 = (($208) - ($207))|0;
								$210 = (($209|0) / 8)&-1;
								$211 = ($202|0)>($210|0);
								do {
									if ($211) {
										$278 = $205;$280 = $207;$282 = $201;
									} else {
										$212 = (($205) - ($207))|0;
										$213 = ($212*30)|0;
										$214 = (($213|0) / 100)&-1;
										$215 = (($214) + ($207))|0;
										$216 = ((($this)) + 32|0);
										$217 = HEAP32[$216>>2]|0;
										$218 = ((($this)) + 36|0);
										$219 = HEAP32[$218>>2]|0;
										$220 = ($217|0)==($219|0);
										if ($220) {
											__ZNK8Features13row_scan_initEv($this);
											$$pre$i52 = HEAP32[$216>>2]|0;
											$$pre = HEAP32[$this>>2]|0;
											$$phi$trans$insert = ((($$pre)) + 4|0);
											$$pre142 = HEAP32[$$phi$trans$insert>>2]|0;
											$222 = $$pre142;$224 = $$pre$i52;
										} else {
											$222 = $207;$224 = $217;
										}
										$221 = (($215) - ($222))|0;
										$223 = (($224) + (($221*12)|0)|0);
										$225 = (((($224) + (($221*12)|0)|0)) + 4|0);
										$226 = HEAP32[$225>>2]|0;
										$227 = HEAP32[$223>>2]|0;
										$228 = (($226) - ($227))|0;
										$229 = ($228|0)>(16);
										if ($229) {
											$$4 = 118;
											break L49;
										}
										$230 = (__ZN7Profile8isconvexEv($49)|0);
										if (!($230)) {
											$$pre143 = HEAP32[$hdiff>>2]|0;
											$$pre144 = HEAP32[$this>>2]|0;
											$$phi$trans$insert145 = ((($$pre144)) + 12|0);
											$$pre146 = HEAP32[$$phi$trans$insert145>>2]|0;
											$$phi$trans$insert147 = ((($$pre144)) + 4|0);
											$$pre148 = HEAP32[$$phi$trans$insert147>>2]|0;
											$278 = $$pre146;$280 = $$pre148;$282 = $$pre143;
											break;
										}
										$231 = HEAP32[$94>>2]|0;
										$232 = ($231|0)<(0);
										if ($232) {
											__ZN7Profile10initializeEv($93);
										}
										$233 = HEAP32[$98>>2]|0;
										$234 = HEAP32[$97>>2]|0;
										$235 = (($233) - ($234))|0;
										$236 = $235 >> 2;
										$237 = ($236*30)|0;
										$238 = (($237) + -30)|0;
										$239 = (($238|0) / 100)&-1;
										$240 = (__ZN7ProfileixEi($93,$239)|0);
										$241 = ($240*9)|0;
										$242 = HEAP32[$94>>2]|0;
										$243 = ($242|0)<(0);
										if ($243) {
											__ZN7Profile10initializeEv($93);
										}
										$244 = HEAP32[$98>>2]|0;
										$245 = HEAP32[$97>>2]|0;
										$246 = (($244) - ($245))|0;
										$247 = $246 >> 2;
										$248 = ($247*50)|0;
										$249 = (($248) + -50)|0;
										$250 = (($249|0) / 100)&-1;
										$251 = (__ZN7ProfileixEi($93,$250)|0);
										$252 = ($251*10)|0;
										$253 = ($241|0)>($252|0);
										if ($253) {
											$254 = HEAP32[$94>>2]|0;
											$255 = ($254|0)<(0);
											if ($255) {
												__ZN7Profile10initializeEv($93);
											}
											$256 = HEAP32[$98>>2]|0;
											$257 = HEAP32[$97>>2]|0;
											$258 = (($256) - ($257))|0;
											$259 = $258 >> 2;
											$260 = ($259*50)|0;
											$261 = (($260) + -50)|0;
											$262 = (($261|0) / 100)&-1;
											$263 = (__ZN7ProfileixEi($93,$262)|0);
											$264 = ($263*9)|0;
											$265 = HEAP32[$94>>2]|0;
											$266 = ($265|0)<(0);
											if ($266) {
												__ZN7Profile10initializeEv($93);
											}
											$267 = HEAP32[$98>>2]|0;
											$268 = HEAP32[$97>>2]|0;
											$269 = (($267) - ($268))|0;
											$270 = $269 >> 2;
											$271 = ($270*70)|0;
											$272 = (($271) + -70)|0;
											$273 = (($272|0) / 100)&-1;
											$274 = (__ZN7ProfileixEi($93,$273)|0);
											$275 = ($274*10)|0;
											$276 = ($264|0)>($275|0);
											if ($276) {
												$$4 = 118;
												break L49;
											}
										}
										$$4 = 117;
										break L49;
									}
								} while(0);
								$277 = (($278) + 1)|0;
								$279 = (($277) - ($280))|0;
								$281 = (($279|0) / 2)&-1;
								$283 = ($282|0)>($281|0);
								if ($283) {
									$284 = (__ZN7Profile6minimaEi($49,$281)|0);
									$285 = ($284|0)==(1);
									$$ = $285 ? 121 : 0;
									$$4 = $$;
								} else {
									label = 51;
								}
							} else {
								label = 51;
							}
						} while(0);
						L77: do {
							if ((label|0) == 51) {
								$286 = ((($this)) + 152|0);
								$287 = ((($this)) + 160|0);
								$288 = HEAP32[$287>>2]|0;
								$289 = ($288|0)<(0);
								if ($289) {
									__ZN7Profile10initializeEv($286);
								}
								$290 = ((($this)) + 188|0);
								$291 = ((($this)) + 192|0);
								$292 = HEAP32[$291>>2]|0;
								$293 = HEAP32[$290>>2]|0;
								$294 = (($292) - ($293))|0;
								$295 = $294 >> 2;
								$296 = ($295*90)|0;
								$297 = (($296) + -90)|0;
								$298 = (($297|0) / 100)&-1;
								$299 = (__ZN7Profile3minEii($286,$298,-1)|0);
								$300 = HEAP32[$141>>2]|0;
								$301 = ($300|0)<(0);
								if ($301) {
									__ZN7Profile10initializeEv($140);
									$$pre149 = HEAP32[$141>>2]|0;
									$309 = $$pre149;
								} else {
									$309 = $300;
								}
								$302 = HEAP32[$145>>2]|0;
								$303 = HEAP32[$144>>2]|0;
								$304 = (($302) - ($303))|0;
								$305 = $304 >> 2;
								$306 = ($305*70)|0;
								$307 = (($306) + -70)|0;
								$308 = (($307|0) / 100)&-1;
								$310 = ($309|0)<(0);
								if ($310) {
									__ZN7Profile10initializeEv($140);
									$$pre150 = HEAP32[$145>>2]|0;
									$$pre151 = HEAP32[$144>>2]|0;
									$312 = $$pre151;$313 = $$pre150;
								} else {
									$312 = $303;$313 = $302;
								}
								$311 = (($313) - ($312))|0;
								$314 = $311 >> 2;
								$315 = ($314*90)|0;
								$316 = (($315) + -90)|0;
								$317 = (($316|0) / 100)&-1;
								$318 = (__ZN7Profile3maxEii($140,$308,$317)|0);
								$319 = HEAP32[$287>>2]|0;
								$320 = ($319|0)<(0);
								if ($320) {
									__ZN7Profile10initializeEv($286);
									$$pre152 = HEAP32[$287>>2]|0;
									$328 = $$pre152;
								} else {
									$328 = $319;
								}
								$321 = HEAP32[$291>>2]|0;
								$322 = HEAP32[$290>>2]|0;
								$323 = (($321) - ($322))|0;
								$324 = $323 >> 2;
								$325 = ($324*70)|0;
								$326 = (($325) + -70)|0;
								$327 = (($326|0) / 100)&-1;
								$329 = ($328|0)<(0);
								if ($329) {
									__ZN7Profile10initializeEv($286);
									$$pre153 = HEAP32[$291>>2]|0;
									$$pre154 = HEAP32[$290>>2]|0;
									$331 = $$pre154;$332 = $$pre153;
								} else {
									$331 = $322;$332 = $321;
								}
								$330 = (($332) - ($331))|0;
								$333 = $330 >> 2;
								$334 = ($333*90)|0;
								$335 = (($334) + -90)|0;
								$336 = (($335|0) / 100)&-1;
								$337 = (__ZN7Profile3maxEii($286,$327,$336)|0);
								$338 = HEAP32[$141>>2]|0;
								$339 = ($338|0)<(0);
								if ($339) {
									__ZN7Profile10initializeEv($140);
									$$pre$i65 = HEAP32[$141>>2]|0;
									$344 = (($$pre$i65) - ($299))|0;
									$345 = $344 << 1;
									$346 = (($345) + ($153))|0;
									$347 = (($346|0) / 3)&-1;
									$348 = ($$pre$i65|0)<(0);
									if ($348) {
										__ZN7Profile10initializeEv($140);
										$$pre$i66 = HEAP32[$141>>2]|0;
										$351 = $$pre$i66;$460 = $347;
									} else {
										$351 = $$pre$i65;$460 = $347;
									}
								} else {
									$340 = (($338) - ($299))|0;
									$341 = $340 << 1;
									$342 = (($341) + ($153))|0;
									$343 = (($342|0) / 3)&-1;
									$351 = $338;$460 = $343;
								}
								$349 = (($318) - ($337))|0;
								$350 = (($349) + ($351))|0;
								$352 = (($350|0) / 2)&-1;
								$353 = (__ZN7Profile5ispitEv($49)|0);
								$brmerge$demorgan = $354 & $353;
								do {
									if ($brmerge$demorgan) {
										$355 = HEAP32[$this>>2]|0;
										$356 = ((($355)) + 4|0);
										$357 = HEAP32[$356>>2]|0;
										$358 = ((($355)) + 12|0);
										$359 = HEAP32[$358>>2]|0;
										$360 = ($357|0)<($359|0);
										$361 = ((($this)) + 32|0);
										$362 = ((($this)) + 36|0);
										L101: do {
											if ($360) {
												$$pre155 = HEAP32[$361>>2]|0;
												$1053 = $355;$364 = $$pre155;$row2$0140 = $357;
												while(1) {
													$363 = HEAP32[$362>>2]|0;
													$365 = ($364|0)==($363|0);
													if ($365) {
														__ZNK8Features13row_scan_initEv($this);
														$$pre$i70 = HEAP32[$361>>2]|0;
														$$pre156 = HEAP32[$this>>2]|0;
														$367 = $$pre156;$371 = $$pre$i70;
													} else {
														$367 = $1053;$371 = $364;
													}
													$366 = ((($367)) + 4|0);
													$368 = HEAP32[$366>>2]|0;
													$369 = (($row2$0140) - ($368))|0;
													$370 = (($371) + (($369*12)|0)|0);
													$372 = (((($371) + (($369*12)|0)|0)) + 4|0);
													$373 = HEAP32[$372>>2]|0;
													$374 = HEAP32[$370>>2]|0;
													$375 = (($373) - ($374))|0;
													$376 = ($375|0)==(16);
													if ($376) {
														$1052 = $367;$row2$0$lcssa = $row2$0140;
														break L101;
													}
													$377 = (($row2$0140) + 1)|0;
													$378 = ((($367)) + 12|0);
													$379 = HEAP32[$378>>2]|0;
													$380 = ($377|0)<($379|0);
													if ($380) {
														$1053 = $367;$364 = $371;$row2$0140 = $377;
													} else {
														$1052 = $367;$row2$0$lcssa = $377;
														break;
													}
												}
											} else {
												$1052 = $355;$row2$0$lcssa = $357;
											}
										} while(0);
										$382 = $1052;$row1$0$in = $row2$0$lcssa;
										while(1) {
											$row1$0 = (($row1$0$in) + 1)|0;
											$381 = ((($382)) + 12|0);
											$383 = HEAP32[$381>>2]|0;
											$384 = ($row1$0|0)<($383|0);
											if (!($384)) {
												$400 = $383;$402 = $382;$row1$0224 = $row1$0;
												break;
											}
											$385 = HEAP32[$361>>2]|0;
											$386 = HEAP32[$362>>2]|0;
											$387 = ($385|0)==($386|0);
											if ($387) {
												__ZNK8Features13row_scan_initEv($this);
												$$pre$i68 = HEAP32[$361>>2]|0;
												$$pre157 = HEAP32[$this>>2]|0;
												$389 = $$pre157;$393 = $$pre$i68;
											} else {
												$389 = $382;$393 = $385;
											}
											$388 = ((($389)) + 4|0);
											$390 = HEAP32[$388>>2]|0;
											$391 = (($row1$0) - ($390))|0;
											$392 = (($393) + (($391*12)|0)|0);
											$394 = (((($393) + (($391*12)|0)|0)) + 4|0);
											$395 = HEAP32[$394>>2]|0;
											$396 = HEAP32[$392>>2]|0;
											$397 = (($395) - ($396))|0;
											$398 = ($397|0)==(8);
											if ($398) {
												$$lcssa227 = $389;$row1$0$lcssa223 = $row1$0;
												label = 77;
												break;
											} else {
												$382 = $389;$row1$0$in = $row1$0;
											}
										}
										if ((label|0) == 77) {
											$$phi$trans$insert158 = ((($$lcssa227)) + 12|0);
											$$pre159 = HEAP32[$$phi$trans$insert158>>2]|0;
											$400 = $$pre159;$402 = $$lcssa227;$row1$0224 = $row1$0$lcssa223;
										}
										$399 = ($row1$0224|0)<($400|0);
										if ($399) {
											$401 = ((($402)) + 4|0);
											$403 = HEAP32[$401>>2]|0;
											$404 = (($row1$0224) - ($403))|0;
											$405 = (__ZN7ProfileixEi($93,$404)|0);
											$406 = (($405|0) / 4)&-1;
											$407 = (($406) + ($row1$0224))|0;
											$$pre160 = HEAP32[$this>>2]|0;
											$$phi$trans$insert161 = ((($$pre160)) + 12|0);
											$$pre162 = HEAP32[$$phi$trans$insert161>>2]|0;
											$409 = $$pre162;$411 = $$pre160;$row1$1 = $407;
										} else {
											$409 = $400;$411 = $402;$row1$1 = $row1$0224;
										}
										$408 = ($row1$1|0)<($409|0);
										if (!($408)) {
											break;
										}
										$410 = ((($411)) + 4|0);
										$412 = HEAP32[$410>>2]|0;
										$413 = (($row1$1) - ($412))|0;
										$414 = (__ZN7ProfileixEi($93,$413)|0);
										$415 = HEAP32[$this>>2]|0;
										$416 = ((($415)) + 8|0);
										$417 = HEAP32[$416>>2]|0;
										$418 = HEAP32[$415>>2]|0;
										$419 = (($417) + 1)|0;
										$420 = (($419) - ($418))|0;
										$421 = ($414|0)<($420|0);
										if (!($421)) {
											break;
										}
										$422 = ((($415)) + 4|0);
										$423 = HEAP32[$422>>2]|0;
										$424 = (($row1$1) - ($423))|0;
										$425 = (__ZN7ProfileixEi($93,$424)|0);
										$426 = (($row1$1) - ($row2$0$lcssa))|0;
										$427 = Math_imul($425, $426)|0;
										$428 = HEAP32[$this>>2]|0;
										$429 = ((($428)) + 8|0);
										$430 = HEAP32[$429>>2]|0;
										$431 = HEAP32[$428>>2]|0;
										$432 = (1 - ($425))|0;
										$433 = (($432) + ($430))|0;
										$434 = (($433) - ($431))|0;
										$435 = (($427|0) / ($434|0))&-1;
										$436 = (($435) + ($row1$1))|0;
										$437 = ((($428)) + 12|0);
										$438 = HEAP32[$437>>2]|0;
										$439 = ($436|0)<($438|0);
										if (!($439)) {
											break;
										}
										$440 = HEAP32[$94>>2]|0;
										$441 = ($440|0)<(0);
										if ($441) {
											__ZN7Profile10initializeEv($93);
										}
										$442 = HEAP32[$98>>2]|0;
										$443 = HEAP32[$97>>2]|0;
										$444 = (($442) - ($443))|0;
										$445 = $444 >> 2;
										$446 = ($445*70)|0;
										$447 = (($446) + -70)|0;
										$448 = (($447|0) / 100)&-1;
										$449 = (__ZN7ProfileixEi($93,$448)|0);
										$450 = $449 << 1;
										$451 = HEAP32[$this>>2]|0;
										$452 = ((($451)) + 8|0);
										$453 = HEAP32[$452>>2]|0;
										$454 = HEAP32[$451>>2]|0;
										$455 = (($453) + 1)|0;
										$456 = (($455) - ($454))|0;
										$457 = ($450|0)<($456|0);
										if (!($457)) {
											break;
										}
										$458 = (__ZN5Ocrad7similarEiiii($153,$299,20,1)|0);
										if ($458) {
											$$4 = 89;
											break L77;
										}
										$459 = ($153|0)<($299|0);
										$or$cond19 = $154 & $459;
										$or$cond19$not = $or$cond19 ^ 1;
										$461 = ($460|0)<($352|0);
										$or$cond20 = $461 | $or$cond19$not;
										if ($or$cond20) {
											break;
										}
										$462 = (__ZN7Profile10increasingEii($286,1,2)|0);
										if (!($462)) {
											$$4 = 89;
											break L77;
										}
									}
								} while(0);
								$463 = HEAP32[$this>>2]|0;
								$464 = ((($463)) + 4|0);
								$465 = HEAP32[$464>>2]|0;
								$466 = ((($463)) + 12|0);
								$467 = HEAP32[$466>>2]|0;
								$468 = (($467) - ($465))|0;
								$469 = ($468*60)|0;
								$470 = (($469|0) / 100)&-1;
								$471 = (($470) + ($465))|0;
								$472 = HEAP32[$463>>2]|0;
								$473 = ((($463)) + 8|0);
								$474 = HEAP32[$473>>2]|0;
								$475 = (($474) + ($472))|0;
								$476 = (($475|0) / 2)&-1;
								$477 = (__ZNK6Bitmap10escape_topEii($463,$471,$476)|0);
								do {
									if ($477) {
										$478 = (__ZN7Profile5istipEv($140)|0);
										if ($478) {
											break;
										}
										$479 = HEAP32[$this>>2]|0;
										$480 = ((($479)) + 12|0);
										$481 = HEAP32[$480>>2]|0;
										$482 = ((($479)) + 4|0);
										$483 = HEAP32[$482>>2]|0;
										$484 = (($481) + 1)|0;
										$485 = (($484) - ($483))|0;
										$486 = $485 << 2;
										$487 = ((($479)) + 8|0);
										$488 = HEAP32[$487>>2]|0;
										$489 = HEAP32[$479>>2]|0;
										$490 = (($488) + 1)|0;
										$491 = (($490) - ($489))|0;
										$492 = ($491*3)|0;
										$493 = ($486|0)<($492|0);
										if (!($493)) {
											$$4 = 117;
											break L77;
										}
										$494 = (($488) - ($489))|0;
										$495 = ($494*75)|0;
										$496 = (($495|0) / 100)&-1;
										$497 = (($496) + ($489))|0;
										$498 = ((($this)) + 44|0);
										$499 = HEAP32[$498>>2]|0;
										$500 = ((($this)) + 48|0);
										$501 = HEAP32[$500>>2]|0;
										$502 = ($499|0)==($501|0);
										if ($502) {
											__ZNK8Features13col_scan_initEv($this);
											$$pre$i58 = HEAP32[$498>>2]|0;
											$$pre163 = HEAP32[$this>>2]|0;
											$$pre165 = HEAP32[$$pre163>>2]|0;
											$504 = $$pre165;$506 = $$pre$i58;
										} else {
											$504 = $489;$506 = $499;
										}
										$503 = (($497) - ($504))|0;
										$505 = (($506) + (($503*12)|0)|0);
										$507 = (((($506) + (($503*12)|0)|0)) + 4|0);
										$508 = HEAP32[$507>>2]|0;
										$509 = HEAP32[$505>>2]|0;
										$510 = (($508) - ($509))|0;
										$511 = ($510|0)<(24);
										if ($511) {
											$$4 = 117;
											break L77;
										}
									}
								} while(0);
								$512 = ($153|0)>($299|0);
								do {
									if (!($512)) {
										$513 = HEAP32[$141>>2]|0;
										$514 = ($513|0)<(0);
										if ($514) {
											__ZN7Profile10initializeEv($140);
										}
										$515 = HEAP32[$145>>2]|0;
										$516 = HEAP32[$144>>2]|0;
										$517 = (($515) - ($516))|0;
										$518 = $517 >> 2;
										$519 = ($518*50)|0;
										$520 = (($519) + -50)|0;
										$521 = (($520|0) / 100)&-1;
										$522 = (__ZN7Profile10increasingEii($140,$521,2)|0);
										if ($522) {
											break;
										}
										$523 = $153 << 1;
										$524 = ($523|0)<($299|0);
										$$pre167 = HEAP32[$this>>2]|0;
										if ($524) {
											$$phi$trans$insert168 = ((($$pre167)) + 12|0);
											$$pre169 = HEAP32[$$phi$trans$insert168>>2]|0;
											$$phi$trans$insert170 = ((($$pre167)) + 4|0);
											$$pre171 = HEAP32[$$phi$trans$insert170>>2]|0;
											$537 = $$pre169;$539 = $$pre171;
										} else {
											$525 = ((($$pre167)) + 4|0);
											$526 = HEAP32[$525>>2]|0;
											$527 = ((($$pre167)) + 12|0);
											$528 = HEAP32[$527>>2]|0;
											$529 = (($528) - ($526))|0;
											$530 = ($529*90)|0;
											$531 = (($530|0) / 100)&-1;
											$532 = (($531) + ($526))|0;
											$533 = ((($charbox)) + 12|0);
											$534 = HEAP32[$533>>2]|0;
											$535 = ($532|0)<($534|0);
											if ($535) {
												break;
											} else {
												$537 = $528;$539 = $526;
											}
										}
										$536 = (($537) + 1)|0;
										$538 = (($536) - ($539))|0;
										$540 = (($538|0) / 2)&-1;
										$541 = (__ZN7Profile6minimaEi($1,$540)|0);
										$542 = ($541|0)==(1);
										if ($542) {
											$$4 = 121;
											break L77;
										}
										$543 = (__ZN7Profile8imaximumEv($140)|0);
										$544 = HEAP32[$this>>2]|0;
										$545 = ((($544)) + 12|0);
										$546 = HEAP32[$545>>2]|0;
										$547 = ((($544)) + 4|0);
										$548 = HEAP32[$547>>2]|0;
										$549 = (($546) + 1)|0;
										$550 = (($549) - ($548))|0;
										$551 = (($550|0) / 2)&-1;
										$552 = ($543|0)>($551|0);
										if ($552) {
											$$4 = 121;
											break L77;
										}
									}
								} while(0);
								do {
									if ($154) {
										$553 = (__ZN7Profile5ispitEv($49)|0);
										if (!($553)) {
											break;
										}
										$554 = HEAP32[$this>>2]|0;
										$555 = ((($554)) + 12|0);
										$556 = HEAP32[$555>>2]|0;
										$557 = ((($554)) + 4|0);
										$558 = HEAP32[$557>>2]|0;
										$559 = (($556) + 1)|0;
										$560 = (($559) - ($558))|0;
										$561 = (($560|0) / 3)&-1;
										$562 = (__ZN7Profile6minimaEi($1,$561)|0);
										$563 = ($562|0)==(2);
										if ($563) {
											$$4 = 118;
											break L77;
										}
									} else {
										$564 = HEAP32[$this>>2]|0;
										$565 = ((($564)) + 8|0);
										$566 = HEAP32[$565>>2]|0;
										$567 = HEAP32[$564>>2]|0;
										$568 = (($566) + 1)|0;
										$569 = (($568) - ($567))|0;
										$sum = (($299) + ($153))|0;
										$570 = (($569) - ($sum))|0;
										$571 = $570 << 1;
										$572 = ($571|0)<($569|0);
										if (!($572)) {
											break;
										}
										$573 = (__ZN7Profile10increasingEii($286,1,2)|0);
										if (!($573)) {
											break;
										}
										$574 = HEAP32[$this>>2]|0;
										$575 = ((($574)) + 12|0);
										$576 = HEAP32[$575>>2]|0;
										$577 = ((($574)) + 4|0);
										$578 = HEAP32[$577>>2]|0;
										$579 = (($576) + 1)|0;
										$580 = (($579) - ($578))|0;
										$581 = (($580|0) / 2)&-1;
										$582 = (__ZN7Profile6minimaEi($1,$581)|0);
										$583 = ($582|0)==(2);
										if ($583) {
											$$4 = 118;
											break L77;
										}
									}
								} while(0);
								$$4 = 0;
							}
						} while(0);
						$$11$ph = $$4;
					} else {
						$585 = $54;$587 = $56;$590 = $61;$592 = $62;
						label = 112;
					}
				} while(0);
				L160: do {
					if ((label|0) == 112) {
						$584 = (($585) + 1)|0;
						$586 = (($584) - ($587))|0;
						$588 = $586 << 1;
						$589 = (($590) + 1)|0;
						$591 = (($589) - ($592))|0;
						$593 = ($588|0)>=($591|0);
						$594 = ($586|0)>(8);
						$or$cond83 = $594 & $593;
						if ($or$cond83) {
							$595 = (__ZN7Profile6minimaEi($49,-1)|0);
							$596 = ($595|0)==(2);
							if ($596) {
								$597 = (__ZN7Profile6isctipEi($49,50)|0);
								if ($597) {
									$598 = HEAP32[$this>>2]|0;
									$599 = ((($598)) + 12|0);
									$600 = HEAP32[$599>>2]|0;
									$601 = ((($598)) + 4|0);
									$602 = HEAP32[$601>>2]|0;
									$603 = (($600) + 1)|0;
									$604 = (($603) - ($602))|0;
									$605 = (($604|0) / 4)&-1;
									$606 = ((($this)) + 208|0);
									$607 = HEAP32[$606>>2]|0;
									$608 = ($607|0)<(0);
									if ($608) {
										__ZN7Profile10initializeEv($49);
									}
									$609 = ((($this)) + 236|0);
									$610 = ((($this)) + 240|0);
									$611 = HEAP32[$610>>2]|0;
									$612 = HEAP32[$609>>2]|0;
									$613 = (($611) - ($612))|0;
									$614 = $613 >> 2;
									$615 = ($614*50)|0;
									$616 = (($615) + -50)|0;
									$617 = (($616|0) / 100)&-1;
									$618 = (__ZN7ProfileixEi($49,$617)|0);
									$619 = (($48) + ($618))|0;
									$620 = ($605|0)<($619|0);
									$621 = $620 ? $619 : $605;
									$622 = (__ZN7Profile6minimaEi($49,$621)|0);
									$623 = ($622|0)==(3);
									if ($623) {
										$$11$ph = 77;
										break;
									}
									$624 = ((($this)) + 56|0);
									$625 = ((($this)) + 64|0);
									$626 = HEAP32[$625>>2]|0;
									$627 = ($626|0)<(0);
									if ($627) {
										__ZN7Profile10initializeEv($624);
									}
									$628 = ((($this)) + 92|0);
									$629 = ((($this)) + 96|0);
									$630 = HEAP32[$629>>2]|0;
									$631 = HEAP32[$628>>2]|0;
									$632 = (($630) - ($631))|0;
									$633 = $632 >> 2;
									$634 = ($633*50)|0;
									$635 = (($634) + -50)|0;
									$636 = (($635|0) / 100)&-1;
									$637 = (__ZN7ProfileixEi($624,$636)|0);
									$638 = ((($this)) + 152|0);
									$639 = ((($this)) + 160|0);
									$640 = HEAP32[$639>>2]|0;
									$641 = ($640|0)<(0);
									if ($641) {
										__ZN7Profile10initializeEv($638);
									}
									$642 = ((($this)) + 188|0);
									$643 = ((($this)) + 192|0);
									$644 = HEAP32[$643>>2]|0;
									$645 = HEAP32[$642>>2]|0;
									$646 = (($644) - ($645))|0;
									$647 = $646 >> 2;
									$648 = ($647*50)|0;
									$649 = (($648) + -50)|0;
									$650 = (($649|0) / 100)&-1;
									$651 = (__ZN7ProfileixEi($638,$650)|0);
									$652 = (__ZN5Ocrad7similarEiiii($637,$651,80,2)|0);
									if ($652) {
										$653 = $637 << 2;
										$654 = HEAP32[$this>>2]|0;
										$655 = ((($654)) + 8|0);
										$656 = HEAP32[$655>>2]|0;
										$657 = HEAP32[$654>>2]|0;
										$658 = (($656) + 1)|0;
										$659 = (($658) - ($657))|0;
										$660 = ($653|0)<($659|0);
										$661 = $651 << 2;
										$662 = ($661|0)<($659|0);
										$or$cond85 = $660 & $662;
										if ($or$cond85) {
											$663 = ($637|0)>(1);
											$664 = ($651|0)>(1);
											$or$cond = $663 & $664;
											do {
												if ($or$cond) {
													$665 = (__ZN7Profile10increasingEii($624,1,2)|0);
													if ($665) {
														$666 = (__ZN7Profile10increasingEii($638,1,2)|0);
														if (!($666)) {
															break;
														}
														$667 = ((($this)) + 112|0);
														$668 = HEAP32[$667>>2]|0;
														$669 = ($668|0)<(0);
														if ($669) {
															__ZN7Profile10initializeEv($1);
														}
														$670 = ((($this)) + 140|0);
														$671 = ((($this)) + 144|0);
														$672 = HEAP32[$671>>2]|0;
														$673 = HEAP32[$670>>2]|0;
														$674 = (($672) - ($673))|0;
														$675 = $674 >> 2;
														$676 = ($675*50)|0;
														$677 = (($676) + -50)|0;
														$678 = (($677|0) / 100)&-1;
														$679 = (__ZN7ProfileixEi($1,$678)|0);
														$680 = ($679*5)|0;
														$681 = HEAP32[$this>>2]|0;
														$682 = ((($681)) + 12|0);
														$683 = HEAP32[$682>>2]|0;
														$684 = ((($681)) + 4|0);
														$685 = HEAP32[$684>>2]|0;
														$686 = (($683) + 1)|0;
														$687 = (($686) - ($685))|0;
														$688 = ($680|0)>($687|0);
														if ($688) {
															$$11$ph = 119;
															break L160;
														}
													}
												}
											} while(0);
											$689 = (__ZNK8Features5hbarsEv($this)|0);
											$690 = ($689|0)==(1);
											do {
												if ($690) {
													$691 = ((($this)) + 8|0);
													$692 = HEAP32[$691>>2]|0;
													$693 = ((($692)) + 12|0);
													$694 = HEAP32[$693>>2]|0;
													$695 = ((($692)) + 4|0);
													$696 = HEAP32[$695>>2]|0;
													$697 = (($694) + 1)|0;
													$698 = (($697) - ($696))|0;
													$699 = ($698*5)|0;
													$700 = (($699) + -5)|0;
													$701 = HEAP32[$this>>2]|0;
													$702 = ((($701)) + 12|0);
													$703 = HEAP32[$702>>2]|0;
													$704 = ((($701)) + 4|0);
													$705 = HEAP32[$704>>2]|0;
													$706 = (($703) + 1)|0;
													$707 = (($706) - ($705))|0;
													$708 = ($700|0)<($707|0);
													if (!($708)) {
														break;
													}
													$709 = (($703) - ($705))|0;
													$710 = ($709*30)|0;
													$711 = (($710|0) / 100)&-1;
													$712 = (($711) + ($705))|0;
													$713 = ($696|0)<($712|0);
													if ($713) {
														break;
													}
													$714 = ($709*60)|0;
													$715 = (($714|0) / 100)&-1;
													$716 = (($715) + ($705))|0;
													$717 = ($694|0)>($716|0);
													if ($717) {
														break;
													}
													$718 = ((($692)) + 8|0);
													$719 = HEAP32[$718>>2]|0;
													$720 = HEAP32[$692>>2]|0;
													$721 = (($719) + 1)|0;
													$722 = (($721) - ($720))|0;
													$723 = ($722*10)|0;
													$724 = ((($this)) + 296|0);
													$725 = (($696) + ($694))|0;
													$726 = (($725|0) / 2)&-1;
													$727 = (($726) - ($705))|0;
													$728 = (__ZN7ProfileixEi($724,$727)|0);
													$729 = ($728*9)|0;
													$730 = ($723|0)>($729|0);
													if (!($730)) {
														break;
													}
													$731 = HEAP32[$691>>2]|0;
													$732 = ((($731)) + 4|0);
													$733 = HEAP32[$732>>2]|0;
													$734 = ((($731)) + 12|0);
													$735 = HEAP32[$734>>2]|0;
													$736 = (($735) + ($733))|0;
													$737 = (($736|0) / 2)&-1;
													$738 = HEAP32[$731>>2]|0;
													$739 = ((($731)) + 8|0);
													$740 = HEAP32[$739>>2]|0;
													$741 = (($740) + ($738))|0;
													$742 = (($741|0) / 2)&-1;
													__ZNK8Features9v_segmentEii($0,$this,$737,$742);
													$743 = HEAP32[$0>>2]|0;
													$744 = ((($0)) + 4|0);
													$745 = HEAP32[$744>>2]|0;
													$746 = ($745|0)<($743|0);
													$747 = (1 - ($743))|0;
													$748 = (($747) + ($745))|0;
													$749 = $746 ? 0 : $748;
													$750 = HEAP32[$691>>2]|0;
													$751 = ((($750)) + 12|0);
													$752 = HEAP32[$751>>2]|0;
													$753 = ((($750)) + 4|0);
													$754 = HEAP32[$753>>2]|0;
													$755 = (($752) + 1)|0;
													$756 = (($755) - ($754))|0;
													$757 = (__ZN5Ocrad7similarEiiii($749,$756,30,2)|0);
													if (!($757)) {
														break;
													}
													$758 = HEAP32[$691>>2]|0;
													$759 = ((($758)) + 8|0);
													$760 = HEAP32[$759>>2]|0;
													$761 = HEAP32[$758>>2]|0;
													$762 = (($760) + 1)|0;
													$763 = (($762) - ($761))|0;
													$764 = ($763*9)|0;
													$765 = ((($this)) + 304|0);
													$766 = HEAP32[$765>>2]|0;
													$767 = ($766|0)<(0);
													if ($767) {
														__ZN7Profile10initializeEv($724);
													}
													$768 = ((($this)) + 332|0);
													$769 = ((($this)) + 336|0);
													$770 = HEAP32[$769>>2]|0;
													$771 = HEAP32[$768>>2]|0;
													$772 = (($770) - ($771))|0;
													$773 = $772 >> 2;
													$774 = ($773*50)|0;
													$775 = (($774) + -50)|0;
													$776 = (($775|0) / 100)&-1;
													$777 = (__ZN7ProfileixEi($724,$776)|0);
													$778 = ($777*10)|0;
													$779 = ($764|0)>($778|0);
													$$21 = $779 ? 0 : 72;
													$$11$ph = $$21;
													break L160;
												}
											} while(0);
											$780 = HEAP32[$this>>2]|0;
											$781 = ((($780)) + 4|0);
											$782 = HEAP32[$781>>2]|0;
											$783 = ((($780)) + 12|0);
											$784 = HEAP32[$783>>2]|0;
											$785 = (($784) - ($782))|0;
											$786 = ($785*60)|0;
											$787 = (($786|0) / 100)&-1;
											$788 = (($787) + ($782))|0;
											$789 = ((($this)) + 32|0);
											$790 = HEAP32[$789>>2]|0;
											$791 = ((($this)) + 36|0);
											$792 = HEAP32[$791>>2]|0;
											$793 = ($790|0)==($792|0);
											if ($793) {
												__ZNK8Features13row_scan_initEv($this);
												$$pre$i38 = HEAP32[$789>>2]|0;
												$$pre181 = HEAP32[$this>>2]|0;
												$$phi$trans$insert182 = ((($$pre181)) + 4|0);
												$$pre183 = HEAP32[$$phi$trans$insert182>>2]|0;
												$795 = $$pre183;$797 = $$pre$i38;$804 = $$pre181;
											} else {
												$795 = $782;$797 = $790;$804 = $780;
											}
											$794 = (($788) - ($795))|0;
											$796 = (($797) + (($794*12)|0)|0);
											$798 = (((($797) + (($794*12)|0)|0)) + 4|0);
											$799 = HEAP32[$798>>2]|0;
											$800 = HEAP32[$796>>2]|0;
											$801 = (($799) - ($800))|0;
											$802 = ($801|0)==(32);
											do {
												if (!($802)) {
													$803 = ((($804)) + 12|0);
													$805 = HEAP32[$803>>2]|0;
													$806 = (($805) - ($795))|0;
													$807 = ($806*70)|0;
													$808 = (($807|0) / 100)&-1;
													$809 = (($808) + ($795))|0;
													$810 = HEAP32[$791>>2]|0;
													$811 = ($797|0)==($810|0);
													if ($811) {
														__ZNK8Features13row_scan_initEv($this);
														$$pre$i = HEAP32[$789>>2]|0;
														$$pre184 = HEAP32[$this>>2]|0;
														$$phi$trans$insert185 = ((($$pre184)) + 4|0);
														$$pre186 = HEAP32[$$phi$trans$insert185>>2]|0;
														$813 = $$pre186;$815 = $$pre$i;
													} else {
														$813 = $795;$815 = $797;
													}
													$812 = (($809) - ($813))|0;
													$814 = (($815) + (($812*12)|0)|0);
													$816 = (((($815) + (($812*12)|0)|0)) + 4|0);
													$817 = HEAP32[$816>>2]|0;
													$818 = HEAP32[$814>>2]|0;
													$819 = (($817) - ($818))|0;
													$820 = ($819|0)==(32);
													if ($820) {
														break;
													}
													$843 = (__ZNK8Features5vbarsEv($this)|0);
													$844 = ($843|0)<(3);
													if ($844) {
														$$pre188 = HEAP32[$this>>2]|0;
														$$phi$trans$insert189 = ((($$pre188)) + 12|0);
														$$pre190 = HEAP32[$$phi$trans$insert189>>2]|0;
														$$phi$trans$insert191 = ((($$pre188)) + 4|0);
														$$pre192 = HEAP32[$$phi$trans$insert191>>2]|0;
														$861 = $$pre190;$863 = $$pre192;
													} else {
														$845 = (__ZNK8Features5vbarsEv($this)|0);
														$846 = ($845|0)==(3);
														if (!($846)) {
															$$11$ph = 0;
															break L160;
														}
														$847 = HEAP32[$this>>2]|0;
														$848 = ((($847)) + 12|0);
														$849 = HEAP32[$848>>2]|0;
														$850 = ((($847)) + 4|0);
														$851 = HEAP32[$850>>2]|0;
														$852 = (($849) + 1)|0;
														$853 = (($852) - ($851))|0;
														$854 = ((($847)) + 8|0);
														$855 = HEAP32[$854>>2]|0;
														$856 = HEAP32[$847>>2]|0;
														$857 = (($855) + 1)|0;
														$858 = (($857) - ($856))|0;
														$859 = ($853|0)<($858|0);
														if ($859) {
															$$11$ph = 0;
															break L160;
														} else {
															$861 = $849;$863 = $851;
														}
													}
													$860 = (($861) + 1)|0;
													$862 = (($860) - ($863))|0;
													$864 = (($862|0) / 2)&-1;
													$865 = (__ZN7Profile6minimaEi($1,$864)|0);
													$866 = ($865|0)<(3);
													if (!($866)) {
														$$11$ph = 0;
														break L160;
													}
													$867 = HEAP32[$this>>2]|0;
													$868 = ((($867)) + 12|0);
													$869 = HEAP32[$868>>2]|0;
													$870 = ((($867)) + 4|0);
													$871 = HEAP32[$870>>2]|0;
													$872 = (($869) + 1)|0;
													$873 = (($872) - ($871))|0;
													$874 = $873 << 1;
													$875 = (($874|0) / 5)&-1;
													$876 = (__ZN7Profile6minimaEi($1,$875)|0);
													$877 = ($876|0)<(3);
													if (!($877)) {
														$$11$ph = 0;
														break L160;
													}
													$878 = (__ZN7Profile6istpitEv($624)|0);
													if ($878) {
														$$11$ph = 0;
														break L160;
													}
													$879 = HEAP32[$639>>2]|0;
													$880 = ($879|0)<(0);
													if ($880) {
														__ZN7Profile10initializeEv($638);
													}
													$881 = HEAP32[$643>>2]|0;
													$882 = HEAP32[$642>>2]|0;
													$883 = (($881) - ($882))|0;
													$884 = $883 >> 2;
													$885 = ($884*20)|0;
													$886 = (($885) + -20)|0;
													$887 = (($886|0) / 100)&-1;
													$888 = (__ZN7ProfileixEi($638,$887)|0);
													$889 = HEAP32[$639>>2]|0;
													$890 = ($889|0)<(0);
													if ($890) {
														__ZN7Profile10initializeEv($638);
													}
													$891 = HEAP32[$643>>2]|0;
													$892 = HEAP32[$642>>2]|0;
													$893 = (($891) - ($892))|0;
													$894 = $893 >> 2;
													$895 = ($894*80)|0;
													$896 = (($895) + -80)|0;
													$897 = (($896|0) / 100)&-1;
													$898 = (__ZN7ProfileixEi($638,$897)|0);
													$899 = (($888) - ($898))|0;
													$ispos = ($899|0)>(-1);
													$neg = (0 - ($899))|0;
													$900 = $ispos ? $899 : $neg;
													$901 = $900 << 2;
													$902 = HEAP32[$this>>2]|0;
													$903 = ((($902)) + 8|0);
													$904 = HEAP32[$903>>2]|0;
													$905 = HEAP32[$902>>2]|0;
													$906 = (($904) + 1)|0;
													$907 = (($906) - ($905))|0;
													$908 = ($901|0)>($907|0);
													if ($908) {
														$$11$ph = 0;
														break L160;
													}
													$909 = ((($902)) + 4|0);
													$910 = HEAP32[$909>>2]|0;
													$911 = ((($this)) + 112|0);
													$912 = HEAP32[$911>>2]|0;
													$913 = ($912|0)<(0);
													if ($913) {
														__ZN7Profile10initializeEv($1);
													}
													$914 = ((($this)) + 140|0);
													$915 = ((($this)) + 144|0);
													$916 = HEAP32[$915>>2]|0;
													$917 = HEAP32[$914>>2]|0;
													$918 = (($916) - ($917))|0;
													$919 = $918 >> 2;
													$920 = ($919*50)|0;
													$921 = (($920) + -50)|0;
													$922 = (($921|0) / 100)&-1;
													$923 = (__ZN7ProfileixEi($1,$922)|0);
													$924 = (($923) + ($910))|0;
													$925 = HEAP32[$this>>2]|0;
													$926 = ((($925)) + 4|0);
													$927 = HEAP32[$926>>2]|0;
													$928 = ((($925)) + 12|0);
													$929 = HEAP32[$928>>2]|0;
													$930 = (($929) + ($927))|0;
													$931 = (($930|0) / 2)&-1;
													$932 = ($924|0)>($931|0);
													do {
														if ($932) {
															$933 = HEAP32[$925>>2]|0;
															$934 = ((($925)) + 8|0);
															$935 = HEAP32[$934>>2]|0;
															$936 = (($935) + ($933))|0;
															$937 = (($936|0) / 2)&-1;
															__ZN9RectangleC2Eiiii($r,$933,$927,$937,$929);
															$938 = HEAP32[$this>>2]|0;
															__ZN6BitmapC2ERKS_RK9Rectangle($bm,$938,$r);
															__THREW__ = 0;
															$939 = (invoke_iii(153,($bm|0),($hdiff5|0))|0);
															$940 = __THREW__; __THREW__ = 0;
															$941 = $940&1;
															if ($941) {
																$951 = ___cxa_find_matching_catch_2()|0;
																$952 = tempRet0;
																$953 = ((($bm)) + 16|0);
																$954 = HEAP32[$953>>2]|0;
																$955 = ($954|0)==(0|0);
																if ($955) {
																	___resumeException($951|0);
																	// unreachable;
																}
																$956 = ((($bm)) + 20|0);
																$957 = HEAP32[$956>>2]|0;
																$958 = ($957|0)==($954|0);
																if ($958) {
																	$968 = $954;
																} else {
																	$960 = $957;
																	while(1) {
																		$959 = ((($960)) + -12|0);
																		HEAP32[$956>>2] = $959;
																		$961 = HEAP32[$959>>2]|0;
																		$962 = ($961|0)==(0|0);
																		if ($962) {
																			$963 = $959;
																		} else {
																			$965 = ((($960)) + -8|0);
																			$966 = HEAP32[$965>>2]|0;
																			$967 = ($966|0)==($961|0);
																			if (!($967)) {
																				HEAP32[$965>>2] = $961;
																			}
																			__ZdlPv($961);
																			$$pre$i$i$i$i28 = HEAP32[$956>>2]|0;
																			$963 = $$pre$i$i$i$i28;
																		}
																		$964 = ($963|0)==($954|0);
																		if ($964) {
																			break;
																		} else {
																			$960 = $963;
																		}
																	}
																	$$pre$i$i31 = HEAP32[$953>>2]|0;
																	$968 = $$pre$i$i31;
																}
																__ZdlPv($968);
																___resumeException($951|0);
																// unreachable;
															}
															if ($939) {
																$942 = HEAP32[$hdiff5>>2]|0;
																$943 = Math_imul($942, -2)|0;
																$944 = ((($bm)) + 12|0);
																$945 = HEAP32[$944>>2]|0;
																$946 = ((($bm)) + 4|0);
																$947 = HEAP32[$946>>2]|0;
																$948 = (($945) + 1)|0;
																$949 = (($948) - ($947))|0;
																$950 = ($943|0)>($949|0);
																if ($950) {
																	$$510 = 1;
																} else {
																	label = 175;
																}
															} else {
																label = 175;
															}
															if ((label|0) == 175) {
																$$510 = 0;
															}
															$969 = ((($bm)) + 16|0);
															$970 = HEAP32[$969>>2]|0;
															$971 = ($970|0)==(0|0);
															if (!($971)) {
																$972 = ((($bm)) + 20|0);
																$973 = HEAP32[$972>>2]|0;
																$974 = ($973|0)==($970|0);
																if ($974) {
																	$984 = $970;
																} else {
																	$976 = $973;
																	while(1) {
																		$975 = ((($976)) + -12|0);
																		HEAP32[$972>>2] = $975;
																		$977 = HEAP32[$975>>2]|0;
																		$978 = ($977|0)==(0|0);
																		if ($978) {
																			$979 = $975;
																		} else {
																			$981 = ((($976)) + -8|0);
																			$982 = HEAP32[$981>>2]|0;
																			$983 = ($982|0)==($977|0);
																			if (!($983)) {
																				HEAP32[$981>>2] = $977;
																			}
																			__ZdlPv($977);
																			$$pre$i$i$i$i = HEAP32[$972>>2]|0;
																			$979 = $$pre$i$i$i$i;
																		}
																		$980 = ($979|0)==($970|0);
																		if ($980) {
																			break;
																		} else {
																			$976 = $979;
																		}
																	}
																	$$pre$i$i = HEAP32[$969>>2]|0;
																	$984 = $$pre$i$i;
																}
																__ZdlPv($984);
															}
															$cond1 = ($$510|0)==(0);
															if (!($cond1)) {
																$$8$ph = 117;
																break;
															}
															$$pre193 = HEAP32[$this>>2]|0;
															$$phi$trans$insert194 = ((($$pre193)) + 4|0);
															$$pre195 = HEAP32[$$phi$trans$insert194>>2]|0;
															$$phi$trans$insert196 = ((($$pre193)) + 12|0);
															$$pre197 = HEAP32[$$phi$trans$insert196>>2]|0;
															$986 = $$pre195;$987 = $$pre197;
															label = 187;
														} else {
															$986 = $927;$987 = $929;
															label = 187;
														}
													} while(0);
													do {
														if ((label|0) == 187) {
															$985 = (($987) - ($986))|0;
															$988 = (($985|0) / 10)&-1;
															$989 = (($988) + ($986))|0;
															$990 = ($924|0)>($989|0);
															if ($990) {
																$$8$ph = 78;
																break;
															}
															$991 = (__ZNK8Features5vbarsEv($this)|0);
															$992 = ($991|0)>(1);
															if ($992) {
																$$8$ph = 78;
															} else {
																$$11$ph = 0;
																break L160;
															}
														}
													} while(0);
													$$11$ph = $$8$ph;
													break L160;
												}
											} while(0);
											$821 = ((($this)) + 112|0);
											$822 = HEAP32[$821>>2]|0;
											$823 = ($822|0)<(0);
											if ($823) {
												__ZN7Profile10initializeEv($1);
											}
											$824 = ((($this)) + 140|0);
											$825 = ((($this)) + 144|0);
											$826 = HEAP32[$825>>2]|0;
											$827 = HEAP32[$824>>2]|0;
											$828 = (($826) - ($827))|0;
											$829 = $828 >> 2;
											$830 = ($829*50)|0;
											$831 = (($830) + -50)|0;
											$832 = (($831|0) / 100)&-1;
											$833 = (__ZN7ProfileixEi($1,$832)|0);
											$834 = $833 << 1;
											$835 = HEAP32[$this>>2]|0;
											$836 = ((($835)) + 12|0);
											$837 = HEAP32[$836>>2]|0;
											$838 = ((($835)) + 4|0);
											$839 = HEAP32[$838>>2]|0;
											$840 = (($837) + 1)|0;
											$841 = (($840) - ($839))|0;
											$842 = ($834|0)>($841|0);
											$$22 = $842 ? 77 : 119;
											$$11$ph = $$22;
											break;
										}
									}
									$993 = ($637*3)|0;
									$994 = $651 << 1;
									$995 = ($993|0)<($994|0);
									if ($995) {
										$996 = HEAP32[$this>>2]|0;
										$997 = ((($996)) + 8|0);
										$998 = HEAP32[$997>>2]|0;
										$999 = HEAP32[$996>>2]|0;
										$1000 = (($998) + 1)|0;
										$1001 = (($1000) - ($999))|0;
										$1002 = (($1001|0) / 4)&-1;
										$1003 = ($637|0)<($1002|0);
										$1004 = ($651|0)>($1002|0);
										$or$cond86 = $1003 & $1004;
										if ($or$cond86) {
											$1005 = (__ZN7Profile6isctipEi($638,50)|0);
											if ($1005) {
												$1006 = HEAP32[$this>>2]|0;
												$1007 = ((($1006)) + 12|0);
												$1008 = HEAP32[$1007>>2]|0;
												$1009 = ((($1006)) + 4|0);
												$1010 = HEAP32[$1009>>2]|0;
												$1011 = (($1008) + 1)|0;
												$1012 = (($1011) - ($1010))|0;
												$1013 = (($1012|0) / 8)&-1;
												$1014 = (__ZN7Profile6minimaEi($1,$1013)|0);
												$1015 = ($1014|0)==(2);
												if ($1015) {
													$$11$ph = 75;
													break;
												}
											}
										}
									}
									$$11$ph = 0;
									break;
								}
							}
						}
						$1016 = (__ZN7Profile6minimaEi($49,-1)|0);
						$1017 = ($1016|0)<(3);
						if ($1017) {
							$1018 = HEAP32[$this>>2]|0;
							$1019 = ((($1018)) + 8|0);
							$1020 = HEAP32[$1019>>2]|0;
							$1021 = HEAP32[$1018>>2]|0;
							$1022 = (($1020) + 1)|0;
							$1023 = (($1022) - ($1021))|0;
							$1024 = $1023 << 1;
							$1025 = ((($1018)) + 12|0);
							$1026 = HEAP32[$1025>>2]|0;
							$1027 = ((($1018)) + 4|0);
							$1028 = HEAP32[$1027>>2]|0;
							$1029 = (($1026) + 1)|0;
							$1030 = (($1029) - ($1028))|0;
							$1031 = ($1030*5)|0;
							$1032 = ($1024|0)>($1031|0);
							if ($1032) {
								$$11$ph = 126;
								break;
							}
						}
						$1033 = (__ZN7Profile6minimaEi($49,-1)|0);
						$1034 = ($1033|0)==(3);
						if (!($1034)) {
							$$12 = 0;
							STACKTOP = sp;return ($$12|0);
						}
						$1035 = (__ZNK8Features5hbarsEv($this)|0);
						$1036 = ($1035|0)==(0);
						if ($1036) {
							$$11$ph = 77;
						} else {
							$1037 = (__ZNK8Features5hbarsEv($this)|0);
							$1038 = ($1037|0)==(1);
							if (!($1038)) {
								$$12 = 0;
								STACKTOP = sp;return ($$12|0);
							}
							$1039 = ((($this)) + 8|0);
							$1040 = HEAP32[$1039>>2]|0;
							$1041 = ((($1040)) + 4|0);
							$1042 = HEAP32[$1041>>2]|0;
							$1043 = HEAP32[$this>>2]|0;
							$1044 = ((($1043)) + 4|0);
							$1045 = HEAP32[$1044>>2]|0;
							$1046 = ((($1043)) + 12|0);
							$1047 = HEAP32[$1046>>2]|0;
							$1048 = (($1047) - ($1045))|0;
							$1049 = (($1048|0) / 5)&-1;
							$1050 = (($1049) + ($1045))|0;
							$1051 = ($1042|0)<($1050|0);
							if ($1051) {
								$$12 = 0;
								STACKTOP = sp;return ($$12|0);
							} else {
								$$11$ph = 77;
							}
						}
					}
				} while(0);
				$$12 = $$11$ph;
				STACKTOP = sp;return ($$12|0);
			}
			function __ZNK8Features10test_hknwxERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$ = 0, $$3 = 0, $$4 = 0, $$phi$trans$insert = 0, $$phi$trans$insert32 = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
				var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
				var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
				var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
				var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
				var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
				var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
				var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
				var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
				var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
				var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
				var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
				var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
				var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
				var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
				var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
				var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
				var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0 = 0, $col$0$lcssa = 0, $col$1 = 0, $i$0 = 0;
				var $or$cond = 0, $or$cond14 = 0, $or$cond3 = 0, $row$0 = 0, $row$0$lcssa = 0, $row$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 104|0);
				$1 = HEAP32[$this>>2]|0;
				$2 = ((($1)) + 12|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ((($1)) + 4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = (($3) + 1)|0;
				$7 = (($6) - ($5))|0;
				$8 = (($7|0) / 8)&-1;
				$9 = (__ZN7Profile6minimaEi($0,$8)|0);
				$10 = ($9|0)==(2);
				if ($10) {
					$11 = ((($this)) + 200|0);
					$12 = HEAP32[$this>>2]|0;
					$13 = ((($12)) + 12|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = ((($12)) + 4|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = (($14) + 1)|0;
					$18 = (($17) - ($16))|0;
					$19 = (($18|0) / 2)&-1;
					$20 = (__ZN7Profile6minimaEi($11,$19)|0);
					$21 = ($20|0)==(1);
					if ($21) {
						$22 = ((($this)) + 56|0);
						$23 = (__ZN7Profile6isctipEi($22,50)|0);
						if ($23) {
							$24 = ((($this)) + 152|0);
							$25 = (__ZN7Profile6isctipEi($24,50)|0);
							if ($25) {
								$$3 = 120;
								return ($$3|0);
							}
						}
						$26 = (__ZN7Profile9isconcaveEv($22)|0);
						if ($26) {
							$27 = ((($this)) + 152|0);
							$28 = (__ZN7Profile9isconcaveEv($27)|0);
							if ($28) {
								$$3 = 120;
								return ($$3|0);
							}
						}
					}
				}
				$29 = HEAP32[$this>>2]|0;
				$30 = ((($29)) + 8|0);
				$31 = HEAP32[$30>>2]|0;
				$32 = HEAP32[$29>>2]|0;
				$33 = (($31) + 1)|0;
				$34 = (($33) - ($32))|0;
				$35 = ((($29)) + 12|0);
				$36 = HEAP32[$35>>2]|0;
				$37 = ((($29)) + 4|0);
				$38 = HEAP32[$37>>2]|0;
				$39 = (($36) + 1)|0;
				$40 = (($39) - ($38))|0;
				$41 = ($34|0)<($40|0);
				if (!($41)) {
					$42 = (__ZN7Profile5ispitEv($0)|0);
					if ($42) {
						$43 = HEAP32[$this>>2]|0;
						$44 = ((($43)) + 12|0);
						$45 = HEAP32[$44>>2]|0;
						$46 = ((($charbox)) + 4|0);
						$47 = HEAP32[$46>>2]|0;
						$48 = ((($charbox)) + 12|0);
						$49 = HEAP32[$48>>2]|0;
						$50 = (($49) + ($47))|0;
						$51 = (($50|0) / 2)&-1;
						$52 = ($45|0)<($51|0);
						if ($52) {
							$$3 = 94;
							return ($$3|0);
						}
						$53 = ((($this)) + 56|0);
						$54 = (__ZN7Profile10decreasingEii($53,1,-1)|0);
						if ($54) {
							$55 = ((($this)) + 152|0);
							$56 = (__ZN7Profile10decreasingEii($55,1,-1)|0);
							if ($56) {
								$$3 = 94;
								return ($$3|0);
							}
						}
					}
				}
				$57 = ((($this)) + 200|0);
				$58 = ((($this)) + 208|0);
				$59 = HEAP32[$58>>2]|0;
				$60 = ($59|0)<(0);
				if ($60) {
					__ZN7Profile10initializeEv($57);
				}
				$61 = ((($this)) + 236|0);
				$62 = ((($this)) + 240|0);
				$63 = HEAP32[$62>>2]|0;
				$64 = HEAP32[$61>>2]|0;
				$65 = (($63) - ($64))|0;
				$66 = $65 >> 2;
				$67 = ($66*40)|0;
				$68 = (($67) + -40)|0;
				$69 = (($68|0) / 100)&-1;
				$col$0 = 0;$i$0 = $69;$row$0 = 0;
				while(1) {
					$70 = HEAP32[$58>>2]|0;
					$71 = ($70|0)<(0);
					if ($71) {
						__ZN7Profile10initializeEv($57);
					}
					$72 = HEAP32[$62>>2]|0;
					$73 = HEAP32[$61>>2]|0;
					$74 = (($72) - ($73))|0;
					$75 = $74 >> 2;
					$76 = ($75*60)|0;
					$77 = (($76) + -60)|0;
					$78 = (($77|0) / 100)&-1;
					$79 = ($i$0|0)>($78|0);
					if ($79) {
						$col$0$lcssa = $col$0;$row$0$lcssa = $row$0;
						break;
					}
					$95 = (__ZN7ProfileixEi($57,$i$0)|0);
					$96 = ($95|0)>($row$0|0);
					if ($96) {
						$97 = (__ZN7ProfileixEi($57,$i$0)|0);
						$col$1 = $i$0;$row$1 = $97;
					} else {
						$col$1 = $col$0;$row$1 = $row$0;
					}
					$98 = (($i$0) + 1)|0;
					$col$0 = $col$1;$i$0 = $98;$row$0 = $row$1;
				}
				$80 = HEAP32[$this>>2]|0;
				$81 = ((($80)) + 12|0);
				$82 = HEAP32[$81>>2]|0;
				$83 = (($82) - ($row$0$lcssa))|0;
				$84 = (($83) + 1)|0;
				$85 = HEAP32[$80>>2]|0;
				$86 = (($85) + ($col$0$lcssa))|0;
				$87 = ((($80)) + 4|0);
				$88 = HEAP32[$87>>2]|0;
				$89 = (($82) - ($88))|0;
				$90 = ($89*90)|0;
				$91 = (($90|0) / 100)&-1;
				$92 = (($91) + ($88))|0;
				$93 = ($83|0)>=($92|0);
				$94 = ($83|0)<($88|0);
				$or$cond = $94 | $93;
				if ($or$cond) {
					$$3 = 0;
					return ($$3|0);
				}
				$99 = (__ZNK6Bitmap10seek_rightEiib($80,$84,$86,1)|0);
				$100 = ($99|0)>($86|0);
				$101 = $100 << 31 >> 31;
				$$ = (($101) + ($99))|0;
				$102 = HEAP32[$this>>2]|0;
				$103 = (__ZNK6Bitmap8seek_topEiib($102,$84,$$,1)|0);
				$104 = HEAP32[$this>>2]|0;
				$105 = (($103) + -1)|0;
				$106 = (__ZNK6Bitmap8seek_topEiib($104,$105,$$,0)|0);
				$107 = HEAP32[$this>>2]|0;
				$108 = ((($107)) + 4|0);
				$109 = HEAP32[$108>>2]|0;
				$110 = ((($107)) + 12|0);
				$111 = HEAP32[$110>>2]|0;
				$112 = (($111) - ($109))|0;
				$113 = (($112|0) / 5)&-1;
				$114 = (($113) + ($109))|0;
				$115 = ($106|0)>($114|0);
				if ($115) {
					$139 = $111;$141 = $109;
				} else {
					$116 = ((($this)) + 112|0);
					$117 = HEAP32[$116>>2]|0;
					$118 = ($117|0)<(0);
					if ($118) {
						__ZN7Profile10initializeEv($0);
					}
					$119 = ((($this)) + 140|0);
					$120 = ((($this)) + 144|0);
					$121 = HEAP32[$120>>2]|0;
					$122 = HEAP32[$119>>2]|0;
					$123 = (($121) - ($122))|0;
					$124 = $123 >> 2;
					$125 = ($124*60)|0;
					$126 = (($125) + -60)|0;
					$127 = (($126|0) / 100)&-1;
					$128 = (__ZN7ProfileixEi($0,$127)|0);
					$129 = ($128*3)|0;
					$130 = HEAP32[$this>>2]|0;
					$131 = ((($130)) + 12|0);
					$132 = HEAP32[$131>>2]|0;
					$133 = ((($130)) + 4|0);
					$134 = HEAP32[$133>>2]|0;
					$135 = (($132) + 1)|0;
					$136 = (($135) - ($134))|0;
					$137 = ($129|0)>($136|0);
					if ($137) {
						$139 = $132;$141 = $134;
					} else {
						$250 = ((($130)) + 8|0);
						$251 = HEAP32[$250>>2]|0;
						$252 = HEAP32[$130>>2]|0;
						$253 = (($251) + 1)|0;
						$254 = (($253) - ($252))|0;
						$255 = (__ZN5Ocrad7similarEiiii($136,$254,40,1)|0);
						if ($255) {
							$256 = HEAP32[$this>>2]|0;
							$257 = ((($256)) + 4|0);
							$258 = HEAP32[$257>>2]|0;
							$259 = ((($256)) + 12|0);
							$260 = HEAP32[$259>>2]|0;
							$261 = (($260) + ($258))|0;
							$262 = (($261|0) / 2)&-1;
							$263 = ($103|0)>($262|0);
							$264 = ($106|0)<($262|0);
							$or$cond14 = $263 & $264;
							if ($or$cond14) {
								$265 = (1 - ($258))|0;
								$266 = (($265) + ($260))|0;
								$267 = (($266|0) / 5)&-1;
								$268 = (__ZN7Profile6minimaEi($0,$267)|0);
								$269 = ($268|0)==(2);
								if ($269) {
									$270 = (($106) + 1)|0;
									$271 = (__ZN7Profile6minimaEi($57,$270)|0);
									$272 = ($271|0)==(3);
									if ($272) {
										$$3 = 119;
										return ($$3|0);
									}
								}
							}
						}
						$273 = HEAP32[$this>>2]|0;
						$274 = ((($273)) + 4|0);
						$275 = HEAP32[$274>>2]|0;
						$276 = ((($273)) + 12|0);
						$277 = HEAP32[$276>>2]|0;
						$278 = (($277) - ($275))|0;
						$279 = (($278|0) / 5)&-1;
						$280 = (($279) + ($275))|0;
						$281 = ($106|0)>($280|0);
						if (!($281)) {
							$282 = (1 - ($275))|0;
							$283 = (($282) + ($277))|0;
							$284 = (($283|0) / 4)&-1;
							$285 = (__ZN7Profile6minimaEi($0,$284)|0);
							$286 = ($285|0)==(1);
							if ($286) {
								$287 = HEAP32[$this>>2]|0;
								$288 = ((($287)) + 12|0);
								$289 = HEAP32[$288>>2]|0;
								$290 = ((($287)) + 4|0);
								$291 = HEAP32[$290>>2]|0;
								$292 = (($289) + 1)|0;
								$293 = (($292) - ($291))|0;
								$294 = ((($287)) + 8|0);
								$295 = HEAP32[$294>>2]|0;
								$296 = HEAP32[$287>>2]|0;
								$297 = (($295) + 1)|0;
								$298 = (($297) - ($296))|0;
								$299 = (__ZN5Ocrad7similarEiiii($293,$298,40,1)|0);
								if ($299) {
									$300 = ((($this)) + 152|0);
									$301 = ((($this)) + 160|0);
									$302 = HEAP32[$301>>2]|0;
									$303 = ($302|0)<(0);
									if ($303) {
										__ZN7Profile10initializeEv($300);
									}
									$304 = ((($this)) + 188|0);
									$305 = ((($this)) + 192|0);
									$306 = HEAP32[$305>>2]|0;
									$307 = HEAP32[$304>>2]|0;
									$308 = (($306) - ($307))|0;
									$309 = $308 >> 2;
									$310 = ($309*50)|0;
									$311 = (($310) + -50)|0;
									$312 = (($311|0) / 100)&-1;
									$313 = (__ZN7ProfileixEi($300,$312)|0);
									$314 = $313 << 3;
									$315 = (($314) + -8)|0;
									$316 = HEAP32[$this>>2]|0;
									$317 = ((($316)) + 8|0);
									$318 = HEAP32[$317>>2]|0;
									$319 = HEAP32[$316>>2]|0;
									$320 = (($318) + 1)|0;
									$321 = (($320) - ($319))|0;
									$322 = ($315|0)>($321|0);
									if (!($322)) {
										$$3 = 110;
										return ($$3|0);
									}
									$323 = HEAP32[$116>>2]|0;
									$324 = ($323|0)<(0);
									if ($324) {
										__ZN7Profile10initializeEv($0);
									}
									$325 = HEAP32[$120>>2]|0;
									$326 = HEAP32[$119>>2]|0;
									$327 = (($325) - ($326))|0;
									$328 = $327 >> 2;
									$329 = ($328*99)|0;
									$330 = (($329) + -99)|0;
									$331 = (($330|0) / 100)&-1;
									$332 = (__ZN7ProfileixEi($0,$331)|0);
									$333 = HEAP32[$this>>2]|0;
									$334 = ((($333)) + 12|0);
									$335 = HEAP32[$334>>2]|0;
									$336 = ((($333)) + 4|0);
									$337 = HEAP32[$336>>2]|0;
									$338 = (($335) + 1)|0;
									$339 = (($338) - ($337))|0;
									$340 = (($339|0) / 2)&-1;
									$341 = ($332|0)>($340|0);
									if ($341) {
										$$3 = 110;
										return ($$3|0);
									}
								}
							}
						}
						$$3 = 0;
						return ($$3|0);
					}
				}
				$138 = (($139) + 1)|0;
				$140 = (($138) - ($141))|0;
				$142 = (($140|0) / 5)&-1;
				$143 = (__ZN7Profile6minimaEi($0,$142)|0);
				$144 = ($143|0)==(3);
				if ($144) {
					$145 = HEAP32[$this>>2]|0;
					$146 = ((($145)) + 4|0);
					$147 = HEAP32[$146>>2]|0;
					$148 = ((($145)) + 12|0);
					$149 = HEAP32[$148>>2]|0;
					$150 = (($149) + ($147))|0;
					$151 = (($150|0) / 2)&-1;
					$152 = ((($this)) + 32|0);
					$153 = HEAP32[$152>>2]|0;
					$154 = ((($this)) + 36|0);
					$155 = HEAP32[$154>>2]|0;
					$156 = ($153|0)==($155|0);
					if ($156) {
						__ZNK8Features13row_scan_initEv($this);
						$$pre$i11 = HEAP32[$152>>2]|0;
						$$pre = HEAP32[$this>>2]|0;
						$$phi$trans$insert = ((($$pre)) + 4|0);
						$$pre30 = HEAP32[$$phi$trans$insert>>2]|0;
						$158 = $$pre30;$160 = $$pre$i11;$167 = $$pre;
					} else {
						$158 = $147;$160 = $153;$167 = $145;
					}
					$157 = (($151) - ($158))|0;
					$159 = (($160) + (($157*12)|0)|0);
					$161 = (((($160) + (($157*12)|0)|0)) + 4|0);
					$162 = HEAP32[$161>>2]|0;
					$163 = HEAP32[$159>>2]|0;
					$164 = (($162) - ($163))|0;
					$165 = ($164|0)==(16);
					if ($165) {
						$166 = ((($167)) + 12|0);
						$168 = HEAP32[$166>>2]|0;
						$169 = (($168) - ($158))|0;
						$170 = ($169*80)|0;
						$171 = (($170|0) / 100)&-1;
						$172 = (($171) + ($158))|0;
						$173 = HEAP32[$154>>2]|0;
						$174 = ($160|0)==($173|0);
						if ($174) {
							__ZNK8Features13row_scan_initEv($this);
							$$pre$i = HEAP32[$152>>2]|0;
							$$pre31 = HEAP32[$this>>2]|0;
							$$phi$trans$insert32 = ((($$pre31)) + 4|0);
							$$pre33 = HEAP32[$$phi$trans$insert32>>2]|0;
							$176 = $$pre33;$178 = $$pre$i;
						} else {
							$176 = $158;$178 = $160;
						}
						$175 = (($172) - ($176))|0;
						$177 = (($178) + (($175*12)|0)|0);
						$179 = (((($178) + (($175*12)|0)|0)) + 4|0);
						$180 = HEAP32[$179>>2]|0;
						$181 = HEAP32[$177>>2]|0;
						$182 = (($180) - ($181))|0;
						$183 = ($182|0)==(24);
						if ($183) {
							$$3 = 0;
							return ($$3|0);
						}
					}
				}
				$184 = $143 | 1;
				$185 = ($184|0)==(3);
				if ($185) {
					$186 = (__ZN7Profile6minimaEi($0,-1)|0);
					$187 = ($186|0)>(1);
					if ($187) {
						$188 = ((($this)) + 152|0);
						$189 = ((($this)) + 160|0);
						$190 = HEAP32[$189>>2]|0;
						$191 = ($190|0)<(0);
						if ($191) {
							__ZN7Profile10initializeEv($188);
						}
						$192 = ((($this)) + 188|0);
						$193 = ((($this)) + 192|0);
						$194 = HEAP32[$193>>2]|0;
						$195 = HEAP32[$192>>2]|0;
						$196 = (($194) - ($195))|0;
						$197 = $196 >> 2;
						$198 = ($197*25)|0;
						$199 = (($198) + -25)|0;
						$200 = (($199|0) / 100)&-1;
						$201 = (__ZN7ProfileixEi($188,$200)|0);
						$202 = HEAP32[$this>>2]|0;
						$203 = ((($202)) + 8|0);
						$204 = HEAP32[$203>>2]|0;
						$205 = HEAP32[$202>>2]|0;
						$206 = (($204) + 1)|0;
						$207 = (($206) - ($205))|0;
						$208 = (($207|0) / 4)&-1;
						$209 = ($201|0)>($208|0);
						if (!($209)) {
							$210 = ((($this)) + 56|0);
							$211 = (__ZN7Profile6istpitEv($210)|0);
							if (!($211)) {
								$$3 = 119;
								return ($$3|0);
							}
							$212 = (__ZN7Profile6minimaEi($188,-1)|0);
							$213 = ($212|0)==(1);
							if ($213) {
								$$3 = 119;
								return ($$3|0);
							}
						}
					}
				}
				$214 = ($143|0)==(1);
				$215 = ($9|0)==(1);
				$or$cond3 = $215 & $214;
				if (!($or$cond3)) {
					$$3 = 0;
					return ($$3|0);
				}
				$216 = ((($this)) + 112|0);
				$217 = HEAP32[$216>>2]|0;
				$218 = ($217|0)<(0);
				if ($218) {
					__ZN7Profile10initializeEv($0);
					$$pre34 = HEAP32[$216>>2]|0;
					$228 = $$pre34;
				} else {
					$228 = $217;
				}
				$219 = ((($this)) + 140|0);
				$220 = ((($this)) + 144|0);
				$221 = HEAP32[$220>>2]|0;
				$222 = HEAP32[$219>>2]|0;
				$223 = (($221) - ($222))|0;
				$224 = $223 >> 2;
				$225 = ($224*40)|0;
				$226 = (($225) + -40)|0;
				$227 = (($226|0) / 100)&-1;
				$229 = ($228|0)<(0);
				if ($229) {
					__ZN7Profile10initializeEv($0);
					$$pre35 = HEAP32[$220>>2]|0;
					$$pre36 = HEAP32[$219>>2]|0;
					$231 = $$pre36;$232 = $$pre35;
				} else {
					$231 = $222;$232 = $221;
				}
				$230 = (($232) - ($231))|0;
				$233 = $230 >> 2;
				$234 = ($233*60)|0;
				$235 = (($234) + -60)|0;
				$236 = (($235|0) / 100)&-1;
				$237 = (__ZN7Profile3maxEii($0,$227,$236)|0);
				$238 = $237 << 2;
				$239 = HEAP32[$this>>2]|0;
				$240 = ((($239)) + 12|0);
				$241 = HEAP32[$240>>2]|0;
				$242 = ((($239)) + 4|0);
				$243 = HEAP32[$242>>2]|0;
				$244 = (($241) + 1)|0;
				$245 = (($244) - ($243))|0;
				$246 = ($245*3)|0;
				$247 = ($238|0)<($246|0);
				if (!($247)) {
					$$3 = 0;
					return ($$3|0);
				}
				$248 = ((($this)) + 152|0);
				$249 = (__ZN7Profile6isctipEi($248,66)|0);
				$$4 = $249 ? 107 : 104;
				$$3 = $$4;
				return ($$3|0);
			}
			function __ZNK8Features14test_s_cedillaEv($this) {
				$this = $this|0;
				var $$01 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $black_section$112 = 0, $black_section$2 = 0, $black_section$2$lcssa = 0, $col$023 = 0, $col$023$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond34 = 0, $prev_black$0$off013 = 0, $row$014 = 0, $urow2$020 = 0, $urow2$1$lcssa32 = 0, $urow2$19 = 0, $urow2$2 = 0;
				var $urow2$2$lcssa = 0, $urow2$2$lcssa$lcssa = 0, $urow3$021 = 0, $urow3$1$lcssa31 = 0, $urow3$110 = 0, $urow3$2 = 0, $urow3$2$lcssa = 0, $urow3$2$lcssa$lcssa = 0, $urow4$022 = 0, $urow4$1$lcssa30 = 0, $urow4$111 = 0, $urow4$2 = 0, $urow4$2$lcssa = 0, $urow4$2$lcssa$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($0)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (($3) + ($1))|0;
				$5 = (($4|0) / 2)&-1;
				$6 = (($5) + -1)|0;
				$7 = ((($0)) + 12|0);
				$8 = HEAP32[$7>>2]|0;
				$$phi$trans$insert = ((($0)) + 4|0);
				$$pre = HEAP32[$$phi$trans$insert>>2]|0;
				$9 = ($8|0)<($$pre|0);
				$10 = ((($0)) + 4|0);
				$11 = ((($0)) + 16|0);
				$12 = (($8) - ($$pre))|0;
				$13 = (($12|0) / 2)&-1;
				$14 = (($13) + ($$pre))|0;
				$15 = ($12*70)|0;
				$16 = (($15|0) / 100)&-1;
				$17 = (($16) + ($$pre))|0;
				$col$023 = $6;$urow2$020 = 0;$urow3$021 = 0;$urow4$022 = 0;
				while(1) {
					if ($9) {
						$urow2$1$lcssa32 = $urow2$020;$urow3$1$lcssa31 = $urow3$021;$urow4$1$lcssa30 = $urow4$022;
					} else {
						$18 = HEAP32[$10>>2]|0;
						$19 = HEAP32[$11>>2]|0;
						$20 = HEAP32[$0>>2]|0;
						$21 = (($col$023) - ($20))|0;
						$black_section$112 = 0;$prev_black$0$off013 = 0;$row$014 = $$pre;$urow2$19 = $urow2$020;$urow3$110 = $urow3$021;$urow4$111 = $urow4$022;
						while(1) {
							$23 = (($row$014) - ($18))|0;
							$24 = (($19) + (($23*12)|0)|0);
							$25 = HEAP32[$24>>2]|0;
							$26 = (($25) + ($21)|0);
							$27 = HEAP8[$26>>0]|0;
							$28 = ($27<<24>>24)!=(0);
							L7: do {
								if ($28) {
									if ($prev_black$0$off013) {
										$black_section$2 = $black_section$112;$urow2$2 = $urow2$19;$urow3$2 = $urow3$110;$urow4$2 = $urow4$111;
									} else {
										$29 = (($black_section$112) + 1)|0;
										switch ($black_section$112|0) {
											case 1:  {
												$30 = (($row$014) + -1)|0;
												$black_section$2 = 2;$urow2$2 = $30;$urow3$2 = $urow3$110;$urow4$2 = $urow4$111;
												break L7;
												break;
											}
											case 2:  {
												$31 = (($row$014) + -1)|0;
												$black_section$2 = 3;$urow2$2 = $urow2$19;$urow3$2 = $31;$urow4$2 = $urow4$111;
												break L7;
												break;
											}
											case 3:  {
												$32 = (($row$014) + -1)|0;
												$black_section$2 = 4;$urow2$2 = $urow2$19;$urow3$2 = $urow3$110;$urow4$2 = $32;
												break L7;
												break;
											}
											default: {
												$black_section$2 = $29;$urow2$2 = $urow2$19;$urow3$2 = $urow3$110;$urow4$2 = $urow4$111;
												break L7;
											}
										}
									}
								} else {
									$black_section$2 = $black_section$112;$urow2$2 = $urow2$19;$urow3$2 = $urow3$110;$urow4$2 = $urow4$111;
								}
							} while(0);
							$33 = (($row$014) + 1)|0;
							$34 = ($row$014|0)<($8|0);
							if ($34) {
								$black_section$112 = $black_section$2;$prev_black$0$off013 = $28;$row$014 = $33;$urow2$19 = $urow2$2;$urow3$110 = $urow3$2;$urow4$111 = $urow4$2;
							} else {
								$black_section$2$lcssa = $black_section$2;$urow2$2$lcssa = $urow2$2;$urow3$2$lcssa = $urow3$2;$urow4$2$lcssa = $urow4$2;
								break;
							}
						}
						$notlhs = ($black_section$2$lcssa|0)!=(4);
						$notrhs = ($urow2$2$lcssa|0)>=($14|0);
						$or$cond$not = $notrhs | $notlhs;
						$22 = ($urow4$2$lcssa|0)<($17|0);
						$or$cond34 = $or$cond$not | $22;
						if ($or$cond34) {
							$urow2$1$lcssa32 = $urow2$2$lcssa;$urow3$1$lcssa31 = $urow3$2$lcssa;$urow4$1$lcssa30 = $urow4$2$lcssa;
						} else {
							$col$023$lcssa = $col$023;$urow2$2$lcssa$lcssa = $urow2$2$lcssa;$urow3$2$lcssa$lcssa = $urow3$2$lcssa;$urow4$2$lcssa$lcssa = $urow4$2$lcssa;
							label = 13;
							break;
						}
					}
					$35 = (($col$023) + 1)|0;
					$36 = ($col$023|0)>($5|0);
					if ($36) {
						break;
					} else {
						$col$023 = $35;$urow2$020 = $urow2$1$lcssa32;$urow3$021 = $urow3$1$lcssa31;$urow4$022 = $urow4$1$lcssa30;
					}
				}
				if ((label|0) == 13) {
					$37 = (__ZNK6Bitmap12escape_rightEii($0,$urow2$2$lcssa$lcssa,$col$023$lcssa)|0);
					if ($37) {
						$38 = HEAP32[$this>>2]|0;
						$39 = (__ZNK6Bitmap11escape_leftEii($38,$urow3$2$lcssa$lcssa,$col$023$lcssa)|0);
						if ($39) {
							$40 = HEAP32[$this>>2]|0;
							$41 = (__ZNK6Bitmap11escape_leftEii($40,$urow4$2$lcssa$lcssa,$col$023$lcssa)|0);
							if ($41) {
								$$01 = 351;
								return ($$01|0);
							}
						}
					}
				}
				$$01 = 0;
				return ($$01|0);
			}
			function __ZNK8Features10test_commaEv($this) {
				$this = $this|0;
				var $$2 = 0, $$count1$0 = 0, $$count1$0$lcssa = 0, $$upper_area$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
				var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $col$017 = 0, $col1$014 = 0, $count1$012 = 0;
				var $count2$013 = 0, $count2$1 = 0, $count2$1$lcssa = 0, $or$cond = 0, $or$cond29 = 0, $or$cond5 = 0, $row$023 = 0, $upper_area$0$lcssa = 0, $upper_area$022 = 0, $upper_area$1$lcssa = 0, $upper_area$116 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($0)) + 28|0);
				$2 = ((($0)) + 32|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$1>>2]|0;
				$5 = ($3|0)==($4|0);
				if (!($5)) {
					$$2 = 0;
					return ($$2|0);
				}
				$6 = ((($0)) + 12|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($0)) + 4|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = (($7) + 1)|0;
				$11 = (($10) - ($9))|0;
				$12 = ((($0)) + 8|0);
				$13 = HEAP32[$12>>2]|0;
				$14 = HEAP32[$0>>2]|0;
				$15 = (($13) + 1)|0;
				$16 = (($15) - ($14))|0;
				$17 = ($11|0)<=($16|0);
				$18 = ($16*3)|0;
				$19 = ($11|0)>($18|0);
				$or$cond = $17 | $19;
				if ($or$cond) {
					$$2 = 0;
					return ($$2|0);
				}
				$20 = ($16|0)>(2);
				$21 = ($11|0)>(2);
				$or$cond5 = $21 & $20;
				if (!($or$cond5)) {
					$$2 = 1;
					return ($$2|0);
				}
				$22 = (($16) + ($9))|0;
				$23 = ($16|0)>(0);
				if ($23) {
					$24 = ($14|0)>($13|0);
					$26 = $0;$row$023 = $9;$upper_area$022 = 0;
					while(1) {
						if ($24) {
							$72 = $26;$upper_area$1$lcssa = $upper_area$022;
						} else {
							$25 = ((($26)) + 4|0);
							$27 = HEAP32[$25>>2]|0;
							$28 = (($row$023) - ($27))|0;
							$29 = ((($26)) + 16|0);
							$30 = HEAP32[$29>>2]|0;
							$31 = HEAP32[$26>>2]|0;
							$32 = (($30) + (($28*12)|0)|0);
							$33 = HEAP32[$32>>2]|0;
							$col$017 = $14;$upper_area$116 = $upper_area$022;
							while(1) {
								$53 = (($col$017) - ($31))|0;
								$54 = (($33) + ($53)|0);
								$55 = HEAP8[$54>>0]|0;
								$56 = ($55<<24>>24)!=(0);
								$57 = $56&1;
								$$upper_area$1 = (($57) + ($upper_area$116))|0;
								$58 = (($col$017) + 1)|0;
								$59 = ($col$017|0)<($13|0);
								if ($59) {
									$col$017 = $58;$upper_area$116 = $$upper_area$1;
								} else {
									$72 = $0;$upper_area$1$lcssa = $$upper_area$1;
									break;
								}
							}
						}
						$51 = (($row$023) + 1)|0;
						$52 = ($51|0)<($22|0);
						if ($52) {
							$26 = $72;$row$023 = $51;$upper_area$022 = $upper_area$1$lcssa;
						} else {
							$upper_area$0$lcssa = $upper_area$1$lcssa;
							break;
						}
					}
				} else {
					$upper_area$0$lcssa = 0;
				}
				$34 = (($16) + -2)|0;
				$35 = Math_imul($34, $34)|0;
				$36 = ($upper_area$0$lcssa|0)<($35|0);
				$37 = ($14|0)>($13|0);
				$or$cond29 = $36 | $37;
				if (!($or$cond29)) {
					$38 = ((($0)) + 4|0);
					$39 = HEAP32[$38>>2]|0;
					$40 = ((($0)) + 16|0);
					$41 = HEAP32[$40>>2]|0;
					$42 = HEAP32[$0>>2]|0;
					$43 = ((($41)) + 12|0);
					$44 = HEAP32[$43>>2]|0;
					$45 = ((($0)) + 12|0);
					$46 = HEAP32[$45>>2]|0;
					$47 = $39 ^ -1;
					$48 = (($46) + ($47))|0;
					$49 = (($41) + (($48*12)|0)|0);
					$50 = HEAP32[$49>>2]|0;
					$col1$014 = $14;$count1$012 = 0;$count2$013 = 0;
					while(1) {
						$61 = (($col1$014) - ($42))|0;
						$62 = (($44) + ($61)|0);
						$63 = HEAP8[$62>>0]|0;
						$64 = ($63<<24>>24)!=(0);
						$65 = $64&1;
						$$count1$0 = (($65) + ($count1$012))|0;
						$66 = (($50) + ($61)|0);
						$67 = HEAP8[$66>>0]|0;
						$68 = ($67<<24>>24)!=(0);
						$69 = $68&1;
						$count2$1 = (($69) + ($count2$013))|0;
						$70 = (($col1$014) + 1)|0;
						$71 = ($col1$014|0)<($13|0);
						if ($71) {
							$col1$014 = $70;$count1$012 = $$count1$0;$count2$013 = $count2$1;
						} else {
							$$count1$0$lcssa = $$count1$0;$count2$1$lcssa = $count2$1;
							break;
						}
					}
					$60 = ($$count1$0$lcssa|0)>($count2$1$lcssa|0);
					if ($60) {
						$$2 = 1;
						return ($$2|0);
					}
				}
				$$2 = 0;
				return ($$2|0);
			}
			function __ZNK8Features9test_easyERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert5 = 0, $$pre = 0, $$pre4 = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
				var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
				var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
				var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
				var $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (__ZNK8Features10test_solidERK9Rectangle($this,$charbox)|0);
				$1 = ($0|0)==(0);
				if (!($1)) {
					$$0 = $0;
					return ($$0|0);
				}
				$2 = HEAP32[$this>>2]|0;
				$3 = ((($2)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = ((($charbox)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ((($charbox)) + 12|0);
				$8 = HEAP32[$7>>2]|0;
				$9 = (($8) + ($6))|0;
				$10 = (($9|0) / 2)&-1;
				$11 = ($4|0)<($10|0);
				if (!($11)) {
					$12 = (__ZNK8Features10test_commaEv($this)|0);
					if ($12) {
						$$0 = 44;
						return ($$0|0);
					}
				}
				$13 = ((($2)) + 12|0);
				$14 = HEAP32[$13>>2]|0;
				$15 = ($14|0)>($10|0);
				do {
					if ($15) {
						$57 = $14;$59 = $4;
					} else {
						$16 = (($14) + 1)|0;
						$17 = (($16) - ($4))|0;
						$18 = ((($2)) + 8|0);
						$19 = HEAP32[$18>>2]|0;
						$20 = HEAP32[$2>>2]|0;
						$21 = (($19) + 1)|0;
						$22 = (($21) - ($20))|0;
						$23 = ($17|0)>($22|0);
						if ($23) {
							$24 = ((($this)) + 200|0);
							$25 = (__ZN7Profile6minimaEi($24,-1)|0);
							$26 = ($25|0)==(1);
							if (!($26)) {
								$$pre = HEAP32[$this>>2]|0;
								$$phi$trans$insert = ((($$pre)) + 12|0);
								$$pre4 = HEAP32[$$phi$trans$insert>>2]|0;
								$$phi$trans$insert5 = ((($$pre)) + 4|0);
								$$pre6 = HEAP32[$$phi$trans$insert5>>2]|0;
								$57 = $$pre4;$59 = $$pre6;
								break;
							}
							$27 = ((($this)) + 104|0);
							$28 = (__ZN7Profile8iminimumEii($27,0,-1)|0);
							$29 = ((($this)) + 112|0);
							$30 = HEAP32[$29>>2]|0;
							$31 = ($30|0)<(0);
							if ($31) {
								__ZN7Profile10initializeEv($27);
							}
							$32 = ((($this)) + 140|0);
							$33 = ((($this)) + 144|0);
							$34 = HEAP32[$33>>2]|0;
							$35 = HEAP32[$32>>2]|0;
							$36 = (($34) - ($35))|0;
							$37 = $36 >> 2;
							$38 = ($37*50)|0;
							$39 = (($38) + -50)|0;
							$40 = (($39|0) / 100)&-1;
							$41 = ($28|0)<($40|0);
							if ($41) {
								$42 = (__ZN7Profile8iminimumEii($24,0,-1)|0);
								$43 = ((($this)) + 208|0);
								$44 = HEAP32[$43>>2]|0;
								$45 = ($44|0)<(0);
								if ($45) {
									__ZN7Profile10initializeEv($24);
								}
								$46 = ((($this)) + 236|0);
								$47 = ((($this)) + 240|0);
								$48 = HEAP32[$47>>2]|0;
								$49 = HEAP32[$46>>2]|0;
								$50 = (($48) - ($49))|0;
								$51 = $50 >> 2;
								$52 = ($51*50)|0;
								$53 = (($52) + -50)|0;
								$54 = (($53|0) / 100)&-1;
								$55 = ($42|0)>($54|0);
								if ($55) {
									$$0 = 96;
									return ($$0|0);
								}
							}
							$$0 = 39;
							return ($$0|0);
						} else {
							$57 = $14;$59 = $4;
						}
					}
				} while(0);
				$56 = (($57) + 1)|0;
				$58 = (($56) - ($59))|0;
				$60 = $58 << 1;
				$61 = ((($this)) + 296|0);
				$62 = (__ZN7Profile3maxEv($61)|0);
				$63 = ($62*3)|0;
				$64 = ($60|0)>($63|0);
				if ($64) {
					$65 = HEAP32[$this>>2]|0;
					$66 = ((($65)) + 4|0);
					$67 = HEAP32[$66>>2]|0;
					$68 = HEAP32[$5>>2]|0;
					$69 = HEAP32[$7>>2]|0;
					$70 = (($69) + ($68))|0;
					$71 = (($70|0) / 2)&-1;
					$72 = ($67|0)<($71|0);
					if (!($72)) {
						$73 = ((($this)) + 200|0);
						$74 = (__ZN7Profile6minimaEi($73,-1)|0);
						$75 = ($74|0)==(1);
						if ($75) {
							$$0 = 44;
							return ($$0|0);
						}
					}
				}
				$$0 = 0;
				return ($$0|0);
			}
			function __ZNK8Features10test_solidERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$11 = 0, $$5 = 0, $$8 = 0, $$d$0 = 0, $$lcssa26 = 0, $$phi$trans$insert = 0, $$phi$trans$insert54 = 0, $$phi$trans$insert56 = 0, $$pre = 0, $$pre51 = 0, $$pre52 = 0, $$pre53 = 0, $$pre55 = 0, $$pre57 = 0, $$pre59 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
				var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
				var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
				var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
				var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
				var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
				var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
				var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
				var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
				var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
				var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
				var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0 = 0, $col$029 = 0, $col$032 = 0, $d$027 = 0, $d$2 = 0, $d$2$lcssa = 0;
				var $holes$0$lcssa = 0, $holes$031 = 0, $holes$1 = 0, $i$028 = 0, $inner_area$0$lcssa = 0, $inner_area$041 = 0, $inner_area$1$lcssa = 0, $inner_area$130 = 0, $inner_area$2 = 0, $inner_area$3 = 0, $inner_size$0 = 0, $ispos = 0, $neg = 0, $not$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond60 = 0, $porosity$0$lcssa = 0, $porosity$040 = 0, $porosity$1 = 0;
				var $porosity$2 = 0, $row$042 = 0, $sum = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($0)) + 28|0);
				$2 = ((($0)) + 32|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$1>>2]|0;
				$5 = ($3|0)==($4|0);
				if (!($5)) {
					$$5 = 0;
					return ($$5|0);
				}
				$6 = ((($0)) + 12|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($0)) + 4|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = (($7) + 1)|0;
				$11 = (($10) - ($9))|0;
				$12 = ($11|0)>(4);
				do {
					if ($12) {
						$13 = ((($0)) + 8|0);
						$14 = HEAP32[$13>>2]|0;
						$15 = HEAP32[$0>>2]|0;
						$16 = (($14) + 1)|0;
						$17 = (($16) - ($15))|0;
						$18 = ($17|0)>(4);
						if ($18) {
							$19 = $11 << 1;
							$20 = ($19|0)>($17|0);
							do {
								if ($20) {
									$21 = ((($this)) + 104|0);
									$22 = (__ZN7Profile6minimaEi($21,-1)|0);
									$23 = ($22|0)==(1);
									if (!($23)) {
										$$5 = 0;
										return ($$5|0);
									}
									$24 = ((($this)) + 200|0);
									$25 = (__ZN7Profile6minimaEi($24,-1)|0);
									$26 = ($25|0)==(1);
									if ($26) {
										$$pre = HEAP32[$this>>2]|0;
										$$phi$trans$insert = ((($$pre)) + 12|0);
										$$pre53 = HEAP32[$$phi$trans$insert>>2]|0;
										$$phi$trans$insert54 = ((($$pre)) + 4|0);
										$$pre55 = HEAP32[$$phi$trans$insert54>>2]|0;
										$$phi$trans$insert56 = ((($$pre)) + 8|0);
										$$pre57 = HEAP32[$$phi$trans$insert56>>2]|0;
										$$pre59 = HEAP32[$$pre>>2]|0;
										$216 = $$pre;$217 = $$pre;$28 = $$pre53;$30 = $$pre55;$32 = $$pre57;$34 = $$pre59;
										break;
									} else {
										$$5 = 0;
										return ($$5|0);
									}
								} else {
									$216 = $0;$217 = $0;$28 = $7;$30 = $9;$32 = $14;$34 = $15;
								}
							} while(0);
							$27 = (($28) + 1)|0;
							$29 = (($27) - ($30))|0;
							$31 = (($32) + 1)|0;
							$33 = (($31) - ($34))|0;
							$35 = $33 << 1;
							$36 = ($29|0)<($35|0);
							if ($36) {
								$37 = ((($this)) + 56|0);
								$38 = (__ZN7Profile6minimaEi($37,-1)|0);
								$39 = ($38|0)==(1);
								if (!($39)) {
									$$5 = 0;
									return ($$5|0);
								}
								$40 = ((($this)) + 152|0);
								$41 = (__ZN7Profile6minimaEi($40,-1)|0);
								$42 = ($41|0)==(1);
								if ($42) {
									$$pre51 = HEAP32[$this>>2]|0;
									$103 = $$pre51;$44 = $$pre51;
									break;
								} else {
									$$5 = 0;
									return ($$5|0);
								}
							} else {
								$103 = $217;$44 = $216;
							}
						} else {
							$103 = $0;$44 = $0;
						}
					} else {
						$103 = $0;$44 = $0;
					}
				} while(0);
				$43 = ((($44)) + 8|0);
				$45 = HEAP32[$43>>2]|0;
				$46 = HEAP32[$44>>2]|0;
				$47 = (($45) + 1)|0;
				$48 = (($47) - ($46))|0;
				$49 = ($48|0)>(2);
				if ($49) {
					$50 = ((($44)) + 12|0);
					$51 = HEAP32[$50>>2]|0;
					$52 = ((($44)) + 4|0);
					$53 = HEAP32[$52>>2]|0;
					$54 = (($51) + 1)|0;
					$55 = (($54) - ($53))|0;
					$56 = ($55|0)>(2);
					if ($56) {
						$57 = (($55|0) / 100)&-1;
						$58 = (($57) + 1)|0;
						$59 = (($48) + -2)|0;
						$60 = (($55) + -2)|0;
						$61 = Math_imul($60, $59)|0;
						$62 = (($58) + ($53))|0;
						$63 = ((($44)) + 12|0);
						$64 = HEAP32[$63>>2]|0;
						$65 = (($64) - ($58))|0;
						$66 = ($62|0)>($65|0);
						if ($66) {
							$inner_area$0$lcssa = 0;$porosity$0$lcssa = 0;
						} else {
							$67 = ((($44)) + 8|0);
							$68 = HEAP32[$67>>2]|0;
							$69 = ((($44)) + 12|0);
							$70 = HEAP32[$69>>2]|0;
							$71 = (($70) - ($58))|0;
							$72 = ((($44)) + 8|0);
							$73 = HEAP32[$44>>2]|0;
							$col$029 = (($73) + 1)|0;
							$74 = ($col$029|0)<($68|0);
							$75 = HEAP32[$44>>2]|0;
							$79 = $103;$inner_area$041 = 0;$porosity$040 = 0;$row$042 = $62;
							while(1) {
								if ($74) {
									$78 = ((($79)) + 4|0);
									$80 = HEAP32[$78>>2]|0;
									$81 = (($row$042) - ($80))|0;
									$82 = ((($79)) + 16|0);
									$83 = HEAP32[$82>>2]|0;
									$84 = HEAP32[$79>>2]|0;
									$85 = (($83) + (($81*12)|0)|0);
									$86 = HEAP32[$85>>2]|0;
									$87 = HEAP32[$72>>2]|0;
									$col$032 = $col$029;$holes$031 = 0;$inner_area$130 = $inner_area$041;
									while(1) {
										$92 = (($col$032) - ($84))|0;
										$93 = (($86) + ($92)|0);
										$94 = HEAP8[$93>>0]|0;
										$95 = ($94<<24>>24)!=(0);
										$96 = $95&1;
										$inner_area$2 = (($96) + ($inner_area$130))|0;
										$97 = $96 ^ 1;
										$holes$1 = (($97) + ($holes$031))|0;
										$col$0 = (($col$032) + 1)|0;
										$98 = ($col$0|0)<($87|0);
										if ($98) {
											$col$032 = $col$0;$holes$031 = $holes$1;$inner_area$130 = $inner_area$2;
										} else {
											$$lcssa26 = $87;$218 = $44;$holes$0$lcssa = $holes$1;$inner_area$1$lcssa = $inner_area$2;
											break;
										}
									}
								} else {
									$$lcssa26 = $68;$218 = $79;$holes$0$lcssa = 0;$inner_area$1$lcssa = $inner_area$041;
								}
								$88 = ($holes$0$lcssa*5)|0;
								$89 = (($$lcssa26) + 1)|0;
								$90 = (($89) - ($75))|0;
								$91 = ($88|0)<($90|0);
								if ($91) {
									$porosity$1 = $porosity$040;
								} else {
									$99 = (($88|0) / ($90|0))&-1;
									$100 = (($99) + ($porosity$040))|0;
									$porosity$1 = $100;
								}
								$101 = (($row$042) + 1)|0;
								$102 = ($row$042|0)<($71|0);
								if ($102) {
									$79 = $218;$inner_area$041 = $inner_area$1$lcssa;$porosity$040 = $porosity$1;$row$042 = $101;
								} else {
									$inner_area$0$lcssa = $inner_area$1$lcssa;$porosity$0$lcssa = $porosity$1;
									break;
								}
							}
						}
						$76 = ($inner_area$0$lcssa*100)|0;
						$77 = ($61*70)|0;
						$not$ = ($76|0)<($77|0);
						if ($not$) {
							$$5 = 0;
							return ($$5|0);
						} else {
							$106 = $44;$inner_area$3 = $inner_area$0$lcssa;$inner_size$0 = $61;$porosity$2 = $porosity$0$lcssa;
						}
					} else {
						label = 23;
					}
				} else {
					label = 23;
				}
				if ((label|0) == 23) {
					$104 = (__ZNK6Bitmap4areaEv($103)|0);
					$$pre52 = HEAP32[$this>>2]|0;
					$106 = $$pre52;$inner_area$3 = $104;$inner_size$0 = 0;$porosity$2 = 0;
				}
				$105 = ((($106)) + 12|0);
				$107 = HEAP32[$105>>2]|0;
				$108 = ((($106)) + 4|0);
				$109 = HEAP32[$108>>2]|0;
				$110 = (($107) + 1)|0;
				$111 = (($110) - ($109))|0;
				$112 = ((($this)) + 296|0);
				$113 = (__ZN7Profile3maxEv($112)|0);
				$114 = (__ZN5Ocrad7similarEiiii($111,$113,20,2)|0);
				if ($114) {
					$115 = HEAP32[$this>>2]|0;
					$116 = ((($115)) + 12|0);
					$117 = HEAP32[$116>>2]|0;
					$118 = ((($115)) + 4|0);
					$119 = HEAP32[$118>>2]|0;
					$120 = (($117) + 1)|0;
					$121 = (($120) - ($119))|0;
					$122 = ((($115)) + 8|0);
					$123 = HEAP32[$122>>2]|0;
					$124 = HEAP32[$115>>2]|0;
					$125 = (($123) + 1)|0;
					$126 = (($125) - ($124))|0;
					$127 = ($126|0)<($121|0);
					$128 = $127 ? $126 : $121;
					$129 = ($128|0)>(5);
					if ($129) {
						$130 = HEAP32[$115>>2]|0;
						$131 = ((($115)) + 16|0);
						$132 = HEAP32[$131>>2]|0;
						$133 = ((($115)) + 8|0);
						$134 = HEAP32[$133>>2]|0;
						$d$027 = 0;$i$028 = 0;
						while(1) {
							$139 = (($132) + (($i$028*12)|0)|0);
							$140 = HEAP32[$139>>2]|0;
							$141 = (($140) + ($i$028)|0);
							$142 = HEAP8[$141>>0]|0;
							$143 = ($142<<24>>24)!=(0);
							$144 = $143&1;
							$$d$0 = (($144) + ($d$027))|0;
							$sum = (($130) + ($i$028))|0;
							$145 = (($134) - ($sum))|0;
							$146 = (($140) + ($145)|0);
							$147 = HEAP8[$146>>0]|0;
							$148 = ($147<<24>>24)!=(0);
							$149 = $148 << 31 >> 31;
							$d$2 = (($$d$0) + ($149))|0;
							$150 = (($i$028) + 1)|0;
							$151 = ($150|0)<($128|0);
							if ($151) {
								$d$027 = $d$2;$i$028 = $150;
							} else {
								$d$2$lcssa = $d$2;
								break;
							}
						}
						$ispos = ($d$2$lcssa|0)>(-1);
						$neg = (0 - ($d$2$lcssa))|0;
						$135 = $ispos ? $d$2$lcssa : $neg;
						$136 = $135 << 1;
						$137 = (($128) + -1)|0;
						$138 = ($136|0)<($137|0);
						if (!($138)) {
							$$5 = 0;
							return ($$5|0);
						}
					}
					$152 = ($porosity$2|0)==(0);
					if ($152) {
						$153 = ($inner_area$3*100)|0;
						$154 = ($inner_size$0*75)|0;
						$155 = ($153|0)<($154|0);
						if (!($155)) {
							$$5 = 46;
							return ($$5|0);
						}
					}
					$156 = ($126|0)>(6);
					$157 = ($121|0)>(6);
					$or$cond60 = $156 & $157;
					if ($or$cond60) {
						$158 = (__ZNK6Bitmap12area_octagonEv($115)|0);
						$159 = ($158*100)|0;
						$160 = HEAP32[$this>>2]|0;
						$161 = (__ZNK6Bitmap12size_octagonEv($160)|0);
						$162 = ($161*95)|0;
						$163 = ($159|0)<($162|0);
						if (!($163)) {
							$$5 = 46;
							return ($$5|0);
						}
						$164 = HEAP32[$this>>2]|0;
						$165 = (__ZNK6Bitmap12area_octagonEv($164)|0);
						$166 = ($165*100)|0;
						$167 = HEAP32[$this>>2]|0;
						$168 = (__ZNK6Bitmap4areaEv($167)|0);
						$169 = ($168*95)|0;
						$170 = ($166|0)<($169|0);
						if (!($170)) {
							$$5 = 46;
							return ($$5|0);
						}
					}
					$$5 = 0;
					return ($$5|0);
				}
				$171 = ($porosity$2|0)>(1);
				if ($171) {
					$$5 = 0;
					return ($$5|0);
				}
				$172 = ($inner_area$3*100)|0;
				$173 = ($inner_size$0*85)|0;
				$174 = ($172|0)<($173|0);
				if ($174) {
					$$5 = 0;
					return ($$5|0);
				}
				$175 = ($porosity$2|0)!=(0);
				$176 = ($inner_size$0*95)|0;
				$177 = ($172|0)<($176|0);
				$or$cond = $175 & $177;
				if ($or$cond) {
					$$5 = 0;
					return ($$5|0);
				}
				$178 = HEAP32[$this>>2]|0;
				$179 = ((($178)) + 8|0);
				$180 = HEAP32[$179>>2]|0;
				$181 = HEAP32[$178>>2]|0;
				$182 = (($180) + 1)|0;
				$183 = (($182) - ($181))|0;
				$184 = ((($178)) + 12|0);
				$185 = HEAP32[$184>>2]|0;
				$186 = ((($178)) + 4|0);
				$187 = HEAP32[$186>>2]|0;
				$188 = (($185) + 1)|0;
				$189 = (($188) - ($187))|0;
				$190 = ($183|0)>($189|0);
				if ($190) {
					$191 = ((($charbox)) + 4|0);
					$192 = HEAP32[$191>>2]|0;
					$193 = ((($charbox)) + 12|0);
					$194 = HEAP32[$193>>2]|0;
					$195 = (($194) - ($192))|0;
					$196 = ($195*90)|0;
					$197 = (($196|0) / 100)&-1;
					$198 = (($197) + ($192))|0;
					$199 = ($187|0)>($198|0);
					if ($199) {
						$$5 = 95;
						return ($$5|0);
					} else {
						$200 = (($194) - ($185))|0;
						$201 = (($194) + ($192))|0;
						$202 = (($201|0) / 2)&-1;
						$203 = (($187) - ($202))|0;
						$204 = ($200|0)>=($203|0);
						$205 = ($189*5)|0;
						$206 = ($183|0)<($205|0);
						$or$cond10 = $206 | $204;
						$$11 = $or$cond10 ? 45 : 95;
						return ($$11|0);
					}
				}
				$207 = ($189|0)>($183|0);
				if (!($207)) {
					$$5 = 0;
					return ($$5|0);
				}
				$208 = ((($charbox)) + 4|0);
				$209 = HEAP32[$208>>2]|0;
				$210 = ((($charbox)) + 12|0);
				$211 = HEAP32[$210>>2]|0;
				$212 = (($211) + ($209))|0;
				$213 = (($212|0) / 2)&-1;
				$214 = ($187|0)>($213|0);
				if ($214) {
					$$5 = 44;
					return ($$5|0);
				}
				$215 = ($185|0)>($213|0);
				$$8 = $215 ? 124 : 39;
				$$5 = $$8;
				return ($$5|0);
			}
			function __ZNK8Features9test_lineERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$ = 0, $$1 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$2 = 0, $$mux = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
				var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
				var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
				var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
				var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
				var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
				var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
				var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
				var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
				var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
				var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
				var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
				var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
				var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0;
				var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
				var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
				var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
				var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $slope1 = 0, $slope2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$slope1 = sp + 4|0;
				$slope2 = sp;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($0)) + 12|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ((($0)) + 4|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($2) + 1)|0;
				$6 = (($5) - ($4))|0;
				$7 = (($6|0) / 30)&-1;
				$8 = (($7) + 1)|0;
				$9 = (($8) + ($4))|0;
				$10 = (($2) - ($8))|0;
				$11 = (__ZNK8Features5vbarsEv($this)|0);
				$12 = ($11|0)==(1);
				if ($12) {
					$13 = ((($this)) + 20|0);
					$14 = HEAP32[$13>>2]|0;
					$15 = ((($14)) + 8|0);
					$16 = HEAP32[$15>>2]|0;
					$17 = HEAP32[$14>>2]|0;
					$18 = (($16) + 1)|0;
					$19 = (($18) - ($17))|0;
					$20 = ($19|0)>(1);
					if ($20) {
						$21 = HEAP32[$this>>2]|0;
						$22 = HEAP32[$21>>2]|0;
						$23 = ((($21)) + 8|0);
						$24 = HEAP32[$23>>2]|0;
						$25 = (($24) - ($22))|0;
						$26 = (($25|0) / 10)&-1;
						$27 = (($22) + 1)|0;
						$28 = (($27) + ($26))|0;
						$29 = ($17|0)<=($28|0);
						$340 = $29;
					} else {
						$340 = 0;
					}
				} else {
					$340 = 0;
				}
				$30 = ((($this)) + 104|0);
				$31 = (__ZN7Profile6minimaEi($30,-1)|0);
				$32 = ($31|0)==(1);
				do {
					if ($32) {
						$33 = ((($this)) + 200|0);
						$34 = (__ZN7Profile6minimaEi($33,-1)|0);
						$35 = ($34|0)==(1);
						if ($35) {
							$36 = ((($this)) + 152|0);
							$37 = (__ZN7Profile5istipEv($36)|0);
							if ($37) {
								if ($340) {
									$38 = HEAP32[$this>>2]|0;
									$39 = ((($38)) + 12|0);
									$40 = HEAP32[$39>>2]|0;
									$41 = ((($38)) + 4|0);
									$42 = HEAP32[$41>>2]|0;
									$43 = (($40) + 1)|0;
									$44 = (($43) - ($42))|0;
									$45 = ((($38)) + 8|0);
									$46 = HEAP32[$45>>2]|0;
									$47 = HEAP32[$38>>2]|0;
									$48 = (($46) + 1)|0;
									$49 = (($48) - ($47))|0;
									$50 = $49 << 1;
									$51 = ($44|0)>($50|0);
									if ($51) {
										$52 = ((($this)) + 160|0);
										$53 = HEAP32[$52>>2]|0;
										$54 = ($53|0)<(0);
										if ($54) {
											__ZN7Profile10initializeEv($36);
										}
										$55 = ((($this)) + 188|0);
										$56 = ((($this)) + 192|0);
										$57 = HEAP32[$56>>2]|0;
										$58 = HEAP32[$55>>2]|0;
										$59 = (($57) - ($58))|0;
										$60 = $59 >> 2;
										$61 = ($60*50)|0;
										$62 = (($61) + -50)|0;
										$63 = (($62|0) / 100)&-1;
										$64 = (__ZN7ProfileixEi($36,$63)|0);
										$65 = $64 << 1;
										$66 = HEAP32[$this>>2]|0;
										$67 = ((($66)) + 8|0);
										$68 = HEAP32[$67>>2]|0;
										$69 = HEAP32[$66>>2]|0;
										$70 = (($68) + 1)|0;
										$71 = (($70) - ($69))|0;
										$72 = ($65|0)>($71|0);
										if ($72) {
											$73 = ((($66)) + 4|0);
											$74 = HEAP32[$73>>2]|0;
											$75 = ((($66)) + 12|0);
											$76 = HEAP32[$75>>2]|0;
											$77 = (($76) + ($74))|0;
											$78 = (($77|0) / 2)&-1;
											$79 = (($69) + ($68))|0;
											$80 = (($79|0) / 2)&-1;
											$81 = (__ZNK6Bitmap8seek_topEiib($66,$78,$80,1)|0);
											$82 = HEAP32[$this>>2]|0;
											$83 = HEAP32[$82>>2]|0;
											$84 = ((($82)) + 8|0);
											$85 = HEAP32[$84>>2]|0;
											$86 = (($85) + ($83))|0;
											$87 = (($86|0) / 2)&-1;
											$88 = (__ZNK6Bitmap10seek_rightEiib($82,$81,$87,1)|0);
											$89 = HEAP32[$this>>2]|0;
											$90 = ((($89)) + 8|0);
											$91 = HEAP32[$90>>2]|0;
											$92 = ($88|0)<($91|0);
											if ($92) {
												$93 = ((($89)) + 4|0);
												$94 = HEAP32[$93>>2]|0;
												$95 = ((($89)) + 12|0);
												$96 = HEAP32[$95>>2]|0;
												$97 = (($96) + ($94))|0;
												$98 = (($97|0) / 2)&-1;
												$99 = HEAP32[$89>>2]|0;
												$100 = (($99) + ($91))|0;
												$101 = (($100|0) / 2)&-1;
												$102 = (__ZNK6Bitmap11seek_bottomEiib($89,$98,$101,1)|0);
												$103 = HEAP32[$this>>2]|0;
												$104 = HEAP32[$103>>2]|0;
												$105 = ((($103)) + 8|0);
												$106 = HEAP32[$105>>2]|0;
												$107 = (($106) + ($104))|0;
												$108 = (($107|0) / 2)&-1;
												$109 = (__ZNK6Bitmap10seek_rightEiib($103,$102,$108,1)|0);
												$110 = HEAP32[$this>>2]|0;
												$111 = ((($110)) + 8|0);
												$112 = HEAP32[$111>>2]|0;
												$113 = ($109|0)<($112|0);
												if ($113) {
													$$2 = 67;
													STACKTOP = sp;return ($$2|0);
												}
											}
										}
									}
								}
								$114 = (__ZNK8Features5hbarsEv($this)|0);
								$115 = ($114|0)==(2);
								if ($115) {
									$116 = ((($this)) + 8|0);
									$117 = HEAP32[$116>>2]|0;
									$118 = ((($117)) + 4|0);
									$119 = HEAP32[$118>>2]|0;
									$120 = ($119|0)>($9|0);
									if (!($120)) {
										$121 = ((($117)) + 12|0);
										$122 = HEAP32[$121>>2]|0;
										$123 = (1 - ($119))|0;
										$124 = (($123) + ($122))|0;
										$125 = $124 << 2;
										$126 = HEAP32[$this>>2]|0;
										$127 = ((($126)) + 12|0);
										$128 = HEAP32[$127>>2]|0;
										$129 = ((($126)) + 4|0);
										$130 = HEAP32[$129>>2]|0;
										$131 = (($128) + 1)|0;
										$132 = (($131) - ($130))|0;
										$133 = ($125|0)>($132|0);
										if (!($133)) {
											$134 = ((($117)) + 28|0);
											$135 = HEAP32[$134>>2]|0;
											$136 = ($135|0)<($10|0);
											if (!($136)) {
												$137 = ((($117)) + 20|0);
												$138 = HEAP32[$137>>2]|0;
												$139 = (($135) + 1)|0;
												$140 = (($139) - ($138))|0;
												$141 = $140 << 2;
												$142 = ($141|0)>($132|0);
												if (!($142)) {
													if ($340) {
														$143 = ((($126)) + 8|0);
														$144 = HEAP32[$143>>2]|0;
														$145 = HEAP32[$126>>2]|0;
														$146 = (($144) + 1)|0;
														$147 = (($146) - ($145))|0;
														$148 = $147 << 1;
														$149 = ($132|0)>($148|0);
														$$mux = $149 ? 91 : 99;
														$$2 = $$mux;
														STACKTOP = sp;return ($$2|0);
													} else {
														$150 = ((($this)) + 56|0);
														$151 = (__ZN7Profile5ispitEv($150)|0);
														if ($151) {
															$$2 = 99;
														} else {
															break;
														}
														STACKTOP = sp;return ($$2|0);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				} while(0);
				$152 = (__ZN7Profile6minimaEi($30,-1)|0);
				$153 = ($152|0)==(1);
				L30: do {
					if ($153) {
						$154 = ((($this)) + 56|0);
						$155 = (__ZN7Profile6minimaEi($154,-1)|0);
						$156 = ($155|0)==(1);
						if ($156) {
							$157 = ((($this)) + 152|0);
							$158 = (__ZN7Profile6minimaEi($157,-1)|0);
							$159 = ($158|0)==(1);
							if ($159) {
								$160 = HEAP32[$this>>2]|0;
								$161 = ((($160)) + 12|0);
								$162 = HEAP32[$161>>2]|0;
								$163 = ((($160)) + 4|0);
								$164 = HEAP32[$163>>2]|0;
								$165 = (($162) + 1)|0;
								$166 = (($165) - ($164))|0;
								$167 = $166 << 1;
								$168 = ((($160)) + 8|0);
								$169 = HEAP32[$168>>2]|0;
								$170 = HEAP32[$160>>2]|0;
								$171 = (($169) + 1)|0;
								$172 = (($171) - ($170))|0;
								$173 = ($167|0)<($172|0);
								if (!($173)) {
									$174 = (__ZN7Profile8straightEPi($154,$slope1)|0);
									if ($174) {
										$175 = (__ZN7Profile8straightEPi($157,$slope2)|0);
										if ($175) {
											$176 = HEAP32[$slope1>>2]|0;
											$177 = HEAP32[$slope2>>2]|0;
											$178 = $177 & $176;
											$179 = ($178|0)<(0);
											$180 = ((($this)) + 200|0);
											if ($179) {
												$181 = (__ZN7Profile6minimaEi($180,-1)|0);
												$182 = ($181|0)==(2);
												if ($182) {
													$$1 = 94;
													break;
												}
											}
											$183 = (__ZN7Profile6minimaEi($180,-1)|0);
											$184 = ($183|0)==(1);
											if (!($184)) {
												$$1 = 0;
												break;
											}
											$185 = HEAP32[$slope1>>2]|0;
											$186 = ($185|0)<(0);
											$187 = HEAP32[$slope2>>2]|0;
											$188 = ($187|0)>(0);
											$or$cond3 = $186 & $188;
											if ($or$cond3) {
												$189 = HEAP32[$this>>2]|0;
												$190 = ((($charbox)) + 4|0);
												$191 = HEAP32[$190>>2]|0;
												$192 = ((($charbox)) + 12|0);
												$193 = HEAP32[$192>>2]|0;
												$194 = (($193) + ($191))|0;
												$195 = (($194|0) / 2)&-1;
												$196 = (__ZNK9Rectangle10v_includesEi($189,$195)|0);
												$197 = HEAP32[$this>>2]|0;
												if (!($196)) {
													$217 = ((($197)) + 4|0);
													$218 = HEAP32[$217>>2]|0;
													$219 = HEAP32[$190>>2]|0;
													$220 = HEAP32[$192>>2]|0;
													$221 = (($220) + ($219))|0;
													$222 = (($221|0) / 2)&-1;
													$223 = ($218|0)<($222|0);
													$$16 = $223 ? 39 : 44;
													$$1 = $$16;
													break;
												}
												$198 = (__ZNK6Bitmap4areaEv($197)|0);
												$199 = ($198*10)|0;
												$200 = HEAP32[$this>>2]|0;
												$201 = ((($200)) + 12|0);
												$202 = HEAP32[$201>>2]|0;
												$203 = ((($200)) + 4|0);
												$204 = HEAP32[$203>>2]|0;
												$205 = (($202) + 1)|0;
												$206 = (($205) - ($204))|0;
												$207 = ((($200)) + 8|0);
												$208 = HEAP32[$207>>2]|0;
												$209 = HEAP32[$200>>2]|0;
												$210 = (($208) + 1)|0;
												$211 = (($210) - ($209))|0;
												$212 = ($206*3)|0;
												$213 = Math_imul($212, $211)|0;
												$214 = ($199|0)<($213|0);
												if ($214) {
													$$1 = 47;
													break;
												}
												$215 = $211 << 1;
												$216 = ($206|0)>($215|0);
												$$ = $216 ? 108 : 0;
												$$1 = $$;
												break;
											}
											$224 = ($185|0)>(0);
											$225 = ($187|0)<(0);
											$or$cond5 = $224 & $225;
											if (!($or$cond5)) {
												$$1 = 0;
												break;
											}
											$226 = HEAP32[$this>>2]|0;
											$227 = ((($226)) + 12|0);
											$228 = HEAP32[$227>>2]|0;
											$229 = ((($charbox)) + 4|0);
											$230 = HEAP32[$229>>2]|0;
											$231 = ((($charbox)) + 12|0);
											$232 = HEAP32[$231>>2]|0;
											$233 = (($232) + ($230))|0;
											$234 = (($233|0) / 2)&-1;
											$235 = ($228|0)>($234|0);
											if (!($235)) {
												$$1 = 96;
												break;
											}
											$236 = ((($226)) + 8|0);
											$237 = HEAP32[$236>>2]|0;
											$238 = HEAP32[$226>>2]|0;
											$239 = (($237) + 1)|0;
											$240 = (($239) - ($238))|0;
											$241 = ($240*3)|0;
											$242 = ((($226)) + 4|0);
											$243 = HEAP32[$242>>2]|0;
											$244 = (($228) + 1)|0;
											$245 = (($244) - ($243))|0;
											$246 = ($241|0)>($245|0);
											if ($246) {
												$247 = (1 - ($230))|0;
												$248 = (($247) + ($232))|0;
												$249 = ($245|0)>($248|0);
												if ($249) {
													$$1 = 92;
													break;
												}
											}
											$250 = $240 << 1;
											$251 = ($250|0)<($245|0);
											$$19 = $251 ? 0 : 92;
											$$1 = $$19;
											break;
										}
									}
								}
							}
						}
						$252 = ((($this)) + 200|0);
						$253 = (__ZN7Profile6minimaEi($252,-1)|0);
						$254 = ($253|0)==(1);
						do {
							if ($254) {
								$255 = HEAP32[$this>>2]|0;
								$256 = ((($255)) + 8|0);
								$257 = HEAP32[$256>>2]|0;
								$258 = HEAP32[$255>>2]|0;
								$259 = (($257) + 1)|0;
								$260 = (($259) - ($258))|0;
								$261 = $260 << 1;
								$262 = ((($255)) + 12|0);
								$263 = HEAP32[$262>>2]|0;
								$264 = ((($255)) + 4|0);
								$265 = HEAP32[$264>>2]|0;
								$266 = (($263) + 1)|0;
								$267 = (($266) - ($265))|0;
								$268 = ($261|0)<($267|0);
								if (!($268)) {
									$269 = (__ZN7Profile8straightEPi($30,$slope1)|0);
									if ($269) {
										$270 = (__ZN7Profile8straightEPi($252,$slope2)|0);
										if ($270) {
											$271 = (__ZN7Profile6minimaEi($154,-1)|0);
											$272 = ($271|0)==(1);
											if ($272) {
												$273 = ((($this)) + 152|0);
												$274 = (__ZN7Profile6minimaEi($273,-1)|0);
												$275 = ($274|0)==(1);
												if ($275) {
													$276 = HEAP32[$slope1>>2]|0;
													$277 = ($276|0)<(0);
													$278 = HEAP32[$slope2>>2]|0;
													$279 = ($278|0)>(0);
													$or$cond7 = $277 & $279;
													if ($or$cond7) {
														$280 = HEAP32[$this>>2]|0;
														$281 = ((($charbox)) + 4|0);
														$282 = HEAP32[$281>>2]|0;
														$283 = ((($charbox)) + 12|0);
														$284 = HEAP32[$283>>2]|0;
														$285 = (($284) + ($282))|0;
														$286 = (($285|0) / 2)&-1;
														$287 = (__ZNK9Rectangle10v_includesEi($280,$286)|0);
														if ($287) {
															$$1 = 47;
															break L30;
														}
														$288 = HEAP32[$this>>2]|0;
														$289 = ((($288)) + 4|0);
														$290 = HEAP32[$289>>2]|0;
														$291 = HEAP32[$281>>2]|0;
														$292 = HEAP32[$283>>2]|0;
														$293 = (($292) + ($291))|0;
														$294 = (($293|0) / 2)&-1;
														$295 = ($290|0)<($294|0);
														$$17 = $295 ? 39 : 44;
														$$1 = $$17;
														break L30;
													} else {
														$296 = ($276|0)>(0);
														$297 = ($278|0)<(0);
														$or$cond9 = $296 & $297;
														if (!($or$cond9)) {
															break;
														}
														$298 = HEAP32[$this>>2]|0;
														$299 = ((($298)) + 12|0);
														$300 = HEAP32[$299>>2]|0;
														$301 = ((($charbox)) + 4|0);
														$302 = HEAP32[$301>>2]|0;
														$303 = ((($charbox)) + 12|0);
														$304 = HEAP32[$303>>2]|0;
														$305 = (($304) + ($302))|0;
														$306 = (($305|0) / 2)&-1;
														$307 = ($300|0)>($306|0);
														$$18 = $307 ? 92 : 96;
														$$1 = $$18;
														break L30;
													}
												}
											}
											$308 = HEAP32[$this>>2]|0;
											$309 = ((($308)) + 8|0);
											$310 = HEAP32[$309>>2]|0;
											$311 = HEAP32[$308>>2]|0;
											$312 = (($310) + 1)|0;
											$313 = (($312) - ($311))|0;
											$314 = $313 << 1;
											$315 = ((($308)) + 12|0);
											$316 = HEAP32[$315>>2]|0;
											$317 = ((($308)) + 4|0);
											$318 = HEAP32[$317>>2]|0;
											$319 = (($316) + 1)|0;
											$320 = (($319) - ($318))|0;
											$321 = ($314|0)<($320|0);
											if (!($321)) {
												$322 = HEAP32[$slope1>>2]|0;
												$323 = HEAP32[$slope2>>2]|0;
												$324 = $323 & $322;
												$325 = ($324|0)<(0);
												if ($325) {
													$326 = (__ZN7Profile6minimaEi($154,-1)|0);
													$327 = ($326|0)==(1);
													if ($327) {
														$328 = ((($this)) + 152|0);
														$329 = (__ZN7Profile6minimaEi($328,-1)|0);
														$330 = ($329|0)==(2);
														if ($330) {
															$$1 = 60;
															break L30;
														}
													}
												}
												$331 = HEAP32[$slope1>>2]|0;
												$332 = ($331|0)>(0);
												$333 = HEAP32[$slope2>>2]|0;
												$334 = ($333|0)>(0);
												$or$cond13 = $332 & $334;
												if ($or$cond13) {
													$335 = (__ZN7Profile6minimaEi($154,-1)|0);
													$336 = ($335|0)==(2);
													if ($336) {
														$337 = ((($this)) + 152|0);
														$338 = (__ZN7Profile6minimaEi($337,-1)|0);
														$339 = ($338|0)==(1);
														if ($339) {
															$$1 = 62;
															break L30;
														}
													}
												}
											}
										}
									}
								}
							}
						} while(0);
						$$1 = 0;
					} else {
						$$1 = 0;
					}
				} while(0);
				$$2 = $$1;
				STACKTOP = sp;return ($$2|0);
			}
			function __ZNK8Features13test_49ARegpqERK9Rectangle($this,$charbox) {
				$this = $this|0;
				$charbox = $charbox|0;
				var $$04 = 0, $$06 = 0, $$15 = 0, $$17 = 0, $$3 = 0, $$311 = 0, $$4 = 0, $$412 = 0, $$6 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre52 = 0, $$pre53 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
				var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
				var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
				var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
				var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
				var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
				var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
				var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
				var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
				var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
				var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
				var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
				var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
				var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
				var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
				var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
				var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
				var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
				var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
				var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
				var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
				var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0 = 0, $cond = 0, $hdiff = 0, $hlp = 0, $htp = 0;
				var $hwp = 0, $not$ = 0, $or$cond = 0, $row$0 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i16 = 0, $scevgep$i$i$i$i21 = 0, $scevgep$i$i$i$i26 = 0, $scevgep$i$i$i$i31 = 0, $scevgep$i$i$i$i37 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i17 = 0, $scevgep4$i$i$i$i22 = 0, $scevgep4$i$i$i$i27 = 0, $scevgep4$i$i$i$i32 = 0, $scevgep4$i$i$i$i38 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hlp = sp + 104|0;
				$htp = sp + 56|0;
				$hwp = sp + 8|0;
				$hdiff = sp;
				$0 = HEAP32[$this>>2]|0;
				$1 = (__ZNK4Blob4holeEi($0,0)|0);
				$2 = ((($this)) + 200|0);
				$3 = HEAP32[$this>>2]|0;
				$4 = ((($3)) + 12|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = ((($3)) + 4|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = (($5) + 1)|0;
				$9 = (($8) - ($7))|0;
				$10 = (($9|0) / 10)&-1;
				$11 = (($10) + 1)|0;
				$12 = (__ZN7Profile6minimaEi($2,$11)|0);
				$13 = ($12|0)==(2);
				if ($13) {
					$14 = (__ZN7Profile6isctipEi($2,50)|0);
					if ($14) {
						$15 = ((($this)) + 104|0);
						$16 = (__ZN7Profile6minimaEi($15,-1)|0);
						$17 = ($16|0)==(1);
						if ($17) {
							$18 = (__ZN7Profile6isvpitEv($15)|0);
							if ($18) {
								$$6 = 65;
								STACKTOP = sp;return ($$6|0);
							}
							$19 = ((($this)) + 152|0);
							$20 = (__ZN7Profile10decreasingEii($19,1,-1)|0);
							if ($20) {
								$$6 = 65;
								STACKTOP = sp;return ($$6|0);
							}
							$21 = ((($this)) + 160|0);
							$22 = HEAP32[$21>>2]|0;
							$23 = ($22|0)<(0);
							if ($23) {
								__ZN7Profile10initializeEv($19);
							}
							$24 = ((($this)) + 188|0);
							$25 = ((($this)) + 192|0);
							$26 = HEAP32[$25>>2]|0;
							$27 = HEAP32[$24>>2]|0;
							$28 = (($26) - ($27))|0;
							$29 = $28 >> 2;
							$30 = ($29*20)|0;
							$31 = (($30) + -20)|0;
							$32 = (($31|0) / 100)&-1;
							$33 = (__ZN7Profile10decreasingEii($19,1,$32)|0);
							if ($33) {
								$34 = ((($this)) + 56|0);
								$35 = ((($this)) + 64|0);
								$36 = HEAP32[$35>>2]|0;
								$37 = ($36|0)<(0);
								if ($37) {
									__ZN7Profile10initializeEv($34);
								}
								$38 = ((($this)) + 92|0);
								$39 = ((($this)) + 96|0);
								$40 = HEAP32[$39>>2]|0;
								$41 = HEAP32[$38>>2]|0;
								$42 = (($40) - ($41))|0;
								$43 = $42 >> 2;
								$44 = ($43*20)|0;
								$45 = (($44) + -20)|0;
								$46 = (($45|0) / 100)&-1;
								$47 = (__ZN7Profile10decreasingEii($34,1,$46)|0);
								if ($47) {
									$$6 = 65;
									STACKTOP = sp;return ($$6|0);
								}
							}
							$48 = (__ZNK8Features5hbarsEv($this)|0);
							$49 = ($48|0)==(2);
							if ($49) {
								$50 = ((($this)) + 8|0);
								$51 = HEAP32[$50>>2]|0;
								$52 = ((($51)) + 24|0);
								$53 = HEAP32[$52>>2]|0;
								$54 = ((($51)) + 16|0);
								$55 = HEAP32[$54>>2]|0;
								$56 = (($53) + 1)|0;
								$57 = (($56) - ($55))|0;
								$58 = HEAP32[$this>>2]|0;
								$59 = ((($58)) + 8|0);
								$60 = HEAP32[$59>>2]|0;
								$61 = HEAP32[$58>>2]|0;
								$62 = (($60) + 1)|0;
								$63 = (($62) - ($61))|0;
								$64 = ($57|0)<($63|0);
								if (!($64)) {
									$65 = ((($51)) + 20|0);
									$66 = HEAP32[$65>>2]|0;
									$67 = ((($58)) + 4|0);
									$68 = HEAP32[$67>>2]|0;
									$69 = (($66) - ($68))|0;
									$70 = ((($51)) + 28|0);
									$71 = HEAP32[$70>>2]|0;
									$72 = (($71) - ($68))|0;
									$73 = (__ZN7Profile4areaEii($19,$69,$72)|0);
									$74 = ((($this)) + 56|0);
									$75 = (__ZN7Profile4areaEii($74,$69,$72)|0);
									$76 = ($73|0)>($75|0);
									if (!($76)) {
										$$6 = 65;
										STACKTOP = sp;return ($$6|0);
									}
								}
							}
							$$6 = 82;
							STACKTOP = sp;return ($$6|0);
						}
					}
				}
				$77 = HEAP32[$1>>2]|0;
				$78 = ((($1)) + 8|0);
				$79 = HEAP32[$78>>2]|0;
				$80 = (($79) + ($77))|0;
				$81 = (($80|0) / 2)&-1;
				$82 = HEAP32[$this>>2]|0;
				$83 = ((($1)) + 12|0);
				$84 = HEAP32[$83>>2]|0;
				$85 = (__ZNK6Bitmap11seek_bottomEiib($82,$84,$81,0)|0);
				$86 = (($85) + 1)|0;
				$87 = HEAP32[$this>>2]|0;
				$88 = ((($87)) + 4|0);
				$89 = HEAP32[$88>>2]|0;
				$90 = ((($87)) + 12|0);
				$91 = HEAP32[$90>>2]|0;
				$92 = (($91) - ($89))|0;
				$93 = ($92*90)|0;
				$94 = (($93|0) / 100)&-1;
				$95 = (($94) + ($89))|0;
				$96 = ($86|0)<($95|0);
				if ($96) {
					$102 = $91;$103 = $87;$col$0 = $81;$row$0 = $86;
				} else {
					$97 = HEAP32[$1>>2]|0;
					$98 = HEAP32[$83>>2]|0;
					$99 = (__ZNK6Bitmap11seek_bottomEiib($87,$98,$97,0)|0);
					$100 = (($99) + 1)|0;
					$$pre = HEAP32[$this>>2]|0;
					$$phi$trans$insert = ((($$pre)) + 12|0);
					$$pre52 = HEAP32[$$phi$trans$insert>>2]|0;
					$102 = $$pre52;$103 = $$pre;$col$0 = $97;$row$0 = $100;
				}
				$101 = ($row$0|0)<($102|0);
				if (!($101)) {
					$$6 = 0;
					STACKTOP = sp;return ($$6|0);
				}
				$104 = (__ZNK6Bitmap12escape_rightEii($103,$row$0,$col$0)|0);
				if ($104) {
					$105 = ((($this)) + 56|0);
					$106 = (__ZN7Profile5ispitEv($105)|0);
					if ($106) {
						$107 = HEAP32[$this>>2]|0;
						$108 = HEAP32[$78>>2]|0;
						$109 = (__ZNK6Bitmap11seek_bottomEiib($107,$row$0,$108,1)|0);
						$110 = HEAP32[$this>>2]|0;
						$111 = ((($110)) + 12|0);
						$112 = HEAP32[$111>>2]|0;
						$113 = ($109|0)<($112|0);
						if ($113) {
							$$6 = 101;
							STACKTOP = sp;return ($$6|0);
						}
					}
					$114 = (__ZN7Profile8isconvexEv($105)|0);
					if ($114) {
						$115 = HEAP32[$this>>2]|0;
						$116 = HEAP32[$1>>2]|0;
						$117 = HEAP32[$78>>2]|0;
						$118 = (($117) + ($116))|0;
						$119 = (($118|0) / 2)&-1;
						$120 = (__ZNK6Bitmap11seek_bottomEiib($115,$row$0,$119,1)|0);
						$121 = HEAP32[$this>>2]|0;
						$122 = ((($121)) + 12|0);
						$123 = HEAP32[$122>>2]|0;
						$124 = ($120|0)<($123|0);
						if ($124) {
							$$6 = 101;
							STACKTOP = sp;return ($$6|0);
						}
					}
					$125 = (__ZN7Profile5ispitEv($2)|0);
					if ($125) {
						$126 = HEAP32[$this>>2]|0;
						$127 = HEAP32[$78>>2]|0;
						$128 = (__ZNK6Bitmap11seek_bottomEiib($126,$row$0,$127,1)|0);
						$129 = HEAP32[$this>>2]|0;
						$130 = ((($129)) + 4|0);
						$131 = HEAP32[$130>>2]|0;
						$132 = ((($129)) + 12|0);
						$133 = HEAP32[$132>>2]|0;
						$134 = (($133) - ($131))|0;
						$135 = ($134*75)|0;
						$136 = (($135|0) / 100)&-1;
						$137 = (($136) + ($131))|0;
						$138 = ($128|0)<($137|0);
						if ($138) {
							$$6 = 103;
							STACKTOP = sp;return ($$6|0);
						}
						$not$ = ($128|0)<($133|0);
						if ($not$) {
							$$6 = 101;
							STACKTOP = sp;return ($$6|0);
						}
					}
					$$6 = 112;
					STACKTOP = sp;return ($$6|0);
				}
				$139 = HEAP32[$this>>2]|0;
				$140 = (__ZNK6Bitmap11escape_leftEii($139,$row$0,$col$0)|0);
				L53: do {
					if ($140) {
						__ZN7ProfileC2ERK6BitmapNS_4TypeE($hlp,$1,0);
						__THREW__ = 0;
						invoke_viii(160,($htp|0),($1|0),1);
						$141 = __THREW__; __THREW__ = 0;
						$142 = $141&1;
						if ($142) {
							$201 = ___cxa_find_matching_catch_2()|0;
							$202 = tempRet0;
							$$15 = $202;$$17 = $201;
						} else {
							__THREW__ = 0;
							invoke_viii(160,($hwp|0),($1|0),5);
							$143 = __THREW__; __THREW__ = 0;
							$144 = $143&1;
							if ($144) {
								$203 = ___cxa_find_matching_catch_2()|0;
								$204 = tempRet0;
								$$04 = $204;$$06 = $203;
							} else {
								__THREW__ = 0;
								$145 = (invoke_ii(175,($this|0))|0);
								$146 = __THREW__; __THREW__ = 0;
								$147 = $146&1;
								L61: do {
									if (!($147)) {
										$148 = ($145|0)==(1);
										if ($148) {
											$149 = ((($this)) + 20|0);
											$150 = HEAP32[$149>>2]|0;
											$151 = HEAP32[$150>>2]|0;
											$152 = ((($150)) + 8|0);
											$153 = HEAP32[$152>>2]|0;
											$154 = (($153) + ($151))|0;
											$155 = (($154|0) / 2)&-1;
											$156 = HEAP32[$this>>2]|0;
											$157 = HEAP32[$156>>2]|0;
											$158 = ((($156)) + 8|0);
											$159 = HEAP32[$158>>2]|0;
											$160 = (($159) + ($157))|0;
											$161 = (($160|0) / 2)&-1;
											$162 = ($155|0)>($161|0);
											if ($162) {
												__THREW__ = 0;
												$163 = (invoke_iiii(185,($hlp|0),1,-1)|0);
												$164 = __THREW__; __THREW__ = 0;
												$165 = $164&1;
												if ($165) {
													break;
												}
												if ($163) {
													__THREW__ = 0;
													$166 = (invoke_iiii(185,($htp|0),1,-1)|0);
													$167 = __THREW__; __THREW__ = 0;
													$168 = $167&1;
													if ($168) {
														break;
													}
													if ($166) {
														$169 = ((($hwp)) + 8|0);
														$170 = HEAP32[$169>>2]|0;
														$171 = ($170|0)<(0);
														if ($171) {
															__THREW__ = 0;
															invoke_vi(141,($hwp|0));
															$172 = __THREW__; __THREW__ = 0;
															$173 = $172&1;
															if ($173) {
																break;
															}
														}
														$174 = ((($hwp)) + 36|0);
														$175 = ((($hwp)) + 40|0);
														$176 = HEAP32[$175>>2]|0;
														$177 = HEAP32[$174>>2]|0;
														$178 = (($176) - ($177))|0;
														$179 = $178 >> 2;
														$180 = ($179*30)|0;
														$181 = (($180) + -30)|0;
														$182 = (($181|0) / 100)&-1;
														__THREW__ = 0;
														$183 = (invoke_iii(139,($hwp|0),($182|0))|0);
														$184 = __THREW__; __THREW__ = 0;
														$185 = $184&1;
														if ($185) {
															break;
														}
														$186 = HEAP32[$169>>2]|0;
														$187 = ($186|0)<(0);
														if ($187) {
															__THREW__ = 0;
															invoke_vi(141,($hwp|0));
															$188 = __THREW__; __THREW__ = 0;
															$189 = $188&1;
															if ($189) {
																break;
															}
														}
														$190 = HEAP32[$175>>2]|0;
														$191 = HEAP32[$174>>2]|0;
														$192 = (($190) - ($191))|0;
														$193 = $192 >> 2;
														$194 = ($193*70)|0;
														$195 = (($194) + -70)|0;
														$196 = (($195|0) / 100)&-1;
														__THREW__ = 0;
														$197 = (invoke_iii(139,($hwp|0),($196|0))|0);
														$198 = __THREW__; __THREW__ = 0;
														$199 = $198&1;
														if ($199) {
															break;
														}
														$200 = ($183|0)<($197|0);
														if ($200) {
															$$4 = 52;$$412 = 1;
														} else {
															label = 51;
														}
													} else {
														label = 51;
													}
												} else {
													label = 51;
												}
											} else {
												label = 51;
											}
										} else {
											label = 51;
										}
										L78: do {
											if ((label|0) == 51) {
												$218 = ((($this)) + 152|0);
												__THREW__ = 0;
												$219 = (invoke_ii(171,($218|0))|0);
												$220 = __THREW__; __THREW__ = 0;
												$221 = $220&1;
												if ($221) {
													break L61;
												}
												do {
													if ($219) {
														__THREW__ = 0;
														$222 = (invoke_iii(143,($218|0),-1)|0);
														$223 = __THREW__; __THREW__ = 0;
														$224 = $223&1;
														if ($224) {
															break L61;
														}
														$225 = ($222|0)==(1);
														if ($225) {
															__THREW__ = 0;
															$226 = (invoke_iiii(142,($218|0),0,-1)|0);
															$227 = __THREW__; __THREW__ = 0;
															$228 = $227&1;
															if ($228) {
																break L61;
															}
															$229 = ((($this)) + 160|0);
															$230 = HEAP32[$229>>2]|0;
															$231 = ($230|0)<(0);
															if ($231) {
																__THREW__ = 0;
																invoke_vi(141,($218|0));
																$232 = __THREW__; __THREW__ = 0;
																$233 = $232&1;
																if ($233) {
																	break L61;
																}
															}
															$234 = ((($this)) + 188|0);
															$235 = ((($this)) + 192|0);
															$236 = HEAP32[$235>>2]|0;
															$237 = HEAP32[$234>>2]|0;
															$238 = (($236) - ($237))|0;
															$239 = $238 >> 2;
															$240 = ($239*70)|0;
															$241 = (($240) + -70)|0;
															$242 = (($241|0) / 100)&-1;
															$243 = ($226|0)<($242|0);
															if (!($243)) {
																break;
															}
															$244 = ((($this)) + 104|0);
															__THREW__ = 0;
															$245 = (invoke_ii(171,($244|0))|0);
															$246 = __THREW__; __THREW__ = 0;
															$247 = $246&1;
															if ($247) {
																break L61;
															}
															if (!($245)) {
																break;
															}
															$248 = ((($charbox)) + 12|0);
															$249 = HEAP32[$248>>2]|0;
															$250 = HEAP32[$this>>2]|0;
															__THREW__ = 0;
															$251 = (invoke_ii(170,($218|0))|0);
															$252 = __THREW__; __THREW__ = 0;
															$253 = $252&1;
															if ($253) {
																break L61;
															}
															$254 = $251 ? 80 : 90;
															$255 = ((($250)) + 4|0);
															$256 = HEAP32[$255>>2]|0;
															$257 = ((($250)) + 12|0);
															$258 = HEAP32[$257>>2]|0;
															$259 = (($258) - ($256))|0;
															$260 = Math_imul($259, $254)|0;
															$261 = (($260|0) / 100)&-1;
															$262 = (($261) + ($256))|0;
															$263 = ($249|0)>($262|0);
															if ($263) {
																$$4 = 57;$$412 = 1;
																break L78;
															}
														}
													}
												} while(0);
												$264 = HEAP32[$this>>2]|0;
												__THREW__ = 0;
												$265 = (invoke_iii(153,($264|0),($hdiff|0))|0);
												$266 = __THREW__; __THREW__ = 0;
												$267 = $266&1;
												if ($267) {
													break L61;
												}
												$268 = HEAP32[$hdiff>>2]|0;
												$269 = ($268|0)>(0);
												$or$cond = $265 & $269;
												L95: do {
													if ($or$cond) {
														$270 = HEAP32[$83>>2]|0;
														$271 = HEAP32[$this>>2]|0;
														$272 = ((($271)) + 4|0);
														$273 = HEAP32[$272>>2]|0;
														$274 = ((($271)) + 12|0);
														$275 = HEAP32[$274>>2]|0;
														$276 = (($275) + ($273))|0;
														$277 = (($276|0) / 2)&-1;
														$278 = ($270|0)<($277|0);
														do {
															if ($278) {
																$279 = HEAP32[$78>>2]|0;
																$280 = (($279) + 2)|0;
																$281 = ((($271)) + 8|0);
																$282 = HEAP32[$281>>2]|0;
																$283 = ($280|0)>($282|0);
																if ($283) {
																	break;
																}
																$284 = (($270) + 1)|0;
																$285 = (($279) + 1)|0;
																$286 = ((($271)) + 4|0);
																$287 = HEAP32[$286>>2]|0;
																$288 = (($284) - ($287))|0;
																$289 = ((($271)) + 16|0);
																$290 = HEAP32[$289>>2]|0;
																$291 = HEAP32[$271>>2]|0;
																$292 = (($285) - ($291))|0;
																$293 = (($290) + (($288*12)|0)|0);
																$294 = HEAP32[$293>>2]|0;
																$295 = (($294) + ($292)|0);
																$296 = HEAP8[$295>>0]|0;
																$297 = ($296<<24>>24)==(0);
																if ($297) {
																	$$3 = 115;$$311 = 1;
																	break L95;
																}
																$298 = (($280) - ($291))|0;
																$299 = (($294) + ($298)|0);
																$300 = HEAP8[$299>>0]|0;
																$301 = ($300<<24>>24)==(0);
																if ($301) {
																	$$3 = 115;$$311 = 1;
																	break L95;
																}
																__THREW__ = 0;
																$302 = (invoke_iii(150,($218|0),50)|0);
																$303 = __THREW__; __THREW__ = 0;
																$304 = $303&1;
																if ($304) {
																	break L61;
																}
																if ($302) {
																	$$3 = 115;$$311 = 1;
																	break L95;
																}
															}
														} while(0);
														$$3 = 103;$$311 = 1;
													} else {
														$305 = HEAP32[$this>>2]|0;
														$306 = ((($305)) + 4|0);
														$307 = HEAP32[$306>>2]|0;
														$308 = ((($305)) + 12|0);
														$309 = HEAP32[$308>>2]|0;
														$310 = (($309) - ($307))|0;
														$311 = ($310*85)|0;
														$312 = (($311|0) / 100)&-1;
														$313 = (($312) + ($307))|0;
														$314 = ($row$0|0)>($313|0);
														if ($314) {
															$315 = ((($this)) + 104|0);
															__THREW__ = 0;
															$316 = (invoke_ii(171,($315|0))|0);
															$317 = __THREW__; __THREW__ = 0;
															$318 = $317&1;
															if ($318) {
																break L61;
															}
															if ($316) {
																$$3 = 81;$$311 = 1;
																break;
															}
															$$pre53 = HEAP32[$this>>2]|0;
															$319 = $$pre53;
														} else {
															$319 = $305;
														}
														__THREW__ = 0;
														$320 = (invoke_iiiii(147,($319|0),($row$0|0),($col$0|0),1)|0);
														$321 = __THREW__; __THREW__ = 0;
														$322 = $321&1;
														if ($322) {
															break L61;
														}
														$323 = HEAP32[$this>>2]|0;
														$324 = ((($323)) + 12|0);
														$325 = HEAP32[$324>>2]|0;
														$326 = ($320|0)<($325|0);
														if ($326) {
															$327 = $320 << 1;
															$328 = (($327) + ($row$0))|0;
															$329 = (($328|0) / 3)&-1;
															$330 = ((($323)) + 4|0);
															$331 = HEAP32[$330>>2]|0;
															$332 = (($329) - ($331))|0;
															__THREW__ = 0;
															$333 = (invoke_iiii(145,($218|0),($332|0),2)|0);
															$334 = __THREW__; __THREW__ = 0;
															$335 = $334&1;
															if ($335) {
																break L61;
															}
															if ($333) {
																$$3 = 103;$$311 = 1;
																break;
															}
														}
														__THREW__ = 0;
														$336 = (invoke_iii(143,($2|0),-1)|0);
														$337 = __THREW__; __THREW__ = 0;
														$338 = $337&1;
														if ($338) {
															break L61;
														}
														$339 = ($336|0)==(1);
														if (!($339)) {
															$$3 = 0;$$311 = 0;
															break;
														}
														$340 = HEAP32[$83>>2]|0;
														$341 = ((($1)) + 4|0);
														$342 = HEAP32[$341>>2]|0;
														$343 = (($340) + 1)|0;
														$344 = (($343) - ($342))|0;
														$345 = ((($charbox)) + 12|0);
														$346 = HEAP32[$345>>2]|0;
														$347 = ((($charbox)) + 4|0);
														$348 = HEAP32[$347>>2]|0;
														$349 = (($346) + 1)|0;
														$350 = (($349) - ($348))|0;
														$351 = ($344|0)<($350|0);
														if (!($351)) {
															$$3 = 81;$$311 = 1;
															break;
														}
														$352 = HEAP32[$78>>2]|0;
														$353 = HEAP32[$this>>2]|0;
														$354 = HEAP32[$353>>2]|0;
														$355 = ((($353)) + 8|0);
														$356 = HEAP32[$355>>2]|0;
														$357 = (($356) + ($354))|0;
														$358 = (($357|0) / 2)&-1;
														$359 = ($352|0)<($358|0);
														if ($359) {
															$360 = ((($353)) + 4|0);
															$361 = HEAP32[$360>>2]|0;
															$362 = ((($353)) + 12|0);
															$363 = HEAP32[$362>>2]|0;
															$364 = (($363) + ($361))|0;
															$365 = (($364|0) / 2)&-1;
															$366 = ($340|0)<($365|0);
															if ($366) {
																$$3 = 50;$$311 = 1;
																break;
															}
														}
														$$3 = 113;$$311 = 1;
													}
												} while(0);
												$$4 = $$3;$$412 = $$311;
											}
										} while(0);
										$367 = ((($hwp)) + 36|0);
										$368 = HEAP32[$367>>2]|0;
										$369 = ($368|0)==(0|0);
										$370 = $368;
										if (!($369)) {
											$371 = ((($hwp)) + 40|0);
											$372 = HEAP32[$371>>2]|0;
											$373 = ($372|0)==($368|0);
											if (!($373)) {
												$scevgep$i$i$i$i31 = ((($372)) + -4|0);
												$374 = $scevgep$i$i$i$i31;
												$375 = (($374) - ($370))|0;
												$376 = $375 >>> 2;
												$377 = $376 ^ -1;
												$scevgep4$i$i$i$i32 = (($372) + ($377<<2)|0);
												HEAP32[$371>>2] = $scevgep4$i$i$i$i32;
											}
											__ZdlPv($368);
										}
										$378 = ((($htp)) + 36|0);
										$379 = HEAP32[$378>>2]|0;
										$380 = ($379|0)==(0|0);
										$381 = $379;
										if (!($380)) {
											$382 = ((($htp)) + 40|0);
											$383 = HEAP32[$382>>2]|0;
											$384 = ($383|0)==($379|0);
											if (!($384)) {
												$scevgep$i$i$i$i26 = ((($383)) + -4|0);
												$385 = $scevgep$i$i$i$i26;
												$386 = (($385) - ($381))|0;
												$387 = $386 >>> 2;
												$388 = $387 ^ -1;
												$scevgep4$i$i$i$i27 = (($383) + ($388<<2)|0);
												HEAP32[$382>>2] = $scevgep4$i$i$i$i27;
											}
											__ZdlPv($379);
										}
										$389 = ((($hlp)) + 36|0);
										$390 = HEAP32[$389>>2]|0;
										$391 = ($390|0)==(0|0);
										$392 = $390;
										if (!($391)) {
											$393 = ((($hlp)) + 40|0);
											$394 = HEAP32[$393>>2]|0;
											$395 = ($394|0)==($390|0);
											if (!($395)) {
												$scevgep$i$i$i$i21 = ((($394)) + -4|0);
												$396 = $scevgep$i$i$i$i21;
												$397 = (($396) - ($392))|0;
												$398 = $397 >>> 2;
												$399 = $398 ^ -1;
												$scevgep4$i$i$i$i22 = (($394) + ($399<<2)|0);
												HEAP32[$393>>2] = $scevgep4$i$i$i$i22;
											}
											__ZdlPv($390);
										}
										$cond = ($$412|0)==(0);
										if ($cond) {
											break L53;
										} else {
											$$6 = $$4;
										}
										STACKTOP = sp;return ($$6|0);
									}
								} while(0);
								$205 = ___cxa_find_matching_catch_2()|0;
								$206 = tempRet0;
								$207 = ((($hwp)) + 36|0);
								$208 = HEAP32[$207>>2]|0;
								$209 = ($208|0)==(0|0);
								$210 = $208;
								if ($209) {
									$$04 = $206;$$06 = $205;
								} else {
									$211 = ((($hwp)) + 40|0);
									$212 = HEAP32[$211>>2]|0;
									$213 = ($212|0)==($208|0);
									if (!($213)) {
										$scevgep$i$i$i$i37 = ((($212)) + -4|0);
										$214 = $scevgep$i$i$i$i37;
										$215 = (($214) - ($210))|0;
										$216 = $215 >>> 2;
										$217 = $216 ^ -1;
										$scevgep4$i$i$i$i38 = (($212) + ($217<<2)|0);
										HEAP32[$211>>2] = $scevgep4$i$i$i$i38;
									}
									__ZdlPv($208);
									$$04 = $206;$$06 = $205;
								}
							}
							$400 = ((($htp)) + 36|0);
							$401 = HEAP32[$400>>2]|0;
							$402 = ($401|0)==(0|0);
							$403 = $401;
							if ($402) {
								$$15 = $$04;$$17 = $$06;
							} else {
								$404 = ((($htp)) + 40|0);
								$405 = HEAP32[$404>>2]|0;
								$406 = ($405|0)==($401|0);
								if (!($406)) {
									$scevgep$i$i$i$i16 = ((($405)) + -4|0);
									$407 = $scevgep$i$i$i$i16;
									$408 = (($407) - ($403))|0;
									$409 = $408 >>> 2;
									$410 = $409 ^ -1;
									$scevgep4$i$i$i$i17 = (($405) + ($410<<2)|0);
									HEAP32[$404>>2] = $scevgep4$i$i$i$i17;
								}
								__ZdlPv($401);
								$$15 = $$04;$$17 = $$06;
							}
						}
						$411 = ((($hlp)) + 36|0);
						$412 = HEAP32[$411>>2]|0;
						$413 = ($412|0)==(0|0);
						$414 = $412;
						if ($413) {
							___resumeException($$17|0);
							// unreachable;
						}
						$415 = ((($hlp)) + 40|0);
						$416 = HEAP32[$415>>2]|0;
						$417 = ($416|0)==($412|0);
						if (!($417)) {
							$scevgep$i$i$i$i = ((($416)) + -4|0);
							$418 = $scevgep$i$i$i$i;
							$419 = (($418) - ($414))|0;
							$420 = $419 >>> 2;
							$421 = $420 ^ -1;
							$scevgep4$i$i$i$i = (($416) + ($421<<2)|0);
							HEAP32[$415>>2] = $scevgep4$i$i$i$i;
						}
						__ZdlPv($412);
						___resumeException($$17|0);
						// unreachable;
					}
				} while(0);
				$$6 = 0;
				STACKTOP = sp;return ($$6|0);
			}
			function __ZNK8Features11test_4ADQaoERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$ = 0, $$3 = 0, $$7 = 0, $$pre$i = 0, $$pre$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
				var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
				var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
				var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
				var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
				var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
				var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
				var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
				var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
				var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
				var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
				var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
				var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = (__ZNK4Blob4holeEi($0,0)|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = HEAP32[$this>>2]|0;
				$4 = HEAP32[$3>>2]|0;
				$5 = (($2) - ($4))|0;
				$6 = ((($3)) + 8|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($1)) + 8|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = (($7) - ($9))|0;
				$11 = ((($this)) + 56|0);
				$12 = (__ZN7Profile5ispitEv($11)|0);
				if (!($12)) {
					$13 = (__ZN7Profile7isflatsEv($11)|0);
					if ($13) {
						$14 = ((($this)) + 152|0);
						$15 = (__ZN7Profile5ispitEv($14)|0);
						if ($15) {
							$$3 = 68;
							return ($$3|0);
						}
					}
				}
				$16 = (__ZN5Ocrad7similarEiiii($5,$10,40,1)|0);
				$17 = ((($this)) + 104|0);
				if ($16) {
					$18 = (__ZN7Profile6minimaEi($17,-1)|0);
					$19 = ($18|0)==(2);
					if ($19) {
						$20 = ((($this)) + 200|0);
						$21 = (__ZN7Profile6minimaEi($20,-1)|0);
						$22 = ($21|0)==(2);
						if ($22) {
							$23 = ((($this)) + 152|0);
							$24 = (__ZN7Profile8isconvexEv($23)|0);
							if (!($24)) {
								$$3 = 35;
								return ($$3|0);
							}
						}
					}
				}
				$25 = (__ZN7Profile6minimaEi($17,-1)|0);
				$26 = ($25|0)==(1);
				if ($26) {
					$27 = ((($this)) + 200|0);
					$28 = (__ZN7Profile6minimaEi($27,-1)|0);
					$29 = ($28|0)==(1);
					if ($29) {
						$30 = HEAP32[$this>>2]|0;
						$31 = ((($1)) + 12|0);
						$32 = HEAP32[$31>>2]|0;
						$33 = HEAP32[$1>>2]|0;
						$34 = HEAP32[$8>>2]|0;
						$35 = (($34) + ($33))|0;
						$36 = (($35|0) / 2)&-1;
						$37 = (__ZNK6Bitmap11seek_bottomEiib($30,$32,$36,0)|0);
						$38 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
						if ($38) {
							label = 12;
						} else {
							$39 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
							if ($39) {
								label = 12;
							}
						}
						if ((label|0) == 12) {
							$40 = (__ZN7Profile8isconvexEv($11)|0);
							if (!($40)) {
								$41 = (__ZN7Profile8isconvexEv($27)|0);
								if ($41) {
									$42 = ((($this)) + 152|0);
									$43 = (__ZN7Profile8isconvexEv($42)|0);
									if (!($43)) {
										$44 = HEAP32[$this>>2]|0;
										$45 = HEAP32[$1>>2]|0;
										$46 = HEAP32[$8>>2]|0;
										$47 = (($46) + ($45))|0;
										$48 = (($47|0) / 2)&-1;
										$49 = (__ZNK6Bitmap11seek_bottomEiib($44,$37,$48,1)|0);
										$50 = HEAP32[$this>>2]|0;
										$51 = ((($50)) + 12|0);
										$52 = HEAP32[$51>>2]|0;
										$53 = ($49|0)<($52|0);
										if ($53) {
											$$3 = 233;
											return ($$3|0);
										}
									}
								}
							}
						}
						$54 = HEAP32[$this>>2]|0;
						$55 = HEAP32[$1>>2]|0;
						$56 = HEAP32[$8>>2]|0;
						$57 = (($56) + ($55))|0;
						$58 = (($57|0) / 2)&-1;
						$59 = (__ZNK6Bitmap11seek_bottomEiib($54,$37,$58,1)|0);
						$60 = (($59) + ($37))|0;
						$61 = (($60|0) / 2)&-1;
						$62 = HEAP32[$this>>2]|0;
						$63 = ((($62)) + 12|0);
						$64 = HEAP32[$63>>2]|0;
						$65 = (($64) + -1)|0;
						$66 = ($61|0)<($65|0);
						if ($66) {
							$67 = (__ZN7Profile7isflatsEv($11)|0);
							if (!($67)) {
								$68 = HEAP32[$this>>2]|0;
								$69 = HEAP32[$1>>2]|0;
								$70 = HEAP32[$8>>2]|0;
								$71 = (($70) + ($69))|0;
								$72 = (($71|0) / 2)&-1;
								$73 = (__ZNK6Bitmap9seek_leftEiib($68,$61,$72,1)|0);
								$74 = HEAP32[$this>>2]|0;
								$75 = HEAP32[$74>>2]|0;
								$76 = ($73|0)>($75|0);
								if (!($76)) {
									$77 = HEAP32[$31>>2]|0;
									$78 = ((($1)) + 4|0);
									$79 = HEAP32[$78>>2]|0;
									$80 = (($77) + 1)|0;
									$81 = (($80) - ($79))|0;
									$82 = $81 << 1;
									$83 = ((($74)) + 12|0);
									$84 = HEAP32[$83>>2]|0;
									$85 = ((($74)) + 4|0);
									$86 = HEAP32[$85>>2]|0;
									$87 = (($84) + 1)|0;
									$88 = (($87) - ($86))|0;
									$89 = ($82|0)>($88|0);
									if ($89) {
										$90 = HEAP32[$8>>2]|0;
										$91 = HEAP32[$1>>2]|0;
										$92 = (($90) + 1)|0;
										$93 = (($92) - ($91))|0;
										$94 = $93 << 1;
										$95 = ((($74)) + 8|0);
										$96 = HEAP32[$95>>2]|0;
										$97 = (1 - ($75))|0;
										$98 = (($97) + ($96))|0;
										$99 = ($94|0)>($98|0);
										if (!($99)) {
											label = 21;
										}
									} else {
										label = 21;
									}
									if ((label|0) == 21) {
										$100 = ((($this)) + 296|0);
										$101 = (($79) - ($86))|0;
										$102 = (__ZN7ProfileixEi($100,$101)|0);
										$103 = HEAP32[$31>>2]|0;
										$104 = HEAP32[$this>>2]|0;
										$105 = ((($104)) + 4|0);
										$106 = HEAP32[$105>>2]|0;
										$107 = (($103) - ($106))|0;
										$108 = (__ZN7ProfileixEi($100,$107)|0);
										$109 = ($102|0)<($108|0);
										if ($109) {
											$$3 = 52;
											return ($$3|0);
										}
									}
									$110 = ((($this)) + 152|0);
									$111 = (__ZN7Profile5ispitEv($110)|0);
									if (!($111)) {
										$112 = (__ZN7Profile8isconvexEv($110)|0);
										if (!($112)) {
											$$3 = 81;
											return ($$3|0);
										}
									}
								}
							}
						}
					}
				}
				$113 = HEAP32[$this>>2]|0;
				$114 = ((($113)) + 8|0);
				$115 = HEAP32[$114>>2]|0;
				$116 = HEAP32[$113>>2]|0;
				$117 = (($115) + 1)|0;
				$118 = (($117) - ($116))|0;
				$119 = $118 << 1;
				$120 = HEAP32[$8>>2]|0;
				$121 = HEAP32[$1>>2]|0;
				$122 = (($120) + 1)|0;
				$123 = (($122) - ($121))|0;
				$124 = ($123*5)|0;
				$125 = ($119|0)>($124|0);
				L36: do {
					if ($125) {
						$126 = ((($this)) + 152|0);
						$127 = (__ZN7Profile8isconvexEv($126)|0);
						if (!($127)) {
							$128 = ((($1)) + 4|0);
							$129 = HEAP32[$128>>2]|0;
							$130 = ((($1)) + 12|0);
							$131 = HEAP32[$130>>2]|0;
							$132 = (($131) + ($129))|0;
							$133 = (($132|0) / 2)&-1;
							$134 = ((($this)) + 32|0);
							$135 = HEAP32[$134>>2]|0;
							$136 = ((($this)) + 36|0);
							$137 = HEAP32[$136>>2]|0;
							$138 = ($135|0)==($137|0);
							if ($138) {
								__ZNK8Features13row_scan_initEv($this);
								$$pre$i9 = HEAP32[$134>>2]|0;
								$144 = $$pre$i9;
							} else {
								$144 = $135;
							}
							$139 = HEAP32[$this>>2]|0;
							$140 = ((($139)) + 4|0);
							$141 = HEAP32[$140>>2]|0;
							$142 = (($133) - ($141))|0;
							$143 = (($144) + (($142*12)|0)|0);
							$145 = (((($144) + (($142*12)|0)|0)) + 4|0);
							$146 = HEAP32[$145>>2]|0;
							$147 = HEAP32[$143>>2]|0;
							$148 = (($146) - ($147))|0;
							$149 = $148 >> 3;
							$150 = ((($this)) + 200|0);
							$151 = (__ZN7Profile6minimaEi($150,-1)|0);
							switch ($149|0) {
								case 3:  {
									break;
								}
								case 4:  {
									$193 = (__ZN5Ocrad7similarEiiii($5,$10,40,1)|0);
									if (!($193)) {
										break L36;
									}
									$194 = (__ZN7Profile5ispitEv($11)|0);
									if ($194) {
										$$3 = 64;
									} else {
										break L36;
									}
									return ($$3|0);
									break;
								}
								default: {
									break L36;
								}
							}
							$152 = HEAP32[$128>>2]|0;
							$153 = HEAP32[$this>>2]|0;
							$154 = ((($153)) + 4|0);
							$155 = HEAP32[$154>>2]|0;
							$156 = ((($153)) + 12|0);
							$157 = HEAP32[$156>>2]|0;
							$158 = (($157) + ($155))|0;
							$159 = (($158|0) / 2)&-1;
							$160 = ($152|0)<($159|0);
							if ($160) {
								$161 = HEAP32[$130>>2]|0;
								$162 = ($161|0)>($159|0);
								if ($162) {
									$163 = (1 - ($152))|0;
									$164 = (($163) + ($161))|0;
									$165 = ($164*3)|0;
									$166 = (1 - ($155))|0;
									$167 = (($166) + ($157))|0;
									$168 = ($165|0)>=($167|0);
									$169 = $151 | 1;
									$170 = ($169|0)==(3);
									$or$cond = $170 & $168;
									if ($or$cond) {
										$171 = (__ZN7Profile5ispitEv($11)|0);
										if (!($171)) {
											$$3 = 109;
											return ($$3|0);
										}
									}
								}
							}
							$172 = ($5|0)>($10|0);
							if ($172) {
								$173 = (__ZN7Profile5ispitEv($11)|0);
								if ($173) {
									$174 = HEAP32[$1>>2]|0;
									$175 = HEAP32[$8>>2]|0;
									$176 = (($175) + ($174))|0;
									$177 = (($176|0) / 2)&-1;
									$178 = ((($this)) + 44|0);
									$179 = HEAP32[$178>>2]|0;
									$180 = ((($this)) + 48|0);
									$181 = HEAP32[$180>>2]|0;
									$182 = ($179|0)==($181|0);
									if ($182) {
										__ZNK8Features13col_scan_initEv($this);
										$$pre$i = HEAP32[$178>>2]|0;
										$187 = $$pre$i;
									} else {
										$187 = $179;
									}
									$183 = HEAP32[$this>>2]|0;
									$184 = HEAP32[$183>>2]|0;
									$185 = (($177) - ($184))|0;
									$186 = (($187) + (($185*12)|0)|0);
									$188 = (((($187) + (($185*12)|0)|0)) + 4|0);
									$189 = HEAP32[$188>>2]|0;
									$190 = HEAP32[$186>>2]|0;
									$191 = (($189) - ($190))|0;
									$192 = ($191|0)==(32);
									if ($192) {
										$$3 = 64;
										return ($$3|0);
									}
								}
							}
						}
					}
				} while(0);
				$195 = (__ZN7Profile6minimaEi($17,-1)|0);
				$196 = ($195|0)==(1);
				if ($196) {
					$197 = ((($this)) + 200|0);
					$198 = (__ZN7Profile5istipEv($197)|0);
					if ($198) {
						$199 = ((($this)) + 152|0);
						$200 = (__ZN7Profile6isctipEi($199,66)|0);
						if (!($200)) {
							$$3 = 65;
							return ($$3|0);
						}
					}
				}
				$201 = (__ZN5Ocrad7similarEiiii($5,$10,50,1)|0);
				if (!($201)) {
					$302 = ($5|0)>($10|0);
					if ($302) {
						$303 = ((($this)) + 152|0);
						$304 = (__ZN7Profile5ispitEv($303)|0);
						if ($304) {
							$305 = (__ZN7Profile6minimaEi($17,-1)|0);
							$306 = ($305|0)==(1);
							if ($306) {
								$307 = ((($this)) + 200|0);
								$308 = (__ZN7Profile6minimaEi($307,-1)|0);
								$309 = ($308|0)==(1);
								if ($309) {
									$$3 = 68;
									return ($$3|0);
								}
							}
						}
					}
					$310 = (__ZN5Ocrad7similarEiiii($5,$10,50,1)|0);
					if ($310) {
						$311 = ((($this)) + 200|0);
						$312 = (__ZN7Profile6minimaEi($311,-1)|0);
						$313 = ($312|0)>(1);
						if ($313) {
							$$3 = 97;
							return ($$3|0);
						}
						$314 = ((($this)) + 152|0);
						$315 = (__ZN7Profile6minimaEi($314,-1)|0);
						$316 = ($315|0)>(1);
						if ($316) {
							$$3 = 97;
							return ($$3|0);
						}
					}
					$$3 = 0;
					return ($$3|0);
				}
				$202 = ((($this)) + 200|0);
				$203 = (__ZN7Profile6minimaEi($202,-1)|0);
				$204 = ($203|0)==(1);
				if ($204) {
					$205 = ((($this)) + 152|0);
					$206 = (__ZN7Profile8isconvexEv($205)|0);
					if ($206) {
						$207 = HEAP32[$this>>2]|0;
						$208 = (__ZNK4Blob7test_BDEv($207)|0);
						if ($208) {
							$$3 = 68;
							return ($$3|0);
						}
					}
				}
				$209 = (__ZN7Profile6minimaEi($202,-1)|0);
				$210 = ($209|0)>(1);
				if (!($210)) {
					$211 = ((($this)) + 152|0);
					$212 = (__ZN7Profile6minimaEi($211,-1)|0);
					$213 = ($212|0)>(1);
					if (!($213)) {
						$214 = HEAP32[$this>>2]|0;
						$215 = (__ZNK4Blob6test_QEv($214)|0);
						if (!($215)) {
							$244 = ((($this)) + 208|0);
							$245 = HEAP32[$244>>2]|0;
							$246 = ($245|0)<(0);
							if ($246) {
								__ZN7Profile10initializeEv($202);
							}
							$247 = ((($this)) + 236|0);
							$248 = ((($this)) + 240|0);
							$249 = HEAP32[$248>>2]|0;
							$250 = HEAP32[$247>>2]|0;
							$251 = (($249) - ($250))|0;
							$252 = $251 >> 2;
							$253 = (($252) + -1)|0;
							$254 = (__ZN7ProfileixEi($202,$253)|0);
							$255 = ($254*3)|0;
							$256 = HEAP32[$this>>2]|0;
							$257 = ((($256)) + 12|0);
							$258 = HEAP32[$257>>2]|0;
							$259 = ((($256)) + 4|0);
							$260 = HEAP32[$259>>2]|0;
							$261 = (($258) + 1)|0;
							$262 = (($261) - ($260))|0;
							$263 = ($255|0)<($262|0);
							if ($263) {
								$264 = ((($this)) + 160|0);
								$265 = HEAP32[$264>>2]|0;
								$266 = ($265|0)<(0);
								if ($266) {
									__ZN7Profile10initializeEv($211);
								}
								$267 = ((($this)) + 188|0);
								$268 = ((($this)) + 192|0);
								$269 = HEAP32[$268>>2]|0;
								$270 = HEAP32[$267>>2]|0;
								$271 = (($269) - ($270))|0;
								$272 = $271 >> 2;
								$273 = ($272*55)|0;
								$274 = (($273) + -55)|0;
								$275 = (($274|0) / 100)&-1;
								$276 = (__ZN7ProfileixEi($211,$275)|0);
								$277 = ($276*5)|0;
								$278 = HEAP32[$this>>2]|0;
								$279 = ((($278)) + 8|0);
								$280 = HEAP32[$279>>2]|0;
								$281 = HEAP32[$278>>2]|0;
								$282 = (($280) + 1)|0;
								$283 = (($282) - ($281))|0;
								$284 = ($277|0)<($283|0);
								if (!($284)) {
									$$3 = 97;
									return ($$3|0);
								}
							}
							$285 = (__ZN7Profile5istipEv($11)|0);
							if ($285) {
								$$3 = 110;
								return ($$3|0);
							}
							$286 = HEAP32[$this>>2]|0;
							$287 = ((($286)) + 4|0);
							$288 = HEAP32[$287>>2]|0;
							$289 = ((($286)) + 12|0);
							$290 = HEAP32[$289>>2]|0;
							$291 = (($290) - ($288))|0;
							$292 = ($291*80)|0;
							$293 = (($292|0) / 100)&-1;
							$294 = (($293) + ($288))|0;
							$295 = ((($charbox)) + 4|0);
							$296 = HEAP32[$295>>2]|0;
							$297 = ((($charbox)) + 12|0);
							$298 = HEAP32[$297>>2]|0;
							$299 = (($298) + ($296))|0;
							$300 = (($299|0) / 2)&-1;
							$301 = ($294|0)<($300|0);
							$$ = $301 ? 176 : 111;
							$$3 = $$;
							return ($$3|0);
						}
					}
				}
				$216 = ((($1)) + 12|0);
				$217 = HEAP32[$216>>2]|0;
				$218 = ((($1)) + 4|0);
				$219 = HEAP32[$218>>2]|0;
				$220 = (($217) + 1)|0;
				$221 = (($220) - ($219))|0;
				$222 = HEAP32[$8>>2]|0;
				$223 = HEAP32[$1>>2]|0;
				$224 = (($222) + 1)|0;
				$225 = (($224) - ($223))|0;
				$226 = $221 << 2;
				$227 = Math_imul($226, $225)|0;
				$228 = HEAP32[$this>>2]|0;
				$229 = ((($228)) + 12|0);
				$230 = HEAP32[$229>>2]|0;
				$231 = ((($228)) + 4|0);
				$232 = HEAP32[$231>>2]|0;
				$233 = (($230) + 1)|0;
				$234 = (($233) - ($232))|0;
				$235 = ((($228)) + 8|0);
				$236 = HEAP32[$235>>2]|0;
				$237 = HEAP32[$228>>2]|0;
				$238 = (($236) + 1)|0;
				$239 = (($238) - ($237))|0;
				$240 = Math_imul($239, $234)|0;
				$241 = ($227|0)<($240|0);
				if (!($241)) {
					$$3 = 81;
					return ($$3|0);
				}
				$242 = (__ZN7Profile5ispitEv($17)|0);
				if ($242) {
					$$3 = 81;
					return ($$3|0);
				} else {
					$243 = (__ZN7Profile5ispitEv($11)|0);
					$$7 = $243 ? 81 : 0;
					return ($$7|0);
				}
				return (0)|0;
			}
			function __ZNK8Features9test_6abdERK7Charset($this,$charset) {
				$this = $this|0;
				$charset = $charset|0;
				var $$ = 0, $$11 = 0, $$20 = 0, $$mux = 0, $$phi$trans$insert41 = 0, $$phi$trans$insert44 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi51Z2D = 0, $$pre$phiZ2D = 0, $$pre38 = 0, $$pre39 = 0, $$pre40 = 0, $$pre42 = 0, $$pre43 = 0, $$pre45 = 0, $$pre47 = 0, $$pre50 = 0, $0 = 0, $1 = 0;
				var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
				var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
				var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
				var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
				var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
				var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
				var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
				var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
				var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
				var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
				var $280 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
				var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
				var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
				var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
				var $brmerge$demorgan = 0, $brmerge19$demorgan = 0, $col$1 = 0, $hdiff = 0, $or$cond = 0, $row$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$hdiff = sp;
				$0 = HEAP32[$this>>2]|0;
				$1 = (__ZNK4Blob4holeEi($0,0)|0);
				$2 = ((($1)) + 8|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = HEAP32[$1>>2]|0;
				$5 = (($3) + 1)|0;
				$6 = (($5) - ($4))|0;
				$7 = ($6*3)|0;
				$8 = HEAP32[$this>>2]|0;
				$9 = ((($8)) + 8|0);
				$10 = HEAP32[$9>>2]|0;
				$11 = HEAP32[$8>>2]|0;
				$12 = (($10) + 1)|0;
				$13 = (($12) - ($11))|0;
				$14 = ($7|0)<($13|0);
				do {
					if ($14) {
						$15 = ((($this)) + 200|0);
						$16 = ((($8)) + 12|0);
						$17 = HEAP32[$16>>2]|0;
						$18 = ((($8)) + 4|0);
						$19 = HEAP32[$18>>2]|0;
						$20 = (($17) + 1)|0;
						$21 = (($20) - ($19))|0;
						$22 = (($21|0) / 4)&-1;
						$23 = (__ZN7Profile6minimaEi($15,$22)|0);
						$24 = ($23|0)==(1);
						if (!($24)) {
							$$11 = 0;
							STACKTOP = sp;return ($$11|0);
						}
						$25 = ((($this)) + 104|0);
						$26 = ((($1)) + 4|0);
						$27 = HEAP32[$26>>2]|0;
						$28 = ((($1)) + 12|0);
						$29 = HEAP32[$28>>2]|0;
						$30 = (($29) + ($27))|0;
						$31 = (($30|0) / 2)&-1;
						$32 = HEAP32[$this>>2]|0;
						$33 = ((($32)) + 4|0);
						$34 = HEAP32[$33>>2]|0;
						$35 = (($31) - ($34))|0;
						$36 = (__ZN7Profile6minimaEi($25,$35)|0);
						$37 = ($36|0)==(1);
						if ($37) {
							$$pre = HEAP32[$1>>2]|0;
							$$pre38 = HEAP32[$2>>2]|0;
							$$pre39 = HEAP32[$this>>2]|0;
							$$pre$phi51Z2D = $26;$$pre$phiZ2D = $this;$39 = $$pre;$40 = $$pre38;$43 = $$pre39;
							break;
						} else {
							$$11 = 0;
							STACKTOP = sp;return ($$11|0);
						}
					} else {
						$$pre50 = ((($1)) + 4|0);
						$$pre$phi51Z2D = $$pre50;$$pre$phiZ2D = $this;$39 = $4;$40 = $3;$43 = $8;
					}
				} while(0);
				$38 = (($40) + ($39))|0;
				$41 = (($38|0) / 2)&-1;
				$42 = HEAP32[$$pre$phi51Z2D>>2]|0;
				$44 = (__ZNK6Bitmap8seek_topEiib($43,$42,$41,0)|0);
				$45 = (($44) + -1)|0;
				$46 = HEAP32[$this>>2]|0;
				$47 = ((($46)) + 4|0);
				$48 = HEAP32[$47>>2]|0;
				$49 = ($45|0)>($48|0);
				if ($49) {
					$63 = $48;$65 = $46;$78 = $46;$col$1 = $41;$row$0 = $45;
				} else {
					$50 = HEAP32[$2>>2]|0;
					$51 = ((($46)) + 8|0);
					$52 = HEAP32[$51>>2]|0;
					$53 = (($52) - ($50))|0;
					$54 = HEAP32[$1>>2]|0;
					$55 = (($50) + 1)|0;
					$56 = (($55) - ($54))|0;
					$57 = ($53|0)>($56|0);
					$58 = $57&1;
					$$ = (($58) + ($50))|0;
					$59 = HEAP32[$$pre$phi51Z2D>>2]|0;
					$60 = (__ZNK6Bitmap8seek_topEiib($46,$59,$$,0)|0);
					$61 = (($60) + -1)|0;
					$$pre40 = HEAP32[$this>>2]|0;
					$$phi$trans$insert41 = ((($$pre40)) + 4|0);
					$$pre42 = HEAP32[$$phi$trans$insert41>>2]|0;
					$63 = $$pre42;$65 = $$pre40;$78 = $$pre40;$col$1 = $$;$row$0 = $61;
				}
				$62 = ($row$0|0)>($63|0);
				if (!($62)) {
					$$11 = 0;
					STACKTOP = sp;return ($$11|0);
				}
				$64 = ((($65)) + 8|0);
				$66 = HEAP32[$64>>2]|0;
				$67 = HEAP32[$2>>2]|0;
				$68 = (($67) + ($66))|0;
				$69 = (($68|0) / 2)&-1;
				$70 = HEAP32[$$pre$phi51Z2D>>2]|0;
				$71 = ((($65)) + 12|0);
				$72 = HEAP32[$71>>2]|0;
				$73 = ((($1)) + 12|0);
				$74 = HEAP32[$73>>2]|0;
				$75 = (($74) - ($72))|0;
				$76 = (($75) + ($70))|0;
				$77 = (($76) + -1)|0;
				$79 = (__ZNK6Bitmap10seek_rightEiib($78,$77,$67,1)|0);
				$80 = HEAP32[$this>>2]|0;
				$81 = ((($80)) + 8|0);
				$82 = HEAP32[$81>>2]|0;
				$83 = ($79|0)<($82|0);
				if ($83) {
					$84 = (__ZNK6Bitmap10seek_rightEiib($80,$row$0,$col$1,1)|0);
					$85 = HEAP32[$this>>2]|0;
					$86 = ((($85)) + 8|0);
					$87 = HEAP32[$86>>2]|0;
					$88 = ($84|0)>=($87|0);
					$128 = $88;$89 = $85;
				} else {
					$128 = 1;$89 = $80;
				}
				$90 = (__ZNK6Bitmap12escape_rightEii($89,$row$0,$col$1)|0);
				if ($90) {
					$91 = HEAP32[$this>>2]|0;
					$92 = ((($91)) + 8|0);
					$93 = HEAP32[$92>>2]|0;
					$94 = HEAP32[$91>>2]|0;
					$95 = (($93) + 1)|0;
					$96 = (($95) - ($94))|0;
					$97 = (($96|0) / 30)&-1;
					$98 = (($97) + 1)|0;
					$99 = ((($this)) + 56|0);
					$100 = ((($91)) + 4|0);
					$101 = HEAP32[$100>>2]|0;
					$102 = (($76) - ($101))|0;
					$103 = (__ZN7ProfileixEi($99,$102)|0);
					$104 = HEAP32[$$pre$phi51Z2D>>2]|0;
					$105 = HEAP32[$this>>2]|0;
					$106 = ((($105)) + 4|0);
					$107 = HEAP32[$106>>2]|0;
					$108 = (($104) - ($107))|0;
					$109 = (__ZN7ProfileixEi($99,$108)|0);
					$110 = (($98) + ($109))|0;
					$111 = ($103|0)>($110|0);
					L22: do {
						if ($111) {
							$112 = HEAP32[$this>>2]|0;
							$113 = ((($112)) + 4|0);
							$114 = HEAP32[$113>>2]|0;
							$115 = ((($this)) + 104|0);
							$116 = (($103) + -1)|0;
							$117 = ((($112)) + 8|0);
							$118 = HEAP32[$117>>2]|0;
							$119 = HEAP32[$112>>2]|0;
							$120 = (($118) + 1)|0;
							$121 = (($120) - ($119))|0;
							$122 = (($121|0) / 4)&-1;
							$123 = ($122|0)<($116|0);
							$124 = $123 ? $122 : $116;
							$125 = (__ZN7ProfileixEi($115,$124)|0);
							$126 = (($125) + ($114))|0;
							$127 = ($76|0)<=($126|0);
							$brmerge$demorgan = $128 & $127;
							do {
								if ($brmerge$demorgan) {
									$129 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
									if (!($129)) {
										$130 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
										if (!($130)) {
											break;
										}
									}
									$131 = HEAP32[$this>>2]|0;
									$132 = ((($131)) + 8|0);
									$133 = HEAP32[$132>>2]|0;
									$134 = ((($this)) + 152|0);
									$135 = ((($this)) + 160|0);
									$136 = HEAP32[$135>>2]|0;
									$137 = ($136|0)<(0);
									if ($137) {
										__ZN7Profile10initializeEv($134);
									}
									$138 = ((($this)) + 188|0);
									$139 = ((($this)) + 192|0);
									$140 = HEAP32[$139>>2]|0;
									$141 = HEAP32[$138>>2]|0;
									$142 = (($140) - ($141))|0;
									$143 = $142 >> 2;
									$144 = ($143*5)|0;
									$145 = (($144) + -5)|0;
									$146 = (($145|0) / 100)&-1;
									$147 = (__ZN7ProfileixEi($134,$146)|0);
									$148 = (($133) - ($147))|0;
									$149 = HEAP32[$2>>2]|0;
									$150 = ($148|0)<($149|0);
									if (!($150)) {
										$$11 = 243;
										STACKTOP = sp;return ($$11|0);
									}
									$151 = HEAP32[$this>>2]|0;
									$152 = HEAP32[$151>>2]|0;
									$153 = HEAP32[$$pre$phi51Z2D>>2]|0;
									$154 = ((($151)) + 4|0);
									$155 = HEAP32[$154>>2]|0;
									$156 = (($153) - ($155))|0;
									$157 = (__ZN7ProfileixEi($99,$156)|0);
									$158 = (($157) + ($152))|0;
									$159 = HEAP32[$this>>2]|0;
									$160 = HEAP32[$159>>2]|0;
									$161 = ((($159)) + 8|0);
									$162 = HEAP32[$161>>2]|0;
									$163 = (($162) - ($160))|0;
									$164 = (($163|0) / 20)&-1;
									$165 = (($164) + ($160))|0;
									$166 = ($158|0)>($165|0);
									if ($166) {
										break L22;
									} else {
										$$11 = 243;
									}
									STACKTOP = sp;return ($$11|0);
								}
							} while(0);
							if (!($127)) {
								label = 21;
							}
						} else {
							label = 21;
						}
					} while(0);
					if ((label|0) == 21) {
						$167 = (__ZN7Profile5ispitEv($99)|0);
						if ($167) {
							$168 = ((($this)) + 200|0);
							$169 = (__ZN7Profile5ispitEv($168)|0);
							if ($169) {
								$170 = HEAP32[$$pre$phiZ2D>>2]|0;
								$171 = HEAP32[$$pre$phi51Z2D>>2]|0;
								$172 = HEAP32[$2>>2]|0;
								$173 = (($172) + 1)|0;
								$174 = (__ZNK6Bitmap8seek_topEiib($170,$171,$173,0)|0);
								$175 = (($174) + -1)|0;
								$176 = HEAP32[$$pre$phiZ2D>>2]|0;
								$177 = HEAP32[$2>>2]|0;
								$178 = (($177) + 1)|0;
								$179 = (__ZNK6Bitmap8seek_topEiib($176,$175,$178,1)|0);
								$180 = HEAP32[$this>>2]|0;
								$181 = ((($180)) + 4|0);
								$182 = HEAP32[$181>>2]|0;
								$183 = ($179|0)>($182|0);
								if ($183) {
									$$11 = 54;
									STACKTOP = sp;return ($$11|0);
								}
							}
						}
					}
					$184 = HEAP32[$$pre$phiZ2D>>2]|0;
					$185 = HEAP32[$$pre$phi51Z2D>>2]|0;
					$186 = (__ZNK6Bitmap8seek_topEiib($184,$185,$69,0)|0);
					$187 = (($186) + -1)|0;
					$188 = HEAP32[$$pre$phiZ2D>>2]|0;
					$189 = (__ZNK6Bitmap8seek_topEiib($188,$187,$69,1)|0);
					$190 = HEAP32[$this>>2]|0;
					$191 = ((($190)) + 4|0);
					$192 = HEAP32[$191>>2]|0;
					$193 = ($189|0)>($192|0);
					if (!($193)) {
						$$11 = 98;
						STACKTOP = sp;return ($$11|0);
					}
					$194 = ((($this)) + 104|0);
					$195 = ((($190)) + 12|0);
					$196 = HEAP32[$195>>2]|0;
					$197 = (1 - ($192))|0;
					$198 = (($197) + ($196))|0;
					$199 = (($198|0) / 2)&-1;
					$200 = (__ZN7Profile6minimaEi($194,$199)|0);
					switch ($200|0) {
						case 1:  {
							label = 26;
							break;
						}
						case 2:  {
							$$11 = 107;
							STACKTOP = sp;return ($$11|0);
							break;
						}
						default: {
						}
					}
					if ((label|0) == 26) {
						$201 = ((($this)) + 200|0);
						$202 = (__ZN7Profile6minimaEi($201,-1)|0);
						$203 = ($202|0)==(1);
						if ($203) {
							$$11 = 115;
							STACKTOP = sp;return ($$11|0);
						}
					}
					$$11 = 0;
					STACKTOP = sp;return ($$11|0);
				}
				$204 = HEAP32[$$pre$phiZ2D>>2]|0;
				$205 = (__ZNK6Bitmap11escape_leftEii($204,$row$0,$col$1)|0);
				if (!($205)) {
					$240 = HEAP32[$this>>2]|0;
					$241 = ((($240)) + 8|0);
					$242 = HEAP32[$241>>2]|0;
					$243 = HEAP32[$240>>2]|0;
					$244 = (($242) + 1)|0;
					$245 = (($244) - ($243))|0;
					$246 = HEAP32[$2>>2]|0;
					$247 = HEAP32[$1>>2]|0;
					$248 = (($246) + 1)|0;
					$249 = (($248) - ($247))|0;
					$250 = ($249*3)|0;
					$251 = ($245|0)>($250|0);
					do {
						if ($251) {
							$252 = HEAP32[$$pre$phi51Z2D>>2]|0;
							$253 = ((($240)) + 4|0);
							$254 = HEAP32[$253>>2]|0;
							$255 = ((($240)) + 12|0);
							$256 = HEAP32[$255>>2]|0;
							$257 = (($256) + ($254))|0;
							$258 = (($257|0) / 2)&-1;
							$259 = ($252|0)<($258|0);
							if ($259) {
								$260 = ((($this)) + 32|0);
								$261 = HEAP32[$260>>2]|0;
								$262 = ((($this)) + 36|0);
								$263 = HEAP32[$262>>2]|0;
								$264 = ($261|0)==($263|0);
								if ($264) {
									__ZNK8Features13row_scan_initEv($this);
									$$pre$i = HEAP32[$260>>2]|0;
									$$pre43 = HEAP32[$this>>2]|0;
									$$phi$trans$insert44 = ((($$pre43)) + 4|0);
									$$pre45 = HEAP32[$$phi$trans$insert44>>2]|0;
									$266 = $$pre45;$268 = $$pre$i;$280 = $$pre43;
								} else {
									$266 = $254;$268 = $261;$280 = $240;
								}
								$265 = (($258) - ($266))|0;
								$267 = (($268) + (($265*12)|0)|0);
								$269 = (((($268) + (($265*12)|0)|0)) + 4|0);
								$270 = HEAP32[$269>>2]|0;
								$271 = HEAP32[$267>>2]|0;
								$272 = (($270) - ($271))|0;
								$273 = ($272|0)==(24);
								if ($273) {
									$274 = ((($this)) + 56|0);
									$275 = (__ZN7Profile8isconvexEv($274)|0);
									if ($275) {
										$$pre47 = HEAP32[$$pre$phiZ2D>>2]|0;
										$276 = $$pre47;
										break;
									} else {
										$$11 = 109;
										STACKTOP = sp;return ($$11|0);
									}
								} else {
									$276 = $280;
								}
							} else {
								$276 = $240;
							}
						} else {
							$276 = $240;
						}
					} while(0);
					$277 = (__ZNK6Bitmap8top_hookEPi($276,$hdiff)|0);
					$278 = HEAP32[$hdiff>>2]|0;
					$279 = ($278|0)>(0);
					$or$cond = $277 & $279;
					$$20 = $or$cond ? 115 : 0;
					$$11 = $$20;
					STACKTOP = sp;return ($$11|0);
				}
				$206 = HEAP32[$1>>2]|0;
				$207 = HEAP32[$2>>2]|0;
				$208 = (($207) - ($206))|0;
				$209 = (($208|0) / 10)&-1;
				$210 = (($209) + ($206))|0;
				$211 = ($206|0)<($210|0);
				$212 = $211 ? $210 : $206;
				$213 = HEAP32[$$pre$phiZ2D>>2]|0;
				$214 = HEAP32[$$pre$phi51Z2D>>2]|0;
				$215 = (__ZNK6Bitmap8seek_topEiib($213,$214,$212,0)|0);
				$216 = (($215) + -1)|0;
				$217 = HEAP32[$$pre$phiZ2D>>2]|0;
				$218 = (__ZNK6Bitmap8seek_topEiib($217,$216,$212,1)|0);
				$219 = HEAP32[$this>>2]|0;
				$220 = ((($219)) + 4|0);
				$221 = HEAP32[$220>>2]|0;
				$222 = ($218|0)>($221|0);
				$223 = (__ZNK7Charset7enabledENS_5ValueE($charset,4)|0);
				if (!($222)) {
					if ($223) {
						if ($128) {
							$$11 = 243;
							STACKTOP = sp;return ($$11|0);
						}
					} else {
						$239 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
						$brmerge19$demorgan = $128 & $239;
						if ($brmerge19$demorgan) {
							$$11 = 243;
							STACKTOP = sp;return ($$11|0);
						}
					}
					$$11 = 100;
					STACKTOP = sp;return ($$11|0);
				}
				if ($223) {
					label = 32;
				} else {
					$224 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
					if ($224) {
						label = 32;
					}
				}
				do {
					if ((label|0) == 32) {
						$225 = HEAP32[$$pre$phiZ2D>>2]|0;
						$226 = (__ZNK6Bitmap8seek_topEiib($225,$row$0,$col$1,1)|0);
						$227 = HEAP32[$this>>2]|0;
						$228 = ((($227)) + 4|0);
						$229 = HEAP32[$228>>2]|0;
						$230 = ((($227)) + 12|0);
						$231 = HEAP32[$230>>2]|0;
						$232 = (($231) + ($229))|0;
						$233 = (($232|0) / 2)&-1;
						$234 = ($row$0|0)>($233|0);
						if ($234) {
							$235 = (($231) - ($229))|0;
							$236 = (($235|0) / 5)&-1;
							$237 = (($236) + ($229))|0;
							$238 = ($226|0)>($237|0);
							$brmerge = $128 | $238;
							$$mux = $238 ? 225 : 242;
							if ($brmerge) {
								$$11 = $$mux;
							} else {
								break;
							}
							STACKTOP = sp;return ($$11|0);
						} else {
							if ($128) {
								$$11 = 242;
							} else {
								break;
							}
							STACKTOP = sp;return ($$11|0);
						}
					}
				} while(0);
				$$11 = 97;
				STACKTOP = sp;return ($$11|0);
			}
			function __ZN8Csegment12add_csegmentERKS_($this,$seg) {
				$this = $this|0;
				$seg = $seg|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$seg>>2]|0;
				$1 = ((($seg)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($0|0)>($2|0);
				if ($3) {
					return;
				}
				$4 = HEAP32[$this>>2]|0;
				$5 = ((($this)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)>($6|0);
				if ($7) {
					$8 = $seg;
					$9 = $8;
					$10 = HEAP32[$9>>2]|0;
					$11 = (($8) + 4)|0;
					$12 = $11;
					$13 = HEAP32[$12>>2]|0;
					$14 = $this;
					$15 = $14;
					HEAP32[$15>>2] = $10;
					$16 = (($14) + 4)|0;
					$17 = $16;
					HEAP32[$17>>2] = $13;
					return;
				}
				$18 = ($0|0)<($4|0);
				if ($18) {
					HEAP32[$this>>2] = $0;
				}
				$19 = ($2|0)>($6|0);
				if (!($19)) {
					return;
				}
				HEAP32[$5>>2] = $2;
				return;
			}
			function __ZNK8Csegment8distanceERKS_($this,$seg) {
				$this = $this|0;
				$seg = $seg|0;
				var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($this)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($0|0)>($2|0);
				if ($3) {
					$$0 = 2147483647;
					return ($$0|0);
				}
				$4 = HEAP32[$seg>>2]|0;
				$5 = ((($seg)) + 4|0);
				$6 = HEAP32[$5>>2]|0;
				$7 = ($4|0)>($6|0);
				if ($7) {
					$$0 = 2147483647;
					return ($$0|0);
				}
				$8 = ($0|0)>($6|0);
				if (!($8)) {
					$10 = ($4|0)>($2|0);
					$11 = (($4) - ($2))|0;
					$$ = $10 ? $11 : 0;
					return ($$|0);
				}
				$9 = (($0) - ($6))|0;
				$$0 = $9;
				return ($$0|0);
			}
			function __ZN9Character11recognize12ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$ = 0, $$0 = 0, $$017 = 0, $$1 = 0, $$113 = 0, $$118 = 0, $$120 = 0, $$3 = 0, $$pre = 0, $$pre$phi177Z2D = 0, $$pre$phiZ2D = 0, $$pre168 = 0, $$pre169 = 0, $$pre170 = 0, $$pre171 = 0, $$pre173 = 0, $$pre175 = 0, $0 = 0, $1 = 0, $10 = 0;
				var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
				var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
				var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
				var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
				var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
				var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
				var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
				var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
				var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
				var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
				var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
				var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
				var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
				var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0;
				var $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0;
				var $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0;
				var $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
				var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
				var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
				var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
				var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
				var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
				var $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0;
				var $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0;
				var $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0;
				var $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
				var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
				var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
				var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
				var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
				var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
				var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
				var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
				var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
				var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
				var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
				var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
				var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
				var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
				var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
				var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
				var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
				var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
				var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
				var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
				var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
				var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
				var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
				var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
				var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
				var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
				var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
				var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
				var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
				var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
				var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
				var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
				var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
				var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
				var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
				var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
				var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
				var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
				var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
				var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
				var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
				var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
				var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
				var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
				var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
				var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
				var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
				var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $atype$0 = 0, $c = 0, $c2 = 0, $c23 = 0, $code2$1 = 0, $code9$0 = 0;
				var $code9$1 = 0, $code9$1111 = 0, $col$0$lcssa = 0, $col$0$lcssa$ph = 0, $col$0164 = 0, $cond6 = 0, $cond8 = 0, $f1 = 0, $f2 = 0, $hdiff = 0, $ispos = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $neg = 0, $or$cond = 0, $or$cond112 = 0, $or$cond115 = 0, $switch$select = 0, $switch$select23 = 0, $switch$selectcmp = 0;
				var $switch$selectcmp22 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp + 176|0;
				$1 = sp + 168|0;
				$2 = sp + 160|0;
				$3 = sp + 152|0;
				$4 = sp + 144|0;
				$5 = sp + 136|0;
				$6 = sp + 128|0;
				$7 = sp + 120|0;
				$8 = sp + 112|0;
				$9 = sp + 104|0;
				$10 = sp + 96|0;
				$11 = sp + 88|0;
				$12 = sp + 80|0;
				$13 = sp + 72|0;
				$14 = sp + 64|0;
				$15 = sp + 56|0;
				$16 = sp + 48|0;
				$17 = sp + 40|0;
				$18 = sp + 32|0;
				$19 = sp + 24|0;
				$20 = sp + 16|0;
				$21 = sp + 8|0;
				$22 = sp;
				$f1 = sp + 656|0;
				$f2 = sp + 312|0;
				$c2 = sp + 272|0;
				$c23 = sp + 232|0;
				$hdiff = sp + 224|0;
				$c = sp + 184|0;
				$23 = (__ZN9Character4blobEi($this,0)|0);
				$24 = (__ZN9Character4blobEi($this,1)|0);
				$25 = (__ZNK6Bitmap4areaEv($23)|0);
				$26 = (__ZNK6Bitmap4areaEv($24)|0);
				__ZN8FeaturesC2ERK4Blob($f1,$23);
				__THREW__ = 0;
				invoke_vii(186,($f2|0),($24|0));
				$27 = __THREW__; __THREW__ = 0;
				$28 = $27&1;
				L1: do {
					if ($28) {
						label = 15;
					} else {
						__THREW__ = 0;
						$29 = (invoke_iiiii(120,($25|0),($26|0),10,1)|0);
						$30 = __THREW__; __THREW__ = 0;
						$31 = $30&1;
						L3: do {
							if ($31) {
								label = 16;
							} else {
								L5: do {
									if ($29) {
										$32 = ((($23)) + 28|0);
										$33 = ((($23)) + 32|0);
										$34 = HEAP32[$33>>2]|0;
										$35 = HEAP32[$32>>2]|0;
										$36 = ($34|0)==($35|0);
										if ($36) {
											$37 = ((($24)) + 28|0);
											$38 = ((($24)) + 32|0);
											$39 = HEAP32[$38>>2]|0;
											$40 = HEAP32[$37>>2]|0;
											$41 = ($39|0)==($40|0);
											if ($41) {
												$42 = ((($23)) + 12|0);
												$43 = HEAP32[$42>>2]|0;
												$44 = ((($23)) + 4|0);
												$45 = HEAP32[$44>>2]|0;
												$46 = (($43) + 1)|0;
												$47 = (($46) - ($45))|0;
												$48 = ((($23)) + 8|0);
												$49 = HEAP32[$48>>2]|0;
												$50 = HEAP32[$23>>2]|0;
												$51 = (($49) + 1)|0;
												$52 = (($51) - ($50))|0;
												$53 = Math_imul($52, $47)|0;
												$54 = $25 << 1;
												$55 = ($54|0)>($53|0);
												if ($55) {
													$56 = ((($24)) + 12|0);
													$57 = HEAP32[$56>>2]|0;
													$58 = ((($24)) + 4|0);
													$59 = HEAP32[$58>>2]|0;
													$60 = (($57) + 1)|0;
													$61 = (($60) - ($59))|0;
													$62 = ((($24)) + 8|0);
													$63 = HEAP32[$62>>2]|0;
													$64 = HEAP32[$24>>2]|0;
													$65 = (($63) + 1)|0;
													$66 = (($65) - ($64))|0;
													$67 = Math_imul($66, $61)|0;
													$68 = $26 << 1;
													$69 = ($68|0)>($67|0);
													if ($69) {
														$70 = ((($this)) + 8|0);
														$71 = HEAP32[$70>>2]|0;
														$72 = HEAP32[$this>>2]|0;
														$73 = (($71) + 1)|0;
														$74 = (($73) - ($72))|0;
														$75 = ((($this)) + 12|0);
														$76 = HEAP32[$75>>2]|0;
														$77 = ((($this)) + 4|0);
														$78 = HEAP32[$77>>2]|0;
														$79 = (($76) + 1)|0;
														$80 = (($79) - ($78))|0;
														$81 = ($74|0)>($80|0);
														if (!($81)) {
															__THREW__ = 0;
															$82 = (invoke_iiiii(120,($74|0),($80|0),40,1)|0);
															$83 = __THREW__; __THREW__ = 0;
															$84 = $83&1;
															if ($84) {
																label = 16;
																break L3;
															}
															if (!($82)) {
																$110 = HEAP32[$48>>2]|0;
																$111 = HEAP32[$23>>2]|0;
																$112 = (($110) + 1)|0;
																$113 = (($112) - ($111))|0;
																$114 = HEAP32[$42>>2]|0;
																$115 = HEAP32[$44>>2]|0;
																$116 = (($114) + 1)|0;
																$117 = (($116) - ($115))|0;
																__THREW__ = 0;
																$118 = (invoke_iiiii(120,($113|0),($117|0),20,2)|0);
																$119 = __THREW__; __THREW__ = 0;
																$120 = $119&1;
																if ($120) {
																	label = 16;
																	break L3;
																}
																if (!($118)) {
																	break;
																}
																$121 = HEAP32[$62>>2]|0;
																$122 = HEAP32[$24>>2]|0;
																$123 = (($121) + 1)|0;
																$124 = (($123) - ($122))|0;
																$125 = HEAP32[$56>>2]|0;
																$126 = HEAP32[$58>>2]|0;
																$127 = (($125) + 1)|0;
																$128 = (($127) - ($126))|0;
																__THREW__ = 0;
																$129 = (invoke_iiiii(120,($124|0),($128|0),20,2)|0);
																$130 = __THREW__; __THREW__ = 0;
																$131 = $130&1;
																if ($131) {
																	label = 16;
																	break L3;
																}
																if (!($129)) {
																	break;
																}
																HEAP32[$15>>2] = 58;
																$132 = ((($15)) + 4|0);
																HEAP32[$132>>2] = 0;
																$133 = ((($this)) + 32|0);
																$134 = HEAP32[$133>>2]|0;
																$135 = ((($this)) + 36|0);
																$136 = HEAP32[$135>>2]|0;
																$137 = ($134|0)==($136|0);
																if ($137) {
																	$150 = ((($this)) + 28|0);
																	__THREW__ = 0;
																	invoke_vii(125,($150|0),($15|0));
																	$151 = __THREW__; __THREW__ = 0;
																	$152 = $151&1;
																	if ($152) {
																		label = 16;
																		break L3;
																	}
																} else {
																	$138 = $15;
																	$139 = $138;
																	$140 = HEAP32[$139>>2]|0;
																	$141 = (($138) + 4)|0;
																	$142 = $141;
																	$143 = HEAP32[$142>>2]|0;
																	$144 = $134;
																	$145 = $144;
																	HEAP32[$145>>2] = $140;
																	$146 = (($144) + 4)|0;
																	$147 = $146;
																	HEAP32[$147>>2] = $143;
																	$148 = HEAP32[$133>>2]|0;
																	$149 = ((($148)) + 8|0);
																	HEAP32[$133>>2] = $149;
																}
																break;
															}
														}
														HEAP32[$19>>2] = 61;
														$85 = ((($19)) + 4|0);
														HEAP32[$85>>2] = 0;
														$86 = ((($this)) + 32|0);
														$87 = HEAP32[$86>>2]|0;
														$88 = ((($this)) + 36|0);
														$89 = HEAP32[$88>>2]|0;
														$90 = ($87|0)==($89|0);
														if ($90) {
															$103 = ((($this)) + 28|0);
															__THREW__ = 0;
															invoke_vii(125,($103|0),($19|0));
															$104 = __THREW__; __THREW__ = 0;
															$105 = $104&1;
															if ($105) {
																label = 16;
																break L3;
															}
														} else {
															$91 = $19;
															$92 = $91;
															$93 = HEAP32[$92>>2]|0;
															$94 = (($91) + 4)|0;
															$95 = $94;
															$96 = HEAP32[$95>>2]|0;
															$97 = $87;
															$98 = $97;
															HEAP32[$98>>2] = $93;
															$99 = (($97) + 4)|0;
															$100 = $99;
															HEAP32[$100>>2] = $96;
															$101 = HEAP32[$86>>2]|0;
															$102 = ((($101)) + 8|0);
															HEAP32[$86>>2] = $102;
														}
													}
												}
											}
										}
									} else {
										__THREW__ = 0;
										$153 = (invoke_iiiii(120,($25|0),($26|0),60,1)|0);
										$154 = __THREW__; __THREW__ = 0;
										$155 = $154&1;
										if ($155) {
											label = 16;
											break L3;
										}
										L30: do {
											if ($153) {
												__THREW__ = 0;
												$156 = (invoke_iii(187,($f1|0),($charbox|0))|0);
												$157 = __THREW__; __THREW__ = 0;
												$158 = $157&1;
												if ($158) {
													label = 16;
													break L3;
												}
												$159 = ($156|0)==(46);
												if ($159) {
													__THREW__ = 0;
													$160 = (invoke_iii(187,($f2|0),($charbox|0))|0);
													$161 = __THREW__; __THREW__ = 0;
													$162 = $161&1;
													if ($162) {
														label = 16;
														break L3;
													}
													$163 = ($160|0)==(46);
													if ($163) {
														HEAP32[$14>>2] = 58;
														$164 = ((($14)) + 4|0);
														HEAP32[$164>>2] = 0;
														$165 = ((($this)) + 32|0);
														$166 = HEAP32[$165>>2]|0;
														$167 = ((($this)) + 36|0);
														$168 = HEAP32[$167>>2]|0;
														$169 = ($166|0)==($168|0);
														if ($169) {
															$182 = ((($this)) + 28|0);
															__THREW__ = 0;
															invoke_vii(125,($182|0),($14|0));
															$183 = __THREW__; __THREW__ = 0;
															$184 = $183&1;
															if ($184) {
																label = 16;
																break L3;
															}
														} else {
															$170 = $14;
															$171 = $170;
															$172 = HEAP32[$171>>2]|0;
															$173 = (($170) + 4)|0;
															$174 = $173;
															$175 = HEAP32[$174>>2]|0;
															$176 = $166;
															$177 = $176;
															HEAP32[$177>>2] = $172;
															$178 = (($176) + 4)|0;
															$179 = $178;
															HEAP32[$179>>2] = $175;
															$180 = HEAP32[$165>>2]|0;
															$181 = ((($180)) + 8|0);
															HEAP32[$165>>2] = $181;
														}
														break L5;
													}
													$185 = ((($24)) + 12|0);
													$186 = HEAP32[$185>>2]|0;
													$187 = ((($24)) + 4|0);
													$188 = HEAP32[$187>>2]|0;
													$189 = (($186) + 1)|0;
													$190 = (($189) - ($188))|0;
													$191 = ((($23)) + 12|0);
													$192 = HEAP32[$191>>2]|0;
													$193 = ((($23)) + 4|0);
													$194 = HEAP32[$193>>2]|0;
													$195 = (($192) + 1)|0;
													$196 = (($195) - ($194))|0;
													$197 = ($190|0)>($196|0);
													if ($197) {
														$198 = ((($charbox)) + 4|0);
														$199 = HEAP32[$198>>2]|0;
														$200 = ((($charbox)) + 12|0);
														$201 = HEAP32[$200>>2]|0;
														$202 = (($201) + ($199))|0;
														$203 = (($202|0) / 2)&-1;
														$204 = ($188|0)>($203|0);
														if ($204) {
															HEAP32[$10>>2] = 59;
															$205 = ((($10)) + 4|0);
															HEAP32[$205>>2] = 0;
															$206 = ((($this)) + 32|0);
															$207 = HEAP32[$206>>2]|0;
															$208 = ((($this)) + 36|0);
															$209 = HEAP32[$208>>2]|0;
															$210 = ($207|0)==($209|0);
															if ($210) {
																$223 = ((($this)) + 28|0);
																__THREW__ = 0;
																invoke_vii(125,($223|0),($10|0));
																$224 = __THREW__; __THREW__ = 0;
																$225 = $224&1;
																if ($225) {
																	label = 16;
																	break L3;
																}
															} else {
																$211 = $10;
																$212 = $211;
																$213 = HEAP32[$212>>2]|0;
																$214 = (($211) + 4)|0;
																$215 = $214;
																$216 = HEAP32[$215>>2]|0;
																$217 = $207;
																$218 = $217;
																HEAP32[$218>>2] = $213;
																$219 = (($217) + 4)|0;
																$220 = $219;
																HEAP32[$220>>2] = $216;
																$221 = HEAP32[$206>>2]|0;
																$222 = ((($221)) + 8|0);
																HEAP32[$206>>2] = $222;
															}
															break L5;
														}
													}
												}
												__THREW__ = 0;
												$226 = (invoke_iii(131,($charset|0),4)|0);
												$227 = __THREW__; __THREW__ = 0;
												$228 = $227&1;
												if ($228) {
													label = 16;
													break L3;
												}
												if ($226) {
													label = 45;
												} else {
													__THREW__ = 0;
													$229 = (invoke_iii(131,($charset|0),2)|0);
													$230 = __THREW__; __THREW__ = 0;
													$231 = $230&1;
													if ($231) {
														label = 16;
														break L3;
													}
													if ($229) {
														label = 45;
													}
												}
												L54: do {
													if ((label|0) == 45) {
														__THREW__ = 0;
														$232 = (invoke_iii(187,($f2|0),($charbox|0))|0);
														$233 = __THREW__; __THREW__ = 0;
														$234 = $233&1;
														if ($234) {
															label = 16;
															break L3;
														}
														switch ($232|0) {
															case 45: case 95:  {
																break;
															}
															default: {
																break L54;
															}
														}
														HEAP32[$9>>2] = 177;
														$235 = ((($9)) + 4|0);
														HEAP32[$235>>2] = 0;
														$236 = ((($this)) + 32|0);
														$237 = HEAP32[$236>>2]|0;
														$238 = ((($this)) + 36|0);
														$239 = HEAP32[$238>>2]|0;
														$240 = ($237|0)==($239|0);
														if ($240) {
															$253 = ((($this)) + 28|0);
															__THREW__ = 0;
															invoke_vii(125,($253|0),($9|0));
															$254 = __THREW__; __THREW__ = 0;
															$255 = $254&1;
															if ($255) {
																label = 16;
																break L3;
															}
														} else {
															$241 = $9;
															$242 = $241;
															$243 = HEAP32[$242>>2]|0;
															$244 = (($241) + 4)|0;
															$245 = $244;
															$246 = HEAP32[$245>>2]|0;
															$247 = $237;
															$248 = $247;
															HEAP32[$248>>2] = $243;
															$249 = (($247) + 4)|0;
															$250 = $249;
															HEAP32[$250>>2] = $246;
															$251 = HEAP32[$236>>2]|0;
															$252 = ((($251)) + 8|0);
															HEAP32[$236>>2] = $252;
														}
														break L5;
													}
												} while(0);
												__THREW__ = 0;
												$256 = (invoke_iii(105,($23|0),($24|0))|0);
												$257 = __THREW__; __THREW__ = 0;
												$258 = $257&1;
												if ($258) {
													label = 16;
													break L3;
												}
												if ($256) {
													__THREW__ = 0;
													$259 = (invoke_iii(105,($24|0),($23|0))|0);
													$260 = __THREW__; __THREW__ = 0;
													$261 = $260&1;
													if ($261) {
														label = 16;
														break L3;
													}
													if ($259) {
														$262 = ((($23)) + 28|0);
														$263 = ((($23)) + 32|0);
														$264 = HEAP32[$263>>2]|0;
														$265 = HEAP32[$262>>2]|0;
														$266 = ($264|0)==($265|0);
														if (!($266)) {
															$267 = ((($24)) + 28|0);
															$268 = ((($24)) + 32|0);
															$269 = HEAP32[$268>>2]|0;
															$270 = HEAP32[$267>>2]|0;
															$271 = ($269|0)==($270|0);
															if (!($271)) {
																HEAP32[$6>>2] = 103;
																$272 = ((($6)) + 4|0);
																HEAP32[$272>>2] = 0;
																$273 = ((($this)) + 32|0);
																$274 = HEAP32[$273>>2]|0;
																$275 = ((($this)) + 36|0);
																$276 = HEAP32[$275>>2]|0;
																$277 = ($274|0)==($276|0);
																if ($277) {
																	$290 = ((($this)) + 28|0);
																	__THREW__ = 0;
																	invoke_vii(125,($290|0),($6|0));
																	$291 = __THREW__; __THREW__ = 0;
																	$292 = $291&1;
																	if ($292) {
																		label = 16;
																		break L3;
																	}
																} else {
																	$278 = $6;
																	$279 = $278;
																	$280 = HEAP32[$279>>2]|0;
																	$281 = (($278) + 4)|0;
																	$282 = $281;
																	$283 = HEAP32[$282>>2]|0;
																	$284 = $274;
																	$285 = $284;
																	HEAP32[$285>>2] = $280;
																	$286 = (($284) + 4)|0;
																	$287 = $286;
																	HEAP32[$287>>2] = $283;
																	$288 = HEAP32[$273>>2]|0;
																	$289 = ((($288)) + 8|0);
																	HEAP32[$273>>2] = $289;
																}
																break L5;
															}
														}
													}
												}
												$293 = HEAP32[$23>>2]|0;
												$294 = ((($23)) + 8|0);
												$295 = HEAP32[$294>>2]|0;
												$296 = (($295) + ($293))|0;
												$297 = (($296|0) / 2)&-1;
												$298 = HEAP32[$24>>2]|0;
												$299 = ((($24)) + 8|0);
												$300 = HEAP32[$299>>2]|0;
												$301 = (($300) + ($298))|0;
												$302 = (($301|0) / 2)&-1;
												$303 = ($297|0)<($302|0);
												if ($303) {
													$304 = ((($24)) + 12|0);
													$305 = HEAP32[$304>>2]|0;
													$306 = ((($24)) + 4|0);
													$307 = HEAP32[$306>>2]|0;
													$308 = (($305) + 1)|0;
													$309 = (($308) - ($307))|0;
													$310 = (1 - ($298))|0;
													$311 = (($310) + ($300))|0;
													$312 = ($309|0)>($311|0);
													$313 = ($297|0)<($298|0);
													$or$cond112 = $313 & $312;
													if ($or$cond112) {
														__THREW__ = 0;
														$314 = (invoke_iii(105,($23|0),($24|0))|0);
														$315 = __THREW__; __THREW__ = 0;
														$316 = $315&1;
														if ($316) {
															label = 16;
															break L3;
														}
														if ($314) {
															$317 = ((($23)) + 12|0);
															$318 = HEAP32[$317>>2]|0;
															$319 = ((($23)) + 4|0);
															$320 = HEAP32[$319>>2]|0;
															$321 = (($318) + 1)|0;
															$322 = (($321) - ($320))|0;
															$323 = $322 << 2;
															$324 = HEAP32[$304>>2]|0;
															$325 = HEAP32[$306>>2]|0;
															$326 = (($324) + 1)|0;
															$327 = (($326) - ($325))|0;
															$328 = ($327*5)|0;
															$329 = ($323|0)>($328|0);
															if ($329) {
																$330 = (($318) - ($320))|0;
																$331 = (($324) - ($320))|0;
																__THREW__ = 0;
																$332 = (invoke_iiiii(120,($330|0),($331|0),10,1)|0);
																$333 = __THREW__; __THREW__ = 0;
																$334 = $333&1;
																if ($334) {
																	label = 16;
																	break L3;
																}
																if (!($332)) {
																	break;
																}
																__THREW__ = 0;
																$335 = (invoke_ii(29,40)|0);
																$336 = __THREW__; __THREW__ = 0;
																$337 = $336&1;
																if ($337) {
																	label = 16;
																	break L3;
																}
																__THREW__ = 0;
																invoke_vii(159,($335|0),($24|0));
																$338 = __THREW__; __THREW__ = 0;
																$339 = $338&1;
																if ($339) {
																	$365 = ___cxa_find_matching_catch_2()|0;
																	$366 = tempRet0;
																	__ZdlPv($335);
																	$$0 = $365;$$017 = $366;
																	break L3;
																}
																;HEAP32[$c2>>2]=HEAP32[$335>>2]|0;HEAP32[$c2+4>>2]=HEAP32[$335+4>>2]|0;HEAP32[$c2+8>>2]=HEAP32[$335+8>>2]|0;HEAP32[$c2+12>>2]=HEAP32[$335+12>>2]|0;
																$340 = ((($c2)) + 16|0);
																HEAP32[$340>>2] = 0;
																$341 = ((($c2)) + 20|0);
																HEAP32[$341>>2] = 0;
																$342 = ((($c2)) + 24|0);
																HEAP32[$342>>2] = 0;
																__THREW__ = 0;
																$343 = (invoke_ii(29,4)|0);
																$344 = __THREW__; __THREW__ = 0;
																$345 = $344&1;
																if ($345) {
																	label = 16;
																	break L3;
																}
																$346 = $335;
																HEAP32[$340>>2] = $343;
																$347 = ((($343)) + 4|0);
																$348 = ((($c2)) + 24|0);
																HEAP32[$348>>2] = $347;
																HEAP32[$343>>2] = $346;
																HEAP32[$341>>2] = $347;
																$349 = ((($c2)) + 28|0);
																HEAP32[$349>>2] = 0;
																$350 = ((($c2)) + 32|0);
																HEAP32[$350>>2] = 0;
																$351 = ((($c2)) + 36|0);
																HEAP32[$351>>2] = 0;
																__THREW__ = 0;
																invoke_viii(188,($c2|0),($charset|0),($charbox|0));
																$352 = __THREW__; __THREW__ = 0;
																$353 = $352&1;
																do {
																	if (!($353)) {
																		__THREW__ = 0;
																		$354 = (invoke_iii(178,($c2|0),108)|0);
																		$355 = __THREW__; __THREW__ = 0;
																		$356 = $355&1;
																		if ($356) {
																			break;
																		}
																		if ($354) {
																			label = 76;
																		} else {
																			__THREW__ = 0;
																			$357 = (invoke_iii(178,($c2|0),124)|0);
																			$358 = __THREW__; __THREW__ = 0;
																			$359 = $358&1;
																			if ($359) {
																				break;
																			}
																			if ($357) {
																				label = 76;
																			} else {
																				label = 80;
																			}
																		}
																		if ((label|0) == 76) {
																			$360 = HEAP32[$24>>2]|0;
																			$361 = (($360) + -1)|0;
																			__THREW__ = 0;
																			$362 = (invoke_iiiiii(140,($this|0),102,($361|0),105,0)|0);
																			$363 = __THREW__; __THREW__ = 0;
																			$364 = $363&1;
																			if ($364) {
																				break;
																			}
																			if ($362) {
																				$$120 = 1;
																			} else {
																				label = 80;
																			}
																		}
																		if ((label|0) == 80) {
																			$$120 = 0;
																		}
																		__THREW__ = 0;
																		invoke_vi(176,($c2|0));
																		$371 = __THREW__; __THREW__ = 0;
																		$372 = $371&1;
																		if ($372) {
																			label = 16;
																			break L3;
																		}
																		$cond8 = ($$120|0)==(0);
																		if ($cond8) {
																			break L30;
																		} else {
																			break L5;
																		}
																	}
																} while(0);
																$367 = ___cxa_find_matching_catch_2()|0;
																$368 = tempRet0;
																__THREW__ = 0;
																invoke_vi(176,($c2|0));
																$369 = __THREW__; __THREW__ = 0;
																$370 = $369&1;
																if (!($370)) {
																	$$0 = $367;$$017 = $368;
																	break L3;
																}
																$1454 = ___cxa_find_matching_catch_3(0|0)|0;
																$1455 = tempRet0;
																___clang_call_terminate($1454);
																// unreachable;
															}
														}
													}
												}
											}
										} while(0);
										$373 = ($25|0)>($26|0);
										if ($373) {
											$374 = HEAP32[$23>>2]|0;
											$375 = ((($23)) + 8|0);
											$376 = HEAP32[$375>>2]|0;
											$377 = (($376) + ($374))|0;
											$378 = (($377|0) / 2)&-1;
											$379 = HEAP32[$24>>2]|0;
											$380 = ((($24)) + 8|0);
											$381 = HEAP32[$380>>2]|0;
											$382 = (($381) + ($379))|0;
											$383 = (($382|0) / 2)&-1;
											$384 = ($378|0)<($383|0);
											if ($384) {
												$385 = ((($23)) + 12|0);
												$386 = HEAP32[$385>>2]|0;
												$387 = ((($23)) + 4|0);
												$388 = HEAP32[$387>>2]|0;
												$389 = (($386) + 1)|0;
												$390 = (($389) - ($388))|0;
												$391 = $390 << 1;
												$392 = ((($24)) + 12|0);
												$393 = HEAP32[$392>>2]|0;
												$394 = ((($24)) + 4|0);
												$395 = HEAP32[$394>>2]|0;
												$396 = (($393) + 1)|0;
												$397 = (($396) - ($395))|0;
												$398 = ($397*3)|0;
												$399 = ($391|0)>($398|0);
												if ($399) {
													$400 = ((($23)) + 28|0);
													$401 = ((($23)) + 32|0);
													$402 = HEAP32[$401>>2]|0;
													$403 = HEAP32[$400>>2]|0;
													$404 = (($402) - ($403))|0;
													$405 = ($404|0)==(4);
													if ($405) {
														$406 = ((($24)) + 28|0);
														$407 = ((($24)) + 32|0);
														$408 = HEAP32[$407>>2]|0;
														$409 = HEAP32[$406>>2]|0;
														$410 = (($408) - ($409))|0;
														$411 = ($410|0)==(4);
														if ($411) {
															$412 = (1 - ($379))|0;
															$413 = (($412) + ($381))|0;
															__THREW__ = 0;
															$414 = (invoke_iiiii(120,($413|0),($397|0),50,1)|0);
															$415 = __THREW__; __THREW__ = 0;
															$416 = $415&1;
															if ($416) {
																label = 16;
																break L3;
															}
															if ($414) {
																HEAP32[$0>>2] = 37;
																$417 = ((($0)) + 4|0);
																HEAP32[$417>>2] = 0;
																$418 = ((($this)) + 32|0);
																$419 = HEAP32[$418>>2]|0;
																$420 = ((($this)) + 36|0);
																$421 = HEAP32[$420>>2]|0;
																$422 = ($419|0)==($421|0);
																if ($422) {
																	$435 = ((($this)) + 28|0);
																	__THREW__ = 0;
																	invoke_vii(125,($435|0),($0|0));
																	$436 = __THREW__; __THREW__ = 0;
																	$437 = $436&1;
																	if ($437) {
																		label = 16;
																		break L3;
																	}
																} else {
																	$423 = $0;
																	$424 = $423;
																	$425 = HEAP32[$424>>2]|0;
																	$426 = (($423) + 4)|0;
																	$427 = $426;
																	$428 = HEAP32[$427>>2]|0;
																	$429 = $419;
																	$430 = $429;
																	HEAP32[$430>>2] = $425;
																	$431 = (($429) + 4)|0;
																	$432 = $431;
																	HEAP32[$432>>2] = $428;
																	$433 = HEAP32[$418>>2]|0;
																	$434 = ((($433)) + 8|0);
																	HEAP32[$418>>2] = $434;
																}
																break;
															}
														}
													}
												}
											}
										}
										$438 = ($25|0)<($26|0);
										if (!($438)) {
											$1275 = ((($23)) + 12|0);
											$1276 = HEAP32[$1275>>2]|0;
											$1277 = ((($24)) + 4|0);
											$1278 = HEAP32[$1277>>2]|0;
											$1279 = ($1276|0)>($1278|0);
											if ($1279) {
												break;
											}
											__THREW__ = 0;
											$1280 = (invoke_iii(187,($f2|0),($charbox|0))|0);
											$1281 = __THREW__; __THREW__ = 0;
											$1282 = $1281&1;
											if ($1282) {
												label = 16;
												break L3;
											}
											$1283 = ((($23)) + 28|0);
											$1284 = ((($23)) + 32|0);
											$1285 = HEAP32[$1284>>2]|0;
											$1286 = HEAP32[$1283>>2]|0;
											$1287 = ($1285|0)==($1286|0);
											L120: do {
												if ($1287) {
													switch ($1280|0) {
														case 0:  {
															break L5;
															break;
														}
														case 46:  {
															$$pre175 = ((($24)) + 8|0);
															$$pre$phi177Z2D = $24;$$pre$phiZ2D = $$pre175;
															break;
														}
														default: {
															$1288 = ((($24)) + 12|0);
															$1289 = HEAP32[$1288>>2]|0;
															$1290 = HEAP32[$1277>>2]|0;
															$1291 = (($1289) + 1)|0;
															$1292 = (($1291) - ($1290))|0;
															$1293 = ((($24)) + 8|0);
															$1294 = HEAP32[$1293>>2]|0;
															$1295 = HEAP32[$24>>2]|0;
															$1296 = (($1294) + 1)|0;
															$1297 = (($1296) - ($1295))|0;
															__THREW__ = 0;
															$1298 = (invoke_iiiii(120,($1292|0),($1297|0),50,1)|0);
															$1299 = __THREW__; __THREW__ = 0;
															$1300 = $1299&1;
															if ($1300) {
																label = 16;
																break L3;
															}
															if ($1298) {
																$$pre$phi177Z2D = $24;$$pre$phiZ2D = $1293;
															} else {
																break L120;
															}
														}
													}
													$1301 = ((($23)) + 8|0);
													$1302 = HEAP32[$1301>>2]|0;
													$1303 = HEAP32[$23>>2]|0;
													$1304 = (($1302) + 1)|0;
													$1305 = (($1304) - ($1303))|0;
													$1306 = HEAP32[$$pre$phiZ2D>>2]|0;
													$1307 = HEAP32[$$pre$phi177Z2D>>2]|0;
													$1308 = (($1306) + 1)|0;
													$1309 = (($1308) - ($1307))|0;
													__THREW__ = 0;
													$1310 = (invoke_iiiii(120,($1305|0),($1309|0),50,1)|0);
													$1311 = __THREW__; __THREW__ = 0;
													$1312 = $1311&1;
													if ($1312) {
														label = 16;
														break L3;
													}
													if ($1310) {
														$1313 = ((($f1)) + 56|0);
														__THREW__ = 0;
														$1314 = (invoke_iii(150,($1313|0),50)|0);
														$1315 = __THREW__; __THREW__ = 0;
														$1316 = $1315&1;
														if ($1316) {
															label = 16;
															break L3;
														}
														if (!($1314)) {
															HEAP32[$18>>2] = 33;
															$1317 = ((($18)) + 4|0);
															HEAP32[$1317>>2] = 0;
															$1318 = ((($this)) + 32|0);
															$1319 = HEAP32[$1318>>2]|0;
															$1320 = ((($this)) + 36|0);
															$1321 = HEAP32[$1320>>2]|0;
															$1322 = ($1319|0)==($1321|0);
															if ($1322) {
																$1335 = ((($this)) + 28|0);
																__THREW__ = 0;
																invoke_vii(125,($1335|0),($18|0));
																$1336 = __THREW__; __THREW__ = 0;
																$1337 = $1336&1;
																if ($1337) {
																	label = 16;
																	break L3;
																}
															} else {
																$1323 = $18;
																$1324 = $1323;
																$1325 = HEAP32[$1324>>2]|0;
																$1326 = (($1323) + 4)|0;
																$1327 = $1326;
																$1328 = HEAP32[$1327>>2]|0;
																$1329 = $1319;
																$1330 = $1329;
																HEAP32[$1330>>2] = $1325;
																$1331 = (($1329) + 4)|0;
																$1332 = $1331;
																HEAP32[$1332>>2] = $1328;
																$1333 = HEAP32[$1318>>2]|0;
																$1334 = ((($1333)) + 8|0);
																HEAP32[$1318>>2] = $1334;
															}
															break L5;
														}
													}
													$1338 = ((($f1)) + 200|0);
													__THREW__ = 0;
													$1339 = (invoke_iii(143,($1338|0),-1)|0);
													$1340 = __THREW__; __THREW__ = 0;
													$1341 = $1340&1;
													if ($1341) {
														label = 16;
														break L3;
													}
													$1342 = ($1339|0)==(1);
													if (!($1342)) {
														break L5;
													}
													HEAP32[$20>>2] = 63;
													$1343 = ((($20)) + 4|0);
													HEAP32[$1343>>2] = 0;
													$1344 = ((($this)) + 32|0);
													$1345 = HEAP32[$1344>>2]|0;
													$1346 = ((($this)) + 36|0);
													$1347 = HEAP32[$1346>>2]|0;
													$1348 = ($1345|0)==($1347|0);
													if ($1348) {
														$1361 = ((($this)) + 28|0);
														__THREW__ = 0;
														invoke_vii(125,($1361|0),($20|0));
														$1362 = __THREW__; __THREW__ = 0;
														$1363 = $1362&1;
														if ($1363) {
															label = 16;
															break L3;
														}
													} else {
														$1349 = $20;
														$1350 = $1349;
														$1351 = HEAP32[$1350>>2]|0;
														$1352 = (($1349) + 4)|0;
														$1353 = $1352;
														$1354 = HEAP32[$1353>>2]|0;
														$1355 = $1345;
														$1356 = $1355;
														HEAP32[$1356>>2] = $1351;
														$1357 = (($1355) + 4)|0;
														$1358 = $1357;
														HEAP32[$1358>>2] = $1354;
														$1359 = HEAP32[$1344>>2]|0;
														$1360 = ((($1359)) + 8|0);
														HEAP32[$1344>>2] = $1360;
													}
													break L5;
												}
											} while(0);
											switch ($1280|0) {
												case 45: case 95:  {
													break;
												}
												default: {
													break L5;
												}
											}
											__THREW__ = 0;
											$1364 = (invoke_iii(131,($charset|0),4)|0);
											$1365 = __THREW__; __THREW__ = 0;
											$1366 = $1365&1;
											if ($1366) {
												label = 16;
												break L3;
											}
											if (!($1364)) {
												__THREW__ = 0;
												$1367 = (invoke_iii(131,($charset|0),2)|0);
												$1368 = __THREW__; __THREW__ = 0;
												$1369 = $1368&1;
												if ($1369) {
													label = 16;
													break L3;
												}
												if (!($1367)) {
													break;
												}
											}
											$1370 = HEAP32[$1284>>2]|0;
											$1371 = HEAP32[$1283>>2]|0;
											$1372 = (($1370) - ($1371))|0;
											$1373 = ($1372|0)==(4);
											if (!($1373)) {
												break;
											}
											__THREW__ = 0;
											$1374 = (invoke_iii(195,($23|0),0)|0);
											$1375 = __THREW__; __THREW__ = 0;
											$1376 = $1375&1;
											if ($1376) {
												label = 16;
												break L3;
											}
											$1377 = ((($24)) + 8|0);
											$1378 = HEAP32[$1377>>2]|0;
											$1379 = HEAP32[$24>>2]|0;
											$1380 = (($1378) + 1)|0;
											$1381 = (($1380) - ($1379))|0;
											$1382 = ((($1374)) + 8|0);
											$1383 = HEAP32[$1382>>2]|0;
											$1384 = HEAP32[$1374>>2]|0;
											$1385 = (($1383) + 1)|0;
											$1386 = (($1385) - ($1384))|0;
											$1387 = ($1381|0)<($1386|0);
											if ($1387) {
												break;
											}
											$1388 = HEAP32[$1277>>2]|0;
											$1389 = HEAP32[$1275>>2]|0;
											$1390 = (($1388) - ($1389))|0;
											$1391 = ((($1374)) + 12|0);
											$1392 = HEAP32[$1391>>2]|0;
											$1393 = ((($1374)) + 4|0);
											$1394 = HEAP32[$1393>>2]|0;
											$1395 = (($1392) + 1)|0;
											$1396 = (($1395) - ($1394))|0;
											$1397 = ($1390|0)<($1396|0);
											if (!($1397)) {
												break;
											}
											$1398 = HEAP32[$23>>2]|0;
											$1399 = (($1384) - ($1398))|0;
											$1400 = ((($23)) + 8|0);
											$1401 = HEAP32[$1400>>2]|0;
											$1402 = (($1401) - ($1383))|0;
											__THREW__ = 0;
											$1403 = (invoke_iiiii(120,($1399|0),($1402|0),40,1)|0);
											$1404 = __THREW__; __THREW__ = 0;
											$1405 = $1404&1;
											if ($1405) {
												label = 16;
												break L3;
											}
											if ($1403) {
												HEAP32[$21>>2] = 186;
												$1406 = ((($21)) + 4|0);
												HEAP32[$1406>>2] = 0;
												$1407 = ((($this)) + 32|0);
												$1408 = HEAP32[$1407>>2]|0;
												$1409 = ((($this)) + 36|0);
												$1410 = HEAP32[$1409>>2]|0;
												$1411 = ($1408|0)==($1410|0);
												if ($1411) {
													$1424 = ((($this)) + 28|0);
													__THREW__ = 0;
													invoke_vii(125,($1424|0),($21|0));
													$1425 = __THREW__; __THREW__ = 0;
													$1426 = $1425&1;
													if ($1426) {
														label = 16;
														break L3;
													}
												} else {
													$1412 = $21;
													$1413 = $1412;
													$1414 = HEAP32[$1413>>2]|0;
													$1415 = (($1412) + 4)|0;
													$1416 = $1415;
													$1417 = HEAP32[$1416>>2]|0;
													$1418 = $1408;
													$1419 = $1418;
													HEAP32[$1419>>2] = $1414;
													$1420 = (($1418) + 4)|0;
													$1421 = $1420;
													HEAP32[$1421>>2] = $1417;
													$1422 = HEAP32[$1407>>2]|0;
													$1423 = ((($1422)) + 8|0);
													HEAP32[$1407>>2] = $1423;
												}
												break;
											} else {
												HEAP32[$22>>2] = 170;
												$1427 = ((($22)) + 4|0);
												HEAP32[$1427>>2] = 0;
												$1428 = ((($this)) + 32|0);
												$1429 = HEAP32[$1428>>2]|0;
												$1430 = ((($this)) + 36|0);
												$1431 = HEAP32[$1430>>2]|0;
												$1432 = ($1429|0)==($1431|0);
												if ($1432) {
													$1445 = ((($this)) + 28|0);
													__THREW__ = 0;
													invoke_vii(125,($1445|0),($22|0));
													$1446 = __THREW__; __THREW__ = 0;
													$1447 = $1446&1;
													if ($1447) {
														label = 16;
														break L3;
													}
												} else {
													$1433 = $22;
													$1434 = $1433;
													$1435 = HEAP32[$1434>>2]|0;
													$1436 = (($1433) + 4)|0;
													$1437 = $1436;
													$1438 = HEAP32[$1437>>2]|0;
													$1439 = $1429;
													$1440 = $1439;
													HEAP32[$1440>>2] = $1435;
													$1441 = (($1439) + 4)|0;
													$1442 = $1441;
													HEAP32[$1442>>2] = $1438;
													$1443 = HEAP32[$1428>>2]|0;
													$1444 = ((($1443)) + 8|0);
													HEAP32[$1428>>2] = $1444;
												}
												break;
											}
										}
										__THREW__ = 0;
										$439 = (invoke_iii(187,($f1|0),($charbox|0))|0);
										$440 = __THREW__; __THREW__ = 0;
										$441 = $440&1;
										if ($441) {
											label = 16;
											break L3;
										}
										switch ($439|0) {
											case 45:  {
												$442 = ((($23)) + 12|0);
												$443 = HEAP32[$442>>2]|0;
												$444 = ((($23)) + 4|0);
												$445 = HEAP32[$444>>2]|0;
												$446 = (($443) + 1)|0;
												$447 = (($446) - ($445))|0;
												$448 = $447 << 1;
												$449 = ((($23)) + 8|0);
												$450 = HEAP32[$449>>2]|0;
												$451 = HEAP32[$23>>2]|0;
												$452 = (($450) + 1)|0;
												$453 = (($452) - ($451))|0;
												$454 = ($448|0)>($453|0);
												$$113 = $454 ? 46 : 45;
												$code2$1 = $$113;
												break;
											}
											case 39: case 124:  {
												$code2$1 = 46;
												break;
											}
											default: {
												$455 = ($439|0)==(0);
												if ($455) {
													$456 = ((($23)) + 28|0);
													$457 = ((($23)) + 32|0);
													$458 = HEAP32[$457>>2]|0;
													$459 = HEAP32[$456>>2]|0;
													$460 = ($458|0)==($459|0);
													if ($460) {
														$461 = ((($23)) + 12|0);
														$462 = HEAP32[$461>>2]|0;
														$463 = ((($23)) + 4|0);
														$464 = HEAP32[$463>>2]|0;
														$465 = (($462) + 1)|0;
														$466 = (($465) - ($464))|0;
														$467 = $466 << 1;
														$468 = ((($24)) + 12|0);
														$469 = HEAP32[$468>>2]|0;
														$470 = ((($24)) + 4|0);
														$471 = HEAP32[$470>>2]|0;
														$472 = (($469) + 1)|0;
														$473 = (($472) - ($471))|0;
														$474 = ($467|0)<($473|0);
														if ($474) {
															$475 = ((($23)) + 8|0);
															$476 = HEAP32[$475>>2]|0;
															$477 = HEAP32[$23>>2]|0;
															$478 = (($476) + 1)|0;
															$479 = (($478) - ($477))|0;
															$480 = ((($24)) + 8|0);
															$481 = HEAP32[$480>>2]|0;
															$482 = HEAP32[$24>>2]|0;
															$483 = (($481) + 1)|0;
															$484 = (($483) - ($482))|0;
															$485 = ($479|0)>($484|0);
															if ($485) {
																$code2$1 = 0;
															} else {
																$486 = ($25*10)|0;
																$487 = ($466*7)|0;
																$488 = Math_imul($487, $479)|0;
																$489 = ($486|0)<($488|0);
																$$ = $489 ? 39 : 46;
																$code2$1 = $$;
															}
														} else {
															$code2$1 = 0;
														}
													} else {
														$code2$1 = 0;
													}
												} else {
													$code2$1 = $439;
												}
											}
										}
										$490 = ((($24)) + 28|0);
										$491 = ((($24)) + 32|0);
										$492 = HEAP32[$491>>2]|0;
										$493 = HEAP32[$490>>2]|0;
										$494 = ($492|0)==($493|0);
										L176: do {
											if ($494) {
												$495 = ($code2$1|0)==(46);
												switch ($code2$1|0) {
													case 39: case 46:  {
														break;
													}
													default: {
														break L176;
													}
												}
												$496 = ((($f2)) + 200|0);
												$497 = ((($24)) + 12|0);
												$498 = HEAP32[$497>>2]|0;
												$499 = ((($24)) + 4|0);
												$500 = HEAP32[$499>>2]|0;
												$501 = (($498) + 1)|0;
												$502 = (($501) - ($500))|0;
												$503 = (($502|0) / 4)&-1;
												__THREW__ = 0;
												$504 = (invoke_iii(143,($496|0),($503|0))|0);
												$505 = __THREW__; __THREW__ = 0;
												$506 = $505&1;
												if ($506) {
													label = 16;
													break L3;
												}
												$507 = ($504|0)==(2);
												L180: do {
													if ($507) {
														$508 = HEAP32[$499>>2]|0;
														$509 = ((($23)) + 12|0);
														$510 = HEAP32[$509>>2]|0;
														$511 = ($508|0)>($510|0);
														if ($511) {
															$512 = HEAP32[$24>>2]|0;
															$513 = ((($24)) + 8|0);
															$514 = HEAP32[$513>>2]|0;
															$515 = (($514) + ($512))|0;
															$516 = (($515|0) / 2)&-1;
															$517 = HEAP32[$23>>2]|0;
															$518 = ($516|0)<($517|0);
															if ($518) {
																__THREW__ = 0;
																$519 = (invoke_ii(29,40)|0);
																$520 = __THREW__; __THREW__ = 0;
																$521 = $520&1;
																if ($521) {
																	label = 16;
																	break L3;
																}
																__THREW__ = 0;
																invoke_vii(159,($519|0),($24|0));
																$522 = __THREW__; __THREW__ = 0;
																$523 = $522&1;
																if ($523) {
																	$571 = ___cxa_find_matching_catch_2()|0;
																	$572 = tempRet0;
																	__ZdlPv($519);
																	$$0 = $571;$$017 = $572;
																	break L3;
																}
																;HEAP32[$c23>>2]=HEAP32[$519>>2]|0;HEAP32[$c23+4>>2]=HEAP32[$519+4>>2]|0;HEAP32[$c23+8>>2]=HEAP32[$519+8>>2]|0;HEAP32[$c23+12>>2]=HEAP32[$519+12>>2]|0;
																$524 = ((($c23)) + 16|0);
																HEAP32[$524>>2] = 0;
																$525 = ((($c23)) + 20|0);
																HEAP32[$525>>2] = 0;
																$526 = ((($c23)) + 24|0);
																HEAP32[$526>>2] = 0;
																__THREW__ = 0;
																$527 = (invoke_ii(29,4)|0);
																$528 = __THREW__; __THREW__ = 0;
																$529 = $528&1;
																if ($529) {
																	label = 16;
																	break L3;
																}
																$530 = $519;
																HEAP32[$524>>2] = $527;
																$531 = ((($527)) + 4|0);
																$532 = ((($c23)) + 24|0);
																HEAP32[$532>>2] = $531;
																HEAP32[$527>>2] = $530;
																HEAP32[$525>>2] = $531;
																$533 = ((($c23)) + 28|0);
																HEAP32[$533>>2] = 0;
																$534 = ((($c23)) + 32|0);
																HEAP32[$534>>2] = 0;
																$535 = ((($c23)) + 36|0);
																HEAP32[$535>>2] = 0;
																__THREW__ = 0;
																invoke_viii(188,($c23|0),($charset|0),($charbox|0));
																$536 = __THREW__; __THREW__ = 0;
																$537 = $536&1;
																L189: do {
																	if ($537) {
																		label = 125;
																	} else {
																		__THREW__ = 0;
																		$538 = (invoke_iii(178,($c23|0),110)|0);
																		$539 = __THREW__; __THREW__ = 0;
																		$540 = $539&1;
																		if ($540) {
																			label = 125;
																			break;
																		}
																		L192: do {
																			if ($538) {
																				do {
																					if ($495) {
																						$541 = HEAP32[$23>>2]|0;
																						$542 = HEAP32[$24>>2]|0;
																						$543 = HEAP32[$513>>2]|0;
																						$544 = (($543) + ($542))|0;
																						$545 = (($544|0) / 2)&-1;
																						$546 = ($541|0)<($545|0);
																						if (!($546)) {
																							$547 = ((($23)) + 8|0);
																							$548 = HEAP32[$547>>2]|0;
																							$549 = ($548|0)>($543|0);
																							if (!($549)) {
																								$584 = $542;$585 = $543;
																								break;
																							}
																						}
																						HEAP32[$1>>2] = 110;
																						$550 = ((($1)) + 4|0);
																						HEAP32[$550>>2] = 0;
																						$551 = ((($this)) + 32|0);
																						$552 = HEAP32[$551>>2]|0;
																						$553 = ((($this)) + 36|0);
																						$554 = HEAP32[$553>>2]|0;
																						$555 = ($552|0)==($554|0);
																						if ($555) {
																							$568 = ((($this)) + 28|0);
																							__THREW__ = 0;
																							invoke_vii(125,($568|0),($1|0));
																							$569 = __THREW__; __THREW__ = 0;
																							$570 = $569&1;
																							if ($570) {
																								label = 125;
																								break L189;
																							}
																						} else {
																							$556 = $1;
																							$557 = $556;
																							$558 = HEAP32[$557>>2]|0;
																							$559 = (($556) + 4)|0;
																							$560 = $559;
																							$561 = HEAP32[$560>>2]|0;
																							$562 = $552;
																							$563 = $562;
																							HEAP32[$563>>2] = $558;
																							$564 = (($562) + 4)|0;
																							$565 = $564;
																							HEAP32[$565>>2] = $561;
																							$566 = HEAP32[$551>>2]|0;
																							$567 = ((($566)) + 8|0);
																							HEAP32[$551>>2] = $567;
																						}
																						$$3 = 1;
																						break L192;
																					} else {
																						$$pre = HEAP32[$24>>2]|0;
																						$$pre168 = HEAP32[$513>>2]|0;
																						$584 = $$pre;$585 = $$pre168;
																					}
																				} while(0);
																				$579 = HEAP32[$499>>2]|0;
																				$580 = HEAP32[$497>>2]|0;
																				$581 = (($580) + ($579))|0;
																				$582 = (($581|0) / 2)&-1;
																				$583 = (($585) + ($584))|0;
																				$586 = (($583|0) / 2)&-1;
																				__THREW__ = 0;
																				$587 = (invoke_iiiii(146,($24|0),($582|0),($586|0),1)|0);
																				$588 = __THREW__; __THREW__ = 0;
																				$589 = $588&1;
																				if ($589) {
																					label = 125;
																					break L189;
																				}
																				$590 = HEAP32[$24>>2]|0;
																				$591 = HEAP32[$513>>2]|0;
																				$592 = (($591) + ($590))|0;
																				$593 = (($592|0) / 2)&-1;
																				$594 = ($593|0)>($587|0);
																				do {
																					if ($594) {
																						$606 = $590;$609 = $591;$col$0$lcssa = $593;
																					} else {
																						$$pre169 = HEAP32[$497>>2]|0;
																						$597 = $$pre169;$col$0164 = $593;
																						while(1) {
																							$595 = HEAP32[$499>>2]|0;
																							$596 = (($597) + ($595))|0;
																							$598 = (($596|0) / 2)&-1;
																							__THREW__ = 0;
																							$599 = (invoke_iiiii(147,($24|0),($598|0),($col$0164|0),1)|0);
																							$600 = __THREW__; __THREW__ = 0;
																							$601 = $600&1;
																							if ($601) {
																								label = 124;
																								break;
																							}
																							$602 = HEAP32[$497>>2]|0;
																							$603 = ($599|0)<($602|0);
																							if ($603) {
																								$col$0$lcssa$ph = $col$0164;
																								label = 133;
																								break;
																							}
																							$604 = (($col$0164) + 1)|0;
																							$605 = ($col$0164|0)<($587|0);
																							if ($605) {
																								$597 = $602;$col$0164 = $604;
																							} else {
																								$col$0$lcssa$ph = $604;
																								label = 133;
																								break;
																							}
																						}
																						if ((label|0) == 124) {
																							$573 = ___cxa_find_matching_catch_2()|0;
																							$574 = tempRet0;
																							$lpad$phi$index = $573;$lpad$phi$index2 = $574;
																							break L189;
																						}
																						else if ((label|0) == 133) {
																							$$pre170 = HEAP32[$24>>2]|0;
																							$$pre171 = HEAP32[$513>>2]|0;
																							$606 = $$pre170;$609 = $$pre171;$col$0$lcssa = $col$0$lcssa$ph;
																							break;
																						}
																					}
																				} while(0);
																				$607 = ($606|0)<($col$0$lcssa|0);
																				$608 = ($col$0$lcssa|0)<($609|0);
																				$or$cond115 = $607 & $608;
																				if (!($or$cond115)) {
																					$$3 = 0;
																					break;
																				}
																				__THREW__ = 0;
																				$610 = (invoke_iii(131,($charset|0),2)|0);
																				$611 = __THREW__; __THREW__ = 0;
																				$612 = $611&1;
																				if ($612) {
																					label = 125;
																					break L189;
																				}
																				do {
																					if ($610) {
																						$613 = ((($f2)) + 152|0);
																						__THREW__ = 0;
																						$614 = (invoke_ii(167,($613|0))|0);
																						$615 = __THREW__; __THREW__ = 0;
																						$616 = $615&1;
																						if ($616) {
																							label = 125;
																							break L189;
																						}
																						if (!($614)) {
																							break;
																						}
																						$617 = (($col$0$lcssa) + -1)|0;
																						__THREW__ = 0;
																						(invoke_iiiiii(140,($this|0),84,($617|0),304,1)|0);
																						$618 = __THREW__; __THREW__ = 0;
																						$619 = $618&1;
																						if ($619) {
																							label = 125;
																							break L189;
																						} else {
																							$$3 = 1;
																							break L192;
																						}
																					}
																				} while(0);
																				$620 = $495 ? 105 : 237;
																				$621 = (($col$0$lcssa) + -1)|0;
																				__THREW__ = 0;
																				(invoke_iiiiii(140,($this|0),114,($621|0),($620|0),1)|0);
																				$622 = __THREW__; __THREW__ = 0;
																				$623 = $622&1;
																				if ($623) {
																					label = 125;
																					break L189;
																				} else {
																					$$3 = 1;
																				}
																			} else {
																				$$3 = 0;
																			}
																		} while(0);
																		__THREW__ = 0;
																		invoke_vi(176,($c23|0));
																		$624 = __THREW__; __THREW__ = 0;
																		$625 = $624&1;
																		if ($625) {
																			label = 16;
																			break L3;
																		}
																		$cond6 = ($$3|0)==(0);
																		if ($cond6) {
																			break L180;
																		} else {
																			break L5;
																		}
																	}
																} while(0);
																if ((label|0) == 125) {
																	$575 = ___cxa_find_matching_catch_2()|0;
																	$576 = tempRet0;
																	$lpad$phi$index = $575;$lpad$phi$index2 = $576;
																}
																__THREW__ = 0;
																invoke_vi(176,($c23|0));
																$577 = __THREW__; __THREW__ = 0;
																$578 = $577&1;
																if (!($578)) {
																	$$0 = $lpad$phi$index;$$017 = $lpad$phi$index2;
																	break L3;
																}
																$1454 = ___cxa_find_matching_catch_3(0|0)|0;
																$1455 = tempRet0;
																___clang_call_terminate($1454);
																// unreachable;
															}
														}
													}
												} while(0);
												if ($495) {
													$626 = HEAP32[$497>>2]|0;
													$627 = HEAP32[$499>>2]|0;
													$628 = (($626) + 1)|0;
													$629 = (($628) - ($627))|0;
													$630 = (($629|0) / 4)&-1;
													__THREW__ = 0;
													$631 = (invoke_iii(143,($496|0),($630|0))|0);
													$632 = __THREW__; __THREW__ = 0;
													$633 = $632&1;
													if ($633) {
														label = 16;
														break L3;
													}
													$634 = ($631|0)==(1);
													if ($634) {
														$635 = ((($23)) + 12|0);
														$636 = HEAP32[$635>>2]|0;
														$637 = HEAP32[$499>>2]|0;
														$638 = ($636|0)>($637|0);
														if (!($638)) {
															$639 = ((($f2)) + 152|0);
															$640 = ((($24)) + 8|0);
															$641 = HEAP32[$640>>2]|0;
															$642 = HEAP32[$24>>2]|0;
															$643 = (($641) + 1)|0;
															$644 = (($643) - ($642))|0;
															$645 = (($644|0) / 2)&-1;
															__THREW__ = 0;
															$646 = (invoke_iii(143,($639|0),($645|0))|0);
															$647 = __THREW__; __THREW__ = 0;
															$648 = $647&1;
															if ($648) {
																label = 16;
																break L3;
															}
															$649 = ($646|0)<(3);
															if (!($649)) {
																break;
															}
															__THREW__ = 0;
															$650 = (invoke_iii(153,($24|0),($hdiff|0))|0);
															$651 = __THREW__; __THREW__ = 0;
															$652 = $651&1;
															if ($652) {
																label = 16;
																break L3;
															}
															L237: do {
																if ($650) {
																	$653 = HEAP32[$hdiff>>2]|0;
																	$ispos = ($653|0)>(-1);
																	$neg = (0 - ($653))|0;
																	$654 = $ispos ? $653 : $neg;
																	$655 = HEAP32[$497>>2]|0;
																	$656 = HEAP32[$499>>2]|0;
																	$657 = (($655) + 1)|0;
																	$658 = (($657) - ($656))|0;
																	$659 = (($658|0) / 2)&-1;
																	$660 = ($654|0)<($659|0);
																	if ($660) {
																		label = 183;
																		break;
																	}
																	$661 = ($653|0)>(0);
																	do {
																		if ($661) {
																			$662 = ((($f2)) + 160|0);
																			$663 = HEAP32[$662>>2]|0;
																			$664 = ($663|0)<(0);
																			if ($664) {
																				__THREW__ = 0;
																				invoke_vi(141,($639|0));
																				$665 = __THREW__; __THREW__ = 0;
																				$666 = $665&1;
																				if ($666) {
																					label = 16;
																					break L3;
																				}
																			}
																			$667 = ((($f2)) + 188|0);
																			$668 = ((($f2)) + 192|0);
																			$669 = HEAP32[$668>>2]|0;
																			$670 = HEAP32[$667>>2]|0;
																			$671 = (($669) - ($670))|0;
																			$672 = $671 >> 2;
																			$673 = ($672*80)|0;
																			$674 = (($673) + -80)|0;
																			$675 = (($674|0) / 100)&-1;
																			__THREW__ = 0;
																			$676 = (invoke_iiii(145,($639|0),($675|0),2)|0);
																			$677 = __THREW__; __THREW__ = 0;
																			$678 = $677&1;
																			if ($678) {
																				label = 16;
																				break L3;
																			}
																			if (!($676)) {
																				$$pre173 = HEAP32[$hdiff>>2]|0;
																				$700 = $$pre173;
																				break;
																			}
																			HEAP32[$2>>2] = 106;
																			$679 = ((($2)) + 4|0);
																			HEAP32[$679>>2] = 0;
																			$680 = ((($this)) + 32|0);
																			$681 = HEAP32[$680>>2]|0;
																			$682 = ((($this)) + 36|0);
																			$683 = HEAP32[$682>>2]|0;
																			$684 = ($681|0)==($683|0);
																			if ($684) {
																				$697 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($697|0),($2|0));
																				$698 = __THREW__; __THREW__ = 0;
																				$699 = $698&1;
																				if ($699) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$685 = $2;
																				$686 = $685;
																				$687 = HEAP32[$686>>2]|0;
																				$688 = (($685) + 4)|0;
																				$689 = $688;
																				$690 = HEAP32[$689>>2]|0;
																				$691 = $681;
																				$692 = $691;
																				HEAP32[$692>>2] = $687;
																				$693 = (($691) + 4)|0;
																				$694 = $693;
																				HEAP32[$694>>2] = $690;
																				$695 = HEAP32[$680>>2]|0;
																				$696 = ((($695)) + 8|0);
																				HEAP32[$680>>2] = $696;
																			}
																			break L237;
																		} else {
																			$700 = $653;
																		}
																	} while(0);
																	$701 = ($700|0)<(0);
																	if (!($701)) {
																		label = 183;
																		break;
																	}
																	__THREW__ = 0;
																	$702 = (invoke_iii(131,($charset|0),4)|0);
																	$703 = __THREW__; __THREW__ = 0;
																	$704 = $703&1;
																	if ($704) {
																		label = 16;
																		break L3;
																	}
																	if ($702) {
																		label = 167;
																	} else {
																		__THREW__ = 0;
																		$705 = (invoke_iii(131,($charset|0),2)|0);
																		$706 = __THREW__; __THREW__ = 0;
																		$707 = $706&1;
																		if ($707) {
																			label = 16;
																			break L3;
																		}
																		if ($705) {
																			label = 167;
																		}
																	}
																	do {
																		if ((label|0) == 167) {
																			$708 = HEAP32[$hdiff>>2]|0;
																			$709 = Math_imul($708, -4)|0;
																			$710 = HEAP32[$497>>2]|0;
																			$711 = HEAP32[$499>>2]|0;
																			$712 = (($710) + 1)|0;
																			$713 = (($712) - ($711))|0;
																			$714 = ($713*3)|0;
																			$715 = ($709|0)>($714|0);
																			if ($715) {
																				break;
																			}
																			$716 = ((($f2)) + 296|0);
																			__THREW__ = 0;
																			$717 = (invoke_ii(148,($716|0))|0);
																			$718 = __THREW__; __THREW__ = 0;
																			$719 = $718&1;
																			if ($719) {
																				label = 16;
																				break L3;
																			}
																			$720 = ((($f1)) + 296|0);
																			__THREW__ = 0;
																			$721 = (invoke_ii(148,($720|0))|0);
																			$722 = __THREW__; __THREW__ = 0;
																			$723 = $722&1;
																			if ($723) {
																				label = 16;
																				break L3;
																			}
																			$724 = $721 << 1;
																			$725 = ($717|0)>($724|0);
																			if (!($725)) {
																				break;
																			}
																			$726 = ((($f2)) + 56|0);
																			__THREW__ = 0;
																			$727 = (invoke_iii(143,($726|0),-1)|0);
																			$728 = __THREW__; __THREW__ = 0;
																			$729 = $728&1;
																			if ($729) {
																				label = 16;
																				break L3;
																			}
																			$730 = ($727|0)==(1);
																			if (!($730)) {
																				break;
																			}
																			__THREW__ = 0;
																			$731 = (invoke_iii(139,($496|0),0)|0);
																			$732 = __THREW__; __THREW__ = 0;
																			$733 = $732&1;
																			if ($733) {
																				label = 16;
																				break L3;
																			}
																			$734 = $731 << 1;
																			$735 = HEAP32[$497>>2]|0;
																			$736 = HEAP32[$499>>2]|0;
																			$737 = (($735) + 1)|0;
																			$738 = (($737) - ($736))|0;
																			$739 = ($734|0)<($738|0);
																			if (!($739)) {
																				break;
																			}
																			HEAP32[$3>>2] = 191;
																			$740 = ((($3)) + 4|0);
																			HEAP32[$740>>2] = 0;
																			$741 = ((($this)) + 32|0);
																			$742 = HEAP32[$741>>2]|0;
																			$743 = ((($this)) + 36|0);
																			$744 = HEAP32[$743>>2]|0;
																			$745 = ($742|0)==($744|0);
																			if ($745) {
																				$758 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($758|0),($3|0));
																				$759 = __THREW__; __THREW__ = 0;
																				$760 = $759&1;
																				if ($760) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$746 = $3;
																				$747 = $746;
																				$748 = HEAP32[$747>>2]|0;
																				$749 = (($746) + 4)|0;
																				$750 = $749;
																				$751 = HEAP32[$750>>2]|0;
																				$752 = $742;
																				$753 = $752;
																				HEAP32[$753>>2] = $748;
																				$754 = (($752) + 4)|0;
																				$755 = $754;
																				HEAP32[$755>>2] = $751;
																				$756 = HEAP32[$741>>2]|0;
																				$757 = ((($756)) + 8|0);
																				HEAP32[$741>>2] = $757;
																			}
																			break L237;
																		}
																	} while(0);
																	HEAP32[$4>>2] = 105;
																	$761 = ((($4)) + 4|0);
																	HEAP32[$761>>2] = 0;
																	$762 = ((($this)) + 32|0);
																	$763 = HEAP32[$762>>2]|0;
																	$764 = ((($this)) + 36|0);
																	$765 = HEAP32[$764>>2]|0;
																	$766 = ($763|0)==($765|0);
																	if ($766) {
																		$779 = ((($this)) + 28|0);
																		__THREW__ = 0;
																		invoke_vii(125,($779|0),($4|0));
																		$780 = __THREW__; __THREW__ = 0;
																		$781 = $780&1;
																		if ($781) {
																			label = 16;
																			break L3;
																		}
																	} else {
																		$767 = $4;
																		$768 = $767;
																		$769 = HEAP32[$768>>2]|0;
																		$770 = (($767) + 4)|0;
																		$771 = $770;
																		$772 = HEAP32[$771>>2]|0;
																		$773 = $763;
																		$774 = $773;
																		HEAP32[$774>>2] = $769;
																		$775 = (($773) + 4)|0;
																		$776 = $775;
																		HEAP32[$776>>2] = $772;
																		$777 = HEAP32[$762>>2]|0;
																		$778 = ((($777)) + 8|0);
																		HEAP32[$762>>2] = $778;
																	}
																} else {
																	label = 183;
																}
															} while(0);
															L278: do {
																if ((label|0) == 183) {
																	$782 = ((($f2)) + 104|0);
																	__THREW__ = 0;
																	$783 = (invoke_iii(143,($782|0),-1)|0);
																	$784 = __THREW__; __THREW__ = 0;
																	$785 = $784&1;
																	if ($785) {
																		label = 16;
																		break L3;
																	}
																	$786 = ($783|0)==(1);
																	if (!($786)) {
																		break L176;
																	}
																	$787 = HEAP32[$497>>2]|0;
																	$788 = HEAP32[$499>>2]|0;
																	$789 = (($787) + 1)|0;
																	$790 = (($789) - ($788))|0;
																	$791 = ((($charbox)) + 12|0);
																	$792 = HEAP32[$791>>2]|0;
																	$793 = ((($charbox)) + 4|0);
																	$794 = HEAP32[$793>>2]|0;
																	$795 = (($792) + 1)|0;
																	$796 = (($795) - ($794))|0;
																	$797 = ($790|0)>($796|0);
																	if ($797) {
																		$798 = (($787) - ($788))|0;
																		$799 = ($798*80)|0;
																		$800 = (($799|0) / 100)&-1;
																		$801 = (($800) + ($788))|0;
																		$802 = ($801|0)>($792|0);
																		$1456 = $802;
																	} else {
																		$1456 = 0;
																	}
																	$803 = ((($f1)) + 296|0);
																	__THREW__ = 0;
																	$804 = (invoke_ii(148,($803|0))|0);
																	$805 = __THREW__; __THREW__ = 0;
																	$806 = $805&1;
																	if ($806) {
																		label = 16;
																		break L3;
																	}
																	$807 = ((($f2)) + 296|0);
																	__THREW__ = 0;
																	$808 = (invoke_ii(148,($807|0))|0);
																	$809 = __THREW__; __THREW__ = 0;
																	$810 = $809&1;
																	if ($810) {
																		label = 16;
																		break L3;
																	}
																	__THREW__ = 0;
																	$811 = (invoke_iiiii(120,($804|0),($808|0),20,1)|0);
																	$812 = __THREW__; __THREW__ = 0;
																	$813 = $812&1;
																	if ($813) {
																		label = 16;
																		break L3;
																	}
																	if ($811) {
																		__THREW__ = 0;
																		$814 = (invoke_iii(131,($charset|0),4)|0);
																		$815 = __THREW__; __THREW__ = 0;
																		$816 = $815&1;
																		if ($816) {
																			label = 16;
																			break L3;
																		}
																		if ($814) {
																			label = 195;
																		} else {
																			__THREW__ = 0;
																			$817 = (invoke_iii(131,($charset|0),2)|0);
																			$818 = __THREW__; __THREW__ = 0;
																			$819 = $818&1;
																			if ($819) {
																				label = 16;
																				break L3;
																			}
																			if ($817) {
																				label = 195;
																			}
																		}
																		do {
																			if ((label|0) == 195) {
																				$820 = ((($f2)) + 56|0);
																				__THREW__ = 0;
																				$821 = (invoke_iii(150,($820|0),50)|0);
																				$822 = __THREW__; __THREW__ = 0;
																				$823 = $822&1;
																				if ($823) {
																					label = 16;
																					break L3;
																				}
																				if ($821) {
																					break;
																				}
																				__THREW__ = 0;
																				$824 = (invoke_ii(148,($807|0))|0);
																				$825 = __THREW__; __THREW__ = 0;
																				$826 = $825&1;
																				if ($826) {
																					label = 16;
																					break L3;
																				}
																				__THREW__ = 0;
																				$827 = (invoke_ii(148,($803|0))|0);
																				$828 = __THREW__; __THREW__ = 0;
																				$829 = $828&1;
																				if ($829) {
																					label = 16;
																					break L3;
																				}
																				$830 = ($824|0)<($827|0);
																				if ($830) {
																					break;
																				}
																				$831 = ((($f2)) + 304|0);
																				$832 = HEAP32[$831>>2]|0;
																				$833 = ($832|0)<(0);
																				if ($833) {
																					__THREW__ = 0;
																					invoke_vi(141,($807|0));
																					$834 = __THREW__; __THREW__ = 0;
																					$835 = $834&1;
																					if ($835) {
																						label = 16;
																						break L3;
																					}
																				}
																				$836 = ((($f2)) + 332|0);
																				$837 = ((($f2)) + 336|0);
																				$838 = HEAP32[$837>>2]|0;
																				$839 = HEAP32[$836>>2]|0;
																				$840 = (($838) - ($839))|0;
																				$841 = $840 >> 2;
																				$842 = ($841*10)|0;
																				$843 = (($842) + -10)|0;
																				$844 = (($843|0) / 100)&-1;
																				__THREW__ = 0;
																				$845 = (invoke_iii(139,($807|0),($844|0))|0);
																				$846 = __THREW__; __THREW__ = 0;
																				$847 = $846&1;
																				if ($847) {
																					label = 16;
																					break L3;
																				}
																				__THREW__ = 0;
																				$848 = (invoke_ii(148,($803|0))|0);
																				$849 = __THREW__; __THREW__ = 0;
																				$850 = $849&1;
																				if ($850) {
																					label = 16;
																					break L3;
																				}
																				$851 = ($845*3)|0;
																				$852 = $848 << 1;
																				$853 = ($851|0)<($852|0);
																				if (!($853)) {
																					$854 = HEAP32[$23>>2]|0;
																					$855 = HEAP32[$24>>2]|0;
																					$856 = ($854|0)>($855|0);
																					if ($856) {
																						break;
																					}
																					$857 = HEAP32[$499>>2]|0;
																					$858 = HEAP32[$497>>2]|0;
																					$859 = (($858) - ($857))|0;
																					$860 = ($859*80)|0;
																					$861 = (($860|0) / 100)&-1;
																					$862 = (($861) + ($857))|0;
																					$863 = HEAP32[$791>>2]|0;
																					$864 = ($862|0)>($863|0);
																					if (!($864)) {
																						break;
																					}
																				}
																				HEAP32[$5>>2] = 161;
																				$865 = ((($5)) + 4|0);
																				HEAP32[$865>>2] = 0;
																				$866 = ((($this)) + 32|0);
																				$867 = HEAP32[$866>>2]|0;
																				$868 = ((($this)) + 36|0);
																				$869 = HEAP32[$868>>2]|0;
																				$870 = ($867|0)==($869|0);
																				if ($870) {
																					$883 = ((($this)) + 28|0);
																					__THREW__ = 0;
																					invoke_vii(125,($883|0),($5|0));
																					$884 = __THREW__; __THREW__ = 0;
																					$885 = $884&1;
																					if ($885) {
																						label = 16;
																						break L3;
																					}
																				} else {
																					$871 = $5;
																					$872 = $871;
																					$873 = HEAP32[$872>>2]|0;
																					$874 = (($871) + 4)|0;
																					$875 = $874;
																					$876 = HEAP32[$875>>2]|0;
																					$877 = $867;
																					$878 = $877;
																					HEAP32[$878>>2] = $873;
																					$879 = (($877) + 4)|0;
																					$880 = $879;
																					HEAP32[$880>>2] = $876;
																					$881 = HEAP32[$866>>2]|0;
																					$882 = ((($881)) + 8|0);
																					HEAP32[$866>>2] = $882;
																				}
																				break L278;
																			}
																		} while(0);
																		if ($1456) {
																			HEAP32[$7>>2] = 106;
																			$886 = ((($7)) + 4|0);
																			HEAP32[$886>>2] = 0;
																			$887 = ((($this)) + 32|0);
																			$888 = HEAP32[$887>>2]|0;
																			$889 = ((($this)) + 36|0);
																			$890 = HEAP32[$889>>2]|0;
																			$891 = ($888|0)==($890|0);
																			if ($891) {
																				$904 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($904|0),($7|0));
																				$905 = __THREW__; __THREW__ = 0;
																				$906 = $905&1;
																				if ($906) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$892 = $7;
																				$893 = $892;
																				$894 = HEAP32[$893>>2]|0;
																				$895 = (($892) + 4)|0;
																				$896 = $895;
																				$897 = HEAP32[$896>>2]|0;
																				$898 = $888;
																				$899 = $898;
																				HEAP32[$899>>2] = $894;
																				$900 = (($898) + 4)|0;
																				$901 = $900;
																				HEAP32[$901>>2] = $897;
																				$902 = HEAP32[$887>>2]|0;
																				$903 = ((($902)) + 8|0);
																				HEAP32[$887>>2] = $903;
																			}
																			break;
																		} else {
																			HEAP32[$8>>2] = 105;
																			$907 = ((($8)) + 4|0);
																			HEAP32[$907>>2] = 0;
																			$908 = ((($this)) + 32|0);
																			$909 = HEAP32[$908>>2]|0;
																			$910 = ((($this)) + 36|0);
																			$911 = HEAP32[$910>>2]|0;
																			$912 = ($909|0)==($911|0);
																			if ($912) {
																				$925 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($925|0),($8|0));
																				$926 = __THREW__; __THREW__ = 0;
																				$927 = $926&1;
																				if ($927) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$913 = $8;
																				$914 = $913;
																				$915 = HEAP32[$914>>2]|0;
																				$916 = (($913) + 4)|0;
																				$917 = $916;
																				$918 = HEAP32[$917>>2]|0;
																				$919 = $909;
																				$920 = $919;
																				HEAP32[$920>>2] = $915;
																				$921 = (($919) + 4)|0;
																				$922 = $921;
																				HEAP32[$922>>2] = $918;
																				$923 = HEAP32[$908>>2]|0;
																				$924 = ((($923)) + 8|0);
																				HEAP32[$908>>2] = $924;
																			}
																			break;
																		}
																	}
																	__THREW__ = 0;
																	$928 = (invoke_ii(148,($807|0))|0);
																	$929 = __THREW__; __THREW__ = 0;
																	$930 = $929&1;
																	if ($930) {
																		label = 16;
																		break L3;
																	}
																	__THREW__ = 0;
																	$931 = (invoke_ii(148,($803|0))|0);
																	$932 = __THREW__; __THREW__ = 0;
																	$933 = $932&1;
																	if ($933) {
																		label = 16;
																		break L3;
																	}
																	$934 = ($928*3)|0;
																	$935 = $931 << 2;
																	$936 = ($934|0)>($935|0);
																	do {
																		if ($936) {
																			$937 = HEAP32[$499>>2]|0;
																			$938 = HEAP32[$497>>2]|0;
																			$939 = (($938) + ($937))|0;
																			$940 = (($939|0) / 2)&-1;
																			$941 = HEAP32[$24>>2]|0;
																			$942 = HEAP32[$640>>2]|0;
																			$943 = (($942) - ($941))|0;
																			$944 = (($943|0) / 10)&-1;
																			$945 = (($944) + ($941))|0;
																			__THREW__ = 0;
																			$946 = (invoke_iiiii(147,($24|0),($940|0),($945|0),1)|0);
																			$947 = __THREW__; __THREW__ = 0;
																			$948 = $947&1;
																			if ($948) {
																				label = 16;
																				break L3;
																			}
																			$949 = HEAP32[$497>>2]|0;
																			$950 = ($946|0)<($949|0);
																			if (!($950)) {
																				break;
																			}
																			$951 = ((($f2)) + 160|0);
																			$952 = HEAP32[$951>>2]|0;
																			$953 = ($952|0)<(0);
																			if ($953) {
																				__THREW__ = 0;
																				invoke_vi(141,($639|0));
																				$954 = __THREW__; __THREW__ = 0;
																				$955 = $954&1;
																				if ($955) {
																					label = 16;
																					break L3;
																				}
																			}
																			$956 = ((($f2)) + 188|0);
																			$957 = ((($f2)) + 192|0);
																			$958 = HEAP32[$957>>2]|0;
																			$959 = HEAP32[$956>>2]|0;
																			$960 = (($958) - ($959))|0;
																			$961 = $960 >> 2;
																			$962 = ($961*75)|0;
																			$963 = (($962) + -75)|0;
																			$964 = (($963|0) / 100)&-1;
																			__THREW__ = 0;
																			$965 = (invoke_iiii(145,($639|0),($964|0),2)|0);
																			$966 = __THREW__; __THREW__ = 0;
																			$967 = $966&1;
																			if ($967) {
																				label = 16;
																				break L3;
																			}
																			if (!($965)) {
																				break;
																			}
																			$968 = HEAP32[$23>>2]|0;
																			$969 = HEAP32[$24>>2]|0;
																			$970 = HEAP32[$640>>2]|0;
																			$971 = (($970) + ($969))|0;
																			$972 = (($971|0) / 2)&-1;
																			$973 = ($968|0)<($972|0);
																			if ($973) {
																				$974 = HEAP32[$499>>2]|0;
																				$975 = HEAP32[$497>>2]|0;
																				$976 = (($975) + ($974))|0;
																				$977 = (($976|0) / 2)&-1;
																				$978 = (($970) - ($969))|0;
																				$979 = (($978|0) / 10)&-1;
																				$980 = (($979) + ($969))|0;
																				__THREW__ = 0;
																				$981 = (invoke_iiiii(138,($24|0),($977|0),($980|0),1)|0);
																				$982 = __THREW__; __THREW__ = 0;
																				$983 = $982&1;
																				if ($983) {
																					label = 16;
																					break L3;
																				}
																				$984 = HEAP32[$499>>2]|0;
																				$985 = ($981|0)>($984|0);
																				if ($985) {
																					break;
																				}
																			}
																			HEAP32[$11>>2] = 106;
																			$986 = ((($11)) + 4|0);
																			HEAP32[$986>>2] = 0;
																			$987 = ((($this)) + 32|0);
																			$988 = HEAP32[$987>>2]|0;
																			$989 = ((($this)) + 36|0);
																			$990 = HEAP32[$989>>2]|0;
																			$991 = ($988|0)==($990|0);
																			if ($991) {
																				$1004 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($1004|0),($11|0));
																				$1005 = __THREW__; __THREW__ = 0;
																				$1006 = $1005&1;
																				if ($1006) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$992 = $11;
																				$993 = $992;
																				$994 = HEAP32[$993>>2]|0;
																				$995 = (($992) + 4)|0;
																				$996 = $995;
																				$997 = HEAP32[$996>>2]|0;
																				$998 = $988;
																				$999 = $998;
																				HEAP32[$999>>2] = $994;
																				$1000 = (($998) + 4)|0;
																				$1001 = $1000;
																				HEAP32[$1001>>2] = $997;
																				$1002 = HEAP32[$987>>2]|0;
																				$1003 = ((($1002)) + 8|0);
																				HEAP32[$987>>2] = $1003;
																			}
																			break L278;
																		}
																	} while(0);
																	__THREW__ = 0;
																	$1007 = (invoke_iii(131,($charset|0),2)|0);
																	$1008 = __THREW__; __THREW__ = 0;
																	$1009 = $1008&1;
																	if ($1009) {
																		label = 16;
																		break L3;
																	}
																	do {
																		if ($1007) {
																			__THREW__ = 0;
																			$1010 = (invoke_ii(167,($639|0))|0);
																			$1011 = __THREW__; __THREW__ = 0;
																			$1012 = $1011&1;
																			if ($1012) {
																				label = 16;
																				break L3;
																			}
																			if (!($1010)) {
																				break;
																			}
																			HEAP32[$12>>2] = 304;
																			$1013 = ((($12)) + 4|0);
																			HEAP32[$1013>>2] = 0;
																			$1014 = ((($this)) + 32|0);
																			$1015 = HEAP32[$1014>>2]|0;
																			$1016 = ((($this)) + 36|0);
																			$1017 = HEAP32[$1016>>2]|0;
																			$1018 = ($1015|0)==($1017|0);
																			if ($1018) {
																				$1031 = ((($this)) + 28|0);
																				__THREW__ = 0;
																				invoke_vii(125,($1031|0),($12|0));
																				$1032 = __THREW__; __THREW__ = 0;
																				$1033 = $1032&1;
																				if ($1033) {
																					label = 16;
																					break L3;
																				}
																			} else {
																				$1019 = $12;
																				$1020 = $1019;
																				$1021 = HEAP32[$1020>>2]|0;
																				$1022 = (($1019) + 4)|0;
																				$1023 = $1022;
																				$1024 = HEAP32[$1023>>2]|0;
																				$1025 = $1015;
																				$1026 = $1025;
																				HEAP32[$1026>>2] = $1021;
																				$1027 = (($1025) + 4)|0;
																				$1028 = $1027;
																				HEAP32[$1028>>2] = $1024;
																				$1029 = HEAP32[$1014>>2]|0;
																				$1030 = ((($1029)) + 8|0);
																				HEAP32[$1014>>2] = $1030;
																			}
																			break L278;
																		}
																	} while(0);
																	if ($1456) {
																		HEAP32[$13>>2] = 106;
																		$1034 = ((($13)) + 4|0);
																		HEAP32[$1034>>2] = 0;
																		$1035 = ((($this)) + 32|0);
																		$1036 = HEAP32[$1035>>2]|0;
																		$1037 = ((($this)) + 36|0);
																		$1038 = HEAP32[$1037>>2]|0;
																		$1039 = ($1036|0)==($1038|0);
																		if ($1039) {
																			$1052 = ((($this)) + 28|0);
																			__THREW__ = 0;
																			invoke_vii(125,($1052|0),($13|0));
																			$1053 = __THREW__; __THREW__ = 0;
																			$1054 = $1053&1;
																			if ($1054) {
																				label = 16;
																				break L3;
																			}
																		} else {
																			$1040 = $13;
																			$1041 = $1040;
																			$1042 = HEAP32[$1041>>2]|0;
																			$1043 = (($1040) + 4)|0;
																			$1044 = $1043;
																			$1045 = HEAP32[$1044>>2]|0;
																			$1046 = $1036;
																			$1047 = $1046;
																			HEAP32[$1047>>2] = $1042;
																			$1048 = (($1046) + 4)|0;
																			$1049 = $1048;
																			HEAP32[$1049>>2] = $1045;
																			$1050 = HEAP32[$1035>>2]|0;
																			$1051 = ((($1050)) + 8|0);
																			HEAP32[$1035>>2] = $1051;
																		}
																		break;
																	} else {
																		HEAP32[$16>>2] = 105;
																		$1055 = ((($16)) + 4|0);
																		HEAP32[$1055>>2] = 0;
																		$1056 = ((($this)) + 32|0);
																		$1057 = HEAP32[$1056>>2]|0;
																		$1058 = ((($this)) + 36|0);
																		$1059 = HEAP32[$1058>>2]|0;
																		$1060 = ($1057|0)==($1059|0);
																		if ($1060) {
																			$1073 = ((($this)) + 28|0);
																			__THREW__ = 0;
																			invoke_vii(125,($1073|0),($16|0));
																			$1074 = __THREW__; __THREW__ = 0;
																			$1075 = $1074&1;
																			if ($1075) {
																				label = 16;
																				break L3;
																			}
																		} else {
																			$1061 = $16;
																			$1062 = $1061;
																			$1063 = HEAP32[$1062>>2]|0;
																			$1064 = (($1061) + 4)|0;
																			$1065 = $1064;
																			$1066 = HEAP32[$1065>>2]|0;
																			$1067 = $1057;
																			$1068 = $1067;
																			HEAP32[$1068>>2] = $1063;
																			$1069 = (($1067) + 4)|0;
																			$1070 = $1069;
																			HEAP32[$1070>>2] = $1066;
																			$1071 = HEAP32[$1056>>2]|0;
																			$1072 = ((($1071)) + 8|0);
																			HEAP32[$1056>>2] = $1072;
																		}
																		break;
																	}
																}
															} while(0);
															break L5;
														}
													}
												}
											}
										} while(0);
										$1076 = ((($23)) + 28|0);
										$1077 = ((($23)) + 32|0);
										$1078 = HEAP32[$1077>>2]|0;
										$1079 = HEAP32[$1076>>2]|0;
										$1080 = ($1078|0)==($1079|0);
										if ($1080) {
											$1081 = ((($23)) + 12|0);
											$1082 = HEAP32[$1081>>2]|0;
											$1083 = ((($24)) + 4|0);
											$1084 = HEAP32[$1083>>2]|0;
											$1085 = ((($24)) + 12|0);
											$1086 = HEAP32[$1085>>2]|0;
											$1087 = (($1086) + ($1084))|0;
											$1088 = (($1087|0) / 2)&-1;
											$1089 = ($1082|0)<($1088|0);
											$1090 = $25 << 1;
											$1091 = ($1090|0)<($26|0);
											$or$cond = $1091 | $1089;
											if (!($or$cond)) {
												label = 257;
											}
										} else {
											label = 257;
										}
										if ((label|0) == 257) {
											$1092 = (($1078) - ($1079))|0;
											$1093 = ($1092|0)==(4);
											if (!($1093)) {
												break;
											}
											$1094 = ((($23)) + 12|0);
											$1095 = HEAP32[$1094>>2]|0;
											$1096 = ((($24)) + 4|0);
											$1097 = HEAP32[$1096>>2]|0;
											$1098 = ($1097|0)>($1095|0);
											if (!($1098)) {
												break;
											}
											$1099 = (($1097) - ($1095))|0;
											$1100 = ((($23)) + 4|0);
											$1101 = HEAP32[$1100>>2]|0;
											$1102 = (($1095) + 1)|0;
											$1103 = (($1102) - ($1101))|0;
											$1104 = ($1099|0)<($1103|0);
											if (!($1104)) {
												break;
											}
										}
										__THREW__ = 0;
										$1105 = (invoke_ii(29,40)|0);
										$1106 = __THREW__; __THREW__ = 0;
										$1107 = $1106&1;
										if ($1107) {
											label = 16;
											break L3;
										}
										__THREW__ = 0;
										invoke_vii(159,($1105|0),($24|0));
										$1108 = __THREW__; __THREW__ = 0;
										$1109 = $1108&1;
										if ($1109) {
											$1136 = ___cxa_find_matching_catch_2()|0;
											$1137 = tempRet0;
											__ZdlPv($1105);
											$$0 = $1136;$$017 = $1137;
											break L3;
										}
										;HEAP32[$c>>2]=HEAP32[$1105>>2]|0;HEAP32[$c+4>>2]=HEAP32[$1105+4>>2]|0;HEAP32[$c+8>>2]=HEAP32[$1105+8>>2]|0;HEAP32[$c+12>>2]=HEAP32[$1105+12>>2]|0;
										$1110 = ((($c)) + 16|0);
										HEAP32[$1110>>2] = 0;
										$1111 = ((($c)) + 20|0);
										HEAP32[$1111>>2] = 0;
										$1112 = ((($c)) + 24|0);
										HEAP32[$1112>>2] = 0;
										__THREW__ = 0;
										$1113 = (invoke_ii(29,4)|0);
										$1114 = __THREW__; __THREW__ = 0;
										$1115 = $1114&1;
										if ($1115) {
											label = 16;
											break L3;
										}
										$1116 = $1105;
										HEAP32[$1110>>2] = $1113;
										$1117 = ((($1113)) + 4|0);
										$1118 = ((($c)) + 24|0);
										HEAP32[$1118>>2] = $1117;
										HEAP32[$1113>>2] = $1116;
										HEAP32[$1111>>2] = $1117;
										$1119 = ((($c)) + 28|0);
										HEAP32[$1119>>2] = 0;
										$1120 = ((($c)) + 32|0);
										HEAP32[$1120>>2] = 0;
										$1121 = ((($c)) + 36|0);
										HEAP32[$1121>>2] = 0;
										__THREW__ = 0;
										invoke_viii(188,($c|0),($charset|0),($charbox|0));
										$1122 = __THREW__; __THREW__ = 0;
										$1123 = $1122&1;
										L384: do {
											if (!($1123)) {
												$1124 = ((($c)) + 28|0);
												$1125 = HEAP32[$1120>>2]|0;
												$1126 = HEAP32[$1124>>2]|0;
												$1127 = ($1125|0)==($1126|0);
												L386: do {
													if (!($1127)) {
														__THREW__ = 0;
														$1128 = (invoke_iii(189,($c|0),0)|0);
														$1129 = __THREW__; __THREW__ = 0;
														$1130 = $1129&1;
														if ($1130) {
															break L384;
														}
														$1131 = HEAP32[$1128>>2]|0;
														$1132 = HEAP32[$1077>>2]|0;
														$1133 = HEAP32[$1076>>2]|0;
														$1134 = (($1132) - ($1133))|0;
														$1135 = ($1134|0)==(4);
														do {
															if ($1135) {
																$switch$selectcmp = ($1131|0)==(65);
																$switch$select = $switch$selectcmp ? 197 : 0;
																$switch$selectcmp22 = ($1131|0)==(97);
																$switch$select23 = $switch$selectcmp22 ? 229 : $switch$select;
																$code9$0 = $switch$select23;
															} else {
																$1142 = ($1131|0)==(117);
																do {
																	if ($1142) {
																		$1143 = ((($23)) + 8|0);
																		$1144 = HEAP32[$1143>>2]|0;
																		$1145 = HEAP32[$23>>2]|0;
																		$1146 = (($1144) + 1)|0;
																		$1147 = (($1146) - ($1145))|0;
																		$1148 = ($1147*5)|0;
																		$1149 = ((($24)) + 8|0);
																		$1150 = HEAP32[$1149>>2]|0;
																		$1151 = HEAP32[$24>>2]|0;
																		$1152 = (($1150) + 1)|0;
																		$1153 = (($1152) - ($1151))|0;
																		$1154 = ($1148|0)>($1153|0);
																		if ($1154) {
																			break;
																		}
																		$1155 = ((($23)) + 12|0);
																		$1156 = HEAP32[$1155>>2]|0;
																		$1157 = ((($23)) + 4|0);
																		$1158 = HEAP32[$1157>>2]|0;
																		$1159 = (($1156) + 1)|0;
																		$1160 = (($1159) - ($1158))|0;
																		$1161 = ($1160*5)|0;
																		$1162 = ($1161|0)>($1153|0);
																		if (!($1162)) {
																			break L386;
																		}
																	}
																} while(0);
																$1163 = ((($23)) + 12|0);
																$1164 = HEAP32[$1163>>2]|0;
																$1165 = ((($24)) + 4|0);
																$1166 = HEAP32[$1165>>2]|0;
																$1167 = ((($24)) + 12|0);
																$1168 = HEAP32[$1167>>2]|0;
																$1169 = (($1168) + ($1166))|0;
																$1170 = (($1169|0) / 2)&-1;
																$1171 = ($1164|0)<($1170|0);
																if (!($1171)) {
																	$code9$0 = $1131;
																	break;
																}
																__THREW__ = 0;
																$1172 = (invoke_ii(190,($1131|0))|0);
																$1173 = __THREW__; __THREW__ = 0;
																$1174 = $1173&1;
																if ($1174) {
																	break L384;
																}
																do {
																	if ($1172) {
																		$1175 = ((($23)) + 8|0);
																		$1176 = HEAP32[$1175>>2]|0;
																		$1177 = HEAP32[$23>>2]|0;
																		$1178 = (($1176) + 1)|0;
																		$1179 = (($1178) - ($1177))|0;
																		$1180 = $1179 << 1;
																		$1181 = HEAP32[$1163>>2]|0;
																		$1182 = ((($23)) + 4|0);
																		$1183 = HEAP32[$1182>>2]|0;
																		$1184 = (($1181) + 1)|0;
																		$1185 = (($1184) - ($1183))|0;
																		$1186 = ($1185*3)|0;
																		$1187 = ($1180|0)>($1186|0);
																		if (!($1187)) {
																			label = 281;
																			break;
																		}
																		$1188 = ((($f1)) + 104|0);
																		__THREW__ = 0;
																		$1189 = (invoke_iii(191,($1188|0),50)|0);
																		$1190 = __THREW__; __THREW__ = 0;
																		$1191 = $1190&1;
																		if ($1191) {
																			break L384;
																		}
																		if ($1189) {
																			label = 281;
																			break;
																		}
																		$1192 = ((($f1)) + 248|0);
																		__THREW__ = 0;
																		$1193 = (invoke_iii(191,($1192|0),50)|0);
																		$1194 = __THREW__; __THREW__ = 0;
																		$1195 = $1194&1;
																		if ($1195) {
																			break L384;
																		}
																		if ($1193) {
																			$atype$0 = 58;
																		} else {
																			label = 281;
																		}
																	} else {
																		label = 281;
																	}
																} while(0);
																do {
																	if ((label|0) == 281) {
																		$1196 = ((($f1)) + 200|0);
																		__THREW__ = 0;
																		$1197 = (invoke_iii(143,($1196|0),-1)|0);
																		$1198 = __THREW__; __THREW__ = 0;
																		$1199 = $1198&1;
																		if ($1199) {
																			break L384;
																		}
																		$1200 = ($1197|0)==(2);
																		if ($1200) {
																			$atype$0 = 94;
																			break;
																		}
																		__THREW__ = 0;
																		$1201 = (invoke_ii(167,($1196|0))|0);
																		$1202 = __THREW__; __THREW__ = 0;
																		$1203 = $1202&1;
																		if ($1203) {
																			break L384;
																		}
																		if ($1201) {
																			$atype$0 = 94;
																			break;
																		}
																		$1204 = HEAP32[$1163>>2]|0;
																		$1205 = ((($23)) + 4|0);
																		$1206 = HEAP32[$1205>>2]|0;
																		$1207 = (($1204) + 1)|0;
																		$1208 = (($1207) - ($1206))|0;
																		$1209 = ((($23)) + 8|0);
																		$1210 = HEAP32[$1209>>2]|0;
																		$1211 = HEAP32[$23>>2]|0;
																		$1212 = (($1210) + 1)|0;
																		$1213 = (($1212) - ($1211))|0;
																		$1214 = ($1213|0)<($1208|0);
																		$1215 = $1214 ? $1213 : $1208;
																		$1216 = ($1215|0)>(4);
																		if (!($1216)) {
																			$atype$0 = 39;
																			break;
																		}
																		$1217 = ((($f1)) + 152|0);
																		__THREW__ = 0;
																		$1218 = (invoke_iiii(185,($1217|0),1,-1)|0);
																		$1219 = __THREW__; __THREW__ = 0;
																		$1220 = $1219&1;
																		if ($1220) {
																			break L384;
																		}
																		if (!($1218)) {
																			$1221 = ((($f1)) + 104|0);
																			__THREW__ = 0;
																			$1222 = (invoke_iiii(145,($1221|0),1,2)|0);
																			$1223 = __THREW__; __THREW__ = 0;
																			$1224 = $1223&1;
																			if ($1224) {
																				break L384;
																			}
																			if (!($1222)) {
																				$atype$0 = 39;
																				break;
																			}
																		}
																		__THREW__ = 0;
																		$1225 = (invoke_iiii(185,($1196|0),1,-1)|0);
																		$1226 = __THREW__; __THREW__ = 0;
																		$1227 = $1226&1;
																		if ($1227) {
																			break L384;
																		}
																		if (!($1225)) {
																			$1228 = ((($f1)) + 56|0);
																			__THREW__ = 0;
																			$1229 = (invoke_iiii(145,($1228|0),1,2)|0);
																			$1230 = __THREW__; __THREW__ = 0;
																			$1231 = $1230&1;
																			if ($1231) {
																				break L384;
																			}
																			if (!($1229)) {
																				$atype$0 = 39;
																				break;
																			}
																		}
																		$atype$0 = 96;
																	}
																} while(0);
																__THREW__ = 0;
																$1232 = (invoke_iii(192,($1131|0),($atype$0|0))|0);
																$1233 = __THREW__; __THREW__ = 0;
																$1234 = $1233&1;
																if ($1234) {
																	break L384;
																} else {
																	$code9$0 = $1232;
																}
															}
														} while(0);
														__THREW__ = 0;
														$1235 = (invoke_iii(189,($c|0),0)|0);
														$1236 = __THREW__; __THREW__ = 0;
														$1237 = $1236&1;
														if ($1237) {
															break L384;
														}
														$1238 = HEAP32[$1235>>2]|0;
														$1239 = ($code9$0|0)==($1238|0);
														do {
															if ($1239) {
																$code9$1 = $code9$0;
																label = 304;
															} else {
																__THREW__ = 0;
																$1240 = (invoke_iii(193,($charset|0),1)|0);
																$1241 = __THREW__; __THREW__ = 0;
																$1242 = $1241&1;
																if ($1242) {
																	break L384;
																}
																if (!($1240)) {
																	$code9$1 = $code9$0;
																	label = 304;
																	break;
																}
																__THREW__ = 0;
																$1243 = (invoke_ii(194,($code9$0|0))|0);
																$1244 = __THREW__; __THREW__ = 0;
																$1245 = $1244&1;
																if ($1245) {
																	break L384;
																}
																$1246 = ($1243|0)==(105);
																if ($1246) {
																	$code9$1111 = 105;
																	break;
																}
																__THREW__ = 0;
																$1247 = (invoke_iii(189,($c|0),0)|0);
																$1248 = __THREW__; __THREW__ = 0;
																$1249 = $1248&1;
																if ($1249) {
																	break L384;
																}
																$1250 = HEAP32[$1247>>2]|0;
																$code9$1 = $1250;
																label = 304;
															}
														} while(0);
														if ((label|0) == 304) {
															$1251 = ($code9$1|0)==(0);
															if ($1251) {
																break;
															} else {
																$code9$1111 = $code9$1;
															}
														}
														HEAP32[$17>>2] = $code9$1111;
														$1252 = ((($17)) + 4|0);
														HEAP32[$1252>>2] = 0;
														$1253 = ((($this)) + 32|0);
														$1254 = HEAP32[$1253>>2]|0;
														$1255 = ((($this)) + 36|0);
														$1256 = HEAP32[$1255>>2]|0;
														$1257 = ($1254|0)==($1256|0);
														if ($1257) {
															$1270 = ((($this)) + 28|0);
															__THREW__ = 0;
															invoke_vii(125,($1270|0),($17|0));
															$1271 = __THREW__; __THREW__ = 0;
															$1272 = $1271&1;
															if ($1272) {
																break L384;
															}
														} else {
															$1258 = $17;
															$1259 = $1258;
															$1260 = HEAP32[$1259>>2]|0;
															$1261 = (($1258) + 4)|0;
															$1262 = $1261;
															$1263 = HEAP32[$1262>>2]|0;
															$1264 = $1254;
															$1265 = $1264;
															HEAP32[$1265>>2] = $1260;
															$1266 = (($1264) + 4)|0;
															$1267 = $1266;
															HEAP32[$1267>>2] = $1263;
															$1268 = HEAP32[$1253>>2]|0;
															$1269 = ((($1268)) + 8|0);
															HEAP32[$1253>>2] = $1269;
														}
													}
												} while(0);
												__THREW__ = 0;
												invoke_vi(176,($c|0));
												$1273 = __THREW__; __THREW__ = 0;
												$1274 = $1273&1;
												if ($1274) {
													label = 16;
													break L3;
												}
												break L5;
											}
										} while(0);
										$1138 = ___cxa_find_matching_catch_2()|0;
										$1139 = tempRet0;
										__THREW__ = 0;
										invoke_vi(176,($c|0));
										$1140 = __THREW__; __THREW__ = 0;
										$1141 = $1140&1;
										if (!($1141)) {
											$$0 = $1138;$$017 = $1139;
											break L3;
										}
										$1454 = ___cxa_find_matching_catch_3(0|0)|0;
										$1455 = tempRet0;
										___clang_call_terminate($1454);
										// unreachable;
									}
								} while(0);
								__THREW__ = 0;
								invoke_vi(126,($f2|0));
								$1448 = __THREW__; __THREW__ = 0;
								$1449 = $1448&1;
								if ($1449) {
									label = 15;
									break L1;
								}
								__ZN8FeaturesD2Ev($f1);
								STACKTOP = sp;return;
							}
						} while(0);
						if ((label|0) == 16) {
							$108 = ___cxa_find_matching_catch_2()|0;
							$109 = tempRet0;
							$$0 = $108;$$017 = $109;
						}
						__THREW__ = 0;
						invoke_vi(126,($f2|0));
						$1450 = __THREW__; __THREW__ = 0;
						$1451 = $1450&1;
						if ($1451) {
							$1454 = ___cxa_find_matching_catch_3(0|0)|0;
							$1455 = tempRet0;
							___clang_call_terminate($1454);
							// unreachable;
						} else {
							$$1 = $$0;$$118 = $$017;
						}
					}
				} while(0);
				if ((label|0) == 15) {
					$106 = ___cxa_find_matching_catch_2()|0;
					$107 = tempRet0;
					$$1 = $106;$$118 = $107;
				}
				__THREW__ = 0;
				invoke_vi(126,($f1|0));
				$1452 = __THREW__; __THREW__ = 0;
				$1453 = $1452&1;
				if ($1453) {
					$1454 = ___cxa_find_matching_catch_3(0|0)|0;
					$1455 = tempRet0;
					___clang_call_terminate($1454);
					// unreachable;
				} else {
					___resumeException($$1|0);
					// unreachable;
				}
			}
			function __ZN9Character11recognize13ERK7CharsetRK9Rectangle($this,$charset,$charbox) {
				$this = $this|0;
				$charset = $charset|0;
				$charbox = $charbox|0;
				var $$ = 0, $$0 = 0, $$01 = 0, $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
				var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
				var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
				var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
				var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
				var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
				var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
				var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
				var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
				var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
				var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code$0 = 0;
				var $code$1 = 0, $code$13 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$0 = sp;
				$c = sp + 8|0;
				$1 = (__ZN9Character4blobEi($this,0)|0);
				$2 = (__ZN9Character4blobEi($this,1)|0);
				$3 = (__ZN9Character4blobEi($this,2)|0);
				$4 = (__Znwj(40)|0);
				__THREW__ = 0;
				invoke_vii(159,($4|0),($3|0));
				$5 = __THREW__; __THREW__ = 0;
				$6 = $5&1;
				if ($6) {
					$77 = ___cxa_find_matching_catch_2()|0;
					$78 = tempRet0;
					__ZdlPv($4);
					$$0 = $78;$$01 = $77;
					___resumeException($$01|0);
					// unreachable;
				}
				;HEAP32[$c>>2]=HEAP32[$4>>2]|0;HEAP32[$c+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$c+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$c+12>>2]=HEAP32[$4+12>>2]|0;
				$7 = ((($c)) + 16|0);
				$8 = ((($c)) + 20|0);
				$9 = (__Znwj(4)|0);
				$10 = $4;
				HEAP32[$7>>2] = $9;
				$11 = ((($9)) + 4|0);
				$12 = ((($c)) + 24|0);
				HEAP32[$12>>2] = $11;
				HEAP32[$9>>2] = $10;
				HEAP32[$8>>2] = $11;
				$13 = ((($c)) + 28|0);
				HEAP32[$13>>2] = 0;
				$14 = ((($c)) + 32|0);
				HEAP32[$14>>2] = 0;
				$15 = ((($c)) + 36|0);
				HEAP32[$15>>2] = 0;
				__THREW__ = 0;
				invoke_viii(188,($c|0),($charset|0),($charbox|0));
				$16 = __THREW__; __THREW__ = 0;
				$17 = $16&1;
				L5: do {
					if (!($17)) {
						$18 = ((($c)) + 28|0);
						$19 = HEAP32[$14>>2]|0;
						$20 = HEAP32[$18>>2]|0;
						$21 = ($19|0)==($20|0);
						L7: do {
							if ($21) {
								$code$0 = 0;
							} else {
								__THREW__ = 0;
								$22 = (invoke_iii(178,($c|0),46)|0);
								$23 = __THREW__; __THREW__ = 0;
								$24 = $23&1;
								if ($24) {
									break L5;
								}
								do {
									if (!($22)) {
										$25 = ((($c)) + 12|0);
										$26 = HEAP32[$25>>2]|0;
										$27 = ((($c)) + 4|0);
										$28 = HEAP32[$27>>2]|0;
										$29 = (($26) + 1)|0;
										$30 = (($29) - ($28))|0;
										$31 = ((($c)) + 8|0);
										$32 = HEAP32[$31>>2]|0;
										$33 = HEAP32[$c>>2]|0;
										$34 = (($32) + 1)|0;
										$35 = (($34) - ($33))|0;
										$36 = $35 << 1;
										$37 = ($30|0)<($36|0);
										if ($37) {
											__THREW__ = 0;
											$38 = (invoke_iii(178,($c|0),44)|0);
											$39 = __THREW__; __THREW__ = 0;
											$40 = $39&1;
											if ($40) {
												break L5;
											}
											if ($38) {
												__THREW__ = 0;
												$41 = (invoke_ii(74,($3|0))|0);
												$42 = __THREW__; __THREW__ = 0;
												$43 = $42&1;
												if ($43) {
													break L5;
												}
												$44 = $41 << 1;
												$45 = ((($3)) + 12|0);
												$46 = HEAP32[$45>>2]|0;
												$47 = ((($3)) + 4|0);
												$48 = HEAP32[$47>>2]|0;
												$49 = (($46) + 1)|0;
												$50 = (($49) - ($48))|0;
												$51 = ((($3)) + 8|0);
												$52 = HEAP32[$51>>2]|0;
												$53 = HEAP32[$3>>2]|0;
												$54 = (($52) + 1)|0;
												$55 = (($54) - ($53))|0;
												$56 = Math_imul($55, $50)|0;
												$57 = ($44|0)<($56|0);
												if (!($57)) {
													break;
												}
											}
										}
										$88 = ((($1)) + 8|0);
										$89 = HEAP32[$88>>2]|0;
										$90 = HEAP32[$1>>2]|0;
										$91 = (($89) + 1)|0;
										$92 = (($91) - ($90))|0;
										$93 = ((($2)) + 8|0);
										$94 = HEAP32[$93>>2]|0;
										$95 = HEAP32[$2>>2]|0;
										$96 = (($94) + 1)|0;
										$97 = (($96) - ($95))|0;
										$98 = ($92|0)<($97|0);
										$99 = $98 ? $97 : $92;
										$100 = ((($3)) + 8|0);
										$101 = HEAP32[$100>>2]|0;
										$102 = HEAP32[$3>>2]|0;
										$103 = (($101) + 1)|0;
										$104 = (($103) - ($102))|0;
										$105 = ($99|0)<($104|0);
										if ($105) {
											$106 = ((($1)) + 12|0);
											$107 = HEAP32[$106>>2]|0;
											$108 = ((($1)) + 4|0);
											$109 = HEAP32[$108>>2]|0;
											$110 = (($107) + 1)|0;
											$111 = (($110) - ($109))|0;
											$112 = ((($2)) + 12|0);
											$113 = HEAP32[$112>>2]|0;
											$114 = ((($2)) + 4|0);
											$115 = HEAP32[$114>>2]|0;
											$116 = (($113) + 1)|0;
											$117 = (($116) - ($115))|0;
											__THREW__ = 0;
											$118 = (invoke_iiiii(120,($111|0),($117|0),20,2)|0);
											$119 = __THREW__; __THREW__ = 0;
											$120 = $119&1;
											if ($120) {
												break L5;
											}
											if ($118) {
												$121 = HEAP32[$106>>2]|0;
												$122 = HEAP32[$108>>2]|0;
												$123 = (($121) + 1)|0;
												$124 = (($123) - ($122))|0;
												$125 = HEAP32[$112>>2]|0;
												$126 = HEAP32[$114>>2]|0;
												$127 = (($125) + 1)|0;
												$128 = (($127) - ($126))|0;
												$129 = ($124|0)<($128|0);
												$130 = $129 ? $128 : $124;
												$131 = $130 << 1;
												$132 = ((($3)) + 12|0);
												$133 = HEAP32[$132>>2]|0;
												$134 = ((($3)) + 4|0);
												$135 = HEAP32[$134>>2]|0;
												$136 = (($133) + 1)|0;
												$137 = (($136) - ($135))|0;
												$138 = ($131|0)<($137|0);
												if ($138) {
													__THREW__ = 0;
													$139 = (invoke_iii(189,($c|0),0)|0);
													$140 = __THREW__; __THREW__ = 0;
													$141 = $140&1;
													if ($141) {
														break L5;
													}
													$142 = HEAP32[$139>>2]|0;
													__THREW__ = 0;
													$143 = (invoke_iii(192,($142|0),58)|0);
													$144 = __THREW__; __THREW__ = 0;
													$145 = $144&1;
													if ($145) {
														break L5;
													} else {
														$code$0 = $143;
														break L7;
													}
												}
											}
										}
										__THREW__ = 0;
										$146 = (invoke_iii(178,($c|0),111)|0);
										$147 = __THREW__; __THREW__ = 0;
										$148 = $147&1;
										if ($148) {
											break L5;
										}
										if (!($146)) {
											$code$0 = 0;
											break L7;
										}
										$149 = HEAP32[$1>>2]|0;
										$150 = HEAP32[$88>>2]|0;
										$151 = (($150) + ($149))|0;
										$152 = (($151|0) / 2)&-1;
										$153 = HEAP32[$2>>2]|0;
										$154 = HEAP32[$93>>2]|0;
										$155 = (($154) + ($153))|0;
										$156 = (($155|0) / 2)&-1;
										$157 = ($152|0)<($156|0);
										if ($157) {
											$158 = ((($1)) + 28|0);
											$159 = ((($1)) + 32|0);
											$160 = HEAP32[$159>>2]|0;
											$161 = HEAP32[$158>>2]|0;
											$162 = (($160) - ($161))|0;
											$163 = ($162|0)==(4);
											if ($163) {
												$164 = ((($2)) + 28|0);
												$165 = ((($2)) + 32|0);
												$166 = HEAP32[$165>>2]|0;
												$167 = HEAP32[$164>>2]|0;
												$168 = ($166|0)==($167|0);
												if (!($168)) {
													label = 30;
												}
											} else {
												label = 30;
											}
										} else {
											label = 30;
										}
										if ((label|0) == 30) {
											$169 = ($156|0)<($152|0);
											if (!($169)) {
												$code$0 = 0;
												break L7;
											}
											$170 = ((($2)) + 28|0);
											$171 = ((($2)) + 32|0);
											$172 = HEAP32[$171>>2]|0;
											$173 = HEAP32[$170>>2]|0;
											$174 = (($172) - ($173))|0;
											$175 = ($174|0)==(4);
											if (!($175)) {
												$code$0 = 0;
												break L7;
											}
											$176 = ((($1)) + 28|0);
											$177 = ((($1)) + 32|0);
											$178 = HEAP32[$177>>2]|0;
											$179 = HEAP32[$176>>2]|0;
											$180 = ($178|0)==($179|0);
											if (!($180)) {
												$code$0 = 0;
												break L7;
											}
										}
										$code$0 = 37;
										break L7;
									}
								} while(0);
								$58 = ((($1)) + 12|0);
								$59 = HEAP32[$58>>2]|0;
								$60 = ((($2)) + 4|0);
								$61 = HEAP32[$60>>2]|0;
								$62 = ($59|0)>($61|0);
								if ($62) {
									$$phi$trans$insert = ((($3)) + 4|0);
									$$pre = HEAP32[$$phi$trans$insert>>2]|0;
									$86 = $$pre;
								} else {
									$63 = ((($2)) + 12|0);
									$64 = HEAP32[$63>>2]|0;
									$65 = ((($3)) + 4|0);
									$66 = HEAP32[$65>>2]|0;
									$67 = ($64|0)>($66|0);
									if ($67) {
										$86 = $66;
									} else {
										$68 = ((($2)) + 8|0);
										$69 = HEAP32[$68>>2]|0;
										$70 = HEAP32[$2>>2]|0;
										$71 = (($69) + 1)|0;
										$72 = (($71) - ($70))|0;
										$73 = (1 - ($61))|0;
										$74 = (($73) + ($64))|0;
										$75 = $74 << 1;
										$76 = ($72|0)<($75|0);
										$$ = $76 ? 0 : 247;
										$code$0 = $$;
										break;
									}
								}
								$83 = ((($1)) + 4|0);
								$84 = HEAP32[$83>>2]|0;
								$85 = ($84|0)<($86|0);
								if ($85) {
									$87 = ($61|0)<($86|0);
									$$2 = $87 ? 37 : 0;
									$code$0 = $$2;
								} else {
									$code$0 = 0;
								}
							}
						} while(0);
						__THREW__ = 0;
						$181 = (invoke_iii(193,($charset|0),1)|0);
						$182 = __THREW__; __THREW__ = 0;
						$183 = $182&1;
						if (!($183)) {
							if ($181) {
								$184 = ($code$0|0)==(247);
								if ($184) {
									$code$13 = 37;
								} else {
									__THREW__ = 0;
									$185 = (invoke_ii(194,($code$0|0))|0);
									$186 = __THREW__; __THREW__ = 0;
									$187 = $186&1;
									if ($187) {
										break;
									} else {
										$code$1 = $185;
										label = 38;
									}
								}
							} else {
								$code$1 = $code$0;
								label = 38;
							}
							if ((label|0) == 38) {
								$188 = ($code$1|0)==(0);
								if ($188) {
									__ZN9CharacterD2Ev($c);
									STACKTOP = sp;return;
								} else {
									$code$13 = $code$1;
								}
							}
							HEAP32[$0>>2] = $code$13;
							$189 = ((($0)) + 4|0);
							HEAP32[$189>>2] = 0;
							$190 = ((($this)) + 32|0);
							$191 = HEAP32[$190>>2]|0;
							$192 = ((($this)) + 36|0);
							$193 = HEAP32[$192>>2]|0;
							$194 = ($191|0)==($193|0);
							if ($194) {
								$207 = ((($this)) + 28|0);
								__THREW__ = 0;
								invoke_vii(125,($207|0),($0|0));
								$208 = __THREW__; __THREW__ = 0;
								$209 = $208&1;
								if ($209) {
									break;
								}
							} else {
								$195 = $0;
								$196 = $195;
								$197 = HEAP32[$196>>2]|0;
								$198 = (($195) + 4)|0;
								$199 = $198;
								$200 = HEAP32[$199>>2]|0;
								$201 = $191;
								$202 = $201;
								HEAP32[$202>>2] = $197;
								$203 = (($201) + 4)|0;
								$204 = $203;
								HEAP32[$204>>2] = $200;
								$205 = HEAP32[$190>>2]|0;
								$206 = ((($205)) + 8|0);
								HEAP32[$190>>2] = $206;
							}
							__ZN9CharacterD2Ev($c);
							STACKTOP = sp;return;
						}
					}
				} while(0);
				$79 = ___cxa_find_matching_catch_2()|0;
				$80 = tempRet0;
				__THREW__ = 0;
				invoke_vi(176,($c|0));
				$81 = __THREW__; __THREW__ = 0;
				$82 = $81&1;
				if ($82) {
					$210 = ___cxa_find_matching_catch_3(0|0)|0;
					$211 = tempRet0;
					___clang_call_terminate($210);
					// unreachable;
				} else {
					$$0 = $80;$$01 = $79;
					___resumeException($$01|0);
					// unreachable;
				}
			}
			function __ZN8Textline21check_lower_ambiguousEv($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
				var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
				var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
				var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $begin$068 = 0, $begin$2 = 0, $brmerge = 0, $capital$0$off0$lcssa = 0, $capital$0$off055 = 0, $capital$1$off0 = 0, $capital$4$off0 = 0, $capital$5$off0$not = 0, $i$063 = 0, $isolated$0$off066 = 0, $isolated$2$off0 = 0, $j$057 = 0, $not$ = 0, $or$cond9 = 0, $small$0$off0$lcssa = 0, $small$0$off056 = 0, $small$4$off0 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 12|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($this)) + 16|0);
				$3 = ((($this)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = HEAP32[$2>>2]|0;
				$6 = (($4) - ($5))|0;
				$7 = $6 >> 2;
				$8 = ($1|0)<($7|0);
				if ($8) {
					$begin$068 = $1;$i$063 = $1;$isolated$0$off066 = 0;
				} else {
					return;
				}
				while(1) {
					$9 = (__ZNK8Textline9characterEi($this,$i$063)|0);
					$10 = (__ZNK9Character5maybeEi($9,32)|0);
					do {
						if ($10) {
							$11 = (($i$063) + 2)|0;
							$12 = HEAP32[$3>>2]|0;
							$13 = HEAP32[$2>>2]|0;
							$14 = (($12) - ($13))|0;
							$15 = $14 >> 2;
							$16 = ($11|0)<($15|0);
							if ($16) {
								$17 = (__ZNK8Textline9characterEi($this,$11)|0);
								$18 = (__ZNK9Character5maybeEi($17,32)|0);
								if ($18) {
									$19 = HEAP32[$0>>2]|0;
									$begin$2 = $19;$isolated$2$off0 = 1;
									break;
								}
							}
							$20 = (($i$063) + 1)|0;
							$begin$2 = $20;$isolated$2$off0 = 0;
						} else {
							$21 = ((($9)) + 28|0);
							$22 = ((($9)) + 32|0);
							$23 = HEAP32[$22>>2]|0;
							$24 = HEAP32[$21>>2]|0;
							$25 = (($23) - ($24))|0;
							$26 = ($25|0)==(8);
							if ($26) {
								$27 = (__ZNK9Character5guessEi($9,0)|0);
								$28 = HEAP32[$27>>2]|0;
								$29 = (__ZN3UCS23islower_small_ambiguousEi($28)|0);
								if ($29) {
									$30 = ((($9)) + 12|0);
									$31 = HEAP32[$30>>2]|0;
									$32 = ((($9)) + 4|0);
									$33 = HEAP32[$32>>2]|0;
									$34 = (($31) + 1)|0;
									$35 = (($34) - ($33))|0;
									$36 = ($35*5)|0;
									$37 = (__ZNK8Textline11mean_heightEv($this)|0);
									$38 = $37 << 2;
									$39 = ($36|0)<($38|0);
									if ($39) {
										$begin$2 = $begin$068;$isolated$2$off0 = $isolated$0$off066;
									} else {
										$40 = HEAP32[$30>>2]|0;
										$41 = HEAP32[$32>>2]|0;
										$42 = (($40) + 1)|0;
										$43 = (($42) - ($41))|0;
										$44 = $43 << 2;
										$45 = (__ZNK8Textline11mean_heightEv($this)|0);
										$46 = ($45*5)|0;
										$47 = ($44|0)>($46|0);
										$48 = HEAP32[$3>>2]|0;
										$49 = HEAP32[$2>>2]|0;
										$50 = (($48) - ($49))|0;
										$51 = $50 >> 2;
										$52 = ($begin$068|0)<($51|0);
										L15: do {
											if ($52) {
												$capital$0$off055 = $47;$j$057 = $begin$068;$small$0$off056 = 0;
												while(1) {
													$53 = ($j$057|0)==($i$063|0);
													L18: do {
														if ($53) {
															$capital$4$off0 = $capital$0$off055;$small$4$off0 = $small$0$off056;
														} else {
															$54 = (__ZNK8Textline9characterEi($this,$j$057)|0);
															$55 = ((($54)) + 28|0);
															$56 = ((($54)) + 32|0);
															$57 = HEAP32[$56>>2]|0;
															$58 = HEAP32[$55>>2]|0;
															$59 = ($57|0)==($58|0);
															if ($59) {
																$capital$4$off0 = $capital$0$off055;$small$4$off0 = $small$0$off056;
															} else {
																$60 = (__ZNK9Character5maybeEi($54,32)|0);
																if ($60) {
																	if ($isolated$0$off066) {
																		$capital$4$off0 = $capital$0$off055;$small$4$off0 = $small$0$off056;
																		break;
																	} else {
																		$capital$0$off0$lcssa = $capital$0$off055;$small$0$off0$lcssa = $small$0$off056;
																		break L15;
																	}
																}
																$61 = (__ZNK9Character5guessEi($54,0)|0);
																$62 = HEAP32[$61>>2]|0;
																$63 = ($62|0)>(127);
																if ($63) {
																	$capital$4$off0 = $capital$0$off055;$small$4$off0 = $small$0$off056;
																} else {
																	$64 = (_isalpha($62)|0);
																	$65 = ($64|0)==(0);
																	if ($65) {
																		$capital$4$off0 = $capital$0$off055;$small$4$off0 = $small$0$off056;
																	} else {
																		L26: do {
																			if ($capital$0$off055) {
																				$capital$1$off0 = 1;
																			} else {
																				$66 = HEAP32[$30>>2]|0;
																				$67 = HEAP32[$32>>2]|0;
																				$68 = (($66) + 1)|0;
																				$69 = (($68) - ($67))|0;
																				$70 = $69 << 2;
																				$71 = ((($54)) + 12|0);
																				$72 = HEAP32[$71>>2]|0;
																				$73 = ((($54)) + 4|0);
																				$74 = HEAP32[$73>>2]|0;
																				$75 = (($72) + 1)|0;
																				$76 = (($75) - ($74))|0;
																				$77 = ($76*5)|0;
																				$78 = ($70|0)>($77|0);
																				if ($78) {
																					$capital$1$off0 = 1;
																				} else {
																					$79 = (_isupper($62)|0);
																					$80 = ($79|0)==(0);
																					if (!($80)) {
																						switch ($62|0) {
																							case 81: case 66:  {
																								$capital$1$off0 = 0;
																								break L26;
																								break;
																							}
																							default: {
																							}
																						}
																						$81 = HEAP32[$30>>2]|0;
																						$82 = HEAP32[$32>>2]|0;
																						$83 = (($81) + 1)|0;
																						$84 = (($83) - ($82))|0;
																						$85 = HEAP32[$71>>2]|0;
																						$86 = HEAP32[$73>>2]|0;
																						$87 = (($85) + 1)|0;
																						$88 = (($87) - ($86))|0;
																						$89 = ($84|0)<($88|0);
																						if (!($89)) {
																							$capital$1$off0 = 1;
																							break;
																						}
																						$90 = (__ZN5Ocrad7similarEiiii($84,$88,10,1)|0);
																						if ($90) {
																							$capital$1$off0 = 1;
																							break;
																						}
																					}
																					$91 = ($62|0)==(116);
																					if (!($91)) {
																						$capital$1$off0 = 0;
																						break;
																					}
																					$92 = HEAP32[$30>>2]|0;
																					$93 = HEAP32[$32>>2]|0;
																					$94 = (($92) + 1)|0;
																					$95 = (($94) - ($93))|0;
																					$96 = HEAP32[$71>>2]|0;
																					$97 = HEAP32[$73>>2]|0;
																					$98 = (($96) + 1)|0;
																					$99 = (($98) - ($97))|0;
																					$not$ = ($95|0)>=($99|0);
																					$capital$1$off0 = $not$;
																				}
																			}
																		} while(0);
																		if ($small$0$off056) {
																			$capital$4$off0 = $capital$1$off0;$small$4$off0 = 1;
																		} else {
																			$100 = (_islower($62)|0);
																			$101 = ($100|0)==(0);
																			if ($101) {
																				$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																			} else {
																				switch ($62|0) {
																					case 106: case 108:  {
																						$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																						break L18;
																						break;
																					}
																					default: {
																					}
																				}
																				$102 = HEAP32[$30>>2]|0;
																				$103 = HEAP32[$32>>2]|0;
																				$104 = (($102) + 1)|0;
																				$105 = (($104) - ($103))|0;
																				$106 = ($105*5)|0;
																				$107 = ((($54)) + 12|0);
																				$108 = HEAP32[$107>>2]|0;
																				$109 = ((($54)) + 4|0);
																				$110 = HEAP32[$109>>2]|0;
																				$111 = (($108) + 1)|0;
																				$112 = (($111) - ($110))|0;
																				$113 = $112 << 2;
																				$114 = ($106|0)<($113|0);
																				if ($114) {
																					$capital$4$off0 = $capital$1$off0;$small$4$off0 = 1;
																				} else {
																					$115 = (__ZN3UCS13islower_smallEi($62)|0);
																					$116 = ($62|0)!=(114);
																					$or$cond9 = $116 & $115;
																					if (!($or$cond9)) {
																						$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																						break;
																					}
																					$117 = (__ZNK9Character5maybeEi($54,81)|0);
																					if ($117) {
																						$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																						break;
																					}
																					$118 = ($j$057|0)<($i$063|0);
																					if (!($118)) {
																						$119 = (__ZN3UCS23islower_small_ambiguousEi($62)|0);
																						if ($119) {
																							$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																							break;
																						}
																					}
																					$120 = HEAP32[$30>>2]|0;
																					$121 = HEAP32[$32>>2]|0;
																					$122 = (($120) + 1)|0;
																					$123 = (($122) - ($121))|0;
																					$124 = HEAP32[$107>>2]|0;
																					$125 = HEAP32[$109>>2]|0;
																					$126 = (($124) + 1)|0;
																					$127 = (($126) - ($125))|0;
																					$128 = (__ZN5Ocrad7similarEiiii($123,$127,10,1)|0);
																					$capital$4$off0 = $capital$1$off0;$small$4$off0 = $128;
																				}
																			}
																		}
																	}
																}
															}
														}
													} while(0);
													$129 = (($j$057) + 1)|0;
													$130 = HEAP32[$3>>2]|0;
													$131 = HEAP32[$2>>2]|0;
													$132 = (($130) - ($131))|0;
													$133 = $132 >> 2;
													$134 = ($129|0)<($133|0);
													if ($134) {
														$capital$0$off055 = $capital$4$off0;$j$057 = $129;$small$0$off056 = $small$4$off0;
													} else {
														$capital$0$off0$lcssa = $capital$4$off0;$small$0$off0$lcssa = $small$4$off0;
														break;
													}
												}
											} else {
												$capital$0$off0$lcssa = $47;$small$0$off0$lcssa = 0;
											}
										} while(0);
										$capital$5$off0$not = $capital$0$off0$lcssa ^ 1;
										$brmerge = $small$0$off0$lcssa | $capital$5$off0$not;
										if ($brmerge) {
											$begin$2 = $begin$068;$isolated$2$off0 = $isolated$0$off066;
										} else {
											$135 = (_toupper($28)|0);
											__ZN9Character12insert_guessEiii($9,0,$135,1);
											$begin$2 = $begin$068;$isolated$2$off0 = $isolated$0$off066;
										}
									}
								} else {
									$begin$2 = $begin$068;$isolated$2$off0 = $isolated$0$off066;
								}
							} else {
								$begin$2 = $begin$068;$isolated$2$off0 = $isolated$0$off066;
							}
						}
					} while(0);
					$136 = (($i$063) + 1)|0;
					$137 = HEAP32[$3>>2]|0;
					$138 = HEAP32[$2>>2]|0;
					$139 = (($137) - ($138))|0;
					$140 = $139 >> 2;
					$141 = ($136|0)<($140|0);
					if ($141) {
						$begin$068 = $begin$2;$i$063 = $136;$isolated$0$off066 = $isolated$2$off0;
					} else {
						break;
					}
				}
				return;
			}
			function __ZN8Textline10recognize2ERK7Charset($this,$charset) {
				$this = $this|0;
				$charset = $charset|0;
				var $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i270 = 0, $$0$lcssa$i279 = 0, $$0118 = 0, $$02$i = 0, $$02$i269 = 0, $$02$i278 = 0, $$1 = 0, $$10 = 0, $$10128 = 0, $$11 = 0, $$11129 = 0, $$1119 = 0, $$12 = 0, $$12130 = 0, $$13 = 0, $$13131 = 0, $$14 = 0, $$14132 = 0;
				var $$15 = 0, $$15133 = 0, $$16 = 0, $$16134 = 0, $$2 = 0, $$2120 = 0, $$3 = 0, $$3121 = 0, $$4 = 0, $$4122 = 0, $$5 = 0, $$5123 = 0, $$6 = 0, $$6124 = 0, $$7 = 0, $$7125 = 0, $$8 = 0, $$8126 = 0, $$9 = 0, $$9127 = 0;
				var $$byval_copy = 0, $$digits$0 = 0, $$in$i = 0, $$in$i268 = 0, $$in$i277 = 0, $$in893 = 0, $$in894 = 0, $$in895 = 0, $$in896 = 0, $$in897 = 0, $$lcssa = 0, $$lcssa1339 = 0, $$lcssa1343 = 0, $$lcssa1348 = 0, $$lcssa1351 = 0, $$lcssa1352 = 0, $$lcssa1353 = 0, $$lcssa1356 = 0, $$lcssa1357 = 0, $$lcssa1360 = 0;
				var $$lcssa1361 = 0, $$lcssa1362 = 0, $$lcssa1363 = 0, $$lcssa1364 = 0, $$lcssa1365 = 0, $$lcssa1366 = 0, $$lcssa1367 = 0, $$lcssa1370 = 0, $$lcssa1371 = 0, $$lcssa1372 = 0, $$lcssa1373 = 0, $$lcssa1374 = 0, $$lcssa1375 = 0, $$lcssa1376 = 0, $$lcssa1377 = 0, $$lcssa1378 = 0, $$lcssa1379 = 0, $$lcssa1380 = 0, $$lcssa1381 = 0, $$lcssa1382 = 0;
				var $$lcssa1388 = 0, $$lcssa1418 = 0, $$lcssa1419 = 0, $$lcssa1421 = 0, $$lcssa1422 = 0, $$lcssa1423 = 0, $$lcssa1424 = 0, $$lcssa1425 = 0, $$lcssa1426 = 0, $$lcssa1427 = 0, $$lcssa1435 = 0, $$lcssa1441 = 0, $$lcssa1442 = 0, $$lcssa1443 = 0, $$lcssa1444 = 0, $$lcssa1446 = 0, $$lcssa1447 = 0, $$lcssa1448 = 0, $$lcssa1450 = 0, $$lcssa1451 = 0;
				var $$lcssa1452 = 0, $$lcssa1457 = 0, $$lcssa1460 = 0, $$lcssa1461 = 0, $$lcssa1462 = 0, $$lcssa1463 = 0, $$lcssa1470 = 0, $$lcssa1475 = 0, $$lcssa1476 = 0, $$lcssa1477 = 0, $$lcssa1478 = 0, $$lcssa1480 = 0, $$lcssa1481 = 0, $$lcssa509 = 0, $$lcssa510 = 0, $$lcssa512 = 0, $$lcssa521 = 0, $$not = 0, $$not189 = 0, $$off = 0;
				var $$old359 = 0, $$old362 = 0, $$pre = 0, $$pre861 = 0, $$pre862 = 0, $$pre863 = 0, $$pre864 = 0, $$pre865 = 0, $$pre867 = 0, $$pre868 = 0, $$pre869 = 0, $$pre870 = 0, $$pre871 = 0, $$pre872 = 0, $$pre873 = 0, $$pre874 = 0, $$pre875 = 0, $$pre876 = 0, $$pre877 = 0, $$pre878 = 0;
				var $$pre879 = 0, $$pre880 = 0, $$pre881 = 0, $$pre882 = 0, $$pre883 = 0, $$pre884 = 0, $$pre885 = 0, $$pre886 = 0, $$pre887 = 0, $$pre888 = 0, $$pre889 = 0, $$pre889$pre = 0, $$pre890 = 0, $$pre891 = 0, $$valid$0$off0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
				var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
				var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
				var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
				var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
				var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0;
				var $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0;
				var $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0;
				var $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0;
				var $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0;
				var $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0;
				var $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0;
				var $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0;
				var $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0;
				var $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0;
				var $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0;
				var $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0;
				var $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0;
				var $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0;
				var $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0;
				var $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0;
				var $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0;
				var $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0;
				var $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0;
				var $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0;
				var $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0;
				var $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0;
				var $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0;
				var $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0;
				var $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0;
				var $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0;
				var $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0;
				var $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0;
				var $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0;
				var $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0;
				var $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0;
				var $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0;
				var $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0;
				var $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0;
				var $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0;
				var $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0;
				var $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0;
				var $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0;
				var $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0;
				var $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0;
				var $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0;
				var $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0;
				var $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0;
				var $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0;
				var $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0;
				var $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0;
				var $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0;
				var $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0;
				var $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0;
				var $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0;
				var $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0;
				var $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0;
				var $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0;
				var $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0;
				var $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0;
				var $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0;
				var $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0;
				var $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0;
				var $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0;
				var $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0;
				var $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0;
				var $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0;
				var $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0;
				var $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0;
				var $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0;
				var $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0;
				var $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0;
				var $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0;
				var $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0;
				var $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0;
				var $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0;
				var $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0;
				var $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0;
				var $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0;
				var $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0;
				var $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0;
				var $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0;
				var $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0;
				var $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0;
				var $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0;
				var $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0;
				var $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0;
				var $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0;
				var $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0;
				var $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0;
				var $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0;
				var $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0;
				var $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0;
				var $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0;
				var $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0;
				var $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0;
				var $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0;
				var $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0;
				var $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0;
				var $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0;
				var $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0;
				var $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0;
				var $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0;
				var $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0;
				var $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0;
				var $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0;
				var $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0;
				var $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0;
				var $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0;
				var $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0;
				var $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0;
				var $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0;
				var $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0;
				var $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0;
				var $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
				var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
				var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
				var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
				var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
				var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
				var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
				var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
				var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
				var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
				var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
				var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
				var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
				var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
				var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
				var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
				var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
				var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
				var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
				var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
				var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
				var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
				var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
				var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
				var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
				var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
				var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
				var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
				var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
				var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
				var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
				var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
				var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
				var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
				var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
				var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
				var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
				var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
				var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
				var $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i$i220 = 0, $__new_last2$i$i$i$i227 = 0, $__new_last2$i$i$i$i239 = 0, $__new_last2$i$i$i$i246 = 0, $__new_last2$i$i$i$i253 = 0, $__new_last2$i$i$i$i260 = 0, $__new_last2$i$i$i$i282 = 0, $__new_last2$i$i$i$i289 = 0, $b117 = 0, $b1172 = 0, $b132 = 0, $b2173 = 0, $b218 = 0, $b31 = 0, $begin$0711 = 0, $begin$1 = 0, $begin102$0648 = 0, $begin111$0642 = 0, $begin130$0623 = 0;
				var $begin139$0616 = 0, $begin139$1 = 0, $begin44$0699 = 0, $begin44$1 = 0, $begin60$0685 = 0, $begin60$2 = 0, $begin73$0668 = 0, $begin73$1 = 0, $brmerge = 0, $brmerge190 = 0, $brmerge213 = 0, $c1 = 0, $c112 = 0, $c1174 = 0, $c119 = 0, $c124 = 0, $c133 = 0, $c15 = 0, $c16$0$ = 0, $c16$0$lcssa = 0;
				var $c16$0746 = 0, $c19 = 0, $c2 = 0, $c2175 = 0, $c220 = 0, $c26 = 0, $c3 = 0, $c30 = 0, $capital$0$off0$lcssa = 0, $capital$0$off0602 = 0, $capital$1$off0 = 0, $capital$4$off0 = 0, $cmin$0$lcssa = 0, $cmin$0752 = 0, $cmin$1 = 0, $cmin$1$lcssa = 0, $code$off$i = 0, $code$off$i266 = 0, $code$off$i274 = 0, $code$off$i275 = 0;
				var $code$off$i295 = 0, $code109$0$ph = 0, $col$0751 = 0, $colmin$0$lcssa = 0, $colmin$0753 = 0, $colmin$1 = 0, $colmin$1$lcssa = 0, $count$0571 = 0, $count$1 = 0, $count$1$lcssa = 0, $digits$0 = 0, $digits$1 = 0, $digits$3 = 0, $exitcond = 0, $exitcond860 = 0, $g$0723 = 0, $i$0781 = 0, $i$1 = 0, $i$3 = 0, $i1$0776 = 0;
				var $i1$1 = 0, $i1$2 = 0, $i10$0768 = 0, $i104$0 = 0, $i104$0$in = 0, $i104$0$lcssa = 0, $i104$1646 = 0, $i114$0637 = 0, $i114$1640 = 0, $i118$0632 = 0, $i125$0627 = 0, $i13$0$ = 0, $i13$0764 = 0, $i13$1 = 0, $i13$2 = 0, $i13$3 = 0, $i13$7 = 0, $i133$0619 = 0, $i138$0613 = 0, $i148$0598 = 0;
				var $i153$0592 = 0, $i159$0588 = 0, $i164$0584 = 0, $i164$1 = 0, $i164$3357 = 0, $i177$0569 = 0, $i22$0735 = 0, $i29$0$ph729 = 0, $i35$0713 = 0, $i43$0701 = 0, $i54$0690 = 0, $i61$0679 = 0, $i7$0772 = 0, $i72$0669 = 0, $i83$0663 = 0, $i83$0663$in = 0, $i87$0 = 0, $i87$0$in656 = 0, $i87$0$in656$phi = 0, $i87$0655 = 0;
				var $i87$0657 = 0, $i93$0652 = 0, $ib$0$lcssa = 0, $ib$0740 = 0, $isdigit = 0, $isdigittmp = 0, $isolated$0$off0683 = 0, $isolated$2$off0 = 0, $ispos = 0, $ispos185 = 0, $ispos187 = 0, $j$0761 = 0, $j142$0604 = 0, $j166$0572 = 0, $j26$0731 = 0, $j26$0731$in = 0, $j37$0708 = 0, $j47$0696 = 0, $j56$0 = 0, $j65$0675 = 0;
				var $j76$0665 = 0, $k$0$ib$0 = 0, $k$0739 = 0, $k34$0720 = 0, $lcode$0 = 0, $left$0724 = 0, $lpad$phi$index = 0, $lpad$phi$index17 = 0, $lpad$phi487$index = 0, $lpad$phi487$index12 = 0, $lpad$phi492$index = 0, $lpad$phi492$index7 = 0, $lpad$phi498$index = 0, $lpad$phi498$index2 = 0, $mean_upper_width$0583 = 0, $mean_upper_width$1570 = 0, $mean_upper_width$2 = 0, $mean_upper_width$2$lcssa = 0, $mean_upper_width$4 = 0, $mean_upper_width$5356 = 0;
				var $neg = 0, $neg186 = 0, $neg188 = 0, $not$ = 0, $not$375 = 0, $or$cond = 0, $or$cond110 = 0, $or$cond115 = 0, $or$cond26 = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond360 = 0, $or$cond363 = 0, $or$cond365 = 0, $or$cond367 = 0, $or$cond370 = 0, $or$cond373 = 0, $or$cond43 = 0, $or$cond66 = 0, $or$cond68 = 0;
				var $or$cond71 = 0, $or$cond77 = 0, $or$cond787 = 0, $or$cond85 = 0, $or$cond87 = 0, $or$cond89 = 0, $or$cond92 = 0, $r1 = 0, $r1170 = 0, $r2 = 0, $r2171 = 0, $rcode$0 = 0, $re = 0, $row$0745 = 0, $row169$0$lcssa = 0, $row169$0$lcssa$ph = 0, $row169$0575 = 0, $row169$0575$lcssa = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i221 = 0;
				var $scevgep$i$i$i$i228 = 0, $scevgep$i$i$i$i240 = 0, $scevgep$i$i$i$i247 = 0, $scevgep$i$i$i$i254 = 0, $scevgep$i$i$i$i261 = 0, $scevgep$i$i$i$i283 = 0, $scevgep$i$i$i$i290 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i222 = 0, $scevgep4$i$i$i$i229 = 0, $scevgep4$i$i$i$i241 = 0, $scevgep4$i$i$i$i248 = 0, $scevgep4$i$i$i$i255 = 0, $scevgep4$i$i$i$i262 = 0, $scevgep4$i$i$i$i284 = 0, $scevgep4$i$i$i$i291 = 0, $small$0$off0$lcssa = 0, $small$0$off0603 = 0, $small$4$off0 = 0, $small$5$off0$not = 0;
				var $valid$0$off0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$$byval_copy = sp + 1176|0;
				$0 = sp + 72|0;
				$1 = sp + 64|0;
				$2 = sp + 56|0;
				$3 = sp + 48|0;
				$4 = sp + 40|0;
				$5 = sp + 32|0;
				$6 = sp + 24|0;
				$7 = sp + 16|0;
				$8 = sp + 8|0;
				$9 = sp;
				$c1 = sp + 1136|0;
				$10 = sp + 1120|0;
				$c2 = sp + 1080|0;
				$c3 = sp + 1040|0;
				$11 = sp + 1024|0;
				$12 = sp + 1008|0;
				$c15 = sp + 968|0;
				$13 = sp + 952|0;
				$c26 = sp + 912|0;
				$14 = sp + 896|0;
				$15 = sp + 880|0;
				$c19 = sp + 840|0;
				$16 = sp + 824|0;
				$17 = sp + 808|0;
				$c112 = sp + 768|0;
				$18 = sp + 752|0;
				$r1 = sp + 736|0;
				$r2 = sp + 720|0;
				$b117 = sp + 680|0;
				$b218 = sp + 640|0;
				$c119 = sp + 600|0;
				$c220 = sp + 560|0;
				$19 = sp + 544|0;
				$20 = sp + 528|0;
				$c124 = sp + 488|0;
				$21 = sp + 472|0;
				$c30 = sp + 432|0;
				$b31 = sp + 392|0;
				$re = sp + 376|0;
				$b132 = sp + 336|0;
				$c133 = sp + 296|0;
				$22 = sp + 280|0;
				$r1170 = sp + 264|0;
				$r2171 = sp + 248|0;
				$b1172 = sp + 208|0;
				$b2173 = sp + 168|0;
				$c1174 = sp + 128|0;
				$c2175 = sp + 88|0;
				$23 = sp + 84|0;
				$24 = sp + 80|0;
				$25 = ((($this)) + 12|0);
				$26 = HEAP32[$25>>2]|0;
				$27 = ((($this)) + 16|0);
				$28 = ((($this)) + 20|0);
				$29 = HEAP32[$28>>2]|0;
				$30 = HEAP32[$27>>2]|0;
				$31 = (($29) - ($30))|0;
				$32 = $31 >> 2;
				$33 = ($26|0)<($32|0);
				if (!($33)) {
					STACKTOP = sp;return;
				}
				$34 = ((($c1)) + 16|0);
				$35 = ((($c1)) + 20|0);
				$36 = ((($c1)) + 24|0);
				$37 = ((($c1)) + 28|0);
				$38 = ((($c1)) + 32|0);
				$39 = ((($c1)) + 36|0);
				$40 = ((($c1)) + 28|0);
				$41 = ((($c2)) + 16|0);
				$42 = ((($c2)) + 20|0);
				$43 = ((($c2)) + 24|0);
				$44 = ((($c2)) + 28|0);
				$45 = ((($c2)) + 32|0);
				$46 = ((($c2)) + 36|0);
				$47 = ((($c3)) + 16|0);
				$48 = ((($c3)) + 20|0);
				$49 = ((($c3)) + 24|0);
				$50 = ((($c3)) + 24|0);
				$51 = ((($c3)) + 28|0);
				$52 = ((($c3)) + 32|0);
				$53 = ((($c3)) + 36|0);
				$54 = ((($c2)) + 28|0);
				$55 = ((($c3)) + 28|0);
				$i$0781 = $26;
				L4: while(1) {
					$78 = (__ZNK8Textline9characterEi($this,$i$0781)|0);
					$79 = ((($78)) + 28|0);
					$80 = ((($78)) + 32|0);
					$81 = HEAP32[$80>>2]|0;
					$82 = HEAP32[$79>>2]|0;
					$83 = ($81|0)==($82|0);
					do {
						if ($83) {
							$84 = ((($78)) + 16|0);
							$85 = ((($78)) + 20|0);
							$86 = HEAP32[$85>>2]|0;
							$87 = HEAP32[$84>>2]|0;
							$88 = (($86) - ($87))|0;
							$89 = ($88|0)==(12);
							if ($89) {
								$90 = (__ZN9Character4blobEi($78,0)|0);
								$91 = (__ZN9Character4blobEi($78,1)|0);
								$92 = (__ZN9Character4blobEi($78,2)|0);
								$93 = ((($91)) + 12|0);
								$94 = HEAP32[$93>>2]|0;
								$95 = ((($91)) + 4|0);
								$96 = HEAP32[$95>>2]|0;
								$97 = (($94) + 1)|0;
								$98 = (($97) - ($96))|0;
								$99 = ((($92)) + 12|0);
								$100 = HEAP32[$99>>2]|0;
								$101 = ((($92)) + 4|0);
								$102 = HEAP32[$101>>2]|0;
								$103 = (($100) + 1)|0;
								$104 = (($103) - ($102))|0;
								$105 = (__ZN5Ocrad7similarEiiii($98,$104,20,1)|0);
								if ($105) {
									$106 = (__ZNK9Rectangle10h_overlapsERKS_($91,$92)|0);
									if ($106) {
										$i$3 = $i$0781;
									} else {
										$107 = HEAP32[$101>>2]|0;
										$108 = HEAP32[$99>>2]|0;
										$109 = (($108) + ($107))|0;
										$110 = (($109|0) / 2)&-1;
										$111 = (__ZNK9Rectangle10v_includesEi($91,$110)|0);
										if ($111) {
											$112 = HEAP32[$95>>2]|0;
											$113 = HEAP32[$93>>2]|0;
											$114 = (($113) + ($112))|0;
											$115 = (($114|0) / 2)&-1;
											$116 = (__ZNK9Rectangle10v_includesEi($92,$115)|0);
											if ($116) {
												$117 = ((($90)) + 12|0);
												$118 = HEAP32[$117>>2]|0;
												$119 = HEAP32[$95>>2]|0;
												$120 = ($118|0)<($119|0);
												if ($120) {
													$121 = HEAP32[$101>>2]|0;
													$122 = ($118|0)<($121|0);
													if ($122) {
														$123 = ((($90)) + 4|0);
														$124 = HEAP32[$123>>2]|0;
														$125 = (($118) + 1)|0;
														$126 = (($125) - ($124))|0;
														$127 = HEAP32[$93>>2]|0;
														$128 = (1 - ($119))|0;
														$129 = (($128) + ($127))|0;
														$130 = ($126|0)>($129|0);
														if ($130) {
															$131 = HEAP32[$99>>2]|0;
															$132 = (1 - ($121))|0;
															$133 = (($132) + ($131))|0;
															$134 = ($126|0)>($133|0);
															if ($134) {
																$135 = (__Znwj(40)|0);
																__THREW__ = 0;
																invoke_vii(159,($135|0),($90|0));
																$136 = __THREW__; __THREW__ = 0;
																$137 = $136&1;
																if ($137) {
																	$$lcssa1478 = $135;
																	label = 20;
																	break L4;
																}
																;HEAP32[$c1>>2]=HEAP32[$135>>2]|0;HEAP32[$c1+4>>2]=HEAP32[$135+4>>2]|0;HEAP32[$c1+8>>2]=HEAP32[$135+8>>2]|0;HEAP32[$c1+12>>2]=HEAP32[$135+12>>2]|0;
																$138 = (__Znwj(4)|0);
																$139 = $135;
																HEAP32[$34>>2] = $138;
																$140 = ((($138)) + 4|0);
																HEAP32[$36>>2] = $140;
																HEAP32[$138>>2] = $139;
																HEAP32[$35>>2] = $140;
																HEAP32[$37>>2] = 0;
																HEAP32[$38>>2] = 0;
																HEAP32[$39>>2] = 0;
																__THREW__ = 0;
																invoke_viii(196,($10|0),($this|0),($c1|0));
																$141 = __THREW__; __THREW__ = 0;
																$142 = $141&1;
																if ($142) {
																	label = 21;
																	break L4;
																}
																__THREW__ = 0;
																invoke_viii(188,($c1|0),($charset|0),($10|0));
																$143 = __THREW__; __THREW__ = 0;
																$144 = $143&1;
																if ($144) {
																	label = 21;
																	break L4;
																}
																$145 = HEAP32[$38>>2]|0;
																$146 = HEAP32[$40>>2]|0;
																$147 = ($145|0)==($146|0);
																if (!($147)) {
																	__THREW__ = 0;
																	(invoke_iii(197,($78|0),($c1|0))|0);
																	$148 = __THREW__; __THREW__ = 0;
																	$149 = $148&1;
																	if ($149) {
																		label = 21;
																		break L4;
																	}
																}
																__ZN9CharacterD2Ev($c1);
																$i$3 = $i$0781;
																break;
															}
														}
														$156 = (__Znwj(40)|0);
														__THREW__ = 0;
														invoke_vii(159,($156|0),($91|0));
														$157 = __THREW__; __THREW__ = 0;
														$158 = $157&1;
														if ($158) {
															$$lcssa1463 = $156;
															label = 32;
															break L4;
														}
														;HEAP32[$c2>>2]=HEAP32[$156>>2]|0;HEAP32[$c2+4>>2]=HEAP32[$156+4>>2]|0;HEAP32[$c2+8>>2]=HEAP32[$156+8>>2]|0;HEAP32[$c2+12>>2]=HEAP32[$156+12>>2]|0;
														$159 = (__Znwj(4)|0);
														$160 = $156;
														HEAP32[$41>>2] = $159;
														$161 = ((($159)) + 4|0);
														HEAP32[$43>>2] = $161;
														HEAP32[$159>>2] = $160;
														HEAP32[$42>>2] = $161;
														HEAP32[$44>>2] = 0;
														HEAP32[$45>>2] = 0;
														HEAP32[$46>>2] = 0;
														__THREW__ = 0;
														$162 = (invoke_ii(29,40)|0);
														$163 = __THREW__; __THREW__ = 0;
														$164 = $163&1;
														if ($164) {
															label = 33;
															break L4;
														}
														__THREW__ = 0;
														invoke_vii(159,($162|0),($92|0));
														$165 = __THREW__; __THREW__ = 0;
														$166 = $165&1;
														if ($166) {
															$$lcssa1470 = $162;
															label = 34;
															break L4;
														}
														;HEAP32[$c3>>2]=HEAP32[$162>>2]|0;HEAP32[$c3+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$c3+8>>2]=HEAP32[$162+8>>2]|0;HEAP32[$c3+12>>2]=HEAP32[$162+12>>2]|0;
														HEAP32[$47>>2] = 0;
														HEAP32[$48>>2] = 0;
														HEAP32[$49>>2] = 0;
														__THREW__ = 0;
														$167 = (invoke_ii(29,4)|0);
														$168 = __THREW__; __THREW__ = 0;
														$169 = $168&1;
														if ($169) {
															label = 33;
															break L4;
														}
														$170 = $162;
														HEAP32[$47>>2] = $167;
														$171 = ((($167)) + 4|0);
														HEAP32[$50>>2] = $171;
														HEAP32[$167>>2] = $170;
														HEAP32[$48>>2] = $171;
														HEAP32[$51>>2] = 0;
														HEAP32[$52>>2] = 0;
														HEAP32[$53>>2] = 0;
														$172 = HEAP32[$90>>2]|0;
														$173 = ((($90)) + 8|0);
														$174 = HEAP32[$173>>2]|0;
														$175 = (($174) + ($172))|0;
														$176 = (($175|0) / 2)&-1;
														__THREW__ = 0;
														$177 = (invoke_iii(198,($91|0),($176|0))|0);
														$178 = __THREW__; __THREW__ = 0;
														$179 = $178&1;
														if ($179) {
															label = 35;
															break L4;
														}
														do {
															if ($177) {
																__THREW__ = 0;
																$180 = (invoke_ii(29,40)|0);
																$181 = __THREW__; __THREW__ = 0;
																$182 = $181&1;
																if ($182) {
																	label = 35;
																	break L4;
																}
																__THREW__ = 0;
																invoke_vii(159,($180|0),($90|0));
																$183 = __THREW__; __THREW__ = 0;
																$184 = $183&1;
																if ($184) {
																	$$lcssa1476 = $180;
																	label = 36;
																	break L4;
																}
																__THREW__ = 0;
																invoke_vii(199,($c2|0),($180|0));
																$185 = __THREW__; __THREW__ = 0;
																$186 = $185&1;
																if ($186) {
																	label = 35;
																	break L4;
																}
															} else {
																$197 = HEAP32[$90>>2]|0;
																$198 = HEAP32[$173>>2]|0;
																$199 = (($198) + ($197))|0;
																$200 = (($199|0) / 2)&-1;
																__THREW__ = 0;
																$201 = (invoke_iii(198,($92|0),($200|0))|0);
																$202 = __THREW__; __THREW__ = 0;
																$203 = $202&1;
																if ($203) {
																	label = 35;
																	break L4;
																}
																if (!($201)) {
																	break;
																}
																__THREW__ = 0;
																$204 = (invoke_ii(29,40)|0);
																$205 = __THREW__; __THREW__ = 0;
																$206 = $205&1;
																if ($206) {
																	label = 35;
																	break L4;
																}
																__THREW__ = 0;
																invoke_vii(159,($204|0),($90|0));
																$207 = __THREW__; __THREW__ = 0;
																$208 = $207&1;
																if ($208) {
																	$$lcssa1475 = $204;
																	label = 42;
																	break L4;
																}
																__THREW__ = 0;
																invoke_vii(199,($c3|0),($204|0));
																$209 = __THREW__; __THREW__ = 0;
																$210 = $209&1;
																if ($210) {
																	label = 35;
																	break L4;
																}
															}
														} while(0);
														__THREW__ = 0;
														invoke_viii(196,($11|0),($this|0),($c2|0));
														$213 = __THREW__; __THREW__ = 0;
														$214 = $213&1;
														if ($214) {
															label = 35;
															break L4;
														}
														__THREW__ = 0;
														invoke_viii(188,($c2|0),($charset|0),($11|0));
														$215 = __THREW__; __THREW__ = 0;
														$216 = $215&1;
														if ($216) {
															label = 35;
															break L4;
														}
														__THREW__ = 0;
														invoke_viii(196,($12|0),($this|0),($c3|0));
														$217 = __THREW__; __THREW__ = 0;
														$218 = $217&1;
														if ($218) {
															label = 35;
															break L4;
														}
														__THREW__ = 0;
														invoke_viii(188,($c3|0),($charset|0),($12|0));
														$219 = __THREW__; __THREW__ = 0;
														$220 = $219&1;
														if ($220) {
															label = 35;
															break L4;
														}
														$221 = HEAP32[$45>>2]|0;
														$222 = HEAP32[$54>>2]|0;
														$223 = ($221|0)==($222|0);
														do {
															if ($223) {
																$i$1 = $i$0781;
															} else {
																$224 = HEAP32[$52>>2]|0;
																$225 = HEAP32[$55>>2]|0;
																$226 = ($224|0)==($225|0);
																if ($226) {
																	$i$1 = $i$0781;
																	break;
																}
																__THREW__ = 0;
																(invoke_iii(197,($78|0),($c2|0))|0);
																$227 = __THREW__; __THREW__ = 0;
																$228 = $227&1;
																if ($228) {
																	label = 35;
																	break L4;
																}
																__THREW__ = 0;
																$229 = (invoke_ii(29,40)|0);
																$230 = __THREW__; __THREW__ = 0;
																$231 = $230&1;
																if ($231) {
																	label = 35;
																	break L4;
																}
																__THREW__ = 0;
																invoke_vii(200,($229|0),($c3|0));
																$232 = __THREW__; __THREW__ = 0;
																$233 = $232&1;
																if ($233) {
																	$$lcssa1477 = $229;
																	label = 54;
																	break L4;
																}
																__THREW__ = 0;
																(invoke_iiii(103,($this|0),($229|0),0)|0);
																$234 = __THREW__; __THREW__ = 0;
																$235 = $234&1;
																if ($235) {
																	label = 35;
																	break L4;
																}
																$236 = (($i$0781) + 1)|0;
																$i$1 = $236;
															}
														} while(0);
														__THREW__ = 0;
														invoke_vi(176,($c3|0));
														$239 = __THREW__; __THREW__ = 0;
														$240 = $239&1;
														if ($240) {
															label = 33;
															break L4;
														}
														__ZN9CharacterD2Ev($c2);
														$i$3 = $i$1;
													} else {
														$i$3 = $i$0781;
													}
												} else {
													$i$3 = $i$0781;
												}
											} else {
												$i$3 = $i$0781;
											}
										} else {
											$i$3 = $i$0781;
										}
									}
								} else {
									$i$3 = $i$0781;
								}
							} else {
								$i$3 = $i$0781;
							}
						} else {
							$i$3 = $i$0781;
						}
					} while(0);
					$245 = (($i$3) + 1)|0;
					$246 = HEAP32[$28>>2]|0;
					$247 = HEAP32[$27>>2]|0;
					$248 = (($246) - ($247))|0;
					$249 = $248 >> 2;
					$250 = ($245|0)<($249|0);
					if ($250) {
						$i$0781 = $245;
					} else {
						$$lcssa1480 = $246;$$lcssa1481 = $247;
						label = 3;
						break;
					}
				}
				switch (label|0) {
					case 3: {
						$$pre = HEAP32[$25>>2]|0;
						$56 = (($$lcssa1480) - ($$lcssa1481))|0;
						$57 = $56 >> 2;
						$58 = ($$pre|0)<($57|0);
						do {
							if ($58) {
								$59 = ((($c15)) + 16|0);
								$60 = ((($c15)) + 20|0);
								$61 = ((($c15)) + 24|0);
								$62 = ((($c15)) + 28|0);
								$63 = ((($c15)) + 32|0);
								$64 = ((($c15)) + 36|0);
								$65 = ((($c26)) + 16|0);
								$66 = ((($c26)) + 20|0);
								$67 = ((($c26)) + 24|0);
								$68 = ((($c26)) + 24|0);
								$69 = ((($c26)) + 28|0);
								$70 = ((($c26)) + 32|0);
								$71 = ((($c26)) + 36|0);
								$72 = ((($c15)) + 28|0);
								$73 = ((($c15)) + 12|0);
								$74 = ((($c15)) + 4|0);
								$75 = ((($c26)) + 12|0);
								$76 = ((($c26)) + 4|0);
								$77 = ((($c26)) + 28|0);
								$i1$0776 = $$pre;
								L58: while(1) {
									$264 = (__ZNK8Textline9characterEi($this,$i1$0776)|0);
									$265 = ((($264)) + 28|0);
									$266 = ((($264)) + 32|0);
									$267 = HEAP32[$266>>2]|0;
									$268 = HEAP32[$265>>2]|0;
									$269 = ($267|0)==($268|0);
									if ($269) {
										$270 = ((($264)) + 16|0);
										$271 = ((($264)) + 20|0);
										$272 = HEAP32[$271>>2]|0;
										$273 = HEAP32[$270>>2]|0;
										$274 = (($272) - ($273))|0;
										$275 = ($274|0)==(8);
										if ($275) {
											$276 = (__ZN9Character4blobEi($264,0)|0);
											$277 = (__ZN9Character4blobEi($264,1)|0);
											$278 = (__ZNK9Rectangle10v_overlapsERKS_($276,$277)|0);
											if ($278) {
												$279 = (__Znwj(40)|0);
												__THREW__ = 0;
												$280 = (invoke_iii(201,($264|0),0)|0);
												$281 = __THREW__; __THREW__ = 0;
												$282 = $281&1;
												if ($282) {
													$$lcssa1452 = $279;
													label = 82;
													break;
												}
												__THREW__ = 0;
												invoke_vii(159,($279|0),($280|0));
												$283 = __THREW__; __THREW__ = 0;
												$284 = $283&1;
												if ($284) {
													$$lcssa1452 = $279;
													label = 82;
													break;
												}
												;HEAP32[$c15>>2]=HEAP32[$279>>2]|0;HEAP32[$c15+4>>2]=HEAP32[$279+4>>2]|0;HEAP32[$c15+8>>2]=HEAP32[$279+8>>2]|0;HEAP32[$c15+12>>2]=HEAP32[$279+12>>2]|0;
												$285 = (__Znwj(4)|0);
												$286 = $279;
												HEAP32[$59>>2] = $285;
												$287 = ((($285)) + 4|0);
												HEAP32[$61>>2] = $287;
												HEAP32[$285>>2] = $286;
												HEAP32[$60>>2] = $287;
												HEAP32[$62>>2] = 0;
												HEAP32[$63>>2] = 0;
												HEAP32[$64>>2] = 0;
												__THREW__ = 0;
												invoke_viii(196,($13|0),($this|0),($c15|0));
												$288 = __THREW__; __THREW__ = 0;
												$289 = $288&1;
												if ($289) {
													label = 83;
													break;
												}
												__THREW__ = 0;
												invoke_viii(188,($c15|0),($charset|0),($13|0));
												$290 = __THREW__; __THREW__ = 0;
												$291 = $290&1;
												if ($291) {
													label = 83;
													break;
												}
												__THREW__ = 0;
												$292 = (invoke_ii(29,40)|0);
												$293 = __THREW__; __THREW__ = 0;
												$294 = $293&1;
												if ($294) {
													label = 83;
													break;
												}
												__THREW__ = 0;
												$295 = (invoke_iii(201,($264|0),1)|0);
												$296 = __THREW__; __THREW__ = 0;
												$297 = $296&1;
												if ($297) {
													$$lcssa1457 = $292;
													label = 84;
													break;
												}
												__THREW__ = 0;
												invoke_vii(159,($292|0),($295|0));
												$298 = __THREW__; __THREW__ = 0;
												$299 = $298&1;
												if ($299) {
													$$lcssa1457 = $292;
													label = 84;
													break;
												}
												;HEAP32[$c26>>2]=HEAP32[$292>>2]|0;HEAP32[$c26+4>>2]=HEAP32[$292+4>>2]|0;HEAP32[$c26+8>>2]=HEAP32[$292+8>>2]|0;HEAP32[$c26+12>>2]=HEAP32[$292+12>>2]|0;
												HEAP32[$65>>2] = 0;
												HEAP32[$66>>2] = 0;
												HEAP32[$67>>2] = 0;
												__THREW__ = 0;
												$300 = (invoke_ii(29,4)|0);
												$301 = __THREW__; __THREW__ = 0;
												$302 = $301&1;
												if ($302) {
													label = 83;
													break;
												}
												$303 = $292;
												HEAP32[$65>>2] = $300;
												$304 = ((($300)) + 4|0);
												HEAP32[$68>>2] = $304;
												HEAP32[$300>>2] = $303;
												HEAP32[$66>>2] = $304;
												HEAP32[$69>>2] = 0;
												HEAP32[$70>>2] = 0;
												HEAP32[$71>>2] = 0;
												__THREW__ = 0;
												invoke_viii(196,($14|0),($this|0),($c26|0));
												$305 = __THREW__; __THREW__ = 0;
												$306 = $305&1;
												if ($306) {
													label = 85;
													break;
												}
												__THREW__ = 0;
												invoke_viii(188,($c26|0),($charset|0),($14|0));
												$307 = __THREW__; __THREW__ = 0;
												$308 = $307&1;
												if ($308) {
													label = 85;
													break;
												}
												$309 = HEAP32[$63>>2]|0;
												$310 = HEAP32[$72>>2]|0;
												$311 = ($309|0)==($310|0);
												if ($311) {
													label = 78;
												} else {
													$312 = HEAP32[$70>>2]|0;
													$313 = HEAP32[$77>>2]|0;
													$314 = ($312|0)==($313|0);
													if ($314) {
														label = 78;
													} else {
														label = 80;
													}
												}
												if ((label|0) == 78) {
													label = 0;
													$315 = HEAP32[$73>>2]|0;
													$316 = HEAP32[$74>>2]|0;
													$317 = (($315) + 1)|0;
													$318 = (($317) - ($316))|0;
													$319 = HEAP32[$75>>2]|0;
													$320 = HEAP32[$76>>2]|0;
													$321 = (($319) + 1)|0;
													$322 = (($321) - ($320))|0;
													__THREW__ = 0;
													$323 = (invoke_iiiii(120,($318|0),($322|0),20,1)|0);
													$324 = __THREW__; __THREW__ = 0;
													$325 = $324&1;
													if ($325) {
														label = 85;
														break;
													}
													if ($323) {
														label = 80;
													} else {
														$i1$1 = $i1$0776;
													}
												}
												do {
													if ((label|0) == 80) {
														label = 0;
														$326 = HEAP32[$73>>2]|0;
														$327 = HEAP32[$74>>2]|0;
														$328 = (($326) + 1)|0;
														$329 = (($328) - ($327))|0;
														$330 = HEAP32[$75>>2]|0;
														$331 = HEAP32[$76>>2]|0;
														$332 = (($330) + 1)|0;
														$333 = (($332) - ($331))|0;
														$334 = ($329|0)>($333|0);
														if ($334) {
															__THREW__ = 0;
															(invoke_iii(197,($264|0),($c15|0))|0);
															$335 = __THREW__; __THREW__ = 0;
															$336 = $335&1;
															if ($336) {
																label = 85;
																break L58;
															}
														} else {
															__THREW__ = 0;
															(invoke_iii(197,($264|0),($c26|0))|0);
															$345 = __THREW__; __THREW__ = 0;
															$346 = $345&1;
															if ($346) {
																label = 85;
																break L58;
															}
															__THREW__ = 0;
															(invoke_iii(197,($c26|0),($c15|0))|0);
															$347 = __THREW__; __THREW__ = 0;
															$348 = $347&1;
															if ($348) {
																label = 85;
																break L58;
															}
														}
														__THREW__ = 0;
														$349 = (invoke_iii(178,($c26|0),46)|0);
														$350 = __THREW__; __THREW__ = 0;
														$351 = $350&1;
														if ($351) {
															label = 85;
															break L58;
														}
														if ($349) {
															$352 = HEAP32[$76>>2]|0;
															$353 = ((($264)) + 4|0);
															$354 = HEAP32[$353>>2]|0;
															$355 = ((($264)) + 12|0);
															$356 = HEAP32[$355>>2]|0;
															$357 = (($356) + ($354))|0;
															$358 = (($357|0) / 2)&-1;
															$359 = ($352|0)>($358|0);
															if (!($359)) {
																$i1$1 = $i1$0776;
																break;
															}
														}
														__THREW__ = 0;
														$360 = (invoke_ii(29,40)|0);
														$361 = __THREW__; __THREW__ = 0;
														$362 = $361&1;
														if ($362) {
															label = 85;
															break L58;
														}
														__THREW__ = 0;
														invoke_vii(200,($360|0),($c26|0));
														$363 = __THREW__; __THREW__ = 0;
														$364 = $363&1;
														if ($364) {
															$$lcssa1460 = $360;
															label = 95;
															break L58;
														}
														__THREW__ = 0;
														(invoke_iiii(103,($this|0),($360|0),0)|0);
														$365 = __THREW__; __THREW__ = 0;
														$366 = $365&1;
														if ($366) {
															label = 85;
															break L58;
														}
														$367 = (($i1$0776) + 1)|0;
														$i1$1 = $367;
													}
												} while(0);
												__THREW__ = 0;
												invoke_vi(176,($c26|0));
												$370 = __THREW__; __THREW__ = 0;
												$371 = $370&1;
												if ($371) {
													label = 83;
													break;
												}
												__ZN9CharacterD2Ev($c15);
												$i1$2 = $i1$1;
											} else {
												$i1$2 = $i1$0776;
											}
										} else {
											$i1$2 = $i1$0776;
										}
									} else {
										$i1$2 = $i1$0776;
									}
									$376 = (($i1$2) + 1)|0;
									$377 = HEAP32[$28>>2]|0;
									$378 = HEAP32[$27>>2]|0;
									$379 = (($377) - ($378))|0;
									$380 = $379 >> 2;
									$381 = ($376|0)<($380|0);
									if ($381) {
										$i1$0776 = $376;
									} else {
										$$lcssa1461 = $377;$$lcssa1462 = $378;
										label = 60;
										break;
									}
								}
								if ((label|0) == 60) {
									$$pre861 = HEAP32[$25>>2]|0;
									$$in893 = $$lcssa1462;$252 = $$lcssa1461;$254 = $$pre861;
									break;
								}
								else if ((label|0) == 82) {
									$337 = ___cxa_find_matching_catch_2()|0;
									$338 = tempRet0;
									__ZdlPv($$lcssa1452);
									$$16 = $337;$$16134 = $338;
									___resumeException($$16|0);
									// unreachable;
								}
								else if ((label|0) == 83) {
									$339 = ___cxa_find_matching_catch_2()|0;
									$340 = tempRet0;
									$$3 = $339;$$3121 = $340;
								}
								else if ((label|0) == 84) {
									$341 = ___cxa_find_matching_catch_2()|0;
									$342 = tempRet0;
									__ZdlPv($$lcssa1457);
									$$3 = $341;$$3121 = $342;
								}
								else if ((label|0) == 85) {
									$343 = ___cxa_find_matching_catch_2()|0;
									$344 = tempRet0;
									$$2 = $343;$$2120 = $344;
									label = 98;
								}
								else if ((label|0) == 95) {
									$368 = ___cxa_find_matching_catch_2()|0;
									$369 = tempRet0;
									__ZdlPv($$lcssa1460);
									$$2 = $368;$$2120 = $369;
									label = 98;
								}
								if ((label|0) == 98) {
									__THREW__ = 0;
									invoke_vi(176,($c26|0));
									$372 = __THREW__; __THREW__ = 0;
									$373 = $372&1;
									if ($373) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$3 = $$2;$$3121 = $$2120;
									}
								}
								__THREW__ = 0;
								invoke_vi(176,($c15|0));
								$374 = __THREW__; __THREW__ = 0;
								$375 = $374&1;
								if ($375) {
									$3035 = ___cxa_find_matching_catch_3(0|0)|0;
									$3036 = tempRet0;
									___clang_call_terminate($3035);
									// unreachable;
								} else {
									$$16 = $$3;$$16134 = $$3121;
									___resumeException($$16|0);
									// unreachable;
								}
							} else {
								$$in893 = $$lcssa1481;$252 = $$lcssa1480;$254 = $$pre;
							}
						} while(0);
						$251 = (($252) - ($$in893))|0;
						$253 = $251 >> 2;
						$255 = ($254|0)<($253|0);
						do {
							if ($255) {
								$256 = ((($15)) + 12|0);
								$257 = ((($c19)) + 16|0);
								$258 = ((($c19)) + 20|0);
								$259 = ((($c19)) + 24|0);
								$260 = ((($c19)) + 28|0);
								$261 = ((($c19)) + 32|0);
								$262 = ((($c19)) + 36|0);
								$263 = ((($c19)) + 28|0);
								$i7$0772 = $254;
								while(1) {
									$395 = (__ZNK8Textline9characterEi($this,$i7$0772)|0);
									$396 = ((($395)) + 28|0);
									$397 = ((($395)) + 32|0);
									$398 = HEAP32[$397>>2]|0;
									$399 = HEAP32[$396>>2]|0;
									$400 = ($398|0)==($399|0);
									if ($400) {
										$401 = ((($395)) + 16|0);
										$402 = ((($395)) + 20|0);
										$403 = HEAP32[$402>>2]|0;
										$404 = HEAP32[$401>>2]|0;
										$405 = (($403) - ($404))|0;
										$406 = ($405|0)==(8);
										if ($406) {
											$407 = (__ZN9Character4blobEi($395,0)|0);
											$408 = ((($407)) + 12|0);
											$409 = HEAP32[$408>>2]|0;
											$410 = ((($407)) + 4|0);
											$411 = HEAP32[$410>>2]|0;
											$412 = (($409) + 1)|0;
											$413 = (($412) - ($411))|0;
											$414 = ((($407)) + 8|0);
											$415 = HEAP32[$414>>2]|0;
											$416 = HEAP32[$407>>2]|0;
											$417 = (($415) + 1)|0;
											$418 = (($417) - ($416))|0;
											$419 = Math_imul($418, $413)|0;
											$420 = (__ZN9Character4blobEi($395,1)|0);
											$421 = ((($420)) + 12|0);
											$422 = HEAP32[$421>>2]|0;
											$423 = ((($420)) + 4|0);
											$424 = HEAP32[$423>>2]|0;
											$425 = (($422) + 1)|0;
											$426 = (($425) - ($424))|0;
											$427 = ((($420)) + 8|0);
											$428 = HEAP32[$427>>2]|0;
											$429 = HEAP32[$420>>2]|0;
											$430 = (($428) + 1)|0;
											$431 = (($430) - ($429))|0;
											$432 = ($426*10)|0;
											$433 = Math_imul($432, $431)|0;
											$434 = ($419|0)>($433|0);
											if ($434) {
												$435 = (__ZN9Character4blobEi($395,1)|0);
												$436 = ((($435)) + 4|0);
												$437 = HEAP32[$436>>2]|0;
												__ZNK8Textline7charboxERK9Character($15,$this,$395);
												$438 = HEAP32[$256>>2]|0;
												$439 = ($437|0)>($438|0);
												if ($439) {
													$440 = (__Znwj(40)|0);
													__THREW__ = 0;
													$441 = (invoke_iii(201,($395|0),0)|0);
													$442 = __THREW__; __THREW__ = 0;
													$443 = $442&1;
													if ($443) {
														$$lcssa1448 = $440;
														label = 114;
														break;
													}
													__THREW__ = 0;
													invoke_vii(159,($440|0),($441|0));
													$444 = __THREW__; __THREW__ = 0;
													$445 = $444&1;
													if ($445) {
														$$lcssa1448 = $440;
														label = 114;
														break;
													}
													;HEAP32[$c19>>2]=HEAP32[$440>>2]|0;HEAP32[$c19+4>>2]=HEAP32[$440+4>>2]|0;HEAP32[$c19+8>>2]=HEAP32[$440+8>>2]|0;HEAP32[$c19+12>>2]=HEAP32[$440+12>>2]|0;
													$446 = (__Znwj(4)|0);
													$447 = $440;
													HEAP32[$257>>2] = $446;
													$448 = ((($446)) + 4|0);
													HEAP32[$259>>2] = $448;
													HEAP32[$446>>2] = $447;
													HEAP32[$258>>2] = $448;
													HEAP32[$260>>2] = 0;
													HEAP32[$261>>2] = 0;
													HEAP32[$262>>2] = 0;
													__THREW__ = 0;
													invoke_viii(196,($16|0),($this|0),($c19|0));
													$449 = __THREW__; __THREW__ = 0;
													$450 = $449&1;
													if ($450) {
														label = 115;
														break;
													}
													__THREW__ = 0;
													invoke_viii(188,($c19|0),($charset|0),($16|0));
													$451 = __THREW__; __THREW__ = 0;
													$452 = $451&1;
													if ($452) {
														label = 115;
														break;
													}
													$453 = HEAP32[$261>>2]|0;
													$454 = HEAP32[$263>>2]|0;
													$455 = ($453|0)==($454|0);
													if (!($455)) {
														__THREW__ = 0;
														(invoke_iii(197,($395|0),($c19|0))|0);
														$456 = __THREW__; __THREW__ = 0;
														$457 = $456&1;
														if ($457) {
															label = 115;
															break;
														}
													}
													__ZN9CharacterD2Ev($c19);
												}
											}
										}
									}
									$464 = (($i7$0772) + 1)|0;
									$465 = HEAP32[$28>>2]|0;
									$466 = HEAP32[$27>>2]|0;
									$467 = (($465) - ($466))|0;
									$468 = $467 >> 2;
									$469 = ($464|0)<($468|0);
									if ($469) {
										$i7$0772 = $464;
									} else {
										$$lcssa1450 = $465;$$lcssa1451 = $466;
										label = 101;
										break;
									}
								}
								if ((label|0) == 101) {
									$$pre862 = HEAP32[$25>>2]|0;
									$$in894 = $$lcssa1451;$383 = $$lcssa1450;$385 = $$pre862;
									break;
								}
								else if ((label|0) == 114) {
									$458 = ___cxa_find_matching_catch_2()|0;
									$459 = tempRet0;
									__ZdlPv($$lcssa1448);
									$$16 = $458;$$16134 = $459;
									___resumeException($$16|0);
									// unreachable;
								}
								else if ((label|0) == 115) {
									$460 = ___cxa_find_matching_catch_2()|0;
									$461 = tempRet0;
									__THREW__ = 0;
									invoke_vi(176,($c19|0));
									$462 = __THREW__; __THREW__ = 0;
									$463 = $462&1;
									if ($463) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$16 = $460;$$16134 = $461;
										___resumeException($$16|0);
										// unreachable;
									}
								}
							} else {
								$$in894 = $$in893;$383 = $252;$385 = $254;
							}
						} while(0);
						$382 = (($383) - ($$in894))|0;
						$384 = $382 >> 2;
						$386 = ($385|0)<($384|0);
						do {
							if ($386) {
								$387 = ((($17)) + 4|0);
								$388 = ((($c112)) + 16|0);
								$389 = ((($c112)) + 20|0);
								$390 = ((($c112)) + 24|0);
								$391 = ((($c112)) + 28|0);
								$392 = ((($c112)) + 32|0);
								$393 = ((($c112)) + 36|0);
								$394 = ((($c112)) + 28|0);
								$i10$0768 = $385;
								while(1) {
									$501 = (__ZNK8Textline9characterEi($this,$i10$0768)|0);
									$502 = ((($501)) + 28|0);
									$503 = ((($501)) + 32|0);
									$504 = HEAP32[$503>>2]|0;
									$505 = HEAP32[$502>>2]|0;
									$506 = ($504|0)==($505|0);
									if ($506) {
										$507 = ((($501)) + 16|0);
										$508 = ((($501)) + 20|0);
										$509 = HEAP32[$508>>2]|0;
										$510 = HEAP32[$507>>2]|0;
										$511 = (($509) - ($510))|0;
										$512 = ($511|0)==(8);
										if ($512) {
											$513 = (__ZN9Character4blobEi($501,1)|0);
											$514 = ((($513)) + 12|0);
											$515 = HEAP32[$514>>2]|0;
											$516 = ((($513)) + 4|0);
											$517 = HEAP32[$516>>2]|0;
											$518 = (($515) + 1)|0;
											$519 = (($518) - ($517))|0;
											$520 = ((($513)) + 8|0);
											$521 = HEAP32[$520>>2]|0;
											$522 = HEAP32[$513>>2]|0;
											$523 = (($521) + 1)|0;
											$524 = (($523) - ($522))|0;
											$525 = Math_imul($524, $519)|0;
											$526 = (__ZN9Character4blobEi($501,0)|0);
											$527 = ((($526)) + 12|0);
											$528 = HEAP32[$527>>2]|0;
											$529 = ((($526)) + 4|0);
											$530 = HEAP32[$529>>2]|0;
											$531 = (($528) + 1)|0;
											$532 = (($531) - ($530))|0;
											$533 = ((($526)) + 8|0);
											$534 = HEAP32[$533>>2]|0;
											$535 = HEAP32[$526>>2]|0;
											$536 = (($534) + 1)|0;
											$537 = (($536) - ($535))|0;
											$538 = ($532*5)|0;
											$539 = Math_imul($538, $537)|0;
											$540 = ($525|0)>($539|0);
											if ($540) {
												$541 = (__ZN9Character4blobEi($501,0)|0);
												$542 = ((($541)) + 12|0);
												$543 = HEAP32[$542>>2]|0;
												$544 = (__ZN9Character4blobEi($501,0)|0);
												$545 = ((($544)) + 12|0);
												$546 = HEAP32[$545>>2]|0;
												$547 = ((($544)) + 4|0);
												$548 = HEAP32[$547>>2]|0;
												$549 = (($546) + 1)|0;
												$550 = (($549) - ($548))|0;
												$551 = $550 << 1;
												$552 = (($551) + ($543))|0;
												__ZNK8Textline7charboxERK9Character($17,$this,$501);
												$553 = HEAP32[$387>>2]|0;
												$554 = ($552|0)<($553|0);
												if ($554) {
													$555 = (__Znwj(40)|0);
													__THREW__ = 0;
													$556 = (invoke_iii(201,($501|0),1)|0);
													$557 = __THREW__; __THREW__ = 0;
													$558 = $557&1;
													if ($558) {
														$$lcssa1444 = $555;
														label = 131;
														break;
													}
													__THREW__ = 0;
													invoke_vii(159,($555|0),($556|0));
													$559 = __THREW__; __THREW__ = 0;
													$560 = $559&1;
													if ($560) {
														$$lcssa1444 = $555;
														label = 131;
														break;
													}
													;HEAP32[$c112>>2]=HEAP32[$555>>2]|0;HEAP32[$c112+4>>2]=HEAP32[$555+4>>2]|0;HEAP32[$c112+8>>2]=HEAP32[$555+8>>2]|0;HEAP32[$c112+12>>2]=HEAP32[$555+12>>2]|0;
													$561 = (__Znwj(4)|0);
													$562 = $555;
													HEAP32[$388>>2] = $561;
													$563 = ((($561)) + 4|0);
													HEAP32[$390>>2] = $563;
													HEAP32[$561>>2] = $562;
													HEAP32[$389>>2] = $563;
													HEAP32[$391>>2] = 0;
													HEAP32[$392>>2] = 0;
													HEAP32[$393>>2] = 0;
													__THREW__ = 0;
													invoke_viii(196,($18|0),($this|0),($c112|0));
													$564 = __THREW__; __THREW__ = 0;
													$565 = $564&1;
													if ($565) {
														label = 132;
														break;
													}
													__THREW__ = 0;
													invoke_viii(188,($c112|0),($charset|0),($18|0));
													$566 = __THREW__; __THREW__ = 0;
													$567 = $566&1;
													if ($567) {
														label = 132;
														break;
													}
													$568 = HEAP32[$392>>2]|0;
													$569 = HEAP32[$394>>2]|0;
													$570 = ($568|0)==($569|0);
													if (!($570)) {
														__THREW__ = 0;
														(invoke_iii(197,($501|0),($c112|0))|0);
														$571 = __THREW__; __THREW__ = 0;
														$572 = $571&1;
														if ($572) {
															label = 132;
															break;
														}
													}
													__ZN9CharacterD2Ev($c112);
												}
											}
										}
									}
									$579 = (($i10$0768) + 1)|0;
									$580 = HEAP32[$28>>2]|0;
									$581 = HEAP32[$27>>2]|0;
									$582 = (($580) - ($581))|0;
									$583 = $582 >> 2;
									$584 = ($579|0)<($583|0);
									if ($584) {
										$i10$0768 = $579;
									} else {
										$$lcssa1446 = $580;$$lcssa1447 = $581;
										label = 118;
										break;
									}
								}
								if ((label|0) == 118) {
									$$pre863 = HEAP32[$25>>2]|0;
									$$in895 = $$lcssa1447;$471 = $$lcssa1446;$473 = $$pre863;
									break;
								}
								else if ((label|0) == 131) {
									$573 = ___cxa_find_matching_catch_2()|0;
									$574 = tempRet0;
									__ZdlPv($$lcssa1444);
									$$16 = $573;$$16134 = $574;
									___resumeException($$16|0);
									// unreachable;
								}
								else if ((label|0) == 132) {
									$575 = ___cxa_find_matching_catch_2()|0;
									$576 = tempRet0;
									__THREW__ = 0;
									invoke_vi(176,($c112|0));
									$577 = __THREW__; __THREW__ = 0;
									$578 = $577&1;
									if ($578) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$16 = $575;$$16134 = $576;
										___resumeException($$16|0);
										// unreachable;
									}
								}
							} else {
								$$in895 = $$in894;$471 = $383;$473 = $385;
							}
						} while(0);
						$470 = (($471) - ($$in895))|0;
						$472 = $470 >> 2;
						$474 = ($473|0)<($472|0);
						L164: do {
							if ($474) {
								$475 = ((($b117)) + 28|0);
								$476 = ((($b117)) + 32|0);
								$477 = ((($b117)) + 36|0);
								$478 = ((($b117)) + 12|0);
								$479 = ((($b117)) + 4|0);
								$480 = ((($b218)) + 28|0);
								$481 = ((($b218)) + 32|0);
								$482 = ((($b218)) + 36|0);
								$483 = ((($b218)) + 12|0);
								$484 = ((($b218)) + 4|0);
								$485 = ((($c119)) + 16|0);
								$486 = ((($c119)) + 20|0);
								$487 = ((($c119)) + 24|0);
								$488 = ((($c119)) + 24|0);
								$489 = ((($c119)) + 28|0);
								$490 = ((($c119)) + 32|0);
								$491 = ((($c119)) + 36|0);
								$492 = ((($c220)) + 16|0);
								$493 = ((($c220)) + 20|0);
								$494 = ((($c220)) + 24|0);
								$495 = ((($c220)) + 24|0);
								$496 = ((($c220)) + 28|0);
								$497 = ((($c220)) + 32|0);
								$498 = ((($c220)) + 36|0);
								$499 = ((($c220)) + 28|0);
								$500 = ((($c119)) + 28|0);
								$i13$0764 = $473;
								L166: while(1) {
									$592 = (__ZNK8Textline9characterEi($this,$i13$0764)|0);
									$593 = ((($592)) + 28|0);
									$594 = ((($592)) + 32|0);
									$595 = HEAP32[$594>>2]|0;
									$596 = HEAP32[$593>>2]|0;
									$597 = ($595|0)==($596|0);
									do {
										if ($597) {
											$598 = ((($592)) + 8|0);
											$599 = HEAP32[$598>>2]|0;
											$600 = HEAP32[$592>>2]|0;
											$601 = (($599) + 1)|0;
											$602 = (($601) - ($600))|0;
											$603 = ($602|0)>(20);
											if ($603) {
												$604 = ($602*5)|0;
												$605 = ((($592)) + 12|0);
												$606 = HEAP32[$605>>2]|0;
												$607 = ((($592)) + 4|0);
												$608 = HEAP32[$607>>2]|0;
												$609 = (($606) + 1)|0;
												$610 = (($609) - ($608))|0;
												$611 = ($610*3)|0;
												$612 = ($604|0)<($611|0);
												if ($612) {
													$i13$7 = $i13$0764;
												} else {
													$613 = ($610*5)|0;
													$614 = (__ZNK8Textline11mean_heightEv($this)|0);
													$615 = ($614*3)|0;
													$616 = ($613|0)<($615|0);
													if ($616) {
														$i13$7 = $i13$0764;
													} else {
														$617 = ((($592)) + 16|0);
														$618 = ((($592)) + 20|0);
														$619 = HEAP32[$618>>2]|0;
														$620 = HEAP32[$617>>2]|0;
														$621 = (($619) - ($620))|0;
														$622 = $621 >> 2;
														$623 = (($622) + -1)|0;
														$624 = (($622) + -2)|0;
														$625 = ($624|0)>(-1);
														if ($625) {
															$ib$0740 = $623;$k$0739 = $624;
															while(1) {
																$627 = (__ZN9Character4blobEi($592,$k$0739)|0);
																$628 = ((($627)) + 8|0);
																$629 = HEAP32[$628>>2]|0;
																$630 = HEAP32[$627>>2]|0;
																$631 = (($629) + 1)|0;
																$632 = (($631) - ($630))|0;
																$633 = (__ZN9Character4blobEi($592,$ib$0740)|0);
																$634 = ((($633)) + 8|0);
																$635 = HEAP32[$634>>2]|0;
																$636 = HEAP32[$633>>2]|0;
																$637 = (($635) + 1)|0;
																$638 = (($637) - ($636))|0;
																$639 = ($632|0)>($638|0);
																$k$0$ib$0 = $639 ? $k$0739 : $ib$0740;
																$640 = (($k$0739) + -1)|0;
																$641 = ($k$0739|0)>(0);
																if ($641) {
																	$ib$0740 = $k$0$ib$0;$k$0739 = $640;
																} else {
																	$ib$0$lcssa = $k$0$ib$0;
																	break;
																}
															}
														} else {
															$ib$0$lcssa = $623;
														}
														$626 = ($ib$0$lcssa|0)<(0);
														if ($626) {
															$i13$7 = $i13$0764;
														} else {
															$642 = (__ZN9Character4blobEi($592,$ib$0$lcssa)|0);
															$643 = ((($642)) + 8|0);
															$644 = HEAP32[$643>>2]|0;
															$645 = HEAP32[$642>>2]|0;
															$646 = (($644) + 1)|0;
															$647 = (($646) - ($645))|0;
															$648 = ($647*10)|0;
															$649 = HEAP32[$598>>2]|0;
															$650 = HEAP32[$592>>2]|0;
															$651 = (($649) + 1)|0;
															$652 = (($651) - ($650))|0;
															$653 = ($652*9)|0;
															$654 = ($648|0)<($653|0);
															if ($654) {
																$i13$7 = $i13$0764;
															} else {
																$655 = (__ZN9Character4blobEi($592,$ib$0$lcssa)|0);
																$656 = ((($655)) + 12|0);
																$657 = HEAP32[$656>>2]|0;
																$658 = HEAP32[$605>>2]|0;
																$659 = ($657|0)<($658|0);
																if ($659) {
																	$i13$7 = $i13$0764;
																} else {
																	$660 = (__ZN9Character4blobEi($592,$ib$0$lcssa)|0);
																	$661 = ((($660)) + 12|0);
																	$662 = HEAP32[$661>>2]|0;
																	$663 = ((($660)) + 4|0);
																	$664 = HEAP32[$663>>2]|0;
																	$665 = (($662) + 2)|0;
																	$666 = (($665) - ($664))|0;
																	$667 = HEAP32[$660>>2]|0;
																	$668 = ((($660)) + 8|0);
																	$669 = HEAP32[$668>>2]|0;
																	$670 = (($669) - ($667))|0;
																	$671 = ($670*30)|0;
																	$672 = (($671|0) / 100)&-1;
																	$673 = (($672) + ($667))|0;
																	$674 = ($670*70)|0;
																	$675 = (($674|0) / 100)&-1;
																	$676 = (($675) + ($667))|0;
																	$677 = ($673|0)>($676|0);
																	if ($677) {
																		$$lcssa521 = $670;$680 = $662;$682 = $664;$712 = $667;$720 = $669;$cmin$0$lcssa = $666;$colmin$0$lcssa = 0;
																	} else {
																		$684 = $664;$686 = $662;$cmin$0752 = $666;$col$0751 = $673;$colmin$0753 = 0;
																		while(1) {
																			$685 = ($684|0)>($686|0);
																			if ($685) {
																				$3037 = $686;$c16$0$lcssa = 0;
																			} else {
																				$c16$0746 = 0;$row$0745 = $684;
																				while(1) {
																					$688 = (__ZNK4Blob2idEii($660,$row$0745,$col$0751)|0);
																					$not$ = ($688|0)!=(0);
																					$689 = $not$&1;
																					$c16$0$ = (($689) + ($c16$0746))|0;
																					$690 = (($row$0745) + 1)|0;
																					$691 = HEAP32[$661>>2]|0;
																					$692 = ($row$0745|0)<($691|0);
																					if ($692) {
																						$c16$0746 = $c16$0$;$row$0745 = $690;
																					} else {
																						$3037 = $691;$c16$0$lcssa = $c16$0$;
																						break;
																					}
																				}
																			}
																			$687 = ($c16$0$lcssa|0)<($cmin$0752|0);
																			do {
																				if ($687) {
																					label = 155;
																				} else {
																					$693 = ($c16$0$lcssa|0)==($cmin$0752|0);
																					if (!($693)) {
																						$cmin$1 = $cmin$0752;$colmin$1 = $colmin$0753;
																						break;
																					}
																					$694 = HEAP32[$660>>2]|0;
																					$695 = HEAP32[$668>>2]|0;
																					$696 = (($695) + ($694))|0;
																					$697 = (($696|0) / 2)&-1;
																					$698 = ($col$0751|0)>($697|0);
																					if ($698) {
																						$cmin$1 = $cmin$0752;$colmin$1 = $colmin$0753;
																					} else {
																						label = 155;
																					}
																				}
																			} while(0);
																			if ((label|0) == 155) {
																				label = 0;
																				$cmin$1 = $c16$0$lcssa;$colmin$1 = $col$0751;
																			}
																			$699 = HEAP32[$660>>2]|0;
																			$700 = HEAP32[$668>>2]|0;
																			$701 = (($700) - ($699))|0;
																			$702 = ($701*70)|0;
																			$703 = (($702|0) / 100)&-1;
																			$704 = (($703) + ($699))|0;
																			$705 = ($col$0751|0)<($704|0);
																			if (!($705)) {
																				$$lcssa1421 = $3037;$$lcssa1422 = $699;$$lcssa1423 = $700;$$lcssa1424 = $701;$cmin$1$lcssa = $cmin$1;$colmin$1$lcssa = $colmin$1;
																				break;
																			}
																			$706 = (($col$0751) + 1)|0;
																			$$pre864 = HEAP32[$663>>2]|0;
																			$684 = $$pre864;$686 = $3037;$cmin$0752 = $cmin$1;$col$0751 = $706;$colmin$0753 = $colmin$1;
																		}
																		$$pre865 = HEAP32[$663>>2]|0;
																		$$lcssa521 = $$lcssa1424;$680 = $$lcssa1421;$682 = $$pre865;$712 = $$lcssa1422;$720 = $$lcssa1423;$cmin$0$lcssa = $cmin$1$lcssa;$colmin$0$lcssa = $colmin$1$lcssa;
																	}
																	$678 = $cmin$0$lcssa << 2;
																	$679 = (($680) + 1)|0;
																	$681 = (($679) - ($682))|0;
																	$683 = ($678|0)>($681|0);
																	if ($683) {
																		$i13$7 = $i13$0764;
																	} else {
																		$707 = ($cmin$0$lcssa*5)|0;
																		$708 = ($707|0)>($681|0);
																		if ($708) {
																			$709 = ($$lcssa521*40)|0;
																			$710 = (($709|0) / 100)&-1;
																			$711 = (($710) + ($712))|0;
																			$713 = ($colmin$0$lcssa|0)>($711|0);
																			if (!($713)) {
																				$i13$7 = $i13$0764;
																				break;
																			}
																			$714 = ($$lcssa521*60)|0;
																			$715 = (($714|0) / 100)&-1;
																			$716 = (($715) + ($712))|0;
																			$717 = ($colmin$0$lcssa|0)<($716|0);
																			$718 = ($colmin$0$lcssa|0)>($712|0);
																			$or$cond360 = $717 & $718;
																			$719 = ($colmin$0$lcssa|0)<($720|0);
																			$or$cond363 = $or$cond360 & $719;
																			if (!($or$cond363)) {
																				$i13$7 = $i13$0764;
																				break;
																			}
																		} else {
																			$$old359 = ($colmin$0$lcssa|0)>($712|0);
																			$$old362 = ($colmin$0$lcssa|0)<($720|0);
																			$or$cond365 = $$old359 & $$old362;
																			if (!($or$cond365)) {
																				$i13$7 = $i13$0764;
																				break;
																			}
																		}
																		$721 = (($colmin$0$lcssa) + -1)|0;
																		__ZN9RectangleC2Eiiii($r1,$712,$682,$721,$680);
																		$722 = (($colmin$0$lcssa) + 1)|0;
																		$723 = HEAP32[$663>>2]|0;
																		$724 = HEAP32[$668>>2]|0;
																		$725 = HEAP32[$661>>2]|0;
																		__ZN9RectangleC2Eiiii($r2,$722,$723,$724,$725);
																		__ZN6BitmapC2ERKS_RK9Rectangle($b117,$660,$r1);
																		HEAP32[$475>>2] = 0;
																		HEAP32[$476>>2] = 0;
																		HEAP32[$477>>2] = 0;
																		__THREW__ = 0;
																		(invoke_ii(202,($b117|0))|0);
																		$726 = __THREW__; __THREW__ = 0;
																		$727 = $726&1;
																		if ($727) {
																			label = 164;
																			break L166;
																		}
																		$728 = HEAP32[$478>>2]|0;
																		$729 = HEAP32[$479>>2]|0;
																		$730 = (($728) + 1)|0;
																		$731 = (($730) - ($729))|0;
																		$732 = $731 << 1;
																		$733 = HEAP32[$661>>2]|0;
																		$734 = HEAP32[$663>>2]|0;
																		$735 = (($733) + 1)|0;
																		$736 = (($735) - ($734))|0;
																		$737 = ($732|0)<($736|0);
																		if ($737) {
																			$i13$3 = $i13$0764;
																		} else {
																			__THREW__ = 0;
																			invoke_viii(203,($b218|0),($660|0),($r2|0));
																			$740 = __THREW__; __THREW__ = 0;
																			$741 = $740&1;
																			if ($741) {
																				label = 164;
																				break L166;
																			}
																			HEAP32[$480>>2] = 0;
																			HEAP32[$481>>2] = 0;
																			HEAP32[$482>>2] = 0;
																			__THREW__ = 0;
																			(invoke_ii(202,($b218|0))|0);
																			$742 = __THREW__; __THREW__ = 0;
																			$743 = $742&1;
																			if ($743) {
																				label = 168;
																				break L166;
																			}
																			$744 = HEAP32[$483>>2]|0;
																			$745 = HEAP32[$484>>2]|0;
																			$746 = (($744) + 1)|0;
																			$747 = (($746) - ($745))|0;
																			$748 = $747 << 1;
																			$749 = HEAP32[$661>>2]|0;
																			$750 = HEAP32[$663>>2]|0;
																			$751 = (($749) + 1)|0;
																			$752 = (($751) - ($750))|0;
																			$753 = ($748|0)<($752|0);
																			if ($753) {
																				$i13$2 = $i13$0764;
																			} else {
																				__THREW__ = 0;
																				invoke_vi(91,($b117|0));
																				$756 = __THREW__; __THREW__ = 0;
																				$757 = $756&1;
																				if ($757) {
																					label = 168;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_vi(91,($b218|0));
																				$758 = __THREW__; __THREW__ = 0;
																				$759 = $758&1;
																				if ($759) {
																					label = 168;
																					break L166;
																				}
																				__THREW__ = 0;
																				$760 = (invoke_ii(29,40)|0);
																				$761 = __THREW__; __THREW__ = 0;
																				$762 = $761&1;
																				if ($762) {
																					label = 168;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_vii(159,($760|0),($b117|0));
																				$763 = __THREW__; __THREW__ = 0;
																				$764 = $763&1;
																				if ($764) {
																					$$lcssa1427 = $760;
																					label = 179;
																					break L166;
																				}
																				;HEAP32[$c119>>2]=HEAP32[$760>>2]|0;HEAP32[$c119+4>>2]=HEAP32[$760+4>>2]|0;HEAP32[$c119+8>>2]=HEAP32[$760+8>>2]|0;HEAP32[$c119+12>>2]=HEAP32[$760+12>>2]|0;
																				HEAP32[$485>>2] = 0;
																				HEAP32[$486>>2] = 0;
																				HEAP32[$487>>2] = 0;
																				__THREW__ = 0;
																				$765 = (invoke_ii(29,4)|0);
																				$766 = __THREW__; __THREW__ = 0;
																				$767 = $766&1;
																				if ($767) {
																					label = 168;
																					break L166;
																				}
																				$768 = $760;
																				HEAP32[$485>>2] = $765;
																				$769 = ((($765)) + 4|0);
																				HEAP32[$488>>2] = $769;
																				HEAP32[$765>>2] = $768;
																				HEAP32[$486>>2] = $769;
																				HEAP32[$489>>2] = 0;
																				HEAP32[$490>>2] = 0;
																				HEAP32[$491>>2] = 0;
																				__THREW__ = 0;
																				$770 = (invoke_ii(29,40)|0);
																				$771 = __THREW__; __THREW__ = 0;
																				$772 = $771&1;
																				if ($772) {
																					label = 180;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_vii(159,($770|0),($b218|0));
																				$773 = __THREW__; __THREW__ = 0;
																				$774 = $773&1;
																				if ($774) {
																					$$lcssa1435 = $770;
																					label = 181;
																					break L166;
																				}
																				;HEAP32[$c220>>2]=HEAP32[$770>>2]|0;HEAP32[$c220+4>>2]=HEAP32[$770+4>>2]|0;HEAP32[$c220+8>>2]=HEAP32[$770+8>>2]|0;HEAP32[$c220+12>>2]=HEAP32[$770+12>>2]|0;
																				HEAP32[$492>>2] = 0;
																				HEAP32[$493>>2] = 0;
																				HEAP32[$494>>2] = 0;
																				__THREW__ = 0;
																				$775 = (invoke_ii(29,4)|0);
																				$776 = __THREW__; __THREW__ = 0;
																				$777 = $776&1;
																				if ($777) {
																					label = 180;
																					break L166;
																				}
																				$778 = $770;
																				HEAP32[$492>>2] = $775;
																				$779 = ((($775)) + 4|0);
																				HEAP32[$495>>2] = $779;
																				HEAP32[$775>>2] = $778;
																				HEAP32[$493>>2] = $779;
																				HEAP32[$496>>2] = 0;
																				HEAP32[$497>>2] = 0;
																				HEAP32[$498>>2] = 0;
																				$780 = HEAP32[$618>>2]|0;
																				$781 = HEAP32[$617>>2]|0;
																				$782 = (($780) - ($781))|0;
																				$783 = ($782|0)>(0);
																				if ($783) {
																					$j$0761 = 0;
																					while(1) {
																						$796 = ($j$0761|0)==($ib$0$lcssa|0);
																						do {
																							if (!($796)) {
																								__THREW__ = 0;
																								$797 = (invoke_iii(201,($592|0),($j$0761|0))|0);
																								$798 = __THREW__; __THREW__ = 0;
																								$799 = $798&1;
																								if ($799) {
																									label = 182;
																									break L166;
																								}
																								__THREW__ = 0;
																								$800 = (invoke_iii(105,($c119|0),($797|0))|0);
																								$801 = __THREW__; __THREW__ = 0;
																								$802 = $801&1;
																								if ($802) {
																									label = 182;
																									break L166;
																								}
																								if ($800) {
																									__THREW__ = 0;
																									$803 = (invoke_ii(29,40)|0);
																									$804 = __THREW__; __THREW__ = 0;
																									$805 = $804&1;
																									if ($805) {
																										label = 182;
																										break L166;
																									}
																									__THREW__ = 0;
																									invoke_vii(159,($803|0),($797|0));
																									$806 = __THREW__; __THREW__ = 0;
																									$807 = $806&1;
																									if ($807) {
																										$$lcssa1426 = $803;
																										label = 192;
																										break L166;
																									}
																									__THREW__ = 0;
																									invoke_vii(199,($c119|0),($803|0));
																									$808 = __THREW__; __THREW__ = 0;
																									$809 = $808&1;
																									if ($809) {
																										label = 182;
																										break L166;
																									} else {
																										break;
																									}
																								}
																								__THREW__ = 0;
																								$812 = (invoke_iii(105,($c220|0),($797|0))|0);
																								$813 = __THREW__; __THREW__ = 0;
																								$814 = $813&1;
																								if ($814) {
																									label = 182;
																									break L166;
																								}
																								if (!($812)) {
																									break;
																								}
																								__THREW__ = 0;
																								$815 = (invoke_ii(29,40)|0);
																								$816 = __THREW__; __THREW__ = 0;
																								$817 = $816&1;
																								if ($817) {
																									label = 182;
																									break L166;
																								}
																								__THREW__ = 0;
																								invoke_vii(159,($815|0),($797|0));
																								$818 = __THREW__; __THREW__ = 0;
																								$819 = $818&1;
																								if ($819) {
																									$$lcssa1425 = $815;
																									label = 198;
																									break L166;
																								}
																								__THREW__ = 0;
																								invoke_vii(199,($c220|0),($815|0));
																								$820 = __THREW__; __THREW__ = 0;
																								$821 = $820&1;
																								if ($821) {
																									label = 182;
																									break L166;
																								}
																							}
																						} while(0);
																						$824 = (($j$0761) + 1)|0;
																						$825 = HEAP32[$618>>2]|0;
																						$826 = HEAP32[$617>>2]|0;
																						$827 = (($825) - ($826))|0;
																						$828 = $827 >> 2;
																						$829 = ($824|0)<($828|0);
																						if ($829) {
																							$j$0761 = $824;
																						} else {
																							break;
																						}
																					}
																				}
																				__THREW__ = 0;
																				invoke_viii(196,($19|0),($this|0),($c119|0));
																				$784 = __THREW__; __THREW__ = 0;
																				$785 = $784&1;
																				if ($785) {
																					label = 183;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_viii(188,($c119|0),($charset|0),($19|0));
																				$830 = __THREW__; __THREW__ = 0;
																				$831 = $830&1;
																				if ($831) {
																					label = 183;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_viii(196,($20|0),($this|0),($c220|0));
																				$832 = __THREW__; __THREW__ = 0;
																				$833 = $832&1;
																				if ($833) {
																					label = 183;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_viii(188,($c220|0),($charset|0),($20|0));
																				$834 = __THREW__; __THREW__ = 0;
																				$835 = $834&1;
																				if ($835) {
																					label = 183;
																					break L166;
																				}
																				$836 = HEAP32[$497>>2]|0;
																				$837 = HEAP32[$499>>2]|0;
																				$838 = ($836|0)==($837|0);
																				if ($838) {
																					$839 = HEAP32[$490>>2]|0;
																					$840 = HEAP32[$500>>2]|0;
																					$841 = ($839|0)==($840|0);
																					$850 = $841;$851 = 0;
																					label = 207;
																				} else {
																					__THREW__ = 0;
																					$842 = (invoke_iii(189,($c220|0),0)|0);
																					$843 = __THREW__; __THREW__ = 0;
																					$844 = $843&1;
																					if ($844) {
																						label = 183;
																						break L166;
																					}
																					$845 = HEAP32[$842>>2]|0;
																					$846 = ($845|0)!=(39);
																					$847 = HEAP32[$490>>2]|0;
																					$848 = HEAP32[$500>>2]|0;
																					$849 = ($847|0)==($848|0);
																					$$not = $846 ^ 1;
																					$brmerge = $849 | $$not;
																					if ($brmerge) {
																						$850 = $849;$851 = $846;
																						label = 207;
																					} else {
																						label = 209;
																					}
																				}
																				do {
																					if ((label|0) == 207) {
																						label = 0;
																						$$not189 = $850 ^ 1;
																						$brmerge190 = $851 | $$not189;
																						if (!($brmerge190)) {
																							$i13$1 = $i13$0764;
																							break;
																						}
																						$852 = HEAP32[$598>>2]|0;
																						$853 = HEAP32[$592>>2]|0;
																						$854 = (($852) + 1)|0;
																						$855 = (($854) - ($853))|0;
																						$856 = HEAP32[$605>>2]|0;
																						$857 = HEAP32[$607>>2]|0;
																						$858 = (($856) + 1)|0;
																						$859 = (($858) - ($857))|0;
																						$860 = ($855|0)>($859|0);
																						if ($860) {
																							label = 209;
																						} else {
																							$i13$1 = $i13$0764;
																						}
																					}
																				} while(0);
																				do {
																					if ((label|0) == 209) {
																						label = 0;
																						__THREW__ = 0;
																						(invoke_iii(197,($592|0),($c119|0))|0);
																						$861 = __THREW__; __THREW__ = 0;
																						$862 = $861&1;
																						if ($862) {
																							label = 183;
																							break L166;
																						}
																						__THREW__ = 0;
																						$863 = (invoke_ii(29,40)|0);
																						$864 = __THREW__; __THREW__ = 0;
																						$865 = $864&1;
																						if ($865) {
																							label = 183;
																							break L166;
																						}
																						__THREW__ = 0;
																						invoke_vii(200,($863|0),($c220|0));
																						$866 = __THREW__; __THREW__ = 0;
																						$867 = $866&1;
																						if ($867) {
																							$$lcssa1441 = $863;
																							label = 215;
																							break L166;
																						}
																						__THREW__ = 0;
																						(invoke_iiii(103,($this|0),($863|0),0)|0);
																						$868 = __THREW__; __THREW__ = 0;
																						$869 = $868&1;
																						if ($869) {
																							label = 183;
																							break L166;
																						}
																						$870 = HEAP32[$490>>2]|0;
																						$871 = HEAP32[$500>>2]|0;
																						$872 = ($870|0)==($871|0);
																						if ($872) {
																							$873 = (($i13$0764) + -1)|0;
																							$i13$1 = $873;
																							break;
																						} else {
																							$876 = HEAP32[$497>>2]|0;
																							$877 = HEAP32[$499>>2]|0;
																							$not$375 = ($876|0)!=($877|0);
																							$878 = $not$375&1;
																							$i13$0$ = (($878) + ($i13$0764))|0;
																							$i13$1 = $i13$0$;
																							break;
																						}
																					}
																				} while(0);
																				__THREW__ = 0;
																				invoke_vi(176,($c220|0));
																				$879 = __THREW__; __THREW__ = 0;
																				$880 = $879&1;
																				if ($880) {
																					label = 180;
																					break L166;
																				}
																				__THREW__ = 0;
																				invoke_vi(176,($c119|0));
																				$881 = __THREW__; __THREW__ = 0;
																				$882 = $881&1;
																				if ($882) {
																					label = 168;
																					break L166;
																				}
																				$i13$2 = $i13$1;
																			}
																			__THREW__ = 0;
																			invoke_vi(72,($b218|0));
																			$883 = __THREW__; __THREW__ = 0;
																			$884 = $883&1;
																			if ($884) {
																				label = 164;
																				break L166;
																			}
																			$i13$3 = $i13$2;
																		}
																		__ZN4BlobD2Ev($b117);
																		$i13$7 = $i13$3;
																	}
																}
															}
														}
													}
												}
											} else {
												$i13$7 = $i13$0764;
											}
										} else {
											$i13$7 = $i13$0764;
										}
									} while(0);
									$893 = (($i13$7) + 1)|0;
									$894 = HEAP32[$28>>2]|0;
									$895 = HEAP32[$27>>2]|0;
									$896 = (($894) - ($895))|0;
									$897 = $896 >> 2;
									$898 = ($893|0)<($897|0);
									if ($898) {
										$i13$0764 = $893;
									} else {
										$$lcssa1442 = $894;$$lcssa1443 = $895;
										label = 135;
										break;
									}
								}
								switch (label|0) {
									case 135: {
										$$pre867 = HEAP32[$25>>2]|0;
										$$in896 = $$lcssa1443;$586 = $$lcssa1442;$588 = $$pre867;
										break L164;
										break;
									}
									case 164: {
										$738 = ___cxa_find_matching_catch_2()|0;
										$739 = tempRet0;
										$$7 = $738;$$7125 = $739;
										break;
									}
									case 168: {
										$754 = ___cxa_find_matching_catch_2()|0;
										$755 = tempRet0;
										$$6 = $754;$$6124 = $755;
										label = 225;
										break;
									}
									case 179: {
										$786 = ___cxa_find_matching_catch_2()|0;
										$787 = tempRet0;
										__ZdlPv($$lcssa1427);
										$$6 = $786;$$6124 = $787;
										label = 225;
										break;
									}
									case 180: {
										$788 = ___cxa_find_matching_catch_2()|0;
										$789 = tempRet0;
										$$5 = $788;$$5123 = $789;
										label = 224;
										break;
									}
									case 181: {
										$790 = ___cxa_find_matching_catch_2()|0;
										$791 = tempRet0;
										__ZdlPv($$lcssa1435);
										$$5 = $790;$$5123 = $791;
										label = 224;
										break;
									}
									case 182: {
										$792 = ___cxa_find_matching_catch_2()|0;
										$793 = tempRet0;
										$lpad$phi498$index = $792;$lpad$phi498$index2 = $793;
										label = 184;
										break;
									}
									case 183: {
										$794 = ___cxa_find_matching_catch_2()|0;
										$795 = tempRet0;
										$lpad$phi498$index = $794;$lpad$phi498$index2 = $795;
										label = 184;
										break;
									}
									case 192: {
										$810 = ___cxa_find_matching_catch_2()|0;
										$811 = tempRet0;
										__ZdlPv($$lcssa1426);
										$$4 = $810;$$4122 = $811;
										label = 223;
										break;
									}
									case 198: {
										$822 = ___cxa_find_matching_catch_2()|0;
										$823 = tempRet0;
										__ZdlPv($$lcssa1425);
										$$4 = $822;$$4122 = $823;
										label = 223;
										break;
									}
									case 215: {
										$874 = ___cxa_find_matching_catch_2()|0;
										$875 = tempRet0;
										__ZdlPv($$lcssa1441);
										$$4 = $874;$$4122 = $875;
										label = 223;
										break;
									}
								}
								if ((label|0) == 184) {
									$$4 = $lpad$phi498$index;$$4122 = $lpad$phi498$index2;
									label = 223;
								}
								if ((label|0) == 223) {
									__THREW__ = 0;
									invoke_vi(176,($c220|0));
									$885 = __THREW__; __THREW__ = 0;
									$886 = $885&1;
									if ($886) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$5 = $$4;$$5123 = $$4122;
										label = 224;
									}
								}
								if ((label|0) == 224) {
									__THREW__ = 0;
									invoke_vi(176,($c119|0));
									$887 = __THREW__; __THREW__ = 0;
									$888 = $887&1;
									if ($888) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$6 = $$5;$$6124 = $$5123;
										label = 225;
									}
								}
								if ((label|0) == 225) {
									__THREW__ = 0;
									invoke_vi(72,($b218|0));
									$889 = __THREW__; __THREW__ = 0;
									$890 = $889&1;
									if ($890) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$7 = $$6;$$7125 = $$6124;
									}
								}
								__THREW__ = 0;
								invoke_vi(72,($b117|0));
								$891 = __THREW__; __THREW__ = 0;
								$892 = $891&1;
								if ($892) {
									$3035 = ___cxa_find_matching_catch_3(0|0)|0;
									$3036 = tempRet0;
									___clang_call_terminate($3035);
									// unreachable;
								} else {
									$$16 = $$7;$$16134 = $$7125;
									___resumeException($$16|0);
									// unreachable;
								}
							} else {
								$$in896 = $$in895;$586 = $471;$588 = $473;
							}
						} while(0);
						$585 = (($586) - ($$in896))|0;
						$587 = $585 >> 2;
						$589 = ($588|0)<($587|0);
						do {
							if ($589) {
								$590 = ((($c124)) + 28|0);
								$591 = ((($c124)) + 32|0);
								$i22$0735 = $588;
								L292: while(1) {
									$924 = (__ZNK8Textline9characterEi($this,$i22$0735)|0);
									$925 = ((($924)) + 28|0);
									$926 = ((($924)) + 32|0);
									$927 = HEAP32[$926>>2]|0;
									$928 = HEAP32[$925>>2]|0;
									$929 = ($927|0)==($928|0);
									L294: do {
										if ($929) {
											$930 = ((($924)) + 16|0);
											$931 = ((($924)) + 20|0);
											$932 = HEAP32[$931>>2]|0;
											$933 = HEAP32[$930>>2]|0;
											$934 = (($932) - ($933))|0;
											$935 = ($934|0)==(4);
											if ($935) {
												$936 = (__ZN9Character4blobEi($924,0)|0);
												$937 = ((($936)) + 28|0);
												$938 = ((($936)) + 32|0);
												$939 = HEAP32[$938>>2]|0;
												$940 = HEAP32[$937>>2]|0;
												$941 = ($939|0)==($940|0);
												if (!($941)) {
													__ZN9CharacterC2ERKS_($c124,$924);
													__THREW__ = 0;
													$942 = (invoke_iii(201,($c124|0),0)|0);
													$943 = __THREW__; __THREW__ = 0;
													$944 = $943&1;
													if ($944) {
														label = 240;
														break L292;
													}
													$945 = ((($942)) + 28|0);
													$946 = ((($942)) + 32|0);
													$947 = HEAP32[$946>>2]|0;
													$948 = HEAP32[$945>>2]|0;
													$949 = (($947) - ($948))|0;
													$950 = ($949|0)>(0);
													if ($950) {
														$951 = $949 >> 2;
														$952 = ((($942)) + 12|0);
														$953 = ((($942)) + 4|0);
														$954 = ((($942)) + 8|0);
														$j26$0731$in = $951;
														while(1) {
															$j26$0731 = (($j26$0731$in) + -1)|0;
															__THREW__ = 0;
															$964 = (invoke_iii(195,($942|0),($j26$0731|0))|0);
															$965 = __THREW__; __THREW__ = 0;
															$966 = $965&1;
															if ($966) {
																label = 239;
																break L292;
															}
															$967 = ((($964)) + 12|0);
															$968 = HEAP32[$967>>2]|0;
															$969 = ((($964)) + 4|0);
															$970 = HEAP32[$969>>2]|0;
															$971 = (($968) + 1)|0;
															$972 = (($971) - ($970))|0;
															$973 = ((($964)) + 8|0);
															$974 = HEAP32[$973>>2]|0;
															$975 = HEAP32[$964>>2]|0;
															$976 = (($974) + 1)|0;
															$977 = (($976) - ($975))|0;
															$978 = HEAP32[$952>>2]|0;
															$979 = HEAP32[$953>>2]|0;
															$980 = (($978) + 1)|0;
															$981 = (($980) - ($979))|0;
															$982 = HEAP32[$954>>2]|0;
															$983 = HEAP32[$942>>2]|0;
															$984 = (($982) + 1)|0;
															$985 = (($984) - ($983))|0;
															$986 = Math_imul($985, $981)|0;
															$987 = $972 << 6;
															$988 = Math_imul($987, $977)|0;
															$989 = ($988|0)>($986|0);
															if ($989) {
																__THREW__ = 0;
																$990 = (invoke_iii(195,($942|0),($j26$0731|0))|0);
																$991 = __THREW__; __THREW__ = 0;
																$992 = $991&1;
																if ($992) {
																	label = 239;
																	break L292;
																}
																$993 = ((($990)) + 12|0);
																$994 = HEAP32[$993>>2]|0;
																$995 = ((($990)) + 4|0);
																$996 = HEAP32[$995>>2]|0;
																$997 = (($994) + 1)|0;
																$998 = (($997) - ($996))|0;
																$999 = $998 << 4;
																$1000 = HEAP32[$952>>2]|0;
																$1001 = HEAP32[$953>>2]|0;
																$1002 = (($1000) + 1)|0;
																$1003 = (($1002) - ($1001))|0;
																$1004 = ($999|0)>($1003|0);
																if (!($1004)) {
																	label = 247;
																}
															} else {
																label = 247;
															}
															if ((label|0) == 247) {
																label = 0;
																__THREW__ = 0;
																invoke_vii(204,($942|0),($j26$0731|0));
																$1006 = __THREW__; __THREW__ = 0;
																$1007 = $1006&1;
																if ($1007) {
																	label = 239;
																	break L292;
																}
															}
															$1005 = ($j26$0731$in|0)>(1);
															if ($1005) {
																$j26$0731$in = $j26$0731;
															} else {
																break;
															}
														}
														$$pre868 = HEAP32[$946>>2]|0;
														$$pre869 = HEAP32[$945>>2]|0;
														$1009 = $$pre869;$1010 = $$pre868;
													} else {
														$1009 = $948;$1010 = $947;
													}
													__THREW__ = 0;
													$955 = (invoke_iii(201,($924|0),0)|0);
													$956 = __THREW__; __THREW__ = 0;
													$957 = $956&1;
													if ($957) {
														label = 240;
														break L292;
													}
													$1008 = (($1010) - ($1009))|0;
													$1011 = ((($955)) + 28|0);
													$1012 = ((($955)) + 32|0);
													$1013 = HEAP32[$1012>>2]|0;
													$1014 = HEAP32[$1011>>2]|0;
													$1015 = (($1013) - ($1014))|0;
													$1016 = ($1008|0)<($1015|0);
													do {
														if ($1016) {
															__THREW__ = 0;
															invoke_viii(196,($21|0),($this|0),($c124|0));
															$1017 = __THREW__; __THREW__ = 0;
															$1018 = $1017&1;
															if ($1018) {
																label = 240;
																break L292;
															}
															__THREW__ = 0;
															invoke_viii(188,($c124|0),($charset|0),($21|0));
															$1019 = __THREW__; __THREW__ = 0;
															$1020 = $1019&1;
															if ($1020) {
																label = 240;
																break L292;
															}
															$1021 = HEAP32[$591>>2]|0;
															$1022 = HEAP32[$590>>2]|0;
															$1023 = ($1021|0)==($1022|0);
															if ($1023) {
																break;
															}
															__THREW__ = 0;
															(invoke_iii(197,($924|0),($c124|0))|0);
															$1024 = __THREW__; __THREW__ = 0;
															$1025 = $1024&1;
															if ($1025) {
																label = 240;
																break L292;
															}
															__ZN9CharacterD2Ev($c124);
															break L294;
														}
													} while(0);
													__ZN9CharacterD2Ev($c124);
												}
											}
										}
									} while(0);
									$1026 = (($i22$0735) + 1)|0;
									$1027 = HEAP32[$28>>2]|0;
									$1028 = HEAP32[$27>>2]|0;
									$1029 = (($1027) - ($1028))|0;
									$1030 = $1029 >> 2;
									$1031 = ($1026|0)<($1030|0);
									if ($1031) {
										$i22$0735 = $1026;
									} else {
										$$lcssa1418 = $1027;$$lcssa1419 = $1028;
										label = 228;
										break;
									}
								}
								if ((label|0) == 228) {
									$$pre870 = HEAP32[$25>>2]|0;
									$$in897 = $$lcssa1419;$900 = $$lcssa1418;$902 = $$pre870;
									break;
								}
								else if ((label|0) == 239) {
									$958 = ___cxa_find_matching_catch_2()|0;
									$959 = tempRet0;
									$lpad$phi492$index = $958;$lpad$phi492$index7 = $959;
								}
								else if ((label|0) == 240) {
									$960 = ___cxa_find_matching_catch_2()|0;
									$961 = tempRet0;
									$lpad$phi492$index = $960;$lpad$phi492$index7 = $961;
								}
								__THREW__ = 0;
								invoke_vi(176,($c124|0));
								$962 = __THREW__; __THREW__ = 0;
								$963 = $962&1;
								if ($963) {
									$3035 = ___cxa_find_matching_catch_3(0|0)|0;
									$3036 = tempRet0;
									___clang_call_terminate($3035);
									// unreachable;
								} else {
									$$16 = $lpad$phi492$index;$$16134 = $lpad$phi492$index7;
									___resumeException($$16|0);
									// unreachable;
								}
							} else {
								$$in897 = $$in896;$900 = $586;$902 = $588;
							}
						} while(0);
						$899 = (($900) - ($$in897))|0;
						$901 = $899 >> 2;
						$903 = ($902|0)<($901|0);
						L330: do {
							if ($903) {
								$904 = ((($c30)) + 28|0);
								$905 = ((($c30)) + 32|0);
								$906 = ((($c30)) + 16|0);
								$907 = ((($c30)) + 20|0);
								$908 = ((($b31)) + 4|0);
								$909 = ((($b31)) + 12|0);
								$910 = ((($b132)) + 28|0);
								$911 = ((($b132)) + 32|0);
								$912 = ((($b132)) + 36|0);
								$913 = ((($c133)) + 16|0);
								$914 = ((($c133)) + 20|0);
								$915 = ((($c133)) + 24|0);
								$916 = ((($c133)) + 24|0);
								$917 = ((($c133)) + 28|0);
								$918 = ((($c133)) + 32|0);
								$919 = ((($c133)) + 36|0);
								$920 = ((($0)) + 4|0);
								$921 = ((($c133)) + 36|0);
								$922 = ((($c133)) + 28|0);
								$923 = ((($re)) + 8|0);
								$3038 = $$in897;$3039 = $900;$i29$0$ph729 = $902;
								L332: while(1) {
									$1038 = $3038;$3040 = $3039;
									while(1) {
										$1039 = $1038;
										$1040 = (($1039) + ($i29$0$ph729<<2)|0);
										$1041 = HEAP32[$1040>>2]|0;
										$1042 = ((($1041)) + 28|0);
										$1043 = ((($1041)) + 32|0);
										$1044 = HEAP32[$1043>>2]|0;
										$1045 = HEAP32[$1042>>2]|0;
										$1046 = ($1044|0)==($1045|0);
										if ($1046) {
											$1052 = $1038;$1053 = $3040;
											break;
										}
										$1047 = (__ZNK9Character5guessEi($1041,0)|0);
										$1048 = HEAP32[$1047>>2]|0;
										$1049 = ($1048|0)>(-1);
										if ($1049) {
											label = 259;
											break;
										}
										$1056 = HEAP32[$27>>2]|0;
										$1057 = (($1056) + ($i29$0$ph729<<2)|0);
										$1058 = HEAP32[$1057>>2]|0;
										__ZN9CharacterC2ERKS_($c30,$1058);
										__THREW__ = 0;
										$1059 = (invoke_iii(189,($c30|0),0)|0);
										$1060 = __THREW__; __THREW__ = 0;
										$1061 = $1060&1;
										if ($1061) {
											label = 270;
											break L332;
										}
										$1062 = HEAP32[$1059>>2]|0;
										$1063 = $1062 ^ -1;
										__THREW__ = 0;
										invoke_vii(121,($this|0),($i29$0$ph729|0));
										$1064 = __THREW__; __THREW__ = 0;
										$1065 = $1064&1;
										if ($1065) {
											label = 270;
											break L332;
										}
										$1066 = HEAP32[$905>>2]|0;
										$1067 = HEAP32[$904>>2]|0;
										$1068 = (($1066) - ($1067))|0;
										$1069 = ($1068|0)>(16);
										if ($1069) {
											$1070 = HEAP32[$907>>2]|0;
											$1071 = HEAP32[$906>>2]|0;
											$1072 = (($1070) - ($1071))|0;
											$1073 = $1072 >> 2;
											$1074 = ($1072|0)>(0);
											$1075 = ($1073|0)>($1063|0);
											$or$cond367 = $1074 & $1075;
											if ($or$cond367) {
												__THREW__ = 0;
												$1076 = (invoke_iii(189,($c30|0),0)|0);
												$1077 = __THREW__; __THREW__ = 0;
												$1078 = $1077&1;
												if ($1078) {
													label = 270;
													break L332;
												}
												$1079 = HEAP32[$905>>2]|0;
												$1080 = HEAP32[$904>>2]|0;
												$1081 = (($1079) - ($1080))|0;
												$1082 = ($1081|0)>(8);
												if ($1082) {
													$1083 = ((($1076)) + 4|0);
													$1084 = HEAP32[$1083>>2]|0;
													$g$0723 = 1;$left$0724 = $1084;
													while(1) {
														__THREW__ = 0;
														$1089 = (invoke_iii(205,($c30|0),($1063|0))|0);
														$1090 = __THREW__; __THREW__ = 0;
														$1091 = $1090&1;
														if ($1091) {
															label = 269;
															break L332;
														}
														__THREW__ = 0;
														invoke_vii(159,($b31|0),($1089|0));
														$1092 = __THREW__; __THREW__ = 0;
														$1093 = $1092&1;
														if ($1093) {
															label = 269;
															break L332;
														}
														$1094 = HEAP32[$908>>2]|0;
														__THREW__ = 0;
														$1095 = (invoke_iii(189,($c30|0),($g$0723|0))|0);
														$1096 = __THREW__; __THREW__ = 0;
														$1097 = $1096&1;
														if ($1097) {
															label = 286;
															break L332;
														}
														$1098 = ((($1095)) + 4|0);
														$1099 = HEAP32[$1098>>2]|0;
														$1100 = HEAP32[$909>>2]|0;
														__THREW__ = 0;
														invoke_viiiii(183,($re|0),($left$0724|0),($1094|0),($1099|0),($1100|0));
														$1101 = __THREW__; __THREW__ = 0;
														$1102 = $1101&1;
														if ($1102) {
															label = 286;
															break L332;
														}
														__THREW__ = 0;
														invoke_vii(206,($b31|0),($re|0));
														$1103 = __THREW__; __THREW__ = 0;
														$1104 = $1103&1;
														if ($1104) {
															label = 286;
															break L332;
														}
														__THREW__ = 0;
														invoke_viii(203,($b132|0),($b31|0),($re|0));
														$1105 = __THREW__; __THREW__ = 0;
														$1106 = $1105&1;
														if ($1106) {
															label = 286;
															break L332;
														}
														HEAP32[$910>>2] = 0;
														HEAP32[$911>>2] = 0;
														HEAP32[$912>>2] = 0;
														__THREW__ = 0;
														(invoke_ii(202,($b132|0))|0);
														$1107 = __THREW__; __THREW__ = 0;
														$1108 = $1107&1;
														if ($1108) {
															label = 287;
															break L332;
														}
														__THREW__ = 0;
														(invoke_ii(207,($b132|0))|0);
														$1109 = __THREW__; __THREW__ = 0;
														$1110 = $1109&1;
														if ($1110) {
															label = 287;
															break L332;
														}
														__THREW__ = 0;
														invoke_vi(91,($b132|0));
														$1111 = __THREW__; __THREW__ = 0;
														$1112 = $1111&1;
														if ($1112) {
															label = 287;
															break L332;
														}
														__THREW__ = 0;
														$1113 = (invoke_ii(29,40)|0);
														$1114 = __THREW__; __THREW__ = 0;
														$1115 = $1114&1;
														if ($1115) {
															label = 287;
															break L332;
														}
														__THREW__ = 0;
														invoke_vii(159,($1113|0),($b132|0));
														$1116 = __THREW__; __THREW__ = 0;
														$1117 = $1116&1;
														if ($1117) {
															$$lcssa1382 = $1113;
															label = 288;
															break L332;
														}
														;HEAP32[$c133>>2]=HEAP32[$1113>>2]|0;HEAP32[$c133+4>>2]=HEAP32[$1113+4>>2]|0;HEAP32[$c133+8>>2]=HEAP32[$1113+8>>2]|0;HEAP32[$c133+12>>2]=HEAP32[$1113+12>>2]|0;
														HEAP32[$913>>2] = 0;
														HEAP32[$914>>2] = 0;
														HEAP32[$915>>2] = 0;
														__THREW__ = 0;
														$1118 = (invoke_ii(29,4)|0);
														$1119 = __THREW__; __THREW__ = 0;
														$1120 = $1119&1;
														if ($1120) {
															label = 287;
															break L332;
														}
														$1121 = $1113;
														HEAP32[$913>>2] = $1118;
														$1122 = ((($1118)) + 4|0);
														HEAP32[$916>>2] = $1122;
														HEAP32[$1118>>2] = $1121;
														HEAP32[$914>>2] = $1122;
														HEAP32[$917>>2] = 0;
														HEAP32[$918>>2] = 0;
														HEAP32[$919>>2] = 0;
														$1123 = HEAP32[$907>>2]|0;
														$1124 = HEAP32[$906>>2]|0;
														$1125 = (($1123) - ($1124))|0;
														$1126 = ($1125|0)>(0);
														if ($1126) {
															$k34$0720 = 0;
															while(1) {
																$1140 = ($k34$0720|0)==($1063|0);
																do {
																	if (!($1140)) {
																		__THREW__ = 0;
																		$1141 = (invoke_iii(205,($c30|0),($k34$0720|0))|0);
																		$1142 = __THREW__; __THREW__ = 0;
																		$1143 = $1142&1;
																		if ($1143) {
																			label = 289;
																			break L332;
																		}
																		__THREW__ = 0;
																		$1144 = (invoke_iii(94,($1141|0),($re|0))|0);
																		$1145 = __THREW__; __THREW__ = 0;
																		$1146 = $1145&1;
																		if ($1146) {
																			label = 289;
																			break L332;
																		}
																		if ($1144) {
																			break;
																		}
																		__THREW__ = 0;
																		$1147 = (invoke_iii(205,($c30|0),($k34$0720|0))|0);
																		$1148 = __THREW__; __THREW__ = 0;
																		$1149 = $1148&1;
																		if ($1149) {
																			label = 289;
																			break L332;
																		}
																		__THREW__ = 0;
																		$1150 = (invoke_iii(105,($re|0),($1147|0))|0);
																		$1151 = __THREW__; __THREW__ = 0;
																		$1152 = $1151&1;
																		if ($1152) {
																			label = 289;
																			break L332;
																		}
																		if (!($1150)) {
																			break;
																		}
																		__THREW__ = 0;
																		$1153 = (invoke_ii(29,40)|0);
																		$1154 = __THREW__; __THREW__ = 0;
																		$1155 = $1154&1;
																		if ($1155) {
																			label = 289;
																			break L332;
																		}
																		__THREW__ = 0;
																		$1156 = (invoke_iii(205,($c30|0),($k34$0720|0))|0);
																		$1157 = __THREW__; __THREW__ = 0;
																		$1158 = $1157&1;
																		if ($1158) {
																			$$lcssa1381 = $1153;
																			label = 303;
																			break L332;
																		}
																		__THREW__ = 0;
																		invoke_vii(159,($1153|0),($1156|0));
																		$1159 = __THREW__; __THREW__ = 0;
																		$1160 = $1159&1;
																		if ($1160) {
																			$$lcssa1381 = $1153;
																			label = 303;
																			break L332;
																		}
																		__THREW__ = 0;
																		invoke_vii(199,($c133|0),($1153|0));
																		$1161 = __THREW__; __THREW__ = 0;
																		$1162 = $1161&1;
																		if ($1162) {
																			label = 289;
																			break L332;
																		}
																	}
																} while(0);
																$1165 = (($k34$0720) + 1)|0;
																$1166 = HEAP32[$907>>2]|0;
																$1167 = HEAP32[$906>>2]|0;
																$1168 = (($1166) - ($1167))|0;
																$1169 = $1168 >> 2;
																$1170 = ($1165|0)<($1169|0);
																if ($1170) {
																	$k34$0720 = $1165;
																} else {
																	break;
																}
															}
														}
														__THREW__ = 0;
														$1127 = (invoke_iii(189,($c30|0),($g$0723|0))|0);
														$1128 = __THREW__; __THREW__ = 0;
														$1129 = $1128&1;
														if ($1129) {
															label = 290;
															break L332;
														}
														$1171 = HEAP32[$1127>>2]|0;
														HEAP32[$0>>2] = $1171;
														HEAP32[$920>>2] = 0;
														$1172 = HEAP32[$918>>2]|0;
														$1173 = HEAP32[$921>>2]|0;
														$1174 = ($1172|0)==($1173|0);
														if ($1174) {
															__THREW__ = 0;
															invoke_vii(125,($922|0),($0|0));
															$1187 = __THREW__; __THREW__ = 0;
															$1188 = $1187&1;
															if ($1188) {
																label = 290;
																break L332;
															}
														} else {
															$1175 = $0;
															$1176 = $1175;
															$1177 = HEAP32[$1176>>2]|0;
															$1178 = (($1175) + 4)|0;
															$1179 = $1178;
															$1180 = HEAP32[$1179>>2]|0;
															$1181 = $1172;
															$1182 = $1181;
															HEAP32[$1182>>2] = $1177;
															$1183 = (($1181) + 4)|0;
															$1184 = $1183;
															HEAP32[$1184>>2] = $1180;
															$1185 = HEAP32[$918>>2]|0;
															$1186 = ((($1185)) + 8|0);
															HEAP32[$918>>2] = $1186;
														}
														__THREW__ = 0;
														$1189 = (invoke_ii(29,40)|0);
														$1190 = __THREW__; __THREW__ = 0;
														$1191 = $1190&1;
														if ($1191) {
															label = 290;
															break L332;
														}
														__THREW__ = 0;
														invoke_vii(200,($1189|0),($c133|0));
														$1192 = __THREW__; __THREW__ = 0;
														$1193 = $1192&1;
														if ($1193) {
															$$lcssa1388 = $1189;
															label = 315;
															break L332;
														}
														__THREW__ = 0;
														(invoke_iiii(103,($this|0),($1189|0),0)|0);
														$1194 = __THREW__; __THREW__ = 0;
														$1195 = $1194&1;
														if ($1195) {
															label = 290;
															break L332;
														}
														$1196 = HEAP32[$923>>2]|0;
														$1197 = (($1196) + 1)|0;
														__THREW__ = 0;
														invoke_vi(176,($c133|0));
														$1198 = __THREW__; __THREW__ = 0;
														$1199 = $1198&1;
														if ($1199) {
															label = 287;
															break L332;
														}
														__THREW__ = 0;
														invoke_vi(72,($b132|0));
														$1200 = __THREW__; __THREW__ = 0;
														$1201 = $1200&1;
														if ($1201) {
															label = 286;
															break L332;
														}
														__THREW__ = 0;
														invoke_vi(72,($b31|0));
														$1202 = __THREW__; __THREW__ = 0;
														$1203 = $1202&1;
														if ($1203) {
															label = 269;
															break L332;
														}
														$1204 = (($g$0723) + 1)|0;
														$1205 = HEAP32[$905>>2]|0;
														$1206 = HEAP32[$904>>2]|0;
														$1207 = (($1205) - ($1206))|0;
														$1208 = $1207 >> 3;
														$1209 = ($1204|0)<($1208|0);
														if ($1209) {
															$g$0723 = $1204;$left$0724 = $1197;
														} else {
															break;
														}
													}
												}
											}
										}
										__ZN9CharacterD2Ev($c30);
										$1218 = HEAP32[$28>>2]|0;
										$1219 = HEAP32[$27>>2]|0;
										$1220 = (($1218) - ($1219))|0;
										$1221 = $1220 >> 2;
										$1222 = ($i29$0$ph729|0)<($1221|0);
										if ($1222) {
											$1038 = $1219;$3040 = $1218;
										} else {
											$1034 = $1219;$1035 = $1218;
											break L330;
										}
									}
									if ((label|0) == 259) {
										label = 0;
										$$pre871 = HEAP32[$28>>2]|0;
										$$pre872 = HEAP32[$27>>2]|0;
										$1052 = $$pre872;$1053 = $$pre871;
									}
									$1050 = (($i29$0$ph729) + 1)|0;
									$1051 = (($1053) - ($1052))|0;
									$1054 = $1051 >> 2;
									$1055 = ($1050|0)<($1054|0);
									if ($1055) {
										$3038 = $1052;$3039 = $1053;$i29$0$ph729 = $1050;
									} else {
										$1034 = $1052;$1035 = $1053;
										break L330;
									}
								}
								if ((label|0) == 269) {
									$1085 = ___cxa_find_matching_catch_2()|0;
									$1086 = tempRet0;
									$lpad$phi487$index = $1085;$lpad$phi487$index12 = $1086;
									label = 271;
								}
								else if ((label|0) == 270) {
									$1087 = ___cxa_find_matching_catch_2()|0;
									$1088 = tempRet0;
									$lpad$phi487$index = $1087;$lpad$phi487$index12 = $1088;
									label = 271;
								}
								else if ((label|0) == 286) {
									$1130 = ___cxa_find_matching_catch_2()|0;
									$1131 = tempRet0;
									$$10 = $1130;$$10128 = $1131;
									label = 318;
								}
								else if ((label|0) == 287) {
									$1132 = ___cxa_find_matching_catch_2()|0;
									$1133 = tempRet0;
									$$9 = $1132;$$9127 = $1133;
									label = 317;
								}
								else if ((label|0) == 288) {
									$1134 = ___cxa_find_matching_catch_2()|0;
									$1135 = tempRet0;
									__ZdlPv($$lcssa1382);
									$$9 = $1134;$$9127 = $1135;
									label = 317;
								}
								else if ((label|0) == 289) {
									$1136 = ___cxa_find_matching_catch_2()|0;
									$1137 = tempRet0;
									$lpad$phi$index = $1136;$lpad$phi$index17 = $1137;
									label = 291;
								}
								else if ((label|0) == 290) {
									$1138 = ___cxa_find_matching_catch_2()|0;
									$1139 = tempRet0;
									$lpad$phi$index = $1138;$lpad$phi$index17 = $1139;
									label = 291;
								}
								else if ((label|0) == 303) {
									$1163 = ___cxa_find_matching_catch_2()|0;
									$1164 = tempRet0;
									__ZdlPv($$lcssa1381);
									$$8 = $1163;$$8126 = $1164;
									label = 316;
								}
								else if ((label|0) == 315) {
									$1210 = ___cxa_find_matching_catch_2()|0;
									$1211 = tempRet0;
									__ZdlPv($$lcssa1388);
									$$8 = $1210;$$8126 = $1211;
									label = 316;
								}
								if ((label|0) == 271) {
									$$11 = $lpad$phi487$index;$$11129 = $lpad$phi487$index12;
								}
								else if ((label|0) == 291) {
									$$8 = $lpad$phi$index;$$8126 = $lpad$phi$index17;
									label = 316;
								}
								if ((label|0) == 316) {
									__THREW__ = 0;
									invoke_vi(176,($c133|0));
									$1212 = __THREW__; __THREW__ = 0;
									$1213 = $1212&1;
									if ($1213) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$9 = $$8;$$9127 = $$8126;
										label = 317;
									}
								}
								if ((label|0) == 317) {
									__THREW__ = 0;
									invoke_vi(72,($b132|0));
									$1214 = __THREW__; __THREW__ = 0;
									$1215 = $1214&1;
									if ($1215) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$10 = $$9;$$10128 = $$9127;
										label = 318;
									}
								}
								if ((label|0) == 318) {
									__THREW__ = 0;
									invoke_vi(72,($b31|0));
									$1216 = __THREW__; __THREW__ = 0;
									$1217 = $1216&1;
									if ($1217) {
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									} else {
										$$11 = $$10;$$11129 = $$10128;
									}
								}
								__THREW__ = 0;
								invoke_vi(176,($c30|0));
								$1223 = __THREW__; __THREW__ = 0;
								$1224 = $1223&1;
								if ($1224) {
									$3035 = ___cxa_find_matching_catch_3(0|0)|0;
									$3036 = tempRet0;
									___clang_call_terminate($3035);
									// unreachable;
								} else {
									$$16 = $$11;$$16134 = $$11129;
									___resumeException($$16|0);
									// unreachable;
								}
							} else {
								$1034 = $$in897;$1035 = $900;
							}
						} while(0);
						$1032 = HEAP32[$25>>2]|0;
						$1033 = (($1035) - ($1034))|0;
						$1036 = $1033 >> 2;
						$1037 = ($1032|0)<($1036|0);
						if ($1037) {
							$begin$0711 = $1032;$i35$0713 = $1032;
							while(1) {
								$1231 = (__ZNK8Textline9characterEi($this,$i35$0713)|0);
								$1232 = (__ZNK9Character5maybeEi($1231,32)|0);
								L420: do {
									if ($1232) {
										$1233 = (($i35$0713) + 1)|0;
										$begin$1 = $1233;
									} else {
										$1234 = ((($1231)) + 28|0);
										$1235 = ((($1231)) + 32|0);
										$1236 = HEAP32[$1235>>2]|0;
										$1237 = HEAP32[$1234>>2]|0;
										$1238 = ($1236|0)==($1237|0);
										if ($1238) {
											$begin$1 = $begin$0711;
										} else {
											$1239 = (__ZNK9Character5guessEi($1231,0)|0);
											$1240 = HEAP32[$1239>>2]|0;
											$1241 = HEAP32[$1235>>2]|0;
											$1242 = HEAP32[$1234>>2]|0;
											$1243 = (($1241) - ($1242))|0;
											$1244 = ($1243|0)!=(16);
											$1245 = ($1240|0)!=(66);
											$or$cond = $1245 | $1244;
											if ($or$cond) {
												$begin$1 = $begin$0711;
											} else {
												$1246 = (__ZNK9Character5guessEi($1231,1)|0);
												$1247 = HEAP32[$1246>>2]|0;
												$1248 = ($1247|0)==(97);
												if ($1248) {
													$1249 = ((($1231)) + 12|0);
													$1250 = HEAP32[$1249>>2]|0;
													$1251 = ((($1231)) + 4|0);
													$1252 = HEAP32[$1251>>2]|0;
													$1253 = (($1250) + 1)|0;
													$1254 = (($1253) - ($1252))|0;
													$1255 = $1254 << 2;
													$1256 = (__ZNK8Textline11mean_heightEv($this)|0);
													$1257 = ($1256*5)|0;
													$1258 = ($1255|0)>($1257|0);
													if ($1258) {
														$begin$1 = $begin$0711;
													} else {
														$1259 = HEAP32[$28>>2]|0;
														$1260 = HEAP32[$27>>2]|0;
														$1261 = (($1259) - ($1260))|0;
														$1262 = $1261 >> 2;
														$1263 = ($begin$0711|0)<($1262|0);
														if ($1263) {
															$j37$0708 = $begin$0711;
															L427: while(1) {
																$1264 = ($j37$0708|0)==($i35$0713|0);
																do {
																	if (!($1264)) {
																		$1265 = (__ZNK8Textline9characterEi($this,$j37$0708)|0);
																		$1266 = (__ZNK9Character5maybeEi($1265,32)|0);
																		if ($1266) {
																			$begin$1 = $begin$0711;
																			break L420;
																		}
																		$1267 = ((($1265)) + 28|0);
																		$1268 = ((($1265)) + 32|0);
																		$1269 = HEAP32[$1268>>2]|0;
																		$1270 = HEAP32[$1267>>2]|0;
																		$1271 = (($1269) - ($1270))|0;
																		$1272 = ($1271|0)>(0);
																		if (!($1272)) {
																			break;
																		}
																		$1273 = (__ZNK9Character5guessEi($1265,0)|0);
																		$1274 = HEAP32[$1273>>2]|0;
																		$1275 = ($1274|0)>(127);
																		if ($1275) {
																			break;
																		}
																		$1276 = (_isupper($1274)|0);
																		$1277 = ($1276|0)==(0);
																		L434: do {
																			if (!($1277)) {
																				switch ($1274|0) {
																					case 66: case 81:  {
																						break L434;
																						break;
																					}
																					default: {
																					}
																				}
																				$1278 = HEAP32[$1249>>2]|0;
																				$1279 = HEAP32[$1251>>2]|0;
																				$1280 = (($1278) + 1)|0;
																				$1281 = (($1280) - ($1279))|0;
																				$1282 = ($1281*5)|0;
																				$1283 = ((($1265)) + 12|0);
																				$1284 = HEAP32[$1283>>2]|0;
																				$1285 = ((($1265)) + 4|0);
																				$1286 = HEAP32[$1285>>2]|0;
																				$1287 = (($1284) + 1)|0;
																				$1288 = (($1287) - ($1286))|0;
																				$1289 = $1288 << 2;
																				$1290 = ($1282|0)<($1289|0);
																				if ($1290) {
																					break L427;
																				}
																			}
																		} while(0);
																		$1291 = (__ZN3UCS13islower_smallEi($1274)|0);
																		$1292 = ($1274|0)!=(114);
																		$or$cond26 = $1292 & $1291;
																		if (!($or$cond26)) {
																			break;
																		}
																		$1293 = (__ZN3UCS23islower_small_ambiguousEi($1274)|0);
																		if ($1293) {
																			break;
																		}
																		$1294 = HEAP32[$1249>>2]|0;
																		$1295 = HEAP32[$1251>>2]|0;
																		$1296 = (($1294) + 1)|0;
																		$1297 = (($1296) - ($1295))|0;
																		$1298 = ((($1265)) + 12|0);
																		$1299 = HEAP32[$1298>>2]|0;
																		$1300 = ((($1265)) + 4|0);
																		$1301 = HEAP32[$1300>>2]|0;
																		$1302 = (($1299) + 1)|0;
																		$1303 = (($1302) - ($1301))|0;
																		$1304 = ($1297|0)>($1303|0);
																		if (!($1304)) {
																			break L427;
																		}
																		$1305 = (__ZN5Ocrad7similarEiiii($1297,$1303,10,1)|0);
																		if ($1305) {
																			break L427;
																		}
																	}
																} while(0);
																$1306 = (($j37$0708) + 1)|0;
																$1307 = HEAP32[$28>>2]|0;
																$1308 = HEAP32[$27>>2]|0;
																$1309 = (($1307) - ($1308))|0;
																$1310 = $1309 >> 2;
																$1311 = ($1306|0)<($1310|0);
																if ($1311) {
																	$j37$0708 = $1306;
																} else {
																	$begin$1 = $begin$0711;
																	break L420;
																}
															}
															__ZN9Character12swap_guessesEii($1231,0,1);
															$begin$1 = $begin$0711;
														} else {
															$begin$1 = $begin$0711;
														}
													}
												} else {
													$begin$1 = $begin$0711;
												}
											}
										}
									}
								} while(0);
								$1312 = (($i35$0713) + 1)|0;
								$1313 = HEAP32[$28>>2]|0;
								$1314 = HEAP32[$27>>2]|0;
								$1315 = (($1313) - ($1314))|0;
								$1316 = $1315 >> 2;
								$1317 = ($1312|0)<($1316|0);
								if ($1317) {
									$begin$0711 = $begin$1;$i35$0713 = $1312;
								} else {
									$$lcssa1379 = $1313;$$lcssa1380 = $1314;
									break;
								}
							}
							$$pre873 = HEAP32[$25>>2]|0;
							$1226 = $$lcssa1380;$1227 = $$lcssa1379;$1229 = $$pre873;
						} else {
							$1226 = $1034;$1227 = $1035;$1229 = $1032;
						}
						$1225 = (($1227) - ($1226))|0;
						$1228 = $1225 >> 2;
						$1230 = ($1229|0)<($1228|0);
						if ($1230) {
							$begin44$0699 = $1229;$i43$0701 = $1229;
							while(1) {
								$1324 = (__ZNK8Textline9characterEi($this,$i43$0701)|0);
								$1325 = (__ZNK9Character5maybeEi($1324,32)|0);
								L449: do {
									if ($1325) {
										$1326 = (($i43$0701) + 1)|0;
										$begin44$1 = $1326;
									} else {
										$1327 = ((($1324)) + 28|0);
										$1328 = ((($1324)) + 32|0);
										$1329 = HEAP32[$1328>>2]|0;
										$1330 = HEAP32[$1327>>2]|0;
										$1331 = (($1329) - ($1330))|0;
										$1332 = ($1331|0)==(16);
										if ($1332) {
											$1333 = (__ZNK9Character5guessEi($1324,1)|0);
											$1334 = HEAP32[$1333>>2]|0;
											$1335 = ($1334|0)==(56);
											if ($1335) {
												$1336 = (__ZNK9Character5guessEi($1324,0)|0);
												$1337 = HEAP32[$1336>>2]|0;
												switch ($1337|0) {
													case 97: case 101:  {
														break;
													}
													default: {
														$begin44$1 = $begin44$0699;
														break L449;
													}
												}
												$1338 = ((($1324)) + 12|0);
												$1339 = HEAP32[$1338>>2]|0;
												$1340 = ((($1324)) + 4|0);
												$1341 = HEAP32[$1340>>2]|0;
												$1342 = (($1339) + 1)|0;
												$1343 = (($1342) - ($1341))|0;
												$1344 = ($1343*5)|0;
												$1345 = (__ZNK8Textline11mean_heightEv($this)|0);
												$1346 = $1345 << 2;
												$1347 = ($1344|0)<($1346|0);
												if ($1347) {
													$begin44$1 = $begin44$0699;
												} else {
													$1348 = HEAP32[$28>>2]|0;
													$1349 = HEAP32[$27>>2]|0;
													$1350 = (($1348) - ($1349))|0;
													$1351 = $1350 >> 2;
													$1352 = ($begin44$0699|0)<($1351|0);
													if ($1352) {
														$j47$0696 = $begin44$0699;
														L456: while(1) {
															$1353 = ($j47$0696|0)==($i43$0701|0);
															do {
																if (!($1353)) {
																	$1354 = (__ZNK8Textline9characterEi($this,$j47$0696)|0);
																	$1355 = (__ZNK9Character5maybeEi($1354,32)|0);
																	if ($1355) {
																		$begin44$1 = $begin44$0699;
																		break L449;
																	}
																	$1356 = ((($1354)) + 28|0);
																	$1357 = ((($1354)) + 32|0);
																	$1358 = HEAP32[$1357>>2]|0;
																	$1359 = HEAP32[$1356>>2]|0;
																	$1360 = (($1358) - ($1359))|0;
																	$1361 = ($1360|0)>(0);
																	if (!($1361)) {
																		break;
																	}
																	$1362 = (__ZNK9Character5guessEi($1354,0)|0);
																	$1363 = HEAP32[$1362>>2]|0;
																	$1364 = ($1363|0)>(127);
																	if ($1364) {
																		break;
																	}
																	$1365 = (_isalpha($1363)|0);
																	$1366 = ($1365|0)!=(0);
																	$1367 = ($1363|0)==(58);
																	$or$cond31 = $1367 | $1366;
																	if ($or$cond31) {
																		$1368 = HEAP32[$1338>>2]|0;
																		$1369 = HEAP32[$1340>>2]|0;
																		$1370 = (($1368) + 1)|0;
																		$1371 = (($1370) - ($1369))|0;
																		$1372 = $1371 << 2;
																		$1373 = ((($1354)) + 12|0);
																		$1374 = HEAP32[$1373>>2]|0;
																		$1375 = ((($1354)) + 4|0);
																		$1376 = HEAP32[$1375>>2]|0;
																		$1377 = (($1374) + 1)|0;
																		$1378 = (($1377) - ($1376))|0;
																		$1379 = ($1378*5)|0;
																		$1380 = ($1372|0)>($1379|0);
																		if ($1380) {
																			break L456;
																		}
																	}
																	$isdigittmp = (($1363) + -48)|0;
																	$isdigit = ($isdigittmp>>>0)<(10);
																	if (!($isdigit)) {
																		$1381 = (_isupper($1363)|0);
																		$1382 = ($1381|0)!=(0);
																		$1383 = ($1363|0)==(108);
																		$or$cond33 = $1383 | $1382;
																		if (!($or$cond33)) {
																			break;
																		}
																	}
																	$1384 = HEAP32[$1338>>2]|0;
																	$1385 = HEAP32[$1340>>2]|0;
																	$1386 = (($1384) + 1)|0;
																	$1387 = (($1386) - ($1385))|0;
																	$1388 = ((($1354)) + 12|0);
																	$1389 = HEAP32[$1388>>2]|0;
																	$1390 = ((($1354)) + 4|0);
																	$1391 = HEAP32[$1390>>2]|0;
																	$1392 = (($1389) + 1)|0;
																	$1393 = (($1392) - ($1391))|0;
																	$1394 = ($1387|0)<($1393|0);
																	if (!($1394)) {
																		break L456;
																	}
																	$1395 = (__ZN5Ocrad7similarEiiii($1387,$1393,10,1)|0);
																	if ($1395) {
																		break L456;
																	}
																}
															} while(0);
															$1396 = (($j47$0696) + 1)|0;
															$1397 = HEAP32[$28>>2]|0;
															$1398 = HEAP32[$27>>2]|0;
															$1399 = (($1397) - ($1398))|0;
															$1400 = $1399 >> 2;
															$1401 = ($1396|0)<($1400|0);
															if ($1401) {
																$j47$0696 = $1396;
															} else {
																$begin44$1 = $begin44$0699;
																break L449;
															}
														}
														__ZN9Character12swap_guessesEii($1324,0,1);
														$begin44$1 = $begin44$0699;
													} else {
														$begin44$1 = $begin44$0699;
													}
												}
											} else {
												$begin44$1 = $begin44$0699;
											}
										} else {
											$begin44$1 = $begin44$0699;
										}
									}
								} while(0);
								$1402 = (($i43$0701) + 1)|0;
								$1403 = HEAP32[$28>>2]|0;
								$1404 = HEAP32[$27>>2]|0;
								$1405 = (($1403) - ($1404))|0;
								$1406 = $1405 >> 2;
								$1407 = ($1402|0)<($1406|0);
								if ($1407) {
									$begin44$0699 = $begin44$1;$i43$0701 = $1402;
								} else {
									break;
								}
							}
						}
						__ZN8Textline21check_lower_ambiguousEv($this);
						$1318 = HEAP32[$25>>2]|0;
						$1319 = HEAP32[$28>>2]|0;
						$1320 = HEAP32[$27>>2]|0;
						$1321 = (($1319) - ($1320))|0;
						$1322 = $1321 >> 2;
						$1323 = ($1318|0)<($1322|0);
						if ($1323) {
							$i54$0690 = $1318;
							while(1) {
								$1414 = (__ZNK8Textline9characterEi($this,$i54$0690)|0);
								$1415 = ((($1414)) + 28|0);
								$1416 = ((($1414)) + 32|0);
								$1417 = HEAP32[$1416>>2]|0;
								$1418 = HEAP32[$1415>>2]|0;
								$1419 = (($1417) - ($1418))|0;
								$1420 = ($1419|0)==(8);
								do {
									if ($1420) {
										$1421 = (__ZNK9Character5guessEi($1414,0)|0);
										$1422 = HEAP32[$1421>>2]|0;
										$1423 = ($1422|0)==(105);
										if ($1423) {
											$1424 = (($i54$0690) + 1)|0;
											$1425 = HEAP32[$28>>2]|0;
											$1426 = HEAP32[$27>>2]|0;
											$1427 = (($1425) - ($1426))|0;
											$1428 = $1427 >> 2;
											$1429 = ($1424|0)<($1428|0);
											if ($1429) {
												$1430 = (__ZNK8Textline9characterEi($this,$1424)|0);
												$1431 = ((($1430)) + 28|0);
												$1432 = ((($1430)) + 32|0);
												$1433 = HEAP32[$1432>>2]|0;
												$1434 = HEAP32[$1431>>2]|0;
												$1435 = ($1433|0)==($1434|0);
												if ($1435) {
													label = 371;
												} else {
													$j56$0 = $1424;
												}
											} else {
												label = 371;
											}
											if ((label|0) == 371) {
												label = 0;
												$1436 = (($i54$0690) + -1)|0;
												$1437 = HEAP32[$25>>2]|0;
												$1438 = ($i54$0690|0)>($1437|0);
												if (!($1438)) {
													break;
												}
												$1439 = (__ZNK8Textline9characterEi($this,$1436)|0);
												$1440 = ((($1439)) + 28|0);
												$1441 = ((($1439)) + 32|0);
												$1442 = HEAP32[$1441>>2]|0;
												$1443 = HEAP32[$1440>>2]|0;
												$1444 = ($1442|0)==($1443|0);
												if ($1444) {
													break;
												} else {
													$j56$0 = $1436;
												}
											}
											$1445 = (__ZNK8Textline9characterEi($this,$j56$0)|0);
											$1446 = (__ZNK9Character5guessEi($1445,0)|0);
											$1447 = HEAP32[$1446>>2]|0;
											$1448 = (__ZN3UCS7isvowelEi($1447)|0);
											if ($1448) {
												$1449 = ((($1414)) + 12|0);
												$1450 = HEAP32[$1449>>2]|0;
												$1451 = ((($1445)) + 12|0);
												$1452 = HEAP32[$1451>>2]|0;
												$1453 = ((($1445)) + 4|0);
												$1454 = HEAP32[$1453>>2]|0;
												$1455 = (($1452) + 1)|0;
												$1456 = (($1455) - ($1454))|0;
												$1457 = (($1456|0) / 4)&-1;
												$1458 = (($1457) + ($1452))|0;
												$1459 = ($1450|0)<($1458|0);
												if (!($1459)) {
													__ZN9Character12insert_guessEiii($1414,0,106,1);
												}
											}
										}
									}
								} while(0);
								$1460 = (($i54$0690) + 1)|0;
								$1461 = HEAP32[$28>>2]|0;
								$1462 = HEAP32[$27>>2]|0;
								$1463 = (($1461) - ($1462))|0;
								$1464 = $1463 >> 2;
								$1465 = ($1460|0)<($1464|0);
								if ($1465) {
									$i54$0690 = $1460;
								} else {
									$$lcssa1377 = $1461;$$lcssa1378 = $1462;
									break;
								}
							}
							$$pre874 = HEAP32[$25>>2]|0;
							$1409 = $$lcssa1378;$1410 = $$lcssa1377;$1412 = $$pre874;
						} else {
							$1409 = $1320;$1410 = $1319;$1412 = $1318;
						}
						$1408 = (($1410) - ($1409))|0;
						$1411 = $1408 >> 2;
						$1413 = ($1412|0)<($1411|0);
						if ($1413) {
							$begin60$0685 = $1412;$i61$0679 = $1412;$isolated$0$off0683 = 0;
							while(1) {
								$1472 = (__ZNK8Textline9characterEi($this,$i61$0679)|0);
								$1473 = ((($1472)) + 28|0);
								$1474 = ((($1472)) + 32|0);
								$1475 = HEAP32[$1474>>2]|0;
								$1476 = HEAP32[$1473>>2]|0;
								$1477 = (($1475) - ($1476))|0;
								$1478 = ($1477|0)>(0);
								L494: do {
									if ($1478) {
										$1479 = (__ZNK9Character5maybeEi($1472,32)|0);
										if ($1479) {
											$1480 = (($i61$0679) + 2)|0;
											$1481 = HEAP32[$28>>2]|0;
											$1482 = HEAP32[$27>>2]|0;
											$1483 = (($1481) - ($1482))|0;
											$1484 = $1483 >> 2;
											$1485 = ($1480|0)<($1484|0);
											do {
												if ($1485) {
													$1486 = (__ZNK8Textline9characterEi($this,$1480)|0);
													$1487 = (__ZNK9Character5maybeEi($1486,32)|0);
													if (!($1487)) {
														break;
													}
													$1488 = HEAP32[$25>>2]|0;
													$begin60$2 = $1488;$isolated$2$off0 = 1;
													break L494;
												}
											} while(0);
											$1489 = (($i61$0679) + 1)|0;
											$begin60$2 = $1489;$isolated$2$off0 = 0;
											break;
										}
										$1490 = (__ZNK9Character5guessEi($1472,0)|0);
										$1491 = HEAP32[$1490>>2]|0;
										$1492 = ($1491|0)<(128);
										if ($1492) {
											$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
										} else {
											$1493 = ((($1472)) + 16|0);
											$1494 = ((($1472)) + 20|0);
											$1495 = HEAP32[$1494>>2]|0;
											$1496 = HEAP32[$1493>>2]|0;
											$1497 = (($1495) - ($1496))|0;
											$1498 = ($1497|0)<(8);
											if ($1498) {
												$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
											} else {
												$1499 = (__ZN3UCS11base_letterEi($1491)|0);
												switch ($1499|0) {
													case 111: case 115: case 117: case 122:  {
														break;
													}
													default: {
														$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
														break L494;
													}
												}
												$1500 = HEAP32[$1494>>2]|0;
												$1501 = HEAP32[$1493>>2]|0;
												$1502 = (($1500) - ($1501))|0;
												$1503 = $1502 >> 2;
												$1504 = (($1503) + -1)|0;
												$1505 = (__ZN9Character4blobEi($1472,$1504)|0);
												$1506 = HEAP32[$28>>2]|0;
												$1507 = HEAP32[$27>>2]|0;
												$1508 = (($1506) - ($1507))|0;
												$1509 = $1508 >> 2;
												$1510 = ($begin60$0685|0)<($1509|0);
												if ($1510) {
													$1511 = ((($1472)) + 12|0);
													$1512 = ((($1472)) + 4|0);
													$1513 = ((($1505)) + 12|0);
													$1514 = ((($1505)) + 4|0);
													$j65$0675 = $begin60$0685;
													L507: while(1) {
														$1515 = ($j65$0675|0)==($i61$0679|0);
														do {
															if (!($1515)) {
																$1516 = (__ZNK8Textline9characterEi($this,$j65$0675)|0);
																$1517 = ((($1516)) + 28|0);
																$1518 = ((($1516)) + 32|0);
																$1519 = HEAP32[$1518>>2]|0;
																$1520 = HEAP32[$1517>>2]|0;
																$1521 = (($1519) - ($1520))|0;
																$1522 = ($1521|0)>(0);
																if (!($1522)) {
																	break;
																}
																$1523 = (__ZNK9Character5maybeEi($1516,32)|0);
																if ($1523) {
																	if ($isolated$0$off0683) {
																		break;
																	} else {
																		$begin60$2 = $begin60$0685;$isolated$2$off0 = 0;
																		break L494;
																	}
																}
																$1524 = (__ZNK9Character5guessEi($1516,0)|0);
																$1525 = HEAP32[$1524>>2]|0;
																$1526 = (__ZN3UCS11base_letterEi($1525)|0);
																$1527 = ($1526|0)==(0);
																$1528 = ($1525|0)>(127);
																$or$cond43 = $1528 & $1527;
																if ($or$cond43) {
																	break;
																}
																$1529 = (_isalpha($1525)|0);
																$1530 = ($1529|0)==(0);
																if (!($1530)) {
																	$1531 = HEAP32[$1513>>2]|0;
																	$1532 = HEAP32[$1514>>2]|0;
																	$1533 = (($1531) + 1)|0;
																	$1534 = (($1533) - ($1532))|0;
																	$1535 = $1534 << 2;
																	$1536 = ((($1516)) + 12|0);
																	$1537 = HEAP32[$1536>>2]|0;
																	$1538 = ((($1516)) + 4|0);
																	$1539 = HEAP32[$1538>>2]|0;
																	$1540 = (($1537) + 1)|0;
																	$1541 = (($1540) - ($1539))|0;
																	$1542 = ($1541*5)|0;
																	$1543 = ($1535|0)>($1542|0);
																	if ($1543) {
																		break L507;
																	}
																}
																$1544 = (_isupper($1525)|0);
																$1545 = ($1544|0)==(0);
																if (!($1545)) {
																	$1546 = HEAP32[$1513>>2]|0;
																	$1547 = HEAP32[$1514>>2]|0;
																	$1548 = (($1546) + 1)|0;
																	$1549 = (($1548) - ($1547))|0;
																	$1550 = ((($1516)) + 12|0);
																	$1551 = HEAP32[$1550>>2]|0;
																	$1552 = ((($1516)) + 4|0);
																	$1553 = HEAP32[$1552>>2]|0;
																	$1554 = (($1551) + 1)|0;
																	$1555 = (($1554) - ($1553))|0;
																	$1556 = (__ZN5Ocrad7similarEiiii($1549,$1555,10,1)|0);
																	if ($1556) {
																		break L507;
																	}
																}
																$1557 = (_isalpha($1526)|0);
																$1558 = ($1557|0)==(0);
																if (!($1558)) {
																	$1559 = HEAP32[$1511>>2]|0;
																	$1560 = HEAP32[$1512>>2]|0;
																	$1561 = (($1559) + 1)|0;
																	$1562 = (($1561) - ($1560))|0;
																	$1563 = $1562 << 2;
																	$1564 = ((($1516)) + 12|0);
																	$1565 = HEAP32[$1564>>2]|0;
																	$1566 = ((($1516)) + 4|0);
																	$1567 = HEAP32[$1566>>2]|0;
																	$1568 = (($1565) + 1)|0;
																	$1569 = (($1568) - ($1567))|0;
																	$1570 = ($1569*5)|0;
																	$1571 = ($1563|0)>($1570|0);
																	if ($1571) {
																		break L507;
																	}
																}
																$1572 = (_isupper($1526)|0);
																$1573 = ($1572|0)==(0);
																if ($1573) {
																	break;
																}
																$1574 = HEAP32[$1511>>2]|0;
																$1575 = HEAP32[$1512>>2]|0;
																$1576 = (($1574) + 1)|0;
																$1577 = (($1576) - ($1575))|0;
																$1578 = ((($1516)) + 12|0);
																$1579 = HEAP32[$1578>>2]|0;
																$1580 = ((($1516)) + 4|0);
																$1581 = HEAP32[$1580>>2]|0;
																$1582 = (($1579) + 1)|0;
																$1583 = (($1582) - ($1581))|0;
																$1584 = (__ZN5Ocrad7similarEiiii($1577,$1583,10,1)|0);
																if ($1584) {
																	break L507;
																}
															}
														} while(0);
														$1586 = (($j65$0675) + 1)|0;
														$1587 = HEAP32[$28>>2]|0;
														$1588 = HEAP32[$27>>2]|0;
														$1589 = (($1587) - ($1588))|0;
														$1590 = $1589 >> 2;
														$1591 = ($1586|0)<($1590|0);
														if ($1591) {
															$j65$0675 = $1586;
														} else {
															$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
															break L494;
														}
													}
													$1585 = (__ZN3UCS7toupperEi($1491)|0);
													__ZN9Character12insert_guessEiii($1472,0,$1585,1);
													$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
												} else {
													$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
												}
											}
										}
									} else {
										$begin60$2 = $begin60$0685;$isolated$2$off0 = $isolated$0$off0683;
									}
								} while(0);
								$1592 = (($i61$0679) + 1)|0;
								$1593 = HEAP32[$28>>2]|0;
								$1594 = HEAP32[$27>>2]|0;
								$1595 = (($1593) - ($1594))|0;
								$1596 = $1595 >> 2;
								$1597 = ($1592|0)<($1596|0);
								if ($1597) {
									$begin60$0685 = $begin60$2;$i61$0679 = $1592;$isolated$0$off0683 = $isolated$2$off0;
								} else {
									$$lcssa1375 = $1593;$$lcssa1376 = $1594;
									break;
								}
							}
							$$pre875 = HEAP32[$25>>2]|0;
							$1467 = $$lcssa1376;$1468 = $$lcssa1375;$1470 = $$pre875;
						} else {
							$1467 = $1409;$1468 = $1410;$1470 = $1412;
						}
						$1466 = (($1468) - ($1467))|0;
						$1469 = $1466 >> 2;
						$1471 = ($1470|0)<($1469|0);
						if ($1471) {
							$begin73$0668 = $1470;$i72$0669 = $1470;
							while(1) {
								$1602 = (__ZNK8Textline9characterEi($this,$i72$0669)|0);
								$1603 = (__ZNK9Character5maybeEi($1602,32)|0);
								L534: do {
									if ($1603) {
										$1604 = (($i72$0669) + 1)|0;
										$begin73$1 = $1604;
									} else {
										$1605 = ((($1602)) + 28|0);
										$1606 = ((($1602)) + 32|0);
										$1607 = HEAP32[$1606>>2]|0;
										$1608 = HEAP32[$1605>>2]|0;
										$1609 = (($1607) - ($1608))|0;
										$1610 = ($1609|0)>(0);
										if ($1610) {
											$1611 = (__ZNK9Character5guessEi($1602,0)|0);
											$1612 = HEAP32[$1611>>2]|0;
											switch ($1612|0) {
												case 79: case 108: case 111:  {
													break;
												}
												default: {
													$begin73$1 = $begin73$0668;
													break L534;
												}
											}
											$1613 = HEAP32[$28>>2]|0;
											$1614 = HEAP32[$27>>2]|0;
											$1615 = (($1613) - ($1614))|0;
											$1616 = $1615 >> 2;
											$1617 = ($begin73$0668|0)<($1616|0);
											if ($1617) {
												$j76$0665 = $begin73$0668;
												L539: while(1) {
													$1618 = ($j76$0665|0)==($i72$0669|0);
													do {
														if (!($1618)) {
															$1619 = (__ZNK8Textline9characterEi($this,$j76$0665)|0);
															$1620 = (__ZNK9Character5maybeEi($1619,32)|0);
															if ($1620) {
																$begin73$1 = $begin73$0668;
																break L534;
															}
															$1621 = ((($1619)) + 28|0);
															$1622 = ((($1619)) + 32|0);
															$1623 = HEAP32[$1622>>2]|0;
															$1624 = HEAP32[$1621>>2]|0;
															$1625 = (($1623) - ($1624))|0;
															$1626 = ($1625|0)>(0);
															if (!($1626)) {
																break;
															}
															$1627 = (__ZNK9Character5guessEi($1619,0)|0);
															$1628 = HEAP32[$1627>>2]|0;
															$code$off$i295 = (($1628) + -48)|0;
															$1629 = ($code$off$i295>>>0)<(10);
															if ($1629) {
																$$lcssa1371 = $1619;
																break L539;
															}
															$1649 = (__ZN3UCS7isalphaEi($1628)|0);
															if (!($1649)) {
																break;
															}
															switch ($1628|0) {
																case 79: case 108: case 111:  {
																	break;
																}
																default: {
																	$begin73$1 = $begin73$0668;
																	break L534;
																}
															}
														}
													} while(0);
													$1650 = (($j76$0665) + 1)|0;
													$1651 = HEAP32[$28>>2]|0;
													$1652 = HEAP32[$27>>2]|0;
													$1653 = (($1651) - ($1652))|0;
													$1654 = $1653 >> 2;
													$1655 = ($1650|0)<($1654|0);
													if ($1655) {
														$j76$0665 = $1650;
													} else {
														$begin73$1 = $begin73$0668;
														break L534;
													}
												}
												$1630 = ((($1602)) + 12|0);
												$1631 = HEAP32[$1630>>2]|0;
												$1632 = ((($1602)) + 4|0);
												$1633 = HEAP32[$1632>>2]|0;
												$1634 = (($1631) + 1)|0;
												$1635 = (($1634) - ($1633))|0;
												$1636 = ((($$lcssa1371)) + 12|0);
												$1637 = HEAP32[$1636>>2]|0;
												$1638 = ((($$lcssa1371)) + 4|0);
												$1639 = HEAP32[$1638>>2]|0;
												$1640 = (($1637) + 1)|0;
												$1641 = (($1640) - ($1639))|0;
												$1642 = (__ZN5Ocrad7similarEiiii($1635,$1641,10,1)|0);
												if ($1642) {
													$1643 = ($1612|0)==(108);
													$1644 = $1643 ? 49 : 48;
													$1645 = (__ZNK9Character5guessEi($1602,0)|0);
													$1646 = ((($1645)) + 4|0);
													$1647 = HEAP32[$1646>>2]|0;
													$1648 = (($1647) + 1)|0;
													__ZN9Character12insert_guessEiii($1602,0,$1644,$1648);
													$begin73$1 = $begin73$0668;
												} else {
													$begin73$1 = $begin73$0668;
												}
											} else {
												$begin73$1 = $begin73$0668;
											}
										} else {
											$begin73$1 = $begin73$0668;
										}
									}
								} while(0);
								$1656 = (($i72$0669) + 1)|0;
								$1657 = HEAP32[$28>>2]|0;
								$1658 = HEAP32[$27>>2]|0;
								$1659 = (($1657) - ($1658))|0;
								$1660 = $1659 >> 2;
								$1661 = ($1656|0)<($1660|0);
								if ($1661) {
									$begin73$0668 = $begin73$1;$i72$0669 = $1656;
								} else {
									$$lcssa1372 = $1657;$$lcssa1373 = $1658;$$lcssa1374 = $1660;
									break;
								}
							}
							$$pre876 = HEAP32[$25>>2]|0;
							$$lcssa512 = $$lcssa1374;$1599 = $$pre876;$3041 = $$lcssa1373;$3042 = $$lcssa1372;
						} else {
							$$lcssa512 = $1469;$1599 = $1470;$3041 = $1467;$3042 = $1468;
						}
						$1598 = ($$lcssa512|0)>($1599|0);
						if ($1598) {
							$1600 = ((($22)) + 12|0);
							$1601 = ((($1)) + 4|0);
							$i83$0663$in = $$lcssa512;
							while(1) {
								$i83$0663 = (($i83$0663$in) + -1)|0;
								$1669 = (__ZNK8Textline9characterEi($this,$i83$0663)|0);
								$1670 = ((($1669)) + 28|0);
								$1671 = ((($1669)) + 32|0);
								$1672 = HEAP32[$1671>>2]|0;
								$1673 = HEAP32[$1670>>2]|0;
								$1674 = (($1672) - ($1673))|0;
								$1675 = ($1674|0)==(8);
								L557: do {
									if ($1675) {
										$1676 = (__ZNK9Character5guessEi($1669,0)|0);
										$1677 = HEAP32[$1676>>2]|0;
										$1678 = ($1677|0)==(112);
										if ($1678) {
											$1679 = ((($1669)) + 12|0);
											$1680 = HEAP32[$1679>>2]|0;
											$1681 = ((($1669)) + 4|0);
											$1682 = HEAP32[$1681>>2]|0;
											$1683 = (($1680) + 1)|0;
											$1684 = (($1683) - ($1682))|0;
											$1685 = (($1684|0) / 20)&-1;
											$1686 = ($1685|0)>(2);
											$1687 = $1686 ? $1685 : 2;
											$1688 = HEAP32[$28>>2]|0;
											$1689 = HEAP32[$27>>2]|0;
											$1690 = (($1688) - ($1689))|0;
											$1691 = $1690 >> 2;
											$1692 = ($i83$0663$in|0)<($1691|0);
											L560: do {
												if ($1692) {
													$1693 = (__ZNK8Textline9characterEi($this,$i83$0663$in)|0);
													$1694 = ((($1693)) + 28|0);
													$1695 = ((($1693)) + 32|0);
													$1696 = HEAP32[$1695>>2]|0;
													$1697 = HEAP32[$1694>>2]|0;
													$1698 = ($1696|0)==($1697|0);
													if ($1698) {
														label = 436;
														break;
													}
													$1699 = (__ZNK8Textline9characterEi($this,$i83$0663$in)|0);
													$1700 = (__ZNK9Character5guessEi($1699,0)|0);
													$1701 = HEAP32[$1700>>2]|0;
													$1702 = (__ZN3UCS7isalnumEi($1701)|0);
													L563: do {
														if ($1702) {
															switch ($1701|0) {
																case 121: case 113: case 112: case 106: case 103:  {
																	$1703 = HEAP32[$1679>>2]|0;
																	$1704 = (($1703) + ($1687))|0;
																	$1705 = ((($1699)) + 12|0);
																	$1706 = HEAP32[$1705>>2]|0;
																	$1707 = ($1704|0)>($1706|0);
																	if ($1707) {
																		break L557;
																	} else {
																		break L560;
																	}
																	break;
																}
																case 81:  {
																	$1708 = HEAP32[$1681>>2]|0;
																	$1709 = ((($1699)) + 4|0);
																	$1710 = HEAP32[$1709>>2]|0;
																	$1711 = (($1708) - ($1710))|0;
																	$ispos185 = ($1711|0)>(-1);
																	$neg186 = (0 - ($1711))|0;
																	$1712 = $ispos185 ? $1711 : $neg186;
																	$1713 = ($1712|0)>($1687|0);
																	if ($1713) {
																		break L557;
																	} else {
																		break L560;
																	}
																	break;
																}
																default: {
																	break L563;
																}
															}
														} else {
															switch ($1701|0) {
																case 124: case 46:  {
																	break;
																}
																default: {
																	label = 436;
																	break L560;
																}
															}
														}
													} while(0);
													$1724 = HEAP32[$1679>>2]|0;
													$1725 = ((($1699)) + 12|0);
													$1726 = HEAP32[$1725>>2]|0;
													$1727 = (($1724) - ($1726))|0;
													$ispos187 = ($1727|0)>(-1);
													$neg188 = (0 - ($1727))|0;
													$1728 = $ispos187 ? $1727 : $neg188;
													$1729 = ($1728|0)>($1687|0);
													if ($1729) {
														break L557;
													}
												} else {
													label = 436;
												}
											} while(0);
											if ((label|0) == 436) {
												label = 0;
												$1714 = HEAP32[$25>>2]|0;
												$1715 = ($i83$0663|0)>($1714|0);
												if (!($1715)) {
													break;
												}
												$1716 = (($i83$0663$in) + -2)|0;
												$1717 = (__ZNK8Textline9characterEi($this,$1716)|0);
												$1718 = (__ZNK9Character5maybeEi($1717,32)|0);
												if ($1718) {
													break;
												}
												$1719 = HEAP32[$1679>>2]|0;
												__ZNK8Textline7charboxERK9Character($22,$this,$1669);
												$1720 = HEAP32[$1600>>2]|0;
												$1721 = (($1719) - ($1720))|0;
												$ispos = ($1721|0)>(-1);
												$neg = (0 - ($1721))|0;
												$1722 = $ispos ? $1721 : $neg;
												$1723 = ($1722|0)>($1687|0);
												if ($1723) {
													break;
												}
											}
											$1730 = HEAP32[$1670>>2]|0;
											$1731 = HEAP32[$1671>>2]|0;
											$1732 = ($1731|0)==($1730|0);
											if ($1732) {
												$1739 = $1730;
											} else {
												$__new_last2$i$i$i$i289 = $1730;
												$scevgep$i$i$i$i290 = ((($1731)) + -8|0);
												$1733 = $scevgep$i$i$i$i290;
												$1734 = (($1733) - ($__new_last2$i$i$i$i289))|0;
												$1735 = $1734 >>> 3;
												$1736 = $1735 ^ -1;
												$scevgep4$i$i$i$i291 = (($1731) + ($1736<<3)|0);
												HEAP32[$1671>>2] = $scevgep4$i$i$i$i291;
												$1739 = $scevgep4$i$i$i$i291;
											}
											HEAP32[$1>>2] = 80;
											HEAP32[$1601>>2] = 0;
											$1737 = ((($1669)) + 36|0);
											$1738 = HEAP32[$1737>>2]|0;
											$1740 = ($1739|0)==($1738|0);
											if ($1740) {
												__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1670,$1);
											} else {
												$1741 = $1;
												$1742 = $1741;
												$1743 = HEAP32[$1742>>2]|0;
												$1744 = (($1741) + 4)|0;
												$1745 = $1744;
												$1746 = HEAP32[$1745>>2]|0;
												$1747 = $1739;
												$1748 = $1747;
												HEAP32[$1748>>2] = $1743;
												$1749 = (($1747) + 4)|0;
												$1750 = $1749;
												HEAP32[$1750>>2] = $1746;
												$1751 = HEAP32[$1671>>2]|0;
												$1752 = ((($1751)) + 8|0);
												HEAP32[$1671>>2] = $1752;
											}
										}
									}
								} while(0);
								$1753 = HEAP32[$25>>2]|0;
								$1754 = ($i83$0663|0)>($1753|0);
								if ($1754) {
									$i83$0663$in = $i83$0663;
								} else {
									$$lcssa1370 = $1753;
									break;
								}
							}
							$$pre877 = HEAP32[$28>>2]|0;
							$$pre878 = HEAP32[$27>>2]|0;
							$1663 = $$pre878;$1664 = $$pre877;$1667 = $$lcssa1370;
						} else {
							$1663 = $3041;$1664 = $3042;$1667 = $1599;
						}
						$1662 = (($1664) - ($1663))|0;
						$1665 = $1662 >> 2;
						$i87$0655 = (($1665) + -1)|0;
						$1666 = ($i87$0655|0)>($1667|0);
						if ($1666) {
							$1668 = ((($2)) + 4|0);
							$i87$0$in656 = $1665;$i87$0657 = $i87$0655;
							while(1) {
								$1756 = (($i87$0$in656) + -2)|0;
								$1757 = (__ZNK8Textline9characterEi($this,$1756)|0);
								$1758 = ((($1757)) + 28|0);
								$1759 = ((($1757)) + 32|0);
								$1760 = HEAP32[$1759>>2]|0;
								$1761 = HEAP32[$1758>>2]|0;
								$1762 = (($1760) - ($1761))|0;
								$1763 = ($1762|0)==(8);
								L589: do {
									if ($1763) {
										$1766 = (__ZNK9Character5guessEi($1757,0)|0);
										$1767 = HEAP32[$1766>>2]|0;
										$1768 = ($1767|0)==(89);
										if ($1768) {
											$1769 = (__ZNK8Textline9characterEi($this,$i87$0657)|0);
											$1770 = ((($1769)) + 28|0);
											$1771 = ((($1769)) + 32|0);
											$1772 = HEAP32[$1771>>2]|0;
											$1773 = HEAP32[$1770>>2]|0;
											$1774 = ($1772|0)==($1773|0);
											if ($1774) {
												break;
											}
											$1775 = (__ZNK9Character5guessEi($1769,0)|0);
											$1776 = HEAP32[$1775>>2]|0;
											$1777 = (__ZN3UCS7isalnumEi($1776)|0);
											L593: do {
												if ($1777) {
													switch ($1776|0) {
														case 121: case 113: case 112: case 106: case 103:  {
															$1778 = ((($1757)) + 12|0);
															$1779 = HEAP32[$1778>>2]|0;
															$1780 = ((($1769)) + 12|0);
															$1781 = HEAP32[$1780>>2]|0;
															$1782 = (($1781) + -2)|0;
															$1783 = ($1779|0)<($1782|0);
															if ($1783) {
																break L589;
															} else {
																break L593;
															}
															break;
														}
														case 81:  {
															$1784 = ((($1757)) + 4|0);
															$1785 = HEAP32[$1784>>2]|0;
															$1786 = ((($1769)) + 4|0);
															$1787 = HEAP32[$1786>>2]|0;
															$1788 = (($1787) + 2)|0;
															$1789 = ($1785|0)<($1788|0);
															if ($1789) {
																break L589;
															} else {
																break L593;
															}
															break;
														}
														default: {
															label = 458;
															break L593;
														}
													}
												} else {
													switch ($1776|0) {
														case 124: case 46:  {
															label = 458;
															break;
														}
														default: {
															break L589;
														}
													}
												}
											} while(0);
											if ((label|0) == 458) {
												label = 0;
												$1790 = ((($1757)) + 12|0);
												$1791 = HEAP32[$1790>>2]|0;
												$1792 = ((($1769)) + 12|0);
												$1793 = HEAP32[$1792>>2]|0;
												$1794 = (($1793) + 2)|0;
												$1795 = ($1791|0)<($1794|0);
												if ($1795) {
													break;
												}
											}
											$1796 = HEAP32[$1758>>2]|0;
											$1797 = HEAP32[$1759>>2]|0;
											$1798 = ($1797|0)==($1796|0);
											if ($1798) {
												$1805 = $1796;
											} else {
												$__new_last2$i$i$i$i282 = $1796;
												$scevgep$i$i$i$i283 = ((($1797)) + -8|0);
												$1799 = $scevgep$i$i$i$i283;
												$1800 = (($1799) - ($__new_last2$i$i$i$i282))|0;
												$1801 = $1800 >>> 3;
												$1802 = $1801 ^ -1;
												$scevgep4$i$i$i$i284 = (($1797) + ($1802<<3)|0);
												HEAP32[$1759>>2] = $scevgep4$i$i$i$i284;
												$1805 = $scevgep4$i$i$i$i284;
											}
											HEAP32[$2>>2] = 121;
											HEAP32[$1668>>2] = 0;
											$1803 = ((($1757)) + 36|0);
											$1804 = HEAP32[$1803>>2]|0;
											$1806 = ($1805|0)==($1804|0);
											if ($1806) {
												__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($1758,$2);
											} else {
												$1807 = $2;
												$1808 = $1807;
												$1809 = HEAP32[$1808>>2]|0;
												$1810 = (($1807) + 4)|0;
												$1811 = $1810;
												$1812 = HEAP32[$1811>>2]|0;
												$1813 = $1805;
												$1814 = $1813;
												HEAP32[$1814>>2] = $1809;
												$1815 = (($1813) + 4)|0;
												$1816 = $1815;
												HEAP32[$1816>>2] = $1812;
												$1817 = HEAP32[$1759>>2]|0;
												$1818 = ((($1817)) + 8|0);
												HEAP32[$1759>>2] = $1818;
											}
										}
									}
								} while(0);
								$i87$0 = (($i87$0657) + -1)|0;
								$1764 = HEAP32[$25>>2]|0;
								$1765 = ($i87$0|0)>($1764|0);
								if ($1765) {
									$i87$0$in656$phi = $i87$0657;$i87$0657 = $i87$0;$i87$0$in656 = $i87$0$in656$phi;
								} else {
									break;
								}
							}
						}
						$1755 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
						if ($1755) {
							$1819 = HEAP32[$25>>2]|0;
							$1820 = HEAP32[$28>>2]|0;
							$1821 = HEAP32[$27>>2]|0;
							$1822 = (($1820) - ($1821))|0;
							$1823 = $1822 >> 2;
							$1824 = ($1819|0)<($1823|0);
							if ($1824) {
								$i93$0652 = $1819;
								while(1) {
									$1825 = (__ZNK8Textline9characterEi($this,$i93$0652)|0);
									$1826 = ((($1825)) + 28|0);
									$1827 = ((($1825)) + 32|0);
									$1828 = HEAP32[$1827>>2]|0;
									$1829 = HEAP32[$1826>>2]|0;
									$1830 = (($1828) - ($1829))|0;
									$1831 = ($1830|0)==(8);
									L615: do {
										if ($1831) {
											$1832 = (__ZNK9Character5guessEi($1825,0)|0);
											$1833 = HEAP32[$1832>>2]|0;
											$1834 = ($1833|0)==(351);
											if (!($1834)) {
												break;
											}
											$1835 = HEAP32[$25>>2]|0;
											$1836 = ($i93$0652|0)>($1835|0);
											do {
												if ($1836) {
													$1837 = (($i93$0652) + -1)|0;
													$1838 = (__ZNK8Textline9characterEi($this,$1837)|0);
													$1839 = ((($1838)) + 28|0);
													$1840 = ((($1838)) + 32|0);
													$1841 = HEAP32[$1840>>2]|0;
													$1842 = HEAP32[$1839>>2]|0;
													$1843 = ($1841|0)==($1842|0);
													if ($1843) {
														break;
													}
													$1844 = (__ZNK8Textline9characterEi($this,$1837)|0);
													$1845 = (__ZNK9Character5guessEi($1844,0)|0);
													$1846 = HEAP32[$1845>>2]|0;
													$1847 = (__ZN3UCS7islowerEi($1846)|0);
													if ($1847) {
														$1848 = ((($1825)) + 4|0);
														$1849 = HEAP32[$1848>>2]|0;
														$1850 = ((($1844)) + 4|0);
														$1851 = HEAP32[$1850>>2]|0;
														$1852 = (($1851) + -2)|0;
														$1853 = ($1849|0)<($1852|0);
														if (!($1853)) {
															label = 472;
														}
													} else {
														label = 472;
													}
													if ((label|0) == 472) {
														label = 0;
														$1854 = (__ZN3UCS11base_letterEi($1846)|0);
														$1855 = ($1854|0)!=(0);
														$1856 = ($1846|0)!=(305);
														$or$cond66 = $1856 & $1855;
														if (!($or$cond66)) {
															break;
														}
														$1857 = ((($1825)) + 4|0);
														$1858 = HEAP32[$1857>>2]|0;
														$1859 = ((($1844)) + 4|0);
														$1860 = HEAP32[$1859>>2]|0;
														$1861 = (__ZN5Ocrad7similarEiiii($1858,$1860,10,1)|0);
														if (!($1861)) {
															break;
														}
													}
													__ZN9Character12insert_guessEiii($1825,0,350,1);
													break L615;
												}
											} while(0);
											$1862 = HEAP32[$28>>2]|0;
											$1863 = HEAP32[$27>>2]|0;
											$1864 = (($1862) - ($1863))|0;
											$1865 = $1864 >> 2;
											$1866 = (($1865) + -1)|0;
											$1867 = ($i93$0652|0)<($1866|0);
											if (!($1867)) {
												break;
											}
											$1868 = (($i93$0652) + 1)|0;
											$1869 = (__ZNK8Textline9characterEi($this,$1868)|0);
											$1870 = ((($1869)) + 28|0);
											$1871 = ((($1869)) + 32|0);
											$1872 = HEAP32[$1871>>2]|0;
											$1873 = HEAP32[$1870>>2]|0;
											$1874 = ($1872|0)==($1873|0);
											if ($1874) {
												break;
											}
											$1875 = (__ZNK8Textline9characterEi($this,$1868)|0);
											$1876 = (__ZNK9Character5guessEi($1875,0)|0);
											$1877 = HEAP32[$1876>>2]|0;
											$1878 = (__ZN3UCS7islowerEi($1877)|0);
											if ($1878) {
												$1879 = ((($1825)) + 4|0);
												$1880 = HEAP32[$1879>>2]|0;
												$1881 = ((($1875)) + 4|0);
												$1882 = HEAP32[$1881>>2]|0;
												$1883 = (($1882) + -2)|0;
												$1884 = ($1880|0)<($1883|0);
												if (!($1884)) {
													label = 479;
												}
											} else {
												label = 479;
											}
											if ((label|0) == 479) {
												label = 0;
												$1885 = (__ZN3UCS11base_letterEi($1877)|0);
												$1886 = ($1885|0)!=(0);
												$1887 = ($1877|0)!=(305);
												$or$cond68 = $1887 & $1886;
												if (!($or$cond68)) {
													break;
												}
												$1888 = ((($1825)) + 4|0);
												$1889 = HEAP32[$1888>>2]|0;
												$1890 = ((($1875)) + 4|0);
												$1891 = HEAP32[$1890>>2]|0;
												$1892 = (__ZN5Ocrad7similarEiiii($1889,$1891,10,1)|0);
												if (!($1892)) {
													break;
												}
											}
											__ZN9Character12insert_guessEiii($1825,0,350,1);
										}
									} while(0);
									$1893 = (($i93$0652) + 1)|0;
									$1894 = HEAP32[$28>>2]|0;
									$1895 = HEAP32[$27>>2]|0;
									$1896 = (($1894) - ($1895))|0;
									$1897 = $1896 >> 2;
									$1898 = ($1893|0)<($1897|0);
									if ($1898) {
										$i93$0652 = $1893;
									} else {
										$1901 = $1895;$1902 = $1894;
										break;
									}
								}
							} else {
								$1901 = $1821;$1902 = $1820;
							}
						} else {
							$$pre879 = HEAP32[$28>>2]|0;
							$$pre880 = HEAP32[$27>>2]|0;
							$1901 = $$pre880;$1902 = $$pre879;
						}
						$1899 = HEAP32[$25>>2]|0;
						$1900 = (($1902) - ($1901))|0;
						$1903 = $1900 >> 2;
						$1904 = ($1899|0)<($1903|0);
						if ($1904) {
							$1912 = $1901;$1913 = $1902;$begin102$0648 = $1899;
							while(1) {
								$1911 = (($1913) - ($1912))|0;
								$1914 = $1911 >> 2;
								$1915 = ($1914>>>0)>($begin102$0648>>>0);
								L643: do {
									if ($1915) {
										$$02$i278 = $begin102$0648;$$in$i277 = $1912;
										while(1) {
											$1916 = $$in$i277;
											$1917 = (($1916) + ($$02$i278<<2)|0);
											$1918 = HEAP32[$1917>>2]|0;
											$1919 = (__ZNK9Character5maybeEi($1918,32)|0);
											if ($1919) {
												$$0$lcssa$i279 = $$02$i278;
												break L643;
											}
											$1920 = HEAP32[$27>>2]|0;
											$1921 = (($1920) + ($$02$i278<<2)|0);
											$1922 = HEAP32[$1921>>2]|0;
											$1923 = (__ZNK9Character5maybeEi($1922,45)|0);
											if ($1923) {
												$$0$lcssa$i279 = $$02$i278;
												break L643;
											}
											$1924 = (($$02$i278) + 1)|0;
											$1925 = HEAP32[$28>>2]|0;
											$1926 = HEAP32[$27>>2]|0;
											$1927 = (($1925) - ($1926))|0;
											$1928 = $1927 >> 2;
											$1929 = ($1924>>>0)<($1928>>>0);
											if ($1929) {
												$$02$i278 = $1924;$$in$i277 = $1926;
											} else {
												$$0$lcssa$i279 = $1924;
												break;
											}
										}
									} else {
										$$0$lcssa$i279 = $begin102$0648;
									}
								} while(0);
								$1930 = (($$0$lcssa$i279) - ($begin102$0648))|0;
								$1931 = ($1930|0)<(2);
								do {
									if (!($1931)) {
										$1932 = (__ZNK8Textline9characterEi($this,$begin102$0648)|0);
										$1933 = ((($1932)) + 28|0);
										$1934 = ((($1932)) + 32|0);
										$1935 = HEAP32[$1934>>2]|0;
										$1936 = HEAP32[$1933>>2]|0;
										$1937 = ($1935|0)==($1936|0);
										if ($1937) {
											break;
										}
										$1938 = ((($1932)) + 12|0);
										$1939 = HEAP32[$1938>>2]|0;
										$1940 = ((($1932)) + 4|0);
										$1941 = HEAP32[$1940>>2]|0;
										$1942 = (($1939) + 1)|0;
										$1943 = (($1942) - ($1941))|0;
										$1944 = (__ZNK9Character5guessEi($1932,0)|0);
										$1945 = HEAP32[$1944>>2]|0;
										$code$off$i275 = (($1945) + -48)|0;
										$1946 = ($code$off$i275>>>0)<(10);
										$1947 = ($1945|0)==(108);
										$or$cond71 = $1947 | $1946;
										$1948 = $1945 | 32;
										$1949 = ($1948|0)==(111);
										$1950 = $1949 | $or$cond71;
										if ($1950) {
											$digits$0 = 1;$i104$0$in = $begin102$0648;
										} else {
											break;
										}
										while(1) {
											$i104$0 = (($i104$0$in) + 1)|0;
											$1951 = ($i104$0|0)<($$0$lcssa$i279|0);
											if (!($1951)) {
												$digits$3 = $digits$0;$i104$0$lcssa = $i104$0;
												break;
											}
											$1952 = (__ZNK8Textline9characterEi($this,$i104$0)|0);
											$1953 = ((($1952)) + 28|0);
											$1954 = ((($1952)) + 32|0);
											$1955 = HEAP32[$1954>>2]|0;
											$1956 = HEAP32[$1953>>2]|0;
											$1957 = ($1955|0)==($1956|0);
											if ($1957) {
												$digits$3 = $digits$0;$i104$0$lcssa = $i104$0;
												break;
											}
											$1958 = (__ZNK9Character5guessEi($1952,0)|0);
											$1959 = HEAP32[$1958>>2]|0;
											$code$off$i274 = (($1959) + -48)|0;
											$1960 = ($code$off$i274>>>0)<(10);
											$1961 = ($1959|0)==(108);
											$or$cond77 = $1961 | $1960;
											$1962 = $1959 | 32;
											$1963 = ($1962|0)==(111);
											$1964 = $1963 | $or$cond77;
											if ($1964) {
												$1965 = ((($1952)) + 12|0);
												$1966 = HEAP32[$1965>>2]|0;
												$1967 = ((($1952)) + 4|0);
												$1968 = HEAP32[$1967>>2]|0;
												$1969 = (($1966) + 1)|0;
												$1970 = (($1969) - ($1968))|0;
												$1971 = (__ZN5Ocrad7similarEiiii($1970,$1943,10,1)|0);
												$1972 = $1971&1;
												$$digits$0 = (($1972) + ($digits$0))|0;
												$digits$1 = $$digits$0;$valid$0$off0 = $1971;
											} else {
												$digits$1 = $digits$0;$valid$0$off0 = 0;
											}
											$1973 = $1959 | 2;
											$1974 = ($1973|0)==(46);
											$1975 = ($1959|0)==(58);
											$or$cond85 = $1975 | $1974;
											$1976 = ($1959|0)==(43);
											$or$cond87 = $1976 | $or$cond85;
											$1977 = ($1959|0)==(45);
											$or$cond89 = $1977 | $or$cond87;
											$$valid$0$off0 = $or$cond89 | $valid$0$off0;
											if ($$valid$0$off0) {
												$digits$0 = $digits$1;$i104$0$in = $i104$0;
											} else {
												$digits$3 = $digits$1;$i104$0$lcssa = $i104$0;
												break;
											}
										}
										$1978 = ($i104$0$lcssa|0)>=($$0$lcssa$i279|0);
										$1979 = ($digits$3|0)>(1);
										$or$cond92 = $1978 & $1979;
										$1980 = ($$0$lcssa$i279|0)>($begin102$0648|0);
										$or$cond787 = $or$cond92 & $1980;
										if ($or$cond787) {
											$i104$1646 = $begin102$0648;
										} else {
											break;
										}
										while(1) {
											$1981 = (__ZNK8Textline9characterEi($this,$i104$1646)|0);
											$1982 = (__ZNK9Character5guessEi($1981,0)|0);
											$1983 = HEAP32[$1982>>2]|0;
											$1984 = ($1983|0)==(108);
											if ($1984) {
												$code109$0$ph = 49;
												label = 503;
											} else {
												$1985 = $1983 | 32;
												$1986 = ($1985|0)==(111);
												if ($1986) {
													$code109$0$ph = 48;
													label = 503;
												}
											}
											if ((label|0) == 503) {
												label = 0;
												$1987 = (__ZNK9Character5guessEi($1981,0)|0);
												$1988 = ((($1987)) + 4|0);
												$1989 = HEAP32[$1988>>2]|0;
												$1990 = (($1989) + 1)|0;
												__ZN9Character12insert_guessEiii($1981,0,$code109$0$ph,$1990);
											}
											$1991 = (($i104$1646) + 1)|0;
											$exitcond860 = ($1991|0)==($$0$lcssa$i279|0);
											if ($exitcond860) {
												break;
											} else {
												$i104$1646 = $1991;
											}
										}
									}
								} while(0);
								$1992 = (($$0$lcssa$i279) + 1)|0;
								$1993 = HEAP32[$28>>2]|0;
								$1994 = HEAP32[$27>>2]|0;
								$1995 = (($1993) - ($1994))|0;
								$1996 = $1995 >> 2;
								$1997 = ($1992|0)<($1996|0);
								if ($1997) {
									$1912 = $1994;$1913 = $1993;$begin102$0648 = $1992;
								} else {
									$$lcssa1366 = $1993;$$lcssa1367 = $1994;
									break;
								}
							}
							$$pre881 = HEAP32[$25>>2]|0;
							$1906 = $$lcssa1367;$1907 = $$lcssa1366;$1909 = $$pre881;
						} else {
							$1906 = $1901;$1907 = $1902;$1909 = $1899;
						}
						$1905 = (($1907) - ($1906))|0;
						$1908 = $1905 >> 2;
						$1910 = ($1909|0)<($1908|0);
						if ($1910) {
							$2005 = $1906;$2006 = $1907;$begin111$0642 = $1909;
							while(1) {
								$2004 = (($2006) - ($2005))|0;
								$2007 = $2004 >> 2;
								$2008 = ($2007>>>0)>($begin111$0642>>>0);
								L674: do {
									if ($2008) {
										$$02$i269 = $begin111$0642;$$in$i268 = $2005;
										while(1) {
											$2009 = $$in$i268;
											$2010 = (($2009) + ($$02$i269<<2)|0);
											$2011 = HEAP32[$2010>>2]|0;
											$2012 = (__ZNK9Character5maybeEi($2011,32)|0);
											if ($2012) {
												$$0$lcssa$i270 = $$02$i269;
												break L674;
											}
											$2013 = HEAP32[$27>>2]|0;
											$2014 = (($2013) + ($$02$i269<<2)|0);
											$2015 = HEAP32[$2014>>2]|0;
											$2016 = (__ZNK9Character5maybeEi($2015,45)|0);
											if ($2016) {
												$$0$lcssa$i270 = $$02$i269;
												break L674;
											}
											$2017 = (($$02$i269) + 1)|0;
											$2018 = HEAP32[$28>>2]|0;
											$2019 = HEAP32[$27>>2]|0;
											$2020 = (($2018) - ($2019))|0;
											$2021 = $2020 >> 2;
											$2022 = ($2017>>>0)<($2021>>>0);
											if ($2022) {
												$$02$i269 = $2017;$$in$i268 = $2019;
											} else {
												$$0$lcssa$i270 = $2017;
												break;
											}
										}
									} else {
										$$0$lcssa$i270 = $begin111$0642;
									}
								} while(0);
								$2023 = (-2 - ($begin111$0642))|0;
								$$off = (($2023) + ($$0$lcssa$i270))|0;
								$2024 = ($$off>>>0)>(2);
								L680: do {
									if (!($2024)) {
										$2025 = (__ZNK8Textline9characterEi($this,$begin111$0642)|0);
										$2026 = ((($2025)) + 12|0);
										$2027 = HEAP32[$2026>>2]|0;
										$2028 = ((($2025)) + 4|0);
										$2029 = HEAP32[$2028>>2]|0;
										$2030 = (($2027) + 1)|0;
										$2031 = (($2030) - ($2029))|0;
										$2032 = ($begin111$0642|0)<($$0$lcssa$i270|0);
										if ($2032) {
											$i114$0637 = $begin111$0642;
										} else {
											break;
										}
										while(1) {
											$2035 = (__ZNK8Textline9characterEi($this,$i114$0637)|0);
											$2036 = (__ZNK9Character5maybeEi($2035,124)|0);
											if (!($2036)) {
												break L680;
											}
											$2037 = ((($2035)) + 12|0);
											$2038 = HEAP32[$2037>>2]|0;
											$2039 = ((($2035)) + 4|0);
											$2040 = HEAP32[$2039>>2]|0;
											$2041 = (($2038) + 1)|0;
											$2042 = (($2041) - ($2040))|0;
											$2043 = (__ZN5Ocrad7similarEiiii($2042,$2031,10,1)|0);
											$2033 = (($i114$0637) + 1)|0;
											if (!($2043)) {
												break L680;
											}
											$2034 = ($2033|0)<($$0$lcssa$i270|0);
											if ($2034) {
												$i114$0637 = $2033;
											} else {
												break;
											}
										}
										if ($2032) {
											$i114$1640 = $begin111$0642;
										} else {
											break;
										}
										while(1) {
											$2044 = (__ZNK8Textline9characterEi($this,$i114$1640)|0);
											$2045 = (__ZNK8Textline9characterEi($this,$i114$1640)|0);
											$2046 = (__ZNK9Character5maybeEi($2045,73)|0);
											if (!($2046)) {
												$2047 = (__ZNK9Character5guessEi($2044,0)|0);
												$2048 = ((($2047)) + 4|0);
												$2049 = HEAP32[$2048>>2]|0;
												$2050 = (($2049) + 1)|0;
												__ZN9Character12insert_guessEiii($2044,0,73,$2050);
											}
											$2051 = (($i114$1640) + 1)|0;
											$exitcond = ($2051|0)==($$0$lcssa$i270|0);
											if ($exitcond) {
												break;
											} else {
												$i114$1640 = $2051;
											}
										}
									}
								} while(0);
								$2052 = (($$0$lcssa$i270) + 1)|0;
								$2053 = HEAP32[$28>>2]|0;
								$2054 = HEAP32[$27>>2]|0;
								$2055 = (($2053) - ($2054))|0;
								$2056 = $2055 >> 2;
								$2057 = ($2052|0)<($2056|0);
								if ($2057) {
									$2005 = $2054;$2006 = $2053;$begin111$0642 = $2052;
								} else {
									$$lcssa1364 = $2053;$$lcssa1365 = $2054;
									break;
								}
							}
							$$pre882 = HEAP32[$25>>2]|0;
							$1999 = $$lcssa1365;$2000 = $$lcssa1364;$2002 = $$pre882;
						} else {
							$1999 = $1906;$2000 = $1907;$2002 = $1909;
						}
						$1998 = (($2000) - ($1999))|0;
						$2001 = $1998 >> 2;
						$2003 = ($2002|0)<($2001|0);
						if ($2003) {
							$i118$0632 = $2002;
							while(1) {
								$2064 = (__ZNK8Textline9characterEi($this,$i118$0632)|0);
								$2065 = ((($2064)) + 28|0);
								$2066 = ((($2064)) + 32|0);
								$2067 = HEAP32[$2066>>2]|0;
								$2068 = HEAP32[$2065>>2]|0;
								$2069 = (($2067) - ($2068))|0;
								$2070 = ($2069|0)==(16);
								L698: do {
									if ($2070) {
										$2071 = (__ZNK9Character5guessEi($2064,0)|0);
										$2072 = HEAP32[$2071>>2]|0;
										$2073 = ($2072|0)==(97);
										if (!($2073)) {
											break;
										}
										$2074 = (__ZNK9Character5guessEi($2064,1)|0);
										$2075 = HEAP32[$2074>>2]|0;
										$2076 = ($2075|0)==(81);
										if (!($2076)) {
											break;
										}
										$2077 = ((($2064)) + 12|0);
										$2078 = HEAP32[$2077>>2]|0;
										$2079 = ((($2064)) + 4|0);
										$2080 = HEAP32[$2079>>2]|0;
										$2081 = (($2078) + 1)|0;
										$2082 = (($2081) - ($2080))|0;
										$2083 = $2082 << 2;
										$2084 = (__ZNK8Textline11mean_heightEv($this)|0);
										$2085 = ($2084*5)|0;
										$2086 = ($2083|0)>($2085|0);
										if ($2086) {
											__ZN9Character12swap_guessesEii($2064,0,1);
											__ZN8Textline21check_lower_ambiguousEv($this);
											break;
										}
										$2087 = HEAP32[$28>>2]|0;
										$2088 = HEAP32[$27>>2]|0;
										$2089 = (($2087) - ($2088))|0;
										$2090 = $2089 >> 2;
										$2091 = (($2090) + -1)|0;
										$2092 = ($i118$0632|0)<($2091|0);
										do {
											if ($2092) {
												$2093 = (($i118$0632) + 1)|0;
												$2094 = (__ZNK8Textline9characterEi($this,$2093)|0);
												$2095 = ((($2094)) + 28|0);
												$2096 = ((($2094)) + 32|0);
												$2097 = HEAP32[$2096>>2]|0;
												$2098 = HEAP32[$2095>>2]|0;
												$2099 = ($2097|0)==($2098|0);
												if ($2099) {
													break;
												}
												$2100 = (__ZNK8Textline9characterEi($this,$2093)|0);
												$2101 = (__ZNK9Character5guessEi($2100,0)|0);
												$2102 = HEAP32[$2101>>2]|0;
												$2103 = (__ZN3UCS6ishighEi($2102)|0);
												if (!($2103)) {
													break;
												}
												$2104 = HEAP32[$2077>>2]|0;
												$2105 = HEAP32[$2079>>2]|0;
												$2106 = (($2104) + 1)|0;
												$2107 = (($2106) - ($2105))|0;
												$2108 = ($2107*10)|0;
												$2109 = (__ZNK8Textline9characterEi($this,$2093)|0);
												$2110 = ((($2109)) + 12|0);
												$2111 = HEAP32[$2110>>2]|0;
												$2112 = ((($2109)) + 4|0);
												$2113 = HEAP32[$2112>>2]|0;
												$2114 = (($2111) + 1)|0;
												$2115 = (($2114) - ($2113))|0;
												$2116 = ($2115*9)|0;
												$2117 = ($2108|0)>($2116|0);
												if (!($2117)) {
													break;
												}
												__ZN9Character12swap_guessesEii($2064,0,1);
												__ZN8Textline21check_lower_ambiguousEv($this);
												break L698;
											}
										} while(0);
										$2118 = HEAP32[$25>>2]|0;
										$2119 = ($i118$0632|0)>($2118|0);
										if (!($2119)) {
											break;
										}
										$2120 = (($i118$0632) + -1)|0;
										$2121 = (__ZNK8Textline9characterEi($this,$2120)|0);
										$2122 = ((($2121)) + 28|0);
										$2123 = ((($2121)) + 32|0);
										$2124 = HEAP32[$2123>>2]|0;
										$2125 = HEAP32[$2122>>2]|0;
										$2126 = ($2124|0)==($2125|0);
										if ($2126) {
											break;
										}
										$2127 = (__ZNK8Textline9characterEi($this,$2120)|0);
										$2128 = (__ZNK9Character5guessEi($2127,0)|0);
										$2129 = HEAP32[$2128>>2]|0;
										$2130 = (__ZN3UCS6ishighEi($2129)|0);
										if (!($2130)) {
											break;
										}
										$2131 = HEAP32[$2077>>2]|0;
										$2132 = HEAP32[$2079>>2]|0;
										$2133 = (($2131) + 1)|0;
										$2134 = (($2133) - ($2132))|0;
										$2135 = ($2134*10)|0;
										$2136 = (__ZNK8Textline9characterEi($this,$2120)|0);
										$2137 = ((($2136)) + 12|0);
										$2138 = HEAP32[$2137>>2]|0;
										$2139 = ((($2136)) + 4|0);
										$2140 = HEAP32[$2139>>2]|0;
										$2141 = (($2138) + 1)|0;
										$2142 = (($2141) - ($2140))|0;
										$2143 = ($2142*9)|0;
										$2144 = ($2135|0)>($2143|0);
										if (!($2144)) {
											break;
										}
										__ZN9Character12swap_guessesEii($2064,0,1);
										__ZN8Textline21check_lower_ambiguousEv($this);
									}
								} while(0);
								$2145 = (($i118$0632) + 1)|0;
								$2146 = HEAP32[$28>>2]|0;
								$2147 = HEAP32[$27>>2]|0;
								$2148 = (($2146) - ($2147))|0;
								$2149 = $2148 >> 2;
								$2150 = ($2145|0)<($2149|0);
								if ($2150) {
									$i118$0632 = $2145;
								} else {
									$$lcssa1362 = $2146;$$lcssa1363 = $2147;
									break;
								}
							}
							$$pre883 = HEAP32[$25>>2]|0;
							$2059 = $$lcssa1363;$2060 = $$lcssa1362;$2062 = $$pre883;
						} else {
							$2059 = $1999;$2060 = $2000;$2062 = $2002;
						}
						$2058 = (($2060) - ($2059))|0;
						$2061 = $2058 >> 2;
						$2063 = ($2062|0)<($2061|0);
						if ($2063) {
							$i125$0627 = $2062;
							while(1) {
								$2157 = (__ZNK8Textline9characterEi($this,$i125$0627)|0);
								$2158 = ((($2157)) + 28|0);
								$2159 = ((($2157)) + 32|0);
								$2160 = HEAP32[$2159>>2]|0;
								$2161 = HEAP32[$2158>>2]|0;
								$2162 = (($2160) - ($2161))|0;
								$2163 = ($2162|0)==(8);
								L721: do {
									if ($2163) {
										$2164 = (__ZNK9Character5guessEi($2157,0)|0);
										$2165 = HEAP32[$2164>>2]|0;
										$2166 = ($2165|0)==(108);
										$2167 = $2165 | 16;
										$2168 = ($2167|0)==(124);
										if (!($2168)) {
											break;
										}
										$2169 = ($i125$0627|0)>(0);
										do {
											if ($2169) {
												$2170 = (($i125$0627) + -1)|0;
												$2171 = (__ZNK8Textline9characterEi($this,$2170)|0);
												$2172 = ((($2171)) + 28|0);
												$2173 = ((($2171)) + 32|0);
												$2174 = HEAP32[$2173>>2]|0;
												$2175 = HEAP32[$2172>>2]|0;
												$2176 = ($2174|0)==($2175|0);
												if ($2176) {
													$lcode$0 = 0;
													break;
												}
												$2177 = (__ZNK8Textline9characterEi($this,$2170)|0);
												$2178 = (__ZNK9Character5guessEi($2177,0)|0);
												$2179 = HEAP32[$2178>>2]|0;
												$lcode$0 = $2179;
											} else {
												$lcode$0 = 0;
											}
										} while(0);
										$2180 = HEAP32[$28>>2]|0;
										$2181 = HEAP32[$27>>2]|0;
										$2182 = (($2180) - ($2181))|0;
										$2183 = $2182 >> 2;
										$2184 = (($2183) + -1)|0;
										$2185 = ($i125$0627|0)<($2184|0);
										do {
											if ($2185) {
												$2186 = (($i125$0627) + 1)|0;
												$2187 = (__ZNK8Textline9characterEi($this,$2186)|0);
												$2188 = ((($2187)) + 28|0);
												$2189 = ((($2187)) + 32|0);
												$2190 = HEAP32[$2189>>2]|0;
												$2191 = HEAP32[$2188>>2]|0;
												$2192 = ($2190|0)==($2191|0);
												if ($2192) {
													$rcode$0 = 0;
													break;
												}
												$2193 = (__ZNK8Textline9characterEi($this,$2186)|0);
												$2194 = (__ZNK9Character5guessEi($2193,0)|0);
												$2195 = HEAP32[$2194>>2]|0;
												$rcode$0 = $2195;
											} else {
												$rcode$0 = 0;
											}
										} while(0);
										$2196 = (__ZN3UCS7isupperEi($rcode$0)|0);
										$code$off$i266 = (($rcode$0) + -48)|0;
										$2197 = ($code$off$i266>>>0)<(10);
										$or$cond370 = $2196 | $2197;
										L732: do {
											if ($or$cond370) {
												$2198 = ($lcode$0|0)==(0);
												do {
													if (!($2198)) {
														$2199 = (__ZN3UCS7isupperEi($lcode$0)|0);
														if ($2199) {
															break;
														}
														$2200 = (__ZN3UCS7isalnumEi($lcode$0)|0);
														if ($2200) {
															break L732;
														}
													}
												} while(0);
												__ZN9Character12insert_guessEiii($2157,0,73,1);
												break L721;
											}
										} while(0);
										if ($2166) {
											break;
										}
										$2201 = (__ZN3UCS7isalphaEi($lcode$0)|0);
										do {
											if (!($2201)) {
												$2202 = (__ZN3UCS7isalphaEi($rcode$0)|0);
												if ($2202) {
													break;
												}
												$2203 = ($rcode$0|0)==(124);
												if (!($2203)) {
													break L721;
												}
												$2204 = ($lcode$0|0)==(0);
												if (!($2204)) {
													$2205 = (__ZN3UCS7isalnumEi($lcode$0)|0);
													if ($2205) {
														break L721;
													}
												}
												$2206 = HEAP32[$28>>2]|0;
												$2207 = HEAP32[$27>>2]|0;
												$2208 = (($2206) - ($2207))|0;
												$2209 = $2208 >> 2;
												$2210 = (($2209) + -2)|0;
												$2211 = ($i125$0627|0)<($2210|0);
												do {
													if ($2211) {
														$2212 = (($i125$0627) + 2)|0;
														$2213 = (__ZNK8Textline9characterEi($this,$2212)|0);
														$2214 = ((($2213)) + 28|0);
														$2215 = ((($2213)) + 32|0);
														$2216 = HEAP32[$2215>>2]|0;
														$2217 = HEAP32[$2214>>2]|0;
														$2218 = ($2216|0)==($2217|0);
														if ($2218) {
															break;
														}
														$2219 = (__ZNK8Textline9characterEi($this,$2212)|0);
														$2220 = (__ZNK9Character5guessEi($2219,0)|0);
														$2221 = HEAP32[$2220>>2]|0;
														$2222 = (__ZN3UCS7isalphaEi($2221)|0);
														if (!($2222)) {
															break;
														}
														__ZN9Character12insert_guessEiii($2157,0,108,1);
														break L721;
													}
												} while(0);
												$2223 = ($i125$0627|0)>(1);
												if (!($2223)) {
													break L721;
												}
												$2224 = (($i125$0627) + -2)|0;
												$2225 = (__ZNK8Textline9characterEi($this,$2224)|0);
												$2226 = ((($2225)) + 28|0);
												$2227 = ((($2225)) + 32|0);
												$2228 = HEAP32[$2227>>2]|0;
												$2229 = HEAP32[$2226>>2]|0;
												$2230 = ($2228|0)==($2229|0);
												if ($2230) {
													break L721;
												}
												$2231 = (__ZNK8Textline9characterEi($this,$2224)|0);
												$2232 = (__ZNK9Character5guessEi($2231,0)|0);
												$2233 = HEAP32[$2232>>2]|0;
												$2234 = (__ZN3UCS7isalphaEi($2233)|0);
												if (!($2234)) {
													break L721;
												}
												__ZN9Character12insert_guessEiii($2157,0,108,1);
												break L721;
											}
										} while(0);
										__ZN9Character12insert_guessEiii($2157,0,108,1);
									}
								} while(0);
								$2235 = (($i125$0627) + 1)|0;
								$2236 = HEAP32[$28>>2]|0;
								$2237 = HEAP32[$27>>2]|0;
								$2238 = (($2236) - ($2237))|0;
								$2239 = $2238 >> 2;
								$2240 = ($2235|0)<($2239|0);
								if ($2240) {
									$i125$0627 = $2235;
								} else {
									$$lcssa1360 = $2236;$$lcssa1361 = $2237;
									break;
								}
							}
							$$pre884 = HEAP32[$25>>2]|0;
							$2152 = $$lcssa1361;$2153 = $$lcssa1360;$2155 = $$pre884;
						} else {
							$2152 = $2059;$2153 = $2060;$2155 = $2062;
						}
						$2151 = (($2153) - ($2152))|0;
						$2154 = $2151 >> 2;
						$2156 = ($2155|0)<($2154|0);
						if ($2156) {
							$2243 = $2152;$2244 = $2153;$begin130$0623 = $2155;
							while(1) {
								$2242 = (($2244) - ($2243))|0;
								$2245 = $2242 >> 2;
								$2246 = ($2245>>>0)>($begin130$0623>>>0);
								L763: do {
									if ($2246) {
										$$02$i = $begin130$0623;$$in$i = $2243;
										while(1) {
											$2247 = $$in$i;
											$2248 = (($2247) + ($$02$i<<2)|0);
											$2249 = HEAP32[$2248>>2]|0;
											$2250 = (__ZNK9Character5maybeEi($2249,32)|0);
											if ($2250) {
												$$0$lcssa$i = $$02$i;
												break L763;
											}
											$2251 = HEAP32[$27>>2]|0;
											$2252 = (($2251) + ($$02$i<<2)|0);
											$2253 = HEAP32[$2252>>2]|0;
											$2254 = (__ZNK9Character5maybeEi($2253,45)|0);
											if ($2254) {
												$$0$lcssa$i = $$02$i;
												break L763;
											}
											$2255 = (($$02$i) + 1)|0;
											$2256 = HEAP32[$28>>2]|0;
											$2257 = HEAP32[$27>>2]|0;
											$2258 = (($2256) - ($2257))|0;
											$2259 = $2258 >> 2;
											$2260 = ($2255>>>0)<($2259>>>0);
											if ($2260) {
												$$02$i = $2255;$$in$i = $2257;
											} else {
												$$0$lcssa$i = $2255;
												break;
											}
										}
									} else {
										$$0$lcssa$i = $begin130$0623;
									}
								} while(0);
								$2261 = (($$0$lcssa$i) - ($begin130$0623))|0;
								$2262 = ($2261|0)<(3);
								L769: do {
									if (!($2262)) {
										$2263 = (($$0$lcssa$i) + -1)|0;
										$2264 = (__ZNK8Textline9characterEi($this,$2263)|0);
										$2265 = (__ZNK9Character5maybeEi($2264,124)|0);
										if (!($2265)) {
											break;
										}
										$2266 = (__ZNK9Character5maybeEi($2264,73)|0);
										if ($2266) {
											break;
										}
										$2267 = ((($2264)) + 12|0);
										$2268 = HEAP32[$2267>>2]|0;
										$2269 = ((($2264)) + 4|0);
										$2270 = HEAP32[$2269>>2]|0;
										$2271 = (($2268) + 1)|0;
										$2272 = (($2271) - ($2270))|0;
										$2273 = ($begin130$0623|0)<($2263|0);
										if ($2273) {
											$i133$0619 = $begin130$0623;
											while(1) {
												$2276 = (__ZNK8Textline9characterEi($this,$i133$0619)|0);
												$2277 = ((($2276)) + 28|0);
												$2278 = ((($2276)) + 32|0);
												$2279 = HEAP32[$2278>>2]|0;
												$2280 = HEAP32[$2277>>2]|0;
												$2281 = ($2279|0)==($2280|0);
												if ($2281) {
													break L769;
												}
												$2282 = (__ZNK9Character5guessEi($2276,0)|0);
												$2283 = HEAP32[$2282>>2]|0;
												$2284 = (__ZN3UCS7isupperEi($2283)|0);
												$code$off$i = (($2283) + -48)|0;
												$2285 = ($code$off$i>>>0)<(10);
												$or$cond373 = $2284 | $2285;
												if (!($or$cond373)) {
													break L769;
												}
												$2286 = ((($2276)) + 12|0);
												$2287 = HEAP32[$2286>>2]|0;
												$2288 = ((($2276)) + 4|0);
												$2289 = HEAP32[$2288>>2]|0;
												$2290 = (($2287) + 1)|0;
												$2291 = (($2290) - ($2289))|0;
												$2292 = (__ZN5Ocrad7similarEiiii($2291,$2272,10,1)|0);
												$2274 = (($i133$0619) + 1)|0;
												if (!($2292)) {
													break L769;
												}
												$2275 = ($2274|0)<($2263|0);
												if ($2275) {
													$i133$0619 = $2274;
												} else {
													break;
												}
											}
										}
										$2293 = (__ZNK9Character5guessEi($2264,0)|0);
										$2294 = ((($2293)) + 4|0);
										$2295 = HEAP32[$2294>>2]|0;
										$2296 = (($2295) + 1)|0;
										__ZN9Character12insert_guessEiii($2264,0,73,$2296);
									}
								} while(0);
								$2297 = (($$0$lcssa$i) + 1)|0;
								$2298 = HEAP32[$28>>2]|0;
								$2299 = HEAP32[$27>>2]|0;
								$2300 = (($2298) - ($2299))|0;
								$2301 = $2300 >> 2;
								$2302 = ($2297|0)<($2301|0);
								if ($2302) {
									$2243 = $2299;$2244 = $2298;$begin130$0623 = $2297;
								} else {
									break;
								}
							}
						}
						$2241 = (__ZNK7Charset7enabledENS_5ValueE($charset,2)|0);
						do {
							if ($2241) {
								$2303 = HEAP32[$25>>2]|0;
								$2304 = HEAP32[$28>>2]|0;
								$2305 = HEAP32[$27>>2]|0;
								$2306 = (($2304) - ($2305))|0;
								$2307 = $2306 >> 2;
								$2308 = ($2303|0)<($2307|0);
								if (!($2308)) {
									$2446 = $2305;$2447 = $2304;
									break;
								}
								$2309 = ((($3)) + 4|0);
								$begin139$0616 = $2303;$i138$0613 = $2303;
								while(1) {
									$2310 = (__ZNK8Textline9characterEi($this,$i138$0613)|0);
									$2311 = (__ZNK9Character5maybeEi($2310,32)|0);
									L787: do {
										if ($2311) {
											$2312 = (($i138$0613) + 1)|0;
											$begin139$1 = $2312;
										} else {
											$2313 = ((($2310)) + 28|0);
											$2314 = ((($2310)) + 32|0);
											$2315 = HEAP32[$2314>>2]|0;
											$2316 = HEAP32[$2313>>2]|0;
											$2317 = ($2315|0)==($2316|0);
											if ($2317) {
												$begin139$1 = $begin139$0616;
												break;
											}
											$2318 = (__ZNK9Character5guessEi($2310,0)|0);
											$2319 = HEAP32[$2318>>2]|0;
											switch ($2319|0) {
												case 108: case 124:  {
													break;
												}
												default: {
													$begin139$1 = $begin139$0616;
													break L787;
												}
											}
											$2320 = ((($2310)) + 12|0);
											$2321 = HEAP32[$2320>>2]|0;
											$2322 = ((($2310)) + 4|0);
											$2323 = HEAP32[$2322>>2]|0;
											$2324 = (($2321) + 1)|0;
											$2325 = (($2324) - ($2323))|0;
											$2326 = $2325 << 2;
											$2327 = (__ZNK8Textline11mean_heightEv($this)|0);
											$2328 = ($2327*5)|0;
											$2329 = ($2326|0)>($2328|0);
											if ($2329) {
												$begin139$1 = $begin139$0616;
												break;
											}
											$2330 = HEAP32[$2320>>2]|0;
											$2331 = HEAP32[$2322>>2]|0;
											$2332 = (($2330) + 1)|0;
											$2333 = (($2332) - ($2331))|0;
											$2334 = ($2333*5)|0;
											$2335 = (__ZNK8Textline11mean_heightEv($this)|0);
											$2336 = $2335 << 2;
											$2337 = ($2334|0)<($2336|0);
											if ($2337) {
												$2343 = HEAP32[$2313>>2]|0;
												$2344 = HEAP32[$2314>>2]|0;
												$2345 = ($2344|0)==($2343|0);
												if ($2345) {
													$2352 = $2343;
												} else {
													$__new_last2$i$i$i$i260 = $2343;
													$scevgep$i$i$i$i261 = ((($2344)) + -8|0);
													$2346 = $scevgep$i$i$i$i261;
													$2347 = (($2346) - ($__new_last2$i$i$i$i260))|0;
													$2348 = $2347 >>> 3;
													$2349 = $2348 ^ -1;
													$scevgep4$i$i$i$i262 = (($2344) + ($2349<<3)|0);
													HEAP32[$2314>>2] = $scevgep4$i$i$i$i262;
													$2352 = $scevgep4$i$i$i$i262;
												}
												HEAP32[$3>>2] = 305;
												HEAP32[$2309>>2] = 0;
												$2350 = ((($2310)) + 36|0);
												$2351 = HEAP32[$2350>>2]|0;
												$2353 = ($2352|0)==($2351|0);
												if ($2353) {
													__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($2313,$3);
												} else {
													$2354 = $3;
													$2355 = $2354;
													$2356 = HEAP32[$2355>>2]|0;
													$2357 = (($2354) + 4)|0;
													$2358 = $2357;
													$2359 = HEAP32[$2358>>2]|0;
													$2360 = $2352;
													$2361 = $2360;
													HEAP32[$2361>>2] = $2356;
													$2362 = (($2360) + 4)|0;
													$2363 = $2362;
													HEAP32[$2363>>2] = $2359;
													$2364 = HEAP32[$2314>>2]|0;
													$2365 = ((($2364)) + 8|0);
													HEAP32[$2314>>2] = $2365;
												}
												$begin139$1 = $begin139$0616;
												break;
											}
											$2338 = HEAP32[$28>>2]|0;
											$2339 = HEAP32[$27>>2]|0;
											$2340 = (($2338) - ($2339))|0;
											$2341 = $2340 >> 2;
											$2342 = ($begin139$0616|0)<($2341|0);
											if ($2342) {
												$capital$0$off0602 = 0;$j142$0604 = $begin139$0616;$small$0$off0603 = 0;
											} else {
												$begin139$1 = $begin139$0616;
												break;
											}
											L803: while(1) {
												$2366 = ($j142$0604|0)==($i138$0613|0);
												do {
													if ($2366) {
														$capital$4$off0 = $capital$0$off0602;$small$4$off0 = $small$0$off0603;
													} else {
														$2367 = (__ZNK8Textline9characterEi($this,$j142$0604)|0);
														$2368 = (__ZNK9Character5maybeEi($2367,32)|0);
														if ($2368) {
															$capital$0$off0$lcssa = $capital$0$off0602;$small$0$off0$lcssa = $small$0$off0603;
															break L803;
														}
														$2369 = ((($2367)) + 28|0);
														$2370 = ((($2367)) + 32|0);
														$2371 = HEAP32[$2370>>2]|0;
														$2372 = HEAP32[$2369>>2]|0;
														$2373 = ($2371|0)==($2372|0);
														if ($2373) {
															$capital$4$off0 = $capital$0$off0602;$small$4$off0 = $small$0$off0603;
															break;
														}
														$2374 = (__ZNK9Character5guessEi($2367,0)|0);
														$2375 = HEAP32[$2374>>2]|0;
														$2376 = ($2375|0)>(127);
														if ($2376) {
															$capital$4$off0 = $capital$0$off0602;$small$4$off0 = $small$0$off0603;
															break;
														}
														$2377 = (_isalpha($2375)|0);
														$2378 = ($2377|0)==(0);
														if ($2378) {
															$capital$4$off0 = $capital$0$off0602;$small$4$off0 = $small$0$off0603;
															break;
														}
														L811: do {
															if ($capital$0$off0602) {
																$capital$1$off0 = 1;
															} else {
																$2379 = HEAP32[$2320>>2]|0;
																$2380 = HEAP32[$2322>>2]|0;
																$2381 = (($2379) + 1)|0;
																$2382 = (($2381) - ($2380))|0;
																$2383 = $2382 << 2;
																$2384 = ((($2367)) + 12|0);
																$2385 = HEAP32[$2384>>2]|0;
																$2386 = ((($2367)) + 4|0);
																$2387 = HEAP32[$2386>>2]|0;
																$2388 = (($2385) + 1)|0;
																$2389 = (($2388) - ($2387))|0;
																$2390 = ($2389*5)|0;
																$2391 = ($2383|0)>($2390|0);
																if ($2391) {
																	$capital$1$off0 = 1;
																	break;
																}
																$2392 = (_isupper($2375)|0);
																$2393 = ($2392|0)==(0);
																if ($2393) {
																	$capital$1$off0 = 0;
																	break;
																}
																switch ($2375|0) {
																	case 66: case 81:  {
																		$capital$1$off0 = 0;
																		break L811;
																		break;
																	}
																	default: {
																	}
																}
																$2394 = HEAP32[$2320>>2]|0;
																$2395 = HEAP32[$2322>>2]|0;
																$2396 = (($2394) + 1)|0;
																$2397 = (($2396) - ($2395))|0;
																$2398 = HEAP32[$2384>>2]|0;
																$2399 = HEAP32[$2386>>2]|0;
																$2400 = (($2398) + 1)|0;
																$2401 = (($2400) - ($2399))|0;
																$2402 = ($2397|0)<($2401|0);
																if ($2402) {
																	$2403 = (__ZN5Ocrad7similarEiiii($2397,$2401,10,1)|0);
																	if (!($2403)) {
																		$capital$1$off0 = 0;
																		break;
																	}
																}
																$capital$1$off0 = 1;
															}
														} while(0);
														if ($small$0$off0603) {
															$capital$4$off0 = $capital$1$off0;$small$4$off0 = 1;
															break;
														}
														$2404 = (_islower($2375)|0);
														$2405 = ($2404|0)!=(0);
														$2406 = ($2375|0)!=(108);
														$or$cond110 = $2406 & $2405;
														if (!($or$cond110)) {
															$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
															break;
														}
														$2407 = HEAP32[$2320>>2]|0;
														$2408 = HEAP32[$2322>>2]|0;
														$2409 = (($2407) + 1)|0;
														$2410 = (($2409) - ($2408))|0;
														$2411 = ($2410*5)|0;
														$2412 = ((($2367)) + 12|0);
														$2413 = HEAP32[$2412>>2]|0;
														$2414 = ((($2367)) + 4|0);
														$2415 = HEAP32[$2414>>2]|0;
														$2416 = (($2413) + 1)|0;
														$2417 = (($2416) - ($2415))|0;
														$2418 = $2417 << 2;
														$2419 = ($2411|0)<($2418|0);
														if ($2419) {
															$capital$4$off0 = $capital$1$off0;$small$4$off0 = 1;
															break;
														}
														$2420 = (__ZN3UCS13islower_smallEi($2375)|0);
														if (!($2420)) {
															$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
															break;
														}
														$2421 = ($j142$0604|0)<($i138$0613|0);
														if (!($2421)) {
															$2422 = (__ZN3UCS23islower_small_ambiguousEi($2375)|0);
															if ($2422) {
																$capital$4$off0 = $capital$1$off0;$small$4$off0 = 0;
																break;
															}
														}
														$2423 = HEAP32[$2320>>2]|0;
														$2424 = HEAP32[$2322>>2]|0;
														$2425 = (($2423) + 1)|0;
														$2426 = (($2425) - ($2424))|0;
														$2427 = HEAP32[$2412>>2]|0;
														$2428 = HEAP32[$2414>>2]|0;
														$2429 = (($2427) + 1)|0;
														$2430 = (($2429) - ($2428))|0;
														$2431 = (__ZN5Ocrad7similarEiiii($2426,$2430,10,1)|0);
														$capital$4$off0 = $capital$1$off0;$small$4$off0 = $2431;
													}
												} while(0);
												$2432 = (($j142$0604) + 1)|0;
												$2433 = HEAP32[$28>>2]|0;
												$2434 = HEAP32[$27>>2]|0;
												$2435 = (($2433) - ($2434))|0;
												$2436 = $2435 >> 2;
												$2437 = ($2432|0)<($2436|0);
												if ($2437) {
													$capital$0$off0602 = $capital$4$off0;$j142$0604 = $2432;$small$0$off0603 = $small$4$off0;
												} else {
													$capital$0$off0$lcssa = $capital$4$off0;$small$0$off0$lcssa = $small$4$off0;
													break;
												}
											}
											$small$5$off0$not = $small$0$off0$lcssa ^ 1;
											$brmerge213 = $capital$0$off0$lcssa | $small$5$off0$not;
											if ($brmerge213) {
												$begin139$1 = $begin139$0616;
												break;
											}
											__ZN9Character12insert_guessEiii($2310,0,305,1);
											$begin139$1 = $begin139$0616;
										}
									} while(0);
									$2438 = (($i138$0613) + 1)|0;
									$2439 = HEAP32[$28>>2]|0;
									$2440 = HEAP32[$27>>2]|0;
									$2441 = (($2439) - ($2440))|0;
									$2442 = $2441 >> 2;
									$2443 = ($2438|0)<($2442|0);
									if ($2443) {
										$begin139$0616 = $begin139$1;$i138$0613 = $2438;
									} else {
										$2446 = $2440;$2447 = $2439;
										break;
									}
								}
							} else {
								$$pre885 = HEAP32[$28>>2]|0;
								$$pre886 = HEAP32[$27>>2]|0;
								$2446 = $$pre886;$2447 = $$pre885;
							}
						} while(0);
						$2444 = HEAP32[$25>>2]|0;
						$2445 = (($2447) - ($2446))|0;
						$2448 = $2445 >> 2;
						$2449 = (($2448) + -1)|0;
						$2450 = ($2444|0)<($2449|0);
						if ($2450) {
							$2451 = ((($4)) + 4|0);
							$i148$0598 = $2444;
							while(1) {
								$2460 = (__ZNK8Textline9characterEi($this,$i148$0598)|0);
								$2461 = (($i148$0598) + 1)|0;
								$2462 = (__ZNK8Textline9characterEi($this,$2461)|0);
								$2463 = ((($2460)) + 28|0);
								$2464 = ((($2460)) + 32|0);
								$2465 = HEAP32[$2464>>2]|0;
								$2466 = HEAP32[$2463>>2]|0;
								$2467 = (($2465) - ($2466))|0;
								$2468 = ($2467|0)==(8);
								L837: do {
									if ($2468) {
										$2469 = ((($2462)) + 28|0);
										$2470 = ((($2462)) + 32|0);
										$2471 = HEAP32[$2470>>2]|0;
										$2472 = HEAP32[$2469>>2]|0;
										$2473 = (($2471) - ($2472))|0;
										$2474 = ($2473|0)==(8);
										if (!($2474)) {
											break;
										}
										$2475 = (__ZNK9Character5guessEi($2460,0)|0);
										$2476 = HEAP32[$2475>>2]|0;
										$2477 = (__ZNK9Character5guessEi($2462,0)|0);
										switch ($2476|0) {
											case 39: case 96:  {
												break;
											}
											default: {
												break L837;
											}
										}
										$2478 = HEAP32[$2477>>2]|0;
										$2479 = ($2476|0)==($2478|0);
										if (!($2479)) {
											break;
										}
										$2486 = HEAP32[$2462>>2]|0;
										$2487 = ((($2460)) + 8|0);
										$2488 = HEAP32[$2487>>2]|0;
										$2489 = (($2486) - ($2488))|0;
										$2490 = $2489 << 1;
										$2491 = HEAP32[$2460>>2]|0;
										$2492 = (($2488) + 1)|0;
										$2493 = (($2492) - ($2491))|0;
										$2494 = ($2493*3)|0;
										$2495 = ($2490|0)<($2494|0);
										if (!($2495)) {
											break;
										}
										__ZN9Character4joinERS_($2460,$2462);
										$2496 = HEAP32[$2463>>2]|0;
										$2497 = HEAP32[$2464>>2]|0;
										$2498 = ($2497|0)==($2496|0);
										if ($2498) {
											$2505 = $2496;
										} else {
											$__new_last2$i$i$i$i253 = $2496;
											$scevgep$i$i$i$i254 = ((($2497)) + -8|0);
											$2499 = $scevgep$i$i$i$i254;
											$2500 = (($2499) - ($__new_last2$i$i$i$i253))|0;
											$2501 = $2500 >>> 3;
											$2502 = $2501 ^ -1;
											$scevgep4$i$i$i$i255 = (($2497) + ($2502<<3)|0);
											HEAP32[$2464>>2] = $scevgep4$i$i$i$i255;
											$2505 = $scevgep4$i$i$i$i255;
										}
										HEAP32[$4>>2] = 34;
										HEAP32[$2451>>2] = 0;
										$2503 = ((($2460)) + 36|0);
										$2504 = HEAP32[$2503>>2]|0;
										$2506 = ($2505|0)==($2504|0);
										if ($2506) {
											__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($2463,$4);
										} else {
											$2507 = $4;
											$2508 = $2507;
											$2509 = HEAP32[$2508>>2]|0;
											$2510 = (($2507) + 4)|0;
											$2511 = $2510;
											$2512 = HEAP32[$2511>>2]|0;
											$2513 = $2505;
											$2514 = $2513;
											HEAP32[$2514>>2] = $2509;
											$2515 = (($2513) + 4)|0;
											$2516 = $2515;
											HEAP32[$2516>>2] = $2512;
											$2517 = HEAP32[$2464>>2]|0;
											$2518 = ((($2517)) + 8|0);
											HEAP32[$2464>>2] = $2518;
										}
										__ZN8Textline16delete_characterEi($this,$2461);
									}
								} while(0);
								$2480 = HEAP32[$28>>2]|0;
								$2481 = HEAP32[$27>>2]|0;
								$2482 = (($2480) - ($2481))|0;
								$2483 = $2482 >> 2;
								$2484 = (($2483) + -1)|0;
								$2485 = ($2461|0)<($2484|0);
								if ($2485) {
									$i148$0598 = $2461;
								} else {
									$$lcssa1356 = $2480;$$lcssa1357 = $2481;
									break;
								}
							}
							$$pre887 = HEAP32[$25>>2]|0;
							$2453 = $$lcssa1357;$2454 = $$lcssa1356;$2457 = $$pre887;
						} else {
							$2453 = $2446;$2454 = $2447;$2457 = $2444;
						}
						$2452 = (($2454) - ($2453))|0;
						$2455 = $2452 >> 2;
						$2456 = (($2455) + -1)|0;
						$2458 = ($2457|0)<($2456|0);
						if ($2458) {
							$2459 = ((($5)) + 4|0);
							$i153$0592 = $2457;
							while(1) {
								$2520 = (__ZNK8Textline9characterEi($this,$i153$0592)|0);
								$2521 = (($i153$0592) + 1)|0;
								$2522 = (__ZNK8Textline9characterEi($this,$2521)|0);
								$2523 = ((($2520)) + 28|0);
								$2524 = ((($2520)) + 32|0);
								$2525 = HEAP32[$2524>>2]|0;
								$2526 = HEAP32[$2523>>2]|0;
								$2527 = (($2525) - ($2526))|0;
								$2528 = ($2527|0)==(8);
								do {
									if ($2528) {
										$2529 = ((($2522)) + 28|0);
										$2530 = ((($2522)) + 32|0);
										$2531 = HEAP32[$2530>>2]|0;
										$2532 = HEAP32[$2529>>2]|0;
										$2533 = (($2531) - ($2532))|0;
										$2534 = ($2533|0)==(8);
										if (!($2534)) {
											break;
										}
										$2535 = (__ZNK9Character5guessEi($2520,0)|0);
										$2536 = HEAP32[$2535>>2]|0;
										$2537 = (__ZNK9Character5guessEi($2522,0)|0);
										$2538 = HEAP32[$2537>>2]|0;
										$2539 = ($2536|0)==(44);
										$2540 = ($2538|0)==(46);
										$or$cond115 = $2539 & $2540;
										if (!($or$cond115)) {
											break;
										}
										$2547 = ((($2520)) + 4|0);
										$2548 = HEAP32[$2547>>2]|0;
										$2549 = ((($2522)) + 12|0);
										$2550 = HEAP32[$2549>>2]|0;
										$2551 = ($2548|0)>($2550|0);
										if (!($2551)) {
											break;
										}
										$2552 = HEAP32[$2522>>2]|0;
										$2553 = ((($2520)) + 8|0);
										$2554 = HEAP32[$2553>>2]|0;
										$2555 = (($2552) - ($2554))|0;
										$2556 = ((($2522)) + 8|0);
										$2557 = HEAP32[$2556>>2]|0;
										$2558 = (1 - ($2552))|0;
										$2559 = (($2558) + ($2557))|0;
										$2560 = ($2555|0)<($2559|0);
										if (!($2560)) {
											break;
										}
										__ZN9Character4joinERS_($2520,$2522);
										$2561 = HEAP32[$2523>>2]|0;
										$2562 = HEAP32[$2524>>2]|0;
										$2563 = ($2562|0)==($2561|0);
										if ($2563) {
											$2570 = $2561;
										} else {
											$__new_last2$i$i$i$i246 = $2561;
											$scevgep$i$i$i$i247 = ((($2562)) + -8|0);
											$2564 = $scevgep$i$i$i$i247;
											$2565 = (($2564) - ($__new_last2$i$i$i$i246))|0;
											$2566 = $2565 >>> 3;
											$2567 = $2566 ^ -1;
											$scevgep4$i$i$i$i248 = (($2562) + ($2567<<3)|0);
											HEAP32[$2524>>2] = $scevgep4$i$i$i$i248;
											$2570 = $scevgep4$i$i$i$i248;
										}
										HEAP32[$5>>2] = 59;
										HEAP32[$2459>>2] = 0;
										$2568 = ((($2520)) + 36|0);
										$2569 = HEAP32[$2568>>2]|0;
										$2571 = ($2570|0)==($2569|0);
										if ($2571) {
											__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($2523,$5);
										} else {
											$2572 = $5;
											$2573 = $2572;
											$2574 = HEAP32[$2573>>2]|0;
											$2575 = (($2572) + 4)|0;
											$2576 = $2575;
											$2577 = HEAP32[$2576>>2]|0;
											$2578 = $2570;
											$2579 = $2578;
											HEAP32[$2579>>2] = $2574;
											$2580 = (($2578) + 4)|0;
											$2581 = $2580;
											HEAP32[$2581>>2] = $2577;
											$2582 = HEAP32[$2524>>2]|0;
											$2583 = ((($2582)) + 8|0);
											HEAP32[$2524>>2] = $2583;
										}
										__ZN8Textline16delete_characterEi($this,$2521);
									}
								} while(0);
								$2541 = HEAP32[$28>>2]|0;
								$2542 = HEAP32[$27>>2]|0;
								$2543 = (($2541) - ($2542))|0;
								$2544 = $2543 >> 2;
								$2545 = (($2544) + -1)|0;
								$2546 = ($2521|0)<($2545|0);
								if ($2546) {
									$i153$0592 = $2521;
								} else {
									$$lcssa509 = $2543;$$lcssa510 = $2545;
									break;
								}
							}
						} else {
							$$lcssa509 = $2452;$$lcssa510 = $2456;
						}
						$2519 = ($$lcssa509|0)>(4);
						do {
							if ($2519) {
								$2584 = (__ZNK8Textline9characterEi($this,$$lcssa510)|0);
								$2585 = ((($2584)) + 28|0);
								$2586 = ((($2584)) + 32|0);
								$2587 = HEAP32[$2586>>2]|0;
								$2588 = HEAP32[$2585>>2]|0;
								$2589 = (($2587) - ($2588))|0;
								$2590 = ($2589|0)>(8);
								if (!($2590)) {
									break;
								}
								$2591 = (__ZNK9Character5guessEi($2584,0)|0);
								$2592 = HEAP32[$2591>>2]|0;
								$2593 = ($2592|0)==(46);
								if (!($2593)) {
									break;
								}
								$2594 = (__ZNK9Character5guessEi($2584,1)|0);
								$2595 = HEAP32[$2594>>2]|0;
								$2596 = ($2595|0)==(45);
								if (!($2596)) {
									break;
								}
								$2597 = HEAP32[$28>>2]|0;
								$2598 = HEAP32[$27>>2]|0;
								$2599 = (($2597) - ($2598))|0;
								$2600 = $2599 >> 2;
								$2601 = (($2600) + -2)|0;
								$2602 = (__ZNK8Textline9characterEi($this,$2601)|0);
								$2603 = ((($2602)) + 28|0);
								$2604 = ((($2602)) + 32|0);
								$2605 = HEAP32[$2604>>2]|0;
								$2606 = HEAP32[$2603>>2]|0;
								$2607 = ($2605|0)==($2606|0);
								if ($2607) {
									break;
								}
								$2608 = (__ZNK9Character5guessEi($2602,0)|0);
								$2609 = HEAP32[$2608>>2]|0;
								$2610 = (__ZN3UCS7isalphaEi($2609)|0);
								if (!($2610)) {
									break;
								}
								__ZN9Character12swap_guessesEii($2584,0,1);
							}
						} while(0);
						$2611 = HEAP32[$25>>2]|0;
						$2612 = HEAP32[$28>>2]|0;
						$2613 = HEAP32[$27>>2]|0;
						$2614 = (($2612) - ($2613))|0;
						$2615 = $2614 >> 2;
						$2616 = (($2615) + -1)|0;
						$2617 = ($2611|0)<($2616|0);
						if ($2617) {
							$2618 = ((($6)) + 4|0);
							$i159$0588 = $2611;
							while(1) {
								$2655 = (__ZNK8Textline9characterEi($this,$i159$0588)|0);
								$2656 = (($i159$0588) + 1)|0;
								$2657 = (__ZNK8Textline9characterEi($this,$2656)|0);
								$2658 = ((($2655)) + 28|0);
								$2659 = ((($2655)) + 32|0);
								$2660 = HEAP32[$2659>>2]|0;
								$2661 = HEAP32[$2658>>2]|0;
								$2662 = (($2660) - ($2661))|0;
								$2663 = ($2662|0)==(8);
								L884: do {
									if ($2663) {
										$2664 = ((($2657)) + 28|0);
										$2665 = ((($2657)) + 32|0);
										$2666 = HEAP32[$2665>>2]|0;
										$2667 = HEAP32[$2664>>2]|0;
										$2668 = (($2666) - ($2667))|0;
										$2669 = ($2668|0)==(8);
										if (!($2669)) {
											break;
										}
										$2670 = (__ZNK9Character5guessEi($2655,0)|0);
										$2671 = HEAP32[$2670>>2]|0;
										$2672 = (__ZNK9Character5guessEi($2657,0)|0);
										$2673 = ($2671|0)==(110);
										if (!($2673)) {
											break;
										}
										$2680 = HEAP32[$2672>>2]|0;
										switch ($2680|0) {
											case 73: case 108:  {
												break;
											}
											default: {
												break L884;
											}
										}
										$2681 = ((($2655)) + 12|0);
										$2682 = HEAP32[$2681>>2]|0;
										$2683 = ((($2655)) + 4|0);
										$2684 = HEAP32[$2683>>2]|0;
										$2685 = (($2682) + 1)|0;
										$2686 = (($2685) - ($2684))|0;
										$2687 = ((($2657)) + 12|0);
										$2688 = HEAP32[$2687>>2]|0;
										$2689 = ((($2657)) + 4|0);
										$2690 = HEAP32[$2689>>2]|0;
										$2691 = (($2688) + 1)|0;
										$2692 = (($2691) - ($2690))|0;
										$2693 = (__ZN5Ocrad7similarEiiii($2686,$2692,10,1)|0);
										if (!($2693)) {
											break;
										}
										$2694 = HEAP32[$2657>>2]|0;
										$2695 = ((($2655)) + 8|0);
										$2696 = HEAP32[$2695>>2]|0;
										$2697 = (($2694) - ($2696))|0;
										$2698 = ((($2657)) + 8|0);
										$2699 = HEAP32[$2698>>2]|0;
										$2700 = (1 - ($2694))|0;
										$2701 = (($2700) + ($2699))|0;
										$2702 = ($2697|0)<($2701|0);
										if (!($2702)) {
											break;
										}
										__ZN9Character4joinERS_($2655,$2657);
										$2703 = HEAP32[$2658>>2]|0;
										$2704 = HEAP32[$2659>>2]|0;
										$2705 = ($2704|0)==($2703|0);
										if ($2705) {
											$2712 = $2703;
										} else {
											$__new_last2$i$i$i$i239 = $2703;
											$scevgep$i$i$i$i240 = ((($2704)) + -8|0);
											$2706 = $scevgep$i$i$i$i240;
											$2707 = (($2706) - ($__new_last2$i$i$i$i239))|0;
											$2708 = $2707 >>> 3;
											$2709 = $2708 ^ -1;
											$scevgep4$i$i$i$i241 = (($2704) + ($2709<<3)|0);
											HEAP32[$2659>>2] = $scevgep4$i$i$i$i241;
											$2712 = $scevgep4$i$i$i$i241;
										}
										HEAP32[$6>>2] = 109;
										HEAP32[$2618>>2] = 0;
										$2710 = ((($2655)) + 36|0);
										$2711 = HEAP32[$2710>>2]|0;
										$2713 = ($2712|0)==($2711|0);
										if ($2713) {
											__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($2658,$6);
										} else {
											$2714 = $6;
											$2715 = $2714;
											$2716 = HEAP32[$2715>>2]|0;
											$2717 = (($2714) + 4)|0;
											$2718 = $2717;
											$2719 = HEAP32[$2718>>2]|0;
											$2720 = $2712;
											$2721 = $2720;
											HEAP32[$2721>>2] = $2716;
											$2722 = (($2720) + 4)|0;
											$2723 = $2722;
											HEAP32[$2723>>2] = $2719;
											$2724 = HEAP32[$2659>>2]|0;
											$2725 = ((($2724)) + 8|0);
											HEAP32[$2659>>2] = $2725;
										}
										__ZN8Textline16delete_characterEi($this,$2656);
									}
								} while(0);
								$2674 = HEAP32[$28>>2]|0;
								$2675 = HEAP32[$27>>2]|0;
								$2676 = (($2674) - ($2675))|0;
								$2677 = $2676 >> 2;
								$2678 = (($2677) + -1)|0;
								$2679 = ($2656|0)<($2678|0);
								if ($2679) {
									$i159$0588 = $2656;
								} else {
									$$lcssa1352 = $2674;$$lcssa1353 = $2675;
									break;
								}
							}
							$$pre888 = HEAP32[$25>>2]|0;
							$2620 = $$lcssa1353;$2621 = $$lcssa1352;$2623 = $$pre888;
						} else {
							$2620 = $2613;$2621 = $2612;$2623 = $2611;
						}
						$2619 = (($2621) - ($2620))|0;
						$2622 = $2619 >> 2;
						$2624 = ($2623|0)<($2622|0);
						do {
							if ($2624) {
								$2625 = ((($b1172)) + 28|0);
								$2626 = ((($b1172)) + 32|0);
								$2627 = ((($b1172)) + 36|0);
								$2628 = ((($b2173)) + 28|0);
								$2629 = ((($b2173)) + 32|0);
								$2630 = ((($b2173)) + 36|0);
								$2631 = ((($b1172)) + 12|0);
								$2632 = ((($b1172)) + 4|0);
								$2633 = ((($b2173)) + 12|0);
								$2634 = ((($b2173)) + 4|0);
								$2635 = ((($c1174)) + 16|0);
								$2636 = ((($c1174)) + 20|0);
								$2637 = ((($c1174)) + 24|0);
								$2638 = ((($c1174)) + 24|0);
								$2639 = ((($c1174)) + 28|0);
								$2640 = ((($c1174)) + 32|0);
								$2641 = ((($c1174)) + 36|0);
								$2642 = ((($c2175)) + 16|0);
								$2643 = ((($c2175)) + 20|0);
								$2644 = ((($c2175)) + 24|0);
								$2645 = ((($c2175)) + 24|0);
								$2646 = ((($c2175)) + 28|0);
								$2647 = ((($c2175)) + 32|0);
								$2648 = ((($c2175)) + 36|0);
								$2649 = ((($c1174)) + 28|0);
								$2650 = ((($7)) + 4|0);
								$2651 = ((($c1174)) + 36|0);
								$2652 = ((($c2175)) + 28|0);
								$2653 = ((($8)) + 4|0);
								$2654 = ((($c2175)) + 36|0);
								$i164$0584 = $2623;$mean_upper_width$0583 = 0;
								L903: while(1) {
									$2726 = (__ZNK8Textline9characterEi($this,$i164$0584)|0);
									$2727 = ((($2726)) + 28|0);
									$2728 = ((($2726)) + 32|0);
									$2729 = HEAP32[$2728>>2]|0;
									$2730 = HEAP32[$2727>>2]|0;
									$2731 = ($2729|0)==($2730|0);
									do {
										if ($2731) {
											$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$0583;
										} else {
											$2732 = (__ZNK9Character5guessEi($2726,0)|0);
											$2733 = HEAP32[$2732>>2]|0;
											$2734 = ($2733|0)==(87);
											if (!($2734)) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$0583;
												break;
											}
											$2735 = ((($2726)) + 8|0);
											$2736 = HEAP32[$2735>>2]|0;
											$2737 = HEAP32[$2726>>2]|0;
											$2738 = (($2736) + 1)|0;
											$2739 = (($2738) - ($2737))|0;
											$2740 = ((($2726)) + 12|0);
											$2741 = HEAP32[$2740>>2]|0;
											$2742 = ((($2726)) + 4|0);
											$2743 = HEAP32[$2742>>2]|0;
											$2744 = (($2741) + 1)|0;
											$2745 = (($2744) - ($2743))|0;
											$2746 = ($2739|0)>($2745|0);
											if (!($2746)) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$0583;
												break;
											}
											$2747 = ((($2726)) + 16|0);
											$2748 = ((($2726)) + 20|0);
											$2749 = HEAP32[$2748>>2]|0;
											$2750 = HEAP32[$2747>>2]|0;
											$2751 = (($2749) - ($2750))|0;
											$2752 = ($2751|0)==(4);
											if (!($2752)) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$0583;
												break;
											}
											$2753 = (__ZN9Character4blobEi($2726,0)|0);
											$2754 = ((($2753)) + 28|0);
											$2755 = ((($2753)) + 32|0);
											$2756 = HEAP32[$2755>>2]|0;
											$2757 = HEAP32[$2754>>2]|0;
											$2758 = ($2756|0)==($2757|0);
											if (!($2758)) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$0583;
												break;
											}
											$2759 = ($mean_upper_width$0583|0)==(0);
											if ($2759) {
												$2760 = HEAP32[$25>>2]|0;
												$2761 = HEAP32[$28>>2]|0;
												$2762 = HEAP32[$27>>2]|0;
												$2763 = (($2761) - ($2762))|0;
												$2764 = $2763 >> 2;
												$2765 = ($2760|0)<($2764|0);
												if ($2765) {
													$count$0571 = 0;$j166$0572 = $2760;$mean_upper_width$1570 = 0;
												} else {
													$3043 = $2762;$3044 = $2761;
													label = 745;
													break L903;
												}
												while(1) {
													$2767 = (__ZNK8Textline9characterEi($this,$j166$0572)|0);
													$2768 = ((($2767)) + 28|0);
													$2769 = ((($2767)) + 32|0);
													$2770 = HEAP32[$2769>>2]|0;
													$2771 = HEAP32[$2768>>2]|0;
													$2772 = ($2770|0)==($2771|0);
													do {
														if ($2772) {
															$count$1 = $count$0571;$mean_upper_width$2 = $mean_upper_width$1570;
														} else {
															$2773 = (__ZNK9Character5guessEi($2767,0)|0);
															$2774 = HEAP32[$2773>>2]|0;
															$2775 = (__ZN3UCS20isupper_normal_widthEi($2774)|0);
															if (!($2775)) {
																$count$1 = $count$0571;$mean_upper_width$2 = $mean_upper_width$1570;
																break;
															}
															$2776 = ((($2767)) + 8|0);
															$2777 = HEAP32[$2776>>2]|0;
															$2778 = HEAP32[$2767>>2]|0;
															$2779 = (($mean_upper_width$1570) + 1)|0;
															$2780 = (($2779) + ($2777))|0;
															$2781 = (($2780) - ($2778))|0;
															$2782 = (($count$0571) + 1)|0;
															$count$1 = $2782;$mean_upper_width$2 = $2781;
														}
													} while(0);
													$2783 = (($j166$0572) + 1)|0;
													$2784 = HEAP32[$28>>2]|0;
													$2785 = HEAP32[$27>>2]|0;
													$2786 = (($2784) - ($2785))|0;
													$2787 = $2786 >> 2;
													$2788 = ($2783|0)<($2787|0);
													if ($2788) {
														$count$0571 = $count$1;$j166$0572 = $2783;$mean_upper_width$1570 = $mean_upper_width$2;
													} else {
														$$lcssa = $2784;$$lcssa1339 = $2785;$count$1$lcssa = $count$1;$mean_upper_width$2$lcssa = $mean_upper_width$2;
														break;
													}
												}
												$2766 = ($count$1$lcssa|0)<(1);
												if ($2766) {
													$3043 = $$lcssa1339;$3044 = $$lcssa;
													label = 745;
													break L903;
												}
												$2789 = (($mean_upper_width$2$lcssa|0) / ($count$1$lcssa|0))&-1;
												$mean_upper_width$4 = $2789;
											} else {
												$mean_upper_width$4 = $mean_upper_width$0583;
											}
											$2790 = HEAP32[$2735>>2]|0;
											$2791 = HEAP32[$2726>>2]|0;
											$2792 = (($2790) + 1)|0;
											$2793 = (($2792) - ($2791))|0;
											$2794 = $mean_upper_width$4 << 1;
											$2795 = ($2793|0)<($2794|0);
											if ($2795) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$4;
												break;
											}
											$2796 = (__ZN9Character4blobEi($2726,0)|0);
											$2797 = ((($2796)) + 12|0);
											$2798 = HEAP32[$2797>>2]|0;
											$2799 = ((($2796)) + 4|0);
											$2800 = HEAP32[$2799>>2]|0;
											$2801 = ($2798|0)<($2800|0);
											if ($2801) {
												$2813 = $2800;$2814 = $2798;$row169$0$lcssa = $2798;
											} else {
												$2802 = ((($2796)) + 8|0);
												$row169$0575 = $2798;
												while(1) {
													$2803 = HEAP32[$2796>>2]|0;
													$2804 = HEAP32[$2802>>2]|0;
													$2805 = (($2804) + ($2803))|0;
													$2806 = (($2805|0) / 2)&-1;
													$2807 = (__ZNK4Blob2idEii($2796,$row169$0575,$2806)|0);
													$2808 = ($2807|0)==(0);
													if (!($2808)) {
														$row169$0575$lcssa = $row169$0575;
														label = 697;
														break;
													}
													$2809 = (($row169$0575) + -1)|0;
													$2810 = HEAP32[$2799>>2]|0;
													$2811 = ($row169$0575|0)>($2810|0);
													if ($2811) {
														$row169$0575 = $2809;
													} else {
														$$pre889 = $2810;$row169$0$lcssa$ph = $2809;
														break;
													}
												}
												if ((label|0) == 697) {
													label = 0;
													$$pre889$pre = HEAP32[$2799>>2]|0;
													$$pre889 = $$pre889$pre;$row169$0$lcssa$ph = $row169$0575$lcssa;
												}
												$$pre890 = HEAP32[$2797>>2]|0;
												$2813 = $$pre889;$2814 = $$pre890;$row169$0$lcssa = $row169$0$lcssa$ph;
											}
											$2812 = (($2814) - ($2813))|0;
											$2815 = (($2812|0) / 5)&-1;
											$2816 = (($2815) + ($2813))|0;
											$2817 = ($row169$0$lcssa|0)<($2816|0);
											if (!($2817)) {
												$i164$3357 = $i164$0584;$mean_upper_width$5356 = $mean_upper_width$4;
												break;
											}
											$2818 = HEAP32[$2796>>2]|0;
											$2819 = ((($2796)) + 8|0);
											$2820 = HEAP32[$2819>>2]|0;
											$2821 = (($2820) + ($2818))|0;
											$2822 = (($2821|0) / 2)&-1;
											$2823 = (($2822) + -1)|0;
											__ZN9RectangleC2Eiiii($r1170,$2818,$2813,$2823,$2814);
											$2824 = HEAP32[$2796>>2]|0;
											$2825 = HEAP32[$2819>>2]|0;
											$2826 = (($2825) + ($2824))|0;
											$2827 = (($2826|0) / 2)&-1;
											$2828 = (($2827) + 1)|0;
											$2829 = HEAP32[$2799>>2]|0;
											$2830 = HEAP32[$2797>>2]|0;
											__ZN9RectangleC2Eiiii($r2171,$2828,$2829,$2825,$2830);
											__ZN6BitmapC2ERKS_RK9Rectangle($b1172,$2796,$r1170);
											HEAP32[$2625>>2] = 0;
											HEAP32[$2626>>2] = 0;
											HEAP32[$2627>>2] = 0;
											__THREW__ = 0;
											invoke_viii(203,($b2173|0),($2796|0),($r2171|0));
											$2831 = __THREW__; __THREW__ = 0;
											$2832 = $2831&1;
											if ($2832) {
												label = 708;
												break L903;
											}
											HEAP32[$2628>>2] = 0;
											HEAP32[$2629>>2] = 0;
											HEAP32[$2630>>2] = 0;
											__THREW__ = 0;
											(invoke_ii(202,($b1172|0))|0);
											$2833 = __THREW__; __THREW__ = 0;
											$2834 = $2833&1;
											if ($2834) {
												label = 709;
												break L903;
											}
											__THREW__ = 0;
											(invoke_ii(202,($b2173|0))|0);
											$2835 = __THREW__; __THREW__ = 0;
											$2836 = $2835&1;
											if ($2836) {
												label = 709;
												break L903;
											}
											$2837 = HEAP32[$2631>>2]|0;
											$2838 = HEAP32[$2632>>2]|0;
											$2839 = (($2837) + 1)|0;
											$2840 = (($2839) - ($2838))|0;
											$2841 = $2840 << 1;
											$2842 = HEAP32[$2797>>2]|0;
											$2843 = HEAP32[$2799>>2]|0;
											$2844 = (($2842) + 1)|0;
											$2845 = (($2844) - ($2843))|0;
											$2846 = ($2841|0)<($2845|0);
											do {
												if ($2846) {
													$i164$1 = $i164$0584;
												} else {
													$2847 = HEAP32[$2633>>2]|0;
													$2848 = HEAP32[$2634>>2]|0;
													$2849 = (($2847) + 1)|0;
													$2850 = (($2849) - ($2848))|0;
													$2851 = $2850 << 1;
													$2852 = ($2851|0)<($2845|0);
													if ($2852) {
														$i164$1 = $i164$0584;
														break;
													}
													__THREW__ = 0;
													$2853 = (invoke_iiiii(120,($2840|0),($2850|0),10,2)|0);
													$2854 = __THREW__; __THREW__ = 0;
													$2855 = $2854&1;
													if ($2855) {
														label = 709;
														break L903;
													}
													if (!($2853)) {
														$i164$1 = $i164$0584;
														break;
													}
													__THREW__ = 0;
													$2860 = (invoke_ii(29,40)|0);
													$2861 = __THREW__; __THREW__ = 0;
													$2862 = $2861&1;
													if ($2862) {
														label = 709;
														break L903;
													}
													__THREW__ = 0;
													invoke_vii(159,($2860|0),($b1172|0));
													$2863 = __THREW__; __THREW__ = 0;
													$2864 = $2863&1;
													if ($2864) {
														$$lcssa1343 = $2860;
														label = 736;
														break L903;
													}
													;HEAP32[$c1174>>2]=HEAP32[$2860>>2]|0;HEAP32[$c1174+4>>2]=HEAP32[$2860+4>>2]|0;HEAP32[$c1174+8>>2]=HEAP32[$2860+8>>2]|0;HEAP32[$c1174+12>>2]=HEAP32[$2860+12>>2]|0;
													HEAP32[$2635>>2] = 0;
													HEAP32[$2636>>2] = 0;
													HEAP32[$2637>>2] = 0;
													__THREW__ = 0;
													$2865 = (invoke_ii(29,4)|0);
													$2866 = __THREW__; __THREW__ = 0;
													$2867 = $2866&1;
													if ($2867) {
														label = 709;
														break L903;
													}
													$2868 = $2860;
													HEAP32[$2635>>2] = $2865;
													$2869 = ((($2865)) + 4|0);
													HEAP32[$2638>>2] = $2869;
													HEAP32[$2865>>2] = $2868;
													HEAP32[$2636>>2] = $2869;
													HEAP32[$2639>>2] = 0;
													HEAP32[$2640>>2] = 0;
													HEAP32[$2641>>2] = 0;
													__THREW__ = 0;
													$2870 = (invoke_ii(29,40)|0);
													$2871 = __THREW__; __THREW__ = 0;
													$2872 = $2871&1;
													if ($2872) {
														label = 737;
														break L903;
													}
													__THREW__ = 0;
													invoke_vii(159,($2870|0),($b2173|0));
													$2873 = __THREW__; __THREW__ = 0;
													$2874 = $2873&1;
													if ($2874) {
														$$lcssa1348 = $2870;
														label = 738;
														break L903;
													}
													;HEAP32[$c2175>>2]=HEAP32[$2870>>2]|0;HEAP32[$c2175+4>>2]=HEAP32[$2870+4>>2]|0;HEAP32[$c2175+8>>2]=HEAP32[$2870+8>>2]|0;HEAP32[$c2175+12>>2]=HEAP32[$2870+12>>2]|0;
													HEAP32[$2642>>2] = 0;
													HEAP32[$2643>>2] = 0;
													HEAP32[$2644>>2] = 0;
													__THREW__ = 0;
													$2875 = (invoke_ii(29,4)|0);
													$2876 = __THREW__; __THREW__ = 0;
													$2877 = $2876&1;
													if ($2877) {
														label = 737;
														break L903;
													}
													$2878 = $2870;
													HEAP32[$2642>>2] = $2875;
													$2879 = ((($2875)) + 4|0);
													HEAP32[$2645>>2] = $2879;
													HEAP32[$2875>>2] = $2878;
													HEAP32[$2643>>2] = $2879;
													HEAP32[$2646>>2] = 0;
													HEAP32[$2647>>2] = 0;
													HEAP32[$2648>>2] = 0;
													$2880 = HEAP32[$2649>>2]|0;
													$2881 = HEAP32[$2640>>2]|0;
													$2882 = ($2881|0)==($2880|0);
													if ($2882) {
														$2888 = $2880;
													} else {
														$__new_last2$i$i$i$i227 = $2880;
														$scevgep$i$i$i$i228 = ((($2881)) + -8|0);
														$2883 = $scevgep$i$i$i$i228;
														$2884 = (($2883) - ($__new_last2$i$i$i$i227))|0;
														$2885 = $2884 >>> 3;
														$2886 = $2885 ^ -1;
														$scevgep4$i$i$i$i229 = (($2881) + ($2886<<3)|0);
														HEAP32[$2640>>2] = $scevgep4$i$i$i$i229;
														$2888 = $scevgep4$i$i$i$i229;
													}
													HEAP32[$7>>2] = 86;
													HEAP32[$2650>>2] = 0;
													$2887 = HEAP32[$2651>>2]|0;
													$2889 = ($2888|0)==($2887|0);
													if ($2889) {
														__THREW__ = 0;
														invoke_vii(125,($2649|0),($7|0));
														$2902 = __THREW__; __THREW__ = 0;
														$2903 = $2902&1;
														if ($2903) {
															label = 739;
															break L903;
														}
													} else {
														$2890 = $7;
														$2891 = $2890;
														$2892 = HEAP32[$2891>>2]|0;
														$2893 = (($2890) + 4)|0;
														$2894 = $2893;
														$2895 = HEAP32[$2894>>2]|0;
														$2896 = $2888;
														$2897 = $2896;
														HEAP32[$2897>>2] = $2892;
														$2898 = (($2896) + 4)|0;
														$2899 = $2898;
														HEAP32[$2899>>2] = $2895;
														$2900 = HEAP32[$2640>>2]|0;
														$2901 = ((($2900)) + 8|0);
														HEAP32[$2640>>2] = $2901;
													}
													$2904 = HEAP32[$2652>>2]|0;
													$2905 = HEAP32[$2647>>2]|0;
													$2906 = ($2905|0)==($2904|0);
													if ($2906) {
														$2912 = $2904;
													} else {
														$__new_last2$i$i$i$i220 = $2904;
														$scevgep$i$i$i$i221 = ((($2905)) + -8|0);
														$2907 = $scevgep$i$i$i$i221;
														$2908 = (($2907) - ($__new_last2$i$i$i$i220))|0;
														$2909 = $2908 >>> 3;
														$2910 = $2909 ^ -1;
														$scevgep4$i$i$i$i222 = (($2905) + ($2910<<3)|0);
														HEAP32[$2647>>2] = $scevgep4$i$i$i$i222;
														$2912 = $scevgep4$i$i$i$i222;
													}
													HEAP32[$8>>2] = 86;
													HEAP32[$2653>>2] = 0;
													$2911 = HEAP32[$2654>>2]|0;
													$2913 = ($2912|0)==($2911|0);
													if ($2913) {
														__THREW__ = 0;
														invoke_vii(125,($2652|0),($8|0));
														$2926 = __THREW__; __THREW__ = 0;
														$2927 = $2926&1;
														if ($2927) {
															label = 739;
															break L903;
														}
													} else {
														$2914 = $8;
														$2915 = $2914;
														$2916 = HEAP32[$2915>>2]|0;
														$2917 = (($2914) + 4)|0;
														$2918 = $2917;
														$2919 = HEAP32[$2918>>2]|0;
														$2920 = $2912;
														$2921 = $2920;
														HEAP32[$2921>>2] = $2916;
														$2922 = (($2920) + 4)|0;
														$2923 = $2922;
														HEAP32[$2923>>2] = $2919;
														$2924 = HEAP32[$2647>>2]|0;
														$2925 = ((($2924)) + 8|0);
														HEAP32[$2647>>2] = $2925;
													}
													__THREW__ = 0;
													(invoke_iii(197,($2726|0),($c1174|0))|0);
													$2928 = __THREW__; __THREW__ = 0;
													$2929 = $2928&1;
													if ($2929) {
														label = 739;
														break L903;
													}
													$2930 = (($i164$0584) + 1)|0;
													$2931 = HEAP32[$27>>2]|0;
													$2932 = (($2931) + ($2930<<2)|0);
													$2933 = $2932;
													HEAP32[$23>>2] = $2933;
													__THREW__ = 0;
													$2934 = (invoke_ii(29,40)|0);
													$2935 = __THREW__; __THREW__ = 0;
													$2936 = $2935&1;
													if ($2936) {
														label = 739;
														break L903;
													}
													__THREW__ = 0;
													invoke_vii(200,($2934|0),($c2175|0));
													$2937 = __THREW__; __THREW__ = 0;
													$2938 = $2937&1;
													if ($2938) {
														$$lcssa1351 = $2934;
														label = 740;
														break L903;
													}
													HEAP32[$24>>2] = $2934;
													__THREW__ = 0;
													;HEAP32[$$byval_copy>>2]=HEAP32[$23>>2]|0;
													(invoke_iiii(208,($27|0),($$byval_copy|0),($24|0))|0);
													$2939 = __THREW__; __THREW__ = 0;
													$2940 = $2939&1;
													if ($2940) {
														label = 739;
														break L903;
													}
													__THREW__ = 0;
													invoke_vi(176,($c2175|0));
													$2941 = __THREW__; __THREW__ = 0;
													$2942 = $2941&1;
													if ($2942) {
														label = 737;
														break L903;
													}
													__THREW__ = 0;
													invoke_vi(176,($c1174|0));
													$2943 = __THREW__; __THREW__ = 0;
													$2944 = $2943&1;
													if ($2944) {
														label = 709;
														break L903;
													}
													$i164$1 = $2930;
												}
											} while(0);
											__THREW__ = 0;
											invoke_vi(72,($b2173|0));
											$2945 = __THREW__; __THREW__ = 0;
											$2946 = $2945&1;
											if ($2946) {
												label = 708;
												break L903;
											}
											__ZN4BlobD2Ev($b1172);
											$i164$3357 = $i164$1;$mean_upper_width$5356 = $mean_upper_width$4;
										}
									} while(0);
									$2947 = (($i164$3357) + 1)|0;
									$2948 = HEAP32[$28>>2]|0;
									$2949 = HEAP32[$27>>2]|0;
									$2950 = (($2948) - ($2949))|0;
									$2951 = $2950 >> 2;
									$2952 = ($2947|0)<($2951|0);
									if ($2952) {
										$i164$0584 = $2947;$mean_upper_width$0583 = $mean_upper_width$5356;
									} else {
										$3043 = $2949;$3044 = $2948;
										label = 745;
										break;
									}
								}
								if ((label|0) == 708) {
									$2856 = ___cxa_find_matching_catch_2()|0;
									$2857 = tempRet0;
									$$15 = $2856;$$15133 = $2857;
								}
								else if ((label|0) == 709) {
									$2858 = ___cxa_find_matching_catch_2()|0;
									$2859 = tempRet0;
									$$14 = $2858;$$14132 = $2859;
									label = 743;
								}
								else if ((label|0) == 736) {
									$2953 = ___cxa_find_matching_catch_2()|0;
									$2954 = tempRet0;
									__ZdlPv($$lcssa1343);
									$$14 = $2953;$$14132 = $2954;
									label = 743;
								}
								else if ((label|0) == 737) {
									$2955 = ___cxa_find_matching_catch_2()|0;
									$2956 = tempRet0;
									$$13 = $2955;$$13131 = $2956;
									label = 742;
								}
								else if ((label|0) == 738) {
									$2957 = ___cxa_find_matching_catch_2()|0;
									$2958 = tempRet0;
									__ZdlPv($$lcssa1348);
									$$13 = $2957;$$13131 = $2958;
									label = 742;
								}
								else if ((label|0) == 739) {
									$2959 = ___cxa_find_matching_catch_2()|0;
									$2960 = tempRet0;
									$$12 = $2959;$$12130 = $2960;
									label = 741;
								}
								else if ((label|0) == 740) {
									$2961 = ___cxa_find_matching_catch_2()|0;
									$2962 = tempRet0;
									__ZdlPv($$lcssa1351);
									$$12 = $2961;$$12130 = $2962;
									label = 741;
								}
								else if ((label|0) == 745) {
									$$pre891 = HEAP32[$25>>2]|0;
									$2972 = $$pre891;$2974 = $3043;$2975 = $3044;
									break;
								}
								do {
									if ((label|0) == 741) {
										__THREW__ = 0;
										invoke_vi(176,($c2175|0));
										$2963 = __THREW__; __THREW__ = 0;
										$2964 = $2963&1;
										if (!($2964)) {
											$$13 = $$12;$$13131 = $$12130;
											label = 742;
											break;
										}
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									}
								} while(0);
								do {
									if ((label|0) == 742) {
										__THREW__ = 0;
										invoke_vi(176,($c1174|0));
										$2965 = __THREW__; __THREW__ = 0;
										$2966 = $2965&1;
										if (!($2966)) {
											$$14 = $$13;$$14132 = $$13131;
											label = 743;
											break;
										}
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									}
								} while(0);
								do {
									if ((label|0) == 743) {
										__THREW__ = 0;
										invoke_vi(72,($b2173|0));
										$2967 = __THREW__; __THREW__ = 0;
										$2968 = $2967&1;
										if (!($2968)) {
											$$15 = $$14;$$15133 = $$14132;
											break;
										}
										$3035 = ___cxa_find_matching_catch_3(0|0)|0;
										$3036 = tempRet0;
										___clang_call_terminate($3035);
										// unreachable;
									}
								} while(0);
								__THREW__ = 0;
								invoke_vi(72,($b1172|0));
								$2969 = __THREW__; __THREW__ = 0;
								$2970 = $2969&1;
								if ($2970) {
									$3035 = ___cxa_find_matching_catch_3(0|0)|0;
									$3036 = tempRet0;
									___clang_call_terminate($3035);
									// unreachable;
								} else {
									$$16 = $$15;$$16134 = $$15133;
									___resumeException($$16|0);
									// unreachable;
								}
							} else {
								$2972 = $2623;$2974 = $2620;$2975 = $2621;
							}
						} while(0);
						$2971 = (($2972) + 2)|0;
						$2973 = (($2975) - ($2974))|0;
						$2976 = $2973 >> 2;
						$2977 = ($2971|0)<($2976|0);
						if (!($2977)) {
							STACKTOP = sp;return;
						}
						$2978 = ((($9)) + 4|0);
						$2992 = $2971;$i177$0569 = $2972;
						while(1) {
							$2979 = (__ZNK8Textline9characterEi($this,$i177$0569)|0);
							$2980 = ((($2979)) + 28|0);
							$2981 = ((($2979)) + 32|0);
							$2982 = HEAP32[$2981>>2]|0;
							$2983 = HEAP32[$2980>>2]|0;
							$2984 = (($2982) - ($2983))|0;
							$2985 = ($2984|0)==(8);
							do {
								if ($2985) {
									$2986 = (__ZNK9Character5guessEi($2979,0)|0);
									$2987 = HEAP32[$2986>>2]|0;
									$2988 = ($2987|0)==(176);
									if (!($2988)) {
										break;
									}
									$2989 = (($i177$0569) + 1)|0;
									$2990 = (__ZNK8Textline9characterEi($this,$2989)|0);
									$2991 = (__ZNK9Character5maybeEi($2990,47)|0);
									if (!($2991)) {
										break;
									}
									$2993 = (__ZNK8Textline9characterEi($this,$2992)|0);
									$2994 = (__ZNK9Character5maybeEi($2993,111)|0);
									if (!($2994)) {
										break;
									}
									$2995 = (($i177$0569) + 3)|0;
									$2996 = HEAP32[$28>>2]|0;
									$2997 = HEAP32[$27>>2]|0;
									$2998 = (($2996) - ($2997))|0;
									$2999 = $2998 >> 2;
									$3000 = ($2995|0)<($2999|0);
									if ($3000) {
										$3001 = (__ZNK8Textline9characterEi($this,$2995)|0);
										$3002 = (__ZNK9Character5maybeEi($3001,32)|0);
										if (!($3002)) {
											break;
										}
									}
									$3003 = (__ZNK8Textline9characterEi($this,$2989)|0);
									__ZN9Character4joinERS_($2979,$3003);
									$3004 = (__ZNK8Textline9characterEi($this,$2992)|0);
									__ZN9Character4joinERS_($2979,$3004);
									__ZN8Textline16delete_characterEi($this,$2992);
									__ZN8Textline16delete_characterEi($this,$2989);
									$3005 = HEAP32[$2980>>2]|0;
									$3006 = HEAP32[$2981>>2]|0;
									$3007 = ($3006|0)==($3005|0);
									if ($3007) {
										$3014 = $3005;
									} else {
										$__new_last2$i$i$i$i = $3005;
										$scevgep$i$i$i$i = ((($3006)) + -8|0);
										$3008 = $scevgep$i$i$i$i;
										$3009 = (($3008) - ($__new_last2$i$i$i$i))|0;
										$3010 = $3009 >>> 3;
										$3011 = $3010 ^ -1;
										$scevgep4$i$i$i$i = (($3006) + ($3011<<3)|0);
										HEAP32[$2981>>2] = $scevgep4$i$i$i$i;
										$3014 = $scevgep4$i$i$i$i;
									}
									HEAP32[$9>>2] = 37;
									HEAP32[$2978>>2] = 0;
									$3012 = ((($2979)) + 36|0);
									$3013 = HEAP32[$3012>>2]|0;
									$3015 = ($3014|0)==($3013|0);
									if ($3015) {
										__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($2980,$9);
									} else {
										$3016 = $9;
										$3017 = $3016;
										$3018 = HEAP32[$3017>>2]|0;
										$3019 = (($3016) + 4)|0;
										$3020 = $3019;
										$3021 = HEAP32[$3020>>2]|0;
										$3022 = $3014;
										$3023 = $3022;
										HEAP32[$3023>>2] = $3018;
										$3024 = (($3022) + 4)|0;
										$3025 = $3024;
										HEAP32[$3025>>2] = $3021;
										$3026 = HEAP32[$2981>>2]|0;
										$3027 = ((($3026)) + 8|0);
										HEAP32[$2981>>2] = $3027;
									}
								}
							} while(0);
							$3028 = (($i177$0569) + 1)|0;
							$3029 = (($i177$0569) + 3)|0;
							$3030 = HEAP32[$28>>2]|0;
							$3031 = HEAP32[$27>>2]|0;
							$3032 = (($3030) - ($3031))|0;
							$3033 = $3032 >> 2;
							$3034 = ($3029|0)<($3033|0);
							if ($3034) {
								$2992 = $3029;$i177$0569 = $3028;
							} else {
								break;
							}
						}
						STACKTOP = sp;return;
						break;
					}
					case 20: {
						$150 = ___cxa_find_matching_catch_2()|0;
						$151 = tempRet0;
						__ZdlPv($$lcssa1478);
						$$16 = $150;$$16134 = $151;
						___resumeException($$16|0);
						// unreachable;
						break;
					}
					case 21: {
						$152 = ___cxa_find_matching_catch_2()|0;
						$153 = tempRet0;
						__THREW__ = 0;
						invoke_vi(176,($c1|0));
						$154 = __THREW__; __THREW__ = 0;
						$155 = $154&1;
						if ($155) {
							$3035 = ___cxa_find_matching_catch_3(0|0)|0;
							$3036 = tempRet0;
							___clang_call_terminate($3035);
							// unreachable;
						} else {
							$$16 = $152;$$16134 = $153;
							___resumeException($$16|0);
							// unreachable;
						}
						break;
					}
					case 32: {
						$187 = ___cxa_find_matching_catch_2()|0;
						$188 = tempRet0;
						__ZdlPv($$lcssa1463);
						$$16 = $187;$$16134 = $188;
						___resumeException($$16|0);
						// unreachable;
						break;
					}
					case 33: {
						$189 = ___cxa_find_matching_catch_2()|0;
						$190 = tempRet0;
						$$1 = $189;$$1119 = $190;
						break;
					}
					case 34: {
						$191 = ___cxa_find_matching_catch_2()|0;
						$192 = tempRet0;
						__ZdlPv($$lcssa1470);
						$$1 = $191;$$1119 = $192;
						break;
					}
					case 35: {
						$193 = ___cxa_find_matching_catch_2()|0;
						$194 = tempRet0;
						$$0 = $193;$$0118 = $194;
						label = 57;
						break;
					}
					case 36: {
						$195 = ___cxa_find_matching_catch_2()|0;
						$196 = tempRet0;
						__ZdlPv($$lcssa1476);
						$$0 = $195;$$0118 = $196;
						label = 57;
						break;
					}
					case 42: {
						$211 = ___cxa_find_matching_catch_2()|0;
						$212 = tempRet0;
						__ZdlPv($$lcssa1475);
						$$0 = $211;$$0118 = $212;
						label = 57;
						break;
					}
					case 54: {
						$237 = ___cxa_find_matching_catch_2()|0;
						$238 = tempRet0;
						__ZdlPv($$lcssa1477);
						$$0 = $237;$$0118 = $238;
						label = 57;
						break;
					}
				}
				if ((label|0) == 57) {
					__THREW__ = 0;
					invoke_vi(176,($c3|0));
					$241 = __THREW__; __THREW__ = 0;
					$242 = $241&1;
					if ($242) {
						$3035 = ___cxa_find_matching_catch_3(0|0)|0;
						$3036 = tempRet0;
						___clang_call_terminate($3035);
						// unreachable;
					} else {
						$$1 = $$0;$$1119 = $$0118;
					}
				}
				__THREW__ = 0;
				invoke_vi(176,($c2|0));
				$243 = __THREW__; __THREW__ = 0;
				$244 = $243&1;
				if ($244) {
					$3035 = ___cxa_find_matching_catch_3(0|0)|0;
					$3036 = tempRet0;
					___clang_call_terminate($3035);
					// unreachable;
				} else {
					$$16 = $$1;$$16134 = $$1119;
					___resumeException($$16|0);
					// unreachable;
				}
			}
			function __ZNK11User_filter12get_new_codeEi($this,$code) {
				$this = $this|0;
				$code = $code|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $code$result$1 = 0, $i$03 = 0, $i$03$lcssa = 0, $result$1 = 0, $result$1$in = 0, $result$11 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($code|0)>(-1);
				L1: do {
					if ($0) {
						$1 = ($code|0)<(256);
						if ($1) {
							$10 = HEAP32[$this>>2]|0;
							$11 = (($10) + ($code<<2)|0);
							$result$1$in = $11;
						} else {
							$2 = ((($this)) + 12|0);
							$3 = ((($this)) + 16|0);
							$4 = HEAP32[$3>>2]|0;
							$5 = HEAP32[$2>>2]|0;
							$6 = ($4|0)==($5|0);
							$7 = $5;
							if ($6) {
								$result$11 = -1;
								break;
							}
							$8 = (($4) - ($5))|0;
							$9 = $8 >> 3;
							$i$03 = 0;
							while(1) {
								$12 = (($7) + ($i$03<<3)|0);
								$13 = HEAP32[$12>>2]|0;
								$14 = ($13|0)==($code|0);
								if ($14) {
									$i$03$lcssa = $i$03;
									break;
								}
								$16 = (($i$03) + 1)|0;
								$17 = ($16>>>0)<($9>>>0);
								if ($17) {
									$i$03 = $16;
								} else {
									$result$11 = -1;
									break L1;
								}
							}
							$15 = (((($7) + ($i$03$lcssa<<3)|0)) + 4|0);
							$result$1$in = $15;
						}
						$result$1 = HEAP32[$result$1$in>>2]|0;
						$18 = ($result$1|0)<(0);
						if ($18) {
							$result$11 = $result$1;
						} else {
							return ($result$1|0);
						}
					} else {
						$result$11 = -1;
					}
				} while(0);
				$19 = ((($this)) + 40|0);
				$20 = HEAP32[$19>>2]|0;
				$21 = ($20|0)==(1);
				$code$result$1 = $21 ? $code : $result$11;
				return ($code$result$1|0);
			}
			function ___stdio_close($f) {
				$f = $f|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$0 = ((($f)) + 60|0);
				$1 = HEAP32[$0>>2]|0;
				HEAP32[$vararg_buffer>>2] = $1;
				$2 = (___syscall6(6,($vararg_buffer|0))|0);
				$3 = (___syscall_ret($2)|0);
				STACKTOP = sp;return ($3|0);
			}
			function ___syscall_ret($r) {
				$r = $r|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($r>>>0)>(4294963200);
				if ($0) {
					$1 = (0 - ($r))|0;
					$2 = (___errno_location()|0);
					HEAP32[$2>>2] = $1;
					$$0 = -1;
				} else {
					$$0 = $r;
				}
				return ($$0|0);
			}
			function ___errno_location() {
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[1701]|0;
				$1 = ($0|0)==(0|0);
				if ($1) {
					$$0 = 6848;
				} else {
					$2 = (_pthread_self()|0);
					$3 = ((($2)) + 64|0);
					$4 = HEAP32[$3>>2]|0;
					$$0 = $4;
				}
				return ($$0|0);
			}
			function ___stdio_write($f,$buf,$len) {
				$f = $f|0;
				$buf = $buf|0;
				$len = $len|0;
				var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
				var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
				var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
				var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$iovs = sp + 32|0;
				$0 = ((($f)) + 28|0);
				$1 = HEAP32[$0>>2]|0;
				HEAP32[$iovs>>2] = $1;
				$2 = ((($iovs)) + 4|0);
				$3 = ((($f)) + 20|0);
				$4 = HEAP32[$3>>2]|0;
				$5 = (($4) - ($1))|0;
				HEAP32[$2>>2] = $5;
				$6 = ((($iovs)) + 8|0);
				HEAP32[$6>>2] = $buf;
				$7 = ((($iovs)) + 12|0);
				HEAP32[$7>>2] = $len;
				$8 = (($5) + ($len))|0;
				$9 = ((($f)) + 60|0);
				$10 = ((($f)) + 44|0);
				$iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
				while(1) {
					$11 = HEAP32[1701]|0;
					$12 = ($11|0)==(0|0);
					if ($12) {
						$16 = HEAP32[$9>>2]|0;
						HEAP32[$vararg_buffer3>>2] = $16;
						$vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
						HEAP32[$vararg_ptr6>>2] = $iov$0;
						$vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
						HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
						$17 = (___syscall146(146,($vararg_buffer3|0))|0);
						$18 = (___syscall_ret($17)|0);
						$cnt$0 = $18;
					} else {
						_pthread_cleanup_push((209|0),($f|0));
						$13 = HEAP32[$9>>2]|0;
						HEAP32[$vararg_buffer>>2] = $13;
						$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
						HEAP32[$vararg_ptr1>>2] = $iov$0;
						$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
						HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
						$14 = (___syscall146(146,($vararg_buffer|0))|0);
						$15 = (___syscall_ret($14)|0);
						_pthread_cleanup_pop(0);
						$cnt$0 = $15;
					}
					$19 = ($rem$0|0)==($cnt$0|0);
					if ($19) {
						label = 6;
						break;
					}
					$26 = ($cnt$0|0)<(0);
					if ($26) {
						$iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
						label = 8;
						break;
					}
					$34 = (($rem$0) - ($cnt$0))|0;
					$35 = ((($iov$0)) + 4|0);
					$36 = HEAP32[$35>>2]|0;
					$37 = ($cnt$0>>>0)>($36>>>0);
					if ($37) {
						$38 = HEAP32[$10>>2]|0;
						HEAP32[$0>>2] = $38;
						HEAP32[$3>>2] = $38;
						$39 = (($cnt$0) - ($36))|0;
						$40 = ((($iov$0)) + 8|0);
						$41 = (($iovcnt$0) + -1)|0;
						$$phi$trans$insert = ((($iov$0)) + 12|0);
						$$pre = HEAP32[$$phi$trans$insert>>2]|0;
						$49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
					} else {
						$42 = ($iovcnt$0|0)==(2);
						if ($42) {
							$43 = HEAP32[$0>>2]|0;
							$44 = (($43) + ($cnt$0)|0);
							HEAP32[$0>>2] = $44;
							$49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
						} else {
							$49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
						}
					}
					$45 = HEAP32[$iov$1>>2]|0;
					$46 = (($45) + ($cnt$1)|0);
					HEAP32[$iov$1>>2] = $46;
					$47 = ((($iov$1)) + 4|0);
					$48 = (($49) - ($cnt$1))|0;
					HEAP32[$47>>2] = $48;
					$iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
				}
				if ((label|0) == 6) {
					$20 = HEAP32[$10>>2]|0;
					$21 = ((($f)) + 48|0);
					$22 = HEAP32[$21>>2]|0;
					$23 = (($20) + ($22)|0);
					$24 = ((($f)) + 16|0);
					HEAP32[$24>>2] = $23;
					$25 = $20;
					HEAP32[$0>>2] = $25;
					HEAP32[$3>>2] = $25;
					$$0 = $len;
				}
				else if ((label|0) == 8) {
					$27 = ((($f)) + 16|0);
					HEAP32[$27>>2] = 0;
					HEAP32[$0>>2] = 0;
					HEAP32[$3>>2] = 0;
					$28 = HEAP32[$f>>2]|0;
					$29 = $28 | 32;
					HEAP32[$f>>2] = $29;
					$30 = ($iovcnt$0$lcssa12|0)==(2);
					if ($30) {
						$$0 = 0;
					} else {
						$31 = ((($iov$0$lcssa11)) + 4|0);
						$32 = HEAP32[$31>>2]|0;
						$33 = (($len) - ($32))|0;
						$$0 = $33;
					}
				}
				STACKTOP = sp;return ($$0|0);
			}
			function _cleanup_195($p) {
				$p = $p|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($p)) + 68|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0);
				if ($2) {
					___unlockfile($p);
				}
				return;
			}
			function ___unlockfile($f) {
				$f = $f|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function ___stdio_seek($f,$off,$whence) {
				$f = $f|0;
				$off = $off|0;
				$whence = $whence|0;
				var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$ret = sp + 20|0;
				$0 = ((($f)) + 60|0);
				$1 = HEAP32[$0>>2]|0;
				HEAP32[$vararg_buffer>>2] = $1;
				$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
				HEAP32[$vararg_ptr1>>2] = 0;
				$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
				HEAP32[$vararg_ptr2>>2] = $off;
				$vararg_ptr3 = ((($vararg_buffer)) + 12|0);
				HEAP32[$vararg_ptr3>>2] = $ret;
				$vararg_ptr4 = ((($vararg_buffer)) + 16|0);
				HEAP32[$vararg_ptr4>>2] = $whence;
				$2 = (___syscall140(140,($vararg_buffer|0))|0);
				$3 = (___syscall_ret($2)|0);
				$4 = ($3|0)<(0);
				if ($4) {
					HEAP32[$ret>>2] = -1;
					$5 = -1;
				} else {
					$$pre = HEAP32[$ret>>2]|0;
					$5 = $$pre;
				}
				STACKTOP = sp;return ($5|0);
			}
			function ___stdout_write($f,$buf,$len) {
				$f = $f|0;
				$buf = $buf|0;
				$len = $len|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$tio = sp + 12|0;
				$0 = ((($f)) + 36|0);
				HEAP32[$0>>2] = 2;
				$1 = HEAP32[$f>>2]|0;
				$2 = $1 & 64;
				$3 = ($2|0)==(0);
				if ($3) {
					$4 = ((($f)) + 60|0);
					$5 = HEAP32[$4>>2]|0;
					HEAP32[$vararg_buffer>>2] = $5;
					$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
					HEAP32[$vararg_ptr1>>2] = 21505;
					$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
					HEAP32[$vararg_ptr2>>2] = $tio;
					$6 = (___syscall54(54,($vararg_buffer|0))|0);
					$7 = ($6|0)==(0);
					if (!($7)) {
						$8 = ((($f)) + 75|0);
						HEAP8[$8>>0] = -1;
					}
				}
				$9 = (___stdio_write($f,$buf,$len)|0);
				STACKTOP = sp;return ($9|0);
			}
			function ___stdio_read($f,$buf,$len) {
				$f = $f|0;
				$buf = $buf|0;
				$len = $len|0;
				var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$iov = sp + 32|0;
				HEAP32[$iov>>2] = $buf;
				$0 = ((($iov)) + 4|0);
				$1 = ((($f)) + 48|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)!=(0);
				$4 = $3&1;
				$5 = (($len) - ($4))|0;
				HEAP32[$0>>2] = $5;
				$6 = ((($iov)) + 8|0);
				$7 = ((($f)) + 44|0);
				$8 = HEAP32[$7>>2]|0;
				HEAP32[$6>>2] = $8;
				$9 = ((($iov)) + 12|0);
				HEAP32[$9>>2] = $2;
				$10 = HEAP32[1701]|0;
				$11 = ($10|0)==(0|0);
				if ($11) {
					$16 = ((($f)) + 60|0);
					$17 = HEAP32[$16>>2]|0;
					HEAP32[$vararg_buffer3>>2] = $17;
					$vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
					HEAP32[$vararg_ptr6>>2] = $iov;
					$vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
					HEAP32[$vararg_ptr7>>2] = 2;
					$18 = (___syscall145(145,($vararg_buffer3|0))|0);
					$19 = (___syscall_ret($18)|0);
					$cnt$0 = $19;
				} else {
					_pthread_cleanup_push((210|0),($f|0));
					$12 = ((($f)) + 60|0);
					$13 = HEAP32[$12>>2]|0;
					HEAP32[$vararg_buffer>>2] = $13;
					$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
					HEAP32[$vararg_ptr1>>2] = $iov;
					$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
					HEAP32[$vararg_ptr2>>2] = 2;
					$14 = (___syscall145(145,($vararg_buffer|0))|0);
					$15 = (___syscall_ret($14)|0);
					_pthread_cleanup_pop(0);
					$cnt$0 = $15;
				}
				$20 = ($cnt$0|0)<(1);
				if ($20) {
					$21 = $cnt$0 & 48;
					$22 = $21 ^ 16;
					$23 = HEAP32[$f>>2]|0;
					$24 = $23 | $22;
					HEAP32[$f>>2] = $24;
					$25 = ((($f)) + 8|0);
					HEAP32[$25>>2] = 0;
					$26 = ((($f)) + 4|0);
					HEAP32[$26>>2] = 0;
					$$0 = $cnt$0;
				} else {
					$27 = HEAP32[$0>>2]|0;
					$28 = ($cnt$0>>>0)>($27>>>0);
					if ($28) {
						$29 = (($cnt$0) - ($27))|0;
						$30 = HEAP32[$7>>2]|0;
						$31 = ((($f)) + 4|0);
						HEAP32[$31>>2] = $30;
						$$cast = $30;
						$32 = (($$cast) + ($29)|0);
						$33 = ((($f)) + 8|0);
						HEAP32[$33>>2] = $32;
						$34 = HEAP32[$1>>2]|0;
						$35 = ($34|0)==(0);
						if ($35) {
							$$0 = $len;
						} else {
							$36 = ((($$cast)) + 1|0);
							HEAP32[$31>>2] = $36;
							$37 = HEAP8[$$cast>>0]|0;
							$38 = (($len) + -1)|0;
							$39 = (($buf) + ($38)|0);
							HEAP8[$39>>0] = $37;
							$$0 = $len;
						}
					} else {
						$$0 = $cnt$0;
					}
				}
				STACKTOP = sp;return ($$0|0);
			}
			function _cleanup($p) {
				$p = $p|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($p)) + 68|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0);
				if ($2) {
					___unlockfile($p);
				}
				return;
			}
			function ___strchrnul($s,$c) {
				$s = $s|0;
				$c = $c|0;
				var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $c & 255;
				$1 = ($0|0)==(0);
				L1: do {
					if ($1) {
						$6 = (_strlen($s)|0);
						$7 = (($s) + ($6)|0);
						$$0 = $7;
					} else {
						$2 = $s;
						$3 = $2 & 3;
						$4 = ($3|0)==(0);
						if ($4) {
							$$02$lcssa = $s;
						} else {
							$5 = $c&255;
							$$0211 = $s;
							while(1) {
								$8 = HEAP8[$$0211>>0]|0;
								$9 = ($8<<24>>24)==(0);
								$10 = ($8<<24>>24)==($5<<24>>24);
								$or$cond = $9 | $10;
								if ($or$cond) {
									$$0 = $$0211;
									break L1;
								}
								$11 = ((($$0211)) + 1|0);
								$12 = $11;
								$13 = $12 & 3;
								$14 = ($13|0)==(0);
								if ($14) {
									$$02$lcssa = $11;
									break;
								} else {
									$$0211 = $11;
								}
							}
						}
						$15 = Math_imul($0, 16843009)|0;
						$16 = HEAP32[$$02$lcssa>>2]|0;
						$17 = (($16) + -16843009)|0;
						$18 = $16 & -2139062144;
						$19 = $18 ^ -2139062144;
						$20 = $19 & $17;
						$21 = ($20|0)==(0);
						L10: do {
							if ($21) {
								$23 = $16;$w$08 = $$02$lcssa;
								while(1) {
									$22 = $23 ^ $15;
									$24 = (($22) + -16843009)|0;
									$25 = $22 & -2139062144;
									$26 = $25 ^ -2139062144;
									$27 = $26 & $24;
									$28 = ($27|0)==(0);
									if (!($28)) {
										$w$0$lcssa = $w$08;
										break L10;
									}
									$29 = ((($w$08)) + 4|0);
									$30 = HEAP32[$29>>2]|0;
									$31 = (($30) + -16843009)|0;
									$32 = $30 & -2139062144;
									$33 = $32 ^ -2139062144;
									$34 = $33 & $31;
									$35 = ($34|0)==(0);
									if ($35) {
										$23 = $30;$w$08 = $29;
									} else {
										$w$0$lcssa = $29;
										break;
									}
								}
							} else {
								$w$0$lcssa = $$02$lcssa;
							}
						} while(0);
						$36 = $c&255;
						$$1 = $w$0$lcssa;
						while(1) {
							$37 = HEAP8[$$1>>0]|0;
							$38 = ($37<<24>>24)==(0);
							$39 = ($37<<24>>24)==($36<<24>>24);
							$or$cond5 = $38 | $39;
							$40 = ((($$1)) + 1|0);
							if ($or$cond5) {
								$$0 = $$1;
								break;
							} else {
								$$1 = $40;
							}
						}
					}
				} while(0);
				return ($$0|0);
			}
			function _strlen($s) {
				$s = $s|0;
				var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
				var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $s;
				$1 = $0 & 3;
				$2 = ($1|0)==(0);
				L1: do {
					if ($2) {
						$$01$lcssa = $s;
						label = 4;
					} else {
						$$014 = $s;$21 = $0;
						while(1) {
							$3 = HEAP8[$$014>>0]|0;
							$4 = ($3<<24>>24)==(0);
							if ($4) {
								$$pn = $21;
								break L1;
							}
							$5 = ((($$014)) + 1|0);
							$6 = $5;
							$7 = $6 & 3;
							$8 = ($7|0)==(0);
							if ($8) {
								$$01$lcssa = $5;
								label = 4;
								break;
							} else {
								$$014 = $5;$21 = $6;
							}
						}
					}
				} while(0);
				if ((label|0) == 4) {
					$w$0 = $$01$lcssa;
					while(1) {
						$9 = HEAP32[$w$0>>2]|0;
						$10 = (($9) + -16843009)|0;
						$11 = $9 & -2139062144;
						$12 = $11 ^ -2139062144;
						$13 = $12 & $10;
						$14 = ($13|0)==(0);
						$15 = ((($w$0)) + 4|0);
						if ($14) {
							$w$0 = $15;
						} else {
							$$lcssa20 = $9;$w$0$lcssa = $w$0;
							break;
						}
					}
					$16 = $$lcssa20&255;
					$17 = ($16<<24>>24)==(0);
					if ($17) {
						$$1$lcssa = $w$0$lcssa;
					} else {
						$$pn15 = $w$0$lcssa;
						while(1) {
							$18 = ((($$pn15)) + 1|0);
							$$pre = HEAP8[$18>>0]|0;
							$19 = ($$pre<<24>>24)==(0);
							if ($19) {
								$$1$lcssa = $18;
								break;
							} else {
								$$pn15 = $18;
							}
						}
					}
					$20 = $$1$lcssa;
					$$pn = $20;
				}
				$$0 = (($$pn) - ($0))|0;
				return ($$0|0);
			}
			function _strcmp($l,$r) {
				$l = $l|0;
				$r = $r|0;
				var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$0 = HEAP8[$l>>0]|0;
				$1 = HEAP8[$r>>0]|0;
				$2 = ($0<<24>>24)!=($1<<24>>24);
				$3 = ($0<<24>>24)==(0);
				$or$cond3 = $3 | $2;
				if ($or$cond3) {
					$$lcssa = $0;$$lcssa2 = $1;
				} else {
					$$014 = $l;$$05 = $r;
					while(1) {
						$4 = ((($$014)) + 1|0);
						$5 = ((($$05)) + 1|0);
						$6 = HEAP8[$4>>0]|0;
						$7 = HEAP8[$5>>0]|0;
						$8 = ($6<<24>>24)!=($7<<24>>24);
						$9 = ($6<<24>>24)==(0);
						$or$cond = $9 | $8;
						if ($or$cond) {
							$$lcssa = $6;$$lcssa2 = $7;
							break;
						} else {
							$$014 = $4;$$05 = $5;
						}
					}
				}
				$10 = $$lcssa&255;
				$11 = $$lcssa2&255;
				$12 = (($10) - ($11))|0;
				return ($12|0);
			}
			function _tolower($c) {
				$c = $c|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_isupper($c)|0);
				$1 = ($0|0)==(0);
				$2 = $c | 32;
				$$0 = $1 ? $c : $2;
				return ($$0|0);
			}
			function _isupper($c) {
				$c = $c|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (($c) + -65)|0;
				$1 = ($0>>>0)<(26);
				$2 = $1&1;
				return ($2|0);
			}
			function _strchr($s,$c) {
				$s = $s|0;
				$c = $c|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (___strchrnul($s,$c)|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = $c&255;
				$3 = ($1<<24>>24)==($2<<24>>24);
				$4 = $3 ? $0 : 0;
				return ($4|0);
			}
			function _memchr($src,$c,$n) {
				$src = $src|0;
				$c = $c|0;
				$n = $n|0;
				var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
				var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
				var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $c & 255;
				$1 = $src;
				$2 = $1 & 3;
				$3 = ($2|0)!=(0);
				$4 = ($n|0)!=(0);
				$or$cond18 = $4 & $3;
				L1: do {
					if ($or$cond18) {
						$5 = $c&255;
						$$019 = $n;$s$020 = $src;
						while(1) {
							$6 = HEAP8[$s$020>>0]|0;
							$7 = ($6<<24>>24)==($5<<24>>24);
							if ($7) {
								$$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
								label = 6;
								break L1;
							}
							$8 = ((($s$020)) + 1|0);
							$9 = (($$019) + -1)|0;
							$10 = $8;
							$11 = $10 & 3;
							$12 = ($11|0)!=(0);
							$13 = ($9|0)!=(0);
							$or$cond = $13 & $12;
							if ($or$cond) {
								$$019 = $9;$s$020 = $8;
							} else {
								$$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
								label = 5;
								break;
							}
						}
					} else {
						$$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
						label = 5;
					}
				} while(0);
				if ((label|0) == 5) {
					if ($$lcssa) {
						$$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
						label = 6;
					} else {
						$$3 = 0;$s$2 = $s$0$lcssa;
					}
				}
				L8: do {
					if ((label|0) == 6) {
						$14 = HEAP8[$s$0$lcssa29>>0]|0;
						$15 = $c&255;
						$16 = ($14<<24>>24)==($15<<24>>24);
						if ($16) {
							$$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
						} else {
							$17 = Math_imul($0, 16843009)|0;
							$18 = ($$0$lcssa30>>>0)>(3);
							L11: do {
								if ($18) {
									$$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
									while(1) {
										$19 = HEAP32[$w$011>>2]|0;
										$20 = $19 ^ $17;
										$21 = (($20) + -16843009)|0;
										$22 = $20 & -2139062144;
										$23 = $22 ^ -2139062144;
										$24 = $23 & $21;
										$25 = ($24|0)==(0);
										if (!($25)) {
											$$110$lcssa = $$110;$w$011$lcssa = $w$011;
											break;
										}
										$26 = ((($w$011)) + 4|0);
										$27 = (($$110) + -4)|0;
										$28 = ($27>>>0)>(3);
										if ($28) {
											$$110 = $27;$w$011 = $26;
										} else {
											$$1$lcssa = $27;$w$0$lcssa = $26;
											label = 11;
											break L11;
										}
									}
									$$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
								} else {
									$$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
									label = 11;
								}
							} while(0);
							if ((label|0) == 11) {
								$29 = ($$1$lcssa|0)==(0);
								if ($29) {
									$$3 = 0;$s$2 = $w$0$lcssa;
									break;
								} else {
									$$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
								}
							}
							while(1) {
								$30 = HEAP8[$s$15>>0]|0;
								$31 = ($30<<24>>24)==($15<<24>>24);
								if ($31) {
									$$3 = $$24;$s$2 = $s$15;
									break L8;
								}
								$32 = ((($s$15)) + 1|0);
								$33 = (($$24) + -1)|0;
								$34 = ($33|0)==(0);
								if ($34) {
									$$3 = 0;$s$2 = $32;
									break;
								} else {
									$$24 = $33;$s$15 = $32;
								}
							}
						}
					}
				} while(0);
				$35 = ($$3|0)!=(0);
				$36 = $35 ? $s$2 : 0;
				return ($36|0);
			}
			function _strerror($e) {
				$e = $e|0;
				var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
				var sp = 0;
				sp = STACKTOP;
				$i$03 = 0;
				while(1) {
					$1 = (3698 + ($i$03)|0);
					$2 = HEAP8[$1>>0]|0;
					$3 = $2&255;
					$4 = ($3|0)==($e|0);
					if ($4) {
						$i$03$lcssa = $i$03;
						label = 2;
						break;
					}
					$5 = (($i$03) + 1)|0;
					$6 = ($5|0)==(87);
					if ($6) {
						$i$12 = 87;$s$01 = 3786;
						label = 5;
						break;
					} else {
						$i$03 = $5;
					}
				}
				if ((label|0) == 2) {
					$0 = ($i$03$lcssa|0)==(0);
					if ($0) {
						$s$0$lcssa = 3786;
					} else {
						$i$12 = $i$03$lcssa;$s$01 = 3786;
						label = 5;
					}
				}
				if ((label|0) == 5) {
					while(1) {
						label = 0;
						$s$1 = $s$01;
						while(1) {
							$7 = HEAP8[$s$1>>0]|0;
							$8 = ($7<<24>>24)==(0);
							$9 = ((($s$1)) + 1|0);
							if ($8) {
								$$lcssa = $9;
								break;
							} else {
								$s$1 = $9;
							}
						}
						$10 = (($i$12) + -1)|0;
						$11 = ($10|0)==(0);
						if ($11) {
							$s$0$lcssa = $$lcssa;
							break;
						} else {
							$i$12 = $10;$s$01 = $$lcssa;
							label = 5;
						}
					}
				}
				return ($s$0$lcssa|0);
			}
			function _toupper($c) {
				$c = $c|0;
				var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_islower($c)|0);
				$1 = ($0|0)==(0);
				$2 = $c & 95;
				$$0 = $1 ? $c : $2;
				return ($$0|0);
			}
			function _islower($c) {
				$c = $c|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (($c) + -97)|0;
				$1 = ($0>>>0)<(26);
				$2 = $1&1;
				return ($2|0);
			}
			function ___uflow($f) {
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$c = sp;
				$0 = ((($f)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$3 = (___toread($f)|0);
					$4 = ($3|0)==(0);
					if ($4) {
						label = 3;
					} else {
						$$0 = -1;
					}
				} else {
					label = 3;
				}
				if ((label|0) == 3) {
					$5 = ((($f)) + 32|0);
					$6 = HEAP32[$5>>2]|0;
					$7 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$c,1)|0);
					$8 = ($7|0)==(1);
					if ($8) {
						$9 = HEAP8[$c>>0]|0;
						$10 = $9&255;
						$$0 = $10;
					} else {
						$$0 = -1;
					}
				}
				STACKTOP = sp;return ($$0|0);
			}
			function ___toread($f) {
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 74|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = $1 << 24 >> 24;
				$3 = (($2) + 255)|0;
				$4 = $3 | $2;
				$5 = $4&255;
				HEAP8[$0>>0] = $5;
				$6 = ((($f)) + 20|0);
				$7 = HEAP32[$6>>2]|0;
				$8 = ((($f)) + 44|0);
				$9 = HEAP32[$8>>2]|0;
				$10 = ($7>>>0)>($9>>>0);
				if ($10) {
					$11 = ((($f)) + 36|0);
					$12 = HEAP32[$11>>2]|0;
					(FUNCTION_TABLE_iiii[$12 & 255]($f,0,0)|0);
				}
				$13 = ((($f)) + 16|0);
				HEAP32[$13>>2] = 0;
				$14 = ((($f)) + 28|0);
				HEAP32[$14>>2] = 0;
				HEAP32[$6>>2] = 0;
				$15 = HEAP32[$f>>2]|0;
				$16 = $15 & 20;
				$17 = ($16|0)==(0);
				if ($17) {
					$21 = HEAP32[$8>>2]|0;
					$22 = ((($f)) + 8|0);
					HEAP32[$22>>2] = $21;
					$23 = ((($f)) + 4|0);
					HEAP32[$23>>2] = $21;
					$$0 = 0;
				} else {
					$18 = $15 & 4;
					$19 = ($18|0)==(0);
					if ($19) {
						$$0 = -1;
					} else {
						$20 = $15 | 32;
						HEAP32[$f>>2] = $20;
						$$0 = -1;
					}
				}
				return ($$0|0);
			}
			function _isspace($c) {
				$c = $c|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($c|0)==(32);
				$1 = (($c) + -9)|0;
				$2 = ($1>>>0)<(5);
				$3 = $0 | $2;
				$4 = $3&1;
				return ($4|0);
			}
			function _fflush($f) {
				$f = $f|0;
				var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($f|0)==(0|0);
				do {
					if ($0) {
						$7 = HEAP32[148]|0;
						$8 = ($7|0)==(0|0);
						if ($8) {
							$27 = 0;
						} else {
							$9 = HEAP32[148]|0;
							$10 = (_fflush($9)|0);
							$27 = $10;
						}
						___lock(((6832)|0));
						$$012 = HEAP32[(6828)>>2]|0;
						$11 = ($$012|0)==(0|0);
						if ($11) {
							$r$0$lcssa = $27;
						} else {
							$$014 = $$012;$r$03 = $27;
							while(1) {
								$12 = ((($$014)) + 76|0);
								$13 = HEAP32[$12>>2]|0;
								$14 = ($13|0)>(-1);
								if ($14) {
									$15 = (___lockfile($$014)|0);
									$23 = $15;
								} else {
									$23 = 0;
								}
								$16 = ((($$014)) + 20|0);
								$17 = HEAP32[$16>>2]|0;
								$18 = ((($$014)) + 28|0);
								$19 = HEAP32[$18>>2]|0;
								$20 = ($17>>>0)>($19>>>0);
								if ($20) {
									$21 = (___fflush_unlocked($$014)|0);
									$22 = $21 | $r$03;
									$r$1 = $22;
								} else {
									$r$1 = $r$03;
								}
								$24 = ($23|0)==(0);
								if (!($24)) {
									___unlockfile($$014);
								}
								$25 = ((($$014)) + 56|0);
								$$01 = HEAP32[$25>>2]|0;
								$26 = ($$01|0)==(0|0);
								if ($26) {
									$r$0$lcssa = $r$1;
									break;
								} else {
									$$014 = $$01;$r$03 = $r$1;
								}
							}
						}
						___unlock(((6832)|0));
						$$0 = $r$0$lcssa;
					} else {
						$1 = ((($f)) + 76|0);
						$2 = HEAP32[$1>>2]|0;
						$3 = ($2|0)>(-1);
						if (!($3)) {
							$4 = (___fflush_unlocked($f)|0);
							$$0 = $4;
							break;
						}
						$5 = (___lockfile($f)|0);
						$phitmp = ($5|0)==(0);
						$6 = (___fflush_unlocked($f)|0);
						if ($phitmp) {
							$$0 = $6;
						} else {
							___unlockfile($f);
							$$0 = $6;
						}
					}
				} while(0);
				return ($$0|0);
			}
			function ___fflush_unlocked($f) {
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
				var $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 20|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ((($f)) + 28|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = ($1>>>0)>($3>>>0);
				if ($4) {
					$5 = ((($f)) + 36|0);
					$6 = HEAP32[$5>>2]|0;
					(FUNCTION_TABLE_iiii[$6 & 255]($f,0,0)|0);
					$7 = HEAP32[$0>>2]|0;
					$8 = ($7|0)==(0|0);
					if ($8) {
						$$0 = -1;
					} else {
						label = 3;
					}
				} else {
					label = 3;
				}
				if ((label|0) == 3) {
					$9 = ((($f)) + 4|0);
					$10 = HEAP32[$9>>2]|0;
					$11 = ((($f)) + 8|0);
					$12 = HEAP32[$11>>2]|0;
					$13 = ($10>>>0)<($12>>>0);
					if ($13) {
						$14 = ((($f)) + 40|0);
						$15 = HEAP32[$14>>2]|0;
						$16 = $10;
						$17 = $12;
						$18 = (($16) - ($17))|0;
						(FUNCTION_TABLE_iiii[$15 & 255]($f,$18,1)|0);
					}
					$19 = ((($f)) + 16|0);
					HEAP32[$19>>2] = 0;
					HEAP32[$2>>2] = 0;
					HEAP32[$0>>2] = 0;
					HEAP32[$11>>2] = 0;
					HEAP32[$9>>2] = 0;
					$$0 = 0;
				}
				return ($$0|0);
			}
			function ___lockfile($f) {
				$f = $f|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return 0;
			}
			function ___fmodeflags($mode) {
				$mode = $mode|0;
				var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
				var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_strchr($mode,43)|0);
				$1 = ($0|0)==(0|0);
				$2 = HEAP8[$mode>>0]|0;
				$not$ = ($2<<24>>24)!=(114);
				$$ = $not$&1;
				$flags$0 = $1 ? $$ : 2;
				$3 = (_strchr($mode,120)|0);
				$4 = ($3|0)==(0|0);
				$5 = $flags$0 | 128;
				$flags$0$ = $4 ? $flags$0 : $5;
				$6 = (_strchr($mode,101)|0);
				$7 = ($6|0)==(0|0);
				$8 = $flags$0$ | 524288;
				$flags$2 = $7 ? $flags$0$ : $8;
				$9 = ($2<<24>>24)==(114);
				$10 = $flags$2 | 64;
				$flags$2$ = $9 ? $flags$2 : $10;
				$11 = ($2<<24>>24)==(119);
				$12 = $flags$2$ | 512;
				$flags$4 = $11 ? $12 : $flags$2$;
				$13 = ($2<<24>>24)==(97);
				$14 = $flags$4 | 1024;
				$$flags$4 = $13 ? $14 : $flags$4;
				return ($$flags$4|0);
			}
			function _fopen($filename,$mode) {
				$filename = $filename|0;
				$mode = $mode|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$0 = HEAP8[$mode>>0]|0;
				$1 = $0 << 24 >> 24;
				$memchr = (_memchr(5590,$1,4)|0);
				$2 = ($memchr|0)==(0|0);
				if ($2) {
					$3 = (___errno_location()|0);
					HEAP32[$3>>2] = 22;
					$$0 = 0;
				} else {
					$4 = (___fmodeflags($mode)|0);
					$5 = $4 | 32768;
					HEAP32[$vararg_buffer>>2] = $filename;
					$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
					HEAP32[$vararg_ptr1>>2] = $5;
					$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
					HEAP32[$vararg_ptr2>>2] = 438;
					$6 = (___syscall5(5,($vararg_buffer|0))|0);
					$7 = (___syscall_ret($6)|0);
					$8 = ($7|0)<(0);
					if ($8) {
						$$0 = 0;
					} else {
						$9 = (___fdopen($7,$mode)|0);
						$10 = ($9|0)==(0|0);
						if ($10) {
							HEAP32[$vararg_buffer3>>2] = $7;
							(___syscall6(6,($vararg_buffer3|0))|0);
							$$0 = 0;
						} else {
							$$0 = $9;
						}
					}
				}
				STACKTOP = sp;return ($$0|0);
			}
			function ___fdopen($fd,$mode) {
				$fd = $fd|0;
				$mode = $mode|0;
				var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
				var sp = 0, stop = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer12 = sp + 40|0;
				$vararg_buffer7 = sp + 24|0;
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$tio = sp + 52|0;
				$0 = HEAP8[$mode>>0]|0;
				$1 = $0 << 24 >> 24;
				$memchr = (_memchr(5590,$1,4)|0);
				$2 = ($memchr|0)==(0|0);
				if ($2) {
					$3 = (___errno_location()|0);
					HEAP32[$3>>2] = 22;
					$$0 = 0;
				} else {
					$4 = (_malloc(1144)|0);
					$5 = ($4|0)==(0|0);
					if ($5) {
						$$0 = 0;
					} else {
						dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
						$6 = (_strchr($mode,43)|0);
						$7 = ($6|0)==(0|0);
						if ($7) {
							$8 = ($0<<24>>24)==(114);
							$9 = $8 ? 8 : 4;
							HEAP32[$4>>2] = $9;
						}
						$10 = (_strchr($mode,101)|0);
						$11 = ($10|0)==(0|0);
						if ($11) {
							$12 = $0;
						} else {
							HEAP32[$vararg_buffer>>2] = $fd;
							$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
							HEAP32[$vararg_ptr1>>2] = 2;
							$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
							HEAP32[$vararg_ptr2>>2] = 1;
							(___syscall221(221,($vararg_buffer|0))|0);
							$$pre = HEAP8[$mode>>0]|0;
							$12 = $$pre;
						}
						$13 = ($12<<24>>24)==(97);
						if ($13) {
							HEAP32[$vararg_buffer3>>2] = $fd;
							$vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
							HEAP32[$vararg_ptr6>>2] = 3;
							$14 = (___syscall221(221,($vararg_buffer3|0))|0);
							$15 = $14 & 1024;
							$16 = ($15|0)==(0);
							if ($16) {
								$17 = $14 | 1024;
								HEAP32[$vararg_buffer7>>2] = $fd;
								$vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
								HEAP32[$vararg_ptr10>>2] = 4;
								$vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
								HEAP32[$vararg_ptr11>>2] = $17;
								(___syscall221(221,($vararg_buffer7|0))|0);
							}
							$18 = HEAP32[$4>>2]|0;
							$19 = $18 | 128;
							HEAP32[$4>>2] = $19;
							$26 = $19;
						} else {
							$$pre1 = HEAP32[$4>>2]|0;
							$26 = $$pre1;
						}
						$20 = ((($4)) + 60|0);
						HEAP32[$20>>2] = $fd;
						$21 = ((($4)) + 120|0);
						$22 = ((($4)) + 44|0);
						HEAP32[$22>>2] = $21;
						$23 = ((($4)) + 48|0);
						HEAP32[$23>>2] = 1024;
						$24 = ((($4)) + 75|0);
						HEAP8[$24>>0] = -1;
						$25 = $26 & 8;
						$27 = ($25|0)==(0);
						if ($27) {
							HEAP32[$vararg_buffer12>>2] = $fd;
							$vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
							HEAP32[$vararg_ptr15>>2] = 21505;
							$vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
							HEAP32[$vararg_ptr16>>2] = $tio;
							$28 = (___syscall54(54,($vararg_buffer12|0))|0);
							$29 = ($28|0)==(0);
							if ($29) {
								HEAP8[$24>>0] = 10;
							}
						}
						$30 = ((($4)) + 32|0);
						HEAP32[$30>>2] = 5;
						$31 = ((($4)) + 36|0);
						HEAP32[$31>>2] = 2;
						$32 = ((($4)) + 40|0);
						HEAP32[$32>>2] = 3;
						$33 = ((($4)) + 12|0);
						HEAP32[$33>>2] = 1;
						$34 = HEAP32[(6808)>>2]|0;
						$35 = ($34|0)==(0);
						if ($35) {
							$36 = ((($4)) + 76|0);
							HEAP32[$36>>2] = -1;
						}
						___lock(((6832)|0));
						$37 = HEAP32[(6828)>>2]|0;
						$38 = ((($4)) + 56|0);
						HEAP32[$38>>2] = $37;
						$39 = ($37|0)==(0);
						if (!($39)) {
							$$cast = $37;
							$40 = ((($$cast)) + 52|0);
							HEAP32[$40>>2] = $4;
						}
						HEAP32[(6828)>>2] = $4;
						___unlock(((6832)|0));
						$$0 = $4;
					}
				}
				STACKTOP = sp;return ($$0|0);
			}
			function _fclose($f) {
				$f = $f|0;
				var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 76|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)>(-1);
				if ($2) {
				}
				$3 = HEAP32[$f>>2]|0;
				$4 = $3 & 1;
				$5 = ($4|0)!=(0);
				if (!($5)) {
					___lock(((6832)|0));
					$6 = ((($f)) + 52|0);
					$7 = HEAP32[$6>>2]|0;
					$8 = ($7|0)==(0|0);
					$9 = $7;
					$$pre = ((($f)) + 56|0);
					if (!($8)) {
						$10 = HEAP32[$$pre>>2]|0;
						$11 = ((($7)) + 56|0);
						HEAP32[$11>>2] = $10;
					}
					$12 = HEAP32[$$pre>>2]|0;
					$13 = ($12|0)==(0|0);
					$14 = $12;
					if (!($13)) {
						$15 = ((($12)) + 52|0);
						HEAP32[$15>>2] = $9;
					}
					$16 = HEAP32[(6828)>>2]|0;
					$17 = ($16|0)==($f|0);
					if ($17) {
						HEAP32[(6828)>>2] = $14;
					}
					___unlock(((6832)|0));
				}
				$18 = (_fflush($f)|0);
				$19 = ((($f)) + 12|0);
				$20 = HEAP32[$19>>2]|0;
				$21 = (FUNCTION_TABLE_ii[$20 & 255]($f)|0);
				$22 = $21 | $18;
				$23 = ((($f)) + 92|0);
				$24 = HEAP32[$23>>2]|0;
				$25 = ($24|0)==(0|0);
				if (!($25)) {
					_free($24);
				}
				if (!($5)) {
					_free($f);
				}
				return ($22|0);
			}
			function _vfprintf($f,$fmt,$ap) {
				$f = $f|0;
				$fmt = $fmt|0;
				$ap = $ap|0;
				var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
				var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$ap2 = sp + 120|0;
				$nl_type = sp + 80|0;
				$nl_arg = sp;
				$internal_buf = sp + 136|0;
				dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
				$vacopy_currentptr = HEAP32[$ap>>2]|0;
				HEAP32[$ap2>>2] = $vacopy_currentptr;
				$0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
				$1 = ($0|0)<(0);
				if ($1) {
					$$0 = -1;
				} else {
					$2 = ((($f)) + 76|0);
					$3 = HEAP32[$2>>2]|0;
					$4 = ($3|0)>(-1);
					if ($4) {
						$5 = (___lockfile($f)|0);
						$32 = $5;
					} else {
						$32 = 0;
					}
					$6 = HEAP32[$f>>2]|0;
					$7 = $6 & 32;
					$8 = ((($f)) + 74|0);
					$9 = HEAP8[$8>>0]|0;
					$10 = ($9<<24>>24)<(1);
					if ($10) {
						$11 = $6 & -33;
						HEAP32[$f>>2] = $11;
					}
					$12 = ((($f)) + 48|0);
					$13 = HEAP32[$12>>2]|0;
					$14 = ($13|0)==(0);
					if ($14) {
						$16 = ((($f)) + 44|0);
						$17 = HEAP32[$16>>2]|0;
						HEAP32[$16>>2] = $internal_buf;
						$18 = ((($f)) + 28|0);
						HEAP32[$18>>2] = $internal_buf;
						$19 = ((($f)) + 20|0);
						HEAP32[$19>>2] = $internal_buf;
						HEAP32[$12>>2] = 80;
						$20 = ((($internal_buf)) + 80|0);
						$21 = ((($f)) + 16|0);
						HEAP32[$21>>2] = $20;
						$22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
						$23 = ($17|0)==(0|0);
						if ($23) {
							$ret$1 = $22;
						} else {
							$24 = ((($f)) + 36|0);
							$25 = HEAP32[$24>>2]|0;
							(FUNCTION_TABLE_iiii[$25 & 255]($f,0,0)|0);
							$26 = HEAP32[$19>>2]|0;
							$27 = ($26|0)==(0|0);
							$$ = $27 ? -1 : $22;
							HEAP32[$16>>2] = $17;
							HEAP32[$12>>2] = 0;
							HEAP32[$21>>2] = 0;
							HEAP32[$18>>2] = 0;
							HEAP32[$19>>2] = 0;
							$ret$1 = $$;
						}
					} else {
						$15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
						$ret$1 = $15;
					}
					$28 = HEAP32[$f>>2]|0;
					$29 = $28 & 32;
					$30 = ($29|0)==(0);
					$ret$1$ = $30 ? $ret$1 : -1;
					$31 = $28 | $7;
					HEAP32[$f>>2] = $31;
					$33 = ($32|0)==(0);
					if (!($33)) {
						___unlockfile($f);
					}
					$$0 = $ret$1$;
				}
				STACKTOP = sp;return ($$0|0);
			}
			function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
				$f = $f|0;
				$fmt = $fmt|0;
				$ap = $ap|0;
				$nl_arg = $nl_arg|0;
				$nl_type = $nl_type|0;
				var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
				var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
				var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
				var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
				var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
				var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
				var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
				var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
				var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
				var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
				var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
				var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
				var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
				var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
				var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
				var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
				var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
				var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
				var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
				var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
				var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
				var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
				var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
				var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
				var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
				var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
				var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
				var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
				var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
				var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
				var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
				var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
				var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
				var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
				var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
				var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
				var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
				var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
				var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
				var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
				var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
				var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
				var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
				var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
				var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
				var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
				var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
				var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
				var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
				var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
				var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
				var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
				var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
				var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$big$i = sp + 24|0;
				$e2$i = sp + 16|0;
				$buf$i = sp + 588|0;
				$ebuf0$i = sp + 576|0;
				$arg = sp;
				$buf = sp + 536|0;
				$wc = sp + 8|0;
				$mb = sp + 528|0;
				$0 = ($f|0)!=(0|0);
				$1 = ((($buf)) + 40|0);
				$2 = $1;
				$3 = ((($buf)) + 39|0);
				$4 = ((($wc)) + 4|0);
				$5 = $buf$i;
				$6 = (0 - ($5))|0;
				$7 = ((($ebuf0$i)) + 12|0);
				$8 = ((($ebuf0$i)) + 11|0);
				$9 = $7;
				$10 = (($9) - ($5))|0;
				$11 = (-2 - ($5))|0;
				$12 = (($9) + 2)|0;
				$13 = ((($big$i)) + 288|0);
				$14 = ((($buf$i)) + 9|0);
				$15 = $14;
				$16 = ((($buf$i)) + 8|0);
				$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
				L1: while(1) {
					$17 = ($cnt$0|0)>(-1);
					do {
						if ($17) {
							$18 = (2147483647 - ($cnt$0))|0;
							$19 = ($l$0|0)>($18|0);
							if ($19) {
								$20 = (___errno_location()|0);
								HEAP32[$20>>2] = 75;
								$cnt$1 = -1;
								break;
							} else {
								$21 = (($l$0) + ($cnt$0))|0;
								$cnt$1 = $21;
								break;
							}
						} else {
							$cnt$1 = $cnt$0;
						}
					} while(0);
					$22 = HEAP8[$s$0>>0]|0;
					$23 = ($22<<24>>24)==(0);
					if ($23) {
						$cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
						label = 244;
						break;
					} else {
						$24 = $22;$s$1 = $s$0;
					}
					L9: while(1) {
						switch ($24<<24>>24) {
							case 37:  {
								$s$292 = $s$1;$z$093 = $s$1;
								label = 9;
								break L9;
								break;
							}
							case 0:  {
								$s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
								break L9;
								break;
							}
							default: {
							}
						}
						$25 = ((($s$1)) + 1|0);
						$$pre = HEAP8[$25>>0]|0;
						$24 = $$pre;$s$1 = $25;
					}
					L12: do {
						if ((label|0) == 9) {
							while(1) {
								label = 0;
								$26 = ((($s$292)) + 1|0);
								$27 = HEAP8[$26>>0]|0;
								$28 = ($27<<24>>24)==(37);
								if (!($28)) {
									$s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
									break L12;
								}
								$29 = ((($z$093)) + 1|0);
								$30 = ((($s$292)) + 2|0);
								$31 = HEAP8[$30>>0]|0;
								$32 = ($31<<24>>24)==(37);
								if ($32) {
									$s$292 = $30;$z$093 = $29;
									label = 9;
								} else {
									$s$2$lcssa = $30;$z$0$lcssa = $29;
									break;
								}
							}
						}
					} while(0);
					$33 = $z$0$lcssa;
					$34 = $s$0;
					$35 = (($33) - ($34))|0;
					if ($0) {
						$36 = HEAP32[$f>>2]|0;
						$37 = $36 & 32;
						$38 = ($37|0)==(0);
						if ($38) {
							(___fwritex($s$0,$35,$f)|0);
						}
					}
					$39 = ($z$0$lcssa|0)==($s$0|0);
					if (!($39)) {
						$l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
						continue;
					}
					$40 = ((($s$2$lcssa)) + 1|0);
					$41 = HEAP8[$40>>0]|0;
					$42 = $41 << 24 >> 24;
					$isdigittmp = (($42) + -48)|0;
					$isdigit = ($isdigittmp>>>0)<(10);
					if ($isdigit) {
						$43 = ((($s$2$lcssa)) + 2|0);
						$44 = HEAP8[$43>>0]|0;
						$45 = ($44<<24>>24)==(36);
						$46 = ((($s$2$lcssa)) + 3|0);
						$$43 = $45 ? $46 : $40;
						$$l10n$0 = $45 ? 1 : $l10n$0;
						$isdigittmp$ = $45 ? $isdigittmp : -1;
						$$pre170 = HEAP8[$$43>>0]|0;
						$48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
					} else {
						$48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
					}
					$47 = $48 << 24 >> 24;
					$49 = $47 & -32;
					$50 = ($49|0)==(32);
					L25: do {
						if ($50) {
							$52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
							while(1) {
								$51 = (($52) + -32)|0;
								$53 = 1 << $51;
								$54 = $53 & 75913;
								$55 = ($54|0)==(0);
								if ($55) {
									$66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
									break L25;
								}
								$56 = $57 << 24 >> 24;
								$58 = (($56) + -32)|0;
								$59 = 1 << $58;
								$60 = $59 | $fl$0100;
								$61 = ((($storemerge899)) + 1|0);
								$62 = HEAP8[$61>>0]|0;
								$63 = $62 << 24 >> 24;
								$64 = $63 & -32;
								$65 = ($64|0)==(32);
								if ($65) {
									$52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
								} else {
									$66 = $62;$fl$053 = $60;$storemerge851 = $61;
									break;
								}
							}
						} else {
							$66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
						}
					} while(0);
					$67 = ($66<<24>>24)==(42);
					do {
						if ($67) {
							$68 = ((($storemerge851)) + 1|0);
							$69 = HEAP8[$68>>0]|0;
							$70 = $69 << 24 >> 24;
							$isdigittmp11 = (($70) + -48)|0;
							$isdigit12 = ($isdigittmp11>>>0)<(10);
							if ($isdigit12) {
								$71 = ((($storemerge851)) + 2|0);
								$72 = HEAP8[$71>>0]|0;
								$73 = ($72<<24>>24)==(36);
								if ($73) {
									$74 = (($nl_type) + ($isdigittmp11<<2)|0);
									HEAP32[$74>>2] = 10;
									$75 = HEAP8[$68>>0]|0;
									$76 = $75 << 24 >> 24;
									$77 = (($76) + -48)|0;
									$78 = (($nl_arg) + ($77<<3)|0);
									$79 = $78;
									$80 = $79;
									$81 = HEAP32[$80>>2]|0;
									$82 = (($79) + 4)|0;
									$83 = $82;
									$84 = HEAP32[$83>>2]|0;
									$85 = ((($storemerge851)) + 3|0);
									$l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
								} else {
									label = 24;
								}
							} else {
								label = 24;
							}
							if ((label|0) == 24) {
								label = 0;
								$86 = ($l10n$1|0)==(0);
								if (!($86)) {
									$$0 = -1;
									break L1;
								}
								if (!($0)) {
									$fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
									break;
								}
								$arglist_current = HEAP32[$ap>>2]|0;
								$87 = $arglist_current;
								$88 = ((0) + 4|0);
								$expanded4 = $88;
								$expanded = (($expanded4) - 1)|0;
								$89 = (($87) + ($expanded))|0;
								$90 = ((0) + 4|0);
								$expanded8 = $90;
								$expanded7 = (($expanded8) - 1)|0;
								$expanded6 = $expanded7 ^ -1;
								$91 = $89 & $expanded6;
								$92 = $91;
								$93 = HEAP32[$92>>2]|0;
								$arglist_next = ((($92)) + 4|0);
								HEAP32[$ap>>2] = $arglist_next;
								$l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
							}
							$94 = ($w$0|0)<(0);
							if ($94) {
								$95 = $fl$053 | 8192;
								$96 = (0 - ($w$0))|0;
								$fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
							} else {
								$fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
							}
						} else {
							$97 = $66 << 24 >> 24;
							$isdigittmp1$i = (($97) + -48)|0;
							$isdigit2$i = ($isdigittmp1$i>>>0)<(10);
							if ($isdigit2$i) {
								$101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
								while(1) {
									$98 = ($i$03$i*10)|0;
									$99 = (($98) + ($isdigittmp4$i))|0;
									$100 = ((($101)) + 1|0);
									$102 = HEAP8[$100>>0]|0;
									$103 = $102 << 24 >> 24;
									$isdigittmp$i = (($103) + -48)|0;
									$isdigit$i = ($isdigittmp$i>>>0)<(10);
									if ($isdigit$i) {
										$101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
									} else {
										$$lcssa = $99;$$lcssa295 = $100;
										break;
									}
								}
								$104 = ($$lcssa|0)<(0);
								if ($104) {
									$$0 = -1;
									break L1;
								} else {
									$fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
								}
							} else {
								$fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
							}
						}
					} while(0);
					$105 = HEAP8[$s$4>>0]|0;
					$106 = ($105<<24>>24)==(46);
					L46: do {
						if ($106) {
							$107 = ((($s$4)) + 1|0);
							$108 = HEAP8[$107>>0]|0;
							$109 = ($108<<24>>24)==(42);
							if (!($109)) {
								$136 = $108 << 24 >> 24;
								$isdigittmp1$i22 = (($136) + -48)|0;
								$isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
								if ($isdigit2$i23) {
									$140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
								} else {
									$p$0 = 0;$s$6 = $107;
									break;
								}
								while(1) {
									$137 = ($i$03$i25*10)|0;
									$138 = (($137) + ($isdigittmp4$i24))|0;
									$139 = ((($140)) + 1|0);
									$141 = HEAP8[$139>>0]|0;
									$142 = $141 << 24 >> 24;
									$isdigittmp$i26 = (($142) + -48)|0;
									$isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
									if ($isdigit$i27) {
										$140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
									} else {
										$p$0 = $138;$s$6 = $139;
										break L46;
									}
								}
							}
							$110 = ((($s$4)) + 2|0);
							$111 = HEAP8[$110>>0]|0;
							$112 = $111 << 24 >> 24;
							$isdigittmp9 = (($112) + -48)|0;
							$isdigit10 = ($isdigittmp9>>>0)<(10);
							if ($isdigit10) {
								$113 = ((($s$4)) + 3|0);
								$114 = HEAP8[$113>>0]|0;
								$115 = ($114<<24>>24)==(36);
								if ($115) {
									$116 = (($nl_type) + ($isdigittmp9<<2)|0);
									HEAP32[$116>>2] = 10;
									$117 = HEAP8[$110>>0]|0;
									$118 = $117 << 24 >> 24;
									$119 = (($118) + -48)|0;
									$120 = (($nl_arg) + ($119<<3)|0);
									$121 = $120;
									$122 = $121;
									$123 = HEAP32[$122>>2]|0;
									$124 = (($121) + 4)|0;
									$125 = $124;
									$126 = HEAP32[$125>>2]|0;
									$127 = ((($s$4)) + 4|0);
									$p$0 = $123;$s$6 = $127;
									break;
								}
							}
							$128 = ($l10n$3|0)==(0);
							if (!($128)) {
								$$0 = -1;
								break L1;
							}
							if ($0) {
								$arglist_current2 = HEAP32[$ap>>2]|0;
								$129 = $arglist_current2;
								$130 = ((0) + 4|0);
								$expanded11 = $130;
								$expanded10 = (($expanded11) - 1)|0;
								$131 = (($129) + ($expanded10))|0;
								$132 = ((0) + 4|0);
								$expanded15 = $132;
								$expanded14 = (($expanded15) - 1)|0;
								$expanded13 = $expanded14 ^ -1;
								$133 = $131 & $expanded13;
								$134 = $133;
								$135 = HEAP32[$134>>2]|0;
								$arglist_next3 = ((($134)) + 4|0);
								HEAP32[$ap>>2] = $arglist_next3;
								$p$0 = $135;$s$6 = $110;
							} else {
								$p$0 = 0;$s$6 = $110;
							}
						} else {
							$p$0 = -1;$s$6 = $s$4;
						}
					} while(0);
					$s$7 = $s$6;$st$0 = 0;
					while(1) {
						$143 = HEAP8[$s$7>>0]|0;
						$144 = $143 << 24 >> 24;
						$145 = (($144) + -65)|0;
						$146 = ($145>>>0)>(57);
						if ($146) {
							$$0 = -1;
							break L1;
						}
						$147 = ((($s$7)) + 1|0);
						$148 = ((5594 + (($st$0*58)|0)|0) + ($145)|0);
						$149 = HEAP8[$148>>0]|0;
						$150 = $149&255;
						$151 = (($150) + -1)|0;
						$152 = ($151>>>0)<(8);
						if ($152) {
							$s$7 = $147;$st$0 = $150;
						} else {
							$$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
							break;
						}
					}
					$153 = ($$lcssa301<<24>>24)==(0);
					if ($153) {
						$$0 = -1;
						break;
					}
					$154 = ($$lcssa301<<24>>24)==(19);
					$155 = ($argpos$0|0)>(-1);
					do {
						if ($154) {
							if ($155) {
								$$0 = -1;
								break L1;
							} else {
								label = 52;
							}
						} else {
							if ($155) {
								$156 = (($nl_type) + ($argpos$0<<2)|0);
								HEAP32[$156>>2] = $$lcssa302;
								$157 = (($nl_arg) + ($argpos$0<<3)|0);
								$158 = $157;
								$159 = $158;
								$160 = HEAP32[$159>>2]|0;
								$161 = (($158) + 4)|0;
								$162 = $161;
								$163 = HEAP32[$162>>2]|0;
								$164 = $arg;
								$165 = $164;
								HEAP32[$165>>2] = $160;
								$166 = (($164) + 4)|0;
								$167 = $166;
								HEAP32[$167>>2] = $163;
								label = 52;
								break;
							}
							if (!($0)) {
								$$0 = 0;
								break L1;
							}
							_pop_arg_161($arg,$$lcssa302,$ap);
						}
					} while(0);
					if ((label|0) == 52) {
						label = 0;
						if (!($0)) {
							$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
							continue;
						}
					}
					$168 = HEAP8[$s$7$lcssa298>>0]|0;
					$169 = $168 << 24 >> 24;
					$170 = ($st$0$lcssa299|0)!=(0);
					$171 = $169 & 15;
					$172 = ($171|0)==(3);
					$or$cond15 = $170 & $172;
					$173 = $169 & -33;
					$t$0 = $or$cond15 ? $173 : $169;
					$174 = $fl$1 & 8192;
					$175 = ($174|0)==(0);
					$176 = $fl$1 & -65537;
					$fl$1$ = $175 ? $fl$1 : $176;
					L75: do {
						switch ($t$0|0) {
							case 110:  {
								switch ($st$0$lcssa299|0) {
									case 0:  {
										$183 = HEAP32[$arg>>2]|0;
										HEAP32[$183>>2] = $cnt$1;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 1:  {
										$184 = HEAP32[$arg>>2]|0;
										HEAP32[$184>>2] = $cnt$1;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 2:  {
										$185 = ($cnt$1|0)<(0);
										$186 = $185 << 31 >> 31;
										$187 = HEAP32[$arg>>2]|0;
										$188 = $187;
										$189 = $188;
										HEAP32[$189>>2] = $cnt$1;
										$190 = (($188) + 4)|0;
										$191 = $190;
										HEAP32[$191>>2] = $186;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 3:  {
										$192 = $cnt$1&65535;
										$193 = HEAP32[$arg>>2]|0;
										HEAP16[$193>>1] = $192;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 4:  {
										$194 = $cnt$1&255;
										$195 = HEAP32[$arg>>2]|0;
										HEAP8[$195>>0] = $194;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 6:  {
										$196 = HEAP32[$arg>>2]|0;
										HEAP32[$196>>2] = $cnt$1;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									case 7:  {
										$197 = ($cnt$1|0)<(0);
										$198 = $197 << 31 >> 31;
										$199 = HEAP32[$arg>>2]|0;
										$200 = $199;
										$201 = $200;
										HEAP32[$201>>2] = $cnt$1;
										$202 = (($200) + 4)|0;
										$203 = $202;
										HEAP32[$203>>2] = $198;
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
										break;
									}
									default: {
										$cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
										continue L1;
									}
								}
								break;
							}
							case 112:  {
								$204 = ($p$0>>>0)>(8);
								$205 = $204 ? $p$0 : 8;
								$206 = $fl$1$ | 8;
								$fl$3 = $206;$p$1 = $205;$t$1 = 120;
								label = 64;
								break;
							}
							case 88: case 120:  {
								$fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
								label = 64;
								break;
							}
							case 111:  {
								$244 = $arg;
								$245 = $244;
								$246 = HEAP32[$245>>2]|0;
								$247 = (($244) + 4)|0;
								$248 = $247;
								$249 = HEAP32[$248>>2]|0;
								$250 = ($246|0)==(0);
								$251 = ($249|0)==(0);
								$252 = $250 & $251;
								if ($252) {
									$$0$lcssa$i = $1;
								} else {
									$$03$i33 = $1;$254 = $246;$258 = $249;
									while(1) {
										$253 = $254 & 7;
										$255 = $253 | 48;
										$256 = $255&255;
										$257 = ((($$03$i33)) + -1|0);
										HEAP8[$257>>0] = $256;
										$259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
										$260 = tempRet0;
										$261 = ($259|0)==(0);
										$262 = ($260|0)==(0);
										$263 = $261 & $262;
										if ($263) {
											$$0$lcssa$i = $257;
											break;
										} else {
											$$03$i33 = $257;$254 = $259;$258 = $260;
										}
									}
								}
								$264 = $fl$1$ & 8;
								$265 = ($264|0)==(0);
								if ($265) {
									$a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 6074;
									label = 77;
								} else {
									$266 = $$0$lcssa$i;
									$267 = (($2) - ($266))|0;
									$268 = ($p$0|0)>($267|0);
									$269 = (($267) + 1)|0;
									$p$0$ = $268 ? $p$0 : $269;
									$a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 6074;
									label = 77;
								}
								break;
							}
							case 105: case 100:  {
								$270 = $arg;
								$271 = $270;
								$272 = HEAP32[$271>>2]|0;
								$273 = (($270) + 4)|0;
								$274 = $273;
								$275 = HEAP32[$274>>2]|0;
								$276 = ($275|0)<(0);
								if ($276) {
									$277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
									$278 = tempRet0;
									$279 = $arg;
									$280 = $279;
									HEAP32[$280>>2] = $277;
									$281 = (($279) + 4)|0;
									$282 = $281;
									HEAP32[$282>>2] = $278;
									$287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 6074;
									label = 76;
									break L75;
								}
								$283 = $fl$1$ & 2048;
								$284 = ($283|0)==(0);
								if ($284) {
									$285 = $fl$1$ & 1;
									$286 = ($285|0)==(0);
									$$ = $286 ? 6074 : (6076);
									$287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
									label = 76;
								} else {
									$287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (6075);
									label = 76;
								}
								break;
							}
							case 117:  {
								$177 = $arg;
								$178 = $177;
								$179 = HEAP32[$178>>2]|0;
								$180 = (($177) + 4)|0;
								$181 = $180;
								$182 = HEAP32[$181>>2]|0;
								$287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 6074;
								label = 76;
								break;
							}
							case 99:  {
								$308 = $arg;
								$309 = $308;
								$310 = HEAP32[$309>>2]|0;
								$311 = (($308) + 4)|0;
								$312 = $311;
								$313 = HEAP32[$312>>2]|0;
								$314 = $310&255;
								HEAP8[$3>>0] = $314;
								$a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 6074;$z$2 = $1;
								break;
							}
							case 109:  {
								$315 = (___errno_location()|0);
								$316 = HEAP32[$315>>2]|0;
								$317 = (_strerror($316)|0);
								$a$1 = $317;
								label = 82;
								break;
							}
							case 115:  {
								$318 = HEAP32[$arg>>2]|0;
								$319 = ($318|0)!=(0|0);
								$320 = $319 ? $318 : 6084;
								$a$1 = $320;
								label = 82;
								break;
							}
							case 67:  {
								$327 = $arg;
								$328 = $327;
								$329 = HEAP32[$328>>2]|0;
								$330 = (($327) + 4)|0;
								$331 = $330;
								$332 = HEAP32[$331>>2]|0;
								HEAP32[$wc>>2] = $329;
								HEAP32[$4>>2] = 0;
								HEAP32[$arg>>2] = $wc;
								$798 = $wc;$p$4176 = -1;
								label = 86;
								break;
							}
							case 83:  {
								$$pre171 = HEAP32[$arg>>2]|0;
								$333 = ($p$0|0)==(0);
								if ($333) {
									_pad($f,32,$w$1,0,$fl$1$);
									$i$0$lcssa178 = 0;
									label = 97;
								} else {
									$798 = $$pre171;$p$4176 = $p$0;
									label = 86;
								}
								break;
							}
							case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
								$358 = +HEAPF64[$arg>>3];
								HEAP32[$e2$i>>2] = 0;
								HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
								$360 = HEAP32[tempDoublePtr+4>>2]|0;
								$361 = ($360|0)<(0);
								if ($361) {
									$362 = -$358;
									$$07$i = $362;$pl$0$i = 1;$prefix$0$i = 6091;
								} else {
									$363 = $fl$1$ & 2048;
									$364 = ($363|0)==(0);
									if ($364) {
										$365 = $fl$1$ & 1;
										$366 = ($365|0)==(0);
										$$$i = $366 ? (6092) : (6097);
										$$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
									} else {
										$$07$i = $358;$pl$0$i = 1;$prefix$0$i = (6094);
									}
								}
								HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
								$368 = HEAP32[tempDoublePtr+4>>2]|0;
								$369 = $368 & 2146435072;
								$370 = ($369>>>0)<(2146435072);
								$371 = (0)<(0);
								$372 = ($369|0)==(2146435072);
								$373 = $372 & $371;
								$374 = $370 | $373;
								do {
									if ($374) {
										$390 = (+_frexpl($$07$i,$e2$i));
										$391 = $390 * 2.0;
										$392 = $391 != 0.0;
										if ($392) {
											$393 = HEAP32[$e2$i>>2]|0;
											$394 = (($393) + -1)|0;
											HEAP32[$e2$i>>2] = $394;
										}
										$395 = $t$0 | 32;
										$396 = ($395|0)==(97);
										if ($396) {
											$397 = $t$0 & 32;
											$398 = ($397|0)==(0);
											$399 = ((($prefix$0$i)) + 9|0);
											$prefix$0$$i = $398 ? $prefix$0$i : $399;
											$400 = $pl$0$i | 2;
											$401 = ($p$0>>>0)>(11);
											$402 = (12 - ($p$0))|0;
											$403 = ($402|0)==(0);
											$404 = $401 | $403;
											do {
												if ($404) {
													$$1$i = $391;
												} else {
													$re$171$i = $402;$round$070$i = 8.0;
													while(1) {
														$405 = (($re$171$i) + -1)|0;
														$406 = $round$070$i * 16.0;
														$407 = ($405|0)==(0);
														if ($407) {
															$$lcssa319 = $406;
															break;
														} else {
															$re$171$i = $405;$round$070$i = $406;
														}
													}
													$408 = HEAP8[$prefix$0$$i>>0]|0;
													$409 = ($408<<24>>24)==(45);
													if ($409) {
														$410 = -$391;
														$411 = $410 - $$lcssa319;
														$412 = $$lcssa319 + $411;
														$413 = -$412;
														$$1$i = $413;
														break;
													} else {
														$414 = $391 + $$lcssa319;
														$415 = $414 - $$lcssa319;
														$$1$i = $415;
														break;
													}
												}
											} while(0);
											$416 = HEAP32[$e2$i>>2]|0;
											$417 = ($416|0)<(0);
											$418 = (0 - ($416))|0;
											$419 = $417 ? $418 : $416;
											$420 = ($419|0)<(0);
											$421 = $420 << 31 >> 31;
											$422 = (_fmt_u($419,$421,$7)|0);
											$423 = ($422|0)==($7|0);
											if ($423) {
												HEAP8[$8>>0] = 48;
												$estr$0$i = $8;
											} else {
												$estr$0$i = $422;
											}
											$424 = $416 >> 31;
											$425 = $424 & 2;
											$426 = (($425) + 43)|0;
											$427 = $426&255;
											$428 = ((($estr$0$i)) + -1|0);
											HEAP8[$428>>0] = $427;
											$429 = (($t$0) + 15)|0;
											$430 = $429&255;
											$431 = ((($estr$0$i)) + -2|0);
											HEAP8[$431>>0] = $430;
											$notrhs$i = ($p$0|0)<(1);
											$432 = $fl$1$ & 8;
											$433 = ($432|0)==(0);
											$$2$i = $$1$i;$s$0$i = $buf$i;
											while(1) {
												$434 = (~~(($$2$i)));
												$435 = (6058 + ($434)|0);
												$436 = HEAP8[$435>>0]|0;
												$437 = $436&255;
												$438 = $437 | $397;
												$439 = $438&255;
												$440 = ((($s$0$i)) + 1|0);
												HEAP8[$s$0$i>>0] = $439;
												$441 = (+($434|0));
												$442 = $$2$i - $441;
												$443 = $442 * 16.0;
												$444 = $440;
												$445 = (($444) - ($5))|0;
												$446 = ($445|0)==(1);
												do {
													if ($446) {
														$notlhs$i = $443 == 0.0;
														$or$cond3$not$i = $notrhs$i & $notlhs$i;
														$or$cond$i = $433 & $or$cond3$not$i;
														if ($or$cond$i) {
															$s$1$i = $440;
															break;
														}
														$447 = ((($s$0$i)) + 2|0);
														HEAP8[$440>>0] = 46;
														$s$1$i = $447;
													} else {
														$s$1$i = $440;
													}
												} while(0);
												$448 = $443 != 0.0;
												if ($448) {
													$$2$i = $443;$s$0$i = $s$1$i;
												} else {
													$s$1$i$lcssa = $s$1$i;
													break;
												}
											}
											$449 = ($p$0|0)!=(0);
											$$pre188$i = $s$1$i$lcssa;
											$450 = (($11) + ($$pre188$i))|0;
											$451 = ($450|0)<($p$0|0);
											$or$cond122 = $449 & $451;
											$452 = $431;
											$453 = (($12) + ($p$0))|0;
											$454 = (($453) - ($452))|0;
											$455 = (($10) - ($452))|0;
											$456 = (($455) + ($$pre188$i))|0;
											$l$0$i = $or$cond122 ? $454 : $456;
											$457 = (($l$0$i) + ($400))|0;
											_pad($f,32,$w$1,$457,$fl$1$);
											$458 = HEAP32[$f>>2]|0;
											$459 = $458 & 32;
											$460 = ($459|0)==(0);
											if ($460) {
												(___fwritex($prefix$0$$i,$400,$f)|0);
											}
											$461 = $fl$1$ ^ 65536;
											_pad($f,48,$w$1,$457,$461);
											$462 = (($$pre188$i) - ($5))|0;
											$463 = HEAP32[$f>>2]|0;
											$464 = $463 & 32;
											$465 = ($464|0)==(0);
											if ($465) {
												(___fwritex($buf$i,$462,$f)|0);
											}
											$466 = (($9) - ($452))|0;
											$sum = (($462) + ($466))|0;
											$467 = (($l$0$i) - ($sum))|0;
											_pad($f,48,$467,0,0);
											$468 = HEAP32[$f>>2]|0;
											$469 = $468 & 32;
											$470 = ($469|0)==(0);
											if ($470) {
												(___fwritex($431,$466,$f)|0);
											}
											$471 = $fl$1$ ^ 8192;
											_pad($f,32,$w$1,$457,$471);
											$472 = ($457|0)<($w$1|0);
											$w$$i = $472 ? $w$1 : $457;
											$$0$i = $w$$i;
											break;
										}
										$473 = ($p$0|0)<(0);
										$$p$i = $473 ? 6 : $p$0;
										if ($392) {
											$474 = $391 * 268435456.0;
											$475 = HEAP32[$e2$i>>2]|0;
											$476 = (($475) + -28)|0;
											HEAP32[$e2$i>>2] = $476;
											$$3$i = $474;$477 = $476;
										} else {
											$$pre185$i = HEAP32[$e2$i>>2]|0;
											$$3$i = $391;$477 = $$pre185$i;
										}
										$478 = ($477|0)<(0);
										$$33$i = $478 ? $big$i : $13;
										$479 = $$33$i;
										$$4$i = $$3$i;$z$0$i = $$33$i;
										while(1) {
											$480 = (~~(($$4$i))>>>0);
											HEAP32[$z$0$i>>2] = $480;
											$481 = ((($z$0$i)) + 4|0);
											$482 = (+($480>>>0));
											$483 = $$4$i - $482;
											$484 = $483 * 1.0E+9;
											$485 = $484 != 0.0;
											if ($485) {
												$$4$i = $484;$z$0$i = $481;
											} else {
												$$lcssa303 = $481;
												break;
											}
										}
										$$pr$i = HEAP32[$e2$i>>2]|0;
										$486 = ($$pr$i|0)>(0);
										if ($486) {
											$487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
											while(1) {
												$488 = ($487|0)>(29);
												$489 = $488 ? 29 : $487;
												$d$0141$i = ((($z$1148$i)) + -4|0);
												$490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
												do {
													if ($490) {
														$a$2$ph$i = $a$1149$i;
													} else {
														$carry$0142$i = 0;$d$0143$i = $d$0141$i;
														while(1) {
															$491 = HEAP32[$d$0143$i>>2]|0;
															$492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
															$493 = tempRet0;
															$494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
															$495 = tempRet0;
															$496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
															$497 = tempRet0;
															HEAP32[$d$0143$i>>2] = $496;
															$498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
															$499 = tempRet0;
															$d$0$i = ((($d$0143$i)) + -4|0);
															$500 = ($d$0$i>>>0)<($a$1149$i>>>0);
															if ($500) {
																$$lcssa304 = $498;
																break;
															} else {
																$carry$0142$i = $498;$d$0143$i = $d$0$i;
															}
														}
														$501 = ($$lcssa304|0)==(0);
														if ($501) {
															$a$2$ph$i = $a$1149$i;
															break;
														}
														$502 = ((($a$1149$i)) + -4|0);
														HEAP32[$502>>2] = $$lcssa304;
														$a$2$ph$i = $502;
													}
												} while(0);
												$z$2$i = $z$1148$i;
												while(1) {
													$503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
													if (!($503)) {
														$z$2$i$lcssa = $z$2$i;
														break;
													}
													$504 = ((($z$2$i)) + -4|0);
													$505 = HEAP32[$504>>2]|0;
													$506 = ($505|0)==(0);
													if ($506) {
														$z$2$i = $504;
													} else {
														$z$2$i$lcssa = $z$2$i;
														break;
													}
												}
												$507 = HEAP32[$e2$i>>2]|0;
												$508 = (($507) - ($489))|0;
												HEAP32[$e2$i>>2] = $508;
												$509 = ($508|0)>(0);
												if ($509) {
													$487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
												} else {
													$$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
													break;
												}
											}
										} else {
											$$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
										}
										$510 = ($$pr50$i|0)<(0);
										if ($510) {
											$511 = (($$p$i) + 25)|0;
											$512 = (($511|0) / 9)&-1;
											$513 = (($512) + 1)|0;
											$514 = ($395|0)==(102);
											$516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
											while(1) {
												$515 = (0 - ($516))|0;
												$517 = ($515|0)>(9);
												$518 = $517 ? 9 : $515;
												$519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
												do {
													if ($519) {
														$523 = 1 << $518;
														$524 = (($523) + -1)|0;
														$525 = 1000000000 >>> $518;
														$carry3$0130$i = 0;$d$1129$i = $a$3136$i;
														while(1) {
															$526 = HEAP32[$d$1129$i>>2]|0;
															$527 = $526 & $524;
															$528 = $526 >>> $518;
															$529 = (($528) + ($carry3$0130$i))|0;
															HEAP32[$d$1129$i>>2] = $529;
															$530 = Math_imul($527, $525)|0;
															$531 = ((($d$1129$i)) + 4|0);
															$532 = ($531>>>0)<($z$3135$i>>>0);
															if ($532) {
																$carry3$0130$i = $530;$d$1129$i = $531;
															} else {
																$$lcssa306 = $530;
																break;
															}
														}
														$533 = HEAP32[$a$3136$i>>2]|0;
														$534 = ($533|0)==(0);
														$535 = ((($a$3136$i)) + 4|0);
														$$a$3$i = $534 ? $535 : $a$3136$i;
														$536 = ($$lcssa306|0)==(0);
														if ($536) {
															$$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
															break;
														}
														$537 = ((($z$3135$i)) + 4|0);
														HEAP32[$z$3135$i>>2] = $$lcssa306;
														$$a$3192$i = $$a$3$i;$z$4$i = $537;
													} else {
														$520 = HEAP32[$a$3136$i>>2]|0;
														$521 = ($520|0)==(0);
														$522 = ((($a$3136$i)) + 4|0);
														$$a$3191$i = $521 ? $522 : $a$3136$i;
														$$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
													}
												} while(0);
												$538 = $514 ? $$33$i : $$a$3192$i;
												$539 = $z$4$i;
												$540 = $538;
												$541 = (($539) - ($540))|0;
												$542 = $541 >> 2;
												$543 = ($542|0)>($513|0);
												$544 = (($538) + ($513<<2)|0);
												$$z$4$i = $543 ? $544 : $z$4$i;
												$545 = HEAP32[$e2$i>>2]|0;
												$546 = (($545) + ($518))|0;
												HEAP32[$e2$i>>2] = $546;
												$547 = ($546|0)<(0);
												if ($547) {
													$516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
												} else {
													$a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
													break;
												}
											}
										} else {
											$a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
										}
										$548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
										do {
											if ($548) {
												$549 = $a$3$lcssa$i;
												$550 = (($479) - ($549))|0;
												$551 = $550 >> 2;
												$552 = ($551*9)|0;
												$553 = HEAP32[$a$3$lcssa$i>>2]|0;
												$554 = ($553>>>0)<(10);
												if ($554) {
													$e$1$i = $552;
													break;
												} else {
													$e$0125$i = $552;$i$0124$i = 10;
												}
												while(1) {
													$555 = ($i$0124$i*10)|0;
													$556 = (($e$0125$i) + 1)|0;
													$557 = ($553>>>0)<($555>>>0);
													if ($557) {
														$e$1$i = $556;
														break;
													} else {
														$e$0125$i = $556;$i$0124$i = $555;
													}
												}
											} else {
												$e$1$i = 0;
											}
										} while(0);
										$558 = ($395|0)!=(102);
										$559 = $558 ? $e$1$i : 0;
										$560 = (($$p$i) - ($559))|0;
										$561 = ($395|0)==(103);
										$562 = ($$p$i|0)!=(0);
										$563 = $562 & $561;
										$$neg55$i = $563 << 31 >> 31;
										$564 = (($560) + ($$neg55$i))|0;
										$565 = $z$3$lcssa$i;
										$566 = (($565) - ($479))|0;
										$567 = $566 >> 2;
										$568 = ($567*9)|0;
										$569 = (($568) + -9)|0;
										$570 = ($564|0)<($569|0);
										if ($570) {
											$571 = ((($$33$i)) + 4|0);
											$572 = (($564) + 9216)|0;
											$573 = (($572|0) / 9)&-1;
											$574 = (($573) + -1024)|0;
											$575 = (($571) + ($574<<2)|0);
											$576 = (($572|0) % 9)&-1;
											$j$0117$i = (($576) + 1)|0;
											$577 = ($j$0117$i|0)<(9);
											if ($577) {
												$i$1118$i = 10;$j$0119$i = $j$0117$i;
												while(1) {
													$578 = ($i$1118$i*10)|0;
													$j$0$i = (($j$0119$i) + 1)|0;
													$exitcond$i = ($j$0$i|0)==(9);
													if ($exitcond$i) {
														$i$1$lcssa$i = $578;
														break;
													} else {
														$i$1118$i = $578;$j$0119$i = $j$0$i;
													}
												}
											} else {
												$i$1$lcssa$i = 10;
											}
											$579 = HEAP32[$575>>2]|0;
											$580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
											$581 = ($580|0)==(0);
											$582 = ((($575)) + 4|0);
											$583 = ($582|0)==($z$3$lcssa$i|0);
											$or$cond18$i = $583 & $581;
											do {
												if ($or$cond18$i) {
													$a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
												} else {
													$584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
													$585 = $584 & 1;
													$586 = ($585|0)==(0);
													$$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
													$587 = (($i$1$lcssa$i|0) / 2)&-1;
													$588 = ($580>>>0)<($587>>>0);
													if ($588) {
														$small$0$i = 0.5;
													} else {
														$589 = ($580|0)==($587|0);
														$or$cond22$i = $583 & $589;
														$$36$i = $or$cond22$i ? 1.0 : 1.5;
														$small$0$i = $$36$i;
													}
													$590 = ($pl$0$i|0)==(0);
													do {
														if ($590) {
															$round6$1$i = $$20$i;$small$1$i = $small$0$i;
														} else {
															$591 = HEAP8[$prefix$0$i>>0]|0;
															$592 = ($591<<24>>24)==(45);
															if (!($592)) {
																$round6$1$i = $$20$i;$small$1$i = $small$0$i;
																break;
															}
															$593 = -$$20$i;
															$594 = -$small$0$i;
															$round6$1$i = $593;$small$1$i = $594;
														}
													} while(0);
													$595 = (($579) - ($580))|0;
													HEAP32[$575>>2] = $595;
													$596 = $round6$1$i + $small$1$i;
													$597 = $596 != $round6$1$i;
													if (!($597)) {
														$a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
														break;
													}
													$598 = (($595) + ($i$1$lcssa$i))|0;
													HEAP32[$575>>2] = $598;
													$599 = ($598>>>0)>(999999999);
													if ($599) {
														$a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
														while(1) {
															$600 = ((($d$2110$i)) + -4|0);
															HEAP32[$d$2110$i>>2] = 0;
															$601 = ($600>>>0)<($a$5111$i>>>0);
															if ($601) {
																$602 = ((($a$5111$i)) + -4|0);
																HEAP32[$602>>2] = 0;
																$a$6$i = $602;
															} else {
																$a$6$i = $a$5111$i;
															}
															$603 = HEAP32[$600>>2]|0;
															$604 = (($603) + 1)|0;
															HEAP32[$600>>2] = $604;
															$605 = ($604>>>0)>(999999999);
															if ($605) {
																$a$5111$i = $a$6$i;$d$2110$i = $600;
															} else {
																$a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
																break;
															}
														}
													} else {
														$a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
													}
													$606 = $a$5$lcssa$i;
													$607 = (($479) - ($606))|0;
													$608 = $607 >> 2;
													$609 = ($608*9)|0;
													$610 = HEAP32[$a$5$lcssa$i>>2]|0;
													$611 = ($610>>>0)<(10);
													if ($611) {
														$a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
														break;
													} else {
														$e$2106$i = $609;$i$2105$i = 10;
													}
													while(1) {
														$612 = ($i$2105$i*10)|0;
														$613 = (($e$2106$i) + 1)|0;
														$614 = ($610>>>0)<($612>>>0);
														if ($614) {
															$a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
															break;
														} else {
															$e$2106$i = $613;$i$2105$i = $612;
														}
													}
												}
											} while(0);
											$615 = ((($d$4$i)) + 4|0);
											$616 = ($z$3$lcssa$i>>>0)>($615>>>0);
											$$z$3$i = $616 ? $615 : $z$3$lcssa$i;
											$a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
										} else {
											$a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
										}
										$617 = (0 - ($e$5$ph$i))|0;
										$z$7$i = $z$7$ph$i;
										while(1) {
											$618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
											if (!($618)) {
												$$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
												break;
											}
											$619 = ((($z$7$i)) + -4|0);
											$620 = HEAP32[$619>>2]|0;
											$621 = ($620|0)==(0);
											if ($621) {
												$z$7$i = $619;
											} else {
												$$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
												break;
											}
										}
										do {
											if ($561) {
												$622 = $562&1;
												$623 = $622 ^ 1;
												$$p$$i = (($623) + ($$p$i))|0;
												$624 = ($$p$$i|0)>($e$5$ph$i|0);
												$625 = ($e$5$ph$i|0)>(-5);
												$or$cond6$i = $624 & $625;
												if ($or$cond6$i) {
													$626 = (($t$0) + -1)|0;
													$$neg56$i = (($$p$$i) + -1)|0;
													$627 = (($$neg56$i) - ($e$5$ph$i))|0;
													$$013$i = $626;$$210$i = $627;
												} else {
													$628 = (($t$0) + -2)|0;
													$629 = (($$p$$i) + -1)|0;
													$$013$i = $628;$$210$i = $629;
												}
												$630 = $fl$1$ & 8;
												$631 = ($630|0)==(0);
												if (!($631)) {
													$$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
													break;
												}
												do {
													if ($$lcssa162$i) {
														$632 = ((($z$7$i$lcssa)) + -4|0);
														$633 = HEAP32[$632>>2]|0;
														$634 = ($633|0)==(0);
														if ($634) {
															$j$2$i = 9;
															break;
														}
														$635 = (($633>>>0) % 10)&-1;
														$636 = ($635|0)==(0);
														if ($636) {
															$i$3101$i = 10;$j$1102$i = 0;
														} else {
															$j$2$i = 0;
															break;
														}
														while(1) {
															$637 = ($i$3101$i*10)|0;
															$638 = (($j$1102$i) + 1)|0;
															$639 = (($633>>>0) % ($637>>>0))&-1;
															$640 = ($639|0)==(0);
															if ($640) {
																$i$3101$i = $637;$j$1102$i = $638;
															} else {
																$j$2$i = $638;
																break;
															}
														}
													} else {
														$j$2$i = 9;
													}
												} while(0);
												$641 = $$013$i | 32;
												$642 = ($641|0)==(102);
												$643 = $z$7$i$lcssa;
												$644 = (($643) - ($479))|0;
												$645 = $644 >> 2;
												$646 = ($645*9)|0;
												$647 = (($646) + -9)|0;
												if ($642) {
													$648 = (($647) - ($j$2$i))|0;
													$649 = ($648|0)<(0);
													$$23$i = $649 ? 0 : $648;
													$650 = ($$210$i|0)<($$23$i|0);
													$$210$$24$i = $650 ? $$210$i : $$23$i;
													$$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
													break;
												} else {
													$651 = (($647) + ($e$5$ph$i))|0;
													$652 = (($651) - ($j$2$i))|0;
													$653 = ($652|0)<(0);
													$$25$i = $653 ? 0 : $652;
													$654 = ($$210$i|0)<($$25$i|0);
													$$210$$26$i = $654 ? $$210$i : $$25$i;
													$$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
													break;
												}
											} else {
												$$pre189$i = $fl$1$ & 8;
												$$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
											}
										} while(0);
										$655 = $$311$i | $$pre$phi190$iZ2D;
										$656 = ($655|0)!=(0);
										$657 = $656&1;
										$658 = $$114$i | 32;
										$659 = ($658|0)==(102);
										if ($659) {
											$660 = ($e$5$ph$i|0)>(0);
											$661 = $660 ? $e$5$ph$i : 0;
											$$pn$i = $661;$estr$2$i = 0;
										} else {
											$662 = ($e$5$ph$i|0)<(0);
											$663 = $662 ? $617 : $e$5$ph$i;
											$664 = ($663|0)<(0);
											$665 = $664 << 31 >> 31;
											$666 = (_fmt_u($663,$665,$7)|0);
											$667 = $666;
											$668 = (($9) - ($667))|0;
											$669 = ($668|0)<(2);
											if ($669) {
												$estr$195$i = $666;
												while(1) {
													$670 = ((($estr$195$i)) + -1|0);
													HEAP8[$670>>0] = 48;
													$671 = $670;
													$672 = (($9) - ($671))|0;
													$673 = ($672|0)<(2);
													if ($673) {
														$estr$195$i = $670;
													} else {
														$estr$1$lcssa$i = $670;
														break;
													}
												}
											} else {
												$estr$1$lcssa$i = $666;
											}
											$674 = $e$5$ph$i >> 31;
											$675 = $674 & 2;
											$676 = (($675) + 43)|0;
											$677 = $676&255;
											$678 = ((($estr$1$lcssa$i)) + -1|0);
											HEAP8[$678>>0] = $677;
											$679 = $$114$i&255;
											$680 = ((($estr$1$lcssa$i)) + -2|0);
											HEAP8[$680>>0] = $679;
											$681 = $680;
											$682 = (($9) - ($681))|0;
											$$pn$i = $682;$estr$2$i = $680;
										}
										$683 = (($pl$0$i) + 1)|0;
										$684 = (($683) + ($$311$i))|0;
										$l$1$i = (($684) + ($657))|0;
										$685 = (($l$1$i) + ($$pn$i))|0;
										_pad($f,32,$w$1,$685,$fl$1$);
										$686 = HEAP32[$f>>2]|0;
										$687 = $686 & 32;
										$688 = ($687|0)==(0);
										if ($688) {
											(___fwritex($prefix$0$i,$pl$0$i,$f)|0);
										}
										$689 = $fl$1$ ^ 65536;
										_pad($f,48,$w$1,$685,$689);
										do {
											if ($659) {
												$690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
												$r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
												$d$584$i = $r$0$a$9$i;
												while(1) {
													$691 = HEAP32[$d$584$i>>2]|0;
													$692 = (_fmt_u($691,0,$14)|0);
													$693 = ($d$584$i|0)==($r$0$a$9$i|0);
													do {
														if ($693) {
															$699 = ($692|0)==($14|0);
															if (!($699)) {
																$s7$1$i = $692;
																break;
															}
															HEAP8[$16>>0] = 48;
															$s7$1$i = $16;
														} else {
															$694 = ($692>>>0)>($buf$i>>>0);
															if (!($694)) {
																$s7$1$i = $692;
																break;
															}
															$695 = $692;
															$696 = (($695) - ($5))|0;
															_memset(($buf$i|0),48,($696|0))|0;
															$s7$081$i = $692;
															while(1) {
																$697 = ((($s7$081$i)) + -1|0);
																$698 = ($697>>>0)>($buf$i>>>0);
																if ($698) {
																	$s7$081$i = $697;
																} else {
																	$s7$1$i = $697;
																	break;
																}
															}
														}
													} while(0);
													$700 = HEAP32[$f>>2]|0;
													$701 = $700 & 32;
													$702 = ($701|0)==(0);
													if ($702) {
														$703 = $s7$1$i;
														$704 = (($15) - ($703))|0;
														(___fwritex($s7$1$i,$704,$f)|0);
													}
													$705 = ((($d$584$i)) + 4|0);
													$706 = ($705>>>0)>($$33$i>>>0);
													if ($706) {
														$$lcssa316 = $705;
														break;
													} else {
														$d$584$i = $705;
													}
												}
												$707 = ($655|0)==(0);
												do {
													if (!($707)) {
														$708 = HEAP32[$f>>2]|0;
														$709 = $708 & 32;
														$710 = ($709|0)==(0);
														if (!($710)) {
															break;
														}
														(___fwritex(6126,1,$f)|0);
													}
												} while(0);
												$711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
												$712 = ($$311$i|0)>(0);
												$713 = $712 & $711;
												if ($713) {
													$$41278$i = $$311$i;$d$677$i = $$lcssa316;
													while(1) {
														$714 = HEAP32[$d$677$i>>2]|0;
														$715 = (_fmt_u($714,0,$14)|0);
														$716 = ($715>>>0)>($buf$i>>>0);
														if ($716) {
															$717 = $715;
															$718 = (($717) - ($5))|0;
															_memset(($buf$i|0),48,($718|0))|0;
															$s8$072$i = $715;
															while(1) {
																$719 = ((($s8$072$i)) + -1|0);
																$720 = ($719>>>0)>($buf$i>>>0);
																if ($720) {
																	$s8$072$i = $719;
																} else {
																	$s8$0$lcssa$i = $719;
																	break;
																}
															}
														} else {
															$s8$0$lcssa$i = $715;
														}
														$721 = HEAP32[$f>>2]|0;
														$722 = $721 & 32;
														$723 = ($722|0)==(0);
														if ($723) {
															$724 = ($$41278$i|0)>(9);
															$725 = $724 ? 9 : $$41278$i;
															(___fwritex($s8$0$lcssa$i,$725,$f)|0);
														}
														$726 = ((($d$677$i)) + 4|0);
														$727 = (($$41278$i) + -9)|0;
														$728 = ($726>>>0)<($z$7$i$lcssa>>>0);
														$729 = ($$41278$i|0)>(9);
														$730 = $729 & $728;
														if ($730) {
															$$41278$i = $727;$d$677$i = $726;
														} else {
															$$412$lcssa$i = $727;
															break;
														}
													}
												} else {
													$$412$lcssa$i = $$311$i;
												}
												$731 = (($$412$lcssa$i) + 9)|0;
												_pad($f,48,$731,9,0);
											} else {
												$732 = ((($a$9$ph$i)) + 4|0);
												$z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
												$733 = ($$311$i|0)>(-1);
												if ($733) {
													$734 = ($$pre$phi190$iZ2D|0)==(0);
													$$589$i = $$311$i;$d$788$i = $a$9$ph$i;
													while(1) {
														$735 = HEAP32[$d$788$i>>2]|0;
														$736 = (_fmt_u($735,0,$14)|0);
														$737 = ($736|0)==($14|0);
														if ($737) {
															HEAP8[$16>>0] = 48;
															$s9$0$i = $16;
														} else {
															$s9$0$i = $736;
														}
														$738 = ($d$788$i|0)==($a$9$ph$i|0);
														do {
															if ($738) {
																$742 = ((($s9$0$i)) + 1|0);
																$743 = HEAP32[$f>>2]|0;
																$744 = $743 & 32;
																$745 = ($744|0)==(0);
																if ($745) {
																	(___fwritex($s9$0$i,1,$f)|0);
																}
																$746 = ($$589$i|0)<(1);
																$or$cond31$i = $734 & $746;
																if ($or$cond31$i) {
																	$s9$2$i = $742;
																	break;
																}
																$747 = HEAP32[$f>>2]|0;
																$748 = $747 & 32;
																$749 = ($748|0)==(0);
																if (!($749)) {
																	$s9$2$i = $742;
																	break;
																}
																(___fwritex(6126,1,$f)|0);
																$s9$2$i = $742;
															} else {
																$739 = ($s9$0$i>>>0)>($buf$i>>>0);
																if (!($739)) {
																	$s9$2$i = $s9$0$i;
																	break;
																}
																$scevgep182$i = (($s9$0$i) + ($6)|0);
																$scevgep182183$i = $scevgep182$i;
																_memset(($buf$i|0),48,($scevgep182183$i|0))|0;
																$s9$185$i = $s9$0$i;
																while(1) {
																	$740 = ((($s9$185$i)) + -1|0);
																	$741 = ($740>>>0)>($buf$i>>>0);
																	if ($741) {
																		$s9$185$i = $740;
																	} else {
																		$s9$2$i = $740;
																		break;
																	}
																}
															}
														} while(0);
														$750 = $s9$2$i;
														$751 = (($15) - ($750))|0;
														$752 = HEAP32[$f>>2]|0;
														$753 = $752 & 32;
														$754 = ($753|0)==(0);
														if ($754) {
															$755 = ($$589$i|0)>($751|0);
															$756 = $755 ? $751 : $$589$i;
															(___fwritex($s9$2$i,$756,$f)|0);
														}
														$757 = (($$589$i) - ($751))|0;
														$758 = ((($d$788$i)) + 4|0);
														$759 = ($758>>>0)<($z$7$$i>>>0);
														$760 = ($757|0)>(-1);
														$761 = $759 & $760;
														if ($761) {
															$$589$i = $757;$d$788$i = $758;
														} else {
															$$5$lcssa$i = $757;
															break;
														}
													}
												} else {
													$$5$lcssa$i = $$311$i;
												}
												$762 = (($$5$lcssa$i) + 18)|0;
												_pad($f,48,$762,18,0);
												$763 = HEAP32[$f>>2]|0;
												$764 = $763 & 32;
												$765 = ($764|0)==(0);
												if (!($765)) {
													break;
												}
												$766 = $estr$2$i;
												$767 = (($9) - ($766))|0;
												(___fwritex($estr$2$i,$767,$f)|0);
											}
										} while(0);
										$768 = $fl$1$ ^ 8192;
										_pad($f,32,$w$1,$685,$768);
										$769 = ($685|0)<($w$1|0);
										$w$32$i = $769 ? $w$1 : $685;
										$$0$i = $w$32$i;
									} else {
										$375 = $t$0 & 32;
										$376 = ($375|0)!=(0);
										$377 = $376 ? 6110 : 6114;
										$378 = ($$07$i != $$07$i) | (0.0 != 0.0);
										$379 = $376 ? 6118 : 6122;
										$pl$1$i = $378 ? 0 : $pl$0$i;
										$s1$0$i = $378 ? $379 : $377;
										$380 = (($pl$1$i) + 3)|0;
										_pad($f,32,$w$1,$380,$176);
										$381 = HEAP32[$f>>2]|0;
										$382 = $381 & 32;
										$383 = ($382|0)==(0);
										if ($383) {
											(___fwritex($prefix$0$i,$pl$1$i,$f)|0);
											$$pre$i = HEAP32[$f>>2]|0;
											$385 = $$pre$i;
										} else {
											$385 = $381;
										}
										$384 = $385 & 32;
										$386 = ($384|0)==(0);
										if ($386) {
											(___fwritex($s1$0$i,3,$f)|0);
										}
										$387 = $fl$1$ ^ 8192;
										_pad($f,32,$w$1,$380,$387);
										$388 = ($380|0)<($w$1|0);
										$389 = $388 ? $w$1 : $380;
										$$0$i = $389;
									}
								} while(0);
								$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
								continue L1;
								break;
							}
							default: {
								$a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 6074;$z$2 = $1;
							}
						}
					} while(0);
					L311: do {
						if ((label|0) == 64) {
							label = 0;
							$207 = $arg;
							$208 = $207;
							$209 = HEAP32[$208>>2]|0;
							$210 = (($207) + 4)|0;
							$211 = $210;
							$212 = HEAP32[$211>>2]|0;
							$213 = $t$1 & 32;
							$214 = ($209|0)==(0);
							$215 = ($212|0)==(0);
							$216 = $214 & $215;
							if ($216) {
								$a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6074;
								label = 77;
							} else {
								$$012$i = $1;$218 = $209;$225 = $212;
								while(1) {
									$217 = $218 & 15;
									$219 = (6058 + ($217)|0);
									$220 = HEAP8[$219>>0]|0;
									$221 = $220&255;
									$222 = $221 | $213;
									$223 = $222&255;
									$224 = ((($$012$i)) + -1|0);
									HEAP8[$224>>0] = $223;
									$226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
									$227 = tempRet0;
									$228 = ($226|0)==(0);
									$229 = ($227|0)==(0);
									$230 = $228 & $229;
									if ($230) {
										$$lcssa321 = $224;
										break;
									} else {
										$$012$i = $224;$218 = $226;$225 = $227;
									}
								}
								$231 = $arg;
								$232 = $231;
								$233 = HEAP32[$232>>2]|0;
								$234 = (($231) + 4)|0;
								$235 = $234;
								$236 = HEAP32[$235>>2]|0;
								$237 = ($233|0)==(0);
								$238 = ($236|0)==(0);
								$239 = $237 & $238;
								$240 = $fl$3 & 8;
								$241 = ($240|0)==(0);
								$or$cond17 = $241 | $239;
								if ($or$cond17) {
									$a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 6074;
									label = 77;
								} else {
									$242 = $t$1 >> 4;
									$243 = (6074 + ($242)|0);
									$a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
									label = 77;
								}
							}
						}
						else if ((label|0) == 76) {
							label = 0;
							$289 = (_fmt_u($287,$288,$1)|0);
							$a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
							label = 77;
						}
						else if ((label|0) == 82) {
							label = 0;
							$321 = (_memchr($a$1,0,$p$0)|0);
							$322 = ($321|0)==(0|0);
							$323 = $321;
							$324 = $a$1;
							$325 = (($323) - ($324))|0;
							$326 = (($a$1) + ($p$0)|0);
							$z$1 = $322 ? $326 : $321;
							$p$3 = $322 ? $p$0 : $325;
							$a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 6074;$z$2 = $z$1;
						}
						else if ((label|0) == 86) {
							label = 0;
							$i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
							while(1) {
								$334 = HEAP32[$ws$0106>>2]|0;
								$335 = ($334|0)==(0);
								if ($335) {
									$i$0$lcssa = $i$0105;$l$2 = $l$1104;
									break;
								}
								$336 = (_wctomb($mb,$334)|0);
								$337 = ($336|0)<(0);
								$338 = (($p$4176) - ($i$0105))|0;
								$339 = ($336>>>0)>($338>>>0);
								$or$cond20 = $337 | $339;
								if ($or$cond20) {
									$i$0$lcssa = $i$0105;$l$2 = $336;
									break;
								}
								$340 = ((($ws$0106)) + 4|0);
								$341 = (($336) + ($i$0105))|0;
								$342 = ($p$4176>>>0)>($341>>>0);
								if ($342) {
									$i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
								} else {
									$i$0$lcssa = $341;$l$2 = $336;
									break;
								}
							}
							$343 = ($l$2|0)<(0);
							if ($343) {
								$$0 = -1;
								break L1;
							}
							_pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
							$344 = ($i$0$lcssa|0)==(0);
							if ($344) {
								$i$0$lcssa178 = 0;
								label = 97;
							} else {
								$i$1116 = 0;$ws$1117 = $798;
								while(1) {
									$345 = HEAP32[$ws$1117>>2]|0;
									$346 = ($345|0)==(0);
									if ($346) {
										$i$0$lcssa178 = $i$0$lcssa;
										label = 97;
										break L311;
									}
									$347 = ((($ws$1117)) + 4|0);
									$348 = (_wctomb($mb,$345)|0);
									$349 = (($348) + ($i$1116))|0;
									$350 = ($349|0)>($i$0$lcssa|0);
									if ($350) {
										$i$0$lcssa178 = $i$0$lcssa;
										label = 97;
										break L311;
									}
									$351 = HEAP32[$f>>2]|0;
									$352 = $351 & 32;
									$353 = ($352|0)==(0);
									if ($353) {
										(___fwritex($mb,$348,$f)|0);
									}
									$354 = ($349>>>0)<($i$0$lcssa>>>0);
									if ($354) {
										$i$1116 = $349;$ws$1117 = $347;
									} else {
										$i$0$lcssa178 = $i$0$lcssa;
										label = 97;
										break;
									}
								}
							}
						}
					} while(0);
					if ((label|0) == 97) {
						label = 0;
						$355 = $fl$1$ ^ 8192;
						_pad($f,32,$w$1,$i$0$lcssa178,$355);
						$356 = ($w$1|0)>($i$0$lcssa178|0);
						$357 = $356 ? $w$1 : $i$0$lcssa178;
						$cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
						continue;
					}
					if ((label|0) == 77) {
						label = 0;
						$290 = ($p$2|0)>(-1);
						$291 = $fl$4 & -65537;
						$$fl$4 = $290 ? $291 : $fl$4;
						$292 = $arg;
						$293 = $292;
						$294 = HEAP32[$293>>2]|0;
						$295 = (($292) + 4)|0;
						$296 = $295;
						$297 = HEAP32[$296>>2]|0;
						$298 = ($294|0)!=(0);
						$299 = ($297|0)!=(0);
						$300 = $298 | $299;
						$301 = ($p$2|0)!=(0);
						$or$cond = $301 | $300;
						if ($or$cond) {
							$302 = $a$0;
							$303 = (($2) - ($302))|0;
							$304 = $300&1;
							$305 = $304 ^ 1;
							$306 = (($305) + ($303))|0;
							$307 = ($p$2|0)>($306|0);
							$p$2$ = $307 ? $p$2 : $306;
							$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
						} else {
							$a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
						}
					}
					$770 = $z$2;
					$771 = $a$2;
					$772 = (($770) - ($771))|0;
					$773 = ($p$5|0)<($772|0);
					$$p$5 = $773 ? $772 : $p$5;
					$774 = (($pl$2) + ($$p$5))|0;
					$775 = ($w$1|0)<($774|0);
					$w$2 = $775 ? $774 : $w$1;
					_pad($f,32,$w$2,$774,$fl$6);
					$776 = HEAP32[$f>>2]|0;
					$777 = $776 & 32;
					$778 = ($777|0)==(0);
					if ($778) {
						(___fwritex($prefix$2,$pl$2,$f)|0);
					}
					$779 = $fl$6 ^ 65536;
					_pad($f,48,$w$2,$774,$779);
					_pad($f,48,$$p$5,$772,0);
					$780 = HEAP32[$f>>2]|0;
					$781 = $780 & 32;
					$782 = ($781|0)==(0);
					if ($782) {
						(___fwritex($a$2,$772,$f)|0);
					}
					$783 = $fl$6 ^ 8192;
					_pad($f,32,$w$2,$774,$783);
					$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
				}
				L345: do {
					if ((label|0) == 244) {
						$784 = ($f|0)==(0|0);
						if ($784) {
							$785 = ($l10n$0$lcssa|0)==(0);
							if ($785) {
								$$0 = 0;
							} else {
								$i$291 = 1;
								while(1) {
									$786 = (($nl_type) + ($i$291<<2)|0);
									$787 = HEAP32[$786>>2]|0;
									$788 = ($787|0)==(0);
									if ($788) {
										$i$291$lcssa = $i$291;
										break;
									}
									$790 = (($nl_arg) + ($i$291<<3)|0);
									_pop_arg_161($790,$787,$ap);
									$791 = (($i$291) + 1)|0;
									$792 = ($791|0)<(10);
									if ($792) {
										$i$291 = $791;
									} else {
										$$0 = 1;
										break L345;
									}
								}
								$789 = ($i$291$lcssa|0)<(10);
								if ($789) {
									$i$389 = $i$291$lcssa;
									while(1) {
										$795 = (($nl_type) + ($i$389<<2)|0);
										$796 = HEAP32[$795>>2]|0;
										$797 = ($796|0)==(0);
										$793 = (($i$389) + 1)|0;
										if (!($797)) {
											$$0 = -1;
											break L345;
										}
										$794 = ($793|0)<(10);
										if ($794) {
											$i$389 = $793;
										} else {
											$$0 = 1;
											break;
										}
									}
								} else {
									$$0 = 1;
								}
							}
						} else {
							$$0 = $cnt$1$lcssa;
						}
					}
				} while(0);
				STACKTOP = sp;return ($$0|0);
			}
			function ___fwritex($s,$l,$f) {
				$s = $s|0;
				$l = $l|0;
				$f = $f|0;
				var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
				var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
				var $i$1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 16|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0|0);
				if ($2) {
					$4 = (___towrite($f)|0);
					$5 = ($4|0)==(0);
					if ($5) {
						$$pre = HEAP32[$0>>2]|0;
						$9 = $$pre;
						label = 5;
					} else {
						$$0 = 0;
					}
				} else {
					$3 = $1;
					$9 = $3;
					label = 5;
				}
				L5: do {
					if ((label|0) == 5) {
						$6 = ((($f)) + 20|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = (($9) - ($7))|0;
						$10 = ($8>>>0)<($l>>>0);
						$11 = $7;
						if ($10) {
							$12 = ((($f)) + 36|0);
							$13 = HEAP32[$12>>2]|0;
							$14 = (FUNCTION_TABLE_iiii[$13 & 255]($f,$s,$l)|0);
							$$0 = $14;
							break;
						}
						$15 = ((($f)) + 75|0);
						$16 = HEAP8[$15>>0]|0;
						$17 = ($16<<24>>24)>(-1);
						L10: do {
							if ($17) {
								$i$0 = $l;
								while(1) {
									$18 = ($i$0|0)==(0);
									if ($18) {
										$$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
										break L10;
									}
									$19 = (($i$0) + -1)|0;
									$20 = (($s) + ($19)|0);
									$21 = HEAP8[$20>>0]|0;
									$22 = ($21<<24>>24)==(10);
									if ($22) {
										$i$0$lcssa12 = $i$0;
										break;
									} else {
										$i$0 = $19;
									}
								}
								$23 = ((($f)) + 36|0);
								$24 = HEAP32[$23>>2]|0;
								$25 = (FUNCTION_TABLE_iiii[$24 & 255]($f,$s,$i$0$lcssa12)|0);
								$26 = ($25>>>0)<($i$0$lcssa12>>>0);
								if ($26) {
									$$0 = $i$0$lcssa12;
									break L5;
								}
								$27 = (($s) + ($i$0$lcssa12)|0);
								$28 = (($l) - ($i$0$lcssa12))|0;
								$$pre6 = HEAP32[$6>>2]|0;
								$$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
							} else {
								$$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
							}
						} while(0);
						_memcpy(($29|0),($$02|0),($$01|0))|0;
						$30 = HEAP32[$6>>2]|0;
						$31 = (($30) + ($$01)|0);
						HEAP32[$6>>2] = $31;
						$32 = (($i$1) + ($$01))|0;
						$$0 = $32;
					}
				} while(0);
				return ($$0|0);
			}
			function ___towrite($f) {
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 74|0);
				$1 = HEAP8[$0>>0]|0;
				$2 = $1 << 24 >> 24;
				$3 = (($2) + 255)|0;
				$4 = $3 | $2;
				$5 = $4&255;
				HEAP8[$0>>0] = $5;
				$6 = HEAP32[$f>>2]|0;
				$7 = $6 & 8;
				$8 = ($7|0)==(0);
				if ($8) {
					$10 = ((($f)) + 8|0);
					HEAP32[$10>>2] = 0;
					$11 = ((($f)) + 4|0);
					HEAP32[$11>>2] = 0;
					$12 = ((($f)) + 44|0);
					$13 = HEAP32[$12>>2]|0;
					$14 = ((($f)) + 28|0);
					HEAP32[$14>>2] = $13;
					$15 = ((($f)) + 20|0);
					HEAP32[$15>>2] = $13;
					$16 = $13;
					$17 = ((($f)) + 48|0);
					$18 = HEAP32[$17>>2]|0;
					$19 = (($16) + ($18)|0);
					$20 = ((($f)) + 16|0);
					HEAP32[$20>>2] = $19;
					$$0 = 0;
				} else {
					$9 = $6 | 32;
					HEAP32[$f>>2] = $9;
					$$0 = -1;
				}
				return ($$0|0);
			}
			function _pop_arg_161($arg,$type,$ap) {
				$arg = $arg|0;
				$type = $type|0;
				$ap = $ap|0;
				var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
				var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
				var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
				var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
				var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
				var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
				var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
				var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
				var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
				var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($type>>>0)>(20);
				L1: do {
					if (!($0)) {
						do {
							switch ($type|0) {
								case 9:  {
									$arglist_current = HEAP32[$ap>>2]|0;
									$1 = $arglist_current;
									$2 = ((0) + 4|0);
									$expanded28 = $2;
									$expanded = (($expanded28) - 1)|0;
									$3 = (($1) + ($expanded))|0;
									$4 = ((0) + 4|0);
									$expanded32 = $4;
									$expanded31 = (($expanded32) - 1)|0;
									$expanded30 = $expanded31 ^ -1;
									$5 = $3 & $expanded30;
									$6 = $5;
									$7 = HEAP32[$6>>2]|0;
									$arglist_next = ((($6)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next;
									HEAP32[$arg>>2] = $7;
									break L1;
									break;
								}
								case 10:  {
									$arglist_current2 = HEAP32[$ap>>2]|0;
									$8 = $arglist_current2;
									$9 = ((0) + 4|0);
									$expanded35 = $9;
									$expanded34 = (($expanded35) - 1)|0;
									$10 = (($8) + ($expanded34))|0;
									$11 = ((0) + 4|0);
									$expanded39 = $11;
									$expanded38 = (($expanded39) - 1)|0;
									$expanded37 = $expanded38 ^ -1;
									$12 = $10 & $expanded37;
									$13 = $12;
									$14 = HEAP32[$13>>2]|0;
									$arglist_next3 = ((($13)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next3;
									$15 = ($14|0)<(0);
									$16 = $15 << 31 >> 31;
									$17 = $arg;
									$18 = $17;
									HEAP32[$18>>2] = $14;
									$19 = (($17) + 4)|0;
									$20 = $19;
									HEAP32[$20>>2] = $16;
									break L1;
									break;
								}
								case 11:  {
									$arglist_current5 = HEAP32[$ap>>2]|0;
									$21 = $arglist_current5;
									$22 = ((0) + 4|0);
									$expanded42 = $22;
									$expanded41 = (($expanded42) - 1)|0;
									$23 = (($21) + ($expanded41))|0;
									$24 = ((0) + 4|0);
									$expanded46 = $24;
									$expanded45 = (($expanded46) - 1)|0;
									$expanded44 = $expanded45 ^ -1;
									$25 = $23 & $expanded44;
									$26 = $25;
									$27 = HEAP32[$26>>2]|0;
									$arglist_next6 = ((($26)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next6;
									$28 = $arg;
									$29 = $28;
									HEAP32[$29>>2] = $27;
									$30 = (($28) + 4)|0;
									$31 = $30;
									HEAP32[$31>>2] = 0;
									break L1;
									break;
								}
								case 12:  {
									$arglist_current8 = HEAP32[$ap>>2]|0;
									$32 = $arglist_current8;
									$33 = ((0) + 8|0);
									$expanded49 = $33;
									$expanded48 = (($expanded49) - 1)|0;
									$34 = (($32) + ($expanded48))|0;
									$35 = ((0) + 8|0);
									$expanded53 = $35;
									$expanded52 = (($expanded53) - 1)|0;
									$expanded51 = $expanded52 ^ -1;
									$36 = $34 & $expanded51;
									$37 = $36;
									$38 = $37;
									$39 = $38;
									$40 = HEAP32[$39>>2]|0;
									$41 = (($38) + 4)|0;
									$42 = $41;
									$43 = HEAP32[$42>>2]|0;
									$arglist_next9 = ((($37)) + 8|0);
									HEAP32[$ap>>2] = $arglist_next9;
									$44 = $arg;
									$45 = $44;
									HEAP32[$45>>2] = $40;
									$46 = (($44) + 4)|0;
									$47 = $46;
									HEAP32[$47>>2] = $43;
									break L1;
									break;
								}
								case 13:  {
									$arglist_current11 = HEAP32[$ap>>2]|0;
									$48 = $arglist_current11;
									$49 = ((0) + 4|0);
									$expanded56 = $49;
									$expanded55 = (($expanded56) - 1)|0;
									$50 = (($48) + ($expanded55))|0;
									$51 = ((0) + 4|0);
									$expanded60 = $51;
									$expanded59 = (($expanded60) - 1)|0;
									$expanded58 = $expanded59 ^ -1;
									$52 = $50 & $expanded58;
									$53 = $52;
									$54 = HEAP32[$53>>2]|0;
									$arglist_next12 = ((($53)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next12;
									$55 = $54&65535;
									$56 = $55 << 16 >> 16;
									$57 = ($56|0)<(0);
									$58 = $57 << 31 >> 31;
									$59 = $arg;
									$60 = $59;
									HEAP32[$60>>2] = $56;
									$61 = (($59) + 4)|0;
									$62 = $61;
									HEAP32[$62>>2] = $58;
									break L1;
									break;
								}
								case 14:  {
									$arglist_current14 = HEAP32[$ap>>2]|0;
									$63 = $arglist_current14;
									$64 = ((0) + 4|0);
									$expanded63 = $64;
									$expanded62 = (($expanded63) - 1)|0;
									$65 = (($63) + ($expanded62))|0;
									$66 = ((0) + 4|0);
									$expanded67 = $66;
									$expanded66 = (($expanded67) - 1)|0;
									$expanded65 = $expanded66 ^ -1;
									$67 = $65 & $expanded65;
									$68 = $67;
									$69 = HEAP32[$68>>2]|0;
									$arglist_next15 = ((($68)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next15;
									$$mask1 = $69 & 65535;
									$70 = $arg;
									$71 = $70;
									HEAP32[$71>>2] = $$mask1;
									$72 = (($70) + 4)|0;
									$73 = $72;
									HEAP32[$73>>2] = 0;
									break L1;
									break;
								}
								case 15:  {
									$arglist_current17 = HEAP32[$ap>>2]|0;
									$74 = $arglist_current17;
									$75 = ((0) + 4|0);
									$expanded70 = $75;
									$expanded69 = (($expanded70) - 1)|0;
									$76 = (($74) + ($expanded69))|0;
									$77 = ((0) + 4|0);
									$expanded74 = $77;
									$expanded73 = (($expanded74) - 1)|0;
									$expanded72 = $expanded73 ^ -1;
									$78 = $76 & $expanded72;
									$79 = $78;
									$80 = HEAP32[$79>>2]|0;
									$arglist_next18 = ((($79)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next18;
									$81 = $80&255;
									$82 = $81 << 24 >> 24;
									$83 = ($82|0)<(0);
									$84 = $83 << 31 >> 31;
									$85 = $arg;
									$86 = $85;
									HEAP32[$86>>2] = $82;
									$87 = (($85) + 4)|0;
									$88 = $87;
									HEAP32[$88>>2] = $84;
									break L1;
									break;
								}
								case 16:  {
									$arglist_current20 = HEAP32[$ap>>2]|0;
									$89 = $arglist_current20;
									$90 = ((0) + 4|0);
									$expanded77 = $90;
									$expanded76 = (($expanded77) - 1)|0;
									$91 = (($89) + ($expanded76))|0;
									$92 = ((0) + 4|0);
									$expanded81 = $92;
									$expanded80 = (($expanded81) - 1)|0;
									$expanded79 = $expanded80 ^ -1;
									$93 = $91 & $expanded79;
									$94 = $93;
									$95 = HEAP32[$94>>2]|0;
									$arglist_next21 = ((($94)) + 4|0);
									HEAP32[$ap>>2] = $arglist_next21;
									$$mask = $95 & 255;
									$96 = $arg;
									$97 = $96;
									HEAP32[$97>>2] = $$mask;
									$98 = (($96) + 4)|0;
									$99 = $98;
									HEAP32[$99>>2] = 0;
									break L1;
									break;
								}
								case 17:  {
									$arglist_current23 = HEAP32[$ap>>2]|0;
									$100 = $arglist_current23;
									$101 = ((0) + 8|0);
									$expanded84 = $101;
									$expanded83 = (($expanded84) - 1)|0;
									$102 = (($100) + ($expanded83))|0;
									$103 = ((0) + 8|0);
									$expanded88 = $103;
									$expanded87 = (($expanded88) - 1)|0;
									$expanded86 = $expanded87 ^ -1;
									$104 = $102 & $expanded86;
									$105 = $104;
									$106 = +HEAPF64[$105>>3];
									$arglist_next24 = ((($105)) + 8|0);
									HEAP32[$ap>>2] = $arglist_next24;
									HEAPF64[$arg>>3] = $106;
									break L1;
									break;
								}
								case 18:  {
									$arglist_current26 = HEAP32[$ap>>2]|0;
									$107 = $arglist_current26;
									$108 = ((0) + 8|0);
									$expanded91 = $108;
									$expanded90 = (($expanded91) - 1)|0;
									$109 = (($107) + ($expanded90))|0;
									$110 = ((0) + 8|0);
									$expanded95 = $110;
									$expanded94 = (($expanded95) - 1)|0;
									$expanded93 = $expanded94 ^ -1;
									$111 = $109 & $expanded93;
									$112 = $111;
									$113 = +HEAPF64[$112>>3];
									$arglist_next27 = ((($112)) + 8|0);
									HEAP32[$ap>>2] = $arglist_next27;
									HEAPF64[$arg>>3] = $113;
									break L1;
									break;
								}
								default: {
									break L1;
								}
							}
						} while(0);
					}
				} while(0);
				return;
			}
			function _fmt_u($0,$1,$s) {
				$0 = $0|0;
				$1 = $1|0;
				$s = $s|0;
				var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
				var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$2 = ($1>>>0)>(0);
				$3 = ($0>>>0)>(4294967295);
				$4 = ($1|0)==(0);
				$5 = $4 & $3;
				$6 = $2 | $5;
				if ($6) {
					$$05 = $s;$7 = $0;$8 = $1;
					while(1) {
						$9 = (___uremdi3(($7|0),($8|0),10,0)|0);
						$10 = tempRet0;
						$11 = $9 | 48;
						$12 = $11&255;
						$13 = ((($$05)) + -1|0);
						HEAP8[$13>>0] = $12;
						$14 = (___udivdi3(($7|0),($8|0),10,0)|0);
						$15 = tempRet0;
						$16 = ($8>>>0)>(9);
						$17 = ($7>>>0)>(4294967295);
						$18 = ($8|0)==(9);
						$19 = $18 & $17;
						$20 = $16 | $19;
						if ($20) {
							$$05 = $13;$7 = $14;$8 = $15;
						} else {
							$$lcssa19 = $13;$28 = $14;$29 = $15;
							break;
						}
					}
					$$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
				} else {
					$$0$lcssa = $s;$$01$lcssa$off0 = $0;
				}
				$21 = ($$01$lcssa$off0|0)==(0);
				if ($21) {
					$$1$lcssa = $$0$lcssa;
				} else {
					$$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
					while(1) {
						$22 = (($y$03>>>0) % 10)&-1;
						$23 = $22 | 48;
						$24 = $23&255;
						$25 = ((($$12)) + -1|0);
						HEAP8[$25>>0] = $24;
						$26 = (($y$03>>>0) / 10)&-1;
						$27 = ($y$03>>>0)<(10);
						if ($27) {
							$$1$lcssa = $25;
							break;
						} else {
							$$12 = $25;$y$03 = $26;
						}
					}
				}
				return ($$1$lcssa|0);
			}
			function _pad($f,$c,$w,$l,$fl) {
				$f = $f|0;
				$c = $c|0;
				$w = $w|0;
				$l = $l|0;
				$fl = $fl|0;
				var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
				var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$pad = sp;
				$0 = $fl & 73728;
				$1 = ($0|0)==(0);
				$2 = ($w|0)>($l|0);
				$or$cond = $2 & $1;
				do {
					if ($or$cond) {
						$3 = (($w) - ($l))|0;
						$4 = ($3>>>0)>(256);
						$5 = $4 ? 256 : $3;
						_memset(($pad|0),($c|0),($5|0))|0;
						$6 = ($3>>>0)>(255);
						$7 = HEAP32[$f>>2]|0;
						$8 = $7 & 32;
						$9 = ($8|0)==(0);
						if ($6) {
							$10 = (($w) - ($l))|0;
							$$02 = $3;$17 = $7;$18 = $9;
							while(1) {
								if ($18) {
									(___fwritex($pad,256,$f)|0);
									$$pre = HEAP32[$f>>2]|0;
									$14 = $$pre;
								} else {
									$14 = $17;
								}
								$11 = (($$02) + -256)|0;
								$12 = ($11>>>0)>(255);
								$13 = $14 & 32;
								$15 = ($13|0)==(0);
								if ($12) {
									$$02 = $11;$17 = $14;$18 = $15;
								} else {
									break;
								}
							}
							$16 = $10 & 255;
							if ($15) {
								$$0$lcssa6 = $16;
							} else {
								break;
							}
						} else {
							if ($9) {
								$$0$lcssa6 = $3;
							} else {
								break;
							}
						}
						(___fwritex($pad,$$0$lcssa6,$f)|0);
					}
				} while(0);
				STACKTOP = sp;return;
			}
			function _wctomb($s,$wc) {
				$s = $s|0;
				$wc = $wc|0;
				var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($s|0)==(0|0);
				if ($0) {
					$$0 = 0;
				} else {
					$1 = (_wcrtomb($s,$wc,0)|0);
					$$0 = $1;
				}
				return ($$0|0);
			}
			function _wcrtomb($s,$wc,$st) {
				$s = $s|0;
				$wc = $wc|0;
				$st = $st|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
				var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($s|0)==(0|0);
				do {
					if ($0) {
						$$0 = 1;
					} else {
						$1 = ($wc>>>0)<(128);
						if ($1) {
							$2 = $wc&255;
							HEAP8[$s>>0] = $2;
							$$0 = 1;
							break;
						}
						$3 = ($wc>>>0)<(2048);
						if ($3) {
							$4 = $wc >>> 6;
							$5 = $4 | 192;
							$6 = $5&255;
							$7 = ((($s)) + 1|0);
							HEAP8[$s>>0] = $6;
							$8 = $wc & 63;
							$9 = $8 | 128;
							$10 = $9&255;
							HEAP8[$7>>0] = $10;
							$$0 = 2;
							break;
						}
						$11 = ($wc>>>0)<(55296);
						$12 = $wc & -8192;
						$13 = ($12|0)==(57344);
						$or$cond = $11 | $13;
						if ($or$cond) {
							$14 = $wc >>> 12;
							$15 = $14 | 224;
							$16 = $15&255;
							$17 = ((($s)) + 1|0);
							HEAP8[$s>>0] = $16;
							$18 = $wc >>> 6;
							$19 = $18 & 63;
							$20 = $19 | 128;
							$21 = $20&255;
							$22 = ((($s)) + 2|0);
							HEAP8[$17>>0] = $21;
							$23 = $wc & 63;
							$24 = $23 | 128;
							$25 = $24&255;
							HEAP8[$22>>0] = $25;
							$$0 = 3;
							break;
						}
						$26 = (($wc) + -65536)|0;
						$27 = ($26>>>0)<(1048576);
						if ($27) {
							$28 = $wc >>> 18;
							$29 = $28 | 240;
							$30 = $29&255;
							$31 = ((($s)) + 1|0);
							HEAP8[$s>>0] = $30;
							$32 = $wc >>> 12;
							$33 = $32 & 63;
							$34 = $33 | 128;
							$35 = $34&255;
							$36 = ((($s)) + 2|0);
							HEAP8[$31>>0] = $35;
							$37 = $wc >>> 6;
							$38 = $37 & 63;
							$39 = $38 | 128;
							$40 = $39&255;
							$41 = ((($s)) + 3|0);
							HEAP8[$36>>0] = $40;
							$42 = $wc & 63;
							$43 = $42 | 128;
							$44 = $43&255;
							HEAP8[$41>>0] = $44;
							$$0 = 4;
							break;
						} else {
							$45 = (___errno_location()|0);
							HEAP32[$45>>2] = 84;
							$$0 = -1;
							break;
						}
					}
				} while(0);
				return ($$0|0);
			}
			function _frexpl($x,$e) {
				$x = +$x;
				$e = $e|0;
				var $0 = 0.0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (+_frexp($x,$e));
				return (+$0);
			}
			function _frexp($x,$e) {
				$x = +$x;
				$e = $e|0;
				var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
				$1 = HEAP32[tempDoublePtr+4>>2]|0;
				$2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
				$3 = tempRet0;
				$4 = $2 & 2047;
				switch ($4|0) {
					case 0:  {
						$5 = $x != 0.0;
						if ($5) {
							$6 = $x * 1.8446744073709552E+19;
							$7 = (+_frexp($6,$e));
							$8 = HEAP32[$e>>2]|0;
							$9 = (($8) + -64)|0;
							$$01 = $7;$storemerge = $9;
						} else {
							$$01 = $x;$storemerge = 0;
						}
						HEAP32[$e>>2] = $storemerge;
						$$0 = $$01;
						break;
					}
					case 2047:  {
						$$0 = $x;
						break;
					}
					default: {
						$10 = (($4) + -1022)|0;
						HEAP32[$e>>2] = $10;
						$11 = $1 & -2146435073;
						$12 = $11 | 1071644672;
						HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
						$$0 = $13;
					}
				}
				return (+$$0);
			}
			function ___overflow($f,$_c) {
				$f = $f|0;
				$_c = $_c|0;
				var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$c = sp;
				$0 = $_c&255;
				HEAP8[$c>>0] = $0;
				$1 = ((($f)) + 16|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)==(0|0);
				if ($3) {
					$4 = (___towrite($f)|0);
					$5 = ($4|0)==(0);
					if ($5) {
						$$pre = HEAP32[$1>>2]|0;
						$9 = $$pre;
						label = 4;
					} else {
						$$0 = -1;
					}
				} else {
					$9 = $2;
					label = 4;
				}
				do {
					if ((label|0) == 4) {
						$6 = ((($f)) + 20|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = ($7>>>0)<($9>>>0);
						if ($8) {
							$10 = $_c & 255;
							$11 = ((($f)) + 75|0);
							$12 = HEAP8[$11>>0]|0;
							$13 = $12 << 24 >> 24;
							$14 = ($10|0)==($13|0);
							if (!($14)) {
								$15 = ((($7)) + 1|0);
								HEAP32[$6>>2] = $15;
								HEAP8[$7>>0] = $0;
								$$0 = $10;
								break;
							}
						}
						$16 = ((($f)) + 36|0);
						$17 = HEAP32[$16>>2]|0;
						$18 = (FUNCTION_TABLE_iiii[$17 & 255]($f,$c,1)|0);
						$19 = ($18|0)==(1);
						if ($19) {
							$20 = HEAP8[$c>>0]|0;
							$21 = $20&255;
							$$0 = $21;
						} else {
							$$0 = -1;
						}
					}
				} while(0);
				STACKTOP = sp;return ($$0|0);
			}
			function _fprintf($f,$fmt,$varargs) {
				$f = $f|0;
				$fmt = $fmt|0;
				$varargs = $varargs|0;
				var $0 = 0, $ap = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$ap = sp;
				HEAP32[$ap>>2] = $varargs;
				$0 = (_vfprintf($f,$fmt,$ap)|0);
				STACKTOP = sp;return ($0|0);
			}
			function _fputc($c,$f) {
				$c = $c|0;
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 76|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					label = 3;
				} else {
					$3 = (___lockfile($f)|0);
					$4 = ($3|0)==(0);
					if ($4) {
						label = 3;
					} else {
						$18 = ((($f)) + 75|0);
						$19 = HEAP8[$18>>0]|0;
						$20 = $19 << 24 >> 24;
						$21 = ($20|0)==($c|0);
						if ($21) {
							label = 10;
						} else {
							$22 = ((($f)) + 20|0);
							$23 = HEAP32[$22>>2]|0;
							$24 = ((($f)) + 16|0);
							$25 = HEAP32[$24>>2]|0;
							$26 = ($23>>>0)<($25>>>0);
							if ($26) {
								$27 = $c&255;
								$28 = ((($23)) + 1|0);
								HEAP32[$22>>2] = $28;
								HEAP8[$23>>0] = $27;
								$29 = $c & 255;
								$31 = $29;
							} else {
								label = 10;
							}
						}
						if ((label|0) == 10) {
							$30 = (___overflow($f,$c)|0);
							$31 = $30;
						}
						___unlockfile($f);
						$$0 = $31;
					}
				}
				do {
					if ((label|0) == 3) {
						$5 = ((($f)) + 75|0);
						$6 = HEAP8[$5>>0]|0;
						$7 = $6 << 24 >> 24;
						$8 = ($7|0)==($c|0);
						if (!($8)) {
							$9 = ((($f)) + 20|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = ((($f)) + 16|0);
							$12 = HEAP32[$11>>2]|0;
							$13 = ($10>>>0)<($12>>>0);
							if ($13) {
								$14 = $c&255;
								$15 = ((($10)) + 1|0);
								HEAP32[$9>>2] = $15;
								HEAP8[$10>>0] = $14;
								$16 = $c & 255;
								$$0 = $16;
								break;
							}
						}
						$17 = (___overflow($f,$c)|0);
						$$0 = $17;
					}
				} while(0);
				return ($$0|0);
			}
			function _fwrite($src,$size,$nmemb,$f) {
				$src = $src|0;
				$size = $size|0;
				$nmemb = $nmemb|0;
				$f = $f|0;
				var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = Math_imul($nmemb, $size)|0;
				$1 = ((($f)) + 76|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)>(-1);
				if ($3) {
					$5 = (___lockfile($f)|0);
					$phitmp = ($5|0)==(0);
					$6 = (___fwritex($src,$0,$f)|0);
					if ($phitmp) {
						$7 = $6;
					} else {
						___unlockfile($f);
						$7 = $6;
					}
				} else {
					$4 = (___fwritex($src,$0,$f)|0);
					$7 = $4;
				}
				$8 = ($7|0)==($0|0);
				if ($8) {
					$10 = $nmemb;
				} else {
					$9 = (($7>>>0) / ($size>>>0))&-1;
					$10 = $9;
				}
				return ($10|0);
			}
			function _putc($c,$f) {
				$c = $c|0;
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
				var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 76|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					label = 3;
				} else {
					$3 = (___lockfile($f)|0);
					$4 = ($3|0)==(0);
					if ($4) {
						label = 3;
					} else {
						$18 = ((($f)) + 75|0);
						$19 = HEAP8[$18>>0]|0;
						$20 = $19 << 24 >> 24;
						$21 = ($20|0)==($c|0);
						if ($21) {
							label = 10;
						} else {
							$22 = ((($f)) + 20|0);
							$23 = HEAP32[$22>>2]|0;
							$24 = ((($f)) + 16|0);
							$25 = HEAP32[$24>>2]|0;
							$26 = ($23>>>0)<($25>>>0);
							if ($26) {
								$27 = $c&255;
								$28 = ((($23)) + 1|0);
								HEAP32[$22>>2] = $28;
								HEAP8[$23>>0] = $27;
								$29 = $c & 255;
								$31 = $29;
							} else {
								label = 10;
							}
						}
						if ((label|0) == 10) {
							$30 = (___overflow($f,$c)|0);
							$31 = $30;
						}
						___unlockfile($f);
						$$0 = $31;
					}
				}
				do {
					if ((label|0) == 3) {
						$5 = ((($f)) + 75|0);
						$6 = HEAP8[$5>>0]|0;
						$7 = $6 << 24 >> 24;
						$8 = ($7|0)==($c|0);
						if (!($8)) {
							$9 = ((($f)) + 20|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = ((($f)) + 16|0);
							$12 = HEAP32[$11>>2]|0;
							$13 = ($10>>>0)<($12>>>0);
							if ($13) {
								$14 = $c&255;
								$15 = ((($10)) + 1|0);
								HEAP32[$9>>2] = $15;
								HEAP8[$10>>0] = $14;
								$16 = $c & 255;
								$$0 = $16;
								break;
							}
						}
						$17 = (___overflow($f,$c)|0);
						$$0 = $17;
					}
				} while(0);
				return ($$0|0);
			}
			function _fgetc($f) {
				$f = $f|0;
				var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($f)) + 76|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)<(0);
				if ($2) {
					label = 3;
				} else {
					$3 = (___lockfile($f)|0);
					$4 = ($3|0)==(0);
					if ($4) {
						label = 3;
					} else {
						$14 = ((($f)) + 4|0);
						$15 = HEAP32[$14>>2]|0;
						$16 = ((($f)) + 8|0);
						$17 = HEAP32[$16>>2]|0;
						$18 = ($15>>>0)<($17>>>0);
						if ($18) {
							$19 = ((($15)) + 1|0);
							HEAP32[$14>>2] = $19;
							$20 = HEAP8[$15>>0]|0;
							$21 = $20&255;
							$23 = $21;
						} else {
							$22 = (___uflow($f)|0);
							$23 = $22;
						}
						$$0 = $23;
					}
				}
				do {
					if ((label|0) == 3) {
						$5 = ((($f)) + 4|0);
						$6 = HEAP32[$5>>2]|0;
						$7 = ((($f)) + 8|0);
						$8 = HEAP32[$7>>2]|0;
						$9 = ($6>>>0)<($8>>>0);
						if ($9) {
							$10 = ((($6)) + 1|0);
							HEAP32[$5>>2] = $10;
							$11 = HEAP8[$6>>0]|0;
							$12 = $11&255;
							$$0 = $12;
							break;
						} else {
							$13 = (___uflow($f)|0);
							$$0 = $13;
							break;
						}
					}
				} while(0);
				return ($$0|0);
			}
			function _isalpha($c) {
				$c = $c|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = $c | 32;
				$1 = (($0) + -97)|0;
				$2 = ($1>>>0)<(26);
				$3 = $2&1;
				return ($3|0);
			}
			function _malloc($bytes) {
				$bytes = $bytes|0;
				var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
				var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
				var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
				var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
				var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
				var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
				var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
				var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
				var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
				var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
				var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
				var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
				var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
				var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
				var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
				var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
				var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
				var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
				var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
				var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
				var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
				var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
				var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
				var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
				var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
				var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
				var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
				var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
				var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
				var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
				var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
				var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
				var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
				var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
				var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
				var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
				var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
				var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
				var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
				var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
				var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
				var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
				var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
				var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
				var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
				var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
				var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
				var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
				var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
				var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
				var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
				var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
				var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
				var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
				var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
				var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
				var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
				var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
				var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
				var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($bytes>>>0)<(245);
				do {
					if ($0) {
						$1 = ($bytes>>>0)<(11);
						$2 = (($bytes) + 11)|0;
						$3 = $2 & -8;
						$4 = $1 ? 16 : $3;
						$5 = $4 >>> 3;
						$6 = HEAP32[1713]|0;
						$7 = $6 >>> $5;
						$8 = $7 & 3;
						$9 = ($8|0)==(0);
						if (!($9)) {
							$10 = $7 & 1;
							$11 = $10 ^ 1;
							$12 = (($11) + ($5))|0;
							$13 = $12 << 1;
							$14 = (6892 + ($13<<2)|0);
							$15 = ((($14)) + 8|0);
							$16 = HEAP32[$15>>2]|0;
							$17 = ((($16)) + 8|0);
							$18 = HEAP32[$17>>2]|0;
							$19 = ($14|0)==($18|0);
							do {
								if ($19) {
									$20 = 1 << $12;
									$21 = $20 ^ -1;
									$22 = $6 & $21;
									HEAP32[1713] = $22;
								} else {
									$23 = HEAP32[(6868)>>2]|0;
									$24 = ($18>>>0)<($23>>>0);
									if ($24) {
										_abort();
										// unreachable;
									}
									$25 = ((($18)) + 12|0);
									$26 = HEAP32[$25>>2]|0;
									$27 = ($26|0)==($16|0);
									if ($27) {
										HEAP32[$25>>2] = $14;
										HEAP32[$15>>2] = $18;
										break;
									} else {
										_abort();
										// unreachable;
									}
								}
							} while(0);
							$28 = $12 << 3;
							$29 = $28 | 3;
							$30 = ((($16)) + 4|0);
							HEAP32[$30>>2] = $29;
							$31 = (($16) + ($28)|0);
							$32 = ((($31)) + 4|0);
							$33 = HEAP32[$32>>2]|0;
							$34 = $33 | 1;
							HEAP32[$32>>2] = $34;
							$$0 = $17;
							return ($$0|0);
						}
						$35 = HEAP32[(6860)>>2]|0;
						$36 = ($4>>>0)>($35>>>0);
						if ($36) {
							$37 = ($7|0)==(0);
							if (!($37)) {
								$38 = $7 << $5;
								$39 = 2 << $5;
								$40 = (0 - ($39))|0;
								$41 = $39 | $40;
								$42 = $38 & $41;
								$43 = (0 - ($42))|0;
								$44 = $42 & $43;
								$45 = (($44) + -1)|0;
								$46 = $45 >>> 12;
								$47 = $46 & 16;
								$48 = $45 >>> $47;
								$49 = $48 >>> 5;
								$50 = $49 & 8;
								$51 = $50 | $47;
								$52 = $48 >>> $50;
								$53 = $52 >>> 2;
								$54 = $53 & 4;
								$55 = $51 | $54;
								$56 = $52 >>> $54;
								$57 = $56 >>> 1;
								$58 = $57 & 2;
								$59 = $55 | $58;
								$60 = $56 >>> $58;
								$61 = $60 >>> 1;
								$62 = $61 & 1;
								$63 = $59 | $62;
								$64 = $60 >>> $62;
								$65 = (($63) + ($64))|0;
								$66 = $65 << 1;
								$67 = (6892 + ($66<<2)|0);
								$68 = ((($67)) + 8|0);
								$69 = HEAP32[$68>>2]|0;
								$70 = ((($69)) + 8|0);
								$71 = HEAP32[$70>>2]|0;
								$72 = ($67|0)==($71|0);
								do {
									if ($72) {
										$73 = 1 << $65;
										$74 = $73 ^ -1;
										$75 = $6 & $74;
										HEAP32[1713] = $75;
										$89 = $35;
									} else {
										$76 = HEAP32[(6868)>>2]|0;
										$77 = ($71>>>0)<($76>>>0);
										if ($77) {
											_abort();
											// unreachable;
										}
										$78 = ((($71)) + 12|0);
										$79 = HEAP32[$78>>2]|0;
										$80 = ($79|0)==($69|0);
										if ($80) {
											HEAP32[$78>>2] = $67;
											HEAP32[$68>>2] = $71;
											$$pre = HEAP32[(6860)>>2]|0;
											$89 = $$pre;
											break;
										} else {
											_abort();
											// unreachable;
										}
									}
								} while(0);
								$81 = $65 << 3;
								$82 = (($81) - ($4))|0;
								$83 = $4 | 3;
								$84 = ((($69)) + 4|0);
								HEAP32[$84>>2] = $83;
								$85 = (($69) + ($4)|0);
								$86 = $82 | 1;
								$87 = ((($85)) + 4|0);
								HEAP32[$87>>2] = $86;
								$88 = (($85) + ($82)|0);
								HEAP32[$88>>2] = $82;
								$90 = ($89|0)==(0);
								if (!($90)) {
									$91 = HEAP32[(6872)>>2]|0;
									$92 = $89 >>> 3;
									$93 = $92 << 1;
									$94 = (6892 + ($93<<2)|0);
									$95 = HEAP32[1713]|0;
									$96 = 1 << $92;
									$97 = $95 & $96;
									$98 = ($97|0)==(0);
									if ($98) {
										$99 = $95 | $96;
										HEAP32[1713] = $99;
										$$pre71 = ((($94)) + 8|0);
										$$pre$phiZ2D = $$pre71;$F4$0 = $94;
									} else {
										$100 = ((($94)) + 8|0);
										$101 = HEAP32[$100>>2]|0;
										$102 = HEAP32[(6868)>>2]|0;
										$103 = ($101>>>0)<($102>>>0);
										if ($103) {
											_abort();
											// unreachable;
										} else {
											$$pre$phiZ2D = $100;$F4$0 = $101;
										}
									}
									HEAP32[$$pre$phiZ2D>>2] = $91;
									$104 = ((($F4$0)) + 12|0);
									HEAP32[$104>>2] = $91;
									$105 = ((($91)) + 8|0);
									HEAP32[$105>>2] = $F4$0;
									$106 = ((($91)) + 12|0);
									HEAP32[$106>>2] = $94;
								}
								HEAP32[(6860)>>2] = $82;
								HEAP32[(6872)>>2] = $85;
								$$0 = $70;
								return ($$0|0);
							}
							$107 = HEAP32[(6856)>>2]|0;
							$108 = ($107|0)==(0);
							if ($108) {
								$nb$0 = $4;
							} else {
								$109 = (0 - ($107))|0;
								$110 = $107 & $109;
								$111 = (($110) + -1)|0;
								$112 = $111 >>> 12;
								$113 = $112 & 16;
								$114 = $111 >>> $113;
								$115 = $114 >>> 5;
								$116 = $115 & 8;
								$117 = $116 | $113;
								$118 = $114 >>> $116;
								$119 = $118 >>> 2;
								$120 = $119 & 4;
								$121 = $117 | $120;
								$122 = $118 >>> $120;
								$123 = $122 >>> 1;
								$124 = $123 & 2;
								$125 = $121 | $124;
								$126 = $122 >>> $124;
								$127 = $126 >>> 1;
								$128 = $127 & 1;
								$129 = $125 | $128;
								$130 = $126 >>> $128;
								$131 = (($129) + ($130))|0;
								$132 = (7156 + ($131<<2)|0);
								$133 = HEAP32[$132>>2]|0;
								$134 = ((($133)) + 4|0);
								$135 = HEAP32[$134>>2]|0;
								$136 = $135 & -8;
								$137 = (($136) - ($4))|0;
								$rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
								while(1) {
									$138 = ((($t$0$i)) + 16|0);
									$139 = HEAP32[$138>>2]|0;
									$140 = ($139|0)==(0|0);
									if ($140) {
										$141 = ((($t$0$i)) + 20|0);
										$142 = HEAP32[$141>>2]|0;
										$143 = ($142|0)==(0|0);
										if ($143) {
											$rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
											break;
										} else {
											$145 = $142;
										}
									} else {
										$145 = $139;
									}
									$144 = ((($145)) + 4|0);
									$146 = HEAP32[$144>>2]|0;
									$147 = $146 & -8;
									$148 = (($147) - ($4))|0;
									$149 = ($148>>>0)<($rsize$0$i>>>0);
									$$rsize$0$i = $149 ? $148 : $rsize$0$i;
									$$v$0$i = $149 ? $145 : $v$0$i;
									$rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
								}
								$150 = HEAP32[(6868)>>2]|0;
								$151 = ($v$0$i$lcssa>>>0)<($150>>>0);
								if ($151) {
									_abort();
									// unreachable;
								}
								$152 = (($v$0$i$lcssa) + ($4)|0);
								$153 = ($v$0$i$lcssa>>>0)<($152>>>0);
								if (!($153)) {
									_abort();
									// unreachable;
								}
								$154 = ((($v$0$i$lcssa)) + 24|0);
								$155 = HEAP32[$154>>2]|0;
								$156 = ((($v$0$i$lcssa)) + 12|0);
								$157 = HEAP32[$156>>2]|0;
								$158 = ($157|0)==($v$0$i$lcssa|0);
								do {
									if ($158) {
										$168 = ((($v$0$i$lcssa)) + 20|0);
										$169 = HEAP32[$168>>2]|0;
										$170 = ($169|0)==(0|0);
										if ($170) {
											$171 = ((($v$0$i$lcssa)) + 16|0);
											$172 = HEAP32[$171>>2]|0;
											$173 = ($172|0)==(0|0);
											if ($173) {
												$R$3$i = 0;
												break;
											} else {
												$R$1$i = $172;$RP$1$i = $171;
											}
										} else {
											$R$1$i = $169;$RP$1$i = $168;
										}
										while(1) {
											$174 = ((($R$1$i)) + 20|0);
											$175 = HEAP32[$174>>2]|0;
											$176 = ($175|0)==(0|0);
											if (!($176)) {
												$R$1$i = $175;$RP$1$i = $174;
												continue;
											}
											$177 = ((($R$1$i)) + 16|0);
											$178 = HEAP32[$177>>2]|0;
											$179 = ($178|0)==(0|0);
											if ($179) {
												$R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
												break;
											} else {
												$R$1$i = $178;$RP$1$i = $177;
											}
										}
										$180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
										if ($180) {
											_abort();
											// unreachable;
										} else {
											HEAP32[$RP$1$i$lcssa>>2] = 0;
											$R$3$i = $R$1$i$lcssa;
											break;
										}
									} else {
										$159 = ((($v$0$i$lcssa)) + 8|0);
										$160 = HEAP32[$159>>2]|0;
										$161 = ($160>>>0)<($150>>>0);
										if ($161) {
											_abort();
											// unreachable;
										}
										$162 = ((($160)) + 12|0);
										$163 = HEAP32[$162>>2]|0;
										$164 = ($163|0)==($v$0$i$lcssa|0);
										if (!($164)) {
											_abort();
											// unreachable;
										}
										$165 = ((($157)) + 8|0);
										$166 = HEAP32[$165>>2]|0;
										$167 = ($166|0)==($v$0$i$lcssa|0);
										if ($167) {
											HEAP32[$162>>2] = $157;
											HEAP32[$165>>2] = $160;
											$R$3$i = $157;
											break;
										} else {
											_abort();
											// unreachable;
										}
									}
								} while(0);
								$181 = ($155|0)==(0|0);
								do {
									if (!($181)) {
										$182 = ((($v$0$i$lcssa)) + 28|0);
										$183 = HEAP32[$182>>2]|0;
										$184 = (7156 + ($183<<2)|0);
										$185 = HEAP32[$184>>2]|0;
										$186 = ($v$0$i$lcssa|0)==($185|0);
										if ($186) {
											HEAP32[$184>>2] = $R$3$i;
											$cond$i = ($R$3$i|0)==(0|0);
											if ($cond$i) {
												$187 = 1 << $183;
												$188 = $187 ^ -1;
												$189 = HEAP32[(6856)>>2]|0;
												$190 = $189 & $188;
												HEAP32[(6856)>>2] = $190;
												break;
											}
										} else {
											$191 = HEAP32[(6868)>>2]|0;
											$192 = ($155>>>0)<($191>>>0);
											if ($192) {
												_abort();
												// unreachable;
											}
											$193 = ((($155)) + 16|0);
											$194 = HEAP32[$193>>2]|0;
											$195 = ($194|0)==($v$0$i$lcssa|0);
											if ($195) {
												HEAP32[$193>>2] = $R$3$i;
											} else {
												$196 = ((($155)) + 20|0);
												HEAP32[$196>>2] = $R$3$i;
											}
											$197 = ($R$3$i|0)==(0|0);
											if ($197) {
												break;
											}
										}
										$198 = HEAP32[(6868)>>2]|0;
										$199 = ($R$3$i>>>0)<($198>>>0);
										if ($199) {
											_abort();
											// unreachable;
										}
										$200 = ((($R$3$i)) + 24|0);
										HEAP32[$200>>2] = $155;
										$201 = ((($v$0$i$lcssa)) + 16|0);
										$202 = HEAP32[$201>>2]|0;
										$203 = ($202|0)==(0|0);
										do {
											if (!($203)) {
												$204 = ($202>>>0)<($198>>>0);
												if ($204) {
													_abort();
													// unreachable;
												} else {
													$205 = ((($R$3$i)) + 16|0);
													HEAP32[$205>>2] = $202;
													$206 = ((($202)) + 24|0);
													HEAP32[$206>>2] = $R$3$i;
													break;
												}
											}
										} while(0);
										$207 = ((($v$0$i$lcssa)) + 20|0);
										$208 = HEAP32[$207>>2]|0;
										$209 = ($208|0)==(0|0);
										if (!($209)) {
											$210 = HEAP32[(6868)>>2]|0;
											$211 = ($208>>>0)<($210>>>0);
											if ($211) {
												_abort();
												// unreachable;
											} else {
												$212 = ((($R$3$i)) + 20|0);
												HEAP32[$212>>2] = $208;
												$213 = ((($208)) + 24|0);
												HEAP32[$213>>2] = $R$3$i;
												break;
											}
										}
									}
								} while(0);
								$214 = ($rsize$0$i$lcssa>>>0)<(16);
								if ($214) {
									$215 = (($rsize$0$i$lcssa) + ($4))|0;
									$216 = $215 | 3;
									$217 = ((($v$0$i$lcssa)) + 4|0);
									HEAP32[$217>>2] = $216;
									$218 = (($v$0$i$lcssa) + ($215)|0);
									$219 = ((($218)) + 4|0);
									$220 = HEAP32[$219>>2]|0;
									$221 = $220 | 1;
									HEAP32[$219>>2] = $221;
								} else {
									$222 = $4 | 3;
									$223 = ((($v$0$i$lcssa)) + 4|0);
									HEAP32[$223>>2] = $222;
									$224 = $rsize$0$i$lcssa | 1;
									$225 = ((($152)) + 4|0);
									HEAP32[$225>>2] = $224;
									$226 = (($152) + ($rsize$0$i$lcssa)|0);
									HEAP32[$226>>2] = $rsize$0$i$lcssa;
									$227 = HEAP32[(6860)>>2]|0;
									$228 = ($227|0)==(0);
									if (!($228)) {
										$229 = HEAP32[(6872)>>2]|0;
										$230 = $227 >>> 3;
										$231 = $230 << 1;
										$232 = (6892 + ($231<<2)|0);
										$233 = HEAP32[1713]|0;
										$234 = 1 << $230;
										$235 = $233 & $234;
										$236 = ($235|0)==(0);
										if ($236) {
											$237 = $233 | $234;
											HEAP32[1713] = $237;
											$$pre$i = ((($232)) + 8|0);
											$$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
										} else {
											$238 = ((($232)) + 8|0);
											$239 = HEAP32[$238>>2]|0;
											$240 = HEAP32[(6868)>>2]|0;
											$241 = ($239>>>0)<($240>>>0);
											if ($241) {
												_abort();
												// unreachable;
											} else {
												$$pre$phi$iZ2D = $238;$F1$0$i = $239;
											}
										}
										HEAP32[$$pre$phi$iZ2D>>2] = $229;
										$242 = ((($F1$0$i)) + 12|0);
										HEAP32[$242>>2] = $229;
										$243 = ((($229)) + 8|0);
										HEAP32[$243>>2] = $F1$0$i;
										$244 = ((($229)) + 12|0);
										HEAP32[$244>>2] = $232;
									}
									HEAP32[(6860)>>2] = $rsize$0$i$lcssa;
									HEAP32[(6872)>>2] = $152;
								}
								$245 = ((($v$0$i$lcssa)) + 8|0);
								$$0 = $245;
								return ($$0|0);
							}
						} else {
							$nb$0 = $4;
						}
					} else {
						$246 = ($bytes>>>0)>(4294967231);
						if ($246) {
							$nb$0 = -1;
						} else {
							$247 = (($bytes) + 11)|0;
							$248 = $247 & -8;
							$249 = HEAP32[(6856)>>2]|0;
							$250 = ($249|0)==(0);
							if ($250) {
								$nb$0 = $248;
							} else {
								$251 = (0 - ($248))|0;
								$252 = $247 >>> 8;
								$253 = ($252|0)==(0);
								if ($253) {
									$idx$0$i = 0;
								} else {
									$254 = ($248>>>0)>(16777215);
									if ($254) {
										$idx$0$i = 31;
									} else {
										$255 = (($252) + 1048320)|0;
										$256 = $255 >>> 16;
										$257 = $256 & 8;
										$258 = $252 << $257;
										$259 = (($258) + 520192)|0;
										$260 = $259 >>> 16;
										$261 = $260 & 4;
										$262 = $261 | $257;
										$263 = $258 << $261;
										$264 = (($263) + 245760)|0;
										$265 = $264 >>> 16;
										$266 = $265 & 2;
										$267 = $262 | $266;
										$268 = (14 - ($267))|0;
										$269 = $263 << $266;
										$270 = $269 >>> 15;
										$271 = (($268) + ($270))|0;
										$272 = $271 << 1;
										$273 = (($271) + 7)|0;
										$274 = $248 >>> $273;
										$275 = $274 & 1;
										$276 = $275 | $272;
										$idx$0$i = $276;
									}
								}
								$277 = (7156 + ($idx$0$i<<2)|0);
								$278 = HEAP32[$277>>2]|0;
								$279 = ($278|0)==(0|0);
								L123: do {
									if ($279) {
										$rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
										label = 86;
									} else {
										$280 = ($idx$0$i|0)==(31);
										$281 = $idx$0$i >>> 1;
										$282 = (25 - ($281))|0;
										$283 = $280 ? 0 : $282;
										$284 = $248 << $283;
										$rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
										while(1) {
											$285 = ((($t$0$i4)) + 4|0);
											$286 = HEAP32[$285>>2]|0;
											$287 = $286 & -8;
											$288 = (($287) - ($248))|0;
											$289 = ($288>>>0)<($rsize$0$i5>>>0);
											if ($289) {
												$290 = ($287|0)==($248|0);
												if ($290) {
													$rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
													label = 90;
													break L123;
												} else {
													$rsize$1$i = $288;$v$1$i = $t$0$i4;
												}
											} else {
												$rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
											}
											$291 = ((($t$0$i4)) + 20|0);
											$292 = HEAP32[$291>>2]|0;
											$293 = $sizebits$0$i >>> 31;
											$294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
											$295 = HEAP32[$294>>2]|0;
											$296 = ($292|0)==(0|0);
											$297 = ($292|0)==($295|0);
											$or$cond1$i = $296 | $297;
											$rst$1$i = $or$cond1$i ? $rst$0$i : $292;
											$298 = ($295|0)==(0|0);
											$299 = $298&1;
											$300 = $299 ^ 1;
											$sizebits$0$$i = $sizebits$0$i << $300;
											if ($298) {
												$rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
												label = 86;
												break;
											} else {
												$rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
											}
										}
									}
								} while(0);
								if ((label|0) == 86) {
									$301 = ($t$2$i|0)==(0|0);
									$302 = ($v$3$i|0)==(0|0);
									$or$cond$i = $301 & $302;
									if ($or$cond$i) {
										$303 = 2 << $idx$0$i;
										$304 = (0 - ($303))|0;
										$305 = $303 | $304;
										$306 = $249 & $305;
										$307 = ($306|0)==(0);
										if ($307) {
											$nb$0 = $248;
											break;
										}
										$308 = (0 - ($306))|0;
										$309 = $306 & $308;
										$310 = (($309) + -1)|0;
										$311 = $310 >>> 12;
										$312 = $311 & 16;
										$313 = $310 >>> $312;
										$314 = $313 >>> 5;
										$315 = $314 & 8;
										$316 = $315 | $312;
										$317 = $313 >>> $315;
										$318 = $317 >>> 2;
										$319 = $318 & 4;
										$320 = $316 | $319;
										$321 = $317 >>> $319;
										$322 = $321 >>> 1;
										$323 = $322 & 2;
										$324 = $320 | $323;
										$325 = $321 >>> $323;
										$326 = $325 >>> 1;
										$327 = $326 & 1;
										$328 = $324 | $327;
										$329 = $325 >>> $327;
										$330 = (($328) + ($329))|0;
										$331 = (7156 + ($330<<2)|0);
										$332 = HEAP32[$331>>2]|0;
										$t$4$ph$i = $332;
									} else {
										$t$4$ph$i = $t$2$i;
									}
									$333 = ($t$4$ph$i|0)==(0|0);
									if ($333) {
										$rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
									} else {
										$rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
										label = 90;
									}
								}
								if ((label|0) == 90) {
									while(1) {
										label = 0;
										$334 = ((($t$411$i)) + 4|0);
										$335 = HEAP32[$334>>2]|0;
										$336 = $335 & -8;
										$337 = (($336) - ($248))|0;
										$338 = ($337>>>0)<($rsize$412$i>>>0);
										$$rsize$4$i = $338 ? $337 : $rsize$412$i;
										$t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
										$339 = ((($t$411$i)) + 16|0);
										$340 = HEAP32[$339>>2]|0;
										$341 = ($340|0)==(0|0);
										if (!($341)) {
											$rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
											label = 90;
											continue;
										}
										$342 = ((($t$411$i)) + 20|0);
										$343 = HEAP32[$342>>2]|0;
										$344 = ($343|0)==(0|0);
										if ($344) {
											$rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
											break;
										} else {
											$rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
											label = 90;
										}
									}
								}
								$345 = ($v$4$lcssa$i|0)==(0|0);
								if ($345) {
									$nb$0 = $248;
								} else {
									$346 = HEAP32[(6860)>>2]|0;
									$347 = (($346) - ($248))|0;
									$348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
									if ($348) {
										$349 = HEAP32[(6868)>>2]|0;
										$350 = ($v$4$lcssa$i>>>0)<($349>>>0);
										if ($350) {
											_abort();
											// unreachable;
										}
										$351 = (($v$4$lcssa$i) + ($248)|0);
										$352 = ($v$4$lcssa$i>>>0)<($351>>>0);
										if (!($352)) {
											_abort();
											// unreachable;
										}
										$353 = ((($v$4$lcssa$i)) + 24|0);
										$354 = HEAP32[$353>>2]|0;
										$355 = ((($v$4$lcssa$i)) + 12|0);
										$356 = HEAP32[$355>>2]|0;
										$357 = ($356|0)==($v$4$lcssa$i|0);
										do {
											if ($357) {
												$367 = ((($v$4$lcssa$i)) + 20|0);
												$368 = HEAP32[$367>>2]|0;
												$369 = ($368|0)==(0|0);
												if ($369) {
													$370 = ((($v$4$lcssa$i)) + 16|0);
													$371 = HEAP32[$370>>2]|0;
													$372 = ($371|0)==(0|0);
													if ($372) {
														$R$3$i11 = 0;
														break;
													} else {
														$R$1$i9 = $371;$RP$1$i8 = $370;
													}
												} else {
													$R$1$i9 = $368;$RP$1$i8 = $367;
												}
												while(1) {
													$373 = ((($R$1$i9)) + 20|0);
													$374 = HEAP32[$373>>2]|0;
													$375 = ($374|0)==(0|0);
													if (!($375)) {
														$R$1$i9 = $374;$RP$1$i8 = $373;
														continue;
													}
													$376 = ((($R$1$i9)) + 16|0);
													$377 = HEAP32[$376>>2]|0;
													$378 = ($377|0)==(0|0);
													if ($378) {
														$R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
														break;
													} else {
														$R$1$i9 = $377;$RP$1$i8 = $376;
													}
												}
												$379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
												if ($379) {
													_abort();
													// unreachable;
												} else {
													HEAP32[$RP$1$i8$lcssa>>2] = 0;
													$R$3$i11 = $R$1$i9$lcssa;
													break;
												}
											} else {
												$358 = ((($v$4$lcssa$i)) + 8|0);
												$359 = HEAP32[$358>>2]|0;
												$360 = ($359>>>0)<($349>>>0);
												if ($360) {
													_abort();
													// unreachable;
												}
												$361 = ((($359)) + 12|0);
												$362 = HEAP32[$361>>2]|0;
												$363 = ($362|0)==($v$4$lcssa$i|0);
												if (!($363)) {
													_abort();
													// unreachable;
												}
												$364 = ((($356)) + 8|0);
												$365 = HEAP32[$364>>2]|0;
												$366 = ($365|0)==($v$4$lcssa$i|0);
												if ($366) {
													HEAP32[$361>>2] = $356;
													HEAP32[$364>>2] = $359;
													$R$3$i11 = $356;
													break;
												} else {
													_abort();
													// unreachable;
												}
											}
										} while(0);
										$380 = ($354|0)==(0|0);
										do {
											if (!($380)) {
												$381 = ((($v$4$lcssa$i)) + 28|0);
												$382 = HEAP32[$381>>2]|0;
												$383 = (7156 + ($382<<2)|0);
												$384 = HEAP32[$383>>2]|0;
												$385 = ($v$4$lcssa$i|0)==($384|0);
												if ($385) {
													HEAP32[$383>>2] = $R$3$i11;
													$cond$i12 = ($R$3$i11|0)==(0|0);
													if ($cond$i12) {
														$386 = 1 << $382;
														$387 = $386 ^ -1;
														$388 = HEAP32[(6856)>>2]|0;
														$389 = $388 & $387;
														HEAP32[(6856)>>2] = $389;
														break;
													}
												} else {
													$390 = HEAP32[(6868)>>2]|0;
													$391 = ($354>>>0)<($390>>>0);
													if ($391) {
														_abort();
														// unreachable;
													}
													$392 = ((($354)) + 16|0);
													$393 = HEAP32[$392>>2]|0;
													$394 = ($393|0)==($v$4$lcssa$i|0);
													if ($394) {
														HEAP32[$392>>2] = $R$3$i11;
													} else {
														$395 = ((($354)) + 20|0);
														HEAP32[$395>>2] = $R$3$i11;
													}
													$396 = ($R$3$i11|0)==(0|0);
													if ($396) {
														break;
													}
												}
												$397 = HEAP32[(6868)>>2]|0;
												$398 = ($R$3$i11>>>0)<($397>>>0);
												if ($398) {
													_abort();
													// unreachable;
												}
												$399 = ((($R$3$i11)) + 24|0);
												HEAP32[$399>>2] = $354;
												$400 = ((($v$4$lcssa$i)) + 16|0);
												$401 = HEAP32[$400>>2]|0;
												$402 = ($401|0)==(0|0);
												do {
													if (!($402)) {
														$403 = ($401>>>0)<($397>>>0);
														if ($403) {
															_abort();
															// unreachable;
														} else {
															$404 = ((($R$3$i11)) + 16|0);
															HEAP32[$404>>2] = $401;
															$405 = ((($401)) + 24|0);
															HEAP32[$405>>2] = $R$3$i11;
															break;
														}
													}
												} while(0);
												$406 = ((($v$4$lcssa$i)) + 20|0);
												$407 = HEAP32[$406>>2]|0;
												$408 = ($407|0)==(0|0);
												if (!($408)) {
													$409 = HEAP32[(6868)>>2]|0;
													$410 = ($407>>>0)<($409>>>0);
													if ($410) {
														_abort();
														// unreachable;
													} else {
														$411 = ((($R$3$i11)) + 20|0);
														HEAP32[$411>>2] = $407;
														$412 = ((($407)) + 24|0);
														HEAP32[$412>>2] = $R$3$i11;
														break;
													}
												}
											}
										} while(0);
										$413 = ($rsize$4$lcssa$i>>>0)<(16);
										do {
											if ($413) {
												$414 = (($rsize$4$lcssa$i) + ($248))|0;
												$415 = $414 | 3;
												$416 = ((($v$4$lcssa$i)) + 4|0);
												HEAP32[$416>>2] = $415;
												$417 = (($v$4$lcssa$i) + ($414)|0);
												$418 = ((($417)) + 4|0);
												$419 = HEAP32[$418>>2]|0;
												$420 = $419 | 1;
												HEAP32[$418>>2] = $420;
											} else {
												$421 = $248 | 3;
												$422 = ((($v$4$lcssa$i)) + 4|0);
												HEAP32[$422>>2] = $421;
												$423 = $rsize$4$lcssa$i | 1;
												$424 = ((($351)) + 4|0);
												HEAP32[$424>>2] = $423;
												$425 = (($351) + ($rsize$4$lcssa$i)|0);
												HEAP32[$425>>2] = $rsize$4$lcssa$i;
												$426 = $rsize$4$lcssa$i >>> 3;
												$427 = ($rsize$4$lcssa$i>>>0)<(256);
												if ($427) {
													$428 = $426 << 1;
													$429 = (6892 + ($428<<2)|0);
													$430 = HEAP32[1713]|0;
													$431 = 1 << $426;
													$432 = $430 & $431;
													$433 = ($432|0)==(0);
													if ($433) {
														$434 = $430 | $431;
														HEAP32[1713] = $434;
														$$pre$i13 = ((($429)) + 8|0);
														$$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
													} else {
														$435 = ((($429)) + 8|0);
														$436 = HEAP32[$435>>2]|0;
														$437 = HEAP32[(6868)>>2]|0;
														$438 = ($436>>>0)<($437>>>0);
														if ($438) {
															_abort();
															// unreachable;
														} else {
															$$pre$phi$i14Z2D = $435;$F5$0$i = $436;
														}
													}
													HEAP32[$$pre$phi$i14Z2D>>2] = $351;
													$439 = ((($F5$0$i)) + 12|0);
													HEAP32[$439>>2] = $351;
													$440 = ((($351)) + 8|0);
													HEAP32[$440>>2] = $F5$0$i;
													$441 = ((($351)) + 12|0);
													HEAP32[$441>>2] = $429;
													break;
												}
												$442 = $rsize$4$lcssa$i >>> 8;
												$443 = ($442|0)==(0);
												if ($443) {
													$I7$0$i = 0;
												} else {
													$444 = ($rsize$4$lcssa$i>>>0)>(16777215);
													if ($444) {
														$I7$0$i = 31;
													} else {
														$445 = (($442) + 1048320)|0;
														$446 = $445 >>> 16;
														$447 = $446 & 8;
														$448 = $442 << $447;
														$449 = (($448) + 520192)|0;
														$450 = $449 >>> 16;
														$451 = $450 & 4;
														$452 = $451 | $447;
														$453 = $448 << $451;
														$454 = (($453) + 245760)|0;
														$455 = $454 >>> 16;
														$456 = $455 & 2;
														$457 = $452 | $456;
														$458 = (14 - ($457))|0;
														$459 = $453 << $456;
														$460 = $459 >>> 15;
														$461 = (($458) + ($460))|0;
														$462 = $461 << 1;
														$463 = (($461) + 7)|0;
														$464 = $rsize$4$lcssa$i >>> $463;
														$465 = $464 & 1;
														$466 = $465 | $462;
														$I7$0$i = $466;
													}
												}
												$467 = (7156 + ($I7$0$i<<2)|0);
												$468 = ((($351)) + 28|0);
												HEAP32[$468>>2] = $I7$0$i;
												$469 = ((($351)) + 16|0);
												$470 = ((($469)) + 4|0);
												HEAP32[$470>>2] = 0;
												HEAP32[$469>>2] = 0;
												$471 = HEAP32[(6856)>>2]|0;
												$472 = 1 << $I7$0$i;
												$473 = $471 & $472;
												$474 = ($473|0)==(0);
												if ($474) {
													$475 = $471 | $472;
													HEAP32[(6856)>>2] = $475;
													HEAP32[$467>>2] = $351;
													$476 = ((($351)) + 24|0);
													HEAP32[$476>>2] = $467;
													$477 = ((($351)) + 12|0);
													HEAP32[$477>>2] = $351;
													$478 = ((($351)) + 8|0);
													HEAP32[$478>>2] = $351;
													break;
												}
												$479 = HEAP32[$467>>2]|0;
												$480 = ($I7$0$i|0)==(31);
												$481 = $I7$0$i >>> 1;
												$482 = (25 - ($481))|0;
												$483 = $480 ? 0 : $482;
												$484 = $rsize$4$lcssa$i << $483;
												$K12$0$i = $484;$T$0$i = $479;
												while(1) {
													$485 = ((($T$0$i)) + 4|0);
													$486 = HEAP32[$485>>2]|0;
													$487 = $486 & -8;
													$488 = ($487|0)==($rsize$4$lcssa$i|0);
													if ($488) {
														$T$0$i$lcssa = $T$0$i;
														label = 148;
														break;
													}
													$489 = $K12$0$i >>> 31;
													$490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
													$491 = $K12$0$i << 1;
													$492 = HEAP32[$490>>2]|0;
													$493 = ($492|0)==(0|0);
													if ($493) {
														$$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
														label = 145;
														break;
													} else {
														$K12$0$i = $491;$T$0$i = $492;
													}
												}
												if ((label|0) == 145) {
													$494 = HEAP32[(6868)>>2]|0;
													$495 = ($$lcssa157>>>0)<($494>>>0);
													if ($495) {
														_abort();
														// unreachable;
													} else {
														HEAP32[$$lcssa157>>2] = $351;
														$496 = ((($351)) + 24|0);
														HEAP32[$496>>2] = $T$0$i$lcssa156;
														$497 = ((($351)) + 12|0);
														HEAP32[$497>>2] = $351;
														$498 = ((($351)) + 8|0);
														HEAP32[$498>>2] = $351;
														break;
													}
												}
												else if ((label|0) == 148) {
													$499 = ((($T$0$i$lcssa)) + 8|0);
													$500 = HEAP32[$499>>2]|0;
													$501 = HEAP32[(6868)>>2]|0;
													$502 = ($500>>>0)>=($501>>>0);
													$not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
													$503 = $502 & $not$7$i;
													if ($503) {
														$504 = ((($500)) + 12|0);
														HEAP32[$504>>2] = $351;
														HEAP32[$499>>2] = $351;
														$505 = ((($351)) + 8|0);
														HEAP32[$505>>2] = $500;
														$506 = ((($351)) + 12|0);
														HEAP32[$506>>2] = $T$0$i$lcssa;
														$507 = ((($351)) + 24|0);
														HEAP32[$507>>2] = 0;
														break;
													} else {
														_abort();
														// unreachable;
													}
												}
											}
										} while(0);
										$508 = ((($v$4$lcssa$i)) + 8|0);
										$$0 = $508;
										return ($$0|0);
									} else {
										$nb$0 = $248;
									}
								}
							}
						}
					}
				} while(0);
				$509 = HEAP32[(6860)>>2]|0;
				$510 = ($509>>>0)<($nb$0>>>0);
				if (!($510)) {
					$511 = (($509) - ($nb$0))|0;
					$512 = HEAP32[(6872)>>2]|0;
					$513 = ($511>>>0)>(15);
					if ($513) {
						$514 = (($512) + ($nb$0)|0);
						HEAP32[(6872)>>2] = $514;
						HEAP32[(6860)>>2] = $511;
						$515 = $511 | 1;
						$516 = ((($514)) + 4|0);
						HEAP32[$516>>2] = $515;
						$517 = (($514) + ($511)|0);
						HEAP32[$517>>2] = $511;
						$518 = $nb$0 | 3;
						$519 = ((($512)) + 4|0);
						HEAP32[$519>>2] = $518;
					} else {
						HEAP32[(6860)>>2] = 0;
						HEAP32[(6872)>>2] = 0;
						$520 = $509 | 3;
						$521 = ((($512)) + 4|0);
						HEAP32[$521>>2] = $520;
						$522 = (($512) + ($509)|0);
						$523 = ((($522)) + 4|0);
						$524 = HEAP32[$523>>2]|0;
						$525 = $524 | 1;
						HEAP32[$523>>2] = $525;
					}
					$526 = ((($512)) + 8|0);
					$$0 = $526;
					return ($$0|0);
				}
				$527 = HEAP32[(6864)>>2]|0;
				$528 = ($527>>>0)>($nb$0>>>0);
				if ($528) {
					$529 = (($527) - ($nb$0))|0;
					HEAP32[(6864)>>2] = $529;
					$530 = HEAP32[(6876)>>2]|0;
					$531 = (($530) + ($nb$0)|0);
					HEAP32[(6876)>>2] = $531;
					$532 = $529 | 1;
					$533 = ((($531)) + 4|0);
					HEAP32[$533>>2] = $532;
					$534 = $nb$0 | 3;
					$535 = ((($530)) + 4|0);
					HEAP32[$535>>2] = $534;
					$536 = ((($530)) + 8|0);
					$$0 = $536;
					return ($$0|0);
				}
				$537 = HEAP32[1831]|0;
				$538 = ($537|0)==(0);
				do {
					if ($538) {
						$539 = (_sysconf(30)|0);
						$540 = (($539) + -1)|0;
						$541 = $540 & $539;
						$542 = ($541|0)==(0);
						if ($542) {
							HEAP32[(7332)>>2] = $539;
							HEAP32[(7328)>>2] = $539;
							HEAP32[(7336)>>2] = -1;
							HEAP32[(7340)>>2] = -1;
							HEAP32[(7344)>>2] = 0;
							HEAP32[(7296)>>2] = 0;
							$543 = (_time((0|0))|0);
							$544 = $543 & -16;
							$545 = $544 ^ 1431655768;
							HEAP32[1831] = $545;
							break;
						} else {
							_abort();
							// unreachable;
						}
					}
				} while(0);
				$546 = (($nb$0) + 48)|0;
				$547 = HEAP32[(7332)>>2]|0;
				$548 = (($nb$0) + 47)|0;
				$549 = (($547) + ($548))|0;
				$550 = (0 - ($547))|0;
				$551 = $549 & $550;
				$552 = ($551>>>0)>($nb$0>>>0);
				if (!($552)) {
					$$0 = 0;
					return ($$0|0);
				}
				$553 = HEAP32[(7292)>>2]|0;
				$554 = ($553|0)==(0);
				if (!($554)) {
					$555 = HEAP32[(7284)>>2]|0;
					$556 = (($555) + ($551))|0;
					$557 = ($556>>>0)<=($555>>>0);
					$558 = ($556>>>0)>($553>>>0);
					$or$cond1$i16 = $557 | $558;
					if ($or$cond1$i16) {
						$$0 = 0;
						return ($$0|0);
					}
				}
				$559 = HEAP32[(7296)>>2]|0;
				$560 = $559 & 4;
				$561 = ($560|0)==(0);
				L257: do {
					if ($561) {
						$562 = HEAP32[(6876)>>2]|0;
						$563 = ($562|0)==(0|0);
						L259: do {
							if ($563) {
								label = 173;
							} else {
								$sp$0$i$i = (7300);
								while(1) {
									$564 = HEAP32[$sp$0$i$i>>2]|0;
									$565 = ($564>>>0)>($562>>>0);
									if (!($565)) {
										$566 = ((($sp$0$i$i)) + 4|0);
										$567 = HEAP32[$566>>2]|0;
										$568 = (($564) + ($567)|0);
										$569 = ($568>>>0)>($562>>>0);
										if ($569) {
											$$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
											break;
										}
									}
									$570 = ((($sp$0$i$i)) + 8|0);
									$571 = HEAP32[$570>>2]|0;
									$572 = ($571|0)==(0|0);
									if ($572) {
										label = 173;
										break L259;
									} else {
										$sp$0$i$i = $571;
									}
								}
								$595 = HEAP32[(6864)>>2]|0;
								$596 = (($549) - ($595))|0;
								$597 = $596 & $550;
								$598 = ($597>>>0)<(2147483647);
								if ($598) {
									$599 = (_sbrk(($597|0))|0);
									$600 = HEAP32[$$lcssa153>>2]|0;
									$601 = HEAP32[$$lcssa155>>2]|0;
									$602 = (($600) + ($601)|0);
									$603 = ($599|0)==($602|0);
									if ($603) {
										$604 = ($599|0)==((-1)|0);
										if (!($604)) {
											$tbase$746$i = $599;$tsize$745$i = $597;
											label = 193;
											break L257;
										}
									} else {
										$br$2$ph$i = $599;$ssize$2$ph$i = $597;
										label = 183;
									}
								}
							}
						} while(0);
						do {
							if ((label|0) == 173) {
								$573 = (_sbrk(0)|0);
								$574 = ($573|0)==((-1)|0);
								if (!($574)) {
									$575 = $573;
									$576 = HEAP32[(7328)>>2]|0;
									$577 = (($576) + -1)|0;
									$578 = $577 & $575;
									$579 = ($578|0)==(0);
									if ($579) {
										$ssize$0$i = $551;
									} else {
										$580 = (($577) + ($575))|0;
										$581 = (0 - ($576))|0;
										$582 = $580 & $581;
										$583 = (($551) - ($575))|0;
										$584 = (($583) + ($582))|0;
										$ssize$0$i = $584;
									}
									$585 = HEAP32[(7284)>>2]|0;
									$586 = (($585) + ($ssize$0$i))|0;
									$587 = ($ssize$0$i>>>0)>($nb$0>>>0);
									$588 = ($ssize$0$i>>>0)<(2147483647);
									$or$cond$i17 = $587 & $588;
									if ($or$cond$i17) {
										$589 = HEAP32[(7292)>>2]|0;
										$590 = ($589|0)==(0);
										if (!($590)) {
											$591 = ($586>>>0)<=($585>>>0);
											$592 = ($586>>>0)>($589>>>0);
											$or$cond2$i = $591 | $592;
											if ($or$cond2$i) {
												break;
											}
										}
										$593 = (_sbrk(($ssize$0$i|0))|0);
										$594 = ($593|0)==($573|0);
										if ($594) {
											$tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
											label = 193;
											break L257;
										} else {
											$br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
											label = 183;
										}
									}
								}
							}
						} while(0);
						L279: do {
							if ((label|0) == 183) {
								$605 = (0 - ($ssize$2$ph$i))|0;
								$606 = ($br$2$ph$i|0)!=((-1)|0);
								$607 = ($ssize$2$ph$i>>>0)<(2147483647);
								$or$cond7$i = $607 & $606;
								$608 = ($546>>>0)>($ssize$2$ph$i>>>0);
								$or$cond8$i = $608 & $or$cond7$i;
								do {
									if ($or$cond8$i) {
										$609 = HEAP32[(7332)>>2]|0;
										$610 = (($548) - ($ssize$2$ph$i))|0;
										$611 = (($610) + ($609))|0;
										$612 = (0 - ($609))|0;
										$613 = $611 & $612;
										$614 = ($613>>>0)<(2147483647);
										if ($614) {
											$615 = (_sbrk(($613|0))|0);
											$616 = ($615|0)==((-1)|0);
											if ($616) {
												(_sbrk(($605|0))|0);
												break L279;
											} else {
												$617 = (($613) + ($ssize$2$ph$i))|0;
												$ssize$5$i = $617;
												break;
											}
										} else {
											$ssize$5$i = $ssize$2$ph$i;
										}
									} else {
										$ssize$5$i = $ssize$2$ph$i;
									}
								} while(0);
								$618 = ($br$2$ph$i|0)==((-1)|0);
								if (!($618)) {
									$tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
									label = 193;
									break L257;
								}
							}
						} while(0);
						$619 = HEAP32[(7296)>>2]|0;
						$620 = $619 | 4;
						HEAP32[(7296)>>2] = $620;
						label = 190;
					} else {
						label = 190;
					}
				} while(0);
				if ((label|0) == 190) {
					$621 = ($551>>>0)<(2147483647);
					if ($621) {
						$622 = (_sbrk(($551|0))|0);
						$623 = (_sbrk(0)|0);
						$624 = ($622|0)!=((-1)|0);
						$625 = ($623|0)!=((-1)|0);
						$or$cond5$i = $624 & $625;
						$626 = ($622>>>0)<($623>>>0);
						$or$cond10$i = $626 & $or$cond5$i;
						if ($or$cond10$i) {
							$627 = $623;
							$628 = $622;
							$629 = (($627) - ($628))|0;
							$630 = (($nb$0) + 40)|0;
							$$not$i = ($629>>>0)>($630>>>0);
							if ($$not$i) {
								$tbase$746$i = $622;$tsize$745$i = $629;
								label = 193;
							}
						}
					}
				}
				if ((label|0) == 193) {
					$631 = HEAP32[(7284)>>2]|0;
					$632 = (($631) + ($tsize$745$i))|0;
					HEAP32[(7284)>>2] = $632;
					$633 = HEAP32[(7288)>>2]|0;
					$634 = ($632>>>0)>($633>>>0);
					if ($634) {
						HEAP32[(7288)>>2] = $632;
					}
					$635 = HEAP32[(6876)>>2]|0;
					$636 = ($635|0)==(0|0);
					do {
						if ($636) {
							$637 = HEAP32[(6868)>>2]|0;
							$638 = ($637|0)==(0|0);
							$639 = ($tbase$746$i>>>0)<($637>>>0);
							$or$cond11$i = $638 | $639;
							if ($or$cond11$i) {
								HEAP32[(6868)>>2] = $tbase$746$i;
							}
							HEAP32[(7300)>>2] = $tbase$746$i;
							HEAP32[(7304)>>2] = $tsize$745$i;
							HEAP32[(7312)>>2] = 0;
							$640 = HEAP32[1831]|0;
							HEAP32[(6888)>>2] = $640;
							HEAP32[(6884)>>2] = -1;
							$i$01$i$i = 0;
							while(1) {
								$641 = $i$01$i$i << 1;
								$642 = (6892 + ($641<<2)|0);
								$643 = ((($642)) + 12|0);
								HEAP32[$643>>2] = $642;
								$644 = ((($642)) + 8|0);
								HEAP32[$644>>2] = $642;
								$645 = (($i$01$i$i) + 1)|0;
								$exitcond$i$i = ($645|0)==(32);
								if ($exitcond$i$i) {
									break;
								} else {
									$i$01$i$i = $645;
								}
							}
							$646 = (($tsize$745$i) + -40)|0;
							$647 = ((($tbase$746$i)) + 8|0);
							$648 = $647;
							$649 = $648 & 7;
							$650 = ($649|0)==(0);
							$651 = (0 - ($648))|0;
							$652 = $651 & 7;
							$653 = $650 ? 0 : $652;
							$654 = (($tbase$746$i) + ($653)|0);
							$655 = (($646) - ($653))|0;
							HEAP32[(6876)>>2] = $654;
							HEAP32[(6864)>>2] = $655;
							$656 = $655 | 1;
							$657 = ((($654)) + 4|0);
							HEAP32[$657>>2] = $656;
							$658 = (($654) + ($655)|0);
							$659 = ((($658)) + 4|0);
							HEAP32[$659>>2] = 40;
							$660 = HEAP32[(7340)>>2]|0;
							HEAP32[(6880)>>2] = $660;
						} else {
							$sp$068$i = (7300);
							while(1) {
								$661 = HEAP32[$sp$068$i>>2]|0;
								$662 = ((($sp$068$i)) + 4|0);
								$663 = HEAP32[$662>>2]|0;
								$664 = (($661) + ($663)|0);
								$665 = ($tbase$746$i|0)==($664|0);
								if ($665) {
									$$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
									label = 203;
									break;
								}
								$666 = ((($sp$068$i)) + 8|0);
								$667 = HEAP32[$666>>2]|0;
								$668 = ($667|0)==(0|0);
								if ($668) {
									break;
								} else {
									$sp$068$i = $667;
								}
							}
							if ((label|0) == 203) {
								$669 = ((($sp$068$i$lcssa)) + 12|0);
								$670 = HEAP32[$669>>2]|0;
								$671 = $670 & 8;
								$672 = ($671|0)==(0);
								if ($672) {
									$673 = ($635>>>0)>=($$lcssa147>>>0);
									$674 = ($635>>>0)<($tbase$746$i>>>0);
									$or$cond48$i = $674 & $673;
									if ($or$cond48$i) {
										$675 = (($$lcssa151) + ($tsize$745$i))|0;
										HEAP32[$$lcssa149>>2] = $675;
										$676 = HEAP32[(6864)>>2]|0;
										$677 = ((($635)) + 8|0);
										$678 = $677;
										$679 = $678 & 7;
										$680 = ($679|0)==(0);
										$681 = (0 - ($678))|0;
										$682 = $681 & 7;
										$683 = $680 ? 0 : $682;
										$684 = (($635) + ($683)|0);
										$685 = (($tsize$745$i) - ($683))|0;
										$686 = (($685) + ($676))|0;
										HEAP32[(6876)>>2] = $684;
										HEAP32[(6864)>>2] = $686;
										$687 = $686 | 1;
										$688 = ((($684)) + 4|0);
										HEAP32[$688>>2] = $687;
										$689 = (($684) + ($686)|0);
										$690 = ((($689)) + 4|0);
										HEAP32[$690>>2] = 40;
										$691 = HEAP32[(7340)>>2]|0;
										HEAP32[(6880)>>2] = $691;
										break;
									}
								}
							}
							$692 = HEAP32[(6868)>>2]|0;
							$693 = ($tbase$746$i>>>0)<($692>>>0);
							if ($693) {
								HEAP32[(6868)>>2] = $tbase$746$i;
								$757 = $tbase$746$i;
							} else {
								$757 = $692;
							}
							$694 = (($tbase$746$i) + ($tsize$745$i)|0);
							$sp$167$i = (7300);
							while(1) {
								$695 = HEAP32[$sp$167$i>>2]|0;
								$696 = ($695|0)==($694|0);
								if ($696) {
									$$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
									label = 211;
									break;
								}
								$697 = ((($sp$167$i)) + 8|0);
								$698 = HEAP32[$697>>2]|0;
								$699 = ($698|0)==(0|0);
								if ($699) {
									$sp$0$i$i$i = (7300);
									break;
								} else {
									$sp$167$i = $698;
								}
							}
							if ((label|0) == 211) {
								$700 = ((($sp$167$i$lcssa)) + 12|0);
								$701 = HEAP32[$700>>2]|0;
								$702 = $701 & 8;
								$703 = ($702|0)==(0);
								if ($703) {
									HEAP32[$$lcssa144>>2] = $tbase$746$i;
									$704 = ((($sp$167$i$lcssa)) + 4|0);
									$705 = HEAP32[$704>>2]|0;
									$706 = (($705) + ($tsize$745$i))|0;
									HEAP32[$704>>2] = $706;
									$707 = ((($tbase$746$i)) + 8|0);
									$708 = $707;
									$709 = $708 & 7;
									$710 = ($709|0)==(0);
									$711 = (0 - ($708))|0;
									$712 = $711 & 7;
									$713 = $710 ? 0 : $712;
									$714 = (($tbase$746$i) + ($713)|0);
									$715 = ((($694)) + 8|0);
									$716 = $715;
									$717 = $716 & 7;
									$718 = ($717|0)==(0);
									$719 = (0 - ($716))|0;
									$720 = $719 & 7;
									$721 = $718 ? 0 : $720;
									$722 = (($694) + ($721)|0);
									$723 = $722;
									$724 = $714;
									$725 = (($723) - ($724))|0;
									$726 = (($714) + ($nb$0)|0);
									$727 = (($725) - ($nb$0))|0;
									$728 = $nb$0 | 3;
									$729 = ((($714)) + 4|0);
									HEAP32[$729>>2] = $728;
									$730 = ($722|0)==($635|0);
									do {
										if ($730) {
											$731 = HEAP32[(6864)>>2]|0;
											$732 = (($731) + ($727))|0;
											HEAP32[(6864)>>2] = $732;
											HEAP32[(6876)>>2] = $726;
											$733 = $732 | 1;
											$734 = ((($726)) + 4|0);
											HEAP32[$734>>2] = $733;
										} else {
											$735 = HEAP32[(6872)>>2]|0;
											$736 = ($722|0)==($735|0);
											if ($736) {
												$737 = HEAP32[(6860)>>2]|0;
												$738 = (($737) + ($727))|0;
												HEAP32[(6860)>>2] = $738;
												HEAP32[(6872)>>2] = $726;
												$739 = $738 | 1;
												$740 = ((($726)) + 4|0);
												HEAP32[$740>>2] = $739;
												$741 = (($726) + ($738)|0);
												HEAP32[$741>>2] = $738;
												break;
											}
											$742 = ((($722)) + 4|0);
											$743 = HEAP32[$742>>2]|0;
											$744 = $743 & 3;
											$745 = ($744|0)==(1);
											if ($745) {
												$746 = $743 & -8;
												$747 = $743 >>> 3;
												$748 = ($743>>>0)<(256);
												L331: do {
													if ($748) {
														$749 = ((($722)) + 8|0);
														$750 = HEAP32[$749>>2]|0;
														$751 = ((($722)) + 12|0);
														$752 = HEAP32[$751>>2]|0;
														$753 = $747 << 1;
														$754 = (6892 + ($753<<2)|0);
														$755 = ($750|0)==($754|0);
														do {
															if (!($755)) {
																$756 = ($750>>>0)<($757>>>0);
																if ($756) {
																	_abort();
																	// unreachable;
																}
																$758 = ((($750)) + 12|0);
																$759 = HEAP32[$758>>2]|0;
																$760 = ($759|0)==($722|0);
																if ($760) {
																	break;
																}
																_abort();
																// unreachable;
															}
														} while(0);
														$761 = ($752|0)==($750|0);
														if ($761) {
															$762 = 1 << $747;
															$763 = $762 ^ -1;
															$764 = HEAP32[1713]|0;
															$765 = $764 & $763;
															HEAP32[1713] = $765;
															break;
														}
														$766 = ($752|0)==($754|0);
														do {
															if ($766) {
																$$pre9$i$i = ((($752)) + 8|0);
																$$pre$phi10$i$iZ2D = $$pre9$i$i;
															} else {
																$767 = ($752>>>0)<($757>>>0);
																if ($767) {
																	_abort();
																	// unreachable;
																}
																$768 = ((($752)) + 8|0);
																$769 = HEAP32[$768>>2]|0;
																$770 = ($769|0)==($722|0);
																if ($770) {
																	$$pre$phi10$i$iZ2D = $768;
																	break;
																}
																_abort();
																// unreachable;
															}
														} while(0);
														$771 = ((($750)) + 12|0);
														HEAP32[$771>>2] = $752;
														HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
													} else {
														$772 = ((($722)) + 24|0);
														$773 = HEAP32[$772>>2]|0;
														$774 = ((($722)) + 12|0);
														$775 = HEAP32[$774>>2]|0;
														$776 = ($775|0)==($722|0);
														do {
															if ($776) {
																$786 = ((($722)) + 16|0);
																$787 = ((($786)) + 4|0);
																$788 = HEAP32[$787>>2]|0;
																$789 = ($788|0)==(0|0);
																if ($789) {
																	$790 = HEAP32[$786>>2]|0;
																	$791 = ($790|0)==(0|0);
																	if ($791) {
																		$R$3$i$i = 0;
																		break;
																	} else {
																		$R$1$i$i = $790;$RP$1$i$i = $786;
																	}
																} else {
																	$R$1$i$i = $788;$RP$1$i$i = $787;
																}
																while(1) {
																	$792 = ((($R$1$i$i)) + 20|0);
																	$793 = HEAP32[$792>>2]|0;
																	$794 = ($793|0)==(0|0);
																	if (!($794)) {
																		$R$1$i$i = $793;$RP$1$i$i = $792;
																		continue;
																	}
																	$795 = ((($R$1$i$i)) + 16|0);
																	$796 = HEAP32[$795>>2]|0;
																	$797 = ($796|0)==(0|0);
																	if ($797) {
																		$R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
																		break;
																	} else {
																		$R$1$i$i = $796;$RP$1$i$i = $795;
																	}
																}
																$798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
																if ($798) {
																	_abort();
																	// unreachable;
																} else {
																	HEAP32[$RP$1$i$i$lcssa>>2] = 0;
																	$R$3$i$i = $R$1$i$i$lcssa;
																	break;
																}
															} else {
																$777 = ((($722)) + 8|0);
																$778 = HEAP32[$777>>2]|0;
																$779 = ($778>>>0)<($757>>>0);
																if ($779) {
																	_abort();
																	// unreachable;
																}
																$780 = ((($778)) + 12|0);
																$781 = HEAP32[$780>>2]|0;
																$782 = ($781|0)==($722|0);
																if (!($782)) {
																	_abort();
																	// unreachable;
																}
																$783 = ((($775)) + 8|0);
																$784 = HEAP32[$783>>2]|0;
																$785 = ($784|0)==($722|0);
																if ($785) {
																	HEAP32[$780>>2] = $775;
																	HEAP32[$783>>2] = $778;
																	$R$3$i$i = $775;
																	break;
																} else {
																	_abort();
																	// unreachable;
																}
															}
														} while(0);
														$799 = ($773|0)==(0|0);
														if ($799) {
															break;
														}
														$800 = ((($722)) + 28|0);
														$801 = HEAP32[$800>>2]|0;
														$802 = (7156 + ($801<<2)|0);
														$803 = HEAP32[$802>>2]|0;
														$804 = ($722|0)==($803|0);
														do {
															if ($804) {
																HEAP32[$802>>2] = $R$3$i$i;
																$cond$i$i = ($R$3$i$i|0)==(0|0);
																if (!($cond$i$i)) {
																	break;
																}
																$805 = 1 << $801;
																$806 = $805 ^ -1;
																$807 = HEAP32[(6856)>>2]|0;
																$808 = $807 & $806;
																HEAP32[(6856)>>2] = $808;
																break L331;
															} else {
																$809 = HEAP32[(6868)>>2]|0;
																$810 = ($773>>>0)<($809>>>0);
																if ($810) {
																	_abort();
																	// unreachable;
																}
																$811 = ((($773)) + 16|0);
																$812 = HEAP32[$811>>2]|0;
																$813 = ($812|0)==($722|0);
																if ($813) {
																	HEAP32[$811>>2] = $R$3$i$i;
																} else {
																	$814 = ((($773)) + 20|0);
																	HEAP32[$814>>2] = $R$3$i$i;
																}
																$815 = ($R$3$i$i|0)==(0|0);
																if ($815) {
																	break L331;
																}
															}
														} while(0);
														$816 = HEAP32[(6868)>>2]|0;
														$817 = ($R$3$i$i>>>0)<($816>>>0);
														if ($817) {
															_abort();
															// unreachable;
														}
														$818 = ((($R$3$i$i)) + 24|0);
														HEAP32[$818>>2] = $773;
														$819 = ((($722)) + 16|0);
														$820 = HEAP32[$819>>2]|0;
														$821 = ($820|0)==(0|0);
														do {
															if (!($821)) {
																$822 = ($820>>>0)<($816>>>0);
																if ($822) {
																	_abort();
																	// unreachable;
																} else {
																	$823 = ((($R$3$i$i)) + 16|0);
																	HEAP32[$823>>2] = $820;
																	$824 = ((($820)) + 24|0);
																	HEAP32[$824>>2] = $R$3$i$i;
																	break;
																}
															}
														} while(0);
														$825 = ((($819)) + 4|0);
														$826 = HEAP32[$825>>2]|0;
														$827 = ($826|0)==(0|0);
														if ($827) {
															break;
														}
														$828 = HEAP32[(6868)>>2]|0;
														$829 = ($826>>>0)<($828>>>0);
														if ($829) {
															_abort();
															// unreachable;
														} else {
															$830 = ((($R$3$i$i)) + 20|0);
															HEAP32[$830>>2] = $826;
															$831 = ((($826)) + 24|0);
															HEAP32[$831>>2] = $R$3$i$i;
															break;
														}
													}
												} while(0);
												$832 = (($722) + ($746)|0);
												$833 = (($746) + ($727))|0;
												$oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
											} else {
												$oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
											}
											$834 = ((($oldfirst$0$i$i)) + 4|0);
											$835 = HEAP32[$834>>2]|0;
											$836 = $835 & -2;
											HEAP32[$834>>2] = $836;
											$837 = $qsize$0$i$i | 1;
											$838 = ((($726)) + 4|0);
											HEAP32[$838>>2] = $837;
											$839 = (($726) + ($qsize$0$i$i)|0);
											HEAP32[$839>>2] = $qsize$0$i$i;
											$840 = $qsize$0$i$i >>> 3;
											$841 = ($qsize$0$i$i>>>0)<(256);
											if ($841) {
												$842 = $840 << 1;
												$843 = (6892 + ($842<<2)|0);
												$844 = HEAP32[1713]|0;
												$845 = 1 << $840;
												$846 = $844 & $845;
												$847 = ($846|0)==(0);
												do {
													if ($847) {
														$848 = $844 | $845;
														HEAP32[1713] = $848;
														$$pre$i16$i = ((($843)) + 8|0);
														$$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
													} else {
														$849 = ((($843)) + 8|0);
														$850 = HEAP32[$849>>2]|0;
														$851 = HEAP32[(6868)>>2]|0;
														$852 = ($850>>>0)<($851>>>0);
														if (!($852)) {
															$$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
															break;
														}
														_abort();
														// unreachable;
													}
												} while(0);
												HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
												$853 = ((($F4$0$i$i)) + 12|0);
												HEAP32[$853>>2] = $726;
												$854 = ((($726)) + 8|0);
												HEAP32[$854>>2] = $F4$0$i$i;
												$855 = ((($726)) + 12|0);
												HEAP32[$855>>2] = $843;
												break;
											}
											$856 = $qsize$0$i$i >>> 8;
											$857 = ($856|0)==(0);
											do {
												if ($857) {
													$I7$0$i$i = 0;
												} else {
													$858 = ($qsize$0$i$i>>>0)>(16777215);
													if ($858) {
														$I7$0$i$i = 31;
														break;
													}
													$859 = (($856) + 1048320)|0;
													$860 = $859 >>> 16;
													$861 = $860 & 8;
													$862 = $856 << $861;
													$863 = (($862) + 520192)|0;
													$864 = $863 >>> 16;
													$865 = $864 & 4;
													$866 = $865 | $861;
													$867 = $862 << $865;
													$868 = (($867) + 245760)|0;
													$869 = $868 >>> 16;
													$870 = $869 & 2;
													$871 = $866 | $870;
													$872 = (14 - ($871))|0;
													$873 = $867 << $870;
													$874 = $873 >>> 15;
													$875 = (($872) + ($874))|0;
													$876 = $875 << 1;
													$877 = (($875) + 7)|0;
													$878 = $qsize$0$i$i >>> $877;
													$879 = $878 & 1;
													$880 = $879 | $876;
													$I7$0$i$i = $880;
												}
											} while(0);
											$881 = (7156 + ($I7$0$i$i<<2)|0);
											$882 = ((($726)) + 28|0);
											HEAP32[$882>>2] = $I7$0$i$i;
											$883 = ((($726)) + 16|0);
											$884 = ((($883)) + 4|0);
											HEAP32[$884>>2] = 0;
											HEAP32[$883>>2] = 0;
											$885 = HEAP32[(6856)>>2]|0;
											$886 = 1 << $I7$0$i$i;
											$887 = $885 & $886;
											$888 = ($887|0)==(0);
											if ($888) {
												$889 = $885 | $886;
												HEAP32[(6856)>>2] = $889;
												HEAP32[$881>>2] = $726;
												$890 = ((($726)) + 24|0);
												HEAP32[$890>>2] = $881;
												$891 = ((($726)) + 12|0);
												HEAP32[$891>>2] = $726;
												$892 = ((($726)) + 8|0);
												HEAP32[$892>>2] = $726;
												break;
											}
											$893 = HEAP32[$881>>2]|0;
											$894 = ($I7$0$i$i|0)==(31);
											$895 = $I7$0$i$i >>> 1;
											$896 = (25 - ($895))|0;
											$897 = $894 ? 0 : $896;
											$898 = $qsize$0$i$i << $897;
											$K8$0$i$i = $898;$T$0$i18$i = $893;
											while(1) {
												$899 = ((($T$0$i18$i)) + 4|0);
												$900 = HEAP32[$899>>2]|0;
												$901 = $900 & -8;
												$902 = ($901|0)==($qsize$0$i$i|0);
												if ($902) {
													$T$0$i18$i$lcssa = $T$0$i18$i;
													label = 281;
													break;
												}
												$903 = $K8$0$i$i >>> 31;
												$904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
												$905 = $K8$0$i$i << 1;
												$906 = HEAP32[$904>>2]|0;
												$907 = ($906|0)==(0|0);
												if ($907) {
													$$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
													label = 278;
													break;
												} else {
													$K8$0$i$i = $905;$T$0$i18$i = $906;
												}
											}
											if ((label|0) == 278) {
												$908 = HEAP32[(6868)>>2]|0;
												$909 = ($$lcssa>>>0)<($908>>>0);
												if ($909) {
													_abort();
													// unreachable;
												} else {
													HEAP32[$$lcssa>>2] = $726;
													$910 = ((($726)) + 24|0);
													HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
													$911 = ((($726)) + 12|0);
													HEAP32[$911>>2] = $726;
													$912 = ((($726)) + 8|0);
													HEAP32[$912>>2] = $726;
													break;
												}
											}
											else if ((label|0) == 281) {
												$913 = ((($T$0$i18$i$lcssa)) + 8|0);
												$914 = HEAP32[$913>>2]|0;
												$915 = HEAP32[(6868)>>2]|0;
												$916 = ($914>>>0)>=($915>>>0);
												$not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
												$917 = $916 & $not$$i20$i;
												if ($917) {
													$918 = ((($914)) + 12|0);
													HEAP32[$918>>2] = $726;
													HEAP32[$913>>2] = $726;
													$919 = ((($726)) + 8|0);
													HEAP32[$919>>2] = $914;
													$920 = ((($726)) + 12|0);
													HEAP32[$920>>2] = $T$0$i18$i$lcssa;
													$921 = ((($726)) + 24|0);
													HEAP32[$921>>2] = 0;
													break;
												} else {
													_abort();
													// unreachable;
												}
											}
										}
									} while(0);
									$1052 = ((($714)) + 8|0);
									$$0 = $1052;
									return ($$0|0);
								} else {
									$sp$0$i$i$i = (7300);
								}
							}
							while(1) {
								$922 = HEAP32[$sp$0$i$i$i>>2]|0;
								$923 = ($922>>>0)>($635>>>0);
								if (!($923)) {
									$924 = ((($sp$0$i$i$i)) + 4|0);
									$925 = HEAP32[$924>>2]|0;
									$926 = (($922) + ($925)|0);
									$927 = ($926>>>0)>($635>>>0);
									if ($927) {
										$$lcssa142 = $926;
										break;
									}
								}
								$928 = ((($sp$0$i$i$i)) + 8|0);
								$929 = HEAP32[$928>>2]|0;
								$sp$0$i$i$i = $929;
							}
							$930 = ((($$lcssa142)) + -47|0);
							$931 = ((($930)) + 8|0);
							$932 = $931;
							$933 = $932 & 7;
							$934 = ($933|0)==(0);
							$935 = (0 - ($932))|0;
							$936 = $935 & 7;
							$937 = $934 ? 0 : $936;
							$938 = (($930) + ($937)|0);
							$939 = ((($635)) + 16|0);
							$940 = ($938>>>0)<($939>>>0);
							$941 = $940 ? $635 : $938;
							$942 = ((($941)) + 8|0);
							$943 = ((($941)) + 24|0);
							$944 = (($tsize$745$i) + -40)|0;
							$945 = ((($tbase$746$i)) + 8|0);
							$946 = $945;
							$947 = $946 & 7;
							$948 = ($947|0)==(0);
							$949 = (0 - ($946))|0;
							$950 = $949 & 7;
							$951 = $948 ? 0 : $950;
							$952 = (($tbase$746$i) + ($951)|0);
							$953 = (($944) - ($951))|0;
							HEAP32[(6876)>>2] = $952;
							HEAP32[(6864)>>2] = $953;
							$954 = $953 | 1;
							$955 = ((($952)) + 4|0);
							HEAP32[$955>>2] = $954;
							$956 = (($952) + ($953)|0);
							$957 = ((($956)) + 4|0);
							HEAP32[$957>>2] = 40;
							$958 = HEAP32[(7340)>>2]|0;
							HEAP32[(6880)>>2] = $958;
							$959 = ((($941)) + 4|0);
							HEAP32[$959>>2] = 27;
							;HEAP32[$942>>2]=HEAP32[(7300)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(7300)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(7300)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(7300)+12>>2]|0;
							HEAP32[(7300)>>2] = $tbase$746$i;
							HEAP32[(7304)>>2] = $tsize$745$i;
							HEAP32[(7312)>>2] = 0;
							HEAP32[(7308)>>2] = $942;
							$p$0$i$i = $943;
							while(1) {
								$960 = ((($p$0$i$i)) + 4|0);
								HEAP32[$960>>2] = 7;
								$961 = ((($960)) + 4|0);
								$962 = ($961>>>0)<($$lcssa142>>>0);
								if ($962) {
									$p$0$i$i = $960;
								} else {
									break;
								}
							}
							$963 = ($941|0)==($635|0);
							if (!($963)) {
								$964 = $941;
								$965 = $635;
								$966 = (($964) - ($965))|0;
								$967 = HEAP32[$959>>2]|0;
								$968 = $967 & -2;
								HEAP32[$959>>2] = $968;
								$969 = $966 | 1;
								$970 = ((($635)) + 4|0);
								HEAP32[$970>>2] = $969;
								HEAP32[$941>>2] = $966;
								$971 = $966 >>> 3;
								$972 = ($966>>>0)<(256);
								if ($972) {
									$973 = $971 << 1;
									$974 = (6892 + ($973<<2)|0);
									$975 = HEAP32[1713]|0;
									$976 = 1 << $971;
									$977 = $975 & $976;
									$978 = ($977|0)==(0);
									if ($978) {
										$979 = $975 | $976;
										HEAP32[1713] = $979;
										$$pre$i$i = ((($974)) + 8|0);
										$$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
									} else {
										$980 = ((($974)) + 8|0);
										$981 = HEAP32[$980>>2]|0;
										$982 = HEAP32[(6868)>>2]|0;
										$983 = ($981>>>0)<($982>>>0);
										if ($983) {
											_abort();
											// unreachable;
										} else {
											$$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
										}
									}
									HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
									$984 = ((($F$0$i$i)) + 12|0);
									HEAP32[$984>>2] = $635;
									$985 = ((($635)) + 8|0);
									HEAP32[$985>>2] = $F$0$i$i;
									$986 = ((($635)) + 12|0);
									HEAP32[$986>>2] = $974;
									break;
								}
								$987 = $966 >>> 8;
								$988 = ($987|0)==(0);
								if ($988) {
									$I1$0$i$i = 0;
								} else {
									$989 = ($966>>>0)>(16777215);
									if ($989) {
										$I1$0$i$i = 31;
									} else {
										$990 = (($987) + 1048320)|0;
										$991 = $990 >>> 16;
										$992 = $991 & 8;
										$993 = $987 << $992;
										$994 = (($993) + 520192)|0;
										$995 = $994 >>> 16;
										$996 = $995 & 4;
										$997 = $996 | $992;
										$998 = $993 << $996;
										$999 = (($998) + 245760)|0;
										$1000 = $999 >>> 16;
										$1001 = $1000 & 2;
										$1002 = $997 | $1001;
										$1003 = (14 - ($1002))|0;
										$1004 = $998 << $1001;
										$1005 = $1004 >>> 15;
										$1006 = (($1003) + ($1005))|0;
										$1007 = $1006 << 1;
										$1008 = (($1006) + 7)|0;
										$1009 = $966 >>> $1008;
										$1010 = $1009 & 1;
										$1011 = $1010 | $1007;
										$I1$0$i$i = $1011;
									}
								}
								$1012 = (7156 + ($I1$0$i$i<<2)|0);
								$1013 = ((($635)) + 28|0);
								HEAP32[$1013>>2] = $I1$0$i$i;
								$1014 = ((($635)) + 20|0);
								HEAP32[$1014>>2] = 0;
								HEAP32[$939>>2] = 0;
								$1015 = HEAP32[(6856)>>2]|0;
								$1016 = 1 << $I1$0$i$i;
								$1017 = $1015 & $1016;
								$1018 = ($1017|0)==(0);
								if ($1018) {
									$1019 = $1015 | $1016;
									HEAP32[(6856)>>2] = $1019;
									HEAP32[$1012>>2] = $635;
									$1020 = ((($635)) + 24|0);
									HEAP32[$1020>>2] = $1012;
									$1021 = ((($635)) + 12|0);
									HEAP32[$1021>>2] = $635;
									$1022 = ((($635)) + 8|0);
									HEAP32[$1022>>2] = $635;
									break;
								}
								$1023 = HEAP32[$1012>>2]|0;
								$1024 = ($I1$0$i$i|0)==(31);
								$1025 = $I1$0$i$i >>> 1;
								$1026 = (25 - ($1025))|0;
								$1027 = $1024 ? 0 : $1026;
								$1028 = $966 << $1027;
								$K2$0$i$i = $1028;$T$0$i$i = $1023;
								while(1) {
									$1029 = ((($T$0$i$i)) + 4|0);
									$1030 = HEAP32[$1029>>2]|0;
									$1031 = $1030 & -8;
									$1032 = ($1031|0)==($966|0);
									if ($1032) {
										$T$0$i$i$lcssa = $T$0$i$i;
										label = 307;
										break;
									}
									$1033 = $K2$0$i$i >>> 31;
									$1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
									$1035 = $K2$0$i$i << 1;
									$1036 = HEAP32[$1034>>2]|0;
									$1037 = ($1036|0)==(0|0);
									if ($1037) {
										$$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
										label = 304;
										break;
									} else {
										$K2$0$i$i = $1035;$T$0$i$i = $1036;
									}
								}
								if ((label|0) == 304) {
									$1038 = HEAP32[(6868)>>2]|0;
									$1039 = ($$lcssa141>>>0)<($1038>>>0);
									if ($1039) {
										_abort();
										// unreachable;
									} else {
										HEAP32[$$lcssa141>>2] = $635;
										$1040 = ((($635)) + 24|0);
										HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
										$1041 = ((($635)) + 12|0);
										HEAP32[$1041>>2] = $635;
										$1042 = ((($635)) + 8|0);
										HEAP32[$1042>>2] = $635;
										break;
									}
								}
								else if ((label|0) == 307) {
									$1043 = ((($T$0$i$i$lcssa)) + 8|0);
									$1044 = HEAP32[$1043>>2]|0;
									$1045 = HEAP32[(6868)>>2]|0;
									$1046 = ($1044>>>0)>=($1045>>>0);
									$not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
									$1047 = $1046 & $not$$i$i;
									if ($1047) {
										$1048 = ((($1044)) + 12|0);
										HEAP32[$1048>>2] = $635;
										HEAP32[$1043>>2] = $635;
										$1049 = ((($635)) + 8|0);
										HEAP32[$1049>>2] = $1044;
										$1050 = ((($635)) + 12|0);
										HEAP32[$1050>>2] = $T$0$i$i$lcssa;
										$1051 = ((($635)) + 24|0);
										HEAP32[$1051>>2] = 0;
										break;
									} else {
										_abort();
										// unreachable;
									}
								}
							}
						}
					} while(0);
					$1053 = HEAP32[(6864)>>2]|0;
					$1054 = ($1053>>>0)>($nb$0>>>0);
					if ($1054) {
						$1055 = (($1053) - ($nb$0))|0;
						HEAP32[(6864)>>2] = $1055;
						$1056 = HEAP32[(6876)>>2]|0;
						$1057 = (($1056) + ($nb$0)|0);
						HEAP32[(6876)>>2] = $1057;
						$1058 = $1055 | 1;
						$1059 = ((($1057)) + 4|0);
						HEAP32[$1059>>2] = $1058;
						$1060 = $nb$0 | 3;
						$1061 = ((($1056)) + 4|0);
						HEAP32[$1061>>2] = $1060;
						$1062 = ((($1056)) + 8|0);
						$$0 = $1062;
						return ($$0|0);
					}
				}
				$1063 = (___errno_location()|0);
				HEAP32[$1063>>2] = 12;
				$$0 = 0;
				return ($$0|0);
			}
			function _free($mem) {
				$mem = $mem|0;
				var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
				var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
				var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
				var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
				var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
				var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
				var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
				var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
				var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
				var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
				var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
				var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
				var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
				var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
				var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
				var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
				var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
				var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($mem|0)==(0|0);
				if ($0) {
					return;
				}
				$1 = ((($mem)) + -8|0);
				$2 = HEAP32[(6868)>>2]|0;
				$3 = ($1>>>0)<($2>>>0);
				if ($3) {
					_abort();
					// unreachable;
				}
				$4 = ((($mem)) + -4|0);
				$5 = HEAP32[$4>>2]|0;
				$6 = $5 & 3;
				$7 = ($6|0)==(1);
				if ($7) {
					_abort();
					// unreachable;
				}
				$8 = $5 & -8;
				$9 = (($1) + ($8)|0);
				$10 = $5 & 1;
				$11 = ($10|0)==(0);
				do {
					if ($11) {
						$12 = HEAP32[$1>>2]|0;
						$13 = ($6|0)==(0);
						if ($13) {
							return;
						}
						$14 = (0 - ($12))|0;
						$15 = (($1) + ($14)|0);
						$16 = (($12) + ($8))|0;
						$17 = ($15>>>0)<($2>>>0);
						if ($17) {
							_abort();
							// unreachable;
						}
						$18 = HEAP32[(6872)>>2]|0;
						$19 = ($15|0)==($18|0);
						if ($19) {
							$104 = ((($9)) + 4|0);
							$105 = HEAP32[$104>>2]|0;
							$106 = $105 & 3;
							$107 = ($106|0)==(3);
							if (!($107)) {
								$p$1 = $15;$psize$1 = $16;
								break;
							}
							HEAP32[(6860)>>2] = $16;
							$108 = $105 & -2;
							HEAP32[$104>>2] = $108;
							$109 = $16 | 1;
							$110 = ((($15)) + 4|0);
							HEAP32[$110>>2] = $109;
							$111 = (($15) + ($16)|0);
							HEAP32[$111>>2] = $16;
							return;
						}
						$20 = $12 >>> 3;
						$21 = ($12>>>0)<(256);
						if ($21) {
							$22 = ((($15)) + 8|0);
							$23 = HEAP32[$22>>2]|0;
							$24 = ((($15)) + 12|0);
							$25 = HEAP32[$24>>2]|0;
							$26 = $20 << 1;
							$27 = (6892 + ($26<<2)|0);
							$28 = ($23|0)==($27|0);
							if (!($28)) {
								$29 = ($23>>>0)<($2>>>0);
								if ($29) {
									_abort();
									// unreachable;
								}
								$30 = ((($23)) + 12|0);
								$31 = HEAP32[$30>>2]|0;
								$32 = ($31|0)==($15|0);
								if (!($32)) {
									_abort();
									// unreachable;
								}
							}
							$33 = ($25|0)==($23|0);
							if ($33) {
								$34 = 1 << $20;
								$35 = $34 ^ -1;
								$36 = HEAP32[1713]|0;
								$37 = $36 & $35;
								HEAP32[1713] = $37;
								$p$1 = $15;$psize$1 = $16;
								break;
							}
							$38 = ($25|0)==($27|0);
							if ($38) {
								$$pre42 = ((($25)) + 8|0);
								$$pre$phi43Z2D = $$pre42;
							} else {
								$39 = ($25>>>0)<($2>>>0);
								if ($39) {
									_abort();
									// unreachable;
								}
								$40 = ((($25)) + 8|0);
								$41 = HEAP32[$40>>2]|0;
								$42 = ($41|0)==($15|0);
								if ($42) {
									$$pre$phi43Z2D = $40;
								} else {
									_abort();
									// unreachable;
								}
							}
							$43 = ((($23)) + 12|0);
							HEAP32[$43>>2] = $25;
							HEAP32[$$pre$phi43Z2D>>2] = $23;
							$p$1 = $15;$psize$1 = $16;
							break;
						}
						$44 = ((($15)) + 24|0);
						$45 = HEAP32[$44>>2]|0;
						$46 = ((($15)) + 12|0);
						$47 = HEAP32[$46>>2]|0;
						$48 = ($47|0)==($15|0);
						do {
							if ($48) {
								$58 = ((($15)) + 16|0);
								$59 = ((($58)) + 4|0);
								$60 = HEAP32[$59>>2]|0;
								$61 = ($60|0)==(0|0);
								if ($61) {
									$62 = HEAP32[$58>>2]|0;
									$63 = ($62|0)==(0|0);
									if ($63) {
										$R$3 = 0;
										break;
									} else {
										$R$1 = $62;$RP$1 = $58;
									}
								} else {
									$R$1 = $60;$RP$1 = $59;
								}
								while(1) {
									$64 = ((($R$1)) + 20|0);
									$65 = HEAP32[$64>>2]|0;
									$66 = ($65|0)==(0|0);
									if (!($66)) {
										$R$1 = $65;$RP$1 = $64;
										continue;
									}
									$67 = ((($R$1)) + 16|0);
									$68 = HEAP32[$67>>2]|0;
									$69 = ($68|0)==(0|0);
									if ($69) {
										$R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
										break;
									} else {
										$R$1 = $68;$RP$1 = $67;
									}
								}
								$70 = ($RP$1$lcssa>>>0)<($2>>>0);
								if ($70) {
									_abort();
									// unreachable;
								} else {
									HEAP32[$RP$1$lcssa>>2] = 0;
									$R$3 = $R$1$lcssa;
									break;
								}
							} else {
								$49 = ((($15)) + 8|0);
								$50 = HEAP32[$49>>2]|0;
								$51 = ($50>>>0)<($2>>>0);
								if ($51) {
									_abort();
									// unreachable;
								}
								$52 = ((($50)) + 12|0);
								$53 = HEAP32[$52>>2]|0;
								$54 = ($53|0)==($15|0);
								if (!($54)) {
									_abort();
									// unreachable;
								}
								$55 = ((($47)) + 8|0);
								$56 = HEAP32[$55>>2]|0;
								$57 = ($56|0)==($15|0);
								if ($57) {
									HEAP32[$52>>2] = $47;
									HEAP32[$55>>2] = $50;
									$R$3 = $47;
									break;
								} else {
									_abort();
									// unreachable;
								}
							}
						} while(0);
						$71 = ($45|0)==(0|0);
						if ($71) {
							$p$1 = $15;$psize$1 = $16;
						} else {
							$72 = ((($15)) + 28|0);
							$73 = HEAP32[$72>>2]|0;
							$74 = (7156 + ($73<<2)|0);
							$75 = HEAP32[$74>>2]|0;
							$76 = ($15|0)==($75|0);
							if ($76) {
								HEAP32[$74>>2] = $R$3;
								$cond20 = ($R$3|0)==(0|0);
								if ($cond20) {
									$77 = 1 << $73;
									$78 = $77 ^ -1;
									$79 = HEAP32[(6856)>>2]|0;
									$80 = $79 & $78;
									HEAP32[(6856)>>2] = $80;
									$p$1 = $15;$psize$1 = $16;
									break;
								}
							} else {
								$81 = HEAP32[(6868)>>2]|0;
								$82 = ($45>>>0)<($81>>>0);
								if ($82) {
									_abort();
									// unreachable;
								}
								$83 = ((($45)) + 16|0);
								$84 = HEAP32[$83>>2]|0;
								$85 = ($84|0)==($15|0);
								if ($85) {
									HEAP32[$83>>2] = $R$3;
								} else {
									$86 = ((($45)) + 20|0);
									HEAP32[$86>>2] = $R$3;
								}
								$87 = ($R$3|0)==(0|0);
								if ($87) {
									$p$1 = $15;$psize$1 = $16;
									break;
								}
							}
							$88 = HEAP32[(6868)>>2]|0;
							$89 = ($R$3>>>0)<($88>>>0);
							if ($89) {
								_abort();
								// unreachable;
							}
							$90 = ((($R$3)) + 24|0);
							HEAP32[$90>>2] = $45;
							$91 = ((($15)) + 16|0);
							$92 = HEAP32[$91>>2]|0;
							$93 = ($92|0)==(0|0);
							do {
								if (!($93)) {
									$94 = ($92>>>0)<($88>>>0);
									if ($94) {
										_abort();
										// unreachable;
									} else {
										$95 = ((($R$3)) + 16|0);
										HEAP32[$95>>2] = $92;
										$96 = ((($92)) + 24|0);
										HEAP32[$96>>2] = $R$3;
										break;
									}
								}
							} while(0);
							$97 = ((($91)) + 4|0);
							$98 = HEAP32[$97>>2]|0;
							$99 = ($98|0)==(0|0);
							if ($99) {
								$p$1 = $15;$psize$1 = $16;
							} else {
								$100 = HEAP32[(6868)>>2]|0;
								$101 = ($98>>>0)<($100>>>0);
								if ($101) {
									_abort();
									// unreachable;
								} else {
									$102 = ((($R$3)) + 20|0);
									HEAP32[$102>>2] = $98;
									$103 = ((($98)) + 24|0);
									HEAP32[$103>>2] = $R$3;
									$p$1 = $15;$psize$1 = $16;
									break;
								}
							}
						}
					} else {
						$p$1 = $1;$psize$1 = $8;
					}
				} while(0);
				$112 = ($p$1>>>0)<($9>>>0);
				if (!($112)) {
					_abort();
					// unreachable;
				}
				$113 = ((($9)) + 4|0);
				$114 = HEAP32[$113>>2]|0;
				$115 = $114 & 1;
				$116 = ($115|0)==(0);
				if ($116) {
					_abort();
					// unreachable;
				}
				$117 = $114 & 2;
				$118 = ($117|0)==(0);
				if ($118) {
					$119 = HEAP32[(6876)>>2]|0;
					$120 = ($9|0)==($119|0);
					if ($120) {
						$121 = HEAP32[(6864)>>2]|0;
						$122 = (($121) + ($psize$1))|0;
						HEAP32[(6864)>>2] = $122;
						HEAP32[(6876)>>2] = $p$1;
						$123 = $122 | 1;
						$124 = ((($p$1)) + 4|0);
						HEAP32[$124>>2] = $123;
						$125 = HEAP32[(6872)>>2]|0;
						$126 = ($p$1|0)==($125|0);
						if (!($126)) {
							return;
						}
						HEAP32[(6872)>>2] = 0;
						HEAP32[(6860)>>2] = 0;
						return;
					}
					$127 = HEAP32[(6872)>>2]|0;
					$128 = ($9|0)==($127|0);
					if ($128) {
						$129 = HEAP32[(6860)>>2]|0;
						$130 = (($129) + ($psize$1))|0;
						HEAP32[(6860)>>2] = $130;
						HEAP32[(6872)>>2] = $p$1;
						$131 = $130 | 1;
						$132 = ((($p$1)) + 4|0);
						HEAP32[$132>>2] = $131;
						$133 = (($p$1) + ($130)|0);
						HEAP32[$133>>2] = $130;
						return;
					}
					$134 = $114 & -8;
					$135 = (($134) + ($psize$1))|0;
					$136 = $114 >>> 3;
					$137 = ($114>>>0)<(256);
					do {
						if ($137) {
							$138 = ((($9)) + 8|0);
							$139 = HEAP32[$138>>2]|0;
							$140 = ((($9)) + 12|0);
							$141 = HEAP32[$140>>2]|0;
							$142 = $136 << 1;
							$143 = (6892 + ($142<<2)|0);
							$144 = ($139|0)==($143|0);
							if (!($144)) {
								$145 = HEAP32[(6868)>>2]|0;
								$146 = ($139>>>0)<($145>>>0);
								if ($146) {
									_abort();
									// unreachable;
								}
								$147 = ((($139)) + 12|0);
								$148 = HEAP32[$147>>2]|0;
								$149 = ($148|0)==($9|0);
								if (!($149)) {
									_abort();
									// unreachable;
								}
							}
							$150 = ($141|0)==($139|0);
							if ($150) {
								$151 = 1 << $136;
								$152 = $151 ^ -1;
								$153 = HEAP32[1713]|0;
								$154 = $153 & $152;
								HEAP32[1713] = $154;
								break;
							}
							$155 = ($141|0)==($143|0);
							if ($155) {
								$$pre40 = ((($141)) + 8|0);
								$$pre$phi41Z2D = $$pre40;
							} else {
								$156 = HEAP32[(6868)>>2]|0;
								$157 = ($141>>>0)<($156>>>0);
								if ($157) {
									_abort();
									// unreachable;
								}
								$158 = ((($141)) + 8|0);
								$159 = HEAP32[$158>>2]|0;
								$160 = ($159|0)==($9|0);
								if ($160) {
									$$pre$phi41Z2D = $158;
								} else {
									_abort();
									// unreachable;
								}
							}
							$161 = ((($139)) + 12|0);
							HEAP32[$161>>2] = $141;
							HEAP32[$$pre$phi41Z2D>>2] = $139;
						} else {
							$162 = ((($9)) + 24|0);
							$163 = HEAP32[$162>>2]|0;
							$164 = ((($9)) + 12|0);
							$165 = HEAP32[$164>>2]|0;
							$166 = ($165|0)==($9|0);
							do {
								if ($166) {
									$177 = ((($9)) + 16|0);
									$178 = ((($177)) + 4|0);
									$179 = HEAP32[$178>>2]|0;
									$180 = ($179|0)==(0|0);
									if ($180) {
										$181 = HEAP32[$177>>2]|0;
										$182 = ($181|0)==(0|0);
										if ($182) {
											$R8$3 = 0;
											break;
										} else {
											$R8$1 = $181;$RP10$1 = $177;
										}
									} else {
										$R8$1 = $179;$RP10$1 = $178;
									}
									while(1) {
										$183 = ((($R8$1)) + 20|0);
										$184 = HEAP32[$183>>2]|0;
										$185 = ($184|0)==(0|0);
										if (!($185)) {
											$R8$1 = $184;$RP10$1 = $183;
											continue;
										}
										$186 = ((($R8$1)) + 16|0);
										$187 = HEAP32[$186>>2]|0;
										$188 = ($187|0)==(0|0);
										if ($188) {
											$R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
											break;
										} else {
											$R8$1 = $187;$RP10$1 = $186;
										}
									}
									$189 = HEAP32[(6868)>>2]|0;
									$190 = ($RP10$1$lcssa>>>0)<($189>>>0);
									if ($190) {
										_abort();
										// unreachable;
									} else {
										HEAP32[$RP10$1$lcssa>>2] = 0;
										$R8$3 = $R8$1$lcssa;
										break;
									}
								} else {
									$167 = ((($9)) + 8|0);
									$168 = HEAP32[$167>>2]|0;
									$169 = HEAP32[(6868)>>2]|0;
									$170 = ($168>>>0)<($169>>>0);
									if ($170) {
										_abort();
										// unreachable;
									}
									$171 = ((($168)) + 12|0);
									$172 = HEAP32[$171>>2]|0;
									$173 = ($172|0)==($9|0);
									if (!($173)) {
										_abort();
										// unreachable;
									}
									$174 = ((($165)) + 8|0);
									$175 = HEAP32[$174>>2]|0;
									$176 = ($175|0)==($9|0);
									if ($176) {
										HEAP32[$171>>2] = $165;
										HEAP32[$174>>2] = $168;
										$R8$3 = $165;
										break;
									} else {
										_abort();
										// unreachable;
									}
								}
							} while(0);
							$191 = ($163|0)==(0|0);
							if (!($191)) {
								$192 = ((($9)) + 28|0);
								$193 = HEAP32[$192>>2]|0;
								$194 = (7156 + ($193<<2)|0);
								$195 = HEAP32[$194>>2]|0;
								$196 = ($9|0)==($195|0);
								if ($196) {
									HEAP32[$194>>2] = $R8$3;
									$cond21 = ($R8$3|0)==(0|0);
									if ($cond21) {
										$197 = 1 << $193;
										$198 = $197 ^ -1;
										$199 = HEAP32[(6856)>>2]|0;
										$200 = $199 & $198;
										HEAP32[(6856)>>2] = $200;
										break;
									}
								} else {
									$201 = HEAP32[(6868)>>2]|0;
									$202 = ($163>>>0)<($201>>>0);
									if ($202) {
										_abort();
										// unreachable;
									}
									$203 = ((($163)) + 16|0);
									$204 = HEAP32[$203>>2]|0;
									$205 = ($204|0)==($9|0);
									if ($205) {
										HEAP32[$203>>2] = $R8$3;
									} else {
										$206 = ((($163)) + 20|0);
										HEAP32[$206>>2] = $R8$3;
									}
									$207 = ($R8$3|0)==(0|0);
									if ($207) {
										break;
									}
								}
								$208 = HEAP32[(6868)>>2]|0;
								$209 = ($R8$3>>>0)<($208>>>0);
								if ($209) {
									_abort();
									// unreachable;
								}
								$210 = ((($R8$3)) + 24|0);
								HEAP32[$210>>2] = $163;
								$211 = ((($9)) + 16|0);
								$212 = HEAP32[$211>>2]|0;
								$213 = ($212|0)==(0|0);
								do {
									if (!($213)) {
										$214 = ($212>>>0)<($208>>>0);
										if ($214) {
											_abort();
											// unreachable;
										} else {
											$215 = ((($R8$3)) + 16|0);
											HEAP32[$215>>2] = $212;
											$216 = ((($212)) + 24|0);
											HEAP32[$216>>2] = $R8$3;
											break;
										}
									}
								} while(0);
								$217 = ((($211)) + 4|0);
								$218 = HEAP32[$217>>2]|0;
								$219 = ($218|0)==(0|0);
								if (!($219)) {
									$220 = HEAP32[(6868)>>2]|0;
									$221 = ($218>>>0)<($220>>>0);
									if ($221) {
										_abort();
										// unreachable;
									} else {
										$222 = ((($R8$3)) + 20|0);
										HEAP32[$222>>2] = $218;
										$223 = ((($218)) + 24|0);
										HEAP32[$223>>2] = $R8$3;
										break;
									}
								}
							}
						}
					} while(0);
					$224 = $135 | 1;
					$225 = ((($p$1)) + 4|0);
					HEAP32[$225>>2] = $224;
					$226 = (($p$1) + ($135)|0);
					HEAP32[$226>>2] = $135;
					$227 = HEAP32[(6872)>>2]|0;
					$228 = ($p$1|0)==($227|0);
					if ($228) {
						HEAP32[(6860)>>2] = $135;
						return;
					} else {
						$psize$2 = $135;
					}
				} else {
					$229 = $114 & -2;
					HEAP32[$113>>2] = $229;
					$230 = $psize$1 | 1;
					$231 = ((($p$1)) + 4|0);
					HEAP32[$231>>2] = $230;
					$232 = (($p$1) + ($psize$1)|0);
					HEAP32[$232>>2] = $psize$1;
					$psize$2 = $psize$1;
				}
				$233 = $psize$2 >>> 3;
				$234 = ($psize$2>>>0)<(256);
				if ($234) {
					$235 = $233 << 1;
					$236 = (6892 + ($235<<2)|0);
					$237 = HEAP32[1713]|0;
					$238 = 1 << $233;
					$239 = $237 & $238;
					$240 = ($239|0)==(0);
					if ($240) {
						$241 = $237 | $238;
						HEAP32[1713] = $241;
						$$pre = ((($236)) + 8|0);
						$$pre$phiZ2D = $$pre;$F18$0 = $236;
					} else {
						$242 = ((($236)) + 8|0);
						$243 = HEAP32[$242>>2]|0;
						$244 = HEAP32[(6868)>>2]|0;
						$245 = ($243>>>0)<($244>>>0);
						if ($245) {
							_abort();
							// unreachable;
						} else {
							$$pre$phiZ2D = $242;$F18$0 = $243;
						}
					}
					HEAP32[$$pre$phiZ2D>>2] = $p$1;
					$246 = ((($F18$0)) + 12|0);
					HEAP32[$246>>2] = $p$1;
					$247 = ((($p$1)) + 8|0);
					HEAP32[$247>>2] = $F18$0;
					$248 = ((($p$1)) + 12|0);
					HEAP32[$248>>2] = $236;
					return;
				}
				$249 = $psize$2 >>> 8;
				$250 = ($249|0)==(0);
				if ($250) {
					$I20$0 = 0;
				} else {
					$251 = ($psize$2>>>0)>(16777215);
					if ($251) {
						$I20$0 = 31;
					} else {
						$252 = (($249) + 1048320)|0;
						$253 = $252 >>> 16;
						$254 = $253 & 8;
						$255 = $249 << $254;
						$256 = (($255) + 520192)|0;
						$257 = $256 >>> 16;
						$258 = $257 & 4;
						$259 = $258 | $254;
						$260 = $255 << $258;
						$261 = (($260) + 245760)|0;
						$262 = $261 >>> 16;
						$263 = $262 & 2;
						$264 = $259 | $263;
						$265 = (14 - ($264))|0;
						$266 = $260 << $263;
						$267 = $266 >>> 15;
						$268 = (($265) + ($267))|0;
						$269 = $268 << 1;
						$270 = (($268) + 7)|0;
						$271 = $psize$2 >>> $270;
						$272 = $271 & 1;
						$273 = $272 | $269;
						$I20$0 = $273;
					}
				}
				$274 = (7156 + ($I20$0<<2)|0);
				$275 = ((($p$1)) + 28|0);
				HEAP32[$275>>2] = $I20$0;
				$276 = ((($p$1)) + 16|0);
				$277 = ((($p$1)) + 20|0);
				HEAP32[$277>>2] = 0;
				HEAP32[$276>>2] = 0;
				$278 = HEAP32[(6856)>>2]|0;
				$279 = 1 << $I20$0;
				$280 = $278 & $279;
				$281 = ($280|0)==(0);
				do {
					if ($281) {
						$282 = $278 | $279;
						HEAP32[(6856)>>2] = $282;
						HEAP32[$274>>2] = $p$1;
						$283 = ((($p$1)) + 24|0);
						HEAP32[$283>>2] = $274;
						$284 = ((($p$1)) + 12|0);
						HEAP32[$284>>2] = $p$1;
						$285 = ((($p$1)) + 8|0);
						HEAP32[$285>>2] = $p$1;
					} else {
						$286 = HEAP32[$274>>2]|0;
						$287 = ($I20$0|0)==(31);
						$288 = $I20$0 >>> 1;
						$289 = (25 - ($288))|0;
						$290 = $287 ? 0 : $289;
						$291 = $psize$2 << $290;
						$K21$0 = $291;$T$0 = $286;
						while(1) {
							$292 = ((($T$0)) + 4|0);
							$293 = HEAP32[$292>>2]|0;
							$294 = $293 & -8;
							$295 = ($294|0)==($psize$2|0);
							if ($295) {
								$T$0$lcssa = $T$0;
								label = 130;
								break;
							}
							$296 = $K21$0 >>> 31;
							$297 = (((($T$0)) + 16|0) + ($296<<2)|0);
							$298 = $K21$0 << 1;
							$299 = HEAP32[$297>>2]|0;
							$300 = ($299|0)==(0|0);
							if ($300) {
								$$lcssa = $297;$T$0$lcssa48 = $T$0;
								label = 127;
								break;
							} else {
								$K21$0 = $298;$T$0 = $299;
							}
						}
						if ((label|0) == 127) {
							$301 = HEAP32[(6868)>>2]|0;
							$302 = ($$lcssa>>>0)<($301>>>0);
							if ($302) {
								_abort();
								// unreachable;
							} else {
								HEAP32[$$lcssa>>2] = $p$1;
								$303 = ((($p$1)) + 24|0);
								HEAP32[$303>>2] = $T$0$lcssa48;
								$304 = ((($p$1)) + 12|0);
								HEAP32[$304>>2] = $p$1;
								$305 = ((($p$1)) + 8|0);
								HEAP32[$305>>2] = $p$1;
								break;
							}
						}
						else if ((label|0) == 130) {
							$306 = ((($T$0$lcssa)) + 8|0);
							$307 = HEAP32[$306>>2]|0;
							$308 = HEAP32[(6868)>>2]|0;
							$309 = ($307>>>0)>=($308>>>0);
							$not$ = ($T$0$lcssa>>>0)>=($308>>>0);
							$310 = $309 & $not$;
							if ($310) {
								$311 = ((($307)) + 12|0);
								HEAP32[$311>>2] = $p$1;
								HEAP32[$306>>2] = $p$1;
								$312 = ((($p$1)) + 8|0);
								HEAP32[$312>>2] = $307;
								$313 = ((($p$1)) + 12|0);
								HEAP32[$313>>2] = $T$0$lcssa;
								$314 = ((($p$1)) + 24|0);
								HEAP32[$314>>2] = 0;
								break;
							} else {
								_abort();
								// unreachable;
							}
						}
					}
				} while(0);
				$315 = HEAP32[(6884)>>2]|0;
				$316 = (($315) + -1)|0;
				HEAP32[(6884)>>2] = $316;
				$317 = ($316|0)==(0);
				if ($317) {
					$sp$0$in$i = (7308);
				} else {
					return;
				}
				while(1) {
					$sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
					$318 = ($sp$0$i|0)==(0|0);
					$319 = ((($sp$0$i)) + 8|0);
					if ($318) {
						break;
					} else {
						$sp$0$in$i = $319;
					}
				}
				HEAP32[(6884)>>2] = -1;
				return;
			}
			function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (___cxa_allocate_exception(8)|0);
				__THREW__ = 0;
				invoke_vii(211,($0|0),(6128|0));
				$1 = __THREW__; __THREW__ = 0;
				$2 = $1&1;
				if ($2) {
					$3 = ___cxa_find_matching_catch_2()|0;
					$4 = tempRet0;
					___cxa_free_exception(($0|0));
					___resumeException($3|0);
					// unreachable;
				} else {
					HEAP32[$0>>2] = (848);
					___cxa_throw(($0|0),(112|0),(22|0));
					// unreachable;
				}
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
				$this = $this|0;
				$__s = $__s|0;
				$__sz = $__sz|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($__sz>>>0)>(4294967279);
				if ($0) {
					__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
					// unreachable;
				}
				$1 = ($__sz>>>0)<(11);
				if ($1) {
					$2 = $__sz << 1;
					$3 = $2&255;
					HEAP8[$this>>0] = $3;
					$4 = ((($this)) + 1|0);
					$__p$0 = $4;
				} else {
					$5 = (($__sz) + 16)|0;
					$6 = $5 & -16;
					$7 = (__Znwj($6)|0);
					$8 = ((($this)) + 8|0);
					HEAP32[$8>>2] = $7;
					$9 = $6 | 1;
					HEAP32[$this>>2] = $9;
					$10 = ((($this)) + 4|0);
					HEAP32[$10>>2] = $__sz;
					$__p$0 = $7;
				}
				_memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
				$11 = (($__p$0) + ($__sz)|0);
				HEAP8[$11>>0] = 0;
				return;
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP8[$this>>0]|0;
				$1 = $0 & 1;
				$2 = ($1<<24>>24)==(0);
				if (!($2)) {
					$3 = ((($this)) + 8|0);
					$4 = HEAP32[$3>>2]|0;
					__ZdlPv($4);
				}
				return;
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
				$this = $this|0;
				$__old_cap = $__old_cap|0;
				$__delta_cap = $__delta_cap|0;
				$__old_sz = $__old_sz|0;
				$__n_copy = $__n_copy|0;
				$__n_del = $__n_del|0;
				$__n_add = $__n_add|0;
				$__p_new_stuff = $__p_new_stuff|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (-18 - ($__old_cap))|0;
				$1 = ($0>>>0)<($__delta_cap>>>0);
				if ($1) {
					__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
					// unreachable;
				}
				$2 = HEAP8[$this>>0]|0;
				$3 = $2 & 1;
				$4 = ($3<<24>>24)==(0);
				if ($4) {
					$7 = ((($this)) + 1|0);
					$20 = $7;
				} else {
					$5 = ((($this)) + 8|0);
					$6 = HEAP32[$5>>2]|0;
					$20 = $6;
				}
				$8 = ($__old_cap>>>0)<(2147483623);
				if ($8) {
					$9 = (($__delta_cap) + ($__old_cap))|0;
					$10 = $__old_cap << 1;
					$11 = ($9>>>0)<($10>>>0);
					$12 = $11 ? $10 : $9;
					$13 = ($12>>>0)<(11);
					$14 = (($12) + 16)|0;
					$15 = $14 & -16;
					$16 = $13 ? 11 : $15;
					$17 = $16;
				} else {
					$17 = -17;
				}
				$18 = (__Znwj($17)|0);
				$19 = ($__n_copy|0)==(0);
				if (!($19)) {
					_memcpy(($18|0),($20|0),($__n_copy|0))|0;
				}
				$21 = ($__n_add|0)==(0);
				if (!($21)) {
					$22 = (($18) + ($__n_copy)|0);
					_memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
				}
				$23 = (($__old_sz) - ($__n_del))|0;
				$24 = ($23|0)==($__n_copy|0);
				if (!($24)) {
					$25 = (($23) - ($__n_copy))|0;
					$26 = (($18) + ($__n_copy)|0);
					$27 = (($26) + ($__n_add)|0);
					$28 = (($20) + ($__n_copy)|0);
					$29 = (($28) + ($__n_del)|0);
					_memcpy(($27|0),($29|0),($25|0))|0;
				}
				$30 = ($__old_cap|0)==(10);
				if (!($30)) {
					__ZdlPv($20);
				}
				$31 = ((($this)) + 8|0);
				HEAP32[$31>>2] = $18;
				$32 = $17 | 1;
				HEAP32[$this>>2] = $32;
				$33 = (($23) + ($__n_add))|0;
				$34 = ((($this)) + 4|0);
				HEAP32[$34>>2] = $33;
				$35 = (($18) + ($33)|0);
				HEAP8[$35>>0] = 0;
				return;
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
				$this = $this|0;
				$__old_cap = $__old_cap|0;
				$__delta_cap = $__delta_cap|0;
				$__old_sz = $__old_sz|0;
				$__n_copy = $__n_copy|0;
				$__n_del = $__n_del|0;
				$__n_add = $__n_add|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (-17 - ($__old_cap))|0;
				$1 = ($0>>>0)<($__delta_cap>>>0);
				if ($1) {
					__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
					// unreachable;
				}
				$2 = HEAP8[$this>>0]|0;
				$3 = $2 & 1;
				$4 = ($3<<24>>24)==(0);
				if ($4) {
					$7 = ((($this)) + 1|0);
					$20 = $7;
				} else {
					$5 = ((($this)) + 8|0);
					$6 = HEAP32[$5>>2]|0;
					$20 = $6;
				}
				$8 = ($__old_cap>>>0)<(2147483623);
				if ($8) {
					$9 = (($__delta_cap) + ($__old_cap))|0;
					$10 = $__old_cap << 1;
					$11 = ($9>>>0)<($10>>>0);
					$12 = $11 ? $10 : $9;
					$13 = ($12>>>0)<(11);
					$14 = (($12) + 16)|0;
					$15 = $14 & -16;
					$16 = $13 ? 11 : $15;
					$17 = $16;
				} else {
					$17 = -17;
				}
				$18 = (__Znwj($17)|0);
				$19 = ($__n_copy|0)==(0);
				if (!($19)) {
					_memcpy(($18|0),($20|0),($__n_copy|0))|0;
				}
				$21 = (($__old_sz) - ($__n_del))|0;
				$22 = ($21|0)==($__n_copy|0);
				if (!($22)) {
					$23 = (($21) - ($__n_copy))|0;
					$24 = (($18) + ($__n_copy)|0);
					$25 = (($24) + ($__n_add)|0);
					$26 = (($20) + ($__n_copy)|0);
					$27 = (($26) + ($__n_del)|0);
					_memcpy(($25|0),($27|0),($23|0))|0;
				}
				$28 = ($__old_cap|0)==(10);
				if (!($28)) {
					__ZdlPv($20);
				}
				$29 = ((($this)) + 8|0);
				HEAP32[$29>>2] = $18;
				$30 = $17 | 1;
				HEAP32[$this>>2] = $30;
				return;
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
				$this = $this|0;
				$__s = $__s|0;
				$__n = $__n|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP8[$this>>0]|0;
				$1 = $0 & 1;
				$2 = ($1<<24>>24)==(0);
				if ($2) {
					$15 = 10;$7 = $0;
				} else {
					$3 = HEAP32[$this>>2]|0;
					$4 = $3 & -2;
					$phitmp$i = (($4) + -1)|0;
					$5 = $3&255;
					$15 = $phitmp$i;$7 = $5;
				}
				$6 = $7 & 1;
				$8 = ($6<<24>>24)==(0);
				if ($8) {
					$11 = $7&255;
					$12 = $11 >>> 1;
					$14 = $12;
				} else {
					$9 = ((($this)) + 4|0);
					$10 = HEAP32[$9>>2]|0;
					$14 = $10;
				}
				$13 = (($15) - ($14))|0;
				$16 = ($13>>>0)<($__n>>>0);
				if ($16) {
					$33 = (($__n) - ($15))|0;
					$34 = (($33) + ($14))|0;
					__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
				} else {
					$17 = ($__n|0)==(0);
					if (!($17)) {
						$18 = $7 & 1;
						$19 = ($18<<24>>24)==(0);
						if ($19) {
							$22 = ((($this)) + 1|0);
							$24 = $22;
						} else {
							$20 = ((($this)) + 8|0);
							$21 = HEAP32[$20>>2]|0;
							$24 = $21;
						}
						$23 = (($24) + ($14)|0);
						_memcpy(($23|0),($__s|0),($__n|0))|0;
						$25 = (($14) + ($__n))|0;
						$26 = HEAP8[$this>>0]|0;
						$27 = $26 & 1;
						$28 = ($27<<24>>24)==(0);
						if ($28) {
							$30 = $25 << 1;
							$31 = $30&255;
							HEAP8[$this>>0] = $31;
						} else {
							$29 = ((($this)) + 4|0);
							HEAP32[$29>>2] = $25;
						}
						$32 = (($24) + ($25)|0);
						HEAP8[$32>>0] = 0;
					}
				}
				return ($this|0);
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
				$this = $this|0;
				$__s = $__s|0;
				var $0 = 0, $1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_strlen($__s)|0);
				$1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
				return ($1|0);
			}
			function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
				$this = $this|0;
				$__c = $__c|0;
				var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
				var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__sz$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP8[$this>>0]|0;
				$1 = $0 & 1;
				$2 = ($1<<24>>24)!=(0);
				if ($2) {
					$5 = HEAP32[$this>>2]|0;
					$6 = $5 & -2;
					$7 = (($6) + -1)|0;
					$8 = ((($this)) + 4|0);
					$9 = HEAP32[$8>>2]|0;
					$__cap$0 = $7;$__sz$0 = $9;
				} else {
					$3 = $0&255;
					$4 = $3 >>> 1;
					$__cap$0 = 10;$__sz$0 = $4;
				}
				$10 = ($__sz$0|0)==($__cap$0|0);
				if ($10) {
					__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
					$11 = HEAP8[$this>>0]|0;
					$12 = $11 & 1;
					$13 = ($12<<24>>24)==(0);
					if ($13) {
						label = 7;
					} else {
						label = 8;
					}
				} else {
					if ($2) {
						label = 8;
					} else {
						label = 7;
					}
				}
				if ((label|0) == 7) {
					$14 = ((($this)) + 1|0);
					$15 = $__sz$0 << 1;
					$16 = (($15) + 2)|0;
					$17 = $16&255;
					HEAP8[$this>>0] = $17;
					$$pn = $14;
				}
				else if ((label|0) == 8) {
					$18 = ((($this)) + 8|0);
					$19 = HEAP32[$18>>2]|0;
					$20 = (($__sz$0) + 1)|0;
					$21 = ((($this)) + 4|0);
					HEAP32[$21>>2] = $20;
					$$pn = $19;
				}
				$__p$0 = (($$pn) + ($__sz$0)|0);
				HEAP8[$__p$0>>0] = $__c;
				$22 = ((($__p$0)) + 1|0);
				HEAP8[$22>>0] = 0;
				return;
			}
			function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (___cxa_allocate_exception(8)|0);
				__THREW__ = 0;
				invoke_vii(211,($0|0),(6141|0));
				$1 = __THREW__; __THREW__ = 0;
				$2 = $1&1;
				if ($2) {
					$3 = ___cxa_find_matching_catch_2()|0;
					$4 = tempRet0;
					___cxa_free_exception(($0|0));
					___resumeException($3|0);
					// unreachable;
				} else {
					HEAP32[$0>>2] = (848);
					___cxa_throw(($0|0),(112|0),(22|0));
					// unreachable;
				}
			}
			function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
				$this = $this|0;
				$msg = $msg|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = (_strlen($msg)|0);
				$1 = (($0) + 13)|0;
				$2 = (__Znwj($1)|0);
				HEAP32[$2>>2] = $0;
				$3 = ((($2)) + 4|0);
				HEAP32[$3>>2] = $0;
				$4 = ((($2)) + 8|0);
				HEAP32[$4>>2] = 0;
				$5 = ((($2)) + 12|0);
				$6 = (($0) + 1)|0;
				_memcpy(($5|0),($msg|0),($6|0))|0;
				HEAP32[$this>>2] = $5;
				return;
			}
			function __ZNSt11logic_errorC2EPKc($this,$msg) {
				$this = $this|0;
				$msg = $msg|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = (828);
				$0 = ((($this)) + 4|0);
				__THREW__ = 0;
				invoke_vii(212,($0|0),($msg|0));
				$1 = __THREW__; __THREW__ = 0;
				$2 = $1&1;
				if ($2) {
					$3 = ___cxa_find_matching_catch_2()|0;
					$4 = tempRet0;
					___resumeException($3|0);
					// unreachable;
				} else {
					return;
				}
			}
			function __ZL25default_terminate_handlerv() {
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
				var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer10 = sp + 32|0;
				$vararg_buffer7 = sp + 24|0;
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer = sp;
				$thrown_object = sp + 36|0;
				$0 = (___cxa_get_globals_fast()|0);
				$1 = ($0|0)==(0|0);
				if (!($1)) {
					$2 = HEAP32[$0>>2]|0;
					$3 = ($2|0)==(0|0);
					if (!($3)) {
						$4 = ((($2)) + 80|0);
						$5 = ((($2)) + 48|0);
						$6 = $5;
						$7 = $6;
						$8 = HEAP32[$7>>2]|0;
						$9 = (($6) + 4)|0;
						$10 = $9;
						$11 = HEAP32[$10>>2]|0;
						$12 = $8 & -256;
						$13 = ($12|0)==(1126902528);
						$14 = ($11|0)==(1129074247);
						$15 = $13 & $14;
						if (!($15)) {
							$36 = HEAP32[199]|0;
							HEAP32[$vararg_buffer7>>2] = $36;
							_abort_message(6525,$vararg_buffer7);
							// unreachable;
						}
						$16 = ($8|0)==(1126902529);
						$17 = ($11|0)==(1129074247);
						$18 = $16 & $17;
						if ($18) {
							$19 = ((($2)) + 44|0);
							$20 = HEAP32[$19>>2]|0;
							$21 = $20;
						} else {
							$21 = $4;
						}
						HEAP32[$thrown_object>>2] = $21;
						$22 = HEAP32[$2>>2]|0;
						$23 = ((($22)) + 4|0);
						$24 = HEAP32[$23>>2]|0;
						$25 = HEAP32[4]|0;
						$26 = ((($25)) + 16|0);
						$27 = HEAP32[$26>>2]|0;
						$28 = (FUNCTION_TABLE_iiii[$27 & 255](16,$22,$thrown_object)|0);
						if ($28) {
							$29 = HEAP32[$thrown_object>>2]|0;
							$30 = HEAP32[199]|0;
							$31 = HEAP32[$29>>2]|0;
							$32 = ((($31)) + 8|0);
							$33 = HEAP32[$32>>2]|0;
							$34 = (FUNCTION_TABLE_ii[$33 & 255]($29)|0);
							HEAP32[$vararg_buffer>>2] = $30;
							$vararg_ptr1 = ((($vararg_buffer)) + 4|0);
							HEAP32[$vararg_ptr1>>2] = $24;
							$vararg_ptr2 = ((($vararg_buffer)) + 8|0);
							HEAP32[$vararg_ptr2>>2] = $34;
							_abort_message(6439,$vararg_buffer);
							// unreachable;
						} else {
							$35 = HEAP32[199]|0;
							HEAP32[$vararg_buffer3>>2] = $35;
							$vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
							HEAP32[$vararg_ptr6>>2] = $24;
							_abort_message(6484,$vararg_buffer3);
							// unreachable;
						}
					}
				}
				_abort_message(6563,$vararg_buffer10);
				// unreachable;
			}
			function ___cxa_get_globals_fast() {
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$0 = (_pthread_once((7348|0),(213|0))|0);
				$1 = ($0|0)==(0);
				if ($1) {
					$2 = HEAP32[1838]|0;
					$3 = (_pthread_getspecific(($2|0))|0);
					STACKTOP = sp;return ($3|0);
				} else {
					_abort_message(6251,$vararg_buffer);
					// unreachable;
				}
				return (0)|0;
			}
			function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
				var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				$0 = (_pthread_key_create((7352|0),(214|0))|0);
				$1 = ($0|0)==(0);
				if ($1) {
					STACKTOP = sp;return;
				} else {
					_abort_message(6201,$vararg_buffer);
					// unreachable;
				}
			}
			function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
				$p = $p|0;
				var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer = sp;
				_free($p);
				$0 = HEAP32[1838]|0;
				$1 = (_pthread_setspecific(($0|0),(0|0))|0);
				$2 = ($1|0)==(0);
				if ($2) {
					STACKTOP = sp;return;
				} else {
					_abort_message(6148,$vararg_buffer);
					// unreachable;
				}
			}
			function _abort_message($format,$varargs) {
				$format = $format|0;
				$varargs = $varargs|0;
				var $0 = 0, $list = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$list = sp;
				HEAP32[$list>>2] = $varargs;
				$0 = HEAP32[90]|0;
				(_vfprintf($0,$format,$list)|0);
				(_fputc(10,$0)|0);
				_abort();
				// unreachable;
			}
			function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZNSt9type_infoD2Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZdlPv($this);
				return;
			}
			function __ZdlPv($ptr) {
				$ptr = $ptr|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				_free($ptr);
				return;
			}
			function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
				$this = $this|0;
				$thrown_type = $thrown_type|0;
				$adjustedPtr = $adjustedPtr|0;
				var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
				var label = 0, sp = 0, stop = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$info = sp;
				$0 = ($this|0)==($thrown_type|0);
				if ($0) {
					$$2 = 1;
				} else {
					$1 = ($thrown_type|0)==(0|0);
					if ($1) {
						$$2 = 0;
					} else {
						$2 = (___dynamic_cast($thrown_type,56,24,0)|0);
						$3 = ($2|0)==(0|0);
						if ($3) {
							$$2 = 0;
						} else {
							dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
							HEAP32[$info>>2] = $2;
							$4 = ((($info)) + 8|0);
							HEAP32[$4>>2] = $this;
							$5 = ((($info)) + 12|0);
							HEAP32[$5>>2] = -1;
							$6 = ((($info)) + 48|0);
							HEAP32[$6>>2] = 1;
							$7 = HEAP32[$2>>2]|0;
							$8 = ((($7)) + 28|0);
							$9 = HEAP32[$8>>2]|0;
							$10 = HEAP32[$adjustedPtr>>2]|0;
							FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
							$11 = ((($info)) + 24|0);
							$12 = HEAP32[$11>>2]|0;
							$13 = ($12|0)==(1);
							if ($13) {
								$14 = ((($info)) + 16|0);
								$15 = HEAP32[$14>>2]|0;
								HEAP32[$adjustedPtr>>2] = $15;
								$$0 = 1;
							} else {
								$$0 = 0;
							}
							$$2 = $$0;
						}
					}
				}
				STACKTOP = sp;return ($$2|0);
			}
			function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
				$static_ptr = $static_ptr|0;
				$static_type = $static_type|0;
				$dst_type = $dst_type|0;
				$src2dst_offset = $src2dst_offset|0;
				var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
				var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
				var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$info = sp;
				$0 = HEAP32[$static_ptr>>2]|0;
				$1 = ((($0)) + -8|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = (($static_ptr) + ($2)|0);
				$4 = ((($0)) + -4|0);
				$5 = HEAP32[$4>>2]|0;
				HEAP32[$info>>2] = $dst_type;
				$6 = ((($info)) + 4|0);
				HEAP32[$6>>2] = $static_ptr;
				$7 = ((($info)) + 8|0);
				HEAP32[$7>>2] = $static_type;
				$8 = ((($info)) + 12|0);
				HEAP32[$8>>2] = $src2dst_offset;
				$9 = ((($info)) + 16|0);
				$10 = ((($info)) + 20|0);
				$11 = ((($info)) + 24|0);
				$12 = ((($info)) + 28|0);
				$13 = ((($info)) + 32|0);
				$14 = ((($info)) + 40|0);
				$15 = ($5|0)==($dst_type|0);
				dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
				L1: do {
					if ($15) {
						$16 = ((($info)) + 48|0);
						HEAP32[$16>>2] = 1;
						$17 = HEAP32[$dst_type>>2]|0;
						$18 = ((($17)) + 20|0);
						$19 = HEAP32[$18>>2]|0;
						FUNCTION_TABLE_viiiiii[$19 & 127]($dst_type,$info,$3,$3,1,0);
						$20 = HEAP32[$11>>2]|0;
						$21 = ($20|0)==(1);
						$$ = $21 ? $3 : 0;
						$dst_ptr$0 = $$;
					} else {
						$22 = ((($info)) + 36|0);
						$23 = HEAP32[$5>>2]|0;
						$24 = ((($23)) + 24|0);
						$25 = HEAP32[$24>>2]|0;
						FUNCTION_TABLE_viiiii[$25 & 255]($5,$info,$3,1,0);
						$26 = HEAP32[$22>>2]|0;
						switch ($26|0) {
							case 0:  {
								$27 = HEAP32[$14>>2]|0;
								$28 = ($27|0)==(1);
								$29 = HEAP32[$12>>2]|0;
								$30 = ($29|0)==(1);
								$or$cond = $28 & $30;
								$31 = HEAP32[$13>>2]|0;
								$32 = ($31|0)==(1);
								$or$cond3 = $or$cond & $32;
								$33 = HEAP32[$10>>2]|0;
								$$8 = $or$cond3 ? $33 : 0;
								$dst_ptr$0 = $$8;
								break L1;
								break;
							}
							case 1:  {
								break;
							}
							default: {
								$dst_ptr$0 = 0;
								break L1;
							}
						}
						$34 = HEAP32[$11>>2]|0;
						$35 = ($34|0)==(1);
						if (!($35)) {
							$36 = HEAP32[$14>>2]|0;
							$37 = ($36|0)==(0);
							$38 = HEAP32[$12>>2]|0;
							$39 = ($38|0)==(1);
							$or$cond5 = $37 & $39;
							$40 = HEAP32[$13>>2]|0;
							$41 = ($40|0)==(1);
							$or$cond7 = $or$cond5 & $41;
							if (!($or$cond7)) {
								$dst_ptr$0 = 0;
								break;
							}
						}
						$42 = HEAP32[$9>>2]|0;
						$dst_ptr$0 = $42;
					}
				} while(0);
				STACKTOP = sp;return ($dst_ptr$0|0);
			}
			function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
				$this = $this|0;
				$info = $info|0;
				$dst_ptr = $dst_ptr|0;
				$current_ptr = $current_ptr|0;
				$path_below = $path_below|0;
				$use_strcmp = $use_strcmp|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				if ($2) {
					__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
				} else {
					$3 = ((($this)) + 8|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = HEAP32[$4>>2]|0;
					$6 = ((($5)) + 20|0);
					$7 = HEAP32[$6>>2]|0;
					FUNCTION_TABLE_viiiiii[$7 & 127]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
				}
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
				$this = $this|0;
				$info = $info|0;
				$dst_ptr = $dst_ptr|0;
				$current_ptr = $current_ptr|0;
				$path_below = $path_below|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 53|0);
				HEAP8[$0>>0] = 1;
				$1 = ((($info)) + 4|0);
				$2 = HEAP32[$1>>2]|0;
				$3 = ($2|0)==($current_ptr|0);
				do {
					if ($3) {
						$4 = ((($info)) + 52|0);
						HEAP8[$4>>0] = 1;
						$5 = ((($info)) + 16|0);
						$6 = HEAP32[$5>>2]|0;
						$7 = ($6|0)==(0|0);
						if ($7) {
							HEAP32[$5>>2] = $dst_ptr;
							$8 = ((($info)) + 24|0);
							HEAP32[$8>>2] = $path_below;
							$9 = ((($info)) + 36|0);
							HEAP32[$9>>2] = 1;
							$10 = ((($info)) + 48|0);
							$11 = HEAP32[$10>>2]|0;
							$12 = ($11|0)==(1);
							$13 = ($path_below|0)==(1);
							$or$cond = $12 & $13;
							if (!($or$cond)) {
								break;
							}
							$14 = ((($info)) + 54|0);
							HEAP8[$14>>0] = 1;
							break;
						}
						$15 = ($6|0)==($dst_ptr|0);
						if (!($15)) {
							$25 = ((($info)) + 36|0);
							$26 = HEAP32[$25>>2]|0;
							$27 = (($26) + 1)|0;
							HEAP32[$25>>2] = $27;
							$28 = ((($info)) + 54|0);
							HEAP8[$28>>0] = 1;
							break;
						}
						$16 = ((($info)) + 24|0);
						$17 = HEAP32[$16>>2]|0;
						$18 = ($17|0)==(2);
						if ($18) {
							HEAP32[$16>>2] = $path_below;
							$22 = $path_below;
						} else {
							$22 = $17;
						}
						$19 = ((($info)) + 48|0);
						$20 = HEAP32[$19>>2]|0;
						$21 = ($20|0)==(1);
						$23 = ($22|0)==(1);
						$or$cond1 = $21 & $23;
						if ($or$cond1) {
							$24 = ((($info)) + 54|0);
							HEAP8[$24>>0] = 1;
						}
					}
				} while(0);
				return;
			}
			function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
				$this = $this|0;
				$info = $info|0;
				$current_ptr = $current_ptr|0;
				$path_below = $path_below|0;
				$use_strcmp = $use_strcmp|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				do {
					if ($2) {
						$3 = ((($info)) + 4|0);
						$4 = HEAP32[$3>>2]|0;
						$5 = ($4|0)==($current_ptr|0);
						if ($5) {
							$6 = ((($info)) + 28|0);
							$7 = HEAP32[$6>>2]|0;
							$8 = ($7|0)==(1);
							if (!($8)) {
								HEAP32[$6>>2] = $path_below;
							}
						}
					} else {
						$9 = HEAP32[$info>>2]|0;
						$10 = ($this|0)==($9|0);
						if (!($10)) {
							$44 = ((($this)) + 8|0);
							$45 = HEAP32[$44>>2]|0;
							$46 = HEAP32[$45>>2]|0;
							$47 = ((($46)) + 24|0);
							$48 = HEAP32[$47>>2]|0;
							FUNCTION_TABLE_viiiii[$48 & 255]($45,$info,$current_ptr,$path_below,$use_strcmp);
							break;
						}
						$11 = ((($info)) + 16|0);
						$12 = HEAP32[$11>>2]|0;
						$13 = ($12|0)==($current_ptr|0);
						if (!($13)) {
							$14 = ((($info)) + 20|0);
							$15 = HEAP32[$14>>2]|0;
							$16 = ($15|0)==($current_ptr|0);
							if (!($16)) {
								$19 = ((($info)) + 32|0);
								HEAP32[$19>>2] = $path_below;
								$20 = ((($info)) + 44|0);
								$21 = HEAP32[$20>>2]|0;
								$22 = ($21|0)==(4);
								if ($22) {
									break;
								}
								$23 = ((($info)) + 52|0);
								HEAP8[$23>>0] = 0;
								$24 = ((($info)) + 53|0);
								HEAP8[$24>>0] = 0;
								$25 = ((($this)) + 8|0);
								$26 = HEAP32[$25>>2]|0;
								$27 = HEAP32[$26>>2]|0;
								$28 = ((($27)) + 20|0);
								$29 = HEAP32[$28>>2]|0;
								FUNCTION_TABLE_viiiiii[$29 & 127]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
								$30 = HEAP8[$24>>0]|0;
								$31 = ($30<<24>>24)==(0);
								if ($31) {
									$is_dst_type_derived_from_static_type$0$off02 = 0;
									label = 13;
								} else {
									$32 = HEAP8[$23>>0]|0;
									$not$ = ($32<<24>>24)==(0);
									if ($not$) {
										$is_dst_type_derived_from_static_type$0$off02 = 1;
										label = 13;
									} else {
										label = 17;
									}
								}
								do {
									if ((label|0) == 13) {
										HEAP32[$14>>2] = $current_ptr;
										$33 = ((($info)) + 40|0);
										$34 = HEAP32[$33>>2]|0;
										$35 = (($34) + 1)|0;
										HEAP32[$33>>2] = $35;
										$36 = ((($info)) + 36|0);
										$37 = HEAP32[$36>>2]|0;
										$38 = ($37|0)==(1);
										if ($38) {
											$39 = ((($info)) + 24|0);
											$40 = HEAP32[$39>>2]|0;
											$41 = ($40|0)==(2);
											if ($41) {
												$42 = ((($info)) + 54|0);
												HEAP8[$42>>0] = 1;
												if ($is_dst_type_derived_from_static_type$0$off02) {
													label = 17;
													break;
												} else {
													$43 = 4;
													break;
												}
											}
										}
										if ($is_dst_type_derived_from_static_type$0$off02) {
											label = 17;
										} else {
											$43 = 4;
										}
									}
								} while(0);
								if ((label|0) == 17) {
									$43 = 3;
								}
								HEAP32[$20>>2] = $43;
								break;
							}
						}
						$17 = ($path_below|0)==(1);
						if ($17) {
							$18 = ((($info)) + 32|0);
							HEAP32[$18>>2] = 1;
						}
					}
				} while(0);
				return;
			}
			function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
				$this = $this|0;
				$info = $info|0;
				$adjustedPtr = $adjustedPtr|0;
				$path_below = $path_below|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				if ($2) {
					__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
				} else {
					$3 = ((($this)) + 8|0);
					$4 = HEAP32[$3>>2]|0;
					$5 = HEAP32[$4>>2]|0;
					$6 = ((($5)) + 28|0);
					$7 = HEAP32[$6>>2]|0;
					FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
				}
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
				$this = $this|0;
				$info = $info|0;
				$adjustedPtr = $adjustedPtr|0;
				$path_below = $path_below|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 16|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($1|0)==(0|0);
				do {
					if ($2) {
						HEAP32[$0>>2] = $adjustedPtr;
						$3 = ((($info)) + 24|0);
						HEAP32[$3>>2] = $path_below;
						$4 = ((($info)) + 36|0);
						HEAP32[$4>>2] = 1;
					} else {
						$5 = ($1|0)==($adjustedPtr|0);
						if (!($5)) {
							$9 = ((($info)) + 36|0);
							$10 = HEAP32[$9>>2]|0;
							$11 = (($10) + 1)|0;
							HEAP32[$9>>2] = $11;
							$12 = ((($info)) + 24|0);
							HEAP32[$12>>2] = 2;
							$13 = ((($info)) + 54|0);
							HEAP8[$13>>0] = 1;
							break;
						}
						$6 = ((($info)) + 24|0);
						$7 = HEAP32[$6>>2]|0;
						$8 = ($7|0)==(2);
						if ($8) {
							HEAP32[$6>>2] = $path_below;
						}
					}
				} while(0);
				return;
			}
			function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZdlPv($this);
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
				$this = $this|0;
				$info = $info|0;
				$dst_ptr = $dst_ptr|0;
				$current_ptr = $current_ptr|0;
				$path_below = $path_below|0;
				$use_strcmp = $use_strcmp|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				if ($2) {
					__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
				}
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
				$this = $this|0;
				$info = $info|0;
				$current_ptr = $current_ptr|0;
				$path_below = $path_below|0;
				$use_strcmp = $use_strcmp|0;
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				do {
					if ($2) {
						$3 = ((($info)) + 4|0);
						$4 = HEAP32[$3>>2]|0;
						$5 = ($4|0)==($current_ptr|0);
						if ($5) {
							$6 = ((($info)) + 28|0);
							$7 = HEAP32[$6>>2]|0;
							$8 = ($7|0)==(1);
							if (!($8)) {
								HEAP32[$6>>2] = $path_below;
							}
						}
					} else {
						$9 = HEAP32[$info>>2]|0;
						$10 = ($this|0)==($9|0);
						if ($10) {
							$11 = ((($info)) + 16|0);
							$12 = HEAP32[$11>>2]|0;
							$13 = ($12|0)==($current_ptr|0);
							if (!($13)) {
								$14 = ((($info)) + 20|0);
								$15 = HEAP32[$14>>2]|0;
								$16 = ($15|0)==($current_ptr|0);
								if (!($16)) {
									$19 = ((($info)) + 32|0);
									HEAP32[$19>>2] = $path_below;
									HEAP32[$14>>2] = $current_ptr;
									$20 = ((($info)) + 40|0);
									$21 = HEAP32[$20>>2]|0;
									$22 = (($21) + 1)|0;
									HEAP32[$20>>2] = $22;
									$23 = ((($info)) + 36|0);
									$24 = HEAP32[$23>>2]|0;
									$25 = ($24|0)==(1);
									if ($25) {
										$26 = ((($info)) + 24|0);
										$27 = HEAP32[$26>>2]|0;
										$28 = ($27|0)==(2);
										if ($28) {
											$29 = ((($info)) + 54|0);
											HEAP8[$29>>0] = 1;
										}
									}
									$30 = ((($info)) + 44|0);
									HEAP32[$30>>2] = 4;
									break;
								}
							}
							$17 = ($path_below|0)==(1);
							if ($17) {
								$18 = ((($info)) + 32|0);
								HEAP32[$18>>2] = 1;
							}
						}
					}
				} while(0);
				return;
			}
			function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
				$this = $this|0;
				$info = $info|0;
				$adjustedPtr = $adjustedPtr|0;
				$path_below = $path_below|0;
				var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($info)) + 8|0);
				$1 = HEAP32[$0>>2]|0;
				$2 = ($this|0)==($1|0);
				if ($2) {
					__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
				}
				return;
			}
			function __ZSt9terminatev() {
				var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
				var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
				var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$vararg_buffer5 = sp + 24|0;
				$vararg_buffer3 = sp + 16|0;
				$vararg_buffer1 = sp + 8|0;
				$vararg_buffer = sp;
				__THREW__ = 0;
				$0 = (invoke_i(215)|0);
				$1 = __THREW__; __THREW__ = 0;
				$2 = $1&1;
				if ($2) {
					$45 = ___cxa_find_matching_catch_3(0|0)|0;
					$46 = tempRet0;
					___clang_call_terminate($45);
					// unreachable;
				}
				$3 = ($0|0)==(0|0);
				if (!($3)) {
					$4 = HEAP32[$0>>2]|0;
					$5 = ($4|0)==(0|0);
					if (!($5)) {
						$6 = ((($4)) + 48|0);
						$7 = $6;
						$8 = $7;
						$9 = HEAP32[$8>>2]|0;
						$10 = (($7) + 4)|0;
						$11 = $10;
						$12 = HEAP32[$11>>2]|0;
						$13 = $9 & -256;
						$14 = ($13|0)==(1126902528);
						$15 = ($12|0)==(1129074247);
						$16 = $14 & $15;
						if ($16) {
							$17 = ((($4)) + 12|0);
							$18 = HEAP32[$17>>2]|0;
							__THREW__ = 0;
							invoke_v($18|0);
							$19 = __THREW__; __THREW__ = 0;
							$20 = $19&1;
							if (!($20)) {
								__THREW__ = 0;
								invoke_vii(216,(6575|0),($vararg_buffer|0));
								$21 = __THREW__; __THREW__ = 0;
							}
							$22 = ___cxa_find_matching_catch_3(0|0)|0;
							$23 = tempRet0;
							(___cxa_begin_catch(($22|0))|0);
							__THREW__ = 0;
							invoke_vii(216,(6615|0),($vararg_buffer1|0));
							$24 = __THREW__; __THREW__ = 0;
							$25 = ___cxa_find_matching_catch_3(0|0)|0;
							$26 = tempRet0;
							__THREW__ = 0;
							invoke_v(217);
							$27 = __THREW__; __THREW__ = 0;
							$28 = $27&1;
							if ($28) {
								$29 = ___cxa_find_matching_catch_3(0|0)|0;
								$30 = tempRet0;
								___clang_call_terminate($29);
								// unreachable;
							} else {
								___clang_call_terminate($25);
								// unreachable;
							}
						}
					}
				}
				$31 = HEAP32[178]|0;HEAP32[178] = (($31+0)|0);
				$32 = $31;
				__THREW__ = 0;
				invoke_v($32|0);
				$33 = __THREW__; __THREW__ = 0;
				$34 = $33&1;
				if (!($34)) {
					__THREW__ = 0;
					invoke_vii(216,(6575|0),($vararg_buffer3|0));
					$35 = __THREW__; __THREW__ = 0;
				}
				$36 = ___cxa_find_matching_catch_3(0|0)|0;
				$37 = tempRet0;
				(___cxa_begin_catch(($36|0))|0);
				__THREW__ = 0;
				invoke_vii(216,(6615|0),($vararg_buffer5|0));
				$38 = __THREW__; __THREW__ = 0;
				$39 = ___cxa_find_matching_catch_3(0|0)|0;
				$40 = tempRet0;
				__THREW__ = 0;
				invoke_v(217);
				$41 = __THREW__; __THREW__ = 0;
				$42 = $41&1;
				if ($42) {
					$43 = ___cxa_find_matching_catch_3(0|0)|0;
					$44 = tempRet0;
					___clang_call_terminate($43);
					// unreachable;
				} else {
					___clang_call_terminate($39);
					// unreachable;
				}
			}
			function __ZNSt9bad_allocD2Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZNSt9exceptionD2Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return;
			}
			function __ZNSt9bad_allocD0Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZdlPv($this);
				return;
			}
			function __ZNKSt9bad_alloc4whatEv($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				return (6678|0);
			}
			function __ZNSt11logic_errorD2Ev($this) {
				$this = $this|0;
				var $0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				HEAP32[$this>>2] = (828);
				$0 = ((($this)) + 4|0);
				__ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
				return;
			}
			function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[$this>>2]|0;
				$1 = ((($0)) + -4|0);
				$2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
				$3 = (($2) + -1)|0;
				$4 = ($3|0)<(0);
				if ($4) {
					$5 = HEAP32[$this>>2]|0;
					$6 = ((($5)) + -12|0);
					__ZdlPv($6);
				}
				return;
			}
			function __ZNSt11logic_errorD0Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZNSt11logic_errorD2Ev($this);
				__ZdlPv($this);
				return;
			}
			function __ZNKSt11logic_error4whatEv($this) {
				$this = $this|0;
				var $0 = 0, $1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ((($this)) + 4|0);
				$1 = HEAP32[$0>>2]|0;
				return ($1|0);
			}
			function __ZNSt12length_errorD0Ev($this) {
				$this = $this|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZNSt11logic_errorD2Ev($this);
				__ZdlPv($this);
				return;
			}
			function __Znwj($size) {
				$size = $size|0;
				var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($size|0)==(0);
				$$size = $0 ? 1 : $size;
				while(1) {
					$1 = (_malloc($$size)|0);
					$2 = ($1|0)==(0|0);
					if (!($2)) {
						$$lcssa = $1;
						label = 6;
						break;
					}
					$3 = (__ZSt15get_new_handlerv()|0);
					$4 = ($3|0)==(0|0);
					if ($4) {
						label = 5;
						break;
					}
					FUNCTION_TABLE_v[$3 & 255]();
				}
				if ((label|0) == 5) {
					$5 = (___cxa_allocate_exception(4)|0);
					HEAP32[$5>>2] = (808);
					___cxa_throw(($5|0),(80|0),(19|0));
					// unreachable;
				}
				else if ((label|0) == 6) {
					return ($$lcssa|0);
				}
				return (0)|0;
			}
			function __ZSt15get_new_handlerv() {
				var $0 = 0, $1 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = HEAP32[1839]|0;HEAP32[1839] = (($0+0)|0);
				$1 = $0;
				return ($1|0);
			}
			function __ZnwjRKSt9nothrow_t($size,$0) {
				$size = $size|0;
				$0 = $0|0;
				var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
				sp = STACKTOP;
				__THREW__ = 0;
				$1 = (invoke_ii(29,($size|0))|0);
				$2 = __THREW__; __THREW__ = 0;
				$3 = $2&1;
				if ($3) {
					$4 = ___cxa_find_matching_catch_3(0|0)|0;
					$5 = tempRet0;
					(___cxa_begin_catch(($4|0))|0);
					__THREW__ = 0;
					invoke_v(217);
					$6 = __THREW__; __THREW__ = 0;
					$7 = $6&1;
					if ($7) {
						$8 = ___cxa_find_matching_catch_3(0|0)|0;
						$9 = tempRet0;
						___clang_call_terminate($8);
						// unreachable;
					} else {
						$p$0 = 0;
					}
				} else {
					$p$0 = $1;
				}
				return ($p$0|0);
			}
			function __ZdlPvRKSt9nothrow_t($ptr,$0) {
				$ptr = $ptr|0;
				$0 = $0|0;
				var label = 0, sp = 0;
				sp = STACKTOP;
				__ZdlPv($ptr);
				return;
			}
			function ___cxa_can_catch($catchType,$excpType,$thrown) {
				$catchType = $catchType|0;
				$excpType = $excpType|0;
				$thrown = $thrown|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
				sp = STACKTOP;
				STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
				$temp = sp;
				$0 = HEAP32[$thrown>>2]|0;
				HEAP32[$temp>>2] = $0;
				$1 = HEAP32[$catchType>>2]|0;
				$2 = ((($1)) + 16|0);
				$3 = HEAP32[$2>>2]|0;
				$4 = (FUNCTION_TABLE_iiii[$3 & 255]($catchType,$excpType,$temp)|0);
				$5 = $4&1;
				if ($4) {
					$6 = HEAP32[$temp>>2]|0;
					HEAP32[$thrown>>2] = $6;
				}
				STACKTOP = sp;return ($5|0);
			}
			function ___cxa_is_pointer_type($type) {
				$type = $type|0;
				var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
				sp = STACKTOP;
				$0 = ($type|0)==(0|0);
				if ($0) {
					$3 = 0;
				} else {
					$1 = (___dynamic_cast($type,56,144,0)|0);
					$phitmp = ($1|0)!=(0|0);
					$3 = $phitmp;
				}
				$2 = $3&1;
				return ($2|0);
			}
			function runPostSets() {
			}
			function _i64Subtract(a, b, c, d) {
				a = a|0; b = b|0; c = c|0; d = d|0;
				var l = 0, h = 0;
				l = (a - c)>>>0;
				h = (b - d)>>>0;
				h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
				return ((tempRet0 = h,l|0)|0);
			}
			function _memset(ptr, value, num) {
				ptr = ptr|0; value = value|0; num = num|0;
				var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
				stop = (ptr + num)|0;
				if ((num|0) >= 20) {
					// This is unaligned, but quite large, so work hard to get to aligned settings
					value = value & 0xff;
					unaligned = ptr & 3;
					value4 = value | (value << 8) | (value << 16) | (value << 24);
					stop4 = stop & ~3;
					if (unaligned) {
						unaligned = (ptr + 4 - unaligned)|0;
						while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
							HEAP8[((ptr)>>0)]=value;
							ptr = (ptr+1)|0;
						}
					}
					while ((ptr|0) < (stop4|0)) {
						HEAP32[((ptr)>>2)]=value4;
						ptr = (ptr+4)|0;
					}
				}
				while ((ptr|0) < (stop|0)) {
					HEAP8[((ptr)>>0)]=value;
					ptr = (ptr+1)|0;
				}
				return (ptr-num)|0;
			}
			function _bitshift64Shl(low, high, bits) {
				low = low|0; high = high|0; bits = bits|0;
				var ander = 0;
				if ((bits|0) < 32) {
					ander = ((1 << bits) - 1)|0;
					tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
					return low << bits;
				}
				tempRet0 = low << (bits - 32);
				return 0;
			}
			function _i64Add(a, b, c, d) {
				/*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
				a = a|0; b = b|0; c = c|0; d = d|0;
				var l = 0, h = 0;
				l = (a + c)>>>0;
				h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
				return ((tempRet0 = h,l|0)|0);
			}
			function _bitshift64Ashr(low, high, bits) {
				low = low|0; high = high|0; bits = bits|0;
				var ander = 0;
				if ((bits|0) < 32) {
					ander = ((1 << bits) - 1)|0;
					tempRet0 = high >> bits;
					return (low >>> bits) | ((high&ander) << (32 - bits));
				}
				tempRet0 = (high|0) < 0 ? -1 : 0;
				return (high >> (bits - 32))|0;
			}
			function _bitshift64Lshr(low, high, bits) {
				low = low|0; high = high|0; bits = bits|0;
				var ander = 0;
				if ((bits|0) < 32) {
					ander = ((1 << bits) - 1)|0;
					tempRet0 = high >>> bits;
					return (low >>> bits) | ((high&ander) << (32 - bits));
				}
				tempRet0 = 0;
				return (high >>> (bits - 32))|0;
			}
			function _memcpy(dest, src, num) {
				dest = dest|0; src = src|0; num = num|0;
				var ret = 0;
				if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
				ret = dest|0;
				if ((dest&3) == (src&3)) {
					while (dest & 3) {
						if ((num|0) == 0) return ret|0;
						HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
						dest = (dest+1)|0;
						src = (src+1)|0;
						num = (num-1)|0;
					}
					while ((num|0) >= 4) {
						HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
						dest = (dest+4)|0;
						src = (src+4)|0;
						num = (num-4)|0;
					}
				}
				while ((num|0) > 0) {
					HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
					dest = (dest+1)|0;
					src = (src+1)|0;
					num = (num-1)|0;
				}
				return ret|0;
			}
			function _memmove(dest, src, num) {
				dest = dest|0; src = src|0; num = num|0;
				var ret = 0;
				if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
					// Unlikely case: Copy backwards in a safe manner
					ret = dest;
					src = (src + num)|0;
					dest = (dest + num)|0;
					while ((num|0) > 0) {
						dest = (dest - 1)|0;
						src = (src - 1)|0;
						num = (num - 1)|0;
						HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
					}
					dest = ret;
				} else {
					_memcpy(dest, src, num) | 0;
				}
				return dest | 0;
			}
			function _llvm_cttz_i32(x) {
				x = x|0;
				var ret = 0;
				ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
				if ((ret|0) < 8) return ret|0;
				ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
				if ((ret|0) < 8) return (ret + 8)|0;
				ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
				if ((ret|0) < 8) return (ret + 16)|0;
				return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
			}

			// ======== compiled code from system/lib/compiler-rt , see readme therein
			function ___muldsi3($a, $b) {
				$a = $a | 0;
				$b = $b | 0;
				var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
				$1 = $a & 65535;
				$2 = $b & 65535;
				$3 = Math_imul($2, $1) | 0;
				$6 = $a >>> 16;
				$8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
				$11 = $b >>> 16;
				$12 = Math_imul($11, $1) | 0;
				return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
			}
			function ___divdi3($a$0, $a$1, $b$0, $b$1) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
				$1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
				$1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
				$2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
				$2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
				$4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
				$4$1 = tempRet0;
				$6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
				$7$0 = $2$0 ^ $1$0;
				$7$1 = $2$1 ^ $1$1;
				$8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
				$10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
				return $10$0 | 0;
			}
			function ___remdi3($a$0, $a$1, $b$0, $b$1) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
				__stackBase__ = STACKTOP;
				STACKTOP = STACKTOP + 16 | 0;
				$rem = __stackBase__ | 0;
				$1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
				$1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
				$2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
				$2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
				$4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
				$4$1 = tempRet0;
				$6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
				___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
				$10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
				$10$1 = tempRet0;
				STACKTOP = __stackBase__;
				return (tempRet0 = $10$1, $10$0) | 0;
			}
			function ___muldi3($a$0, $a$1, $b$0, $b$1) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
				$x_sroa_0_0_extract_trunc = $a$0;
				$y_sroa_0_0_extract_trunc = $b$0;
				$1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
				$1$1 = tempRet0;
				$2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
				return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
			}
			function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				var $1$0 = 0;
				$1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
				return $1$0 | 0;
			}
			function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				var $rem = 0, __stackBase__ = 0;
				__stackBase__ = STACKTOP;
				STACKTOP = STACKTOP + 16 | 0;
				$rem = __stackBase__ | 0;
				___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
				STACKTOP = __stackBase__;
				return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
			}
			function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
				$a$0 = $a$0 | 0;
				$a$1 = $a$1 | 0;
				$b$0 = $b$0 | 0;
				$b$1 = $b$1 | 0;
				$rem = $rem | 0;
				var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
				$n_sroa_0_0_extract_trunc = $a$0;
				$n_sroa_1_4_extract_shift$0 = $a$1;
				$n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
				$d_sroa_0_0_extract_trunc = $b$0;
				$d_sroa_1_4_extract_shift$0 = $b$1;
				$d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
				if (($n_sroa_1_4_extract_trunc | 0) == 0) {
					$4 = ($rem | 0) != 0;
					if (($d_sroa_1_4_extract_trunc | 0) == 0) {
						if ($4) {
							HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
							HEAP32[$rem + 4 >> 2] = 0;
						}
						$_0$1 = 0;
						$_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
						return (tempRet0 = $_0$1, $_0$0) | 0;
					} else {
						if (!$4) {
							$_0$1 = 0;
							$_0$0 = 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						HEAP32[$rem >> 2] = $a$0 & -1;
						HEAP32[$rem + 4 >> 2] = $a$1 & 0;
						$_0$1 = 0;
						$_0$0 = 0;
						return (tempRet0 = $_0$1, $_0$0) | 0;
					}
				}
				$17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
				do {
					if (($d_sroa_0_0_extract_trunc | 0) == 0) {
						if ($17) {
							if (($rem | 0) != 0) {
								HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
								HEAP32[$rem + 4 >> 2] = 0;
							}
							$_0$1 = 0;
							$_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						if (($n_sroa_0_0_extract_trunc | 0) == 0) {
							if (($rem | 0) != 0) {
								HEAP32[$rem >> 2] = 0;
								HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
							}
							$_0$1 = 0;
							$_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						$37 = $d_sroa_1_4_extract_trunc - 1 | 0;
						if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
							if (($rem | 0) != 0) {
								HEAP32[$rem >> 2] = 0 | $a$0 & -1;
								HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
							}
							$_0$1 = 0;
							$_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						$49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
						$51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
						if ($51 >>> 0 <= 30) {
							$57 = $51 + 1 | 0;
							$58 = 31 - $51 | 0;
							$sr_1_ph = $57;
							$r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
							$r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
							$q_sroa_0_1_ph = 0;
							$q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
							break;
						}
						if (($rem | 0) == 0) {
							$_0$1 = 0;
							$_0$0 = 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						HEAP32[$rem >> 2] = 0 | $a$0 & -1;
						HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
						$_0$1 = 0;
						$_0$0 = 0;
						return (tempRet0 = $_0$1, $_0$0) | 0;
					} else {
						if (!$17) {
							$117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
							$119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
							if ($119 >>> 0 <= 31) {
								$125 = $119 + 1 | 0;
								$126 = 31 - $119 | 0;
								$130 = $119 - 31 >> 31;
								$sr_1_ph = $125;
								$r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
								$r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
								$q_sroa_0_1_ph = 0;
								$q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
								break;
							}
							if (($rem | 0) == 0) {
								$_0$1 = 0;
								$_0$0 = 0;
								return (tempRet0 = $_0$1, $_0$0) | 0;
							}
							HEAP32[$rem >> 2] = 0 | $a$0 & -1;
							HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
							$_0$1 = 0;
							$_0$0 = 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
						$66 = $d_sroa_0_0_extract_trunc - 1 | 0;
						if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
							$86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
							$88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
							$89 = 64 - $88 | 0;
							$91 = 32 - $88 | 0;
							$92 = $91 >> 31;
							$95 = $88 - 32 | 0;
							$105 = $95 >> 31;
							$sr_1_ph = $88;
							$r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
							$r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
							$q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
							$q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
							break;
						}
						if (($rem | 0) != 0) {
							HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
							HEAP32[$rem + 4 >> 2] = 0;
						}
						if (($d_sroa_0_0_extract_trunc | 0) == 1) {
							$_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
							$_0$0 = 0 | $a$0 & -1;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						} else {
							$78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
							$_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
							$_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
							return (tempRet0 = $_0$1, $_0$0) | 0;
						}
					}
				} while (0);
				if (($sr_1_ph | 0) == 0) {
					$q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
					$q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
					$r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
					$r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
					$carry_0_lcssa$1 = 0;
					$carry_0_lcssa$0 = 0;
				} else {
					$d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
					$d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
					$137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
					$137$1 = tempRet0;
					$q_sroa_1_1198 = $q_sroa_1_1_ph;
					$q_sroa_0_1199 = $q_sroa_0_1_ph;
					$r_sroa_1_1200 = $r_sroa_1_1_ph;
					$r_sroa_0_1201 = $r_sroa_0_1_ph;
					$sr_1202 = $sr_1_ph;
					$carry_0203 = 0;
					while (1) {
						$147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
						$149 = $carry_0203 | $q_sroa_0_1199 << 1;
						$r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
						$r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
						_i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
						$150$1 = tempRet0;
						$151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
						$152 = $151$0 & 1;
						$154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
						$r_sroa_0_0_extract_trunc = $154$0;
						$r_sroa_1_4_extract_trunc = tempRet0;
						$155 = $sr_1202 - 1 | 0;
						if (($155 | 0) == 0) {
							break;
						} else {
							$q_sroa_1_1198 = $147;
							$q_sroa_0_1199 = $149;
							$r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
							$r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
							$sr_1202 = $155;
							$carry_0203 = $152;
						}
					}
					$q_sroa_1_1_lcssa = $147;
					$q_sroa_0_1_lcssa = $149;
					$r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
					$r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
					$carry_0_lcssa$1 = 0;
					$carry_0_lcssa$0 = $152;
				}
				$q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
				$q_sroa_0_0_insert_ext75$1 = 0;
				$q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
				if (($rem | 0) != 0) {
					HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
					HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
				}
				$_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
				$_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
				return (tempRet0 = $_0$1, $_0$0) | 0;
			}
			// =======================================================================




			function dynCall_iiii(index,a1,a2,a3) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0;
				return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
			}


			function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
				FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
			}


			function dynCall_i(index) {
				index = index|0;

				return FUNCTION_TABLE_i[index&255]()|0;
			}


			function dynCall_vi(index,a1) {
				index = index|0;
				a1=a1|0;
				FUNCTION_TABLE_vi[index&255](a1|0);
			}


			function dynCall_vii(index,a1,a2) {
				index = index|0;
				a1=a1|0; a2=a2|0;
				FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
			}


			function dynCall_ii(index,a1) {
				index = index|0;
				a1=a1|0;
				return FUNCTION_TABLE_ii[index&255](a1|0)|0;
			}


			function dynCall_viii(index,a1,a2,a3) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0;
				FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
			}


			function dynCall_v(index) {
				index = index|0;

				FUNCTION_TABLE_v[index&255]();
			}


			function dynCall_iiiii(index,a1,a2,a3,a4) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
				return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
			}


			function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
				FUNCTION_TABLE_viiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
			}


			function dynCall_iii(index,a1,a2) {
				index = index|0;
				a1=a1|0; a2=a2|0;
				return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
			}


			function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
				return FUNCTION_TABLE_iiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
			}


			function dynCall_viiii(index,a1,a2,a3,a4) {
				index = index|0;
				a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
				FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
			}

			function b0(p0,p1,p2) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
			}
			function b1(p0,p1,p2,p3,p4) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
			}
			function b2() {
				; nullFunc_i(2);return 0;
			}
			function b3(p0) {
				p0 = p0|0; nullFunc_vi(3);
			}
			function b4(p0,p1) {
				p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
			}
			function b5(p0) {
				p0 = p0|0; nullFunc_ii(5);return 0;
			}
			function b6(p0,p1,p2) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
			}
			function ___cxa_throw__wrapper(p0,p1,p2) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
			}
			function b7() {
				; nullFunc_v(7);
			}
			function ___cxa_end_catch__wrapper() {
				; ___cxa_end_catch();
			}
			function b8(p0,p1,p2,p3) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0;
			}
			function b9(p0,p1,p2,p3,p4,p5) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(9);
			}
			function b10(p0,p1) {
				p0 = p0|0;p1 = p1|0; nullFunc_iii(10);return 0;
			}
			function b11(p0,p1,p2,p3,p4) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(11);return 0;
			}
			function b12(p0,p1,p2,p3) {
				p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
			}

			// EMSCRIPTEN_END_FUNCS
			var FUNCTION_TABLE_iiii = [b0,b0,___stdio_write,___stdio_seek,___stdout_write,___stdio_read,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10Page_image4saveEP8_IO_FILEc,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EEPS3_,b0,b0,b0,b0,b0,__ZN8Textline16shift_characterpEP9Characterb,b0,b0,b0,b0,__ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK8Features12test_EFIJLlTERK7CharsetRK9Rectangle,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK6Bitmap10escape_topEii,b0,b0,b0,b0,__ZN7Profile8iminimumEii,b0,b0,__ZN7Profile10increasingEii,b0,b0,b0
									   ,b0,b0,__ZNK4Blob2idEii,b0,b0,b0,b0,__ZNK8Features11test_4ADQaoERK7CharsetRK9Rectangle,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,__ZNSt3__16vectorI9VrhomboidNS_9allocatorIS1_EEE6insertENS_11__wrap_iterIPKS1_EERS6_,b0,b0,b0,__ZN7Profile10decreasingEii,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__16vectorIP9CharacterNS_9allocatorIS2_EEE6insertENS_11__wrap_iterIPKS2_EERS7_
									   ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
									   ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
			var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,__ZN8TextpageC2ERK10Page_imagePKcRK7Controlb,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN6BitmapC2Eiiii,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,__ZN9RectangleC2Eiiii,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
										 ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
			var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
									,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
			var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZN8TextpageD2Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZN7ControlD2Ev
									 ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv,__ZN5Ocrad14internal_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
									 ,b3,__ZN9TextblockD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4BlobD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
									 ,b3,b3,__ZN4Blob10find_holesEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN12_GLOBAL__N_115join_charactersERNSt3__16vectorIP8TextlineNS0_9allocatorIS3_EEEE,__ZN8TextlineD2Ev,__ZN8Textline9set_trackEv,b3,b3,b3,b3,b3,b3
									 ,__ZN8Textline19verify_big_initialsEv,b3,b3,__ZN8Textline13insert_spacesEv,b3,b3,b3,__ZN8FeaturesD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN7Profile10initializeEv,b3,b3,b3,b3,b3,b3,b3
									 ,b3,b3,b3,__ZNK8Features13row_scan_initEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN9CharacterD2Ev,b3,b3
									 ,b3,b3,b3,b3,b3,__ZN11User_filterD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
									 ,_cleanup_195,_cleanup,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
									 ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
			var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
									  ,b4,b4,b4,b4,b4,b4,b4,__ZN9Rectangle5widthEi,__ZN9Rectangle6heightEi,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEj,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_,__ZNSt3__16vectorIxNS_9allocatorIxEEE21__push_back_slow_pathIKxEEvRT_,b4,b4,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE7reserveEj,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIKS3_EEvRT_,b4,b4,__ZNK4Blob5printEP8_IO_FILE,b4,__ZN9Textblock9recognizeERK7Control
									  ,__ZNSt3__16vectorIP9TextblockNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b4,b4,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_,__ZN10Page_image9draw_maskERK4Mask,__ZN10Page_image14draw_rectangleERK9Rectangle,__ZNK9Textblock5lmarkER10Page_image,__ZNK9Textblock5cmarkER10Page_image,b4,b4,b4,__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,__ZN6Bitmap10add_bitmapERKS_,b4,__ZN12_GLOBAL__N_117ignore_wide_blobsERK9RectangleRNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE,b4,__ZN4Blob3topEi,__ZN4Blob6bottomEi,__ZN4Blob4leftEi,__ZN4Blob5rightEi,b4,__ZN4MaskC2ERK9Rectangle,__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEEC2ERKS4_,__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEEC2ERKS5_,b4,__ZN4Mask8add_maskERKS_,b4,b4,b4,__ZN4Mask13add_rectangleERK9Rectangle
									  ,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEj,b4,b4,__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEj,b4,b4,__ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEEC2ERKS5_,b4,__ZNSt3__16vectorIP6BitmapNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b4,__ZNSt3__16vectorIP8TextlineNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN8Textline4joinERS_
									  ,b4,b4,__ZN8Textline16delete_characterEi,b4,b4,b4,__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
									  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4BlobC2ERKS_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN9Character5GuessENS_9allocatorIS2_EEEC2ERKS5_,b4,b4,b4,__ZN5Track9set_trackERKNSt3__16vectorI9RectangleNS0_9allocatorIS2_EEEE,b4
									  ,__ZNSt3__16vectorI9RectangleNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_,__ZNSt3__16vectorI9VrhomboidNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_,b4,__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE21__push_back_slow_pathIKS1_EEvRT_,b4,b4,b4,__ZN8FeaturesC2ERK4Blob,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN9Character11shift_blobpEP4Blob,__ZN9CharacterC2ERKS_,b4,b4,b4,__ZN4Blob9fill_holeEi,b4,__ZN6Bitmap13add_rectangleERK9Rectangle,b4,b4
									  ,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
									  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
			var FUNCTION_TABLE_ii = [b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5,b5,b5
									 ,__Znwj,b5,b5,b5,b5,b5,__ZN12_GLOBAL__N_110pnm_getintEP8_IO_FILE,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK6Bitmap4areaEv,b5,b5,b5,b5,__ZN12_GLOBAL__N_116mean_blob_heightERKNSt3__16vectorIP4BlobNS0_9allocatorIS3_EEEE,b5,b5,b5,b5,b5,b5,b5,b5,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK8Textline11mean_heightEv,b5,b5,b5,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK8Features6test_GEv,__ZNK8Features6test_cEv,b5,__ZNK8Features14test_s_cedillaEv,b5,b5,__ZN7Profile6istpitEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7Profile3maxEv
									 ,__ZN7Profile3minEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7Profile7isflatsEv,b5,b5,b5,b5,__ZN7Profile5istipEv,__ZN7Profile6isflatEv,__ZNK4Blob7test_BDEv,__ZN7Profile8isconvexEv,__ZN7Profile5ispitEv,b5,b5,__ZNK8Features5hbarsEv,__ZNK8Features5vbarsEv,b5,b5,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3UCS7isvowelEi,b5,b5,b5,__ZN3UCS11base_letterEi,b5,b5,b5,b5,b5,b5,b5,__ZN6Bitmap13adjust_heightEv,b5,b5,b5,b5,__ZN6Bitmap12adjust_widthEv,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
									 ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
			var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
									   ,b6,__ZN10Page_imageC2ERK12OCRAD_Pixmapb,__ZN10Page_imageC2EP8_IO_FILEb,b6,b6,___cxa_throw__wrapper,b6,b6,b6,b6,__ZN10Page_image7read_p1EP8_IO_FILEb,__ZN10Page_image7read_p4EP8_IO_FILEb,__ZN10Page_image7read_p2EP8_IO_FILEb,__ZN10Page_image7read_p5EP8_IO_FILEb,__ZN10Page_image7read_p3EP8_IO_FILEb,__ZN10Page_image7read_p6EP8_IO_FILEb,b6,b6,b6,b6,b6,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_,__ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh,b6,b6,__ZNSt3__16vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN6Bitmap9add_pointEii,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__16vectorI8CsegmentNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_,__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_,b6
									   ,b6,b6,b6,b6,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN7ProfileC2ERK6BitmapNS_4TypeE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN9Character10recognize1ERK7CharsetRK9Rectangle,b6,b6,b6,b6,b6,b6,b6,__ZNK8Textline7charboxERK9Character,b6,b6,b6,b6,b6,b6,__ZN6BitmapC2ERKS_RK9Rectangle,b6,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
									   ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
			var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,__ZL25default_terminate_handlerv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b7,b7,b7,___cxa_end_catch__wrapper,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
									,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
			var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__16vectorIP4BlobNS_9allocatorIS2_EEE6insertINS_11__wrap_iterIPS2_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueES9_E4typeENS7_IPKS2_EESB_SB_,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE6insertENS_11__wrap_iterIPKS3_EEjRS7_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,__ZN5Ocrad7similarEiiii,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK6Bitmap9seek_leftEiib,b8,__ZNK6Bitmap8seek_topEiib,b8,b8,b8,b8,b8,b8,b8,__ZNK6Bitmap10seek_rightEiib,__ZNK6Bitmap11seek_bottomEiib,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
										,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
			var FUNCTION_TABLE_viiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
										  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
										  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
										  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN12_GLOBAL__N_111delete_holeERNSt3__16vectorIP6BitmapNS0_9allocatorIS3_EEEES7_S7_S3_i,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
										  ,b9,b9,b9,b9,b9,b9,b9,b9,b9];
			var FUNCTION_TABLE_iii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
									  ,b10,b10,b10,__ZN10Page_image12change_scaleEi,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
									  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK4Mask8distanceERK9Rectangle,b10,b10,b10,b10,b10
									  ,__ZNK9Rectangle8precedesERKS_,__ZNK9Rectangle10v_distanceERKS_,b10,b10,b10,__ZNK9Rectangle8includesERKS_,b10,b10,b10,b10,b10,b10,__ZNK9Rectangle17strictly_includesERKS_,b10,b10,__ZNK8Textline9characterEi,__ZNK9Rectangle16includes_hcenterERKS_,__ZNK9Rectangle10h_precedesERKS_,__ZNK9Rectangle16includes_vcenterERKS_,b10,__ZNK9Rectangle17v_overlap_percentERKS_,b10,b10,b10,__ZNK5Track7vcenterEi,b10,__ZNK5Track3topEi,__ZNK5Track6bottomEi,__ZNK8Textline12character_atEi,b10
									  ,b10,b10,b10,b10,__ZNK8Features9test_easyERK9Rectangle,__ZNK9Rectangle10v_includesEi,b10,b10,b10,__ZNK8Features9test_frstERK9Rectangle,b10,b10,__ZNK7Charset7enabledENS_5ValueE,b10,__ZNK8Features11test_235EszERK7Charset,__ZNK8Features15test_HKMNUuvwYyERK9Rectangle,b10,b10,b10,b10,__ZN7ProfileixEi,b10,b10,b10,__ZN7Profile6minimaEi,__ZNK8Features10test_hknwxERK9Rectangle,b10,b10,b10,b10
									  ,b10,__ZN7Profile6isctipEi,b10,b10,__ZNK6Bitmap11bottom_hookEPi,__ZNK8Features9test_lineERK9Rectangle,__ZNK8Features9test_miscERK9Rectangle,b10,__ZNK8Features13test_49ARegpqERK9Rectangle,__ZNK8Features9test_6abdERK7Charset,b10,b10,__ZNK9Rectangle14is_vcentred_inERKS_,b10,__ZNK9Rectangle14is_hcentred_inERKS_,__ZNK9Rectangle10h_overlapsERKS_,__ZNK9Rectangle10h_includesERKS_,__ZNK6Bitmap8top_hookEPi,b10,b10,b10,b10,b10,__ZNK9Rectangle10v_overlapsERKS_,b10,b10,b10,b10,b10,__ZNK9Character5maybeEi
									  ,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK8Features10test_solidERK9Rectangle,b10,__ZNK9Character5guessEi,b10,__ZN7Profile6iscpitEi,__ZN3UCS7composeEii,__ZNK7Charset4onlyENS_5ValueE,b10,__ZNK4Blob4holeEi,b10,__ZN9CharacteraSERKS_,__ZNK9Rectangle10h_includesEi,b10,b10,__ZN9Character4blobEi,b10,b10,b10,__ZNK9Character4blobEi,b10,b10,b10
									  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
									  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
			var FUNCTION_TABLE_iiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN9Character16set_merged_guessEiiii,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
										 ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
			var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
										,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN12_GLOBAL__N_19scan_pageERK10Page_imageRNSt3__16vectorINS_4ZoneENS3_9allocatorIS5_EEEEib,b12,__ZN9TextblockC2ERK9RectangleS2_RNSt3__16vectorIP4BlobNS3_9allocatorIS6_EEEE,b12
										,b12,b12,__ZNK9Textblock6dprintERK7Controlbb,b12,b12];

			return { _OCRAD_result_line: _OCRAD_result_line, _bitshift64Ashr: _bitshift64Ashr, _i64Subtract: _i64Subtract, _OCRAD_result_first_character: _OCRAD_result_first_character, _OCRAD_scale: _OCRAD_scale, _OCRAD_set_image_from_file: _OCRAD_set_image_from_file, _bitshift64Lshr: _bitshift64Lshr, _OCRAD_result_lines: _OCRAD_result_lines, _OCRAD_result_blocks: _OCRAD_result_blocks, _OCRAD_version: _OCRAD_version, _bitshift64Shl: _bitshift64Shl, _OCRAD_close: _OCRAD_close, _fflush: _fflush, _OCRAD_set_utf8_format: _OCRAD_set_utf8_format, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _OCRAD_set_exportfile: _OCRAD_set_exportfile, _memset: _memset, _OCRAD_set_threshold: _OCRAD_set_threshold, _OCRAD_transform: _OCRAD_transform, _OCRAD_add_filter: _OCRAD_add_filter, _OCRAD_recognize: _OCRAD_recognize, _OCRAD_result_chars_total: _OCRAD_result_chars_total, _OCRAD_open: _OCRAD_open, _OCRAD_result_chars_line: _OCRAD_result_chars_line, _OCRAD_get_errno: _OCRAD_get_errno, _i64Add: _i64Add, _OCRAD_set_image: _OCRAD_set_image, _OCRAD_result_chars_block: _OCRAD_result_chars_block, ___errno_location: ___errno_location, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _memcpy: _memcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
		})
		// EMSCRIPTEN_END_ASM
		(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
		var real__OCRAD_result_line = asm["_OCRAD_result_line"]; asm["_OCRAD_result_line"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_line.apply(null, arguments);
		};

		var real__OCRAD_set_exportfile = asm["_OCRAD_set_exportfile"]; asm["_OCRAD_set_exportfile"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_set_exportfile.apply(null, arguments);
		};

		var real__OCRAD_open = asm["_OCRAD_open"]; asm["_OCRAD_open"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_open.apply(null, arguments);
		};

		var real__OCRAD_result_first_character = asm["_OCRAD_result_first_character"]; asm["_OCRAD_result_first_character"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_first_character.apply(null, arguments);
		};

		var real__OCRAD_scale = asm["_OCRAD_scale"]; asm["_OCRAD_scale"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_scale.apply(null, arguments);
		};

		var real__OCRAD_set_image_from_file = asm["_OCRAD_set_image_from_file"]; asm["_OCRAD_set_image_from_file"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_set_image_from_file.apply(null, arguments);
		};

		var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__bitshift64Lshr.apply(null, arguments);
		};

		var real__OCRAD_result_lines = asm["_OCRAD_result_lines"]; asm["_OCRAD_result_lines"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_lines.apply(null, arguments);
		};

		var real__OCRAD_result_blocks = asm["_OCRAD_result_blocks"]; asm["_OCRAD_result_blocks"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_blocks.apply(null, arguments);
		};

		var real__OCRAD_version = asm["_OCRAD_version"]; asm["_OCRAD_version"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_version.apply(null, arguments);
		};

		var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__bitshift64Shl.apply(null, arguments);
		};

		var real__OCRAD_close = asm["_OCRAD_close"]; asm["_OCRAD_close"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_close.apply(null, arguments);
		};

		var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__fflush.apply(null, arguments);
		};

		var real__OCRAD_set_utf8_format = asm["_OCRAD_set_utf8_format"]; asm["_OCRAD_set_utf8_format"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_set_utf8_format.apply(null, arguments);
		};

		var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real____cxa_is_pointer_type.apply(null, arguments);
		};

		var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__bitshift64Ashr.apply(null, arguments);
		};

		var real__OCRAD_set_threshold = asm["_OCRAD_set_threshold"]; asm["_OCRAD_set_threshold"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_set_threshold.apply(null, arguments);
		};

		var real__OCRAD_transform = asm["_OCRAD_transform"]; asm["_OCRAD_transform"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_transform.apply(null, arguments);
		};

		var real__OCRAD_add_filter = asm["_OCRAD_add_filter"]; asm["_OCRAD_add_filter"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_add_filter.apply(null, arguments);
		};

		var real__OCRAD_recognize = asm["_OCRAD_recognize"]; asm["_OCRAD_recognize"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_recognize.apply(null, arguments);
		};

		var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__i64Subtract.apply(null, arguments);
		};

		var real__OCRAD_result_chars_line = asm["_OCRAD_result_chars_line"]; asm["_OCRAD_result_chars_line"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_chars_line.apply(null, arguments);
		};

		var real__OCRAD_result_chars_total = asm["_OCRAD_result_chars_total"]; asm["_OCRAD_result_chars_total"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_chars_total.apply(null, arguments);
		};

		var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__i64Add.apply(null, arguments);
		};

		var real__OCRAD_set_image = asm["_OCRAD_set_image"]; asm["_OCRAD_set_image"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_set_image.apply(null, arguments);
		};

		var real__OCRAD_result_chars_block = asm["_OCRAD_result_chars_block"]; asm["_OCRAD_result_chars_block"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_result_chars_block.apply(null, arguments);
		};

		var real__OCRAD_get_errno = asm["_OCRAD_get_errno"]; asm["_OCRAD_get_errno"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__OCRAD_get_errno.apply(null, arguments);
		};

		var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real____errno_location.apply(null, arguments);
		};

		var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real____cxa_can_catch.apply(null, arguments);
		};

		var real__free = asm["_free"]; asm["_free"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__free.apply(null, arguments);
		};

		var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__memmove.apply(null, arguments);
		};

		var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
			assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
			assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
			return real__malloc.apply(null, arguments);
		};
		var _OCRAD_result_line = Module["_OCRAD_result_line"] = asm["_OCRAD_result_line"];
		var _OCRAD_set_exportfile = Module["_OCRAD_set_exportfile"] = asm["_OCRAD_set_exportfile"];
		var _OCRAD_open = Module["_OCRAD_open"] = asm["_OCRAD_open"];
		var _OCRAD_result_first_character = Module["_OCRAD_result_first_character"] = asm["_OCRAD_result_first_character"];
		var _OCRAD_scale = Module["_OCRAD_scale"] = asm["_OCRAD_scale"];
		var _OCRAD_set_image_from_file = Module["_OCRAD_set_image_from_file"] = asm["_OCRAD_set_image_from_file"];
		var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
		var _OCRAD_result_lines = Module["_OCRAD_result_lines"] = asm["_OCRAD_result_lines"];
		var _OCRAD_result_blocks = Module["_OCRAD_result_blocks"] = asm["_OCRAD_result_blocks"];
		var _OCRAD_version = Module["_OCRAD_version"] = asm["_OCRAD_version"];
		var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
		var _OCRAD_close = Module["_OCRAD_close"] = asm["_OCRAD_close"];
		var _fflush = Module["_fflush"] = asm["_fflush"];
		var _OCRAD_set_utf8_format = Module["_OCRAD_set_utf8_format"] = asm["_OCRAD_set_utf8_format"];
		var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
		var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
		var _memset = Module["_memset"] = asm["_memset"];
		var _OCRAD_set_threshold = Module["_OCRAD_set_threshold"] = asm["_OCRAD_set_threshold"];
		var _OCRAD_transform = Module["_OCRAD_transform"] = asm["_OCRAD_transform"];
		var _OCRAD_add_filter = Module["_OCRAD_add_filter"] = asm["_OCRAD_add_filter"];
		var _OCRAD_recognize = Module["_OCRAD_recognize"] = asm["_OCRAD_recognize"];
		var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
		var _OCRAD_result_chars_line = Module["_OCRAD_result_chars_line"] = asm["_OCRAD_result_chars_line"];
		var _OCRAD_result_chars_total = Module["_OCRAD_result_chars_total"] = asm["_OCRAD_result_chars_total"];
		var _i64Add = Module["_i64Add"] = asm["_i64Add"];
		var _OCRAD_set_image = Module["_OCRAD_set_image"] = asm["_OCRAD_set_image"];
		var _OCRAD_result_chars_block = Module["_OCRAD_result_chars_block"] = asm["_OCRAD_result_chars_block"];
		var _OCRAD_get_errno = Module["_OCRAD_get_errno"] = asm["_OCRAD_get_errno"];
		var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
		var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
		var _free = Module["_free"] = asm["_free"];
		var runPostSets = Module["runPostSets"] = asm["runPostSets"];
		var _memmove = Module["_memmove"] = asm["_memmove"];
		var _malloc = Module["_malloc"] = asm["_malloc"];
		var _memcpy = Module["_memcpy"] = asm["_memcpy"];
		var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
		var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
		var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
		var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
		var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
		var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
		var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
		var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
		var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
		var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
		var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
		var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
		var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
		;

		Runtime.stackAlloc = asm['stackAlloc'];
		Runtime.stackSave = asm['stackSave'];
		Runtime.stackRestore = asm['stackRestore'];
		Runtime.establishStackSpace = asm['establishStackSpace'];

		Runtime.setTempRet0 = asm['setTempRet0'];
		Runtime.getTempRet0 = asm['getTempRet0'];



		// === Auto-generated postamble setup entry stuff ===




		function ExitStatus(status) {
			this.name = "ExitStatus";
			this.message = "Program terminated with exit(" + status + ")";
			this.status = status;
		};
		ExitStatus.prototype = new Error();
		ExitStatus.prototype.constructor = ExitStatus;

		var initialStackTop;
		var preloadStartTime = null;
		var calledMain = false;

		dependenciesFulfilled = function runCaller() {
			// If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
			if (!Module['calledRun']) run();
			if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
		}

		Module['callMain'] = Module.callMain = function callMain(args) {
			assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
			assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

			args = args || [];

			ensureInitRuntime();

			var argc = args.length+1;
			function pad() {
				for (var i = 0; i < 4-1; i++) {
					argv.push(0);
				}
			}
			var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
			pad();
			for (var i = 0; i < argc-1; i = i + 1) {
				argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
				pad();
			}
			argv.push(0);
			argv = allocate(argv, 'i32', ALLOC_NORMAL);


			try {

				var ret = Module['_main'](argc, argv, 0);


				// if we're not running an evented main loop, it's time to exit
				exit(ret, /* implicit = */ true);
			}
			catch(e) {
				if (e instanceof ExitStatus) {
					// exit() throws this once it's done to make sure execution
					// has been stopped completely
					return;
				} else if (e == 'SimulateInfiniteLoop') {
					// running an evented main loop, don't immediately exit
					Module['noExitRuntime'] = true;
					return;
				} else {
					if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
					throw e;
				}
			} finally {
				calledMain = true;
			}
		}




		function run(args) {
			args = args || Module['arguments'];

			if (preloadStartTime === null) preloadStartTime = Date.now();

			if (runDependencies > 0) {
				Module.printErr('run() called, but dependencies remain, so not running');
				return;
			}

			preRun();

			if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
			if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

			function doRun() {
				if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
				Module['calledRun'] = true;

				if (ABORT) return; 

				ensureInitRuntime();

				preMain();

				if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
					Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
				}

				if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

				if (Module['_main'] && shouldRunNow) Module['callMain'](args);

				postRun();
			}

			if (Module['setStatus']) {
				Module['setStatus']('Running...');
				setTimeout(function() {
					setTimeout(function() {
						Module['setStatus']('');
					}, 1);
					doRun();
				}, 1);
			} else {
				doRun();
			}
		}
		Module['run'] = Module.run = run;

		function exit(status, implicit) {
			if (implicit && Module['noExitRuntime']) {
				Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
				return;
			}

			if (Module['noExitRuntime']) {
				Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
			} else {

				ABORT = true;
				EXITSTATUS = status;
				STACKTOP = initialStackTop;

				exitRuntime();

				if (Module['onExit']) Module['onExit'](status);
			}

			if (ENVIRONMENT_IS_NODE) {
				process['exit'](status);
			} else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
				quit(status);
			}
			// if we reach here, we must throw an exception to halt the current execution
			throw new ExitStatus(status);
		}
		Module['exit'] = Module.exit = exit;

		var abortDecorators = [];

		function abort(what) {
			if (what !== undefined) {
				Module.print(what);
				Module.printErr(what);
				what = JSON.stringify(what)
			} else {
				what = '';
			}

			ABORT = true;
			EXITSTATUS = 1;

			var extra = '';

			var output = 'abort(' + what + ') at ' + stackTrace() + extra;
			if (abortDecorators) {
				abortDecorators.forEach(function(decorator) {
					output = decorator(output, what);
				});
			}
			throw output;
		}
		Module['abort'] = Module.abort = abort;

		// {{PRE_RUN_ADDITIONS}}

		if (Module['preInit']) {
			if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
			while (Module['preInit'].length > 0) {
				Module['preInit'].pop()();
			}
		}

		// shouldRunNow refers to calling main(), not run().
		var shouldRunNow = true;
		if (Module['noInitialRun']) {
			shouldRunNow = false;
		}


		run();

		// {{POST_RUN_ADDITIONS}}






		// {{MODULE_ADDITIONS}}



		var API = {};
		function _simple(image, opt){
			// for converting canvas mainImage data into pnm format
			if(image.data){
				var width     = image.width, height = image.height, src = image.data;
				var header    = "P5\n" + width + " " + height + "\n255\n";
				var j         = header.length;
				var dst       = new Uint8Array(j + width * height);
				var srcLength = src.length | 0, srcLength_16 = (srcLength - 16) | 0;

				for(var i = 0; i < j; i++) dst[i] = header.charCodeAt(i); // write the header
				var coeff_r = 4899, coeff_g = 9617, coeff_b = 1868;

				for (var i = 0; i <= srcLength_16; i += 16, j += 4) { // convert to grayscale 4 pixels at a time
					dst[j]     = (src[i] * coeff_r + src[i+1] * coeff_g + src[i+2] * coeff_b + 8192) >> 14;
					dst[j + 1] = (src[i+4] * coeff_r + src[i+5] * coeff_g + src[i+6] * coeff_b + 8192) >> 14;
					dst[j + 2] = (src[i+8] * coeff_r + src[i+9] * coeff_g + src[i+10] * coeff_b + 8192) >> 14;
					dst[j + 3] = (src[i+12] * coeff_r + src[i+13] * coeff_g + src[i+14] * coeff_b + 8192) >> 14;
				}
				for (; i < srcLength; i += 4, ++j)
					dst[j] = (src[i] * coeff_r + src[i+1] * coeff_g + src[i+2] * coeff_b + 8192) >> 14;
				image = dst;
			}
			// for pnm buffers
			if(image instanceof ArrayBuffer) image = new Uint8Array(image);
			API.write_file('/in.pnm', image);

			var desc = API.open();
			API.set_image_from_file(desc, '/in.pnm', opt.invert ? 1 : 0);

			if(opt.raw) API.set_exportfile(desc, '/out.txt');

			if(opt.filters){
				(opt.filters.forEach ? opt.filters : [opt.filters]).forEach(function(filter_name){
					if(["letters", "letters_only", "numbers", "numbers_only", "same_height", "upper_num", "upper_num_only"].indexOf(filter_name) != -1){
						API.add_filter(desc, filter_name);	
					}else throw "Invalid Filter";
				})
			}
			if(opt.transform){
				if(["none", "rotate90", "rotate180", "rotate270", "mirror_lr", "mirror_tb", "mirror_d1", "mirror_d2"].indexOf(opt.transform) != -1){
					API.transform(desc, opt.transform);
				}else throw "Invalid transformation!";
			}
			if(opt.scale){
				if(API.scale(desc, Math.round(opt.scale)) < 0)
					throw "Error scaling mainImage";
			}
			API.set_utf8_format(desc, 1);
			API.recognize(desc, 0);

			var ret;
			if(opt.raw){
				ret = API.read_text('/out.txt');
				API.delete_file('/out.txt');
			}else{
				var text = '';
				var block_count = API.result_blocks(desc);

				for(var i = 0; i < block_count; i++){
					var line_count = API.result_lines(desc, i);
					for(var j = 0; j < line_count; j++){
						var line = API.result_line(desc, i, j);
						text += line;
					}
				}
				ret = text;
			}
			API.close(desc);
			API.delete_file('/in.pnm');
			return ret;
		}

		// BEGIN API SECTION //
		API.set_print              = function(fn) { Module.print = fn };
		API.write_file             = function(filename, arr){ FS.writeFile(filename, arr, {encoding: 'binary'}) };
		API.read_file              = function(filename){ return FS.readFile(filename, {encoding: 'binary'}) };
		API.read_text              = function(filename){ return FS.readFile(filename, {encoding: 'utf8'}) };
		API.delete_file            = function(filename){ return FS.unlink(filename) };
		API.version                = Module.cwrap('OCRAD_version', 'string');
		API.open                   = Module.cwrap('OCRAD_open', 'number');
		API.close                  = Module.cwrap('OCRAD_close', 'number', ['number']);
		API.get_errno              = Module.cwrap('OCRAD_get_errno', 'number', ['number']);
		API.set_image              = Module.cwrap('OCRAD_set_image', 'number', ['number', 'number', 'number']);
		API.set_image_from_file    = Module.cwrap('OCRAD_set_image_from_file', 'number', ['number', 'string', 'number']);
		API.set_exportfile         = Module.cwrap('OCRAD_set_exportfile', 'number', ['number', 'string']);
		API.add_filter             = Module.cwrap('OCRAD_add_filter', 'number', ['number', 'string']);
		API.set_utf8_format        = Module.cwrap('OCRAD_set_utf8_format', 'number', ['number', 'number']);
		API.set_threshold          = Module.cwrap('OCRAD_set_threshold', 'number', ['number', 'number']);
		API.scale                  = Module.cwrap('OCRAD_scale', 'number', ['number', 'number']);
		API.transform              = Module.cwrap('OCRAD_transform', 'number', ['number', 'string']);
		API.recognize              = Module.cwrap('OCRAD_recognize', 'number', ['number', 'number']);
		API.result_blocks          = Module.cwrap('OCRAD_result_blocks', 'number', ['number']);
		API.result_lines           = Module.cwrap('OCRAD_result_lines', 'number', ['number', 'number']);
		API.result_chars_total     = Module.cwrap('OCRAD_result_chars_total', 'number', ['number']);
		API.result_chars_block     = Module.cwrap('OCRAD_result_chars_block', 'number', ['number', 'number']);
		API.result_chars_line      = Module.cwrap('OCRAD_result_chars_line', 'number', ['number', 'number', 'number']);
		API.result_line            = Module.cwrap('OCRAD_result_line', 'string', ['number', 'number', 'number']);
		API.result_first_character = Module.cwrap('OCRAD_result_first_character', 'number', ['number']);
		API._simple                = _simple;
		// END API SECTION //

		return API;
	}

	function createWebWorkerFromString(code){
		// http://stackoverflow.com/questions/5408406/web-workers-without-a-separate-javascript-file
		var blob;
		try {
			blob = new Blob([code], {type: 'application/javascript'});
		} catch (e) { // Backwards-compatibility
			var bb = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;
			blob = new bb();
			blob.append(code);
			blob = blob.getBlob();
		}
		var worker;
		var URL = window.URL || window.webkitURL;
		try {
			worker = new Worker(URL.createObjectURL(blob));
		} catch (e) {};
		return worker;
	}

	function parseOcradResultsFile(raw){
		var tb;
		while(!(tb = raw.shift().match(/^total text blocks (\d+)/)));
		var blocks = [], all_lines = [], all_letters = [];
		for(var i = 0; i < parseInt(tb[1]); i++){
			var lines = [];
			var th = raw.shift().match(/^text block (\d+) (\d+) (\d+) (\d+) (\d+)/); // i x y w h
			var lc = raw.shift().match(/^lines (\d+)/);
			for(var j = 0; j < parseInt(lc[1]); j++){
				var letters = [];
				var cc = raw.shift().match(/^line (\d+) chars (\d+) height (\d+)/);
				for(var k = 0; k < parseInt(cc[2]); k++){
					var e = raw.shift().match(/^\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s*;\s*(\d+)(\,?.+)?$/);
					var matches = [];
					if(parseInt(e[5]) > 0){
						var etc = e[6].trim();
						while(etc[0] == ',' && etc[1] == ' '){
							etc = etc.slice(2)
							var m = etc.match(/^\'(.+?)\'(\d+)/)
							matches.push({ letter: m[1], confidence: parseInt(m[2]) })
							etc = etc.slice(m[0].length)
						}
					}
					letters.push({
						x: parseInt(e[1]),
						y: parseInt(e[2]),
						width: parseInt(e[3]),
						height: parseInt(e[4]),
						matches: matches
					})
				}
				all_letters = all_letters.concat(letters)
				lines.push({
					height: parseInt(cc[3]),
					letters: letters
				})
			}
			all_lines = all_lines.concat(lines)
			blocks.push({
				x: parseInt(th[2]),
				y: parseInt(th[3]),
				width: parseInt(th[4]),
				height: parseInt(th[5]),
				lines: lines
			})
		}
		return {
			blocks: blocks,
			lines: all_lines,
			letters: all_letters
		};
	}

	var OCRAD = function OCRAD(image, arg1, arg2){
		// OCRAD(mainImage) -> text
		// OCRAD(mainImage, invert:boolean) -> text
		// OCRAD(mainImage, invert:boolean, raw:function) -> text
		// OCRAD(mainImage, options) -> text
		// OCRAD(mainImage, options, callback) -> promise
		var opt = {}, async = false, rawfn;
		if(typeof arg1 == "object"){
			opt = arg1;
			if(typeof arg2 == "function") async = arg2;
		}else if(typeof arg1 == "function"){
			async = arg1;
		}else if(typeof arg1 == "boolean" && typeof arg2 == "function") {
			opt = { invert: arg1 }
			rawfn = arg2;
		}
		if(rawfn || opt.verbose) opt.raw = true;
		if(opt.numeric) opt.filters = ["numbers_only"]; 
		// for functions that may generate images
		if(typeof image == 'function') image = image();
		if(image.getContext){
			// for <canvas> elements
			image = image.getContext('2d');
		}else if(image.tagName == "IMG" || image.tagName == "VIDEO"){
			// for <video> or <mainImage> elements
			var c = document.createElement('canvas');
			if(image.tagName == "IMG"){
				c.width  = image.naturalWidth;
				c.height = image.naturalHeight;
			}else if(image.tagName == "VIDEO"){
				c.width  = image.videoWidth;
				c.height = image.videoHeight;
			}
			var ctx = c.getContext('2d');
			ctx.drawImage(image, 0, 0);
			image = ctx;
		}
		// for canvas contexts
		if(image.getImageData) image = image.getImageData(0, 0, image.canvas.width, image.canvas.height);

		function postprocess(data){
			if(rawfn) data.split('\n').forEach(rawfn);
			if(opt.verbose) return parseOcradResultsFile(data.split('\n'));
			return data; // plain text probably
		}

		var worker;
		if(async){
			var code = 'var API = (' + createOcradInstance.toString() + ')(); onmessage = function(e){ postMessage(API._simple(e.data.mainImage, e.data.opt)) }';
			worker = createWebWorkerFromString(code);
			if(worker){
				worker.onmessage = function(e){
					async(postprocess(e.data));
					worker.terminate();
					// TODO: perhaps reuse workers?
				}
				worker.postMessage({ image: image, opt: opt })
			}else{
				async(postprocess(OCRAD._simple(image, opt))); // pseudo-async
			}
		}else{
			return postprocess(OCRAD._simple(image, opt));
		}
	}

	var APISingleton;

	function fwrap(name){
		return function(){
			OCRAD.preinit();
			return APISingleton[name].apply(APISingleton, arguments);
		}
	}

	OCRAD.preinit = function(){
		if(!APISingleton) {
			APISingleton = createOcradInstance();
		}
	}

	// BEGIN AUTOGENERATED //
	OCRAD.set_print                      = fwrap('set_print');
	OCRAD.write_file                     = fwrap('write_file');
	OCRAD.read_file                      = fwrap('read_file');
	OCRAD.read_text                      = fwrap('read_text');
	OCRAD.delete_file                    = fwrap('delete_file');
	OCRAD.version                        = fwrap('version');
	OCRAD.open                           = fwrap('open');
	OCRAD.close                          = fwrap('close');
	OCRAD.get_errno                      = fwrap('get_errno');
	OCRAD.set_image                      = fwrap('set_image');
	OCRAD.set_image_from_file            = fwrap('set_image_from_file');
	OCRAD.set_exportfile                 = fwrap('set_exportfile');
	OCRAD.add_filter                     = fwrap('add_filter');
	OCRAD.set_utf8_format                = fwrap('set_utf8_format');
	OCRAD.set_threshold                  = fwrap('set_threshold');
	OCRAD.scale                          = fwrap('scale');
	OCRAD.transform                      = fwrap('transform');
	OCRAD.recognize                      = fwrap('recognize');
	OCRAD.result_blocks                  = fwrap('result_blocks');
	OCRAD.result_lines                   = fwrap('result_lines');
	OCRAD.result_chars_total             = fwrap('result_chars_total');
	OCRAD.result_chars_block             = fwrap('result_chars_block');
	OCRAD.result_chars_line              = fwrap('result_chars_line');
	OCRAD.result_line                    = fwrap('result_line');
	OCRAD.result_first_character         = fwrap('result_first_character');
	OCRAD._simple                        = fwrap('_simple');
	// END AUTOGENERATED //

	return OCRAD;
})();

if (typeof module !== 'undefined' && module.exports) {
	module.exports = OCRAD;
}
